<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JVM-15(垃圾回收器)</title>
    <url>/posts/11567/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="15-1-🔱GC分类与性能指标"><a href="#15-1-🔱GC分类与性能指标" class="headerlink" title="15.1 🔱GC分类与性能指标"></a>15.1 🔱GC分类与性能指标</h3><blockquote>
<p>💬垃圾回收器概述</p>
</blockquote>
<ul>
<li>垃圾器没有在规范中进行过多规定，可以由不同的厂商、不同版本的JVM来实现。</li>
<li>由于JDK的版本处于高速迭代过程中，因此Java发展至今已经衍生了众多的GC版本。</li>
<li>从不同角度分析垃圾回收器，可将GC分为不同的类型。</li>
</ul>
<blockquote>
<p>📓垃圾回收器分类</p>
</blockquote>
<p>按照工作模式分：</p>
<ul>
<li>并发式垃圾回收器：与应用程序线程交替工作，以尽可能减少应用程序的停顿时间。</li>
<li>独占式垃圾回收器：一旦运行，就停止应用程序中的所有用户线程，直到垃圾回收过程完全结束。</li>
</ul>
<p>按照碎片处理方式分：</p>
<ul>
<li>压缩式垃圾回收器：回收完成后，对存活对象进行压缩整理，消除回收后的碎片。</li>
<li>非压缩式的垃圾回收器：回收完成不进行压缩。</li>
</ul>
<p>按照工作的内存区间分：</p>
<ul>
<li>年轻代垃圾回收器</li>
<li>老年代垃圾回收器</li>
</ul>
<blockquote>
<p>📈评估GC的性能指标</p>
</blockquote>
<ul>
<li>吞吐量：运行用户代码的时间占总运行时间的比例（总运行时间 = 程序的运行时间 + 内存回收的时间）</li>
<li>垃圾开销：吞吐量的补数，垃圾所用时间占总运行时间的比例</li>
<li>暂停时间：执行垃圾时，程序的工作线程被暂停的时间</li>
<li>频率：相对于应用程序的执行，操作发生的频率</li>
<li>内存占用：Java堆区所占的内存大小</li>
<li>快速：一个对象从诞生到被回收所经历的时间</li>
</ul>
<p>主要抓住两点：吞吐量和暂停时间</p>
<p>由于高吞吐量和低暂停时间是两个对立的条件，一个GC算法只可能针对两个目标之一，或者尝试一个二者的折中。</p>
<p>现在标准：在最大吞吐量优先的情况下，降低停顿时间。</p>
<h3 id="15-2-📖-不同的垃圾回收器概述"><a href="#15-2-📖-不同的垃圾回收器概述" class="headerlink" title="15.2 📖 不同的垃圾回收器概述"></a>15.2 📖 不同的垃圾回收器概述</h3><blockquote>
<p>🏛历史</p>
</blockquote>
<ul>
<li>1999年，JDK1.3.1，第一款GC，串行Serial GC。PerNew GC是Serial GC的多线程版本。</li>
<li>2002.2.26，JDK1.4.2，Parallel GC和Consurrent Mark Sweep GC。</li>
<li>Parallel GC在JDK6之后成为HotSpot默认GC。</li>
<li>2012年，在JDK1.7u4中，G1可用。</li>
<li>2017年，JDK9中G1变成默认的垃圾器，以替代CMS。</li>
<li>2018年3月，JDK10中G1垃圾回收器的并行完整垃圾回收，实现并行性来改善最坏情况下的延迟。</li>
<li>2018年9月，JDK11发布，引入Epsilon垃圾器，同时引入ZGC（可伸缩的低延迟垃圾回收器）。</li>
<li>2019年3月，JDK12发布，增强G1（自动返回未用堆内存给操作系统）。同时，引入Shenandoah GC（低停顿时间）。</li>
<li>2019年9月，JDK13发布，增强ZGC（自动返回未用堆内存给操作系统）。</li>
<li>2020年3月，JDK14发布，删除CMS，扩展ZGC在macOS和Windows上的应用。</li>
</ul>
<blockquote>
<p>🎨分类</p>
</blockquote>
<ul>
<li>串行回收器：Serial、Serial Old</li>
<li>并行回收器：ParNew、Parallel Scavenge、Parallel Old</li>
<li>并发回收器：CMS、G1</li>
</ul>
<blockquote>
<p>📷图示</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/11567/image-20210402212144659.png" class="" title="image-20210402212144659.png">

<ul>
<li>新生代回收器：Serial、ParNew、Parallel Scavenge</li>
<li>老年代回收器：Serial Old、Parallel Old、CMS</li>
<li>整堆回收器：G1</li>
</ul>
<blockquote>
<p>❓为什么要有很多垃圾回收器，一个不够吗？</p>
</blockquote>
<p>因为Java的使用场景很多，移动端、服务端等。所以就需要针对不同的场景，提供不同的垃圾回收器，提高垃圾的性能。</p>
<p>虽然我们会对各个器进行比较，但并非为了挑选一个最好的器出来。没有一种放之四海而皆准、任何场景都适用的完美器存在，更加没有万能的器。所以我们选择的只是对具体应用最合适的器。</p>
<blockquote>
<p>❓如何查看默认的垃圾器？</p>
</blockquote>
<ul>
<li>程序中：<code>-XX:+PrintCommandLineFlags</code></li>
<li>命令行：<code>jinfo -flag &lt;参数&gt; &lt;进程ID&gt;</code></li>
</ul>
<h3 id="15-3-1️⃣-Serial回收器：串行回收"><a href="#15-3-1️⃣-Serial回收器：串行回收" class="headerlink" title="15.3 1️⃣ Serial回收器：串行回收"></a>15.3 1️⃣ Serial回收器：串行回收</h3><blockquote>
<p>💬说明</p>
</blockquote>
<ul>
<li>Serial回收器是最基本、历史最悠久的垃圾回收器了。JDK1.3之前回收新生代的唯一选择。</li>
<li>Serial回收器作为HotSpot中Client模式下的默认新生代垃圾器。</li>
<li>Serial回收器采用复制算法、串行回收和STW机制的方式执行内存回收。</li>
<li>除了年轻代之外，Serial回收器还提供了用于执行老年代垃圾收集的Serial Old回收器。Serial Old收集器同样也采用了串行回收和STW机制，只不过内存回收算法使用的是标记-压缩算法。</li>
<li>Serial Old是运行在Client模式下默认的老年代的垃圾回收器。</li>
<li>Serial Old在Server模式下主要有两个用途：与新生代的Parallel Scanvenge配合使用，作为老年代CMS回收器的后备垃圾方案。</li>
</ul>
<blockquote>
<p>🌠特点</p>
</blockquote>
<p>Serial回收器是一个单线程的回收器，但它单线程的意义并不仅仅说明它只会使用一个CPU或一条回收线程去完成垃圾工作，更重要的是在它进行垃圾时，必须暂停其他所有的工作线程，直到它结束。</p>
<p>优势：简单而高效，对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾回收自然可以获得最高的单线程效率。运行在Client模式下的虚拟机是个不错的选择。</p>
<p>在用户的桌面应用场景中，可用内存一般不大，可以在较短时间内完成垃圾，只要不频繁发生，使用串行回收器是可以接受的。</p>
<p>对于交互性较强的应用而言，这种垃圾回收器是不能接受的。一般Java Web应用程序中是不会采用串行垃圾器的。</p>
<blockquote>
<p>⚙️配置</p>
</blockquote>
<p>在HotSpot虚拟机中，使用<code>-XX:+UseSerialGC</code>参数可以指定年轻代和老年代都使用串行器。等价于新生代使用Serial GC，且老年代还有那个Serial Old GC。</p>
<h3 id="15-4-2️⃣-ParNew回收器：并行回收"><a href="#15-4-2️⃣-ParNew回收器：并行回收" class="headerlink" title="15.4 2️⃣ ParNew回收器：并行回收"></a>15.4 2️⃣ ParNew回收器：并行回收</h3><blockquote>
<p>💬说明</p>
</blockquote>
<ul>
<li>如果说Serial GC是年轻代中的单线程垃圾回收器，那么ParNew收集器则是Serial回收器的多线程版本。（Par是Parallel的缩写，New只能处理新生代）</li>
<li>ParNew回收器除了采用并行回收的方式执行内存回收外，两款垃圾回收器之间几乎没有任何区别。ParNew收集器在年轻代中同样也是采用复制算法、STW机制。</li>
<li>ParNew是很多JVM运行在Server模式下新生代的默认垃圾收集器。</li>
<li>对于新生代，回收次数频繁，使用并行方式高效。</li>
<li>对于老年代，回收次数少，使用串行方式节省资源。</li>
</ul>
<blockquote>
<p>🌠特点</p>
</blockquote>
<ul>
<li>在多CPU的环境下，ParNew由于可以充分利用多CPU、多核心等物理硬件等资源优势，可以更快速地完成垃圾收集，提升程序的吞吐量。</li>
<li>但是在单个CPU的环境下，ParNew回收器并没有Serial高效。</li>
<li>除了Serial外，目前只有ParNew GC能与CMS收集器配合工作。</li>
</ul>
<blockquote>
<p>⚙️配置</p>
</blockquote>
<ul>
<li><code>-XX:+UseParNewGC</code>：手动指定使用ParNew回收器执行内存回收任务。（表示年轻代使用并行回收器，不影响老年代）</li>
<li><code>-XX:ParallelGCThreads</code>：限制线程数量。（默认开启和CPU数据相同的线程数）</li>
</ul>
<h3 id="15-5-3️⃣-Parallel回收器：吞吐量优先"><a href="#15-5-3️⃣-Parallel回收器：吞吐量优先" class="headerlink" title="15.5 3️⃣ Parallel回收器：吞吐量优先"></a>15.5 3️⃣ Parallel回收器：吞吐量优先</h3><blockquote>
<p>💬说明</p>
</blockquote>
<ul>
<li>HotSpot的年轻代除了拥有ParNew回收器是基于并行回收的以外，Parallel Scavenge同样也采用了复制算法、并行回收和STW机制。</li>
<li>和ParNew回收器不同，Parallel Scavenge回收器的目标则是达到一个可控制的吞吐量，它也被称为吞吐量优先的垃圾回收器，自适应调节策略也是Parallel Scavenge的一个重要区别。</li>
<li>高吞吐量则可以高效率地利用CPU时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。因此，常见在服务器环境中使用。例如，那些执行批量处理、订单处理、工资支付、科学计算的应用程序。</li>
<li>Parallel回收器在JDK1.6时提供了用于执行老年代垃圾收集的Parallel Old收集器，用来代替老年代的Serial Old收集器。</li>
<li>Parallel Old回收器采用了标记-压缩算法，但同样也是基于并行回收和STW机制。</li>
</ul>
<blockquote>
<p>🌠特点</p>
</blockquote>
<p>在程序吞吐量优先的应用场景中，Parallel Old收集器的组合，在Server模式下的内存回收性能很不错。</p>
<blockquote>
<p>⚙️配置</p>
</blockquote>
<ul>
<li><code>-XX:+UseParallelGC</code>：手动指定年轻代使用Parallel并行回收器。</li>
<li><code>-XX:+UseParallelOldGC</code>：手动指定老年代使用Parallel并行回收器。</li>
<li><code>-XX:ParallelGCThreads</code>：设置年轻代并行回收器的线程数。一般地，最好与CPU数量相等，以避免过多的线程数影响垃圾收集性能。</li>
<li><code>-XX:MaxGCPauseMills=N</code>：设置垃圾回收器最大停顿时间（即STW的时间），单位是毫秒。为了尽可能把停顿时间控制在<code>MaxGCPauseMills</code>以内，收集器在工作时会调整Java堆大小或者其他一些参数。对于用户来讲，停顿时间越短体验越好；但是在服务端，我们注重高并发，整体的吞吐量。所以服务器端适合Parallel，进行控制。</li>
<li><code>-XX:GCTimeRatio=N</code>：垃圾收集时间占总时间的比例（= 1 / [N + 1]），用于衡量吞吐量的大小。0&lt;N&lt;100，默认值99，即垃圾回收时间不超过1%。与上一个参数有一定矛盾性，暂停时间越长，Radio参数就容易超过设定的比例。</li>
<li><code>-XX:+UseAdaptiveSizePolicy</code>：设置Parallel Scavenge收集器具有自适应调节策略。在这种模式下，年轻代的大小、Eden和Survivor的比例、晋升老年代的对象年龄等参数会被自动调整，已达到在堆大小、吞吐量和停顿时间之间的平衡点。在手动调优比较困难的场合，课直接使用这种自适应的方式，仅指定虚拟机的最大堆、目标的吞吐量（GCTimeRatio）和停顿时间（MaxGCPauseMills），让虚拟机自己完成调优工作。</li>
<li>在默认情况下，当CPU数量小于8个时，ParallelGCThreads的值等于CPU数量；在CPU数量大于8个时，ParallelGCThreads的值等于3 + [5 * CPU_COUNT / 8]。</li>
<li>JDK8默认使用Parallel并行回收器，后期的JDK中年轻代和老年代任意一个开启Parallel并行回收器，另一个也会被开启，互相激活。</li>
</ul>
<h3 id="15-6-4️⃣-CMS回收器：低延迟"><a href="#15-6-4️⃣-CMS回收器：低延迟" class="headerlink" title="15.6 4️⃣ CMS回收器：低延迟"></a>15.6 4️⃣ CMS回收器：低延迟</h3><blockquote>
<p>💬说明</p>
</blockquote>
<ul>
<li>在JDK1.5时期，HotSpot推出了一款在强交互应用中几乎可认为有划时代意义的垃圾回收器：CMS(Concurrent-Mark-Sweep)回收器，这款回收器是HotSpot虚拟机中第一款真正意义上的并发回收器，它第一次实现了让垃圾收集线程与用户线程同时工作。</li>
<li>CMS回收器的关注点是尽可能缩短垃圾收集时用户线程的停顿时间。停顿时间越短（低延迟）就越适合与用户交互的程序，良好的响应速度能提升用户体验。</li>
<li>CMS的垃圾收集算法采用标记-清除算法，并且也会STW。</li>
<li>不幸的是，CMS作为老年代的回收器，却无法与JDK1.4.0中已经存在的新生代回收器Parallel Scavenge配合工作，所以在JDK1.5中使用CMS来收集老年代的时候，新生代只能选择ParNew或者Serial收集器中的一个。</li>
<li>JDK9中CMS被标记为Deprecate，JDK14中CMS被彻底删除。</li>
<li>在G1出现之前，CMS的使用还是非常广泛的。一直到今天，仍然有很多系统使用CMS。</li>
</ul>
<blockquote>
<p>🔍过程</p>
</blockquote>
<p>CMS整个过程比之前的收集器要复杂，整个过程分为4个主要阶段，即初始标记阶段、并发标记阶段、重新标记阶段和并发清除阶段。</p>
<p>（1）初始标记（Initial-Mark）阶段：在这个阶段中，程序所有的工作线程都将会因为STW机制而出现短暂的暂停，这个阶段的主要任务仅仅只是标记出GC Roots能直接关联到的对象。一旦标记完成之后就会恢复之前被暂停的所有应用线程。由于直接关联对象比较小，所以这里的速度非常快。</p>
<p>（2）并发标记（Concurrent-Mark）阶段：从GC Roots的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是不需要停顿用户线程，可以与垃圾收集线程一起并发运行。</p>
<p>（3）重新标记（Remark）阶段：由于在并发标记阶段中，程序的工作线程会和垃圾收集线程同时运行或者交叉运行，因此为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间通常会比初始标记阶段稍长一些，但也远比并发标记阶段的时间短。</p>
<p>（4）并发清除（Concurrent-Sweep）阶段：此阶段清理删除标记阶段判断的已经死亡的对象，释放内存空间。由于不需要移动存活对象，所以这个阶段也是可以与用户线程同时并发的。</p>
<p>尽管CMS收集器采用的是并发回收（非独占式），但是在其初始化标记和再次标记这两个阶段中仍然需要执行“Stop-the-World”机制暂停程序中的工作线程，不过暂停时间并不会太长，因此可以说明目前所有的垃圾收集器都做不到完全不需要“stop-the-World”，只是尽可能地缩短暂停时间。</p>
<p>由于最耗费时间的并发标记与并发清除阶段都不需要暂停工作，所以整体的回收是低停顿的。</p>
<p>另外，由于在垃圾收集阶段用户线程没有中断，所以在CMS回收过程中，还应该确保应用程序用户线程有足够的内存可用。因此，CMS收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，而是当堆内存使用率达到某一阈值时，便开始进行回收，以确保应用程序在CMS工作过程中依然有足够的空间支持应用程序运行。要是CMS运行期间预留的内存无法满足程序需要，就会出现一次“Concurrent Mode Failure” 失败，这时虚拟机将启动后备预案：临时启用Serial old收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。</p>
<p>CMS收集器的垃圾收集算法采用的是标记清除算法，这意味着每次执行完内存回收后，由于被执行内存回收的无用对象所占用的内存空间极有可能是不连续的一些内存块，不可避免地将会产生一些内存碎片。那么CMS在为新对象分配内存空间时，将无法使用指针碰撞（Bump the Pointer）技术，而只能够选择空闲列表（Free List）执行内存分配。</p>
<p>那么CMS为什么不采用标记整理算法呢？因为并发收集垃圾的时候，用户线程不会暂停，整理内存会导致用户线程的对象内存地址改变。</p>
<blockquote>
<p>🌠特点</p>
</blockquote>
<p>优点：</p>
<ul>
<li>并发收集</li>
<li>低延迟</li>
</ul>
<p>缺点：</p>
<ul>
<li>会产生内存碎片。导致并发清除后，用户线程可用的空间不足。在无法分配大对象的情况下，不得不提前触发Full GC。</li>
<li>CMS收集器对CPU资源非常敏感。在并发阶段，它虽然不会导致用户停顿，但是会因为占用了一部分线程而导致应用程序变慢，总吞吐量会降低。</li>
<li>CMS收集器无法处理浮动垃圾。在并发标记阶段由于程序的工作线程和垃圾收集线程是同时运行或者交叉运行的，那么在并发标记阶段如果产生新的垃圾对象，CMS将无法对这些垃圾对象进行标记，最终会导致这些新产生的垃圾对象没有被及时回收，从而只能在下一次执行GC时释放这些之前违背回收的内存空间。</li>
</ul>
<blockquote>
<p>⚙️配置</p>
</blockquote>
<ul>
<li><code>-XX:+UseConcMarkSweepGC</code>：手动指定使用CMS收集器执行内存回收任务。开启该参数后自动将<code>-XX:+UseParNewGC</code>打开，即：ParNew(Young) + CMS(Old) + Serial Old的组合。</li>
<li><code>-XX:CMSInitiatingOccupanyFraction</code>：设置堆内存使用率的阈值，一旦达到该阈值，便开始回收。</li>
<li><code>-XX:+UseCMSCompactAtFullCollection</code>：用于指定在执行完Full GC后对内存空间进行压缩整理，以此避免内存碎片的产生。不过由于内存压缩整理过程无法并发执行，所带来的问题就是停顿时间变得更长了。</li>
<li><code>-XX:CMSFullGCsBeforeCompaction</code>：设置在执行多少次Full GC后对内存空间进行压缩整理。</li>
<li><code>-XX:ParallelCMSThreads</code>：设置CMS的线程数量。CMS默认启动的线程数是（ParallelGCThreads + 3）/ 4，ParallelGCThreads是年轻代并行回收器的线程数。当CPU资源比较紧张时，受到CMS收集器线程的影响，应用程序的性能在垃圾回收阶段会非常糟糕。</li>
</ul>
<blockquote>
<p>✨小结</p>
</blockquote>
<ul>
<li>如果你最想要最小化地使用内存和并行开销，选择Serial GC</li>
<li>如果你想要最大化应用程序的吞吐量，选择Parallel GC</li>
<li>如果你想要最小化GC的中断或者停顿时间，选择CMS GC</li>
</ul>
<h3 id="15-7-5️⃣-G1回收器：区域化分代式"><a href="#15-7-5️⃣-G1回收器：区域化分代式" class="headerlink" title="15.7 5️⃣ G1回收器：区域化分代式"></a>15.7 5️⃣ G1回收器：区域化分代式</h3><blockquote>
<p>🌃背景</p>
</blockquote>
<p>随着应用程序所应对的业务越来越庞大、复杂，用户越来越多，没有GC就不能保证应用程序正常进行，而造成STW的GC又跟不上实际的需求，所以才会不断尝试对GC进行优化。G1(Garbage-First)垃圾回收器是在Java7 update 4之后引入的一个新的垃圾回收器，是当今回收器技术发展的最前沿成果之一。</p>
<p>与此同时，为了适应现在不断扩大的内存和不断增加的处理器数量，进一步降低暂停时间，同时兼顾良好的吞吐量。</p>
<p>官方给G1设定的目标是在延迟可控的情况下获得尽可能高的吞吐量，所以才担起“全功能收集器”的责任与期望。</p>
<blockquote>
<p>⚡名字</p>
</blockquote>
<ul>
<li>因为G1是一个并行回收器，它把堆内存分割为很多不相关的区域（Region）（物理上不连续的）。使用不同的Region来表示Eden、幸存者0区、幸存者1区，老年代等。</li>
<li>G1 GC有计划地避免在整个Java堆中进行全区域的垃圾收集。G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的区域。</li>
<li>由于这种方式的侧重点在于回收垃圾最大量的Region，所以我们给G1起一个名字：垃圾优先（Garbage-First）。</li>
</ul>
<blockquote>
<p>💬说明</p>
</blockquote>
<p>G1是一款面向服务端应用的垃圾回收器，主要针对配备多核CPU及大容量内存的机器，以极高概率满足GC停顿时间的同时，还兼具高吞吐量的性能特征。</p>
<p>在JDK1.7版本正式启用，移除了Experimental的标识。在JDK8中还不是默认的垃圾回收器，需要使用<code>-XX:+UseG1GC</code>来启用。在JDK9以后成为默认垃圾回收器，取代了CMS回收器以及Parallel + Parallel Old组合，被Oracle官方称为全功能的垃圾收集器。</p>
<blockquote>
<p>🌠特点</p>
</blockquote>
<p>与其它的GC回收器相比，G1使用了全新的分区算法，特点如下：</p>
<p>（1）并行与并发</p>
<ul>
<li>并行性：G1在回收期间，可以有多个GC线程同时工作，有效利用多核计算能力。</li>
<li>并发性：G1拥有与应用程序交替执行的能力，部分工作可以和应用程序同时执行，因此，一般来说，不会在整个回首阶段发生完全阻塞应用程序的情况。</li>
</ul>
<p>（2）分代收集</p>
<ul>
<li>从分代上看，G1依然属于分代型垃圾回收器，它会区分年轻代和老年代，年轻代依然有Eden区和Survivor区。但从堆的结构上看，它不要求整个Eden区、年轻代或者老年代都是连续的，也不再坚持固定大小和固定数量。</li>
<li>将堆空间分为若干个区域，这些区域中包含了逻辑上的年轻代和老年代。</li>
<li>和之前的各类回收器不同，它同时兼顾年轻代和老年代。对比其他回收器，或者工作在年轻代、或者工作在老年代。</li>
</ul>
<p>（3）空间整合</p>
<ul>
<li>CMS：标记-清除算法、内存碎片、若干次GC后一次碎片整理。</li>
<li>G1将内存划分为一个个的region，内存的回收是以region作为基本单位的。region之间是复制算法，但整体上实际可看做是标记-压缩算法，两种算法都可以避免内存碎片。这种特性有利于程序长时间运行，分配大对象时不会因为无法找到连续内存空间而提前触发下一次GC。尤其是当Java堆非常大的时候。G1的优势更加明显。</li>
</ul>
<p>（4）可预测的停顿时间模型</p>
<p>这是G1相对于CMS的另一大优势，G1除了追求低停顿外，还能建立可预测的停顿时间模型，能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。</p>
<ul>
<li>由于分区的原因，G1可以只选取部分区域进行内存回收，这样缩小了回收的范围，因此对于全局停顿情况的发生也能得到较好的控制。</li>
<li>G1跟踪各个region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需的时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的region。保证了G1回收器在有限的时间内可以获取尽可能高的收集效率。</li>
<li>相比于CMS GC，G1未必能做到CMS在做好的情况下的延时停顿，但是最差情况要好很多。</li>
</ul>
<blockquote>
<p>🌠缺点</p>
</blockquote>
<p>相较于CMS，G1还不具备全方位、压倒性优势。比如在用户程序运行过程中，G1无论是为了垃圾收集产生的内存占用还是程序运行时的额外执行负载都要比CMS要高。</p>
<p>从经验上来说，在小内存应用上CMS的表现大概率会优于G1，而G1在大内存应用上则发挥其优势。平衡点在6~8GB之间。</p>
<blockquote>
<p>⚙️配置</p>
</blockquote>
<ul>
<li><code>-XX:+UseG1GC</code>：手动指定使用G1收集器执行内存回收任务。</li>
<li><code>-XX:G1HeapRegionSize</code>：设置每个region的大小。值是2的幂，范围是1MB到32MB之间，目标是根据最小的Java堆大小划分出约2048个区域。默认是堆内存的1/2000。</li>
<li><code>-XX:MaxGCPauseMills</code>：设置期望达到的最大GC停顿时间指标（JVM会尽力实现，但不保证达到）。默认值是200ms。</li>
<li><code>-XX:ParallelGCThread</code>：设置STW工作线程的值。最多设置为8。</li>
<li><code>-XX:ConcGCThreads</code>：设置并发标记的线程数。将n设置为并发垃圾回收线程数（ParallelGCThreads）的1/4左右。</li>
<li><code>-XX:InitiatingHeapOccupancyPercent</code>：设置触发并发GC周期的Java堆占用率阈值。超过此值，就触发GC。默认值是45。</li>
</ul>
<blockquote>
<p>💻使用</p>
</blockquote>
<p>G1的设计原则就是简化JVM性能调优，开发人员只需要简单的三步即可完成调优：</p>
<p>（1）开启G1垃圾回收器</p>
<p>（2）设置堆的最大内存</p>
<p>（3）设置最大的停顿时间</p>
<p>G1提供了三种垃圾回收模式：Young GC、Mixed GC和Full GC，在不同的条件下被触发。</p>
<blockquote>
<p>🔮适用场景</p>
</blockquote>
<ul>
<li><p>面向服务端应用，针对具有大内存、多处理器的机器。</p>
</li>
<li><p>最主要的应用需要低GC延迟，并具有大堆的应用程序提供解决方案。</p>
</li>
<li><p>用来替换掉JDK1.5中的CMS收集器，在以下情况下，使用G1比CMS好：</p>
<ul>
<li>超过50%的Java堆被活动数据占用</li>
<li>对象分配频率或年代提升频率变化很大</li>
<li>GC停顿时间过长</li>
</ul>
</li>
<li><p>HotSpot垃圾回收器里，除了G1以外，其他的垃圾回收器使用内置的JVM线程执行GC的多线程操作，而G1 GC可以采用应用程序承担后台运行的GC工作，即当JVM的GC线程处理速度慢时，系统会调用应用程序线程帮助加速垃圾回收过程。</p>
</li>
</ul>
<blockquote>
<p>🔲分区region：化整为零</p>
</blockquote>
<p>使用G1回收器时，它将整个Java堆划分为约2048 个大小相同的独立region块，每个region块大小根据堆空间的实际大小而定，整体被控制在1MB到32MB之间，且为2的N次幂，即1MB，2MB，4MB，8MB，16MB，32MB。可以通过<code>-XX:G1HeapRegionSize</code>设定。所有的region大小都相同，且在JVM生命周期内不会被改变。</p>
<p>虽然还保留着新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分region（不需要连续）的集合。通过region的动态分配方式实现逻辑上的连续。</p>
<p>一个region有可能属于Eden，Survivor或者Old内存区域。但是一个region只可能属于一个角色。G1垃圾回收器还增加了一种新的内存区域，叫做Humongous内存区域。</p>
<p>设置Humongous的原因：对于堆中的大对象，默认直接会被分配到老年代，但是如果它是一个短期存在的大对象，就会对垃圾收集器造成负面影响。为了解决这个问题，G1划分了一个Humongous区，它用来专门存放大对象。如果一个H区装不下一个大对象，那么G1会寻找连续的Humongous区来存储。为了能找到连续的Humongous区，有时候不得不启动Full GC。G1的大多数行为都把H区作为老年代的一部分来看待。</p>
<blockquote>
<p>⏳回收过程</p>
</blockquote>
<p>G1 GC的垃圾回收过程主要包括如下三个环节：</p>
<ul>
<li>年轻代 GC（Young GC）</li>
<li>老年代并发标记过程 （Concurrent Mark）</li>
<li>混合回收（Mixed GC）</li>
<li>如果需要，单线程、独占式、高强度的Full GC还是继续存在的。它针对GC的评估失败提供了一种失败保护机制，即强力回收。</li>
</ul>
<p>应用程序分配内存，当年轻代的Eden区用尽时开始年轻代回收过程：G1的年轻代收集阶段是一个并行的独占式收集器。在年轻代回收期，G1 GC暂停所有应用程序线程，启动多线程执行年轻代回收。然后从年轻代区间移动存活对象到Survivor区间或者老年区间，也有可能是两个区间都会涉及。</p>
<p>当堆内存使用达到一定值（默认45%）时，开始老年代并发标记过程。</p>
<p>标记完成马上开始混合回收过程。对于一个混合回收期，G1 GC从老年区间移动存活对象到空闲区间，这些空闲区间也就成为了老年代的一部分。和年轻代不同，老年代的G1回收器和其他GC不同，G1的老年代回收器不需要整个老年代被回收，一次只需要扫描/回收一部分老年代的region就可以了。同时，这个老年代region是和年轻代一起被回收的。</p>
<blockquote>
<p>🟪Remembered Set</p>
</blockquote>
<p>一个对象被不同区域引用的问题</p>
<p>一个region不可能是孤立的，一个region中的对象可能被其他任意region中对象引用，判断对象存活时，是否需要扫描整个Java堆才能保证准确？</p>
<p>在其他的分代回收器，也存在在这样的问题，G1更突出。回收新生代也不得不同时扫描老年代？这样的话会降低Minor GC的效率。</p>
<p>解决方法：</p>
<p>无论G1还是其他分代回收器，JVM都是使用Remembered Set来避免全局扫描。</p>
<p>每个Region都有一个对应的Remembered Set；每次Reference类型数据写操作时，都会产生一个Write Barrier暂时中断操作；然后检查将要写入的引用指向的对象是否和该Regerence类型数据在不同的Region（其他回收器：检查老年代对象是否引用了新生代对象）。如果不同，通过CardTable把相关引用信息记录到引用指向对象的所在region对应的Remembered Set中。</p>
<p>当进行垃圾收集时，在GC根节点的枚举范围加入Remembered Set；就可以保证不进行全局扫描，也不会遗漏。</p>
<blockquote>
<p>🔍回收细节</p>
</blockquote>
<p>（1）年轻代GC</p>
<p>JVM启动时，G1先准备好Eden区，程序在运行过程中不断创造对象到Eden区，当Eden空间耗尽时，G1会启动一次年轻代垃圾回收过程。</p>
<p>年轻代垃圾回收只会回收Eden区和Survivor区。</p>
<p>Young GC时，首先G1停止应用程序的执行（STW），G1创建回收集（Collection Set），回收集是指需要被回收的内存分段的集合，年轻代回收过程的回收集包含年轻代Eden区和Survivor区所有的内存分段。</p>
<p>然后开始如下回收过程：</p>
<p>第一阶段：扫描根。根是指static变量指向的对象，正在执行的方法调用链上的局部变量等。根引用连同RSet记录的外部引用作为扫描存活对象的入口。</p>
<p>第二阶段：更新RSet。处理dirty card queue中的card，更新RSet。此阶段完成后，RSet可以准确的反映老年代所在的内存分段中对象的引用。</p>
<p>第三阶段：处理RSet。识别被老年代对象指向的Eden中的对象，这些被指向的Eden中的对象被认为是存活的对象。</p>
<p>第四阶段：复制对象。此阶段，对象树被遍历，Eden区内存段中存活的对象会被复制到Survicor区中空的内存分段，Survivor区内存段中存活的对象如果年龄未达到阈值，年龄会加1，达到阈值会被复制到Old区中空的内存分段。如果Survivor空间不够，Eden空间的部分数据会直接晋升到老年代空间。</p>
<p>第五阶段：处理引用。处理Soft，Weak，Phantom，Final，JNI Weak等引用。最终Eden空间的数据为空，GC停止工作，而目标内存中的对象都是连续存储的，没有碎片，所以复制过程可以达到内存整理的效果，减少碎片。</p>
<p>（2）并发标记</p>
<p>第一阶段：初始标记阶段。标记从根节点直接可达的对象。这个阶段是STW的，并且会触发一次年轻代GC。</p>
<p>第二阶段：根区域扫描。G1 GC扫描Survivor区直接可达的老年代区域对象，并标记被引用的对象。这一过程必须在Young GC之前完成。</p>
<p>第三阶段：并发标记。在整个堆中进行并发标记（和应用程序并发执行），此过程可能被Young GC中断。在并发标记阶段，若发现区域对象中的所有对象都是垃圾，那这个区域会被立即回收。同时，并发标记过程中，会计算每个区域的对象活性（区域中存活对象的比例）。</p>
<p>第四阶段：再次标记。由于应用程序持续进行，需要修正上一次的标记结果。是STW的。G1中采用了比CMS更快的初始快照算法：snapshot-at-the-beginning（SATB）。</p>
<p>第五阶段：独占清理。计算各个区域的存货对象和GC回收比例，并进行排序，识别可以混合回收的区域。为下阶段做铺垫，是STW的。</p>
<p>第六阶段：并发清理阶段：识别并清理完全空闲的区域。</p>
<p>（3）混合回收</p>
<p>当越来越多的对象晋升到老年代Old Region时，为了避免堆内存被耗尽，虚拟机会触发一个混合的垃圾收集器，即Mixed GC，该算法并不是一个Old GC，该算法并不是一个Old GC，除了回收整个Young Region，还会回收一部分的Old Region。这里需要注意：是一部分老年代，而不是全部老年代。可以选择哪些Old Region进行收集，从而可以对垃圾回收的耗时时间进行控制。也要注意的Mixed GC并不是Full GC。</p>
<p>并发标记结束以后，老年代中百分百为垃圾的内存分段被回收了，部分为垃圾的内存分段被计算了出来。默认情况下，这些老年代的内存分段会分8次（可以通过<code>-XX:G1MixedGCCountTarget</code>设置）被回收。</p>
<p>混合回收的回收集（Collection Set）包括八分之一的老年代内存分段，Eden区内存分段，Survivor区内存分段。混合回收的算法和年轻代回收的算法完全一样，只是回收集多了老年代的内存分段。</p>
<p>由于老年代中的内存分段默认分8次回收，G1会优先回收垃圾多的内存分段。垃圾占内存分段比例越高的，越会被先回收。并且有一个阈值会决定内存分段是否被回收，<code>-XX:G1MixedGCLiveThresholdPercent</code>，默认为65%，意思是垃圾占内存分段比例要达到65%才会被回收。如果垃圾占比太低，意味着存活的对象占比高，在复制的时候会花费更多的时间。</p>
<p>混合回收并不一定要进行8次。有一个阈值<code>-XX:G1HeapWastePercent</code>，默认值为10%，意思是允许整个堆内存中有10%的空间被浪费，意味着如果发现可以回收的垃圾占堆内存的比例低于10%，则不再进行混合回收。因为GC会花费很多的时间但是回收到的内存却很少。</p>
<p>（4）可选过程：Full GC</p>
<p>G1的初衷就是要避免Full GC的出现。但是如果上述方式不能正常工作，G1会停止应用程序的执行（STW），使用单线程的内存回收算法进行垃圾回收，性能会非常差，应用程序停顿时间会很长。</p>
<p>要避免Full GC的发生，一旦发生需要进行调整。什么时候会发生Full GC呢？比如堆内存太小，当G1在复制存货对象的时候没有空的内存分段可用，则会回退到Full GC，这种情况可以通过增大内存解决。</p>
<p>导致G1 Full GC的原因可能有两个：</p>
<p>Evacuation的时候没有足够的to-space来存放晋升的对象；并发处理过程完成之前空间耗尽。</p>
<blockquote>
<p>🤞优化建议</p>
</blockquote>
<p>年轻代大小：</p>
<ul>
<li>避免使用<code>-Xmn</code>或<code>-XX:NewRatio</code>等相关选项显示设置年轻代大小</li>
<li>固定年轻代的大小会覆盖暂停时间目标</li>
</ul>
<p>暂停时间目标不要太过严苛</p>
<ul>
<li>G1 GC的吞吐量是90%的应用程序时间和10%的垃圾回收时间</li>
<li>评估G1 GC的吞吐量时，暂停时间目标不要太过严苛。目标太过严苛表示你原因承受更多的垃圾回收开销，而这些会直接影响到吞吐量。</li>
</ul>
<h3 id="15-8-🌈-垃圾回收器总结"><a href="#15-8-🌈-垃圾回收器总结" class="headerlink" title="15.8 🌈 垃圾回收器总结"></a>15.8 🌈 垃圾回收器总结</h3><blockquote>
<p>🆚比较</p>
</blockquote>
<table>
<thead>
<tr>
<th>垃圾回收器</th>
<th>分类</th>
<th>作用位置</th>
<th>使用算法</th>
<th>特点</th>
<th>适用场景</th>
</tr>
</thead>
<tbody><tr>
<td>Serial</td>
<td>串行运行</td>
<td>新生代</td>
<td>复制算法</td>
<td>响应速度优先</td>
<td>适用于单CPU环境下的Client模式</td>
</tr>
<tr>
<td>ParNew</td>
<td>并行运行</td>
<td>新生代</td>
<td>复制算法</td>
<td>响应速度优先</td>
<td>多CPU环境Server模式下与CMS配合使用</td>
</tr>
<tr>
<td>Parallel</td>
<td>并行运行</td>
<td>新生代</td>
<td>复制算法</td>
<td>吞吐量优先</td>
<td>适用于后台计算而不需要太多交互的场景</td>
</tr>
<tr>
<td>Serial Old</td>
<td>串行运行</td>
<td>老年代</td>
<td>标记-压缩算法</td>
<td>响应速度优先</td>
<td>适用于单CPU环境下的Client模式</td>
</tr>
<tr>
<td>Parallel Old</td>
<td>并行运行</td>
<td>老年代</td>
<td>标记-压缩算法</td>
<td>吞吐量优先</td>
<td>适用于后台运算而不需要太多交互的场景</td>
</tr>
<tr>
<td>CMS</td>
<td>并发运行</td>
<td>老年代</td>
<td>标记-清除算法</td>
<td>响应速度优先</td>
<td>适用于互联网或者B/S业务</td>
</tr>
<tr>
<td>G1</td>
<td>并发、并行运行</td>
<td>新生代、老年代</td>
<td>标记-压缩算法、复制算法</td>
<td>响应速度优先</td>
<td>面向服务端</td>
</tr>
</tbody></table>
<blockquote>
<p>💡提示</p>
</blockquote>
<ul>
<li>没有最好的回收器，更没有万能的回收器。</li>
<li>调优永远是针对特定场景、特定需求，不存在一劳永逸的回收器</li>
</ul>
<h3 id="15-9-📄-GC日志分析"><a href="#15-9-📄-GC日志分析" class="headerlink" title="15.9 📄 GC日志分析"></a>15.9 📄 GC日志分析</h3><blockquote>
<p>⚙️参数</p>
</blockquote>
<p>通过阅读GC日志，我们可以了解Java虚拟机内存分配和回收策略。</p>
<ul>
<li><code>-XX:+PrintGC</code>：输出GC日志</li>
<li><code>-XX:+PrintGCDetails</code>：输出GC的详细日志</li>
<li><code>-XX:+PrintGCTimeStamps</code>：输出GC的时间戳</li>
<li><code>-XX:+PrintGCDateStamps</code>：输出GC的时间戳</li>
<li><code>-XX:+PrintHeapAtGC</code>：在进行GC的前后打印出堆的信息</li>
<li><code>-Xloggc:..logs/gc.log</code>：日志文件的输出路径</li>
</ul>
<blockquote>
<p>💬说明</p>
</blockquote>
<ul>
<li><code>GC</code>和<code>Full GC</code>说明了这次垃圾收集的停顿类型，如果有<code>Full</code>则说明GC发生了STW。</li>
<li>使用Serial收集器在新生代的名字是Default New Generation，因此显示的是<code>DefNew</code>。</li>
<li>使用ParNew回收器在新生代的名字会变成<code>ParNew</code>，意思是Parallel New Generation。</li>
<li>使用Parallel Scavenge回收器在新生代的名字是<code>PSYoungGen</code>。</li>
<li>老年代的收集和新生代的道理一样，名字也是回收器决定的。</li>
<li>使用G1回收器的话，会显示为<code>garbage-first heap</code>。</li>
<li><code>Allocation Failure</code>：表明本次引起GC的原因是因为在年轻代中没有足够的空间能够存储新的数据了。</li>
<li><code>[PSYoungGen: XXXK -&gt; XXXK(XXXK)] XXXK -&gt; XXXK(XXXK)</code>：中括号内：GC回收前年轻代大小，回收后大小，（年轻代总大小）；括号外：GC回收前年轻代和老年代大小，回收后大小，（年轻代和老年代总大小）</li>
<li><code>user</code>用户态回收耗时，<code>sys</code>内核态回收耗时，<code>real</code>实际耗时。由于多核的原因，时间总和可能会超过real时间。</li>
</ul>
<blockquote>
<p>📷实例</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/11567/image-20210404181555136.png" class="" title="image-20210404181555136">



<blockquote>
<p>🔨工具</p>
</blockquote>
<ul>
<li>GC viewer：<a href="https://github.com/chewiebug/GCViewer">https://github.com/chewiebug/GCViewer</a></li>
<li>GC easy：<a href="https://gceasy.io/">https://gceasy.io/</a></li>
</ul>
<h3 id="15-10-💥-垃圾回收器的新发展"><a href="#15-10-💥-垃圾回收器的新发展" class="headerlink" title="15.10 💥 垃圾回收器的新发展"></a>15.10 💥 垃圾回收器的新发展</h3><blockquote>
<p>💬说明</p>
</blockquote>
<p>GC仍然处于飞速发展中，目前的默认选项G1 GC在不断的进行改进，很多我们原来认为的缺点，例如串行的Full GC、Card Table扫描的低效等，都已经被大幅改进，例如，JDK 10以后，Full GC已经是并行运行，在很多场景下，其表现还优于Parallel GC的并行Full GC实现。</p>
<p>即使是Serial GC，虽然比较古老，但是简单的设计和实现未必就是过时的，它本事的开销，不管是GC相关数据结构的开销，还是线程的开销，都是非常小的，所以随着云计算的兴起，在Serverless等新的应用场景下，Serial GC找到了新的舞台。</p>
<p>比较不幸的是CMS GC，因为其算法的理论缺陷等原因，虽然现在还有非常大的用户群体，但在JDK9中已经被标记为废弃，并在JDK14版本中移除。</p>
<blockquote>
<p>✈️Open JDK12的Shenandoah GC</p>
</blockquote>
<p>特点：低停顿、低吞吐</p>
<p>Shenandoah ，无疑是众多GC中最孤独的一个。是第一款不由Oracle公司团队领导开发的HotSpot垃圾回收器，不可避免地收到官方的排挤。比如号称Open JDK和Oracle JDK没有区别的Oracle公司仍拒绝在Oracle JDK12中支持Shenandoah。</p>
<p>Shenandoah垃圾回收器最初由RedHat进行的一项垃圾回收器研究项目Pauseless GC的实现，旨在针对JVM上的内存回收实现低停顿的需求。在2014年贡献给Open JDK。</p>
<p>RedHat研发Shenandoah团队对外宣称，Shenandoah垃圾回收器的暂停时间与堆大小无关，这意味着将堆设置为200MB还是200GB，99.9%的目标都可以把垃圾收集的停顿时间限制在十毫秒以内。不过实际使用性能将取决于实际工作堆的大小和工作负载。</p>
<blockquote>
<p>💫Oracle JDK11的ZGC</p>
</blockquote>
<p>ZGC与Shenandoah目标高度相似，在尽可能对吞吐量影响不大的前提下，实现在任意堆内存大小下都可以把垃圾收集的停顿时间限制在10ms以内的低延迟。</p>
<p>ZGC的工作过程可以分为4个阶段：并发标记、并发预备重分配、并发重分配、并发重映射。</p>
<p>ZGC几乎在所有地方并发执行的，除了初始标记的是STW的。所以停顿时间几乎就耗费在初始标记上，这部分的实际部分是非常少的。</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-14(垃圾回收概念)</title>
    <url>/posts/31658/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="14-1-💻-System-gc"><a href="#14-1-💻-System-gc" class="headerlink" title="14.1 💻 System.gc()"></a>14.1 💻 System.gc()</h2><blockquote>
<p>💬说明</p>
</blockquote>
<ul>
<li>在默认情况下，通过System.gc()或者Runtime.getRuntime().gc()的调用，会显式触发Full GC，同时对老年代和新生代进行回收，尝试释放被丢弃对象占用的内存。</li>
<li>System.gc()调用附带一个免责声明，无法保证对垃圾器的调用。</li>
<li>JVM实现着可以通过System.gc()调用来决定JVM的GC行为。而一般情况下，垃圾回收应该是自动进行的，无须手动触发，否则就太过于麻烦了。在一些特殊情况下，如我们正在编写一个性能基准，我们可以在运行之间调用System.gc()。</li>
</ul>
<blockquote>
<p>⌨️测试</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class LocalVarGC &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 触发Minor GC没有回收对象，然后在Full GC将该对象存入old区</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void localVarGC1() &#123;</span><br><span class="line">        byte[] buffer &#x3D; new byte[10 * 1024 * 1024]; &#x2F;&#x2F; 10MB</span><br><span class="line">        System.gc(); &#x2F;&#x2F; 无法回收</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 触发Young GC的时候，已经被回收了</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void localVarGC2() &#123;</span><br><span class="line">        byte[] buffer &#x3D; new byte[10 * 1024 * 1024]; &#x2F;&#x2F; 10MB</span><br><span class="line">        buffer &#x3D; null;</span><br><span class="line">        System.gc(); &#x2F;&#x2F; 可以回收</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 不会回收，因为它还存放在局部变量表索引为1的槽中</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void localVarGC3() &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            byte[] buffer &#x3D; new byte[10 * 1024 * 1024]; &#x2F;&#x2F; 10MB</span><br><span class="line">        &#125;</span><br><span class="line">        System.gc(); &#x2F;&#x2F; 不会回收</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 会被回收，因为它还存放在局部变量表索引为1的槽中，但是后面定义的value把这个槽给替换了</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void localVarGC4() &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            byte[] buffer &#x3D; new byte[10 * 1024 * 1024]; &#x2F;&#x2F; 10MB</span><br><span class="line">        &#125;</span><br><span class="line">        int value &#x3D; 10;</span><br><span class="line">        System.gc(); &#x2F;&#x2F; 可以回收</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 回收localVarGC1中的buffer</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void localVarGC5() &#123;</span><br><span class="line">        localVarGC1();</span><br><span class="line">        System.gc(); &#x2F;&#x2F; 可以回收</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        LocalVarGC localVarGC &#x3D; new LocalVarGC();</span><br><span class="line">        localVarGC.localVarGC5();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="14-2-🎊内存溢出"><a href="#14-2-🎊内存溢出" class="headerlink" title="14.2 🎊内存溢出"></a>14.2 🎊内存溢出</h2><blockquote>
<p>📖概述</p>
</blockquote>
<p>内存溢出相对于内存泄露来说，尽管更容易被理解，但是同样的，内存溢出也是引发程序崩溃的罪魁祸首之一。</p>
<p>由于GC一直在发展，所有一般情况下，除非应用程序占用的内存增长速度非常快，造成垃圾回收已经跟不上内存消耗的速度，否则不太容易出现OOM的情况。</p>
<p>大多数情况下，GC会进行各种年龄段的垃圾回收，实在不行了就放大招，来一次独占式的FULL FC操作，这时候会回收大量的内存，供应用程序继续使用。</p>
<p>javadoc对OutOfMemoryError的解释是，没有空闲内存，并且垃圾器也无法提供更多内存。</p>
<p>没有空闲内存的情况，原因有二：</p>
<ul>
<li>Java虚拟机的堆内存设置不够。</li>
<li>代码中创建了大量的对象，并且长时间不能被垃圾器（存在被引用）。</li>
<li>这里面隐含的一层意思是，在抛出OutOfMemory之前，通常垃圾器会被触发，尽其所能去清理空间。</li>
<li>当然，也不是在任何情况下垃圾器都会被触发的。</li>
</ul>
<h2 id="14-3-🎉-内存泄露"><a href="#14-3-🎉-内存泄露" class="headerlink" title="14.3 🎉 内存泄露"></a>14.3 🎉 内存泄露</h2><blockquote>
<p>📖概述</p>
</blockquote>
<p>严格来说，只有对象不会再被程序用到了，但是GC又不能回收他们的情况，才叫做内存泄露。</p>
<p>但实际情况很多时候一些不太好的实践（或疏忽）会导致对象的生命周期变得很长甚至导致00M，也可以叫做宽泛意义上的“内存泄漏”。</p>
<p>尽管内存泄漏并不会立刻引起程序崩溃，但是一旦发生内存泄漏，程序中的可用内存就会被逐步蚕食，直至耗尽所有内存，最终出现OutofMemory异常，导致程序崩溃。</p>
<p>注意，这里的存储空间并不是指物理内存，而是指虚拟内存大小，这个虚拟内存大小取决于磁盘交换区设定的大小。</p>
<blockquote>
<p>🥖举例</p>
</blockquote>
<p>（1）单例模式</p>
<p>单例的生命周期与应用程序是一样长的，所以单例模式中，如果持有对外部对象的引用的话，那么这个外部对象是不能被回收的，则会导致内存泄露的产生。</p>
<p>（2）一些提供close的资源未关闭</p>
<p>数据库连接、网络连接和IO连接必须受到close，否则是不能被回收的。</p>
<h2 id="14-4-⏹️-Stop-The-World"><a href="#14-4-⏹️-Stop-The-World" class="headerlink" title="14.4 ⏹️ Stop The World"></a>14.4 ⏹️ Stop The World</h2><blockquote>
<p>📖概述</p>
</blockquote>
<p>stop-the-world，简称STW，指的是GC事件发生过程中，会产生应用程序的停顿。停顿产生时整个应用程序线程都会被暂停，没有任何响应，有点像卡死的感觉，这个停顿称为STW。</p>
<p>可达性分析算法中枚举根节点（GC Roots）会导致所有Java执行线程停顿。</p>
<ul>
<li>分析工作必须在一个能确保一致性的快照中进行</li>
<li>一致性指整个分析期间整个执行系统看起来像被冻结在某个时间点上</li>
<li>如果出现分析过程中对象引用关系还在不断变化，则分析结果的准确性无法保证</li>
</ul>
<p>被STW中断的应用程序线程会在完成GC之后恢复，频繁中断会让用户感觉像是网速不快造成电影卡带一样，所以我们需要减少STW的发生。</p>
<blockquote>
<p>💬说明</p>
</blockquote>
<p>STW事件和采用哪款GC无关所有的GC都有这个事件。</p>
<p>哪怕是G1也不能完全避免Stop-the-world情况发生，只能说垃圾回收器越来越优秀，回收效率越来越高，尽可能地缩短了暂停时间。</p>
<p>STW是JVM在后台自动发起和自动完成的。在用户不可见的情况下，把用户正常的工作线程全部停掉。</p>
<p>开发中不要用<code>System.gc()</code>会导致stop-the-world的发生。</p>
<h2 id="14-5-📖-垃圾回收的并行与并发"><a href="#14-5-📖-垃圾回收的并行与并发" class="headerlink" title="14.5 📖 垃圾回收的并行与并发"></a>14.5 📖 垃圾回收的并行与并发</h2><blockquote>
<p>🚐并发</p>
</blockquote>
<ul>
<li>在操作系统中，并发是指一个时间段中有几个程序都处于已启动运行到运行完毕之间，且这几个程序都是在同一个处理器上运行。</li>
<li>并发不是真正意义上的”同时进行“，只是CPU把一个时间段划分成几个时间片段（时间区间），然后在这几个时间区间之间来回切换，由于CPU的处理的速度非常快，只要时间间隔处理得当，即可让用户感觉是多个应用程序同时在进行。</li>
</ul>
<blockquote>
<p>🚗并行</p>
</blockquote>
<ul>
<li>当系统有一个以上CPU时，当一个CPU执行一个进程时，另一个CPU可以执行另一个进程，两个进程互补抢占CPU资源，可以同时进行，我们称之为并行。</li>
<li>其实决定并行的因素不是CPU的数量，而是CPU的核心数量，比如一个CPU多个核也可以并行。</li>
</ul>
<blockquote>
<p>并行🆚并发</p>
</blockquote>
<p>并发，指的是多个事情，在同一时间段内同时发生了。</p>
<p>并行，指的是多个事情，在同一时间点内同时发生了。</p>
<p>并发的多个任务之间是互相抢占资源的，并行的多个任务之间是不互相抢占资源的。</p>
<p>只有在多核CPU或者一个CPU多核的情况中，才会发生并行。</p>
<p>否则，看似同时发生的事情，其实都是并发执行的。</p>
<blockquote>
<p>🗑️垃圾回收</p>
</blockquote>
<p>并发和并行，在谈论垃圾器的上下文语境中，它们可以解释如下：</p>
<ul>
<li>并行：指多条垃圾线程并行工作，但此时用户线程仍处于等待状态。</li>
<li>串行：相较于并行的概念，单线程执行。如果内存不够，则程序暂停，启动JVM垃圾回收器进行垃圾回收。回收完，再启动程序的线程。</li>
</ul>
<h2 id="14-6-⛑️-安全点和安全区域"><a href="#14-6-⛑️-安全点和安全区域" class="headerlink" title="14.6 ⛑️ 安全点和安全区域"></a>14.6 ⛑️ 安全点和安全区域</h2><blockquote>
<p>📗安全点(Safe Point)</p>
</blockquote>
<p>程序执行时并非在所有地方都能停顿下来开始GC，只有在特定的位置才能停顿下来开始GC，这些位置称为“安全点”。</p>
<p>安全点的选择很重要，如果太少可能导致GC等待的时间太长，如果太频繁可能导致运行时的性能问题。大部分指令的执行时间都非常短暂，通常会根据”是否具有让程序长时间执行的特征“为标准。比如：选择一些执行时间较长的指令作为Safe Point，如方法调用、循环跳转和异常跳转。</p>
<blockquote>
<p>❔如何在GC发生时，检查所有线程都跑到最近的安全点停顿下来呢？</p>
</blockquote>
<ul>
<li><p>抢先式调用（目前没有虚拟机使用）：首先中断所有线程。如果还有线程不在安全点，就恢复线程，让线程跑到安全点。</p>
</li>
<li><p>主动式中断：设置一个中断标志，各个线程运行到Safe Point的时候主动轮询这个标志，如果中断标志为真，则将自己进行中断挂起。</p>
</li>
</ul>
<blockquote>
<p>➕补充</p>
</blockquote>
<p>Safe Point机制保证了程序执行时，在不太长的时间内就会遇到可进入GC的Safe Point。但是，程序“不执行”的时候呢？例如线程处于Sleep状态或Blocked状态，这时候线程无法响应JVM的中断请求，“走”到安全点去中断挂起，JVM也不太可能等待线程被唤醒。对于这种情况，就需要安全区域来解决。</p>
<blockquote>
<p>✅安全区域(Safe Region)</p>
</blockquote>
<p>安全区域是指在一段代码片段中，对象的引用关系不会发生变化，在这个区域中的任何位置开始GC都是安全的。可以把Safe Region看做是被扩展了的Safe Point。</p>
<blockquote>
<p>🔰实际执行时</p>
</blockquote>
<ol>
<li><p>当线程运行到Safe Region的代码时，首先标识已经进入了Safe Region，如果这段时间内发生GC，JVM会忽略表示为Safe Region状态的线程；</p>
</li>
<li><p>当线程即将离开Safe Region时，会检查JVM是否已经完成GC，如果完成了，则继续运行，否则线程必须等待知道可以收到可以安全离开Safe Region的信号为止。</p>
</li>
</ol>
<h2 id="14-7-📜-引用"><a href="#14-7-📜-引用" class="headerlink" title="14.7 📜 引用"></a>14.7 📜 引用</h2><blockquote>
<p>📖概述</p>
</blockquote>
<ul>
<li>强引用：最传统的“引用”的定义，是指在程序代码中普遍存在的引用赋值，即类似<code>Object obj = new Object();</code>这种引用关系。无论任何情况下，只要强引用关系还存在，垃圾器就永远不会回收掉被引用的对象。</li>
<li>软引用：在系统将要发生内存溢出之前，将会把这些对象列入回收范围之中进行第二次回收。如果这次回收后还没有足够的内存，才会抛出内存溢出异常。</li>
<li>弱引用：被弱引用关联的对象只能生存到下一次垃圾之前。当垃圾器工作时，无论内存空间是否足够，都会回收掉被弱引用关联的对象。</li>
<li>虚引用：一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来获得一个对象的实例。为一个对象设置虚引用关联的唯一目的就是能在这个对象被器回收前收到一个系统通知。</li>
</ul>
<blockquote>
<p>1️⃣强引用（Strong Reference/永不回收）</p>
</blockquote>
<p>在Java程序中，最常见的引用类型是强引用（普通系统99%以上都是强引用，也就是我们最常见的普通对象引用，也是默认的引用类型。</p>
<p>当在Java语言中使用new操作符创建一个新的对象，并将其赋值给另一个变量的时候，这个变量就成为指向该对象的一个强引用。</p>
<p>强引用的对象是可触及的，垃圾器就永远不会回收掉被引用的对象，JVM宁愿抛出OutOfMemory异常也不会回收这种对象。</p>
<p>对于一个普通的对象，如果没有其他的引用关系，只要超过了引用的作用域或者显示地将相应强引用赋值为null，就是可以当作垃圾被了，当然具体回收时机还是要看垃圾策略。</p>
<p>相对的，软引用、弱引和虚对象是软可触及、弱可触及和虚可触及的，在一定条件下，都是可以被回收的。所以，强引用是造成Java内存泄漏的主要原因之一。</p>
<p>实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class StrongReferenceTest &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * -Xmx1m -Xms1m</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Object[] objs &#x3D; new Object[1000 * 1000];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space</span><br></pre></td></tr></table></figure>



<blockquote>
<p>2️⃣软引用（Soft Reference/溢出回收）</p>
</blockquote>
<p>软引用是用来描述一些还有，但非必需的对象。只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常。</p>
<p>软引用通常用来实现内存敏感的缓存。比如：高速缓存就有用到软引用，如果还有空闲内存，就可以暂时保留缓存，当内存不足时清理掉，这样就保证了使用缓存的同时，不会耗尽内存。</p>
<p>垃圾回收器在某个时刻决定回收软可达的对象的时候，会清理软引用，并可选地把引用存放到一个引用队列。</p>
<p>类似弱引用，只不过Java虚拟机会尽量让软引用的存活时间长一点，迫不得已才清理。</p>
<p>实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class SoftReferenceTest &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * -Xmx10m -Xms10m</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;* 声明强引用 *&#x2F;</span><br><span class="line">        Object obj &#x3D; new Object();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">        SoftReference&lt;Object&gt; softReference &#x3D; new SoftReference&lt;Object&gt;(obj);</span><br><span class="line">        &#x2F;* 销毁强引用 *&#x2F;</span><br><span class="line">        obj &#x3D; null;</span><br><span class="line">        System.out.println(softReference.get());</span><br><span class="line">        &#x2F;* 主动进行GC *&#x2F;</span><br><span class="line">        System.gc();</span><br><span class="line">        System.out.println(softReference.get());</span><br><span class="line"></span><br><span class="line">        &#x2F;* 让系统资源紧张 *&#x2F;</span><br><span class="line">        try &#123;</span><br><span class="line">            byte[] bytes &#x3D; new byte[1024 * 1024 * 7]; &#x2F;&#x2F; 7m</span><br><span class="line">        &#125; catch (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            System.out.println(softReference.get()); &#x2F;&#x2F; null代表已经被回收</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.Object@1b6d3586</span><br><span class="line">java.lang.Object@1b6d3586</span><br><span class="line">java.lang.Object@1b6d3586</span><br><span class="line">java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">    at top.parak.SoftReferenceTest.main(SoftReferenceTest.java:35)</span><br><span class="line">null</span><br></pre></td></tr></table></figure>



<blockquote>
<p>3️⃣弱引用（Weak Reference/发现回收）</p>
</blockquote>
<p>弱引用也是用来描述那些非必须对象，只被弱引用关联的对象只能生存到下一次垃圾发生为止。在系统GC时，只要发现弱引用，不管系统堆空间使用是否充足，都会回收掉只被弱引用关联的对象。</p>
<p>但是，由于垃圾回收器的线程通常优先级很低，因此，并不一定能很快地发现持有弱引用的对象。在这种情况下，弱引用对象可以存在较长的时间。</p>
<p>弱引用和软引用一样，在构造弱引用时，也可以指定一个引用队列，当弱引用对象被回收时，就会加入指定的引用队列，通过这个队列可以跟踪对象的回收情况。</p>
<p>软引用、弱引用都非常适合来保存那些可有可无的缓存数据。如果这么做，当系统内存不足时，这些缓存数据会被回收，不会导致内存溢出。而当内存资源充足时，这些缓存又可以存在相当长的时间，从而起到加速系统的作用。</p>
<p>实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class WeakReferenceTest &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Object obj &#x3D; new Object();</span><br><span class="line">        WeakReference&lt;Object&gt; weakReference &#x3D; new WeakReference&lt;Object&gt;(obj);</span><br><span class="line">        System.out.println(weakReference.get());</span><br><span class="line">       &#x2F;* 解除强引用 *&#x2F;</span><br><span class="line">        obj &#x3D; null;</span><br><span class="line">        &#x2F;* 主动GC *&#x2F;</span><br><span class="line">        System.gc();</span><br><span class="line">        System.out.println(weakReference.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.Object@1b6d3586</span><br><span class="line">null</span><br></pre></td></tr></table></figure>



<blockquote>
<p>4️⃣虚引用（Phantom Reference/回收跟踪）</p>
</blockquote>
<p>虚引用也称为幽灵引用或者幻影引用，是所有引用类型中最弱的一个。</p>
<p>一个对象是否有虚引用的存在，完全不会决定对象的生命周期。如果一个对象仅持有虚引用，那么和它没有引用几乎是一样的，随时都可能被垃圾回收器回收。</p>
<p>它不能单独使用，也无法通过虚引用来获取被引用的对象。当试图通过虚引用的get()方法取得对象时，总是null。</p>
<p>为一个对象设置虚引用关联的唯一目的在于跟踪垃圾回收过程。比如：能在这个对象被器回收时收到一个系统通知。</p>
<p>实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class PhantomReferenceTest &#123;</span><br><span class="line">    public static PhantomReferenceTest obj;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 引用队列</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static ReferenceQueue&lt;PhantomReferenceTest&gt; phantomQueue &#x3D; null;</span><br><span class="line"></span><br><span class="line">    public static class CheckRefQueue extends Thread &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            while (true) &#123;</span><br><span class="line">                if (phantomQueue !&#x3D; null) &#123;</span><br><span class="line">                    PhantomReference&lt;PhantomReferenceTest&gt; objt &#x3D; null;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        objt &#x3D; (PhantomReference&lt;PhantomReferenceTest&gt;) phantomQueue.remove();</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (objt !&#x3D; null) &#123;</span><br><span class="line">                        System.out.println(&quot;追踪垃圾回收过程：PhantRefernceTest实例被GC了&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void finalize() throws Throwable &#123;</span><br><span class="line">        super.finalize();</span><br><span class="line">        System.out.println(&quot;调用当前类的finalize()方法&quot;);</span><br><span class="line">        obj &#x3D; this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Thread t &#x3D; new CheckRefQueue();</span><br><span class="line">        t.setDaemon(true);  &#x2F;&#x2F; 守护线程</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        phantomQueue &#x3D; new ReferenceQueue&lt;PhantomReferenceTest&gt;();</span><br><span class="line">        obj &#x3D; new PhantomReferenceTest();</span><br><span class="line">        &#x2F;&#x2F; 构造了PhantomReference对象的虚引用，并指定了引用队列</span><br><span class="line">        PhantomReference&lt;PhantomReferenceTest&gt; phantomRef &#x3D; new PhantomReference&lt;&gt;(obj, phantomQueue);</span><br><span class="line">        try &#123;</span><br><span class="line">            &#x2F;&#x2F; 不可获取虚引用中的对象</span><br><span class="line">            System.out.println(&quot;phantomRef.get() &#x3D; &quot; + phantomRef.get());</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 第一次GC，由于对象可复活，并指定了引用队列</span><br><span class="line">            System.out.println(&quot;&#x3D;&gt;&gt;&gt; 第一次GC操作&quot;);</span><br><span class="line">            obj &#x3D; null; &#x2F;&#x2F; 解除强引用</span><br><span class="line">            System.gc();</span><br><span class="line">            Thread.sleep(1000);</span><br><span class="line">            System.out.println(obj &#x3D;&#x3D; null ? &quot;obj &#x3D;&#x3D; null&quot; : &quot;obj !&#x3D; null&quot;);</span><br><span class="line"></span><br><span class="line">            System.out.println(&quot;&#x3D;&gt;&gt;&gt; 第二次GC&quot;);</span><br><span class="line">            obj &#x3D; null; &#x2F;&#x2F; 解除强引用</span><br><span class="line">            System.gc();</span><br><span class="line">            Thread.sleep(1000);</span><br><span class="line">            System.out.println(obj &#x3D;&#x3D; null ? &quot;obj &#x3D;&#x3D; null&quot; : &quot;obj !&#x3D; null&quot;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">phantomRef.get() &#x3D; null</span><br><span class="line">&#x3D;&gt;&gt;&gt; 第一次GC操作</span><br><span class="line">调用当前类的finalize()方法</span><br><span class="line">obj !&#x3D; null</span><br><span class="line">&#x3D;&gt;&gt;&gt; 第二次GC</span><br><span class="line">追踪垃圾回收过程：PhantRefernceTest实例被GC了</span><br><span class="line">obj &#x3D;&#x3D; null</span><br></pre></td></tr></table></figure>



<blockquote>
<p>5️⃣终结器引用</p>
</blockquote>
<ul>
<li>它用以实现对象的finalize()方法，也可以成为终结器引用。</li>
<li>无需手动编码，其内部配合引用队列使用。</li>
<li>在GC时，终结器引用入队。由Finalizer线程通过终结器引用找到被引用对象并调用它的finalize()方法，第二次GC时才能回收被引用对象。</li>
</ul>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-13(垃圾回收算法)</title>
    <url>/posts/25/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="13-1-📖-垃圾回收概述"><a href="#13-1-📖-垃圾回收概述" class="headerlink" title="13.1 📖 垃圾回收概述"></a>13.1 📖 垃圾回收概述</h2><blockquote>
<p>🗑️ 什么是垃圾</p>
</blockquote>
<p>垃圾是指在运行程序中没有任何指针指向的对象，这个对象就是需要被回收的垃圾。</p>
<p>如果不及时对内存中的垃圾进行清理，那么，这些垃圾对象所占的内存空间会一直保留到应用程序的结束，被保留的空间无法被其它对象使用，甚至可能导致内存溢出。</p>
<blockquote>
<p>❓大厂面试题</p>
</blockquote>
<p><strong>蚂蚁金服</strong></p>
<ul>
<li>你知道哪几种垃圾回收器，各自的优缺点，重点讲一下cms和G1？</li>
<li>JVM GC算法有哪些，目前的JDK版本采用什么回收算法？</li>
<li>G1回收器讲下回收过程GC是什么？为什么要有GC？</li>
<li>GC的两种判定方法？CMS收集器与G1收集器的特点。</li>
</ul>
<p><strong>百度</strong></p>
<ul>
<li>说一下GC算法，分代回收说下。</li>
<li>垃圾策略和算法。</li>
</ul>
<p><strong>天猫</strong></p>
<ul>
<li>JVM GC原理，JVM怎么回收内存。</li>
<li>CMS特点，垃圾回收算法有哪些？各自的优缺点，他们共同的缺点是什么？</li>
</ul>
<p><strong>滴滴</strong></p>
<p>Java的垃圾回收器都有哪些，说下G1的应用场景，平时你是如何搭配使用垃圾回收器的。</p>
<p><strong>京东</strong></p>
<ul>
<li>你知道哪几种垃圾器，各自的优缺点，重点讲下CMS和G1。</li>
<li>包括原理，流程，优缺点。垃圾回收算法的实现原理。</li>
</ul>
<p><strong>阿里巴巴</strong></p>
<ul>
<li>讲一讲垃圾回收算法。</li>
<li>什么情况下触发垃圾回收？</li>
<li>如何选择合适的垃圾算法？</li>
<li>JVM有哪三种垃圾回收器？</li>
</ul>
<p><strong>字节跳动</strong></p>
<ul>
<li>常见的垃圾回收器算法有哪些，各有什么优劣？</li>
<li>System.gc（）和Runtime.gc（）会做什么事情？</li>
<li>Java GC机制？GC Roots有哪些？</li>
<li>Java对象的回收方式，回收算法。</li>
<li>CMS和G1了解么，CMS解决什么问题，说一下回收的过程。</li>
<li>CMS回收停顿了几次，为什么要停顿两次?</li>
</ul>
<blockquote>
<p>♻ GC</p>
</blockquote>
<p>对于高级语言来说，一个基本认知是如果不进行垃圾回收，内存迟早都会被消耗完，因为不断地分配内存空间而不进行回收，就好像不停地生产生活垃圾而从来不打扫一样。</p>
<p>除了释放没用的对象，垃圾回收也可以清除内存里的记录碎片。碎片整理将所占用的堆内存移到堆的一端，以便JVM将整理出的内存分配给新的对象。</p>
<p>随着应用程序所应付的业务越来越庞大、复杂，用户越来越多，没有GC就不能保证应用程序的正常进行。而经常造成STW的GC又跟不上实际的需求，所以才会不断地尝试对GC进行优化。</p>
<blockquote>
<p>🔰垃圾回收机制</p>
</blockquote>
<p>优点：</p>
<p>自动内存管理，无需开发人员手动参与内存的分配与回收，这样降低内存泄漏和内存溢出的风险。</p>
<p>没有垃圾回收器，java也会和cpp一样，各种悬垂指针，野指针，泄露问题让你头疼不已。</p>
<p>自动内存管理机制，将程序员从繁重的内存管理中释放出来，可以更专心地专注于业务开发。</p>
<p>oracle官网关于垃圾回收的介绍 <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/toc.html">https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/toc.html</a></p>
<p>担忧：</p>
<p>对于Java开发人员而言，自动内存管理就像是一个黑匣子，如果过度依赖于“自动”，那么这将会是一场灾难，最严重的就会弱化Java开发人员在程序出现内存溢出时定位问题和解决问题的能力。</p>
<p>此时，了解JVM的自动内存分配和内存回收原理就显得非常重要，只有在真正了解JVM是如何管理内存后，我们才能够在遇见outofMemoryError时，快速地根据错误异常日志定位问题和解决问题。</p>
<p>当需要排查各种内存溢出、内存泄漏问题时，当垃圾成为系统达到更高并发量的瓶颈时，我们就必须对这些“自动化”的技术实施必要的监控和调节。</p>
<p>GC主要关注的区域：堆和方法区。</p>
<h2 id="13-2-🏳‍🌈-标记阶段：引用计数算法"><a href="#13-2-🏳‍🌈-标记阶段：引用计数算法" class="headerlink" title="13.2 🏳‍🌈 标记阶段：引用计数算法"></a>13.2 🏳‍🌈 标记阶段：引用计数算法</h2><blockquote>
<p>💬说明</p>
</blockquote>
<ul>
<li>引用计数算法（Reference Counting）比较简单，对每个对象保存一个整型的引用计数器属性。用于记录对象被引用的情况。</li>
<li>对一个对象A，只要有任何一个对象引用了A，则A的计数器就加一；当引用失效时，引用计数器就减一。只要对象A的引用计数器的值为0，即表示对象A不可能再被使用，可进行回收。</li>
</ul>
<blockquote>
<p>🌠特点</p>
</blockquote>
<p>优点：</p>
<ul>
<li>实现简单，垃圾对象便于辨识。</li>
<li>判定效率高，回收没有延迟性。</li>
</ul>
<p>缺点：</p>
<ul>
<li>它需要单独的字段存储计数器，这样的做法增加了存储空间的开销。</li>
<li>每次赋值都需要更新计数器，伴随着加法和减法操作，增加了时间开销。</li>
<li>引用计数器有一个严重的问题，即无法处理循环引用的情况。这是一条致命缺陷，导致在Java的垃圾回收器中没有使用这类算法。</li>
</ul>
<blockquote>
<p>📸循环引用</p>
</blockquote>
<p>内存泄露：程序中已动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。</p>


<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/25/image-20210309175155047.png" class="" title="image-20210309175155047">

<br>


<blockquote>
<p>📑小结</p>
</blockquote>
<ul>
<li>引用计数算法，是很多语言的资源回收选择，例如Python，它更是同时支持引用计数和垃圾机制。</li>
<li>Java并没有选择引用计数，是因为其存在一个基本的难题，也就是很难处理循环引用关系。</li>
<li>Python如何解决循环引用：<ul>
<li>手动解除：在合适的时机，解除引用关系。</li>
<li>使用弱引用weakref（Python标准库，旨在解决循环引用）。</li>
</ul>
</li>
</ul>
<h2 id="13-3-🦆-标记阶段：可达性分析算法"><a href="#13-3-🦆-标记阶段：可达性分析算法" class="headerlink" title="13.3 🦆 标记阶段：可达性分析算法"></a>13.3 🦆 标记阶段：可达性分析算法</h2><blockquote>
<p>💬说明</p>
</blockquote>
<ul>
<li>相对于引用计数算法而言，可达性分析算法不仅同样具备实现简单和执行高效等特点，更重要的是改算法可以有效地解决在引用计数算法中循环引用的问题，防止内存泄露发生。</li>
<li>相较于引用计数算法，这里的可达性分析就是Java、C#选择的。这种类型的垃圾通常也叫作追踪性垃圾（Tracing Garbage Collection）</li>
</ul>
<blockquote>
<p>🔍思路</p>
</blockquote>
<ul>
<li>可达性分析算法是以根对象集合（GC Roots）为起始点，按照从上至下的方式搜索被根对象集合所连接的目标对象是否可达。</li>
<li>使用可达性分析算法后，内存中的存活对象都会被根对象集合直接或间接连接着，搜索所走过的路径称为引用链（Reference Chain）。</li>
<li>如果目标对象没有任何引用链相连，则是不可达的，就意味着该对象已经死亡，可以标记为垃圾对象。</li>
<li>在可达性分析算法中，只有能够被根对象集合直接或者间接连接的对象才是存活对象。</li>
</ul>
<blockquote>
<p>♍GC Roots</p>
</blockquote>
<ul>
<li><p>虚拟机栈中引用的对象</p>
</li>
<li><p>本地方法栈内JNI（本地方法）引用的对象</p>
</li>
<li><p>方法区中类静态属性引用的对象</p>
</li>
<li><p>所有被同步锁synchronized持有的对象</p>
</li>
<li><p>Java虚拟机内部的引用</p>
</li>
<li><p>反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等</p>
</li>
<li><p>除了这些固定的GC Roots集合以外，根据用户所选用的垃圾器以及当前回收的内存区域不同，还可以有其他对象“临时性”地加入，共同构成完整GC Roots集合。比如：分代和局部回收。</p>
</li>
<li><ul>
<li>如果只针对Java堆区中的某一块区域进行垃圾回收，必须考虑到内存区域是虚拟机自己的实现细节，更不是孤立封闭的，这个区域的对象完全有可能被其他区域的对象所引用，这时候就需要一并将关联的区域对象也加入GC Roots集合中去考虑，才能保证可达性分析的准确性。</li>
</ul>
</li>
<li><p>小技巧：由于栈方式存放变量和指针，所以如果一个指针，它保存了堆内存里面的对象，但是自己由不存放在堆内存里面，那它就是一个Root。</p>
</li>
</ul>
<blockquote>
<p>🟨注意</p>
</blockquote>
<ul>
<li>如果要使用可达性分析算法来判断内存是否可回收，那么分析工作必须在一个能够保障一致性的快照中进行。这点都不满足的话分析结果的准确性就无法保证。</li>
<li>这点也是导致GC进行时必须”Stop the world”的一个重要原因。即使是（几乎）不会停顿的CMS收集器中，枚举根节点时也是必须要停顿的。</li>
</ul>
<h2 id="13-4-🏁-对象的finalization机制"><a href="#13-4-🏁-对象的finalization机制" class="headerlink" title="13.4 🏁 对象的finalization机制"></a>13.4 🏁 对象的finalization机制</h2><blockquote>
<p>💬说明</p>
</blockquote>
<ul>
<li><p>Java语言提供了对象终止（finalization）机制来允许开发人员提供对象被销毁之前的自定义处理逻辑。</p>
</li>
<li><p>当垃圾回收器发现没有引用指向一个对象，即：垃圾回收此对象之前，总会先调用这个对象的finalize()方法。</p>
</li>
<li><p>finalize()方法允许在子类中被重写，用于在对象被回收时进行资源释放。通常在这个方法中进行一些资源释放和清理的工作，比如关闭文件、套接字和数据库连接等。</p>
</li>
<li><p>永远不要主动调用某个对象的finalize()方法，应该交给垃圾机制调用。理由如下：</p>
</li>
<li><ul>
<li>在finalize()时可能会导致对象复活。</li>
<li>finalize()方法的执行时间是没有保障的，它完全由GC线程决定，极端情况下，若不发生GC，则finalize()方法将没有执行机会。</li>
<li>一个糟糕的finalize()会严重影响GC的性能。</li>
</ul>
</li>
<li><p>从功能上来说，finalize()方法与C中的析构函数比较相似，但是Java采用的是基于垃圾回收器的自动内存管理机制，所以finalize()方法在本质上不用于C中的析构函数。</p>
</li>
</ul>
<blockquote>
<p>🍼状态</p>
</blockquote>
<p>由于finalize()方法的存在，虚拟机中的对象一般处于三种可能的状态。</p>
<p>如果从所有的根节点都无法访问到某个对象，说明对象已经不再使用了。一般来说，此对象需要被回收。但事实上，也并非是“非死不可”的，这时候它们暂时处于“缓刑”阶段。一个无法触及的对象有可能在某一个条件下“复活”自己，如果这样，那么对它的回收就是不合理的，为此，定义虚拟机中的对象可能的三种状态。</p>
<p>如下：</p>
<ul>
<li>可触及的：从根节点开始，可以到达这个对象。</li>
<li>可复活的：对象的所有引用都被释放，但是对象有可能在finalize()中复活。</li>
<li>不可触及的：对象的finalize()被调用，并且没有复活，那么就会进入不可触及状态。不可触及的对象不可能被复活，因为finalize()只会被调用一次。</li>
</ul>
<p>以上三种状态中，是由于finalize()方法的存在，进行的区分。只有在对象不可触及时才可以被回收。</p>
<blockquote>
<p>⏳执行过程</p>
</blockquote>
<p>判断一个对象objA是否可回收，至少要经历两次标记过程：</p>
<ol>
<li><p>如果对象objA到GC Roots没有引用链，则进行第一次标记。</p>
</li>
<li><p>进行筛选，判断此对象是否有必要执行finalize()方法：</p>
</li>
<li><ol>
<li>如果对象objA没有重写finalize()方法，或者finalize()方法已经被虚拟机调用过，则虚拟机视为“没有必要执行”，objA被判定为不可触及的。</li>
<li>如果对象objA重写了finalize()方法，且还未执行过，那么objA会插入到F-Queue队列中，由一个虚拟机自动创建的、低优先级的Finalizer线程触发其finalize()方法执行。</li>
<li>finalize()方法是对象逃脱死亡的最后机会，稍后GC会对F-Queue队列中的对象进行第二次标记。如果objA在finalize()方法中与引用链上的任何一个对象建立了联系，那么在第二次标记时，objA会被移出“即将回收”集合。之后，对象会再次出现没有引用存在的情况。在这个情况下，finalize方法不会被再次调用，对象会直接编程不可触及的状态，也就是说，一个对象的finalize方法只会被调用一次。【刀下留人，只有一次。】</li>
</ol>
</li>
</ol>
<h2 id="13-5-🧰-MAT的GC-Roots溯源"><a href="#13-5-🧰-MAT的GC-Roots溯源" class="headerlink" title="13.5 🧰 MAT的GC Roots溯源"></a>13.5 🧰 MAT的GC Roots溯源</h2><blockquote>
<p>⬇️下载</p>
</blockquote>
<p>官网：<a href="https://www.eclipse.org/mat/">https://www.eclipse.org/mat/</a></p>
<blockquote>
<p>📰获取dump文件</p>
</blockquote>
<p>应用程序 -&gt; 进程 -&gt; 监视 -&gt; 堆dump -&gt; 右键保存</p>
<h2 id="13-6-🏳‍🌈-清除阶段：标记-清除算法"><a href="#13-6-🏳‍🌈-清除阶段：标记-清除算法" class="headerlink" title="13.6 🏳‍🌈 清除阶段：标记-清除算法"></a>13.6 🏳‍🌈 清除阶段：标记-清除算法</h2><blockquote>
<p>🌃背景</p>
</blockquote>
<p>标记-清除算法（Mark-Sweep）是一种非常基础和常见的垃圾算法，该算法被J.McCarthy等人在1960年提出并应用于Lisp语言。</p>
<blockquote>
<p>⏳执行过程</p>
</blockquote>
<p>当堆中的有效内存空间（available memory）等被耗尽的时候，就会停止整个程序（也被称为stop the world，简称STW），然后进行两项工作，第一项是标记，第二项是清除：</p>
<ul>
<li>标记：Collector从引用根节点开始遍历，标记所有被引用的对象（非垃圾对象）。一般是在对象的Header中记录为可达对象。</li>
<li>清除：Collector对堆内存从头到尾进行线性的遍历，如果发现某个对象在其Header中没有标记为可达对象，则将其回收。</li>
</ul>
<blockquote>
<p>🌠特点</p>
</blockquote>
<p>缺点：</p>
<ul>
<li>效率不够高。</li>
<li>在进行GC的时候，需要停止整个应用，导致用户体验差。</li>
<li>这种方式清理出来的空闲内存是不连续的，产生内存碎片。需要维护一个空闲列表。</li>
</ul>
<h2 id="13-7-🔘-清除阶段：复制算法"><a href="#13-7-🔘-清除阶段：复制算法" class="headerlink" title="13.7 🔘 清除阶段：复制算法"></a>13.7 🔘 清除阶段：复制算法</h2><blockquote>
<p>🌃背景</p>
</blockquote>
<p>为了解决标记-清楚算法在垃圾效率方面的缺陷，M.L.Minsky于1963年发表了著名的论文，“使用双存储区的Lisp语言垃圾器CALISP Garbage Collector Algorithm Using Serial Secondary Storage”。M.L.Minsky在论文中描述的算法被人们称为复制算法，它也被M.L.Minsky本人成功地引入到了Lisp语言的一个实现版本中。</p>
<blockquote>
<p>🔰核心思想</p>
</blockquote>
<p>将活着的内存空间分为两块，每次只使用其中一块，在垃圾回收时将正在使用的内存中的存活对象复制到未被使用的内存块中，之后清除正在使用的内存块中的所有对象，交换两个内存的角色，最后完成垃圾回收。</p>
<blockquote>
<p>🌠特点</p>
</blockquote>
<p>优点：</p>
<ul>
<li>没有标记和清除过程，实现简单，运行高效。</li>
<li>复制过去以后保证空间的连续性，不会出现“碎片”问题。</li>
</ul>
<p>缺点：</p>
<ul>
<li>需要两倍的内存空间。</li>
<li>对于G1这种分拆成为大量regien的GC，复制而不是移动，意味着GC需要维护region之间对象引用关系，不管是内存占用或者时间开销也不小。</li>
</ul>
<p>特别：</p>
<ul>
<li>如果系统中的垃圾对象很多，复制算法需要复制的存活对象数量并不会太大，或者说非常低才行。（老年代的对象存活，那么复制的对象将会有很多，效率会很低。适合使用在新生代和幸存者区，朝生夕死。）</li>
</ul>
<h2 id="13-8-⛔-清除阶段：标记-压缩算法"><a href="#13-8-⛔-清除阶段：标记-压缩算法" class="headerlink" title="13.8 ⛔ 清除阶段：标记-压缩算法"></a>13.8 ⛔ 清除阶段：标记-压缩算法</h2><blockquote>
<p>🌃背景</p>
</blockquote>
<p>复制算法的高效性是建立在存活对象少、垃圾对象多的前提下。这种情况在新生代经常发生，但是在老年代，更常见的情况是大部分对象都是存活对象。如果依然使用复制算法，由于存活对象较多，复制的成本也将很高。因此，基于老年代垃圾回收的特性，需要使用其他的算法。</p>
<p>标记-清除算法的确可以应用在老年代中，但是该算法不仅执行效率低下，而且在执行完内存回收后还会产生内存碎片，所以JVM的设计者需要在此基础上进行改造。标记-压缩算法（Mark-Compact）由此诞生。</p>
<p>1970年前后，G.L.Steele、C.J.Chene和D.D.Wise等研究者发布标记-压缩算法。在许多现代的垃圾器中，人们都使用标记-压缩算法或其改进版本。</p>
<blockquote>
<p>⏳执行过程</p>
</blockquote>
<p>第一阶段：和标记清除算法一样，从根节点一样，从根节点开始标记所有被引用的对象。</p>
<p>第二阶段：将所有的存活对象压缩到内存的一端，按顺序排放。</p>
<p>之后，清理边界外所有的空间。</p>
<blockquote>
<p>标记-压缩🆚标记-清除</p>
</blockquote>
<p>标记-压缩算法的最终结果等同于标记-清除算法执行完成后，再进行一次内存碎片整理，因此，也可以把它称为标记-清除-压缩（Mark-Sweep-Compact）算法。</p>
<p>二者的本质差异在于标记-清除算法是一种非移动式的回收算法，标记-压缩是移动式。是否移动回收后的存活对象是一项优缺点并存的风险决策。</p>
<p>可以看到，标记的存活对象将会被整理，按照内存地址一次排列，而未被标记的内存将会被清理掉。如此一来，当我们需要给新对象分配内存时，JVM只需要维持一个内存的起始地址即可，这比维护一个空闲列表显然少了许多开销。</p>
<blockquote>
<p>💥指针碰撞</p>
</blockquote>
<p>如果内存空间以规整和有序的方式分布，即已用和未用的内存都各自一边，彼此之间维系着一个记录下一次分配起始点的标记指针，当为新对象分配内存时，只需要通过修改指针的偏移量将新对分配子第一个空闲内存位置上，这种分配方式就叫做指针碰撞（Bump the Pointer）。</p>
<blockquote>
<p>🌠特点</p>
</blockquote>
<p>优点：</p>
<ul>
<li>消除了标记-清除算法当中，内存区域分散的缺点，我们需要给新对象分配内存时，JVM只需要持有一个内存的起始地址即可。</li>
<li>消除了复制算法当中，内存减半的高额代价。</li>
</ul>
<p>缺点：</p>
<ul>
<li>从效率上来说，标记-整理算法要低于复制算法。</li>
<li>移动对象的同时，如果对象被其他对象引用，则还需要调整引用的地址。</li>
<li>移动过程中，需要全程暂停用户应用程序，即STW。</li>
</ul>
<blockquote>
<p>📋小结</p>
</blockquote>
<table>
<thead>
<tr>
<th>项目\算法</th>
<th>Mark-Sweep</th>
<th>Mark-Compact</th>
<th>Copying</th>
</tr>
</thead>
<tbody><tr>
<td>速度</td>
<td>中等</td>
<td>最慢</td>
<td>最快</td>
</tr>
<tr>
<td>空间开销</td>
<td>少（会堆积碎片）</td>
<td>少（不堆积碎片）</td>
<td>大（不堆积碎片）</td>
</tr>
<tr>
<td>移动对象</td>
<td>否</td>
<td>是</td>
<td>是</td>
</tr>
</tbody></table>
<h2 id="13-9-🧓🏽-分代算法"><a href="#13-9-🧓🏽-分代算法" class="headerlink" title="13.9 🧓🏽 分代算法"></a>13.9 🧓🏽 分代算法</h2><blockquote>
<p>💬说明</p>
</blockquote>
<p>目前几乎所有的GC都是采用分代（Generational Collecting）算法执行垃圾回收的。</p>
<p>在HotSpot中，基于分代的概念，GC所使用的内存回收算法必须结合年轻代和老年代各自的特点。</p>
<p>以HotSpot中的CMS回收器为例，CMS是基于Mark-Sweep实现的，对于对象的回收效率很高。而对于碎片问题，CMS采用基于Mark-Compact算法的Serial Old回收器作为补偿措施：当内存回收不佳（碎片导致的Concurrent Mode Failure时），将采用Serial Old执行Full GC以达到对老年代内存的整理。</p>
<p>分代的思想被现在的虚拟机广泛使用。几乎所有的垃圾回收器都区分新生代和老年代。</p>
<blockquote>
<p>👶对于新生代</p>
</blockquote>
<p>年轻代特点：区域相对于老年代较小，对象生命周期短，存活率低，回收频繁。</p>
<p>这种情况复制算法的回收整理，速度是最快的。复制算法的效率只和当前存活对象大小有关，因此很适用于年轻代的回收。而复制算法内存利用率不高的问题，通过HotSpot中的两个Suivivor的设计得到缓解。</p>
<blockquote>
<p>👵对于老年代</p>
</blockquote>
<p>老年代特点：区域较大，对象生命周期长、存活率高，回收不及年轻代频繁。</p>
<p>这种情况存在大量存活率高的对象，复制算法明显变得不合适。一般是由标记-清除或者是标记-清除与标记-整理的混合实现。</p>
<p>（1）Mark阶段的开销与存活对象的数量成正比。</p>
<p>（2）Sweep阶段的开销与所管理区域的大小成正相关。</p>
<p>（3）Compact阶段的开销与存货对象的数据成正比。</p>
<h2 id="13-10-♐-增量算法"><a href="#13-10-♐-增量算法" class="headerlink" title="13.10 ♐ 增量算法"></a>13.10 ♐ 增量算法</h2><blockquote>
<p>🌃背景</p>
</blockquote>
<p>上述现有的算法，在垃圾回收过程中，应用软件将处于一种Stop the World的状态。在Stop the World状态下，应用程序所有的线程都会挂起，暂停一切正常的工作，等待垃圾回收的完成。如果垃圾回收时间过长，应用程序会被挂起很久，将严重影响到用户体验或者系统的稳定性。为了解决这个问题，即对实时垃圾算法的研究直接的研究直接导致了增量（Incremental Collecting）算法的诞生。</p>
<blockquote>
<p>🔰基本思想</p>
</blockquote>
<p>如果一次性将所有的垃圾进行处理，需要造成系统长时间的停顿，那么就可以让垃圾线程和应用程序线程交替执行。每次，垃圾线程只一小片区域的内存空间，接着切换到应用程序线程交替执行。每次，垃圾线程只一小片区域的内存空间，接着切换到应用程序线程。依次反复，直到垃圾完成。</p>
<p>总的来说，增量算法的基础仍是传统的标记-清除和复制算法。增量算法通过对线程间冲突的妥善处理，允许垃圾线程以分阶段的方式完成标记、清理或复制工作。</p>
<blockquote>
<p>📛缺点</p>
</blockquote>
<p>使用这种方式，由于在垃圾回收过程中，间断性地还执行了应用程序代码，所以能减少系统的停顿时间。但是，因为线程切换和上下文的消耗，会使得垃圾回收的总体成本上升，造成系统吞吐量的下降。</p>
<h2 id="13-11-💠-分区算法"><a href="#13-11-💠-分区算法" class="headerlink" title="13.11 💠 分区算法"></a>13.11 💠 分区算法</h2><blockquote>
<p>💬说明</p>
</blockquote>
<p>一般来说，在相同条件下，堆空间越大，一次GC时所需要的时间就越长，有关GC产生的停顿也就越长。为了更好地控制GC产生的停顿时间，将一块大的内存区域分割成多个小块，根据目标的停顿时间，每次合理地回收若干个小区间，而不是整个堆空间，从而减少一次GC所产生的停顿。</p>
<p>分代算法将按照对象的生命周期长短划分成两个部分，分区算法整个堆空间划分成连续的不同小区间。</p>
<p>每一个小区间都独立使用，独立回收。这种算法的好处是可以控制一次回收多少个小区间。</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-12(String Table)</title>
    <url>/posts/59786/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="12-1-📖-概述"><a href="#12-1-📖-概述" class="headerlink" title="12.1 📖 概述"></a>12.1 📖 概述</h2><blockquote>
<p>🌠基本特性</p>
</blockquote>
<ul>
<li>String字符串使用一对””引起来表示。</li>
<li>String声明为final，不可被继承。</li>
<li>String实现了Serializable接口：表示字符串是支持序列化的。</li>
<li>String实现了Comparable接口，表示String可以比较大小。</li>
<li>String在jdk8及以前内部定义了final char[] value用于存储字符串数据。jdk9时改为byte[]</li>
</ul>
<blockquote>
<p>❔String存储结构变更的原因</p>
</blockquote>
<p>JDK8及以前中String类的实现将字符存储在char数组中，每个字符占用两个字节。从许多不同的应用程序收集的数据表明，字符串是堆使用的主要组成部分，而且，大多数字符串对象只包含拉丁字符。这些字符只需要一个字节的存储空间，因此这些字符串对象的内部char数组中有一半的空间将不会使用。</p>
<p>JDK9将String内部表示从UTF-16的char数组改为byte数组+编码标志字段。新的String类将根据字符串的内容存储编码为ISO-8859-1/Latin-1(每个字符一个字节)或UTF-16(每个字符两个字节)的字符。编码标志将指示使用哪种编码。</p>
<p>总结：String由char[]+UTF-16改为byte[]+encoding-flag，节约了一些空间。</p>
<blockquote>
<p>🔘不可变性</p>
</blockquote>
<ul>
<li>当对字符串重新赋值时，需要重写指定内存区域赋值，不能使用原有的value进行赋值。</li>
<li>当对现有的字符串进行连接操作时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。</li>
<li>当调用String的replace()方法修改指定字符或字符串时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。</li>
<li>通过字面量的方式（区别于new）给一个字符串赋值，此时的字符串声明在字符串常量池中。</li>
</ul>
<blockquote>
<p>👁‍🗨字符串常量池</p>
</blockquote>
<p>字符串常量池中是不会存储相同内容的字符串的。</p>
<ul>
<li>String的String Pool是一个固定大小的HashTable，默认值大小长度是1009。如果放进String Pool的String非常多，就会造成Hash冲突严重，从而导致链表会很长，而链表长了后直接会造成的影响就是当调用String.intern时性能会大幅下降。</li>
<li>使用-XX:StringTableSize可设置StringTable的长度</li>
<li>在JDK6中StringTable是固定的。就是1009的长度，所以常量池中的字符串过多就会导致效率下降很快。StringTableSize设置没有要求。</li>
<li>在JDK7中，StringTable的长度默认值是60013。</li>
<li>JDK8开始，设置StringTable的长度的话，1009是可设置的最小值。</li>
</ul>
<h2 id="12-2-🌌-内存分配"><a href="#12-2-🌌-内存分配" class="headerlink" title="12.2 🌌 内存分配"></a>12.2 🌌 内存分配</h2><blockquote>
<p>💬说明</p>
</blockquote>
<ul>
<li>在Java语言中有8中基本数据类型和一种比较特殊的类型String。这些类型为了使它们在运行过程中速度更快、更节省内存，都提供了一种常量池的概念。</li>
<li>常量池就类似一个Java系统级别提供的缓存。8种基本数据类型的常量池都是系统协调的，String类型的常量池比较特殊。它的主要使用方法有两种：一种是使用<strong>字面量声明</strong>，另一种是使用<strong>String.intern()方法</strong>。</li>
<li>在JDK6及以前，字符串常量池存放在永久代(PermGen)。</li>
<li>Java7中Oracle的工程师对字符串池的逻辑做了很多的改变，即将字符串常量池的位置调整到Java堆内。<ul>
<li>所有的字符串都保存在堆（Heap）中，和其他普通对象一样，这样可以让你在进行调优应用时仅需要调整堆大小就可以了。</li>
<li>字符串常量池概念原本使用得比较多，但是这个改动使得我们有足够的理由让我们重新考虑在Java 7中使用String.intern()。</li>
</ul>
</li>
<li>Java8元空间，字符串常量池在堆。</li>
</ul>
<blockquote>
<p>❔StringTable调整内存位置的原因</p>
</blockquote>
<ul>
<li>PermSize默认比较小</li>
<li>永久代垃圾回收频率低</li>
</ul>
<h2 id="12-3-🛠️-字符串操作"><a href="#12-3-🛠️-字符串操作" class="headerlink" title="12.3 🛠️ 字符串操作"></a>12.3 🛠️ 字符串操作</h2><blockquote>
<p>🎗️字符串拼接</p>
</blockquote>
<ul>
<li>常量与常量的拼接结果在常量池，常量拼接的原理是编译期优化。</li>
<li>常量池中不会存在相同内容的常量。</li>
<li>只要有一个是变量，结果就在堆中。变量拼接的原理是StringBuilder。</li>
<li>如果拼接的结果是调用intern()方法，则主动将常量池中还没有的字符串对象放入池中，并返回此对象地址。</li>
</ul>
<blockquote>
<p>🔍查看底层</p>
</blockquote>
<p>Java代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String s1 = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    String s2 = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    String s3 = <span class="string">&quot;ab&quot;</span>;             <span class="comment">// 字符串常量池</span></span><br><span class="line">    String s4 = s1 + s2;          <span class="comment">// 堆空间</span></span><br><span class="line">    System.out.println(s3 == s4); <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>反编译：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 0 ldc #3 &lt;a&gt;  &#x2F;&#x2F; 将a从运行时常量池中压入操作数栈</span><br><span class="line"> 2 astore_1    &#x2F;&#x2F; 将a存放在局部变量表索引为1的位置</span><br><span class="line"> 3 ldc #17 &lt;b&gt; &#x2F;&#x2F; 将b从运行时常量池中压入操作数栈</span><br><span class="line"> 5 astore_2    &#x2F;&#x2F; 将b存放在局部变量表索引为2的位置</span><br><span class="line"> 6 ldc #18 &lt;ab&gt;&#x2F;&#x2F; 将ab从运行时常量池中压入操作数栈</span><br><span class="line"> 8 astore_3    &#x2F;&#x2F; 将ab存放在局部变量表索引为3的位置</span><br><span class="line"> 9 new #19 &lt;java&#x2F;lang&#x2F;StringBuilder&gt; &#x2F;&#x2F; new一个StringBuilder</span><br><span class="line">12 dup         &#x2F;&#x2F; 复制操作操作数栈顶的StringBuilder的引用</span><br><span class="line">13 invokespecial #20 &lt;java&#x2F;lang&#x2F;StringBuilder.&lt;init&gt;&gt; &#x2F;&#x2F; 调用StringBuilder的初始化方法</span><br><span class="line">16 aload_1     &#x2F;&#x2F; 从局部变量表索引为1的位置装载一个对象引用(a)到操作数栈顶</span><br><span class="line">17 invokevirtual #21 &lt;java&#x2F;lang&#x2F;StringBuilder.append&gt; &#x2F;&#x2F; 调用StringBuilder的append方法，连接a</span><br><span class="line">20 aload_2     &#x2F;&#x2F; 从局部变量表索引为2的位置装载一个对象引用(b)到操作数栈顶</span><br><span class="line">21 invokevirtual #21 &lt;java&#x2F;lang&#x2F;StringBuilder.append&gt; &#x2F;&#x2F; 调用StringBuilder的append方法，连接b</span><br><span class="line">24 invokevirtual #22 &lt;java&#x2F;lang&#x2F;StringBuilder.toString&gt; &#x2F;&#x2F; 调用StringBuilder的toString方法，将该字符串放在堆中，引用放在操作数栈中</span><br><span class="line">27 astore 4    &#x2F;&#x2F; 将ab存放在局部变量表索引为4的位置</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>字符串拼接，JDK5.0之前使用的是StringBuffer，JDK5.0之后使用的是StringBuilder。</p>
<p>关键就在于<code>toString()</code>方法，可以看一下源代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// StringBuilder</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Create a copy, don&#x27;t share the array</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(value, <span class="number">0</span>, count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// StringBuffer</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (toStringCache == <span class="keyword">null</span>) &#123;</span><br><span class="line">        toStringCache = Arrays.copyOfRange(value, <span class="number">0</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> String(toStringCache, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，两个方法中均采用了<code>new String()</code>的方法。因此对于非字面量的拼接操作，都在堆中new了一个String对象。</p>
<blockquote>
<p>⌨️ ==测试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String s1 = <span class="string">&quot;a&quot;</span> + <span class="string">&quot;b&quot;</span> + <span class="string">&quot;c&quot;</span>;         <span class="comment">// 编译器优化，拼接结果存放在字符串常量池中</span></span><br><span class="line">    String s2 = <span class="string">&quot;abc&quot;</span>;                   <span class="comment">// 字符串常量池中不存放相同的字符串</span></span><br><span class="line">    System.out.println(s1 ==s2);         <span class="comment">// true</span></span><br><span class="line">    System.out.println(s1.equals(s2));   <span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String s1 = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    String s2 = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    String s3 = <span class="string">&quot;ab&quot;</span>;</span><br><span class="line">    String s4 = s1 + s2;</span><br><span class="line">    System.out.println(s3 == s4);        <span class="comment">// false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String s1 = <span class="string">&quot;boot&quot;</span>;</span><br><span class="line">    String s2 = <span class="string">&quot;cloud&quot;</span>;</span><br><span class="line">    String s3 = <span class="string">&quot;boot&quot;</span> + <span class="string">&quot;cloud&quot;</span>;        <span class="comment">// 字符串拼接结果放在字符串常量池中</span></span><br><span class="line">    String s4 = s1 + <span class="string">&quot;cloud&quot;</span>;            <span class="comment">// 带变量的拼接结果放在堆中</span></span><br><span class="line">    String s5 = <span class="string">&quot;boot&quot;</span> + s2;             <span class="comment">// 带变量的拼接结果放在堆中</span></span><br><span class="line">    String s6 = s1 + s2;                 <span class="comment">// 带变量的拼接结果放在堆中</span></span><br><span class="line">    System.out.println(s3 == s4);        <span class="comment">// flase</span></span><br><span class="line">    System.out.println(s3 == s5);        <span class="comment">// flase</span></span><br><span class="line">    System.out.println(s3 == s6);        <span class="comment">// flase</span></span><br><span class="line">    System.out.println(s4 == s5);        <span class="comment">// flase</span></span><br><span class="line">    <span class="comment">// intern(): 判断字符串常量池中是否存在&quot;bootcloud&quot;值</span></span><br><span class="line">    <span class="comment">// 如果存在，则返回字符串常量池中&quot;bootcloud&quot;的地址；</span></span><br><span class="line">    <span class="comment">// 如果不存在，则在字符串常量池中添加一次&quot;bootcloud&quot;，并返回此对象的地址</span></span><br><span class="line">    String s7 = s5.intern();</span><br><span class="line">    System.out.println(s3 == s7);        <span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String s1 = <span class="string">&quot;c&quot;</span>;               <span class="comment">// 常量</span></span><br><span class="line">    <span class="keyword">final</span> String s2 = <span class="string">&quot;d&quot;</span>;               <span class="comment">// 常量</span></span><br><span class="line">    String s3 = <span class="string">&quot;cd&quot;</span>; </span><br><span class="line">    String s4 = s1 + s2;                 <span class="comment">// 拼接符合左右两边都是字符串常量或者常量引用，仍然使用编译期优化</span></span><br><span class="line">    System.out.println(s3 == s4);        <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>⌨️效率测试</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringAppendTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">            str = str + <span class="string">&quot;k&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;String拼接花费时间：&quot;</span> + (end - start) + <span class="string">&quot;ms&quot;</span>); <span class="comment">// 3935ms</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="number">100000</span>);</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;k&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;StringBuilder拼接花费时间：&quot;</span> + (end - start) + <span class="string">&quot;ms&quot;</span>); <span class="comment">// 3ms</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>效率：</p>
<p>StringBuilder的appendAPI &gt;&gt; String的字符串拼接 </p>
<p>原因：</p>
<p>(1) StringBuilder方式自始至终只创建一个StringBuilder对象，String拼接会创建多个StringBuilder对象。</p>
<p>(2) 使用String字符串拼接，内存中由于创建了多个StringBuilder和String对象,会增加GC的频率，影响执行效率。</p>
<p>改进：</p>
<p>StringBuilder无参创建的数组空间是16，如果实际开发中长度大于16，则需要不断进行数组扩容。</p>
<p>如果明确拼接后的字符串长度不高于某个限定值highLevel，在定义StringBuilder的时候即可赋予响应空间，即<code>new StringBuilder[highLevel]</code>。</p>
<blockquote>
<p>💡intern()方法</p>
</blockquote>
<p>美团技术团队沙龙-intern：<a href="https://tech.meituan.com/2014/03/06/in-depth-understanding-string-intern.html">https://tech.meituan.com/2014/03/06/in-depth-understanding-string-intern.html</a></p>
<p>intern是一个native方法，调用的是底层C语言实现的方法。</p>
<p>JDK1.8的API说明：字符串池最初是空的，由String类私有地维护。在维护intern方法时，如果池中已经包含了由equals(object)方法确定的与该字符串对象相等的字符串，则返回池中的字符串。否则，该<strong>字符串对象</strong>将被添加到池中，并返回对该<strong>字符串对象的引用</strong>。如果不是用双引号声明的string对象，可以使用string提供的intern方法：intern方法会从字符串常量池中查询当前字符串是否存在，若不存在就会将当前字符串放入常量池中。</p>
<p>在JDK1.6中，String.intern()方法尝试将字符串放入字符串常量池，如果没有，会把此对象复制一份，放入字符串常量池，并返回字符串常量池中的对象地址。</p>
<p>自JDK1.7起，String.intern()方法尝试将字符串放入字符串常量池，如果没有，会把此对象的引用地址复制一份，放入字符串常量池，并返回字符串常量池中的引用地址。</p>
<p>至于更改原因，也不必多说了，之前是需要创建一个新的对象放在字符串常量池中，现在是存放一个堆空间中的引用，当然更加节省空间。</p>
<p>对于需要大量使用相同字符串的网站平台，建议使用intern保存到字符串常量池中，以节省内存空间。</p>
<h2 id="12-4-❓-面试题"><a href="#12-4-❓-面试题" class="headerlink" title="12.4 ❓ 面试题"></a>12.4 ❓ 面试题</h2><blockquote>
<p>1️⃣ new String(“ab”) 会创建几个对象？</p>
<p>new String(“a”) + new String(“b”)会创建几个对象？</p>
</blockquote>
<p>前者创建了两个对象：</p>
<ul>
<li>第一个是new 关键字在堆空间创建的对象</li>
<li>第二个是在字符串常量池中创建的字符串的引用（指向堆空间的地址）</li>
</ul>
<p>后者创建了六个对象：</p>
<ul>
<li>对象1：new StringBuilder()</li>
<li>对象2：new String(“a”)</li>
<li>对象3：字符串常量池中a的引用</li>
<li>对象4：new String(“b”)</li>
<li>对象5：字符串常量池中b的引用</li>
<li>深入剖析<ul>
<li>对象6：StringBuilder的toString方法中创建的new String(“ab”)</li>
<li>注意，toString方法的调用没有在常量池中生成字符串的引用</li>
</ul>
</li>
</ul>
<blockquote>
<p>2️⃣ 下列代码的执行结果是？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringInternTest</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">     String s1 = <span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">     s1.intern(); </span><br><span class="line">     String s2 = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">     System.out.println(s1 == s2); </span><br><span class="line"></span><br><span class="line">     String s3 = <span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>) + <span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">     s3.intern();</span><br><span class="line">     String s4 = <span class="string">&quot;11&quot;</span>;</span><br><span class="line">     System.out.println(s3 == s4); </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>结果：</p>
<ul>
<li>JDK6: false false</li>
<li>JDK7/8: false true</li>
</ul>
<p>解析：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="comment">// s1是堆空间中创建的&quot;1&quot;的地址</span></span><br><span class="line">s1.intern();</span><br><span class="line"><span class="comment">// 调用此方法之前，字符串常量池已经存在了&quot;1&quot;</span></span><br><span class="line">String s2 = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="comment">// s2是字符串常量池中&quot;1&quot;的地址</span></span><br><span class="line">System.out.println(s1 == s2);</span><br><span class="line"><span class="comment">// JDK1.6: false; JDK1.7/1.8: false</span></span><br><span class="line"></span><br><span class="line">String s3 = <span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>) + <span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"><span class="comment">// s3是StringBuilder的toString方法new String(&quot;11&quot;)在堆空间中的地址，</span></span><br><span class="line"><span class="comment">// 但是toString的new String并没有把&quot;11&quot;放入字符串常量池</span></span><br><span class="line">s3.intern();</span><br><span class="line"><span class="comment">// jdk1.6会复制一个堆空间中的&quot;11&quot;对象，即创建新的对象，放入字符串常量池（全新地址）</span></span><br><span class="line"><span class="comment">// jdk1.7/1.8会复制一个堆空间中的&quot;11&quot;对象的引用地址，放入字符串常量池（引用地址）</span></span><br><span class="line">String s4 = <span class="string">&quot;11&quot;</span>;</span><br><span class="line"><span class="comment">// s4是字符串常量池中&quot;11&quot;的对象地址</span></span><br><span class="line">System.out.println(s3 == s4);</span><br><span class="line"><span class="comment">// JDK1.6: false; JDK1.7/1.8: true</span></span><br></pre></td></tr></table></figure>



<h2 id="12-5-♻-StringTable垃圾回收"><a href="#12-5-♻-StringTable垃圾回收" class="headerlink" title="12.5 ♻ StringTable垃圾回收"></a>12.5 ♻ StringTable垃圾回收</h2><blockquote>
<p>⚙️启动打印垃圾回收日志</p>
</blockquote>
<ul>
<li>-XX:+PrintStringTableStatistics：打印字符串常量池统计信息</li>
<li>-XX:+PrintGCDetails：打印GC日志详情</li>
</ul>
<blockquote>
<p>⚙️G1的String去重操作</p>
</blockquote>
<ul>
<li>UseStringDeduplication(bool)：开启String去重（默认不开启）</li>
<li>PrintStringDeduplicationStatistics(bool)：打印详细的去重年龄统计信息</li>
<li>StringDeduplicationAgeThreshold(utinx)：达到年龄的String对象被认为是去重的候选对象</li>
</ul>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-11(执行引擎)</title>
    <url>/posts/58113/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="11-1-📖-概述"><a href="#11-1-📖-概述" class="headerlink" title="11.1 📖 概述"></a>11.1 📖 概述</h2><blockquote>
<p>💬说明</p>
</blockquote>
<ul>
<li>执行引擎（Execution Engine）是Java虚拟机核心的组成部分之一。</li>
<li>“虚拟机”是一个相对于“物理机”的概念，这两种机器都有代码执行能力，其区别是物理机的执行引擎是直接建立在处理器、缓存、指令集和操作系统层面上的，而虚拟机的执行引擎则是由软件自行实现的，因此可以不受物理条件制约地定制指令集与执行引擎的结构体系，能够执行那些不被硬件直接支持的指令集格式。</li>
</ul>
<blockquote>
<p>✨意义</p>
</blockquote>
<p>JVM的主要任务是负责装载字节码到其内部，但字节码并不能够直接运行在操作系统之上，因为字节码指令并非等价于本地机器指令，它内部包含的仅仅只是一些能够被JVM所识别的字节码指令、符号表以及其他辅助信息。</p>
<p>那么，想要让一个Java程序运行起来，执行引擎的任务就是将字节码指令解释/编译为对应平台上的本地机器指令才可以。简单来说，JVM中的执行引擎充当了将高级语言翻译为机器语言的译者。</p>
<h2 id="11-2-⏳-Java代码编译和执行过程"><a href="#11-2-⏳-Java代码编译和执行过程" class="headerlink" title="11.2 ⏳ Java代码编译和执行过程"></a>11.2 ⏳ Java代码编译和执行过程</h2><blockquote>
<p>📋工作流程</p>
</blockquote>
<p>（1）执行引擎在执行的过程中究竟需要执行什么样的字节码指令完全依赖于PC寄存器。</p>
<p>（2）每当执行完一项指令操作后，PC寄存器就会更新下一条需要被执行的指令地址。</p>
<p>（3）当然方法在执行的过程中，执行引擎有可能会通过存储在局部变量表中的对象引用准确定位到存储在Java堆区中的对象实例信息，以及通过对象头中的元数据指针定位到目标对象的类型信息。</p>
<p>从外观上来看，所有的Java虚拟机的执行引擎输入、输出都是一致的；输入的是字节码二进制流，处理过程是字节码解析的等效过程，输出的是执行过程。</p>
<blockquote>
<p>📼流程图示</p>
</blockquote>
<p>大部分的程序代码转换成物理机的目标代码或虚拟机能执行的指令集之前，都需要经过下图中的各个步骤。</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/58113/image-20210307160507117.png" class="" title="image-20210307160507117">



<blockquote>
<p>📷编译过程</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/58113/image-20210307161035463.png" class="" title="image-20210307161035463">



<blockquote>
<p>📷执行过程</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/58113/image-20210307161149256.png" class="" title="image-20210307161149256">



<blockquote>
<p>❔什么是解释器，什么是你JIT编译器？</p>
</blockquote>
<p>解释器：当Java虚拟机启动时会根据预定义的规范对字节码采用逐行解释的方式执行，将每条字节码文件中的内容“翻译”为对应平台的本地机器指令执行。</p>
<p>JIT（Just In Time Compiler）编译器：就是虚拟机将源代码直接编译成和本地机器平台相关的机器语言。</p>
<p>比较：</p>
<p>解释器可以省去编译的时间，可以快速执行程序；</p>
<p>即时编译器把代码编译成本地机器语言，执行效率高。</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/58113/image-20210307163417053.png" class="" title="image-20210307163417053">



<blockquote>
<p>❔为什么说Java是半编译半解释型语言？</p>
</blockquote>
<p>JDK1.0时代，将Java语言定位为“解释执行”还是比较准备的。再后来，Java也发展出可以直接生成本地代码的编译器。</p>
<p>现在JVM在执行Java代码的时候，通常都会将解释执行与编译执行二者结合起来进行。</p>
<h2 id="11-3-💤-机器码、指令、汇编语言"><a href="#11-3-💤-机器码、指令、汇编语言" class="headerlink" title="11.3 💤 机器码、指令、汇编语言"></a>11.3 💤 机器码、指令、汇编语言</h2><blockquote>
<p>📔机器码</p>
</blockquote>
<p>各种用二进制编码方式表示的指令，叫做机器指令码。开始，人们就用它采编写程序，这就是机器语言。</p>
<p>机器语言虽然能够被计算机理解和接受，但和人们的语言差别太大，不易被人们理解和记忆，并且用它编程容易出差错。</p>
<p>用它编写的程序一经输入计算机，CPU直接读取运行，因此和其他语言编的程序相比，执行速度最快。</p>
<p>机器指令与CPU紧密相关，所以不同种类的CPU所对应的机器指令也就不同。</p>
<blockquote>
<p>📕指令</p>
</blockquote>
<p>由于机器码是有0和1组成的二进制序列，可读性实在太差，于是人们发明了指令。</p>
<p>指令就是把机器码中特定的0和1序列，简化成对应的指令（一般为英文简写，如mov，inc等），可读性稍好</p>
<p>由于不同的硬件平台，执行同一个操作，对应的机器码可能不同，所以不同的硬件平台的同一种指令（比如mov），对应的机器码也可能不同。</p>
<blockquote>
<p>📗指令集</p>
</blockquote>
<p>不同的硬件平台，各自支持的指令，是有差别的。因此每个平台所支持的指令，称之为对应平台的指令集。 如常见的</p>
<ul>
<li>x86指令集，对应的是x86架构的平台</li>
<li>ARM指令集，对应的是ARM架构的平台</li>
</ul>
<blockquote>
<p>📘汇编语言</p>
</blockquote>
<p>由于指令的可读性还是太差，于是人们又发明了汇编语言。</p>
<p>在汇编语言中，用助记符（Mnemonics）代替机器指令的操作码，用地址符号（Symbo1）或标号（Labe1）代替指令或操作数的地址。在不同的硬件平台，汇编语言对应着不同的机器语言指令集，通过汇编过程转换成机器指令。</p>
<p>由于计算机只认识指令码，所以用汇编语言编写的程序还必须翻译成机器指令码，计算机才能识别和执行。</p>
<blockquote>
<p>📙高级语言</p>
</blockquote>
<p>为了使计算机用户编程序更容易些，后来就出现了各种高级计算机语言。</p>
<p>高级语言比机器语言、汇编语言更接近人的语言当计算机执行高级语言编写的程序时，仍然需要把程序解释和编译成机器的指令码。完成这个过程的程序就叫做解释程序或编译程序。</p>
<blockquote>
<p>📒字节码</p>
</blockquote>
<p>字节码是一种中间状态（中间码）的二进制代码（文件），它比机器码更抽象，需要直译器转译后才能成为机器码</p>
<p>字节码主要为了实现特定软件运行和软件环境、与硬件环境无关。</p>
<p>字节码的实现方式是通过编译器和虚拟机器。编译器将源码编译成字节码，特定平台上的虚拟机器将字节码转译为可以直接执行的指令。</p>
<ul>
<li>字节码典型的应用为：Java bytecode</li>
</ul>
<h2 id="11-4-🛩️-解释器"><a href="#11-4-🛩️-解释器" class="headerlink" title="11.4 🛩️ 解释器"></a>11.4 🛩️ 解释器</h2><blockquote>
<p>💬说明</p>
</blockquote>
<p>解释器真正意义上所承担的角色就是一个运行时“翻译者”，将字节码文件中的内容“翻译”为对应平台的本地机器指令执行。</p>
<p>当一条字节码指令被解释执行完成后，接着再根据PC寄存器中记录的下一条需要被执行的字节码指令执行解释操作。</p>
<blockquote>
<p>🔱解释器分类</p>
</blockquote>
<p>在Java的发展历史里，一共有两套解释执行器，即古老的字节码解释器、现在普遍使用的模板解释器。</p>
<p>字节码解释器在执行时通过纯软件代码模拟字节码的执行，效率非常低下。</p>
<p>而模板解释器将每一条字节码和一个模板函数相关联，模板函数中直接产生这条字节码执行时的机器码，从而很大程度上提高了解释器的性能。</p>
<p>在HotSpot VM中，解释器主要由Interpreter模块和Code模块构成。</p>
<ul>
<li>Interpreter模块：实现了解释器的核心功能</li>
<li>Code模块：用于管理HotSpot VM在运行时生成的本地机器指令</li>
</ul>
<blockquote>
<p>🗓️现状</p>
</blockquote>
<p>由于解释器在设计和实现上非常简单，因此除了Java语言之外，还有许多高级语言同样也是基于解释器执行的，比如Python、Per1、Ruby等。但是在今天，基于解释器执行已经沦落为低效的代名词，并且时常被一些C/C++程序员所调侃。</p>
<p>为了解决这个问题，JVM平台支持一种叫作即时编译的技术。即时编译的目的是避免函数被解释执行，而是将整个函数体编译成为机器码，每次函数执行时，只执行编译后的机器码即可，这种方式可以使执行效率大幅度提升。</p>
<p>不过无论如何，基于解释器的执行模式仍然为中间语言的发展做出了不可磨灭的贡献。</p>
<h2 id="11-5-✈️-JIT编译器"><a href="#11-5-✈️-JIT编译器" class="headerlink" title="11.5 ✈️ JIT编译器"></a>11.5 ✈️ JIT编译器</h2><blockquote>
<p>💻HotSpot JVM执行方式</p>
</blockquote>
<p>当虚拟机启动的时候，解释器可以首先发挥作用，而不必等待即时编译器全部编译完成再执行，这样可以省去许多不必要的编译时间。并且随着程序运行时间的推移，即时编译器逐渐发挥作用，根据热点探测功能，将有价值的字节码编译为本地机器指令，以换取更高的程序执行效率。</p>
<blockquote>
<p>💬解释</p>
</blockquote>
<ul>
<li>Java语言的“编译期”其实是一段“不确定”的操作过程，因为它可能是指一个前端编译器把.java文件转变成.class文件的过程。</li>
<li>也可能是指虚拟机的后端运行期编译器（JIT编译器）把字节码转变成机器码的过程。</li>
<li>还可能是指使用静态提前编译器（AOT编译器）直接把.java文件编译成本地机器代码的过程。</li>
</ul>
<p>前端编译器：Sun的Javac、Eclipse JDT中的增量式编译（ECJ）。</p>
<p>JIT编译器：HotSpot VM的C1、C2编译器。</p>
<p>AOT编译器：GUN Compiler for Java（GCJ）、Excelsior JET。</p>
<blockquote>
<p>🔥热点代码</p>
</blockquote>
<p>是否需要启动JIT编译器将字节码直接编译为对应平台的本地机器指令，则需要根据代码被调用执行的频率而定。关于那些需要被编译为本地代码的字节码，也被称之为“热点代码”，JIT编译器在运行时会针对那些频繁被调用的“热点代码”做出深度优化，将其直接编译为对应平台的本地机器指令，以此提升Java程序的执行性能。</p>
<blockquote>
<p>🏳‍🌈热点探测技术</p>
</blockquote>
<ul>
<li>一个被多次调用的方法，或者是一个方法体内循环次数较多的循环体都可以被称之为“热点代码”，因此都可以通过JIT编译器编译为本地机器指令。由于这种编译方式发生在方法的执行过程中，因此也被称之为栈上替换，或简称为OSR（On Stack Replacement）编译。</li>
<li>一个方法究竟要被调用多少次，或者一个循环体究竟需要执行多少次才可以达到这个标准？必然需要一个明确的阈值，JIT编译器才会将这些“热点代码”编译为本地机器指令执行。这里主要依靠热点探测功能。</li>
<li>目前HotSpot VM所采用的热点探测方式是基于计数器的热点探测。</li>
<li>采用基于计数器的热点探测，HotSpot VM将会为每一个方法都建立2个不同类型的计数器，分别是方法调用计数器（Invocation Counter）和回边计数器（Back Edge Counter）。<ul>
<li>方法调用计数器用于统计方法的调用次数</li>
<li>回边计数器则用于统计循环体执行的循环次数</li>
</ul>
</li>
</ul>
<blockquote>
<p>🔢方法调用计数器</p>
</blockquote>
<ul>
<li>这个计数器就用于统计方法被调用的次数，它的默认阈值在Client模式下是1500次，在Server模式下是10000次超过这个阈值，就会触发JIT编译。</li>
<li>这个阈值可以通过虚拟机参数-XX:CompileThreshold来人为设定。</li>
<li>当一个方法被调用时，会先检查该方法是否存在被JIT编译过的版本。如果存在，则优先使用编译后的本地代码来执行；如果不存在已被编译过的版本，则将此方法的调用计数器加一，然后判断方法调用计数器与回边计数器之和是否超过方法调用计数器的阈值。如果已超过阈值，那么将会向即时编译器提交一个该方法的代码编译请求。</li>
</ul>
<blockquote>
<p>💧热点衰减</p>
</blockquote>
<p>如果不做任何设置，方法调用计数器统计的并不是方法被调用的绝对次数，而是一个相对的执行频率，即一段时间之内方法被调用的次数。当超过一定的时间限度，如果方法的调用次数仍然不足以让它提交给即时编译器编译，那这个方法的调用计数器就会被减少一半，这个过程称为方法调用计数器热度的衰减（Counter Decay），而这段时间就称为此方法统计的半衰周期（Counter Half Life Time）</p>
<p>进行热度衰减的动作是在虚拟机进行垃圾收集时顺便进行的，可以使用虚拟机参数 -XX:-UseCounterDecay 来关闭热度衰减，让方法计数器统计方法调用的绝对次数，这样，只要系统运行时间足够长，绝大部分方法都会被编译成本地代码。</p>
<p>另外，可以使用-XX:CounterHalfLifeTime参数设置半衰周期的时间，单位是秒。</p>
<blockquote>
<p>🔢回边计数器</p>
</blockquote>
<p>它的作用是统计一个方法体中循环体代码执行的次数，在字节码中遇到控制流向后跳转的指令称为“回边”（Back Edge）。显然，建立回边计数器统计的目的就是为了触发OSR编译。</p>
<blockquote>
<p>🔱HotSpot VM可以设置程序执行方式</p>
</blockquote>
<p>缺省情况下HotSpot VM是采用解释器与即时编译器并存的架构，当然开发人员可以根据具体的应用场景，通过命令显示地为Java虚拟机指定在运行时到底是采用解释器执行还是完全采用即时编译器执行。</p>
<ul>
<li>-Xint: 完全采用解释器模式执行程序。</li>
<li>Xcomp：完全采用即时编译器模式执行程序。如果即时编译出现问题，解释器会介入执行。</li>
<li>-Xmixed：采用解释器+即时编译器的混合模式共同执行程序。</li>
</ul>
<blockquote>
<p>🔱HotSpot VM中JIT分类</p>
</blockquote>
<p>在HotSpot VM中内嵌有两个JIT编译器，分别为Client Compiler和Server Compiler，但大多数情况下我们简称为C1编译器和C2编译器。开发人员可以通过如下命令显示指定Java虚拟机在运行时到底使用哪一种即时编译器，如下所示：</p>
<ul>
<li>-client：指定Java虚拟机运行在Client模式下，并使用C1编译器<ul>
<li>C1编译器会对字节码进行简单和可靠的优化，耗时短。以达到更快的编译速度。</li>
</ul>
</li>
<li>-server：指定Java虚拟机运行在Server模式下，并使用C2编译器。<ul>
<li>C2进行耗时较长的优化，以及激进优化。但优化的代码执行效率更高。</li>
</ul>
</li>
</ul>
<blockquote>
<p>🔰C1和C2编译器不同的优化策略</p>
</blockquote>
<p>在不同的编译器上有不同的优化策略。</p>
<p>C1编译器上主要有方法内联，去虚拟化、冗余消除：</p>
<ul>
<li>方法内联：将引用的函数代码编译到引用点处，这样可以减少栈帧的生成，减少参数传递以及跳转过程。</li>
<li>去虚拟化：对唯一的实现类进行内联。</li>
<li>冗余消除：在运行期间把一些不会执行的代码折叠掉。</li>
</ul>
<p>C2的优化主要是在全局层面，逃逸分析是优化的基础。基于逃逸分析在C2上有如下的几种优化：</p>
<ul>
<li>标量替换：用标量值替换聚合对象的属性值</li>
<li>栈上分配：对于未逃逸的对象分配对象在栈而不是堆</li>
<li>同步消除：清除同步操作，通常指synchronized</li>
</ul>
<blockquote>
<p>🔰分层编译策略</p>
</blockquote>
<p>分层编译（Tiered Compilation）策略：程序解释执行（不开启性能监控）可以触发C1编译，将字节码编译成机器码，可以进行简单优化，也可以加上性能监控，C2编译会根据性能监控信息进行激进优化。</p>
<p>不过在Java7版本之后，一旦开发人员在程序中显示指定命令“-server”时，默认会开启分层编译策略，由C1编译器和C2编译器相互协作共同来执行编译任务。</p>
<blockquote>
<p>👁‍🗨 Graal编译器</p>
</blockquote>
<ul>
<li>自JDK10起，HotSpot又加入一个全新的即时编译器：Graal编译器</li>
<li>编译效果短短几年时间就追平了C2编译器，未来可期。</li>
<li>目前，带着“实验状态”标签，需要使用开关参数-XX:+UnlockExperimentalVMOptions -XX:+UseJVMCICompiler去激活，才可以使用。</li>
</ul>
<blockquote>
<p>👁‍🗨AOT编译器</p>
</blockquote>
<ul>
<li>JDK9引入了AOT编译器（静态提前编译器，Ahead of Time Compiler）</li>
<li>Java 9引入了实验性AOT编译工具jaotc。它借助了Graal编译器，将所输入的Java类文件转换我机器码，并存放至生成的动态共享库中。</li>
<li>所谓AOT编译器，是与即时编译器相对立的一个概念。即时编译指的是在程序的运行过程中，将字节码转换为可在硬件上直接运行的机器码，并部署至托管环境中的过程。而AOT编译指的则是，在程序运行之前，便将字节码转换为机器码的过程。</li>
</ul>
<p>好处：Java虚拟机加载已经预编译成二进制库，可以直接执行。不必等待即时编译器的预热，减少Java应用给人带来“第一次运行慢”的不良体验。</p>
<p>缺点：</p>
<ul>
<li><p>破坏了Java“一次编译，到处运行”的特点，必须为每个不同硬件、OS编译对应的发行包。</p>
</li>
<li><p>降低了Java链接过程的动态性，加载的代码在编译期就必须全部已知。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-10(直接内存)</title>
    <url>/posts/6513/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="10-1-📖-概述"><a href="#10-1-📖-概述" class="headerlink" title="10.1 📖 概述"></a>10.1 📖 概述</h2><blockquote>
<p>💬说明</p>
</blockquote>
<p>直接内存不是虚拟机运行时数据区的一部分，也不是《Java虚拟机规范》中定义的内存区域。</p>
<p>直接内存是在Java堆外的，直接向系统申请的内存区间。</p>
<p>来源于NIO，通过存在堆中的DirectByteBuffer操作Native内存。</p>
<blockquote>
<p>⚙️设置</p>
</blockquote>
<ul>
<li>直接内存大小可以通过<code>MaxDirectMemorySize</code>设置</li>
<li>如果不指定，默认与堆的最大值<code>-Xmx</code>参数值一致</li>
</ul>
<blockquote>
<p>🌠特点</p>
</blockquote>
<p>通常，访问直接内存的速度会优于Java堆，即读写性能高。</p>
<ul>
<li>因此出于性能考虑，读写频繁的场合可能会考虑使用直接内存。</li>
<li>Java的NIO库允许Java程序使用直接内存，用于数据缓冲区。</li>
</ul>
<blockquote>
<p>⌨️示例</p>
</blockquote>
<p>使用下列代码，直接分配本地内存空间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BUFFER = <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(BUFFER);</span><br><span class="line">        System.out.println(<span class="string">&quot;直接内存分配完毕&quot;</span>);</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        scanner.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;直接内存开始释放&quot;</span>);</span><br><span class="line">        byteBuffer = <span class="keyword">null</span>;</span><br><span class="line">        System.gc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行之后可以看到进程已分配内存：</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/6513/image-20210307135732364.png" class="" title="image-20210307135732364">



<h2 id="10-2-🌀-非直接缓冲区和缓冲区"><a href="#10-2-🌀-非直接缓冲区和缓冲区" class="headerlink" title="10.2 🌀 非直接缓冲区和缓冲区"></a>10.2 🌀 非直接缓冲区和缓冲区</h2><blockquote>
<p>🟣非直接缓冲区</p>
</blockquote>
<p>读写文件，需要与磁盘交互，需要由用户态切换到内核。在内核态时，需要内存如下图的操作。</p>
<p>需要两份内存存储重复数据，效率低。</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/6513/image-20210307140157439.png" class="" title="image-20210307140157439">



<blockquote>
<p>🟠直接缓冲区</p>
</blockquote>
<p>使用NIO时，如下图。</p>
<p>操作系统划出的直接缓存区可以被Java代码直接访问，只有一份。</p>
<p>NIO适合对大文件的读写操作。</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/6513/image-20210307140437915.png" class="" title="image-20210307140437915">



<blockquote>
<p>⌨️测试案例</p>
</blockquote>
<p>分别使用BIO和NIO进行复制复联四电影文件(3.74GB)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFileTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MOVIE_NAME = <span class="string">&quot;D:/BaiduNetdiskDownload/复仇者联盟4-终局之战.mp4&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ONE_HUNDRED_MB = <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BIO耗时：&quot;</span> + inDirectBuffer(MOVIE_NAME, MOVIE_NAME + <span class="string">&quot;.copy.mp4&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;NIO耗时：&quot;</span> + directBuffer(MOVIE_NAME, MOVIE_NAME+ <span class="string">&quot;.copy.mp4&quot;</span>)); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * BIO复制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">inDirectBuffer</span><span class="params">(String src, String dest)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(src);</span><br><span class="line">        FileOutputStream outputStream = <span class="keyword">new</span> FileOutputStream(dest);</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[ONE_HUNDRED_MB];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = inputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            outputStream.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        outputStream.close();</span><br><span class="line">        <span class="keyword">return</span> end - start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * NIO复制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">directBuffer</span><span class="params">(String src, String dest)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        FileChannel inChannel = <span class="keyword">new</span> FileInputStream(src).getChannel();</span><br><span class="line">        FileChannel outChannel = <span class="keyword">new</span> FileOutputStream(dest).getChannel();</span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(ONE_HUNDRED_MB);</span><br><span class="line">        <span class="keyword">while</span> (inChannel.read(byteBuffer) != -<span class="number">1</span>) &#123;</span><br><span class="line">            byteBuffer.flip();</span><br><span class="line">            outChannel.write(byteBuffer);</span><br><span class="line">            byteBuffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        inChannel.close();</span><br><span class="line">        outChannel.close();</span><br><span class="line">        <span class="keyword">return</span> end - start;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BIO耗时：11946</span><br><span class="line">NIO耗时：9079</span><br></pre></td></tr></table></figure>



<h2 id="10-3-💢-存在的问题"><a href="#10-3-💢-存在的问题" class="headerlink" title="10.3 💢 存在的问题"></a>10.3 💢 存在的问题</h2><blockquote>
<p>🔺问题</p>
</blockquote>
<ul>
<li><p>也可能导致OutOfMemoryError异常。</p>
</li>
<li><p>由于直接内存在Java堆外，因此它的大小不会直接受限于-Xmx指定的最大堆大小，但是系统内存是有限的，Java堆和直接内存的总和依然受限于操作系统能给出的最大内存。</p>
</li>
</ul>
<blockquote>
<p>🔻缺点</p>
</blockquote>
<ul>
<li>分配回收成本高。</li>
<li>不受JVM内存回收管理。</li>
</ul>
<blockquote>
<p>💌总结</p>
</blockquote>
<p>java process memory = java heap + native memory</p>
<p>进程内存空间 = 堆空间 + 本地内存</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-9(对象)</title>
    <url>/posts/37633/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="9-1-🤦‍♂️对象实例化"><a href="#9-1-🤦‍♂️对象实例化" class="headerlink" title="9.1 🤦‍♂️对象实例化"></a>9.1 🤦‍♂️对象实例化</h2><blockquote>
<p>📷思维导图</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/37633/image-20210518160044708.png" class="" title="image-20210518160044708">



<blockquote>
<p>⌨️对象创建主流方式</p>
</blockquote>
<p>实体类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.easy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span> </span><br><span class="line"><span class="meta">@AllArgsConstructor</span> </span><br><span class="line"><span class="meta">@NoArgsConstructor</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoData</span> <span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">Cloneable</span> </span>&#123; </span><br><span class="line">     </span><br><span class="line">    <span class="keyword">private</span> String stringData; </span><br><span class="line">    <span class="keyword">private</span> Date dateData; </span><br><span class="line">    <span class="keyword">private</span> Integer intData; </span><br><span class="line">    <span class="keyword">private</span> Double douData; </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.Test</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testClass</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException, CloneNotSupportedException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1 new</span></span><br><span class="line">    DemoData demoData1 = <span class="keyword">new</span> DemoData(<span class="string">&quot;1-start&quot;</span>, <span class="keyword">new</span> Date(), <span class="number">1</span>, <span class="number">0.1</span>);</span><br><span class="line">    System.out.println(demoData1.toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2 反射</span></span><br><span class="line">    Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;top.parak.easy.DemoData&quot;</span>);</span><br><span class="line">    <span class="comment">// 使用Class.newInstance()创建</span></span><br><span class="line">    DemoData demoData2 = (DemoData) clazz.newInstance();</span><br><span class="line">    demoData2.setStringData(<span class="string">&quot;2-start&quot;</span>);</span><br><span class="line">    demoData2.setDateData(<span class="keyword">new</span> Date());</span><br><span class="line">    demoData2.setIntData(<span class="number">2</span>);</span><br><span class="line">    demoData2.setDouData(<span class="number">0.2</span>);</span><br><span class="line">    System.out.println(demoData2.toString());</span><br><span class="line">    <span class="comment">// 使用Constructor.newInstance()创建</span></span><br><span class="line">    Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(String.class, Date.class, Integer.class, Double.class);</span><br><span class="line">    DemoData demoData3 = (DemoData) constructor.newInstance(<span class="string">&quot;3-start&quot;</span>, <span class="keyword">new</span> Date(), <span class="number">3</span>, <span class="number">0.3</span>);</span><br><span class="line">    System.out.println(demoData3.toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3 clone</span></span><br><span class="line">    DemoData demoData4 = (DemoData) demoData1.clone();</span><br><span class="line">    demoData4.setStringData(<span class="string">&quot;4-start&quot;</span>);</span><br><span class="line">    demoData4.setIntData(<span class="number">4</span>);</span><br><span class="line">    demoData4.setDouData(<span class="number">0.4</span>);</span><br><span class="line">    System.out.println(demoData4.toString());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4 Serializable</span></span><br><span class="line">    ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;data.ser&quot;</span>));</span><br><span class="line">    objectOutputStream.writeObject(demoData1);</span><br><span class="line">    objectOutputStream.close();</span><br><span class="line">    ObjectInputStream objectInputStream =<span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;data.ser&quot;</span>));</span><br><span class="line">    DemoData demoData5 = (DemoData) objectInputStream.readObject();</span><br><span class="line">    demoData5.setStringData(<span class="string">&quot;5-start&quot;</span>);</span><br><span class="line">    demoData5.setIntData(<span class="number">5</span>);</span><br><span class="line">    demoData5.setDouData(<span class="number">0.5</span>);</span><br><span class="line">    System.out.println(demoData5.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DemoData(stringData&#x3D;1-start, dateData&#x3D;Tue Dec 15 20:23:31 CST 2020, intData&#x3D;1, douData&#x3D;0.1)</span><br><span class="line">DemoData(stringData&#x3D;2-start, dateData&#x3D;Tue Dec 15 20:23:31 CST 2020, intData&#x3D;2, douData&#x3D;0.2)</span><br><span class="line">DemoData(stringData&#x3D;3-start, dateData&#x3D;Tue Dec 15 20:23:31 CST 2020, intData&#x3D;3, douData&#x3D;0.3)</span><br><span class="line">DemoData(stringData&#x3D;4-start, dateData&#x3D;Tue Dec 15 20:23:31 CST 2020, intData&#x3D;4, douData&#x3D;0.4)</span><br><span class="line">DemoData(stringData&#x3D;5-start, dateData&#x3D;Tue Dec 15 20:23:31 CST 2020, intData&#x3D;5, douData&#x3D;0.5)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>🎨对象创建六大步骤</p>
</blockquote>
<p>（1）判断对象对应的类是否加载、链接、初始化</p>
<p>虚拟机遇到一条new指令，首先去检查这个指令的参数能否在Metaspace的常量池中定位到一个类的符合引用，并且检查这个符号引用代表的类已经被加载、解析和初始化（即判断类元信息是否存在）。如果没有，那么在双亲委派模式下，使用当前类加载器以ClassLoader+包名+类名为key进行查找对应的.class文件，如果没有找到文件，则抛出ClassNotFoundException异常；如果找到则进行类加载，并生成响应的Class对象。</p>
<p>（2）为对象分配内存</p>
<p>首先计算对象占用恐案件的大小，接着在堆中划分一块内存给新对象。如果实例成员变量是引用变量，仅分配引用变量空间即可，即4个字节。</p>
<p>如果内存规整：指针碰撞。</p>
<p>如果内存不规整：虚拟机需要维护一个列表，空闲列表。</p>
<p>如果内存是规整的，那么虚拟机将采用指针碰撞法（Bump The Point）来为对象分配内存。意思是所有用过的内存在一边，空闲的内存放另外一边，中间放着一个指针作为分界点的指示器，分配内存就仅仅是把指针指向空闲那边挪动一段与对象大小相等的距离罢了。如果垃圾收集器选择的是Serial，ParNew这种基于压缩算法的，虚拟机采用这种分配方式。一般使用带Compact（整理）过程的收集器时，使用指针碰撞。</p>
<p>如果内存是不规整的，已使用内存和未使用的内存相互交错，那么虚拟机将采用的是空闲列表来为对象分配内存。意思是虚拟机维护了一个列表，记录 上那些内存块是可用的，再分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的内容。这种分配方式成为了“空闲列表”。</p>
<p>选择哪种分配方式由Java堆是否规整所决定，而Java堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定。</p>
<p>（3）处理并发安全问题</p>
<p>在分配内存空间时，另外一个问题是及时保证new对象时候的线程安全性：创建对象是非常长频繁的操作，虚拟机需要解决并发问题。虚拟机采用两种方式解决并发问题：</p>
<ul>
<li><p>CAS(Compare And Swap)失败重试 、区域加锁：保证指针更新操作的原子性；</p>
</li>
<li><p>每个线程预先分配一块TLAB(本地线程分配缓冲区)，是否使用TLAB通过-XX:+/-UseTLAB参数来设定。</p>
</li>
</ul>
<p>（4）初始化分配到的空间</p>
<p>内存分配结束，虚拟机将分配到的内存空间都初始化为零值。这一步保证了对象的实例字段在Java代码中可以不用赋初始值就可以直接使用，程序能访问到这些字段的数据类型所对应的零值。</p>
<p>给对象属性赋值的操作：</p>
<ul>
<li>属性的默认初始化</li>
<li>显示初始化</li>
<li>代码块中的初始化</li>
<li>构造器初始化</li>
<li>所有属性设置默认值，保证对象实例字段在不赋值的情况下可以直接使用</li>
</ul>
<p>（5）设置对象的对象头</p>
<p>将对象的所属类（即类的元数据信息）、对象的HashCode和对象的GC信息、锁信息等数据存储在对象的对象头中。这个过程的具体设置方式取决于JVM实现。</p>
<p>（6）执行init方法进行初始化</p>
<p>在Java程序的视角来看，初始化才正式开始。初始化成员变量，执行实例化代码块，调用类的构造方法，并把堆内对象的首地址复制给引用变量。</p>
<p>因此一般来说（由字节码中跟随invokespecial指令所决定），new指令之后就是执行方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完整创建出来。</p>
<h2 id="9-2-🔳-对象内存布局"><a href="#9-2-🔳-对象内存布局" class="headerlink" title="9.2 🔳 对象内存布局"></a>9.2 🔳 对象内存布局</h2><blockquote>
<p>📷思维导图</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/37633/image-20210518160117665.png" class="" title="image-20210518160117665">



<p>普通对象 Object Header（64 bits）</p>
<table>
<thead>
<tr>
<th>Mark Word（32 bits）</th>
<th>Class Pointer（32 bits）</th>
</tr>
</thead>
</table>
<p>数组对象 Object Header（96 bits）</p>
<table>
<thead>
<tr>
<th>Mark Word（32 bits）</th>
<th>Class Pointer（32 bits）</th>
</tr>
</thead>
</table>
<p>其中Mark Word结构，在正常无锁状态下：</p>
<table>
<thead>
<tr>
<th>hashcode （25 bits）</th>
<th>gc age（4 bits）</th>
<th>biased_lock （1 bits）</th>
<th>lock state （2 bits）</th>
</tr>
</thead>
</table>
<h2 id="9-3-🛰️-对象访问定位"><a href="#9-3-🛰️-对象访问定位" class="headerlink" title="9.3 🛰️ 对象访问定位"></a>9.3 🛰️ 对象访问定位</h2><blockquote>
<p>❔JVM是如何通过栈帧中的对象引用访问到其内部的对象实例的呢？</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/37633/image-20210307115251686.png" class="" title="image-20210307115251686">



<blockquote>
<p>1️⃣句柄访问</p>
</blockquote>
<p>栈的局部变量表中，记录的对象的引用，然后在堆空间中开辟了一块空间，也就是句柄池。</p>
<p>优点：reference中存储稳定句柄地址，对象被移动（垃圾收集时移动对象很普遍）时只会改变句柄中实例数据指针即可，reference本身不需要被修改。</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/37633/image-20210307120509642.png" class="" title="image-20210307120509642">





<blockquote>
<p>2️⃣直接指针</p>
</blockquote>
<p>直接指针是局部变量表中的引用，直接指向堆中的实例，在对象实例中有类型指针，指向的是方法区中的对象类型数据。</p>
<p>好处：节省空间，速度更快。</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/37633/image-20210307120911877.png" class="" title="image-20210307120911877">

]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-8(方法区)</title>
    <url>/posts/19997/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="8-1-📓-理解"><a href="#8-1-📓-理解" class="headerlink" title="8.1 📓 理解"></a>8.1 📓 理解</h2><blockquote>
<p>📚规范</p>
</blockquote>
<p>《Java虚拟机规范》中明确说明：“尽管所有的方法区在逻辑上是属于堆的一部分，但一些简单的实现可能不会选择去进行垃圾收集或者进行压缩。”但对于HotSpotJVM而言，方法区还有一个别名叫做Non-Heap（非堆），目的就是要和堆分开。</p>
<p>所以，方法区看作是一块独立于Java堆的内存空间。</p>
<blockquote>
<p>💬说明</p>
</blockquote>
<p>方法区主要存放的是Class，而堆中主要存放的实例化的对象。</p>
<ul>
<li><p>方法区和Java堆一样，是各个线程共享的内存区域。</p>
</li>
<li><p>方法区在JVM启动的时候被创建，并且它的实际的物理内存空间和Java堆区一样都可以是不连续的。</p>
</li>
<li><p>方法区的大小，跟堆一样，可以选择固定大小或可扩展。</p>
</li>
<li><p>方法区的大小，跟堆空间一样，可以选择固定大小或者可扩展。</p>
</li>
<li><p>方法区的大小决定了系统可以保存多少个类，如果系统定义了太多的类，导致方法区溢出，虚拟机同样会抛出内存溢出错误<code>java.lang.OutofMemoryError:PermGen space</code>或者<code>java.lang.OutOfMemoryError:Metaspace</code></p>
</li>
<li><ul>
<li>加载大量的第三方jar包</li>
<li>Tomcat部署的工程过多</li>
<li>大量动态的生成反射类</li>
</ul>
</li>
<li><p>关闭JVM就会释放这个区域的内存。</p>
</li>
</ul>
<blockquote>
<p>⏳演进</p>
</blockquote>
<p>JDK7及以前，习惯上把方法区，称为永久代。jdk8开始，使用元空间取代了永久代。</p>
<p>JDK8后，元空间存放在堆外内存中</p>
<p>本质上，方法区和永久代并不等价。仅是对hotspot而言的。《Java虚拟机规范》对如何实现方法区，不做统一要求。例如：BEAJRockit / IBM J9 中不存在永久代的概念。</p>
<p>而到了JDK8，终于完全废弃了永久代的概念，改用与JRockit、J9一样在本地内存中实现的元空间（Metaspace）来代替。</p>
<p>元空间的本质和永久代类似，都是对JVM规范中方法区的实现。不过元空间与永久代最大的区别在于：元空间不在虚拟机设置的内存中，而是使用本地内存。</p>
<p>永久代、元空间二者并不只是名字变了，内部结构也调整了。</p>
<p>根据《Java虚拟机规范》的规定，如果方法区无法满足新的内存分配需求时，将抛出OOM异常。</p>
<h2 id="8-2-⚙️设置方法区大小与OOM"><a href="#8-2-⚙️设置方法区大小与OOM" class="headerlink" title="8.2 ⚙️设置方法区大小与OOM"></a>8.2 ⚙️设置方法区大小与OOM</h2><p>方法区的大小是不必固定的，JVM可以根据应用的需要动态调整。</p>
<blockquote>
<p>7️⃣JDK7以前</p>
</blockquote>
<ul>
<li>-XX:Permsize：设置永久代初始分配空间（默认值是20.75M）</li>
<li>-XX:MaxPersize：设置永久代最大分配空间（32位机器默认是64M，64位机器默认是82M）</li>
<li>当JVM加载的类信息容量超过了这个值，会报异常OutofMemoryError。</li>
</ul>
<blockquote>
<p>8️⃣JDK8以后</p>
</blockquote>
<ul>
<li>-XX:MetaspaceSize：设置元空间初始分配空间</li>
<li>-XX:MaxMetaspaceSize：设置元空间最大分配空间</li>
<li>默认值依赖于平台：Windows下，元空间初始空间21M，元空间最大空间-1，即没有限制。</li>
<li>与永久代不同，如果不指定大小，默认情况下，虚拟机会耗尽所有的可用系统内存。如果元数据区发生溢出，虚拟机一样会抛出异常OutofMemoryError。</li>
<li>对于一个64位的服务器端JVM来说，其默认的-XX:MetaspaceSize值为21MB。这就是初始的高水位线，一旦触及这个水位线，Full GC将会被触发并卸载没用的类（即这些类对应的类加载器不再存活），然后这个高水位线将会重置。新的高水位线的值取决于GC后释放了多少元空间。如果释放的空间不足，那么在不超过MaxMetaspaceSize时，适当提高该值；如果释放空间过多，则适当降低该值。</li>
<li>如果初始化的高水位线设置过低，上述高水位调整情况会发生很多次。通过垃圾回收器的日志可以观察到Full GC多次调用。为了避免频发地GC，建议将-XX:MetaspaceSize设置为一个相对较高的值。</li>
</ul>
<blockquote>
<p>✅解决OOM</p>
</blockquote>
<ol>
<li>要解决OOM异常或者heap space的异常，一般的手段是首先通过内存映像分析工具（如Eclipse Memory Analyzer）对dump出来的堆转储快照进行分析，重点是确认内存中的对象是否是必要的，也就是要分清楚到底是出现了内存泄露（Memory Leak）还是内存溢出（Memory Overflow）。</li>
<li>如果是内存泄露，可进一步通过工具查看泄露对象到GC Roots的引用链。于是就能找到泄露对象是通过怎样的路径与GC Roots相关联并导致垃圾收集器无法自动回收它们的。掌握了泄露对象的类型信息，以及GC Roots引用链的信息，就可以比较准确地定位出泄露代码的位置。</li>
<li>如果不存在内存泄露，换句话说就是内存中的对象确实都还必须存活着，那就应当检查虚拟机的堆参数（-Xmx和-Xms），与机器物理内存对比看是否还可以调大，从代码上检查是否存在某些对象生命周期过长、持有状态时间过长的情况，尝试减少程序运行期的内存消耗。</li>
</ol>
<h2 id="8-3-📂方法区的内部结构"><a href="#8-3-📂方法区的内部结构" class="headerlink" title="8.3 📂方法区的内部结构"></a>8.3 📂方法区的内部结构</h2><blockquote>
<p>🟦存储</p>
</blockquote>
<p>存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等。</p>
<blockquote>
<p>1️⃣类型信息</p>
</blockquote>
<p>对每个加载的类型（类class、接口interface、枚举enum、注解annotation），JVM必须在方法区中存储以下类型信息：</p>
<ul>
<li>这个类型的完整有效名称（全名=包名.类名）</li>
<li>这个类型直接父类的完整有效名(对于interface或Object，都没有父类)</li>
<li>这个类型的修饰符（public、abstract、final的某个子集）</li>
<li>这个类型直接接口的一个有序列表</li>
</ul>
<blockquote>
<p>2️⃣域信息</p>
</blockquote>
<ul>
<li>JVM必须在方法区保存类型的所有域相关信息以及域的声明顺序</li>
<li>域相关信息包括：域名称、域类型、域修饰符（public、private、protected、static、final、volatile、transient的某个子集）</li>
</ul>
<blockquote>
<p>3️⃣方法信息</p>
</blockquote>
<p>JVM必须保存所有的以下信息以及声明顺序：</p>
<ul>
<li>方法名称</li>
<li>方法的返回类型</li>
<li>方法参数的数量和类型</li>
<li>方法的修饰符（public、private、protected、static、final、synchronized、native、abstract的某个子集）</li>
<li>方法的字节码、操作数栈、局部变量表及大小（abstract和native方法除外）</li>
<li>异常表（abstract和native方法除外）<ul>
<li>每个异常处理的开始位置、结束位置、代码处理在程序计数器中的偏移地址、被捕获的异常类的常量池索引</li>
</ul>
</li>
</ul>
<blockquote>
<p>4️⃣static no-final的类变量</p>
</blockquote>
<ul>
<li>静态变量和类关联在一起，随着类的加载而加载，它们称为类数据在逻辑上的一部分。</li>
<li>类变量被类的所有实例共享，即使没有类实例时也可以访问。</li>
</ul>
<blockquote>
<p>5️⃣static final的全局变量</p>
</blockquote>
<ul>
<li>全局变量在编译的时候就会被分配。</li>
</ul>
<blockquote>
<p>运行时常量池🆚Class文件常量池</p>
</blockquote>
<ul>
<li>方法区，内部包含了运行时常量池。</li>
<li>字节码文件，内部包含了Class文件常量池。</li>
<li>要弄清楚方法区，需要清楚ClassFile，因为加载类的信息都在方法区。</li>
<li>需要弄清楚方法区的运行时常量池，需要理解清楚ClassFile中的常量池。</li>
</ul>
<blockquote>
<p>📃Class文件常量池</p>
</blockquote>
<p>class文件中除了包含类的版本、字段、方法、接口等描述信息外，还有一项信息就是常量池，用于存放编译期生成的各种字面量和符号引用。</p>
<p>字面量就是我们所说的常量概念，如文本字符串、被声明为final的常量值等。</p>
<p>符号引用时一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。一般包括下面三类常量：</p>
<ul>
<li>类和接口的全限定名</li>
<li>字段的名称和描述符</li>
<li>方法的名称和描述符</li>
</ul>
<blockquote>
<p>📃运行时常量池</p>
</blockquote>
<ul>
<li>运行时常量池是方法区的一部分。</li>
<li>常量池表示Class文件的一部分，用于存放编译期生成的各种字面量与符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。</li>
<li>运行时常量池，在加载类和接口到虚拟机后，就会创建对应的运行时常量池。</li>
<li>JVM为每个已加载的类型（类或接口）都维护一个常量池。池中的数据项像数据项一样，是通过索引访问的。</li>
<li>运行时常量池中内含多种不同的常量，包括编译期就已经明确的数值字面量，也包括到运行期解析后才能够获得的方法或者字段引用。此时不再是常量池中的符号地址，这里换为真实地址。<ul>
<li>运行时常量池，相对于Class文件常量池的另一种重要特征是：具备动态性。</li>
</ul>
</li>
<li>运行时常量池类似于传统编程语言中的符号表，但是它所包含的数据却比符号表要更加丰富一些。</li>
<li>当创建类或接口的运行时常量池时，如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大值，则JVM会抛出OOM异常。</li>
</ul>
<blockquote>
<p>🔰总结</p>
</blockquote>
<ul>
<li>Class文件常量池是在编译的时候每个class就有的，存放的是常量和符号引用。</li>
<li>运行时常量池是在类加载完成之后，将每个Class文件常量池中的符号引用值转存到运行时常量池中，</li>
</ul>
<h2 id="8-4-⌨️-方法区的使用举例"><a href="#8-4-⌨️-方法区的使用举例" class="headerlink" title="8.4 ⌨️ 方法区的使用举例"></a>8.4 ⌨️ 方法区的使用举例</h2><h2 id="8-5-🔭-方法区的演进细节"><a href="#8-5-🔭-方法区的演进细节" class="headerlink" title="8.5 🔭 方法区的演进细节"></a>8.5 🔭 方法区的演进细节</h2><blockquote>
<p>〰如下</p>
</blockquote>
<ol>
<li>首先明确。只有HotSpot才有永久代。BEA JRockit、IBM J9等不存在永久代。原则上如何实现方法区属于虚拟机实现细节，不受《Java虚拟机规范》管束，并不要求统一。</li>
<li>HotSpot中方法区的变化：</li>
</ol>
<table>
<thead>
<tr>
<th>版本</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>JDK1.6及之前</td>
<td>有永久代。静态变量存放在永久代上。</td>
</tr>
<tr>
<td>JDK1.7</td>
<td>有永久代，但已经逐步“去永久代”，字符串常量池、静态变量移除，保存在堆中。</td>
</tr>
<tr>
<td>JDK1.8及之后</td>
<td>无永久代，类型信息、字段、方法、常量保存在本地内存的元空间，但字符串常量池、静态变量仍然在堆中。</td>
</tr>
</tbody></table>
<blockquote>
<p>❓为什么永久代要被元空间替代</p>
</blockquote>
<p>JRockit是和HotSpot融合后的结果，因为JRockit没有永久代，所以他们不需要配置永久代。</p>
<p>随着Java8的到来，HotSpot VM中再也见不到永久代了。但是这并不意味着类的元数据信息也消失了。这些数据被移到了一个与堆不相连的本地内存区域，这个区域叫做元空间（Metaspace）。</p>
<p>由于类的元数据分配在本地内存中。元空间的最大可分配空间就是系统可用内存空间，这项改动是很有必要的，原因有：</p>
<p>（1）为永久代设置空间大小是很难确定的。</p>
<p>在某些场景下，如果动态加载类过多，容易产生Perm区（永久代）的OOM。</p>
<p>元空间和永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。因此，默认情况下，元空间的大小仅受本地内存限制。</p>
<p>（2）对永久代进行调优是很困难的。</p>
<p>《Java虚拟机规范》对方法区的约束是非常宽松的，提到过可以不要求虚拟机在方法区中实现垃圾收集。事实上也确实有未实现或未能完整实现方法区类型卸载的收集器存在（如JDK11时期的ZGC收集器就不支持类卸载）。</p>
<p>一般来说这个区域的回收效果比较令人难以满意，尤其是类型的卸载，条件相当苛刻。但是这部分区域的回收有时又确实是必要的。以前Sun公司的Bug列表中，曾出现过的若干个严重的Bug就是由于低版本的HotSpot虚拟机对此区域未完全回收而导致内存泄漏。</p>
<p>方法区的垃圾收集主要收集两部分内容：常量池中废弃的常量和不再使用的类型。</p>
<blockquote>
<p>❓为什么StringTable调整位置</p>
</blockquote>
<p>JDK7中将StringTable放到了堆空间中。因为永久代的回收效率很低，在full gc的时候才会触发。而full gc是老年代的空间不足、永久代不足时才会触发，这就导致StringTable回收效率不高。</p>
<p>而我们开发中会有大量的字符串被创建，回收效率低，导致永久代内存不足。放到堆里，能及时回收内存。</p>
<h2 id="8-6-♻-方法区的垃圾回收"><a href="#8-6-♻-方法区的垃圾回收" class="headerlink" title="8.6 ♻ 方法区的垃圾回收"></a>8.6 ♻ 方法区的垃圾回收</h2><blockquote>
<p>📖概述</p>
</blockquote>
<ul>
<li>判定一个常量是否废弃还是相对简单，而要判定一个类型是否属于“不再被使用的类”的条件就比较苛刻了。需要同时满足下面三个条件：</li>
</ul>
<ol>
<li><ol>
<li>该类所有的实例都已经被回收，也就是Java堆中不存在该类及其任何派生子类的实例。</li>
<li>加载该类的类加载器已经被回收，这个条件除非是经过精心设计的可替换类加载器的场景，如OSGI、JSP的重加载等，否则通常是很难达成的。</li>
<li>该类对应的java.lang.Class对象没有在任何地方化被引用，无法再任何地方通过反射访问该类的方法。</li>
</ol>
</li>
</ol>
<ul>
<li>Java虚拟机被允许对满足上述条件的无用类进行回收，这里说的仅仅是“被允许”，而并不是和对象一样，没有引用了就必然会回收。关于是否要对类型进行回收，HotSpot虚拟机提供了-Xnoclassgc参数进行控制，还可以使用-verbose:class以及-XX:+TranClass-Loading、-XX:+TraceClassUnLoading查看类加载和卸载信息。</li>
<li>在大量使用反射、动态代理、CGLIB等字节码框架，动态生成JSP以及OSGI这类频繁自定义类加载器的场景中，通常都需要Java虚拟机具备类型卸载能力，以保证不会对方法区造成过大的内存压力。</li>
</ul>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-7(堆)</title>
    <url>/posts/11581/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="7-1-📚-概述"><a href="#7-1-📚-概述" class="headerlink" title="7.1 📚 概述"></a>7.1 📚 概述</h2><blockquote>
<p>📖定义</p>
</blockquote>
<p>所有的对象实例以及数组都应当在运行时分配在堆上。</p>
<blockquote>
<p>💬说明</p>
</blockquote>
<ul>
<li>数组和对象可能永远不会存储在栈上，因为栈帧中保存引用，这个引用指向对象或者数组在堆中的位置。</li>
<li>在方法结束后，堆中的对象不会马上被移除，仅仅在垃圾收集的时候才会被移除。</li>
<li>堆，是GC（Garbage Collection，垃圾收集器）执行垃圾回收的重点区域。</li>
<li>一个JVM实例只存在一个堆内存，堆也是Java内存管理的核心区域。</li>
<li>Java堆区在JVM启动的时候即被创建，其空间大小也就确定了，是JVM管理的最大一块内存空间（堆内存的大小是可以调节的）。</li>
<li>堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为连续的。</li>
<li>所有的线程共享Java堆，在这里还可以划分线程私有的缓冲区（Thread Local Allocation Buffer，TLAB）。</li>
</ul>
<blockquote>
<p>✂️内存细分</p>
</blockquote>
<p><strong>现代垃圾收集器大部分都基于分代收集理论设计</strong></p>
<p>Java 7及之前：</p>
<table>
<thead>
<tr>
<th>中文</th>
<th>洋文</th>
<th>简称</th>
</tr>
</thead>
<tbody><tr>
<td>新生区</td>
<td>Young Generation Sapce</td>
<td>Young (Eden + Survivor)</td>
</tr>
<tr>
<td>养老区</td>
<td>Tenure Generation Space</td>
<td>Old</td>
</tr>
<tr>
<td>永久区</td>
<td>Permanent Space</td>
<td>Perm</td>
</tr>
</tbody></table>
<p>Java 8及之后</p>
<table>
<thead>
<tr>
<th>中文</th>
<th>洋文</th>
<th>简称</th>
</tr>
</thead>
<tbody><tr>
<td>新生区</td>
<td>Young Generation Sapce</td>
<td>Young (Eden + Survivor)</td>
</tr>
<tr>
<td>养老区</td>
<td>Tenure Generation Space</td>
<td>Old</td>
</tr>
<tr>
<td>元空间</td>
<td>Meta Space</td>
<td>Meta</td>
</tr>
</tbody></table>
<p>约定：新生区↔️新生代↔️年轻代  养老区↔️老年区↔️老年代  永久区↔️永久代</p>
<h2 id="7-2-⚙️-设置堆内存大小与OOM"><a href="#7-2-⚙️-设置堆内存大小与OOM" class="headerlink" title="7.2 ⚙️ 设置堆内存大小与OOM"></a>7.2 ⚙️ 设置堆内存大小与OOM</h2><blockquote>
<p>💬说明</p>
</blockquote>
<ul>
<li>Java堆区用于存储Java对象实例，那么堆的大小在JVM启动时就已经设定好了，大家可以通过选项<code>-Xms</code>和<code>-Xms</code>来进行设置。<ul>
<li><code>-Xms</code>：用于表示堆区的起始内存，等价于<code>-XX:InitialHeapSize</code></li>
<li><code>-Xmx</code>：用于表示堆区的最大内存，等价于<code>-XX:MaxHeapSize</code></li>
</ul>
</li>
<li>一旦堆区中的内存大小超过<code>-Xmx</code>所指定的最大内存时，将会抛出<code>OutOfMemoryError</code>异常。</li>
<li>通常会将<code>-Xms</code>和<code>-Xmx</code>两个参数配置相同的值，其目的是为了能够在Java垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小，从而提高性能。</li>
<li>默认情况下<ul>
<li>初始内存大小 = 物理电脑内存大小 / 64</li>
<li>最大内存大小 = 物理电脑内存大小 / 4</li>
</ul>
</li>
<li>查看设置参数<ul>
<li>方式一：<code>jps</code>  +  <code>jstat -gc &lt;进程ID&gt;</code></li>
<li>方式二：<code>-XX:PrintGCDetails</code></li>
</ul>
</li>
</ul>
<h2 id="7-3-🧚‍♂️-年轻代与老年代"><a href="#7-3-🧚‍♂️-年轻代与老年代" class="headerlink" title="7.3 🧚‍♂️ 年轻代与老年代"></a>7.3 🧚‍♂️ 年轻代与老年代</h2><blockquote>
<p>💬说明</p>
</blockquote>
<ul>
<li>存储在JVM中的Java对象可以被划分为两类：<ul>
<li>一类是生命周期较短的瞬时对象，这类对象的创建和消亡都非常迅速。</li>
<li>另外一类对象的生命周期却非常长，在某些极端的情况下还能够与JVM的生命周期保持一致。</li>
</ul>
</li>
<li>Java堆区进一步细分的话，可以划分为年轻代（YoungGen）和老年代（OldGen）。</li>
<li>其中年轻代又可以划分为Eden空间、Survior0空间和Survivor1空间（有时也叫做from区、to区）。</li>
<li>在HotSpot中，Eden区和另外两个Survivor空间缺省比例是8:1:1。</li>
<li>几乎所有的Java对象都是在Eden区被new出来的，绝大部分的Java对象的销毁都在新生代进行了。IBM公司的专门研究表明，新生代中80%的对象都是朝生夕死的。</li>
</ul>
<blockquote>
<p>📷图示</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/11581/image-20210206152459643.png" class="" title="image-20210206152459643">



<blockquote>
<p>💠配置</p>
</blockquote>
<p>配置新生代与老年代在堆结构的占比。</p>
<ul>
<li><p><code>-Xmn</code>：设置新生代最大内存大小</p>
</li>
<li><p><code>-XX:NewRatio=x</code>：设置新生代占整个堆的1/(x+1)，老年代占整个堆的x/(x+1)。（默认值是2）</p>
</li>
<li><p><code>-XX:SurvivorRatio</code>：设置新生代中Eden区与Survivor区的比例。（默认值是8）</p>
</li>
<li><p><code>-XX:UseAdaptiveSizePolicy</code>：关闭自适应的内存分配策略。（暂时用不到）</p>
</li>
</ul>
<h2 id="7-4-📷-图解对象分配过程"><a href="#7-4-📷-图解对象分配过程" class="headerlink" title="7.4 📷 图解对象分配过程"></a>7.4 📷 图解对象分配过程</h2><blockquote>
<p>💬说明</p>
</blockquote>
<p>为新对象分配内存是一件非常严谨和复杂的任务。JVM的设计者们不仅需要考虑内存如何分配、在哪里分配等问题，并且由于内存分配算法与内存回收算法密切相关，所以还需要考虑GC执行完内存回收后是否会在内存空间中产生内存碎片。</p>
<blockquote>
<p>⏳过程</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/11581/image-20210206235400990.png" class="" title="image-20210206235400990">

<ol>
<li>new的对象先放在伊甸园区，此区有大小限制。</li>
<li>当伊甸园区的空间填满时，程序又需要创建对象，JVM的垃圾回收器将对伊甸园进行垃圾回收，将伊甸园区中的不再被其他对象所引用的对象进行销毁。再加载新的对象放到伊甸园区。</li>
<li>然后将伊甸园区的剩余对象移动到幸存者0区。</li>
<li>如果再次触发垃圾回收，此时上次幸存下来的放到幸存者0区，如果没有回收，就会放到幸存者1区。</li>
<li>如果再次经历垃圾回收，此时会重新放回幸存者0区，接着再去幸存者1区。</li>
<li>至于啥时候去养老区，可以设置次数。默认是15次。</li>
<li>在养老区，相对悠闲。当养老区内存不足时，再次触发GC: Major GC，进行养老区的内存清理。</li>
<li>若养老区执行了Major GC之后发现依然无法进行对象的保存，就会产生OOM异常。</li>
</ol>
<blockquote>
<p>🔬图解</p>
</blockquote>
<p>我们创建的对象，一般都是存放在Eden区的，当我们Eden区满了后，就会触发GC操作，一般被称为 YGC / Minor GC 操作。</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/11581/image-20210206235609719.png" class="" title="image-20210206235609719">

<p>当我们进行一次垃圾收集后，红色的将会被回收，而绿色的还会被占用着，存放在S0(Survivor From)区。同时我们给每个对象设置了一个年龄计数器，一次回收后就是1。</p>
<p>同时Eden区继续存放对象，当Eden区再次存满的时候，又会触发一个Minor GC操作，此时GC将会把Eden和S0(Survivor From)中的对象进行一次收集，把存活的对象放到 S1(Survivor To)A区，同时让年龄 + 1。</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/11581/image-20210206235625078.png" class="" title="image-20210206235625078">

<p>我们继续不断的进行对象生成和垃圾回收，当Survivor中的对象的年龄达到15的时候，将会触发一次 Promotion晋升的操作，也就是将年轻代中的对象晋升到老年代中。</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/11581/image-20210206235645912.png" class="" title="image-20210206235645912">



<blockquote>
<p>❓思考</p>
</blockquote>
<p>当伊甸园区满了之后会触发Minor GC，那么幸存者区满了之后会触发Minor GC吗？</p>
<p>解析：</p>
<p>幸存者区满了之后不会触发Minor GC，但是会触发一些特殊的规则，也就是可能直接晋升老年代。</p>
<p>年龄小于15甚至新的对象都可能直接进入老年代。</p>
<blockquote>
<p>🌈总结</p>
</blockquote>
<ul>
<li>针对幸存者S0和S1区：复制之后有交换，谁空谁是to</li>
<li>关于垃圾回收：频繁在新生区收集，很少在养老区收集，几乎不在永久区/元空间收集。</li>
</ul>
<blockquote>
<p>📊特殊情况</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/11581/image-20200707091058346.png" class="" title="image-20200707091058346">



<blockquote>
<p>⌨️示例</p>
</blockquote>
<p>不断创建大对象，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapInstanceTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">3000</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;HeapInstanceTest&gt; list = <span class="keyword">new</span> ArrayList&lt;HeapInstanceTest&gt;();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> HeapInstanceTest());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>IDEA Configuration设置JVM参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-Xms600m -Xmx600m</span><br></pre></td></tr></table></figure>

<p>CMD输入指令，打开VisualVM：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">jvisualvm</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/11581/HeapInstanceTest.gif" class="" title="HeapInstanceTest">

<p>最终老年代和新生代都满了，出现OOM</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">&quot;main&quot;</span> java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">	at top.parak.HeapInstanceTest.&lt;init&gt;(HeapInstanceTest.java:<span class="number">18</span>)</span><br><span class="line">	at top.parak.HeapInstanceTest.main(HeapInstanceTest.java:<span class="number">23</span>)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>🔧调优工具</p>
</blockquote>
<ul>
<li>JDK命令行</li>
<li>Eclipse：Memory Analyzer Tool</li>
<li>Jconsole</li>
<li>Visual VM（实时监控 推荐）</li>
<li>Jprofiler（推荐）</li>
<li>Java Flight Recorder（实时监控）</li>
<li>GCViewer</li>
<li>GCEasy</li>
</ul>
<h2 id="7-5-♻-Minor-GC、Major-GC、Full-GC"><a href="#7-5-♻-Minor-GC、Major-GC、Full-GC" class="headerlink" title="7.5 ♻ Minor GC、Major GC、Full GC"></a>7.5 ♻ Minor GC、Major GC、Full GC</h2><blockquote>
<p>📖概述</p>
</blockquote>
<p>JVM在进行GC时，并非每次都对三个内存区域（新生代、老年代、方法区）一起回收的，大部分时候回收的都是指新生代。针对HotSpot VM的实现，它里面的GC按照回收区域又分为两大种类型</p>
<ul>
<li>部分收集<ul>
<li>Minor GC(Young GC): 新生代的垃圾收集</li>
<li>Major GC(Old GC): 老年代的垃圾收集<ul>
<li>目前，只有CMS GC会有单独收集老年代的行为</li>
<li>注意，很多时候Major GC会和Full GC混淆使用，需要具体分辨是老年代回收还是整堆回收</li>
</ul>
</li>
<li>Mixed GC: 混合收集，整个新生代以及部分老年代的垃圾</li>
</ul>
</li>
<li>整堆收集(Full GC): 收集整个Java堆和方法区的垃圾收集</li>
</ul>
<blockquote>
<p>🔆触发机制</p>
</blockquote>
<p>1️⃣ Minor GC</p>
<ul>
<li>当年轻代空间不足时，就会触发Minor GC，这里的年轻代满指的是Eden代满，Survivor满不会引发GC。</li>
<li>因为Java对象大多都具备朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。</li>
<li>Minor GC会引发STW，暂停其他的用户的线程，等垃圾回收结束，用户线程才恢复运行。</li>
</ul>
<p>2️⃣ Major GC / Full GC</p>
<ul>
<li>对象从老年代消失，我们说”Major GC”或”Full GC”发生了。</li>
<li>出现了”Major GC”，经常会伴随至少一次的Minor GC（但非绝对的，在Parallel Scavenge收集器的收集策略里就有直接进行的Major GC的策略选择过程）。即在老年代空间不足时，会尝试触发Minor GC；如果之后空间还不足，则触发Major GC。</li>
<li>Major GC的速度一般会比Minor GC慢10倍以上，STW的时间更长。</li>
<li>如果Major GC后，内存还不足，就报OOM了。</li>
<li>Major GC的速度一般会比Minor GC慢10倍以上。</li>
</ul>
<p>3️⃣ Full GC触发机制</p>
<ol>
<li>调用<code>System.gc()</code>时，系统建议执行Full GC，但是不必然执行</li>
<li>老年代空间不足</li>
<li>方法区空间不足</li>
<li>通过Minor GC后进入老年代的平均大小大于老年代的可用内存</li>
<li>由Eden区、Survivor Space 0 (From Space)区向Survivor Space 1 (To Space)区复制时，对象大小大于To Space可用内存，则把该对象转存到老年代，切老年代的可用内存小于该对象大小</li>
</ol>
<p>说明：Full GC是开发或调优中尽量要避免的。</p>
<h2 id="7-6-🧠-堆空间分代思想"><a href="#7-6-🧠-堆空间分代思想" class="headerlink" title="7.6 🧠 堆空间分代思想"></a>7.6 🧠 堆空间分代思想</h2><blockquote>
<p>🔸分代原因</p>
</blockquote>
<p>其实不分代完全可以，分代的唯一理由就是优化GC性能。如果没有分代，那所有的对象都在一块，就如同把一个学校的人都关在一个教室。GC的时候要找到哪些对象没用，这样就会对堆的所有区域进行扫描。而很多对象是朝生夕死的，如果分代的话，把新创建的对象放在某一地方，当GC的时候先把这块存储“朝生夕死”对象的区域进行回收，这样就会腾出很大的空间来。</p>
<h2 id="7-7-🔰-内存分配策略"><a href="#7-7-🔰-内存分配策略" class="headerlink" title="7.7 🔰 内存分配策略"></a>7.7 🔰 内存分配策略</h2><blockquote>
<p>📋总结</p>
</blockquote>
<p>如果对象在Eden出生并经过第一次Minor GC后仍然存活，并且能被Survivor容纳的话，将被移动到Survivor空间中，并将对象年龄设为1。对象在Survivor区中每熬过一次Minor GC，年龄就增加1岁，当它的年龄增加到一定程度（默认5岁，其实每个JVM、每个GC都有所不同）时，就会被晋升到老年代中。</p>
<p>对象晋升老年代的年龄阈值，可以通过选项<code>-XX:MaxTenuringThreshold</code>来设置。</p>
<blockquote>
<p>🌀原则</p>
</blockquote>
<ul>
<li>优先分配到Eden</li>
<li>大对象直接分配到老年代<ul>
<li>尽量避免程序中长期存活的对象分配到老年代出现过多的大对象</li>
</ul>
</li>
<li>动态对象年龄判断<ul>
<li>如果Survivor区中相同年龄的所有对象大小的总和大于Survivor空间的一般，年龄大于或等于该年龄的对象可以直接进入老年代，无须等到MaxTenuringThreshold中要求的年龄。</li>
</ul>
</li>
<li>空间分配担保<ul>
<li>-XX:HandlePromotionFailure</li>
</ul>
</li>
</ul>
<h2 id="7-8-🌌-为对象分配内存"><a href="#7-8-🌌-为对象分配内存" class="headerlink" title="7.8 🌌 为对象分配内存"></a>7.8 🌌 为对象分配内存</h2><blockquote>
<p>☪出现背景</p>
</blockquote>
<ul>
<li>堆区是线程共享区域，任何线程都可以访问到堆区中的共享数据</li>
<li>由于对象实例的创建在JVM中非常频繁，因此在并发环境下从堆区划分内存空间是线程不安全的</li>
<li>为避免多个线程操作同一地址，需要使用加锁等机制，进而影响分配速度</li>
</ul>
<blockquote>
<p>💫TLAB(Thread Local Allocation Buffer)</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/11581/image-20210211230044163.png" class="" title="image-20210211230044163">

<ul>
<li>从内存模型而不是垃圾收集的角度，对Eden区域继续进行划分，JVM为每个线程分配了一个私有缓存区域，它包含在Eden空间内。</li>
<li>多线程同时分配内存时，使用TLAB可以避免一系列的非线程安全问题，同时还能够提升内存分配的吞吐量，因此我们可以将这种内存分配方式称之为快速分配策略。</li>
</ul>
<blockquote>
<p>⏳分配过程</p>
</blockquote>
<p>对象首先是通过TLAB开辟空间，如果不能放入，那么需要通过Eden来进行分配。</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/11581/image-20210211225613422.png" class="" title="image-20210211225613422">



<blockquote>
<p>💬再说明</p>
</blockquote>
<ul>
<li>尽管不是所有的对象实例都能够在TLAB中分配内存，但JVM确实时将TLAB作为内存分配的首选。</li>
<li>在程序中，开发人员可以通过选择<code>-XX:UseTLAB</code>设置是否开启TLAB空间。</li>
<li>默认情况下，TLAB空间的内存非常小，仅占有整个Eden空间的1%，当然我们可以通过选型”-XX:TLABWasteTargetPercent”设置TLAB空间所占Eden空间的百分比大小。</li>
<li>一旦对象在TLAB空间分配内存失败时，JVM就会尝试着通过加锁机制确保数据操作的原子性，从而直接在Eden空间中分配内存。</li>
</ul>
<h2 id="7-9-💤-堆空间的参数设置"><a href="#7-9-💤-堆空间的参数设置" class="headerlink" title="7.9 💤 堆空间的参数设置"></a>7.9 💤 堆空间的参数设置</h2><blockquote>
<p>📋总结</p>
</blockquote>
<ul>
<li><code>-XX:+PrintFlagsInitial</code>：查看所有的参数的默认初始值</li>
<li><code>-XX:+PrintFlagsFinal</code>：查看所有的参数的最终值（可能会存在修改，不再是初始值）</li>
<li><code>-Xms</code>：初始堆空间内存（默认为物理内存的1/64）</li>
<li><code>-Xmx</code>：最大堆空间内存（默认为物理内存的1/4）</li>
<li><code>-Xmn</code>：设置新生代的大小。（初始值及最大值）</li>
<li><code>-XX:NewRatio</code>：配置新生代与老年代在堆结构的占比</li>
<li><code>-XX:SurvivorRatio</code>：设置新生代中Eden和S0/S1空间的比例</li>
<li><code>-XX:MaxTenuringThreshold</code>：设置新生代垃圾的最大年龄</li>
<li><code>-XX:+PrintGCDetails</code>：输出详细的GC处理日志<ul>
<li>打印gc简要信息：①<code>-XX:+PrintGC</code> ②<code> - verbose:gc</code></li>
</ul>
</li>
<li><code>-XX:HandlePromotionFalilure</code>：是否设置空间分配担保</li>
<li><code>-XX:PretenureSizeThreshold</code>：可直接进入老年代的new对象大小</li>
</ul>
<p>在发生Minor GC之前，虚拟机会检查老年代最大可用的连续空间是否大于新生代所有对象的总空间。</p>
<ul>
<li>如果大于，则此次Minor GC是安全的。</li>
<li>如果小于，则虚拟机会查看-XX:HandlePromotionFailure设置值是否允许担保失败。<ul>
<li>如果HandlePromotionFailure=true，那么会继续检查老年代最大可用连续空间是否大于历次晋升到老年代的对象的平均大小。<ul>
<li>如果大于，则尝试进行一次Minor GC，但这次Minor GC依然是有风险的；</li>
<li>如果小于，则改为进行一次Full GC。</li>
</ul>
</li>
<li>如果HandlePromotionFailure=false，则改为进行一次Full GC。</li>
</ul>
</li>
</ul>
<p>在JDK6 Update24之后，HandlePromotionFailure参数不会再影响到虚拟机的空间分配担保策略，观察openJDK中的源码变化，虽然源码中还定义了HandlePromotionFailure参数，但是在代码中已经不会再使用它。JDK6 Update 24之后的规则变为只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小就会进行Minor GC，否则将进行FullGC。</p>
<h2 id="7-10-❓-堆是分配对象存储的唯一选择吗"><a href="#7-10-❓-堆是分配对象存储的唯一选择吗" class="headerlink" title="7.10 ❓ 堆是分配对象存储的唯一选择吗"></a>7.10 ❓ 堆是分配对象存储的唯一选择吗</h2><blockquote>
<p>📘引用</p>
</blockquote>
<p>在《深入理解Java虚拟机》中关于Java堆内存有这样一段描述：</p>
<p>随着JIT编译期的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微秒的变化，所有的对象都分配到堆上也渐渐变得不那么绝对了。</p>
<p>在Java虚拟机中，对象是在Java堆中分配内存的，这是一个普遍的常识。但是有一种特殊情况，那就是如果经过逃逸分析（Escape Analysis）后发现，一个对象并没有逃逸出方法的话，那么久可能被优化成栈上分配。这样就无需在堆上分配内存，也无需进行垃圾回收了。这也是最常见的堆外存储技术。</p>
<p>此外，前面提到的基于OpenJDK深度定制的TaoBaoVM，其中创新的GCIH（GC invisible heap）技术实现的off-heap，将生命周期较长的Java对象从heap中移至heap外，并且GC不能管理GCIH内部的Java对象，以此达到降低GC的回收频率和提升GC的回收效率的目的。</p>
<blockquote>
<p>📖逃逸分析概述</p>
</blockquote>
<ul>
<li>如何将堆上的对象分配到栈，需要使用逃逸分析手段。</li>
<li>这是一种有效减少Java程序中同步负载和内存堆内存的跨函数全局数据流分析算法。</li>
<li>通过逃逸分析，Java Hotspot编译器能够分析出一个新的对象的引用的使用范围从而决定是否将这个对象分配到堆上。</li>
<li>逃逸分析的基本行为就是分析对象动态作用域：<ul>
<li>当一个对象在方法内被定义后，对象只在方法内部使用，则认为没有发生逃逸。</li>
<li>当一个对象在方法中被定义后，它被外部方法所引用，则认为发生逃逸。例如作为调用参数传递到其他方法中。</li>
</ul>
</li>
</ul>
<blockquote>
<p>⚙️参数设置</p>
</blockquote>
<p>在JDK 1.7 版本之后，HotSpot中默认就已经开启了逃逸分析</p>
<p>如果使用的是较早的版本，开发人员则可以通过：</p>
<ul>
<li>选项<code>-xx:+DoEscapeAnalysis</code>显式开启逃逸分析</li>
<li>选项<code>-xx:+PrintEscapeAnalysis</code>查看逃逸分析的筛选结果</li>
</ul>
<blockquote>
<p>✅结论</p>
</blockquote>
<p>开发中能使用局部变量的，就不用使用在方法外定义。</p>
<p>使用逃逸分析，编译器可以对代码做如下优化：</p>
<ul>
<li>栈上分配：将堆分配转化为栈分配。如果一个对象在子程序中被分配，要使指向该对象的指针永远不会发生逃逸，对象可能是栈上分配的候选，而不是堆上分配。</li>
<li>同步省略：如果一个对象被发现只有一个线程被访问到，那么对于这个对象的操作可以不考虑同步。</li>
<li>分离对象或标量替换：有的对象可能不需要作为一个连续的内存结构存在也也可以被访问到，那么对象的部分（或全部）可以不存储在内存，而是存储在CPU寄存器中。</li>
</ul>
<blockquote>
<p>⌨️代码示例</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021/2/12</span></span><br><span class="line"><span class="comment"> * 逃逸分析：就看new的对象是否有可能在方法外被调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EscapeAnalysis</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> EscapeAnalysis obj;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法返回EscapeAnalysis对象，发生逃逸</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EscapeAnalysis <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj == <span class="keyword">null</span> ? <span class="keyword">new</span> EscapeAnalysis() : obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为成员属性赋值，发生逃逸</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObj</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = <span class="keyword">new</span> EscapeAnalysis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对象的作用域仅在当前方法中有效，没有发生逃逸</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useEscapeAnalysis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EscapeAnalysis escapeAnalysis = <span class="keyword">new</span> EscapeAnalysis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 引用成员变量的值，发生逃逸</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useEscapeAnalysis1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EscapeAnalysis escapeAnalysis = getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>1️⃣栈上分配</p>
</blockquote>
<p>JIT编译器在编译期间根据逃逸分析的结果，发现如果一个对象并没有逃逸出方法的话，就可能被优化成栈上分配。分配完成后，继续在调用栈内执行，最后线程结束，栈空间被回收，局部变量对象也被回收。这样就无须进行垃圾回收了。</p>
<p>场景：成员变量赋值、方法返回值、实例引用传递。</p>
<p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021/2/22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackAllocation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 分配一百万个对象</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000000</span>; i++) &#123;</span><br><span class="line">            alloc();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// 查看执行时间</span></span><br><span class="line">        System.out.println(<span class="string">&quot;执行时间 =&gt; [&quot;</span> + (end - start)+ <span class="string">&quot;ms]&quot;</span>);</span><br><span class="line">        <span class="comment">// 休眠以查看内存</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">alloc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 未发生逃逸</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>不开启逃逸分析：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-Xmx1G -Xms1G -XX:-DoEscapeAnalysis -XX:+PrintGCDetails</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">执行时间 &#x3D;&gt; [4ms]</span><br></pre></td></tr></table></figure>

<p>通过抽样器查看内存情况：</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/11581/image-20210222170206155.png" class="" title="image-20210222170206155">

<p>发现内存中有8w+的User实例。</p>
<p>开启逃逸分析：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-Xmx1G -Xms1G -XX:-DoEscapeAnalysis -XX:+PrintGCDetails</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">执行时间 &#x3D;&gt; [5ms]</span><br></pre></td></tr></table></figure>

<p>通过抽样器查看内存情况：</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/11581/image-20210222170124218.png" class="" title="image-20210222170124218">

<p>发现内存中有9w+的内存实例。</p>
<p>这对比是神马玩意，哇吐了……</p>
<blockquote>
<p>2️⃣同步省略</p>
</blockquote>
<p>线程同步的代价是相当高的，同步的后果是降低并发性和性能。</p>
<p>在动态编译同步块的时候，JIT编译器可以借助逃逸分析同步块所使用的锁对象是否能够被一个线程访问而没有被发布到其他线程。如果没有，那么JIT编译器在编译这个同步块的时候就会取消对这个代码块的同步。这样就能大大提高并发性和性能。这个取消同步的过程就叫同步省略，也叫锁消除。</p>
<p>如以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">synchronized</span>(obj) &#123;</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码块对<code>obj</code>这个对象加锁，但是<code>obj</code>对象的生命周期只在方法中，并不会被其他线程锁访问到，所以在JIT编译阶段就会被优化掉，优化成：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">    System.out.println(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>3️⃣分离对象和标量替换</p>
</blockquote>
<p>标量（scalar）是指一个无法再分解成更小的数据的数据。Java中的原始数据类型就是标量。</p>
<p>相对的，那么还可以分解的数据叫做聚合量（Aggregate），Java中的对象就是聚合量，因为他可以分解成其他聚合量和标量。</p>
<p>在JIT阶段，如何经过逃逸分析，发现一个对象不会被外界访问的话，那么经过JIT优化，就会把这个对象拆解成若干个其中包含的若干个成员变量来代替。这个过程就是标量替换。</p>
<p>如以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">    alloc();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">alloc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Point point = <span class="keyword">new</span> Point(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;point.x&quot;</span> + point.x + <span class="string">&quot;;point.y&quot;</span> + point.y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>经过标量替换后，就会变成：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">alloc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">2</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;point.x = &quot;</span> + x + <span class="string">&quot;; point.y=&quot;</span> + y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，<code>Point</code>这个聚合量经过逃逸分析后，发现它并没有逃逸，就被替换成两个标量了。那么标量替换有什么好处呢？就是可以大大减少内存的占用。因为一旦不需要创建对象了，那么久不再需要分配内存了。标量替换为栈上分配提供了很好的基础。</p>
<blockquote>
<p>📋代码优化</p>
</blockquote>
<ul>
<li><p>XX:+DoEscapeAnalysis：启用逃逸分析</p>
</li>
<li><p>XX:+EliminateAllocations：开启了标量替换（默认打开），允许将对象打散分配在栈上。比如对象拥有id和name两个字段，那么这两个字段将会被视为两个独立的局部变量进行分配。</p>
</li>
</ul>
<blockquote>
<p>🔺逃逸分析的不足</p>
</blockquote>
<p>关于逃逸分析的论文在1999年就已经发表了，但直到JDK1.6才有实现，而且这项技术到如今也并不是十分成熟。</p>
<p>其根本原因就是无法保证逃逸分析的性能消耗一定能高于他的消耗。虽然经过逃逸分析可以做标量替换、栈上分配、和锁消除。但是逃逸分析自身也是需要进行一系列复杂的分析的，这其实也是一个相对耗时的过程。 一个极端的例子，就是经过逃逸分析之后，发现没有一个对象是不逃逸的。那这个逃逸分析的过程就白白浪费掉了。</p>
<p>虽然这项技术并不十分成熟，但是它也是即时编译器优化技术中一个十分重要的手段。注意到有一些观点，认为通过逃逸分析，JVM会在栈上分配那些不会逃逸的对象，这在理论上是可行的，但是取决于JvM设计者的选择。据我所知，oracle Hotspot JVM中并未这么做，这一点在逃逸分析相关的文档里已经说明，所以可以明确所有的对象实例都是创建在堆上。</p>
<p>目前很多书籍还是基于JDK7以前的版本，JDK已经发生了很大变化，intern字符串的缓存和静态变量曾经都被分配在永久代上，而永久代已经被元数据区取代。但是，intern字符串缓存和静态变量并不是被转移到元数据区，而是直接在堆上分配，所以这一点同样符合前面一点的结论：对象实例都是分配在堆上。</p>
<p><strong>小结</strong></p>
<p>年轻代是对象的诞生、成长、消亡的区域，一个对象在这里产生、应用，最后被垃圾回收器收集、结束生命。</p>
<p>老年代放置长生命周期的对象，通常都是从survivor区域筛选拷贝过来的Java对象。当然，也有特殊情况，我们知道普通的对象会被分配在TLAB上；如果对象较大，JVM会试图直接分配在Eden其他位置上；如果对象太大，完全无法在新生代找到足够长的连续空闲空间，JVM就会直接分配到老年代。当GC只发生在年轻代中，回收年轻代对象的行为被称为MinorGc。</p>
<p>当GC发生在老年代时则被称为MajorGc或者FullGC。一般的，MinorGc的发生频率要比MajorGC高很多，即老年代中垃圾回收发生的频率将大大低于年轻代。</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-6(本地方法接口)</title>
    <url>/posts/31917/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="6-1-🏳️‍🌈本地方法"><a href="#6-1-🏳️‍🌈本地方法" class="headerlink" title="6.1 🏳️‍🌈本地方法"></a>6.1 🏳️‍🌈本地方法</h2><blockquote>
<p>📖概述</p>
</blockquote>
<p>简单地讲，一个Native Method就是一个Java调用非Java代码的接口。一个Native Method是这样一个Java方法：该方法的实现由非Java语言实现，比如C。这个特征并非Java所持有，很多其它的编程语言都有这一机制。比如在C++中，你可以用extern “C”告知C++编译器去调用一个C的函数。</p>
<p>在定义一个native method时，并不提供实现体（有些像定义一个Java interface），因为其实现体是由非Java语言在外面实现的。</p>
<blockquote>
<p>🔨作用</p>
</blockquote>
<p>本地接口的作用是<strong>融合不同的编程语言为Java所用</strong>，它的初衷是融合C/C++程序。</p>
<p>有些层次的任务用Java实现起来不容易，或者在意程序的效率时，问题就来了。</p>
<ol>
<li><p>与Java环境外交互</p>
<p>有时Java应用需要与Java外面的环境交互，这是本地方法存在的主要原因。</p>
<p>本地方法可以提供与底层系统，如操作系统或某些硬件交换信息时的情况。</p>
<p>它为我们提供一个非常简洁的接口，而且我们无需去了解Java应用之外的繁琐的细节。</p>
</li>
<li><p>与操作系统交互</p>
<p>JVM支持着Java语言本身和运行时库，它是Java程序赖以生存的平台，它由一个解释器（解释字节码）和一些连接到本地代码的库组成。然而不管怎样，它毕竟不是一个完整的系统，它经常依赖于一些底层系统的支持。这些底层系统常常是强大的操作系统。通过使用本地方法，我们得以用Java实现了jre与底层系统的交互，甚至JVM的一些部分就是用C写的。还有，如果我们要使用一些Java语言本身没有提供封装的操作系统的特性时，我们也需要使用本地方法。</p>
</li>
<li><p>Sun’s Java</p>
<p>Sun的解释器是用C实现的，这使得它能像一些普通的C一样与外部交互。jre大部分是用Java实现的，它也通过一些本地方法与外界交互。例如：<code>java.lang.Thread</code>的<code>setPriority()</code>方法是用Java实现的，但是它实现调用的是该类里的本地方法<code>setPriority()</code>。这个本地方法是用C实现的，并被植入JVM内部，在<code>Windows 95</code>的平台上，这个本地方法最终将调用<code>Win 32 SetPriority() API</code>。这是一个本地方法的具体实现由JVM直接提供，更多的情况是本地方法由外部的动态链接库（<code>external dynamic link library</code>）提供，然后被JVM调用。</p>
</li>
</ol>
<blockquote>
<p>⌨️举例</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IHaveNatives</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">Native1</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">native</span> <span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">long</span> <span class="title">Native2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">native</span> <span class="keyword">synchronized</span> <span class="keyword">private</span> <span class="keyword">float</span> <span class="title">Native3</span><span class="params">(Object obj)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">native</span> <span class="keyword">void</span> <span class="title">Native4</span><span class="params">(<span class="keyword">int</span>[] array)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>标识符<code>native</code>可以与所有其他的Java标识符连用，但是<code>abstract</code>除外。</p>
<h2 id="6-2-🏨本地方法栈"><a href="#6-2-🏨本地方法栈" class="headerlink" title="6.2 🏨本地方法栈"></a>6.2 🏨本地方法栈</h2><blockquote>
<p>📖概述</p>
</blockquote>
<ul>
<li><p>Java虚拟机栈用于管理Java方法的调用，而本地方法栈用于管理本地方法的调用。</p>
</li>
<li><p>本地方法栈，也是线程私有的。</p>
</li>
<li><p>允许被实现成固定或者是可动态扩展的内存大小。</p>
<ul>
<li>如果线程请求分配的栈容量超过本地方法栈允许的最大容量，Java虚拟机将会抛出一个<code>StackOverflowError</code>异常。</li>
<li>如果本地方法栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的本地方法栈，那么Java虚拟机将会抛出一个<code>OutofMemoryError</code>异常。</li>
</ul>
</li>
<li><p>本地方法是使用C语言实现的。</p>
</li>
<li><p>它的具体做法是<code>Native Method Stack</code>中登记native方法，在<code>Execution Engine</code>执行时加载本地方法库。</p>
</li>
<li><p>当某个线程调用一个本地方法时，它就进入了一个全新的并且不再受虚拟机限制的世界。它和虚拟机拥有同样的权限。</p>
<ul>
<li>本地方法可以通过本地方法接口来发个文虚拟机内部的运行时数据区。</li>
<li>它甚至可以直接使用本地处理器中的寄存器。</li>
<li>直接从本地内存的堆中分配任意数量的内存。</li>
</ul>
</li>
<li><p>并不是所有的JVM都支持本地方法。因为Java虚拟机规范并没有明确要求本地方法栈的使用语言、具体实现方式、数据结构等。如果JVM产品不打算支持native方法，也可以无需实现本地方法栈。</p>
</li>
<li><p>在Hotspot JVM中，直接将本地方法栈和虚拟机栈合二为一。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-5(虚拟机栈)</title>
    <url>/posts/31700/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="5-1-📚-概述"><a href="#5-1-📚-概述" class="headerlink" title="5.1 📚 概述"></a>5.1 📚 概述</h2><blockquote>
<p>📌内存中的栈与堆</p>
</blockquote>
<p>栈是运行时的单位，堆是存储时的单位。</p>
<p>栈解决程序的运行问题，即程序如何执行，或者说如何处理数据。</p>
<p>堆解决的时数据存储的问题，即数据怎么放、放在哪儿。</p>
<blockquote>
<p>📖Java虚拟机栈</p>
</blockquote>
<p>Java虚拟机栈，早期也叫Java栈。</p>
<p>每个线程在创建时都会创建一个虚拟机栈，其内部保存一个个的栈帧，对应着一次次的Java方法调用。</p>
<blockquote>
<p>⌛生命周期</p>
</blockquote>
<p>与线程一致。</p>
<blockquote>
<p>🔨作用</p>
</blockquote>
<p>主管Java程序的运行，它保存方法的局部变量、部分结果，并参与方法的调用和返回。</p>
<blockquote>
<p>🌠优点</p>
</blockquote>
<ul>
<li>栈是一种快速有效的分配存储方式，访问速度仅次于程序计数器</li>
<li>JVM直接对Java栈的操作只有两个：<ul>
<li>每个方法执行，伴随着进栈</li>
<li>执行结束后的出栈工作</li>
</ul>
</li>
<li>对于栈来说不存在垃圾回收问题</li>
</ul>
<blockquote>
<p>❗栈中可能出现的异常</p>
</blockquote>
<p>Java虚拟机规范允许Java栈的大小是动态的或者固定不变的。</p>
<ul>
<li><p>如果采用固定大小的Java虚拟机栈，那每一个线程的Java虚拟机栈容量可以在线程创建的时候独立选定。如果线程请求分配的栈容量超过Java虚拟机栈允许的最大容量，Java虚拟机将会抛出一个StackOverflowError异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 栈溢出典型实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackOverflow</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> StackOverflow().keep();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        keep();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果Java虚拟机可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的虚拟机栈，那Java虚拟机将会抛出一个OutOfMemoryError异常。</p>
</li>
</ul>
<h2 id="5-2-🔳-栈的存储单位"><a href="#5-2-🔳-栈的存储单位" class="headerlink" title="5.2 🔳 栈的存储单位"></a>5.2 🔳 栈的存储单位</h2><blockquote>
<p>📦栈中存储什么</p>
</blockquote>
<ul>
<li>每个线程都有自己的栈，栈中的数据都是以栈帧(Stack Frame)的格式存在。</li>
<li>在这个线程上正在执行的每个方法都各自对应一个栈帧(Stack Frame)。</li>
<li>栈帧是一个内存区块，是一个数据集，维系着方法执行过程中的各种数据信息。</li>
</ul>
<blockquote>
<p>🔍栈的运行原理</p>
</blockquote>
<ul>
<li>JVM直接对Java栈的操作只有两个，就是对栈帧的压栈和出栈，遵循“先进后出”或者“后进先出”原则。</li>
<li>在一条活动线程中，一个时间点上，只会有一个活动的栈帧。即只有当前正在执行的方法的栈帧（栈顶栈帧）是有效的，这个栈帧被称为当前栈帧（Current Frame），与当前栈帧相对应的方法就是当前方法（Current Method），定义这个方法的类就是当前类（Current Class）。</li>
<li>执行引擎运行的所有字节码指令只针对当前栈帧进行操作。</li>
<li>如果在该方法中调用了其他方法，对应的新的栈帧会被创建出来，放在栈的顶端，成为新的当前帧。</li>
<li>不同线程中所包含的栈帧是不允许存在相互引用的，即不可能在一个帧之中引用另外一个线程的栈帧。</li>
<li>如果当前方法调用了其他方法，方法返回之际，当前栈帧会传回此方法的执行结果给前一个栈帧，接着，虚拟机会丢弃当前栈帧，使得前一个栈帧重新成为当前栈帧。</li>
<li>Java方法有两种返回函数的方式，一种是正常的函数返回，使用return指令；另外一种是抛出异常。不管使用哪种方式，都会导致栈帧被弹出。</li>
</ul>
<blockquote>
<p>🔩栈帧内部结构</p>
</blockquote>
<ul>
<li>局部变量表（Local Variables）</li>
<li>操作数栈（Operand Stack）</li>
<li>动态链接（Dynamic Linking）</li>
<li>方法返回地址（Return Address）</li>
<li>一些附加信息</li>
</ul>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/31700/image-20210131221048905.png" class="" title="image-20210131221048905">





<h2 id="5-3-📅-局部变量表"><a href="#5-3-📅-局部变量表" class="headerlink" title="5.3 📅 局部变量表"></a>5.3 📅 局部变量表</h2><blockquote>
<p>💬说明</p>
</blockquote>
<ul>
<li>局部变量表也被称之为局部变量数组或本地变量表。</li>
<li>定义为一个数字数组，主要用于存储方法参数和定义在方法体内的局部变量，这些数据类型包括各类基本数据类型、对象引用（reference），以及returnAddress类型。</li>
<li>由于局部变量表示建立在线程的栈上，是线程的私有数据，因此不存在数据安全问题。</li>
<li>局部变量表所需的容量大小是在编译期确定下来，并保存在方法的Code属性的maximum local variables类型。</li>
<li>由于局部变量表是建立在线程的栈上，是线程的私有数据，因此不存在数据安全问题。</li>
<li>局部变量表所需的容量大小是在编译器确定下来的，并保存在方法的Code属性的maximum local variables数据项中。在方法运行期间是不会改变局部变量表的大小的。</li>
<li>方法嵌套调用的次数由栈的大小决定。一般来说，栈越大，方法嵌套调用次数越多。对一个函数而言，它的参数和局部变量越多，使得局部变量表膨胀，它的栈帧就越大，以满足方法调用所需传递的信息增大的需求。进而函数调用就会占用更多的栈空间，导致其嵌套调用次数就会减少。</li>
<li>局部变量表中的变量只在当前方法调用中有效。在方法执行时，虚拟机通过使用局部变量表完成参数值到参数变量列表的传递过程。当方法调用结束后，随着方法栈帧的销毁，局部变量表也会随之销毁。</li>
</ul>
<blockquote>
<p>📬Slot</p>
</blockquote>
<ul>
<li><p>参数值的存放总是在局部变量数组的index0开始，到数组长度-1的索引结束。</p>
</li>
<li><p>局部变量表，最基本的存储单元是Slot（变量槽）。</p>
</li>
<li><p>局部变量表中存放编译器可知的各种基本数据类型（8种），引用类型（reference），returnAddress类型的变量。</p>
</li>
<li><p>在局部变量表里，32位以内的类型只占用一个Slot（包括returnAddress类型），64位的类型（long和double）占用两个slot。</p>
<ul>
<li>byte、short、char在存储前被转换为int，boolean也被转换为int，0表示false，非0表示true。</li>
<li>long和double则占据两个Slot。</li>
</ul>
</li>
<li><p>JVM会为局部变量表中的每一个Slot都分配一个访问索引，通过这个索引即可成功访问到局部变量表中指定的呃局部变量值。</p>
</li>
<li><p>当一个实例方法被调用的时候，它的方法参数和方法体内部定义的局部便令都会按照顺序被复制到局部变量表中指定的局部变量值。</p>
</li>
<li><p>如果需要访问局部变量表中一个64bit的局部变量值时，只需要使用前一个索引即可。</p>
</li>
<li><p>如果当前帧是由构造方法或者实例方法创建的，那么该对象引用this将会存放在index为0的slot处，其余的参数按照参数表顺序继续排序。</p>
</li>
<li><p>JVM会为局部变量表中的每一个Slot都分配一个访问索引，通过这个索引即可成功访问到局部变量表中指定的局部变量值。</p>
</li>
<li><p>当一个实例方法被调用的时候，它的方法参数和方法体内部定义的局部变量将会按照顺序被复制到局部变量表中的每一个Slot上。</p>
</li>
<li><p>如果需要访问局部变量表中一个64bit的局部变量值时，只需要使用前一个索引即可。</p>
</li>
<li><p>如果当前帧是由构造方法或者实例方法创建的，那么该对象引用this将会存放在index为0的Slot处，其余的参数按照参数表的顺序继续排列。</p>
</li>
</ul>
<blockquote>
<p>🗳Slot的重复利用</p>
</blockquote>
<p>栈帧中的局部变量表中的槽位是可以重用的，如果一个局部变量过了其作用域，那么在其作用域之后申明的新的局部变量就很有可能会复用过期局部变量的槽位，从而达到节省资源的目的。</p>
<blockquote>
<p>静态变量 🆚 局部变量</p>
</blockquote>
<p>变量按照在类中声明的位置分：</p>
<ul>
<li>成员变量：在使用前，都经历过默认初始化值<ul>
<li>静态变量（类变量/static变量）：链接的准备阶段，给类变量默认赋值 —&gt; initial阶段：给类变量显示赋值即静态代码块赋值。</li>
<li>实例变量（非static变量）：随着对象的创建，会在堆空间中分配实例变量空间，并进行默认赋值。</li>
</ul>
</li>
<li>局部变量：在使用前，必须要进行显示赋值，否则编译不通过。</li>
</ul>
<blockquote>
<p>🔔补充</p>
</blockquote>
<ul>
<li>在栈帧中，与性能调优关系最为密切的部分就是前面提到的局部变量表。在方法执行时，虚拟机使用局部变量表完成方法的传递。</li>
<li>局部变量表中的变量也是重要的垃圾回收根节点，只要被局部变量表中直接或简介引用的对象都不会被回收。</li>
</ul>
<h2 id="5-4-📥-操作数栈"><a href="#5-4-📥-操作数栈" class="headerlink" title="5.4 📥 操作数栈"></a>5.4 📥 操作数栈</h2><blockquote>
<p>💬概述</p>
</blockquote>
<ul>
<li>每一个独立地栈帧中除了 包含局部变量表以外，还包含一个后进先出（Last-In-First-Out）的操作数栈，也可以称之为表达式栈（Express Stack）。</li>
<li>操作数栈，在方法执行过程中，根据字节码指令，往栈中写入数据或提取数据，即入栈(push)/出栈(pop)。<ul>
<li>某些字节码指令将值压入操作数栈，其余的字节码指令将操作数取出栈。使用它们后再把结果压入栈。</li>
<li>比如：执行复制、交换、求和等操作。</li>
</ul>
</li>
<li>如果被调用的方法带有返回值的话，其返回值将会被压入当前栈帧的操作数栈中，并更新PC寄存器中下一条需要执行的字节码指令。</li>
<li>操作数栈中元素的数据类型必须与字节码指令的序列严格匹配，这由编译器在编译期间进行验证，同时在类加载过程中的类检验阶段的数据流分析阶段要再次验证。</li>
<li>Java虚拟机的解释引擎基于栈的执行引擎，其中的栈指的就是操作数栈。</li>
</ul>
<blockquote>
<p>📖理论</p>
</blockquote>
<ul>
<li>操作数栈，主要用于保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间。</li>
<li>操作数栈就是JVM执行引擎的一个工作区，当一个方法刚开始执行的时候，一个新的栈帧也会随之被创建出来，这个方法的操作数栈是空的。</li>
<li>每一个操作数栈都会拥有一个明确的栈深度用于存储数值，其所需的最大深度在编译期就定义好了，保存在方法的Code属性中，为max_stack的值。</li>
<li>栈中的任何一个元素都是可以任意的Java数据类型。<ul>
<li>32bit的类型占用一个栈单位深度。</li>
<li>64bit的类型占用两个栈单位深度。</li>
</ul>
</li>
<li>操作数栈并非采用访问索引的方式来进行数据访问的。而是只能通过标准的入栈(push)和出栈(pop)操作来完成一次数据访问。</li>
</ul>
<h2 id="5-5-📡-代码追踪"><a href="#5-5-📡-代码追踪" class="headerlink" title="5.5 📡 代码追踪"></a>5.5 📡 代码追踪</h2><blockquote>
<p>⌨️代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperandStackTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> k = m + n;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetSum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取上一个栈帧返回的结果，并保存在操作数栈中</span></span><br><span class="line">        <span class="keyword">int</span> i = getSum();</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>🔍解析</p>
</blockquote>
<p>jclasslib字节码如下：</p>
<ul>
<li>getSum函数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">指令地址 操作指令</span><br><span class="line">     <span class="number">0</span> bipush <span class="number">10</span>  <span class="comment">// 将10压入操作数栈</span></span><br><span class="line">     <span class="number">2</span> istore_1   <span class="comment">// 操作数栈出栈，存入局部变量表索引为1的位置</span></span><br><span class="line">     <span class="number">3</span> bipush <span class="number">20</span>  <span class="comment">// 将20压入操作数栈</span></span><br><span class="line">     <span class="number">5</span> istore_2   <span class="comment">// 操作数栈出栈，存入局部变量表索引为2的位置</span></span><br><span class="line">     <span class="number">6</span> iload_1    <span class="comment">// 从局部变量表中取出索引为1的数据，压入操作数栈</span></span><br><span class="line">     <span class="number">7</span> iload_2    <span class="comment">// 从局部变量表中取出索引为2的数据，压入操作数栈</span></span><br><span class="line">     <span class="number">8</span> iadd       <span class="comment">// 将栈顶的两个数出栈并相加，压回操作数栈</span></span><br><span class="line">     <span class="number">9</span> istore_3   <span class="comment">// 操作数栈出栈，存入局部变量表</span></span><br><span class="line">    <span class="number">10</span> ireturn    <span class="comment">// 从当前帧的操作数栈弹出值，并将其压入调用者的帧的操作数栈，当前方法的操作数堆栈上的任何其他值都将被丢弃</span></span><br></pre></td></tr></table></figure>

<ul>
<li>testGetSum函数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">指令地址 操作指令   </span><br><span class="line">	<span class="number">0</span> aload_0      <span class="comment">// 加载this变量，将this的引用压入操作数栈</span></span><br><span class="line">    1 invokevirtual #2 &lt;top/parak/OperandStackTest.getSum&gt; // 调用this.getSum方法</span><br><span class="line">    <span class="number">4</span> istore_1     <span class="comment">// 将方法返回值存储到局部变量表索引为1的位置</span></span><br><span class="line">    <span class="number">5</span> bipush <span class="number">10</span>    <span class="comment">// 将10压入操作数栈</span></span><br><span class="line">    <span class="number">7</span> istore_2     <span class="comment">// 操作数栈出栈，存入局部变量表索引为2的位置</span></span><br><span class="line">    <span class="number">8</span> <span class="keyword">return</span>       <span class="comment">// 直接返回</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>i++ 🆚 ++i</p>
</blockquote>
<p>源代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i1 = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> i3 = i1++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i2 = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> i4 = ++i2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>字节码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">指令地址 操作指令 </span><br><span class="line">     <span class="number">0</span> bipush <span class="number">10</span>    <span class="comment">// 将10压入操作数栈</span></span><br><span class="line">     <span class="number">2</span> istore_1     <span class="comment">// 操作数栈出栈，存入局部变量表索引为1的位置 </span></span><br><span class="line">     <span class="number">3</span> iload_1      <span class="comment">// 从局部变量表索引为1位置加载变量到栈帧中</span></span><br><span class="line">     <span class="number">4</span> iinc <span class="number">1</span> by <span class="number">1</span>  <span class="comment">// 对索引为1位置的变量进行+1操作 </span></span><br><span class="line">     <span class="number">7</span> istore_2     <span class="comment">// 操作数栈出栈，存入局部变量表索引为2的位置 </span></span><br><span class="line">     <span class="number">8</span> bipush <span class="number">10</span>    <span class="comment">// 将10压入操作数栈</span></span><br><span class="line">    <span class="number">10</span> istore_3     <span class="comment">// 操作数栈出栈，存入局部变量表索引为3的位置 </span></span><br><span class="line">    <span class="number">11</span> iinc <span class="number">3</span> by <span class="number">1</span>  <span class="comment">// 对索引为3位置的变量进行+1操作 </span></span><br><span class="line">    <span class="number">14</span> iload_3      <span class="comment">// 从局部变量表索引为3位置加载变量到栈帧中</span></span><br><span class="line">    <span class="number">15</span> istore <span class="number">4</span>     <span class="comment">// 将栈帧的值保存到局部变量表索引为4的位置</span></span><br><span class="line">    <span class="number">17</span> <span class="keyword">return</span>	    <span class="comment">// 返回</span></span><br></pre></td></tr></table></figure>



<h2 id="5-6-📤-栈顶缓存技术"><a href="#5-6-📤-栈顶缓存技术" class="headerlink" title="5.6 📤 栈顶缓存技术"></a>5.6 📤 栈顶缓存技术</h2><blockquote>
<p>🔘背景</p>
</blockquote>
<p>由于操作数是存储在内存中的，因此频繁地执行内存读/写必然会影响执行速度。为了解决这个问题，HotSpot JVM的设计者们提出了栈顶缓存（ToS, Top-of-Stack Cashing）技术，将栈顶元素全部缓存在物理CPU的寄存器（指令更少，速度更快）中，以此降低对内存的读/写次数，提升执行引擎的执行效率。</p>
<h2 id="5-7-📎-动态链接"><a href="#5-7-📎-动态链接" class="headerlink" title="5.7 📎 动态链接"></a>5.7 📎 动态链接</h2><blockquote>
<p>💬说明</p>
</blockquote>
<ul>
<li>每一个栈帧内部都包含一个指向运行时常量池中该栈帧所属方法的引用。包含这个引用的目的就是为了支持当前方法的代码能够实现动态链接（Dynamic Linking）。比如：invokedynamic指令</li>
<li>为Java源文件被编译到字节码文件中时，所有的变量和方法引用都作为符号引用（Sysmbolic Refrence）保存在class文件的常量池里。比如：描述一个方法调用了另外的其他方法时，就是通过常量池中指向方法的符号引用来表示的，那么动态链接的作用就是为了将这些符号引用转换为调用方法的直接引用。</li>
</ul>
<blockquote>
<p>📷图示</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/31700/image-20210131234913621.png" class="" title="image-20210131234913621">



<blockquote>
<p>🔨常量池的作用</p>
</blockquote>
<p>提供一些符号和常量，便于指令的识别。</p>
<h2 id="5-8-🔱-方法的调用：解析与分派"><a href="#5-8-🔱-方法的调用：解析与分派" class="headerlink" title="5.8 🔱 方法的调用：解析与分派"></a>5.8 🔱 方法的调用：解析与分派</h2><blockquote>
<p>🔗链接</p>
</blockquote>
<p>在JVM中，将符号引用转换为调用方法的直接引用与方法的绑定机制相关。</p>
<ul>
<li>静态链接：</li>
</ul>
<p>当一个字节码文件被装载进JVM内部时，如果被调用的目标方法在编译期可知，且运行期保持不变时。这种情况下将调用方法的符号引用转换为直接引用的过程称之为静态链接。</p>
<ul>
<li>动态链接：</li>
</ul>
<p>如果被调用的方法在编译期无法被确定下来，也就是说，只能够在程序运行期将调用方法的符号引用转换为直接引用，由于这种引用转换过程具备动态性，因此也就被称之为动态链接。</p>
<blockquote>
<p>🎗绑定</p>
</blockquote>
<p>对应的方法的绑定机制为：早期绑定（Early Binding）和晚期绑定（Late Binding）。绑定是一个字段、方法或者类在符号引用被替换为直接引用的过程，这仅仅发生一次。</p>
<ul>
<li>早期绑定：</li>
</ul>
<p>早期绑定就是指被调用的目标方法如果在编译期可知，且运行期保持不变时，即可将这个方法与所属的类型进行绑定，这样一来，由于明确了被调用的目标方法究竟是哪一个，因此也就可以使用静态链接的方式将符号引用转换为直接引用。</p>
<ul>
<li>晚期绑定：</li>
</ul>
<p>如果被调用的方法在编译期无法被确定下来，只能够在程序运行期根据实际的类型绑定相关的方法，这种绑定方式也就被称之为晚期绑定。</p>
<blockquote>
<p>🏹拓展</p>
</blockquote>
<p>随着高级语言的横跨出世，类似于Java一样的基于面向对象的编程语言如今越来越多，尽管这类编程语言在语法风格上存在一定的差别，但是它们彼此之间始终保持着一个共性，那就是都支持封装、继承和多态等面向对象特性，既然这一类的编程语言具备多态特性，那么自然也就具备早期绑定和晚期绑定两只绑定方式。</p>
<p>Java中任何一个普通的方法其实都具备函数的特征，它们相当于C++语言中的虚函数（C++中则需要使用关键字virtual来显示定义）。如果在Java程序中不希望某个方法拥有 虚函数的特征时，则可以使用关键字<code>final</code>来标记这个方法。</p>
<blockquote>
<p>🌀非虚方法</p>
</blockquote>
<p>如果方法在编译期就确定了具体的调用版本，这个版本在运行时是不可变的，这样的方法称为非虚方法。</p>
<ul>
<li>静态方法、私有方法、final方法、实例构造器和父类方法都是非虚方法。</li>
<li>其他方法称为虚方法。</li>
</ul>
<blockquote>
<p> 📑方法调用指令</p>
</blockquote>
<p>普通调用指令：</p>
<ul>
<li><code>invokestatic</code>：调用静态方法，解析阶段确定唯一方法版本</li>
<li><code>invokespecial</code>: 调用<init>方法、私有及父类方法，解析阶段确定唯一方法版本</li>
<li><code>invokevirtual</code>：调用所有虚方法</li>
<li><code>invokeinterface</code>: 调用接口方法</li>
</ul>
<p>动态调用指令：</p>
<ul>
<li><code>invokedynamic</code>: 动态解析出需要调用的方法，然后执行</li>
</ul>
<p>普通调用指令固化在虚拟机内部，方法的调用执行不可人为干预，而<code>invokedynamic</code>指令则支持由用户确定方法版本，其中<code>invokestatic</code>指令和<code>invokespecial</code>指令调用的方法称为非虚方法，其余的（final修饰的除外）称为虚方法。</p>
<blockquote>
<p>动态类型语言🆚静态类型语言</p>
</blockquote>
<p>区别：对类型的检查是在编译期还是在运行期，满足前者就是静态类型语言，反之就是动态类型语言。</p>
<p>静态类型语言是判断变量自身的类型信息；动态类型语言是判断变量值的类型信息，变量没有类型信息，变量值才有类型信息，这是动态语言的一个重要特征。</p>
<blockquote>
<p>🔍方法重写的本质</p>
</blockquote>
<ol>
<li>找到操作数栈顶的第一个元素所执行的对象的实际类型，记做C。</li>
<li>如果在类型C中找到与常量中的描述符合简单名称都相符的方法，则进行访问权限校验，如果通过则返回这个方法的直接引用，查找过程结束；如果不通过，则返回<code>java.lang.IllegalAccessError</code>异常。</li>
<li>否则，按照继承关系从下往上依次对C的各个父类进行第2步的搜索和验证过程。</li>
<li>如果始终没有找到合适的方法，则抛出<code>java.lang.AbstractMethodError</code>异常。</li>
</ol>
<p>、</p>
<blockquote>
<p>🟨虚方法表</p>
</blockquote>
<ul>
<li>在面向对象的编程中，会很频繁的使用到动态分派，如果在每次动态分派的过程中都要重新在类的方法元数据中搜索合适的目标的话可能影响到执行效率。因此，为了提高性能，HVM采用在类的方法区建立一个虚方法表，使用索引表来代替查找。</li>
<li>每个类中都有一个虚方法表，表中存放着各个方法的实际入口。</li>
<li>虚方法表创建的时间：虚方法表会在类加载的链接阶段被创建并开始初始化，类的变量初始值准备完成之后，JVM会把该类的方法表也初始化完毕。</li>
</ul>
<h2 id="5-9-⭕-方法返回地址"><a href="#5-9-⭕-方法返回地址" class="headerlink" title="5.9 ⭕ 方法返回地址"></a>5.9 ⭕ 方法返回地址</h2><blockquote>
<p>💬说明</p>
</blockquote>
<ul>
<li>存放调用该方法的PC寄存器的值。</li>
<li>一个方法的结束，有两种方式：<ul>
<li>正常执行完成</li>
<li>出现未处理的异常，非正常退出</li>
</ul>
</li>
<li>无论通过哪种方式退出，在方法退出后都返回该方法被调用的位置。方法正常退出时，调用者的PC计数器的值作为返回地址，即调用该方法的指令的下一条指令的地址。而通过异常退出的，返回地址是要通过异常表来确定，栈帧中一般不会保存这部分信息。</li>
</ul>
<blockquote>
<p>💨退出</p>
</blockquote>
<p>当一个方法开始执行后，只有两种方式可以退出这个方法：</p>
<ol>
<li><p>执行引擎遇到任意一个方法返回的字节码指令（return），会有返回值传递给上层的方法调用者，简称正常完成出口。</p>
<ul>
<li>一个方法在正常调用完成之后究竟需要使用哪一个返回指令还需要根据方法的返回值的实际数据类型而定。</li>
<li>在字节码指令中，返回指令包含ireturn（当返回值是boolean、byte、char、short和int类型时使用）、lreturn（long）、freturn（float）以及areturn（String），另外还有一个return指令供声明为void的方法、实例初始化方法、类和接口的初始化方法使用。</li>
</ul>
</li>
<li><p>在方法执行的过程中遇到了异常（Exception），并且这个异常没有在方法内进行处理，也就是只要在本方法的异常表中没有搜索到匹配的异常处理器，就会导致方法退出，简称异常完成出口。</p>
<ul>
<li>方法执行过程中抛出异常时的异常处理，存储在一个异常处理表，方便在发生异常的时候找到处理异常的代码。</li>
</ul>
</li>
</ol>
<blockquote>
<p>👁‍🗨本质</p>
</blockquote>
<p>本质上，方法的退出就是当前帧出栈的过程。此时，需要恢复上层方法的局部变量表、操作数栈、将返回值压入调用者栈帧的操作数栈、设置PC寄存器值等，让调用者方法继续执行下去。</p>
<p>正常完成出口和异常完成出口的区别在于：通过异常完成出口退出的不会给他的上层调用者产生任何的返回值。</p>
<h2 id="5-10-➕-附加信息"><a href="#5-10-➕-附加信息" class="headerlink" title="5.10 ➕ 附加信息"></a>5.10 ➕ 附加信息</h2><p>主要看虚拟机的实现。</p>
<p>栈帧中还允许携带与Java虚拟机实现相关的一些附加信息。</p>
<p>例如：对程序调试提供支持的信息。</p>
<h2 id="5-11-❓-相关面试题"><a href="#5-11-❓-相关面试题" class="headerlink" title="5.11 ❓ 相关面试题"></a>5.11 ❓ 相关面试题</h2><p>1️⃣ 举例栈溢出的情况（StackOverlowError）</p>
<p>通过-Xss设置栈的大小：OOM</p>
<p>2️⃣ 调整栈大小，就能保证不出现溢出吗</p>
<p>不能</p>
<p>3️⃣ 分配的栈内存越大越好吗</p>
<p>不是</p>
<p>4️⃣ 垃圾回收是否会涉及到虚拟机栈</p>
<p>不会</p>
<p>5️⃣ 方法中定义的局部变量是否线程安全</p>
<p>具体问题具体分析</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-4(程序计数器)</title>
    <url>/posts/28643/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>🔊介绍</p>
</blockquote>
<p>JVM中的程序计数寄存器(Program Counter Register)中，寄存器存储指令相关的现场信息，CPU只有把数据装载到寄存器才能够运行。</p>
<p>JVM中的程序计数器是对物理计算机寄存器的一种模拟，并非是指广义上所指的物理寄存器，也叫PC寄存器。</p>
<blockquote>
<p>🔨作用</p>
</blockquote>
<p>PC寄存器用来存储下一条指令的地址，即即将要执行的指令代码。由执行引擎读取下一条指令。</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/28643/image-20201031111450893.png" class="" title="image-20201031111450893">



<blockquote>
<p>📄详述</p>
</blockquote>
<ul>
<li>它是一块很小的内存空间，几乎可以忽略不计。也是运行速度最快的存储区域。</li>
<li>在JVM规范中，每个线程都有它自己的程序计数器，是现车给私有的，生命周期与线程的生命周期保持一致。</li>
<li>任何时间一个线程都只有一个方法在执行，也就是所谓的当前方法。程序计数器会存储当前线程正在执行的Java方法的JVM指令地址；或者，如果是在执行native方法，则是未指定值(undefined)。</li>
<li>它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</li>
<li>字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令。</li>
<li>它是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</li>
</ul>
<blockquote>
<p>⌨️实例</p>
</blockquote>
<p>测试代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PCRegisterTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> k = i + j;</span><br><span class="line">        String s = <span class="string">&quot;KHighness&quot;</span>;</span><br><span class="line">        System.out.println(k);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译后再反编译:<code>javap -v PCRegisterTest.java</code></p>
<p>结果如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">D:\Java\Test\Test\target\classes\top\parak\chapter01&gt;javap <span class="literal">-v</span> PCRegisterTest.class</span><br><span class="line">Classfile /D:/Java/Test/Test/target/classes/top/parak/chapter01/PCRegisterTest.class</span><br><span class="line">  Last modified <span class="number">2020</span><span class="literal">-10</span><span class="literal">-31</span>; size <span class="number">722</span> bytes</span><br><span class="line">  MD5 checksum <span class="number">8</span>a19ae86b495f9dd8ef414436e2baef5</span><br><span class="line">  Compiled from <span class="string">&quot;PCRegisterTest.java&quot;</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">top</span>.<span class="title">parak</span>.<span class="title">chapter01</span>.<span class="title">PCRegisterTest</span></span></span><br><span class="line"><span class="class">  <span class="title">minor</span> <span class="title">version</span>: 0</span></span><br><span class="line"><span class="class">  <span class="title">major</span> <span class="title">version</span>: 52</span></span><br><span class="line"><span class="class">  <span class="title">flags</span>: <span class="title">ACC_PUBLIC</span>, <span class="title">ACC_SUPER</span></span></span><br><span class="line"><span class="class"><span class="title">Constant</span> <span class="title">pool</span>:</span></span><br><span class="line"><span class="class">   #1 = <span class="title">Methodref</span>          #7.#27         // <span class="title">java</span>/<span class="title">lang</span>/<span class="title">Object</span>.&quot;&lt;<span class="title">init</span>&gt;&quot;:()<span class="title">V</span></span></span><br><span class="line"><span class="class">   #2 = <span class="title">String</span>             #28            // <span class="title">KHighness</span></span></span><br><span class="line"><span class="class">   #3 = <span class="title">Fieldref</span>           #29.#30        // <span class="title">java</span>/<span class="title">lang</span>/<span class="title">System</span>.<span class="title">out</span>:<span class="title">Ljava</span>/<span class="title">io</span>/<span class="title">PrintStream</span>;</span></span><br><span class="line"><span class="class">   #4 = <span class="title">Methodref</span>          #31.#32        // <span class="title">java</span>/<span class="title">io</span>/<span class="title">PrintStream</span>.<span class="title">println</span>:(<span class="title">I</span>)<span class="title">V</span></span></span><br><span class="line"><span class="class">   #5 = <span class="title">Methodref</span>          #31.#33        // <span class="title">java</span>/<span class="title">io</span>/<span class="title">PrintStream</span>.<span class="title">println</span>:(<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">String</span>;)<span class="title">V</span></span></span><br><span class="line"><span class="class">   #6 = <span class="title">Class</span>              #34            // <span class="title">top</span>/<span class="title">parak</span>/<span class="title">chapter01</span>/<span class="title">PCRegisterTest</span></span></span><br><span class="line"><span class="class">   #7 = <span class="title">Class</span>              #35            // <span class="title">java</span>/<span class="title">lang</span>/<span class="title">Object</span></span></span><br><span class="line"><span class="class">   #8 = <span class="title">Utf8</span>               &lt;<span class="title">init</span>&gt;</span></span><br><span class="line"><span class="class">   #9 = <span class="title">Utf8</span>               ()<span class="title">V</span></span></span><br><span class="line"><span class="class">  #10 = <span class="title">Utf8</span>               <span class="title">Code</span></span></span><br><span class="line"><span class="class">  #11 = <span class="title">Utf8</span>               <span class="title">LineNumberTable</span></span></span><br><span class="line"><span class="class">  #12 = <span class="title">Utf8</span>               <span class="title">LocalVariableTable</span></span></span><br><span class="line"><span class="class">  #13 = <span class="title">Utf8</span>               <span class="title">this</span></span></span><br><span class="line"><span class="class">  #14 = <span class="title">Utf8</span>               <span class="title">Ltop</span>/<span class="title">parak</span>/<span class="title">chapter01</span>/<span class="title">PCRegisterTest</span>;</span></span><br><span class="line"><span class="class">  #15 = <span class="title">Utf8</span>               <span class="title">main</span></span></span><br><span class="line"><span class="class">  #16 = <span class="title">Utf8</span>               ([<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">String</span>;)<span class="title">V</span></span></span><br><span class="line"><span class="class">  #17 = <span class="title">Utf8</span>               <span class="title">args</span></span></span><br><span class="line"><span class="class">  #18 = <span class="title">Utf8</span>               [<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">String</span>;</span></span><br><span class="line"><span class="class">  #19 = <span class="title">Utf8</span>               <span class="title">i</span></span></span><br><span class="line"><span class="class">  #20 = <span class="title">Utf8</span>               <span class="title">I</span></span></span><br><span class="line"><span class="class">  #21 = <span class="title">Utf8</span>               <span class="title">j</span></span></span><br><span class="line"><span class="class">  #22 = <span class="title">Utf8</span>               <span class="title">k</span></span></span><br><span class="line"><span class="class">  #23 = <span class="title">Utf8</span>               <span class="title">s</span></span></span><br><span class="line"><span class="class">  #24 = <span class="title">Utf8</span>               <span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">String</span>;</span></span><br><span class="line"><span class="class">  #25 = <span class="title">Utf8</span>               <span class="title">SourceFile</span></span></span><br><span class="line"><span class="class">  #26 = <span class="title">Utf8</span>               <span class="title">PCRegisterTest</span>.<span class="title">java</span></span></span><br><span class="line"><span class="class">  #27 = <span class="title">NameAndType</span>        #8:#9          // &quot;&lt;<span class="title">init</span>&gt;&quot;:()<span class="title">V</span></span></span><br><span class="line"><span class="class">  #28 = <span class="title">Utf8</span>               <span class="title">KHighness</span></span></span><br><span class="line"><span class="class">  #29 = <span class="title">Class</span>              #36            // <span class="title">java</span>/<span class="title">lang</span>/<span class="title">System</span></span></span><br><span class="line"><span class="class">  #30 = <span class="title">NameAndType</span>        #37:#38        // <span class="title">out</span>:<span class="title">Ljava</span>/<span class="title">io</span>/<span class="title">PrintStream</span>;</span></span><br><span class="line"><span class="class">  #31 = <span class="title">Class</span>              #39            // <span class="title">java</span>/<span class="title">io</span>/<span class="title">PrintStream</span></span></span><br><span class="line"><span class="class">  #32 = <span class="title">NameAndType</span>        #40:#41        // <span class="title">println</span>:(<span class="title">I</span>)<span class="title">V</span></span></span><br><span class="line"><span class="class">  #33 = <span class="title">NameAndType</span>        #40:#42        // <span class="title">println</span>:(<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">String</span>;)<span class="title">V</span></span></span><br><span class="line"><span class="class">  #34 = <span class="title">Utf8</span>               <span class="title">top</span>/<span class="title">parak</span>/<span class="title">chapter01</span>/<span class="title">PCRegisterTest</span></span></span><br><span class="line"><span class="class">  #35 = <span class="title">Utf8</span>               <span class="title">java</span>/<span class="title">lang</span>/<span class="title">Object</span></span></span><br><span class="line"><span class="class">  #36 = <span class="title">Utf8</span>               <span class="title">java</span>/<span class="title">lang</span>/<span class="title">System</span></span></span><br><span class="line"><span class="class">  #37 = <span class="title">Utf8</span>               <span class="title">out</span></span></span><br><span class="line"><span class="class">  #38 = <span class="title">Utf8</span>               <span class="title">Ljava</span>/<span class="title">io</span>/<span class="title">PrintStream</span>;</span></span><br><span class="line"><span class="class">  #39 = <span class="title">Utf8</span>               <span class="title">java</span>/<span class="title">io</span>/<span class="title">PrintStream</span></span></span><br><span class="line"><span class="class">  #40 = <span class="title">Utf8</span>               <span class="title">println</span></span></span><br><span class="line"><span class="class">  #41 = <span class="title">Utf8</span>               (<span class="title">I</span>)<span class="title">V</span></span></span><br><span class="line"><span class="class">  #42 = <span class="title">Utf8</span>               (<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">String</span>;)<span class="title">V</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  public top.parak.chapter01.PCRegisterTest();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: invokespecial <span class="comment">#1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">14</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        <span class="built_in">Start</span>  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">5</span>     <span class="number">0</span>  this   Ltop/parak/chapter01/PCRegisterTest;</span><br><span class="line"></span><br><span class="line">  public <span class="keyword">static</span> void main(java.lang.String[]);</span><br><span class="line">    descriptor: ([<span class="type">Ljava</span>/<span class="type">lang</span>/<span class="built_in">String</span>;)<span class="type">V</span></span><br><span class="line">    <span class="type">flags</span>: <span class="type">ACC_PUBLIC</span>, <span class="type">ACC_STATIC</span></span><br><span class="line">    <span class="type">Code</span>:</span><br><span class="line">      <span class="type">stack</span>=<span class="number">2</span>, <span class="type">locals</span>=<span class="number">5</span>, <span class="type">args_size</span>=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: <span class="type">bipush</span>        <span class="number">10</span></span><br><span class="line">         <span class="number">2</span>: <span class="type">istore_1</span></span><br><span class="line">         <span class="number">3</span>: <span class="type">bipush</span>        <span class="number">20</span></span><br><span class="line">         <span class="number">5</span>: <span class="type">istore_2</span></span><br><span class="line">         <span class="number">6</span>: <span class="type">iload_1</span></span><br><span class="line">         <span class="number">7</span>: <span class="type">iload_2</span></span><br><span class="line">         <span class="number">8</span>: <span class="type">iadd</span></span><br><span class="line">         <span class="number">9</span>: <span class="type">istore_3</span></span><br><span class="line">        <span class="number">10</span>: <span class="type">ldc</span>           <span class="comment">#2                  // String KHighness</span></span><br><span class="line">        <span class="number">12</span>: <span class="type">astore</span>        <span class="number">4</span></span><br><span class="line">        <span class="number">14</span>: <span class="type">getstatic</span>     <span class="comment">#3                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">        <span class="number">17</span>: <span class="type">iload_3</span></span><br><span class="line">        <span class="number">18</span>: <span class="type">invokevirtual</span> <span class="comment">#4                  // Method java/io/PrintStream.println:(I)V</span></span><br><span class="line">        <span class="number">21</span>: <span class="type">getstatic</span>     <span class="comment">#3                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">        <span class="number">24</span>: <span class="type">aload</span>         <span class="number">4</span></span><br><span class="line">        <span class="number">26</span>: <span class="type">invokevirtual</span> <span class="comment">#5                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">        <span class="number">29</span>: <span class="type">return</span></span><br><span class="line">      <span class="type">LineNumberTable</span>:</span><br><span class="line">        <span class="type">line</span> <span class="number">17</span>: <span class="number">0</span></span><br><span class="line">        <span class="type">line</span> <span class="number">18</span>: <span class="number">3</span></span><br><span class="line">        <span class="type">line</span> <span class="number">19</span>: <span class="number">6</span></span><br><span class="line">        <span class="type">line</span> <span class="number">21</span>: <span class="number">10</span></span><br><span class="line">        <span class="type">line</span> <span class="number">22</span>: <span class="number">14</span></span><br><span class="line">        <span class="type">line</span> <span class="number">23</span>: <span class="number">21</span></span><br><span class="line">        <span class="type">line</span> <span class="number">24</span>: <span class="number">29</span></span><br><span class="line">      <span class="type">LocalVariableTable</span>:</span><br><span class="line">        <span class="type">Start</span>  <span class="type">Length</span>  <span class="type">Slot</span>  <span class="type">Name</span>   <span class="type">Signature</span></span><br><span class="line">            <span class="number">0</span>      <span class="number">30</span>     <span class="number">0</span>  <span class="type">args</span>   [<span class="type">Ljava</span>/<span class="type">lang</span>/<span class="built_in">String</span>;</span><br><span class="line">            <span class="number">3</span>      <span class="number">27</span>     <span class="number">1</span>     <span class="type">i</span>   <span class="type">I</span></span><br><span class="line">            <span class="number">6</span>      <span class="number">24</span>     <span class="number">2</span>     <span class="type">j</span>   <span class="type">I</span></span><br><span class="line">           <span class="number">10</span>      <span class="number">20</span>     <span class="number">3</span>     <span class="type">k</span>   <span class="type">I</span></span><br><span class="line">           <span class="number">14</span>      <span class="number">16</span>     <span class="number">4</span>     <span class="type">s</span>   <span class="type">Ljava</span>/<span class="type">lang</span>/<span class="built_in">String</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">SourceFile</span>: <span class="string">&quot;PCRegisterTest.java&quot;</span></span><br></pre></td></tr></table></figure>

<p>Code模块解析：</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/28643/image-20201031134509185.png" class="" title="image-20201031134509185">



<blockquote>
<p>❓常见问题</p>
</blockquote>
<ol>
<li><p>为什么使用PC寄存器记录当前线程的执行地址？</p>
<p>因为CPU需要不停的来回切换各个线程，这时候切换回来以后，就需要知道接着从哪开始继续执行。</p>
<p>JVM的的字节码解释器就需要通过改变PC寄存器的值来明确下一条应该执行什么样的字节码指令。</p>
</li>
<li><p>PC寄存器为什么会被设定为线程私有？</p>
<p>为了能够准确地记录各个线程正在执行的当前字节码指令地址，最好的办法就是为每一个线程都分配一个PC寄存器，这样一来各个线程之间就可以进行独立计算，从而不会出现相互干扰的情况。</p>
<p>由于CPU时间片轮限制，众多线程再并发执行过程中，任何一个确定的时刻，一个处理器或者多核处理器中的一个内核，只会执行某个线程中的一条指令。</p>
<p>这样必然导致经常中断或恢复，如何保证分毫无差呢？每个线程在创建后，都会产生自己的程序计数器和栈帧，程序计数器在各个线程之间互不影响。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-3(运行时数据区)</title>
    <url>/posts/2398/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="3-1-📚-概述"><a href="#3-1-📚-概述" class="headerlink" title="3.1 📚 概述"></a>3.1 📚 概述</h2><blockquote>
<p> 🔗内存</p>
</blockquote>
<p>内存是非常重要的系统资源，是硬盘和CPU的中间仓库及桥梁，承载着操作系统和应用程序的实时运行.。JVM内存布局规定了Java在运行过程中内存申请、分配和管理的策略，保证了JVM的高效稳定运行。不同的JVM对于内存的划分方式和管理机制存在着部分差异。</p>
<blockquote>
<p>📷运行时数据区模型</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/2398/image-20201030165643871.png" class="" title="image-20201030165643871">



<blockquote>
<p>📸运行时数据快照</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/2398/image-2021030911201911.jpg" class="" title="image-2021030911201911">



<blockquote>
<p>📷线程数据区模型</p>
</blockquote>
<p>Java虚拟机定义了若干种程序运行期间会使用到的运行时数据区，其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。另外则是与线程一一对应的，这些与线程对应的数据区会随着线程开始和结束而创建和销毁。</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/2398/image-20201030215501981.png" class="" title="image-20201030215501981">

<p>上图中，橙色为多线程共享的，灰色为单独线程私有的</p>
<ul>
<li>共享：堆(Heap)、方法区(Method Area)、堆外内存(永久代/元空间、代码缓存)</li>
<li>私有：线程计数器(PC)、虚拟机栈(Virtual Machine Stack)、本地方法栈(Native Method Stack)</li>
</ul>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/2398/image-20210301164207012.png" class="" title="image-20210301164207012">





<h2 id="3-2-📙-线程"><a href="#3-2-📙-线程" class="headerlink" title="3.2 📙 线程"></a>3.2 📙 线程</h2><blockquote>
<p>💬说明</p>
</blockquote>
<ul>
<li>线程是一个程序里的运行单元。JVM允许一个应用有多个线程并行执行。</li>
<li>在HotSpot JVM里，每个线程都与操作系统的本地线程直接映射。即当一个Java线程准备好执行以后，此时一个操作系统的本地线程也同时创建；Java线程执行终止后，本地线程也会回收。</li>
<li>操作系统负责所有线程的安排调度到任何一个可用的CPU上。一旦本地线程初始化成功，它就会调用Java线程中的run()方法。</li>
</ul>
<blockquote>
<p>🚤JVM系统线程</p>
</blockquote>
<p>JVM中的后台系统线程：</p>
<ul>
<li>虚拟机线程：这种线程的操作是需要JVM达到安全点才会出现。执行类型包括垃圾收集、线程栈收集、线程挂起以及偏向锁撤销。</li>
<li>周期任务线程：这种线程是时间周期事件的体现(比如中断)，一般用于周期性操作的调度执行。</li>
<li>GC线程：这种线程对在JVM里不同种类的垃圾收集行为提供了支持。</li>
<li>编译线程：这种线程在运行时会将字节码编译成本地代码。</li>
<li>信号调度线程：这种点成接收信号并发送给JVM，在它内部通过调用适当的方法进行处理。</li>
</ul>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-2(类加载子系统)</title>
    <url>/posts/22607/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2-1-📓类加载子系统"><a href="#2-1-📓类加载子系统" class="headerlink" title="2.1 📓类加载子系统"></a>2.1 📓类加载子系统</h2><blockquote>
<p>📷类加载子系统图示</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/22607/image-20201026183523366.png" class="" title="image-20201026183523366">



<blockquote>
<p>🔨类加载子系统作用</p>
</blockquote>
<ul>
<li>类加载子系统负责从文件系统或者网络中加载class文件，class文件在文件开头有特定的文件标识。</li>
<li>ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine(执行引擎)决定。</li>
<li>加载的类信息存放于一块称为方法区的内存空间。除了类的信息以外，方法区中还会有存放运行时常量池信息，可能还包括字符串面量和数字常量。</li>
</ul>
<h2 id="2-2-🚀类的加载过程"><a href="#2-2-🚀类的加载过程" class="headerlink" title="2.2 🚀类的加载过程"></a>2.2 🚀类的加载过程</h2><blockquote>
<p>📄类的加载器-ClassLoader</p>
</blockquote>
<ol>
<li>class file存在于本地硬盘上，可以理解为设计师画在纸上的模板，而最终这个模板在执行的时候是要加载到JVM当中来根据这个文件实例化出n个一模一样的实例。</li>
<li>class file加载到JVM中，被称为DNA元数据模板，放在方法区。</li>
<li>在.class文件 -&gt; JVM -&gt; 最终成为元数据模板，此过程就要一个运输工具(类装载器ClassLoader)，扮演一个快递员的角色。</li>
</ol>
<blockquote>
<p>⏰类的加载过程</p>
</blockquote>
<div class="mermaid">graph LR
A(开始)
B{装载类}
C{链接}
D[初始化]
E[调用main]
F(结束)
G{ClassLoader装载顺利}
H[输出异常]
A --&gt; B
B --&gt; |Yes| C
C --&gt; D
D --&gt; E
E --&gt; F
B --&gt; |No| G
G --&gt; |Yes| C
G --&gt; |No| H</div>

<ol>
<li>加载<ol>
<li>通过一个类的全限定名获取定义此类的二进制字节流。</li>
<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li>
<li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口。</li>
</ol>
</li>
<li>链接<ol>
<li>验证<ul>
<li> 目的在于确保Class文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全。</li>
<li> 主要包括四种验证：文件格式验证，元数据验证，字节码验证，符号引用验证。</li>
</ul>
</li>
<li>准备<ul>
<li>为类变量分配内存并且设置该类变量的默认初始值，即零值。</li>
<li>这里不包含用final修饰的static，因为final在编译的时候就会分配了，准备阶段会显式初始化。</li>
<li>这里不会为实例变量分配初始化，类变量会分配在方法区中，而实例变量是会随着对象一起分配到Java堆中。</li>
</ul>
</li>
<li>解析<ul>
<li>将常量池内的符号引用转换为直接引用的过程。</li>
<li>事实上，解析操作往往会伴随着JVM在执行完初始化之后再执行。</li>
<li>符号引用就是一组符号来描述所引用的目标。符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。</li>
<li>解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。对应常量池中的CONSTANT_Class_info、CONSTANT_Filedref_info、CONSTANT_Methodref_info等。</li>
</ul>
</li>
</ol>
</li>
<li>初始化<ul>
<li>初始化阶段就是执行类构造器方法clinit()的过程。</li>
<li>此方法不需要定义，是javac编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来。</li>
<li>构造器方法中指令按语句在源文件中出现的顺序执行。</li>
<li>clinit()不同于类的构造器。(构造器是虚拟机视角下的init())。</li>
<li>若该类具有父类，JVM会保证子类的clinit()执行前，父类的clinit()已经执行完毕。</li>
<li>虚拟机必须保证一个类的clinit()方法在多线程下被同步加锁。</li>
</ul>
</li>
</ol>
<h2 id="2-3-📑类加载器详解"><a href="#2-3-📑类加载器详解" class="headerlink" title="2.3 📑类加载器详解"></a>2.3 📑类加载器详解</h2><blockquote>
<p>⏬类加载器的分类</p>
</blockquote>
<ul>
<li>JVM支持两种类型的类加载器，分别为引导类加载器(BootStrap ClassLoader)和自定义类加载器(User-Defined ClassLoader)。</li>
<li>从概念上来讲，自定义类加载器一般指的是程序中由开发人员自定义的一类类加载器，但是Java虚拟机规范却没有这么定义，而是将所有派生于抽象类ClassLoader的类加载器都划分为自定义类加载器。</li>
<li>无论类加载器的类型如何划分，在程序中最常见的类加载器始终只有3个，如下所示</li>
</ul>
<div class="mermaid">graph TD
A[...]
B[...]
C[User Defined Class Loader]
D[User Defined Class Loader]
E[User Defined Class Loader]
F[User Defined Class Loader]
G[System Class Loader]
H[Extension Class Loader]
I[Bootstrap Class Loader]
A --&gt; C 
C --&gt; E
B --&gt; D
D --&gt; F
E --&gt; G
F --&gt; G
G --&gt; H
H --&gt; I</div>



<blockquote>
<p>⚡️关于ClassLoader </p>
</blockquote>
<p>ClassLoader类，是一个抽象类，其后所有的类加载器都继承自ClassLoader。</p>
<div class="mermaid">classDiagram
ExtClassLoader --&gt; URLClassLoader
AppClassLoader --&gt; URLClassLoader
AppClassLoader : loadClass(String, booean)
URLClassLoader --&gt; SecureClassLoader
URLClassLoader : findClass(String)
SecureClassLoader --&gt; abstract ClassLoader
abstract ClassLoader : loadClass(String)
abstract ClassLoader : resolveClass(Class&lt;?&gt;)
abstract ClassLoader : findClass(String)
abstract ClassLoader : defineClass(byte[], int, int)</div>


<p>ClassLoader的常用方法</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">getParent()</td>
<td align="center">返回该类加载器的超类加载器</td>
</tr>
<tr>
<td align="center">loadClass(String name)</td>
<td align="center">加载名称为name的类，返回结果为java.lang.Class类的实例</td>
</tr>
<tr>
<td align="center">findClass(String name)</td>
<td align="center">查找名称为name的类，返回结果为java.lang.Class类的实例</td>
</tr>
<tr>
<td align="center">findLoadedClass(String name)</td>
<td align="center">查找名称为name的已经被加载过的类，返回结果为java.lang.Class类的实例</td>
</tr>
<tr>
<td align="center">defineClass(String name, byte[] b, int off, int len)</td>
<td align="center">把字节数组b中的内容转换为一个Java类，返回结果为java.lang.Class类的实例</td>
</tr>
<tr>
<td align="center">resloveClass(Class&lt;?&gt; c)</td>
<td align="center">连接指定的一个Java类</td>
</tr>
</tbody></table>
<p>获取ClassLoader的途径</p>
<table>
<thead>
<tr>
<th align="center">描述</th>
<th align="center">方式</th>
</tr>
</thead>
<tbody><tr>
<td align="center">获取当前类的ClassLoader</td>
<td align="center">clazz.getClassLoader()</td>
</tr>
<tr>
<td align="center">获取当前线程上下文的ClassLoader</td>
<td align="center">Thread.currentThread().getContextLoader()</td>
</tr>
<tr>
<td align="center">获取系统的ClassLoader</td>
<td align="center">ClassLoader.getSystemClassLoader()</td>
</tr>
<tr>
<td align="center">获取调用者的ClassLoader</td>
<td align="center">DriveManager.getCallerClassLoader()</td>
</tr>
</tbody></table>
<blockquote>
<p>🎀虚拟机自带的加载器</p>
</blockquote>
<ul>
<li>启动类加载器(Bootstrap ClassLoader)<ul>
<li>C/C++语言编写，嵌套在JVM内部，无法获取</li>
<li>它用来加载Java的核心库，用于提供JVM自身需要的类</li>
<li>并不继承自java.lang.Classoader，没有父类加载器</li>
<li>加载扩展类和应用程序类加载器，并指定为他们的父类加载器</li>
<li><strong>出于安全考虑，BootStrap启动类加载器只加载包名为<u>java</u>、<u>javax</u>、<u>sun</u>等开头的类</strong></li>
</ul>
</li>
<li>应用程序类加载器(Application ClassLoader)<ul>
<li>Java语言编写，由sun.misc.Launcher$AppClassLoader实现</li>
<li>派生于ClassLoader类</li>
<li>父类加载器为扩展类加载器</li>
<li>它负责加载环境变量classpath或系统属性java.class.path指定路径下的类库</li>
<li>该类加载是程序中默认的类加载器，一般来说，Java应用的类都是由它来完成加载</li>
<li>通过ClassLoader$getSystemClassLoader()方法可以获取到该类加载器</li>
</ul>
</li>
<li>扩展类加载器(Extension ClassLoader)<ul>
<li>Java语言编写，由sun.misc.Launcher$ExtClassLoader实现</li>
<li>它负责加载%JAVA_HOME%\lib\ext目录中或者被java.ext.dirs系统变量所指定的路径中的所有类库</li>
<li>开发者可以直接使用扩展类加载器</li>
</ul>
</li>
</ul>
<blockquote>
<p>🎀用户自定义类加载器</p>
</blockquote>
<p>应用场景：</p>
<ul>
<li>隔离加载类</li>
<li>修改类加载的方式</li>
<li>扩展加载源</li>
<li>防止源码泄露</li>
</ul>
<p>实现步骤：</p>
<ul>
<li>开发人员可以通过继承抽象类java.lang.ClassLoader类的方式，实现自己的类加载器，以满足一些特殊的需求。</li>
<li>在JDK1.2之前，在自定义类加载器时，总会去继承ClassLoader类并重写loadClass()方法，从而实现自定义的类加载器，但是在JDK1.2之后已不再建议用户去覆盖loadClass()方法，而是建议把自定义的类加载器逻辑写在findClass()方法中。</li>
<li>在编写自定义类加载器时，如果没有太过于复杂的需求，可以直接继承URLClassLoader类，这样就可以避免自己去编写findClass()方法及其获取字节码流的方式，使自定义类加载器编写更加简洁。</li>
</ul>
<h2 id="2-5-💑双亲委派机制"><a href="#2-5-💑双亲委派机制" class="headerlink" title="2.5 💑双亲委派机制"></a>2.5 💑双亲委派机制</h2><blockquote>
<p>🕵️工作原理</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/22607/image-20201028095903827.png" class="" title="image-20201028095903827">

<p><strong>责任链模式</strong></p>
<ul>
<li>如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行。</li>
<li>如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器。</li>
<li>如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载。</li>
</ul>
<blockquote>
<p>🌠优势</p>
</blockquote>
<ul>
<li>避免类的重复加载</li>
<li>保护程序安全，防止核心AP被随意篡改</li>
</ul>
<blockquote>
<p>📘沙箱安全机制</p>
</blockquote>
<p>假如在java.lang包下自定义String类，程序会报错。</p>
<p>因为在加载自定义String类的时候回率先使用引导类加载器加载，而引导类加载器在加载的过程中会先加载jdk自带的文件(rt.jar包中java/lang/String.class)，报错信息是找不到main方法，就是因为加载的是rt.jar中的String类。这样可以保证对Java核心源代码的保护。</p>
<h2 id="2-6-🔰其他"><a href="#2-6-🔰其他" class="headerlink" title="2.6 🔰其他"></a>2.6 🔰其他</h2><blockquote>
<p>⚓在JVM中表示两个class对象是否为同一个类存在的两个必要条件</p>
</blockquote>
<ul>
<li>类的完整类名必须一致，包括包名</li>
<li>加载这个类的ClassLoader必须相同</li>
</ul>
<p>换句话说，在JVM中，即使这两个类对象来源于同一个class文件，被同一个虚拟机所加载，但只要加载它们的ClassLoader实例对象不同，那么这两个类对象也是不相等的。</p>
<blockquote>
<p>⚓对类加载器的引用</p>
</blockquote>
<p>JVM必须知道一个类型是由启动加载器加载的还是由用户类加载器加载的。如果一个类型是由用户类加载器加载的，那么JVM会将这个类加载器的一个引用作为类型信息的一部分保存在方法区中。当解析一个类型到另一个类型的引用的时候，JVM需要保证这两个类型的类加载器是相同的。</p>
<blockquote>
<p>⚓类的主动使用和被动使用</p>
</blockquote>
<p>Java程序对类的使用方式分为：主动使用和被动使用</p>
<p>主动使用，分为七种情况：</p>
<ul>
<li>创建类的实例</li>
<li>访问某个类或接口的静态变量，或者对该静态变量赋值</li>
<li>调用类的静态方法</li>
<li>反射(比如：Class.forName(“top.parak”))</li>
<li>初始化一个类的子类</li>
<li>Java虚拟机启动时被标明为启动类的类</li>
<li>JDK7开始提供的动态语言支持：java.lang.invoke.MethodHandle实例的解析结果<br>REF_getStatic、REF_putStatic、REF_invokeStatic句柄对应的类没有初始化，则初始化</li>
</ul>
<p>除了以上七种情况，其他使用Java类的方式都被看做是被动使用，都不会导致类的初始化</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-1(JVM概述)</title>
    <url>/posts/21157/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-1-📚-概述"><a href="#1-1-📚-概述" class="headerlink" title="1.1 📚 概述"></a>1.1 📚 概述</h2><blockquote>
<p>📖定义</p>
</blockquote>
<p>Java虚拟机就是二进制字节码的运行环境，负责装载字节码到其内部，解释/便于为对应平台上的机器指令执行。</p>
<blockquote>
<p>🌠特点</p>
</blockquote>
<ul>
<li>一次编译，到处运行</li>
<li>自动内存管理</li>
<li>垃圾自动回收</li>
</ul>
<div class="mermaid">graph TD
A[Java程序]
B[字节码文件]
C[Win版JVM]
D[Linux版JVM]
E[Ma版JVM]
A --&gt; B
B --&gt; C
B --&gt; D
B --&gt; E</div>



<blockquote>
<p>🕵️Java代码的执行流程</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/21157/image-20201026120407011.png" class="" title="image-20201026120407011">





<blockquote>
<p>🔰拓展</p>
</blockquote>
<p>Java虚拟机不仅仅能用来解释Java语言。</p>
<p>JVM根本不关心运行在其内部的程序到底是何种语言编写的，它只关心“字节码”文件。</p>
<p>即JVM具有语言无关性，并不会单纯地与Java语言终身绑定，只要其他编程语言的编译结果满足并包含JVM的内部指令集、符号表以及其他的辅助信息，它就是一个有效的字节码文件，能够被JVM所识别、装载并运行。</p>
<p><u>Java并不是最强大的语言，但JVM是最强大的虚拟机。</u></p>
<div class="mermaid">graph TD
A1((Kotlin))
B1((Clojure))
C1((Groovy))
D1((Scala))
E1((Jython))
F1((JRuby))
G1((JavaScript))
A2[编译器]
B2[编译器]
C2[编译器]
D2[编译器]
E2[编译器]
F2[编译器]
G2[编译器]
H[字节码文件]
I[Java虚拟机]
A1 --&gt; A2
B1 --&gt; B2
C1 --&gt; C2
D1 --&gt; D2 
E1 --&gt; E2
F1 --&gt; F2
G1 --&gt; G2
A2 --&gt; H
B2 --&gt; H
C2 --&gt; H
D2 --&gt; H
E2 --&gt; H
F2 --&gt; H
G2 --&gt; H
H --&gt; I</div>



<h2 id="1-2-📂-结构"><a href="#1-2-📂-结构" class="headerlink" title="1.2 📂 结构"></a>1.2 📂 结构</h2><blockquote>
<p>📘说明</p>
</blockquote>
<ul>
<li>HotSpot VM是目前市面上高性能虚拟机的代表作之一</li>
<li>它采用解释器与即时编译器并存的架构</li>
</ul>
<blockquote>
<p>📷JVM架构图</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/21157/image-20201026111606382.png" class="" title="image-20201026111606382">

<blockquote>
<p>🔬详细图</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/21157/image-20201026111249155.png" class="" title="image-20201026111249155">



<h2 id="1-3-⏳-生命周期"><a href="#1-3-⏳-生命周期" class="headerlink" title="1.3 ⏳ 生命周期"></a>1.3 ⏳ 生命周期</h2><blockquote>
<p>🎏虚拟机的启动</p>
</blockquote>
<p>Java虚拟机的启动是通过引导类加载器(Bootstrap Class Loader)创建一个初始类(initial class)来完成的，这个类是由虚拟机的具体实现指定的。</p>
<blockquote>
<p>🎏虚拟机的执行</p>
</blockquote>
<ul>
<li>一个运行中的Java虚拟机有着一个清晰的任务：执行Java程序</li>
<li>程序开始执行时他才运行，程序结束时他就停止</li>
<li>执行一个所谓的Java程序的时候，真真正正在执行的是一个叫做Java虚拟机的进程</li>
</ul>
<blockquote>
<p>🎏虚拟机的退出</p>
</blockquote>
<ul>
<li>程序正常执行结束</li>
<li>程序在执行过程中遇到了异常或错误而异常终止</li>
<li>由于操作系统出现错误而导致Java虚拟机进程终止</li>
<li>某线程调用Runtime类或System类的exit方法，或Runtime类的halt方法，并且Java安全管理器也允许这次exit或halt操作</li>
<li>除此之外，JNI规范描述了用JNI Invocation API来加载或卸载Java虚拟机时，Java虚拟机的退出情况。</li>
</ul>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JUC-8(并发工具之同步器)</title>
    <url>/posts/23706/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="8-1-CountDownLatch"><a href="#8-1-CountDownLatch" class="headerlink" title="8.1 CountDownLatch"></a>8.1 CountDownLatch</h2><p><code>CountDownLatch</code>计数器</p>
<p>特点：内部计数器递减。</p>
<p>功能：主线程等待所有子线程执行完毕进行汇总。</p>
<h3 id="8-1-1-案例"><a href="#8-1-1-案例" class="headerlink" title="8.1.1 案例"></a>8.1.1 案例</h3><p>任务分解，第三个任务需要等待第一个任务和第二个任务执行计算后进行汇总。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021-05-07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;CountDownLatch&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">int</span> timeout, TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            unit.sleep(timeout);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        executorService.submit(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;state = &#123;&#125;&quot;</span>, countDownLatch.getCount());</span><br><span class="line">            total += <span class="number">1</span>;</span><br><span class="line">            sleep(<span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">            log.debug(<span class="string">&quot;&#123;&#125; run over&quot;</span>, Thread.currentThread().getName());</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">            log.debug(<span class="string">&quot;state = &#123;&#125;&quot;</span>, countDownLatch.getCount());</span><br><span class="line">        &#125;);</span><br><span class="line">        executorService.submit(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;state = &#123;&#125;&quot;</span>, countDownLatch.getCount());</span><br><span class="line">            total += <span class="number">2</span>;</span><br><span class="line">            sleep(<span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">            log.debug(<span class="string">&quot;&#123;&#125; run over&quot;</span>, Thread.currentThread().getName());</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">            log.debug(<span class="string">&quot;state = &#123;&#125;&quot;</span>, countDownLatch.getCount());</span><br><span class="line">        &#125;);</span><br><span class="line">        executorService.submit(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;state = &#123;&#125;&quot;</span>, countDownLatch.getCount());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                countDownLatch.await();</span><br><span class="line">                log.debug(<span class="string">&quot;result: total = &#123;&#125;&quot;</span>, total);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(<span class="string">&quot;&#123;&#125; run over&quot;</span>, Thread.currentThread().getName());</span><br><span class="line">        &#125;);</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        sleep(<span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">        executorService.shutdownNow();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">12</span>:<span class="number">14</span>:<span class="number">58.374</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">1</span>] DEBUG CountDownLatch - state = <span class="number">2</span></span><br><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">12</span>:<span class="number">14</span>:<span class="number">58.374</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">2</span>] DEBUG CountDownLatch - state = <span class="number">2</span></span><br><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">12</span>:<span class="number">14</span>:<span class="number">58.374</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">3</span>] DEBUG CountDownLatch - state = <span class="number">2</span></span><br><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">12</span>:<span class="number">14</span>:<span class="number">59.379</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">2</span>] DEBUG CountDownLatch - pool<span class="literal">-1</span><span class="literal">-thread</span><span class="literal">-2</span> run over</span><br><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">12</span>:<span class="number">14</span>:<span class="number">59.379</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">1</span>] DEBUG CountDownLatch - pool<span class="literal">-1</span><span class="literal">-thread</span><span class="literal">-1</span> run over</span><br><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">12</span>:<span class="number">14</span>:<span class="number">59.380</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">2</span>] DEBUG CountDownLatch - state = <span class="number">1</span></span><br><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">12</span>:<span class="number">14</span>:<span class="number">59.380</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">1</span>] DEBUG CountDownLatch - state = <span class="number">0</span></span><br><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">12</span>:<span class="number">14</span>:<span class="number">59.380</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">3</span>] DEBUG CountDownLatch - result: total = <span class="number">3</span></span><br><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">12</span>:<span class="number">14</span>:<span class="number">59.380</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">3</span>] DEBUG CountDownLatch - pool<span class="literal">-1</span><span class="literal">-thread</span><span class="literal">-3</span> run over</span><br></pre></td></tr></table></figure>



<h3 id="8-1-2-原理"><a href="#8-1-2-原理" class="headerlink" title="8.1.2 原理"></a>8.1.2 原理</h3><p>类图</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/23706/image-20210508154726370.png" class="" title="image-20210508154726370">



<p>（1）构造方法</p>
<p>入参：<code>count</code>，会将计数器值<code>count</code>赋给了AQS的状态变量<code>state</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CountDownLatch</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CountDownLatch</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (count &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;count &lt; 0&quot;</span>);</span><br><span class="line">    <span class="keyword">this</span>.sync = <span class="keyword">new</span> Sync(count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sync</span></span><br><span class="line">Sync(<span class="keyword">int</span> count) &#123;</span><br><span class="line">    setState(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）<code>void await()</code>方法</p>
<p>当线程调用<code>CountDownLatch</code>的<code>await</code>方法后，当前线程就会阻塞，直到：</p>
<ul>
<li>所有线程都调用了<code>CountDownLatch</code>对象的<code>countDown</code>方法后，即计数器值为0时</li>
<li>其他线程调用了当前线程的<code>interrupt</code>方法中断了当前线程，当前线程抛出<code>InterruptedException</code>异常</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CountDownLatch</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    sync.acquireSharedInterruptibly(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AQS</span></span><br><span class="line"><span class="comment">// 获取共享资源时可被中断</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquireSharedInterruptibly</span><span class="params">(<span class="keyword">int</span> arg)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 如果线程被中断即抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (Thread.interrupted())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">    <span class="comment">// 查看当前计数器值是否为0，为0则直接返回，否则进入AQS的队列等待</span></span><br><span class="line">    <span class="keyword">if</span> (tryAcquireShared(arg) &lt; <span class="number">0</span>)</span><br><span class="line">        doAcquireSharedInterruptibly(arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sync</span></span><br><span class="line"><span class="comment">// 实现的AQS接口</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (getState() == <span class="number">0</span>) ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3）<code>boolean await(long timeout, TimeUnit unit)</code>方法</p>
<p>当线程调用了<code>CountDownLatch</code>的该方法后，当前线程会被阻塞，直到：</p>
<ul>
<li>所有线程都调用了<code>CountDownLatch</code>对象的<code>countDown</code>方法后，即计数器值为0时</li>
<li>设置的<code>timeout</code>时间到了，因为超时返回<code>false</code></li>
<li>其他线程调用了当前线程的<code>interrupt</code>方法中断了当前线程，当前线程抛出<code>InterruptedException</code>异常</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CountDownLatch</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">await</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sync.tryAcquireSharedNanos(<span class="number">1</span>, unit.toNanos(timeout));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（4）<code>void countDown()</code>方法</p>
<p>线程调用该方法后，计数器的值递减，递减后如果计数器的值为0则唤醒所有因调用await方法而被阻塞的线程，否则什么都不做。</p>
<p>如果state原始值为n，有(n+1)个线程调用了<code>countDown</code>方法，那么第(n+1)个线程调用无效。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CountDownLatch</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sync.releaseShared(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AQS</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">releaseShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用Sync的实现，成功则唤醒阻塞的线程</span></span><br><span class="line">    <span class="keyword">if</span> (tryReleaseShared(arg)) &#123;</span><br><span class="line">        <span class="comment">// AQS释放资源</span></span><br><span class="line">        doReleaseShared();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sync</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryReleaseShared</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 循环CAS使计数器（状态值state）减1并更新，直到成功</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = getState();</span><br><span class="line">        <span class="comment">// 防止state变成负数</span></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> nextc = c-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(c, nextc))</span><br><span class="line">            <span class="keyword">return</span> nextc == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（5）<code>long getCount()</code>方法</p>
<p>获取当前计数器的值，即AQS的<code>state</code>值，一般用于测试。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CountDownLatch</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sync.getCount();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AQS</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getState();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="8-1-3-小结"><a href="#8-1-3-小结" class="headerlink" title="8.1.3 小结"></a>8.1.3 小结</h3><p><code>CountDownLatch</code>相比于使用线程的<code>join</code>方法来实现线程间同步，前者更具有灵活性和方便性，因为在<code>ExecutorService</code>线程池中无法直接调用其他线程的<code>join</code>方法。</p>
<p><code>CountDownLatch</code>使用AQS的状态变量<code>state</code>来存放计数器的值。首先在初始化设置计数器值（AQS状态值），多个线程调用<code>countDown</code>方法实际是原子性递减AQS的状态值。当线程调用<code>await</code>方法后当前线程会被放入AQS的阻塞队列等待，待计数器为0再返回。其他线程调用<code>countDown</code>方法让计数器值递减1，当计数器值变成0时，当前线程还要调用AQS的<code>doReleaseSShared</code>方法来激活由于调用<code>await</code>方法而被阻塞的线程。</p>
<h2 id="8-2-CyclicBarrier"><a href="#8-2-CyclicBarrier" class="headerlink" title="8.2 CyclicBarrier"></a>8.2 CyclicBarrier</h2><p><code>CyclicBarrier</code>回环<a href="%E5%9B%9E%E7%8E%AF%E6%98%AF%E5%9B%A0%E4%B8%BA%E5%BD%93%E6%89%80%E6%9C%89%E7%BA%BF%E7%A8%8B%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%AF%95%EF%BC%8C%E5%B9%B6%E9%87%8D%E7%BD%AE%60CylicBarrier%60%E7%9A%84%E7%8A%B6%E6%80%81%E4%BB%A5%E4%BE%BF%E9%87%8D%E7%94%A8%E3%80%82">^1</a>屏障<a href="%E7%BA%BF%E7%A8%8B%E8%B0%83%E7%94%A8%60await%60%E6%96%B9%E6%B3%95%E5%90%8E%E5%B0%B1%E4%BC%9A%E8%A2%AB%E9%98%BB%E5%A1%9E%EF%BC%8C%E8%BF%99%E4%B8%AA%E9%98%BB%E5%A1%9E%E7%82%B9%E5%B0%B1%E7%A7%B0%E4%B8%BA%E5%B1%8F%E9%9A%9C%E7%82%B9%EF%BC%8C%E7%AD%89%E6%89%80%E6%9C%89%E7%BA%BF%E7%A8%8B%E9%83%BD%E8%B0%83%E7%94%A8%E4%BA%86%60await%60%E6%96%B9%E6%B3%95%E5%90%8E%EF%BC%8C%E7%BA%BF%E7%A8%8B%E4%BB%AC%E5%B0%B1%E4%BC%9A%E5%86%B2%E7%A0%B4%E5%B1%8F%E9%9A%9C%EF%BC%8C%E7%BB%A7%E7%BB%AD%E5%90%91%E4%B8%8B%E8%BF%90%E8%A1%8C%E3%80%82">^2</a></p>
<p>特点：内部计数器递减。</p>
<p>功能：让一组线程全部达到一个状态后再全部同时执行。</p>
<p>[^ 1]： 回环是因为当所有线程执行完毕，并重置<code>CylicBarrier</code>的状态以便重用。</p>
<p>[^ 2]：线程调用<code>await</code>方法后就会被阻塞，这个阻塞点就称为屏障点，等所有线程都调用了<code>await</code>方法后，线程们就会冲破屏障，继续向下运行。</p>
<h3 id="8-2-1-案例"><a href="#8-2-1-案例" class="headerlink" title="8.2.1 案例"></a>8.2.1 案例</h3><p>一个任务需要三步完成，需要执行多个任务。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;CyclicBarrier&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">3</span>, () -&gt; &#123;log.debug(<span class="string">&quot;==========================&quot;</span>);&#125;);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">int</span> timeout, TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            unit.sleep(timeout);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            executorService.submit(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;&#123;&#125; first step&quot;</span>, Thread.currentThread().getName());</span><br><span class="line">                    sleep(<span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">                    cyclicBarrier.await();</span><br><span class="line">                    log.debug(<span class="string">&quot;&#123;&#125; second step&quot;</span>, Thread.currentThread().getName());</span><br><span class="line">                    sleep(<span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">                    cyclicBarrier.await();</span><br><span class="line">                    log.debug(<span class="string">&quot;&#123;&#125; third step&quot;</span>, Thread.currentThread().getName());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">58.549</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">2</span>] DEBUG CyclicBarrier - pool<span class="literal">-1</span><span class="literal">-thread</span><span class="literal">-2</span> first step</span><br><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">58.549</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">1</span>] DEBUG CyclicBarrier - pool<span class="literal">-1</span><span class="literal">-thread</span><span class="literal">-1</span> first step</span><br><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">58.549</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">3</span>] DEBUG CyclicBarrier - pool<span class="literal">-1</span><span class="literal">-thread</span><span class="literal">-3</span> first step</span><br><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">59.558</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">2</span>] DEBUG CyclicBarrier - ==========================</span><br><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">59.559</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">2</span>] DEBUG CyclicBarrier - pool<span class="literal">-1</span><span class="literal">-thread</span><span class="literal">-2</span> second step</span><br><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">59.559</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">3</span>] DEBUG CyclicBarrier - pool<span class="literal">-1</span><span class="literal">-thread</span><span class="literal">-3</span> second step</span><br><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">59.559</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">1</span>] DEBUG CyclicBarrier - pool<span class="literal">-1</span><span class="literal">-thread</span><span class="literal">-1</span> second step</span><br><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">16</span>:<span class="number">29</span>:<span class="number">00.570</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">2</span>] DEBUG CyclicBarrier - ==========================</span><br><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">16</span>:<span class="number">29</span>:<span class="number">00.570</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">2</span>] DEBUG CyclicBarrier - pool<span class="literal">-1</span><span class="literal">-thread</span><span class="literal">-2</span> third step</span><br><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">16</span>:<span class="number">29</span>:<span class="number">00.570</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">1</span>] DEBUG CyclicBarrier - pool<span class="literal">-1</span><span class="literal">-thread</span><span class="literal">-1</span> third step</span><br><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">16</span>:<span class="number">29</span>:<span class="number">00.570</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">3</span>] DEBUG CyclicBarrier - pool<span class="literal">-1</span><span class="literal">-thread</span><span class="literal">-3</span> third step</span><br></pre></td></tr></table></figure>



<h3 id="8-2-2-原理"><a href="#8-2-2-原理" class="headerlink" title="8.2.2 原理"></a>8.2.2 原理</h3><p>类图</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/23706/image-20210508154851790.png" class="" title="image-20210508154851790">

<p><code>CyclicBarrier</code>基于独占锁实现，本质底层还是基于AQS的。</p>
<p>属性：</p>
<ul>
<li><p><code>lock</code>：独占锁。</p>
</li>
<li><p><code>trip</code>：条件变量。</p>
</li>
<li><p><code>barrierCommand</code>：到达屏障点执行的任务。</p>
</li>
<li><p><code>parties</code>：线程计数器，这里表示多少线程调用<code>await</code>后，所有线程才会冲破屏障继续向下允许。</p>
</li>
<li><p><code>count</code>：执行记录器，一开始等于<code>parties</code>，每当有线程调用<code>await</code>就递减1，当<code>count</code>为0时就表示所有线程都到了屏障点。</p>
</li>
</ul>
<p><code>parties</code>始终用来记录总的线程个数，当<code>count</code>计数器值变为0后，会将<code>parties</code>的值赋给<code>count</code>，进而进行服用。</p>
<p>内部类<code>Generation</code>仅有一个属性<code>broken</code>，用来记录当前屏障是否被打破。是在锁内使用变量，所以并没有声明为<code>volatile</code>。</p>
<p>（1）构造方法</p>
<p>入参：<code>parties</code>（必选）、<code>barrierAction</code>（可选）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CyclicBarrier</span><span class="params">(<span class="keyword">int</span> parties, Runnable barrierAction)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (parties &lt;= <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">this</span>.parties = parties;</span><br><span class="line">    <span class="keyword">this</span>.count = parties;</span><br><span class="line">    <span class="keyword">this</span>.barrierCommand = barrierAction;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）<code>int await()</code>方法</p>
<p>当前线程调用了<code>CyclicBarrier</code>的该方法时会被阻塞，直到：</p>
<ul>
<li><code>parties</code>个线程都调用了<code>await</code>方法，线程到达屏障点</li>
<li>其他线程调用了当前线程的<code>interrupt</code>方法中断了当前线程，则当前线程抛出<code>InterruptedExcetion</code>异常</li>
<li>与当前屏障点关联的<code>Generation</code>对象的<code>broken</code>标志被设置为<code>true</code>时，会抛出<code>BrokenBarrierException</code>异常</li>
</ul>
<p>内部调用<code>dowait</code>方法，第一个参数为false说明不设置超时时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, BrokenBarrierException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dowait(<span class="keyword">false</span>, <span class="number">0L</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (TimeoutException toe) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Error(toe); <span class="comment">// cannot happen</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3）<code>boolean await(long timeout, TimeUnit unit)</code>方法</p>
<p>当先线程调用了<code>CyclicBarrier</code>的该方法时会被阻塞，直到：</p>
<ul>
<li><code>parties</code>个线程都调用了<code>await</code>方法，也就是线程都到了屏障点，这时候返回<code>true</code></li>
<li>设置的<code>timeout</code>时间到了，因为超时返回<code>false</code></li>
<li>其他线程调用当前线程的<code>interrupt</code>方法中断了当前线程，则当前线程会抛出<code>InterruptedException</code></li>
<li>与当前屏障点关联的<code>Generation</code>对象的<code>broken</code>标志被设置为<code>true</code>时，会抛出<code>BrokenBarrierException</code>异常</li>
</ul>
<p>内部调用<code>dowait</code>方法，第一个参数说明设置超时，第二个参数是超时时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">await</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException, BrokenBarrierException, TimeoutException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dowait(<span class="keyword">true</span>, unit.toNanos(timeout));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3）<code>int dowait(boolean timed, long nanos)</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">dowait</span><span class="params">(<span class="keyword">boolean</span> timed, <span class="keyword">long</span> nanos)</span> <span class="keyword">throws</span> InterruptedException, BrokenBarrierException, TimeoutException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">// (1)如果index=0则说明所有线程都到了屏障点，此时执行初始化时传递的任务</span></span><br><span class="line">        <span class="keyword">int</span> index = --count;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;  <span class="comment">// tripped</span></span><br><span class="line">            <span class="keyword">boolean</span> ranAction = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// (2) 执行任务</span></span><br><span class="line">                <span class="keyword">final</span> Runnable command = barrierCommand;</span><br><span class="line">                <span class="keyword">if</span> (command != <span class="keyword">null</span>)</span><br><span class="line">                    command.run();</span><br><span class="line">                ranAction = <span class="keyword">true</span>;</span><br><span class="line">                <span class="comment">// (3)激活其他因调用await方法而被阻塞的线程，并且重置CyclicBarrier</span></span><br><span class="line">                nextGeneration();</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!ranAction)</span><br><span class="line">                    breakBarrier();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// (4)如果index!=0</span></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// (5)未设置超时时间</span></span><br><span class="line">                <span class="keyword">if</span> (!timed)</span><br><span class="line">                    trip.await();</span><br><span class="line">               	<span class="comment">// （6）设置了超时时间</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (nanos &gt; <span class="number">0L</span>)</span><br><span class="line">                    nanos = trip.awaitNanos(nanos);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">			...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">nextGeneration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// (7)唤醒条件队列中的阻塞线程</span></span><br><span class="line">    trip.signalAll();</span><br><span class="line">    <span class="comment">// (8)重置CyclicBarrier</span></span><br><span class="line">    count = parties;</span><br><span class="line">    generation = <span class="keyword">new</span> Generation();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="8-2-3-小结"><a href="#8-2-3-小结" class="headerlink" title="8.2.3 小结"></a>8.2.3 小结</h3><p><code>CycleBarrier</code>与<code>CountDownLatch</code>的不同之处在于，前者是可以复用的，并且前者特别适合分段任务有序执行的场景。</p>
<p>内部通过<code>ReentrantLock</code>独占锁实现计数器原子性更新，并使用条件变量队列来实现线程同步。</p>
<h2 id="8-3-Semaphore"><a href="#8-3-Semaphore" class="headerlink" title="8.3 Semaphore"></a>8.3 Semaphore</h2><p><code>Semaphore</code>信号量</p>
<p>特点：内部计数器递增。</p>
<p>功能：限制能同时访问共享资源的线程上限。</p>
<h3 id="8-3-1-案例"><a href="#8-3-1-案例" class="headerlink" title="8.3.1 案例"></a>8.3.1 案例</h3><p>主线程等待两个子任务执行完毕。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;CountDownLatch&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">int</span> timeout, TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            unit.sleep(timeout);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        executorService.submit(() -&gt; &#123;</span><br><span class="line">            sleep(<span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;);</span><br><span class="line">        executorService.submit(() -&gt; &#123;</span><br><span class="line">            sleep(<span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;);</span><br><span class="line">        log.debug(<span class="string">&quot;wait all child thread over&quot;</span>);</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        log.debug(<span class="string">&quot;all child thread over&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="8-3-2-原理"><a href="#8-3-2-原理" class="headerlink" title="8.3.2 原理"></a>8.3.2 原理</h3><p>类图</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/23706/image-20210508204931688.png" class="" title="image-20210508204931688">

<p><code>Semaphore</code>还是使用AQS实现的，<code>Sync</code>只是对AQS的一个修饰，并且<code>Sync</code>有两个实现类，用来指定获取信号量时是否采用公平策略。</p>
<p>（1）构造方法</p>
<p>入参：<code>permits</code>（必选）、<code>fair</code>（可选）</p>
<p><code>Semphore</code>默认采用非公平策略，如果需要使用公平策略需要使用双参构造方法。初始化信号量个数<code>permits</code>被赋给了AQS的状态变量<code>state</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Semophore</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Semaphore</span><span class="params">(<span class="keyword">int</span> permits, <span class="keyword">boolean</span> fair)</span> </span>&#123;</span><br><span class="line">    sync = fair ? <span class="keyword">new</span> FairSync(permits) : <span class="keyword">new</span> NonfairSync(permits);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sync</span></span><br><span class="line">Sync(<span class="keyword">int</span> permits) &#123;</span><br><span class="line">    setState(permits);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）<code>void acquire()</code>方法</p>
<p>当前线程调用该方法的目的是希望获取一个信号量资源。</p>
<p>如果当前信号量个数大于0，则当前信号量的计数会减1，然后直接返回。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"> 	<span class="comment">// 传递参数为1，说明要获取一个信号量资源</span></span><br><span class="line">    sync.acquireSharedInterruptibly(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquireSharedInterruptibly</span><span class="params">(<span class="keyword">int</span> arg)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// (1)如果线程被中断，则抛出中断异常</span></span><br><span class="line">    <span class="keyword">if</span> (Thread.interrupted())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">    <span class="comment">// (2)否则调用Sync子类方法尝试获取，这里根据构造方法确定NonfairSync还是FairSync</span></span><br><span class="line">    <span class="keyword">if</span> (tryAcquireShared(arg) &lt; <span class="number">0</span>)</span><br><span class="line">        doAcquireSharedInterruptibly(arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于<code>tryAcquireShared</code>，分两种情况讨论：</p>
<ol>
<li><p>非公平锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NonfairSync</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nonfairTryAcquireShared(acquires);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sync</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">nonfairTryAcquireShared</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">// 获取当前信号量</span></span><br><span class="line">        <span class="keyword">int</span> available = getState();</span><br><span class="line">        <span class="comment">// 计算当前剩余量</span></span><br><span class="line">        <span class="keyword">int</span> remaining = available - acquires;</span><br><span class="line">        <span class="comment">// 如果当前剩余值小于0或者CAS设置成功则返回</span></span><br><span class="line">        <span class="keyword">if</span> (remaining &lt; <span class="number">0</span> ||</span><br><span class="line">            compareAndSetState(available, remaining))</span><br><span class="line">            <span class="keyword">return</span> remaining;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先获取当前信号量，然后减去需要获取的值，得到剩余信号量个数，如果剩余信号量小于0则说明当前信号量个数满足不了需求，那么直接返回负数，这时当前线程会被放入AQS的阻塞队列而被挂起。如果剩余值大于0，则使用CAS操作设置当前信号量值为剩余值，然后返回剩余值。</p>
<p>另外，由于<code>NonfairSync</code>是非公平获取的，也就是说先调用<code>acquire</code>方法获取信号量的线程不一定比后来者先获取到信号量。</p>
</li>
<li><p>公平锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">// 先检查阻塞队列中是否有前驱结点</span></span><br><span class="line">        <span class="keyword">if</span> (hasQueuedPredecessors())</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> available = getState();</span><br><span class="line">        <span class="keyword">int</span> remaining = available - acquires;</span><br><span class="line">        <span class="keyword">if</span> (remaining &lt; <span class="number">0</span> ||</span><br><span class="line">            compareAndSetState(available, remaining))</span><br><span class="line">            <span class="keyword">return</span> remaining;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AQS公平性的保证就靠<code>hasQueuedPredecessors</code>这个方法，如果当前线程节点的前驱结点是否也在等待获取该资源，是则放弃自己获取信号量的资格。</p>
</li>
</ol>
<p>（3）<code>void acquire(int permits)</code>方法</p>
<p>该方法与<code>acquire()</code>方法不同，后者只需要获取一个信号量值，而前者则获取<code>perimits</code>个。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> permits)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (permits &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    sync.acquireSharedInterruptibly(permits);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（4）<code>void acquireUninterruptibly()</code>方法</p>
<p>该方法与<code>acquire()</code>类似，不同之处在于该方法对中断不响应，也就是当当前线程调用了<code>acquireUninterruptibly</code>获取资源时，其他线程调用了当前线程的<code>interrupt</code>方法设置了当前线程的中断标志，此时当前线程并不会抛出<code>InterruptedException</code>异常而返回。</p>
<p>（5）<code>void accquireUninterruptibly(int permits)</code>方法</p>
<p>该方法与<code>acquire(int permits)</code>方法的不同之处在于，该方法对中断不响应。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">acquireUninterruptibly</span><span class="params">(<span class="keyword">int</span> permits)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (permits &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    sync.acquireShared(permits);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（6）<code>void release()</code>方法</p>
<p>该方法的作用是把当前<code>Semaphore</code>对象的信号量增加<code>1</code>，如果当前有线程因为调用<code>acquire</code>方法被阻塞而被放入AQS的阻塞队列，则会根据公平策略选择一个信号量个数能被满足的线程进行激活，激活的线程会尝试获取刚增加的信号量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Semaphore</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// (1)arg=1</span></span><br><span class="line">    sync.releaseShared(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// AQS</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">releaseShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// (2) 尝试释放资源锁</span></span><br><span class="line">    <span class="keyword">if</span> (tryReleaseShared(arg)) &#123;</span><br><span class="line">        <span class="comment">// (3)资源释放成功则调用park方法唤醒AQS队列里面最先挂起的线程</span></span><br><span class="line">        doReleaseShared();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sync</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryReleaseShared</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">// (4)获取当前信号量值</span></span><br><span class="line">        <span class="keyword">int</span> current = getState();</span><br><span class="line">        <span class="comment">// (5)当前信号量值+1</span></span><br><span class="line">        <span class="keyword">int</span> next = current + releases;</span><br><span class="line">        <span class="keyword">if</span> (next &lt; current) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;Maximum permit count exceeded&quot;</span>);</span><br><span class="line">       <span class="comment">// (6)通过CAS更新信号量的值</span></span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(current, next))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（7）<code>void release(int permits)</code>方法</p>
<p>该方法与<code>release()</code>的不同之处在于，前者让信号量加<code>permits</code>，后者加<code>1</code>。</p>
<h3 id="8-3-3-小结"><a href="#8-3-3-小结" class="headerlink" title="8.3.3 小结"></a>8.3.3 小结</h3><p><code>Semaphore</code>完全可以达到<code>CountDownLatch</code>的效果，但是<code>Semaphore</code>的计数器是不可以自动重置的，不过通过变相的改变<code>acquire</code>方法的参数还是可以实现<code>CyclicBarrier</code>的功能的。</p>
<h2 id="8-4-顺序控制"><a href="#8-4-顺序控制" class="headerlink" title="8.4 顺序控制"></a>8.4 顺序控制</h2><p>有A，B，C三个线程，如何在并发情况下保证三个线程依次执行？如何保证三个线程有序交错进行？</p>
<p>依次执行：<code>volatile</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021-05-07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span> 依次执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;Successively&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuccessivelyDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;resource = 0, print A&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;resource = 1, print B&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;resource = 2, print C&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> resource = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> size = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span>[] arr = &#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> finalI = i;</span><br><span class="line">            executorService.submit(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (resource == finalI) &#123;</span><br><span class="line">                        <span class="comment">// 此处用&#123;@code System.out.println()&#125;，底层是synchronized，就没必要给resource加上volatile</span></span><br><span class="line">                        log.debug(<span class="string">&quot;&#123;&#125; =&gt; [&#123;&#125;]&quot;</span>, arr[finalI], System.nanoTime());</span><br><span class="line">                        resource = (resource + <span class="number">1</span>) % size;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">10</span>:<span class="number">23</span>:<span class="number">55.432</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">1</span>] DEBUG Successively - A =&gt; [<span class="number">87673300371400</span>]</span><br><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">10</span>:<span class="number">23</span>:<span class="number">55.432</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">2</span>] DEBUG Successively - B =&gt; [<span class="number">87673303841800</span>]</span><br><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">10</span>:<span class="number">23</span>:<span class="number">55.432</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">3</span>] DEBUG Successively - C =&gt; [<span class="number">87673303936700</span>]</span><br></pre></td></tr></table></figure>



<p>交错执行：<code>Semophore</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021-05-07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span> 交替执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;Alternately&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlternatelyDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 三个信号量分别控制A，B，C的打印</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Semaphore[] s = &#123; <span class="keyword">new</span> Semaphore(<span class="number">1</span>), <span class="keyword">new</span> Semaphore(<span class="number">1</span>), <span class="keyword">new</span> Semaphore(<span class="number">1</span>)&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> size = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span>[] arr = &#123;<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        s[<span class="number">1</span>].acquire();</span><br><span class="line">        s[<span class="number">2</span>].acquire();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> finalI = i;</span><br><span class="line">            executorService.submit(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        s[finalI].acquire();</span><br><span class="line">                        TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">                        log.debug(<span class="string">&quot;&#123;&#125; =&gt; [&#123;&#125;]&quot;</span>, arr[finalI], System.nanoTime());</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        s[(finalI + <span class="number">1</span>) % size].release();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">10</span>:<span class="number">24</span>:<span class="number">09.177</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">1</span>] DEBUG Alternately - A =&gt; [<span class="number">87687040947900</span>]</span><br><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">10</span>:<span class="number">24</span>:<span class="number">09.282</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">2</span>] DEBUG Alternately - B =&gt; [<span class="number">87687145895400</span>]</span><br><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">10</span>:<span class="number">24</span>:<span class="number">09.402</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">3</span>] DEBUG Alternately - C =&gt; [<span class="number">87687265876500</span>]</span><br><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">10</span>:<span class="number">24</span>:<span class="number">09.522</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">1</span>] DEBUG Alternately - A =&gt; [<span class="number">87687385861900</span>]</span><br><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">10</span>:<span class="number">24</span>:<span class="number">09.642</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">2</span>] DEBUG Alternately - B =&gt; [<span class="number">87687505684000</span>]</span><br><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">10</span>:<span class="number">24</span>:<span class="number">09.742</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">3</span>] DEBUG Alternately - C =&gt; [<span class="number">87687605949000</span>]</span><br><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">10</span>:<span class="number">24</span>:<span class="number">09.862</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">1</span>] DEBUG Alternately - A =&gt; [<span class="number">87687725648300</span>]</span><br><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">10</span>:<span class="number">24</span>:<span class="number">09.982</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">2</span>] DEBUG Alternately - B =&gt; [<span class="number">87687845915200</span>]</span><br><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">10</span>:<span class="number">24</span>:<span class="number">10.102</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">3</span>] DEBUG Alternately - C =&gt; [<span class="number">87687965867100</span>]</span><br><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">10</span>:<span class="number">24</span>:<span class="number">10.205</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">1</span>] DEBUG Alternately - A =&gt; [<span class="number">87688068762800</span>]</span><br><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">10</span>:<span class="number">24</span>:<span class="number">10.313</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">2</span>] DEBUG Alternately - B =&gt; [<span class="number">87688176761000</span>]</span><br><span class="line"><span class="number">2021</span><span class="literal">-05</span><span class="literal">-08</span> <span class="number">10</span>:<span class="number">24</span>:<span class="number">10.422</span> [<span class="type">pool</span>-<span class="number">1</span>-<span class="type">thread</span>-<span class="number">3</span>] DEBUG Alternately - C =&gt; [<span class="number">87688285678600</span>]</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JUC</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JUC-7(并发工具之锁原理)</title>
    <url>/posts/61205/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>全程高能，源码解读，拜读Doug Lea前辈的并发理念和玄妙设计。</p>
<p>分析并不完全透彻，只能大概梳理出大致流程，有时间再深入吧。</p>
<p>（我只是Javadoc的搬运工罢了。）</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/61205/image-20210502211334391.png" class="" title="image-20210502211334391">



<h2 id="7-1-AbstractQueuedSynchronizer"><a href="#7-1-AbstractQueuedSynchronizer" class="headerlink" title="7.1 AbstractQueuedSynchronizer"></a>7.1 AbstractQueuedSynchronizer</h2><h3 id="7-1-1-AQS概述"><a href="#7-1-1-AQS概述" class="headerlink" title="7.1.1 AQS概述"></a>7.1.1 AQS概述</h3><p><code>AbstractQueuedSynchronizer</code>(抽象同步队列)，是阻塞式锁和相关的同步器工具的框架。</p>
<ul>
<li>使用<code>state</code>属性来表示资源的状态（分独占模式和共享模式），子类需要定义如何维护这个状态，控制如何获取锁和释放锁。<ul>
<li><code>getState</code>：获取state状态</li>
<li><code>setState</code>：设置state状态</li>
<li><code>compareAndSetState</code>：乐观锁机制设置state状态</li>
<li>独占模式是只有一个线程能够访问资源，而共享模式可以允许多个线程访问资源</li>
</ul>
</li>
<li>提供了基于FIFO的等待队列，在其内部通过节点<code>head</code>和<code>tail</code>记录对手和队尾元素，队列的元素类型为<code>Node</code>。<ul>
<li><code>SHARED</code>：用来标记该线程是是否是获取共享资源时被阻塞挂起后放入AQS队列的</li>
<li><code>EXCLUSIVE</code>：用来标记线程是获取独占资源时被挂起后放入AQS队列的</li>
<li><code>waitStatus</code>：记录当前线程等待状态<ul>
<li>1：CANCELLED，线程结点已释放（超时、中断），已取消的节点不会再阻塞</li>
<li>-1：SIGNAL，该线程的后续线程需要阻塞，即只要前驱结点释放锁，就会通知标识为SIGNAL状态的后继结点的线程</li>
<li>-2：CONDITION，该线程在condition队列中阻塞</li>
<li>-3：PROPAGATE，释放共享资源时需要通知其他节点</li>
</ul>
</li>
<li><code>prev</code>记录当前节点的前驱结点，<code>next</code>记录当前阶段的后继结点</li>
</ul>
</li>
<li>内部类<code>ConditionObject</code>，用来结合锁实现线程同步，是条件变量，每个条件变量对应一个条件队列（单向链表队列），用来存放调用条件变量的<code>await</code>方法后被阻塞的线程，队列的头、尾元素分别是<code>firstWaiter</code>和<code>lastWaiter</code>。</li>
</ul>
<h3 id="7-1-2-获取与释放资源"><a href="#7-1-2-获取与释放资源" class="headerlink" title="7.1.2 获取与释放资源"></a>7.1.2 获取与释放资源</h3><p>对于AQS来说，线程同步的关键是对状态值<code>state</code>进行操作。根据<code>state</code>是否属于一个线程，操作<code>state</code>的方式分为独占方式和共享方式。</p>
<ul>
<li>独占方式：<code>void acquire(int arg)</code>  <code>void acquireInterruptibly(int arg)</code> <code>boolean release(int arg)</code></li>
<li>共享方式：<code>void acquireShared(int arg)</code>  <code>void acquireSharedInterruptibly(int arg)</code> <code>boolean releaseShared(int arg)</code></li>
</ul>
<p>使用独占方式获取的资源是与具体线程绑定的，就是说如果一个线程获取到了资源，就会标记到是这个线程获取到了，其他线程再尝试操作<code>state</code>获取资源时会发现当前该资源不是自己持有的，就会在获取失败后被阻塞。比如独占锁<code>ReentrantLock</code>的实现，当一个线程获取了<code>ReentrantLock</code>的锁后，在AQS内部会首先使用CAS操作把<code>state</code>状态值从0变为1，然后设置当前锁的持有者<code>exclusiveOwnerThread</code>为当前线程，当该线程再次获取锁时发现它就是锁的持有者，则会把状态值<code>state</code>从1变为2，即设置可重入次数，而当另外一个线程获取锁时发现自己并不是该锁的持有者就会被放入AQS阻塞队列后挂起。</p>
<p>对应共享方式的资源与具体线程是不相关的，当多个线程去请求资源时通过CAS方式竞争获取资源，当一个线程获取到了资源后，另外一个线程再次去获取时如果当前资源还能满足它的需要，则当前线程只需要使用CAS方式进行获取即可。比如<code>Semaphore</code>信号量，当一个线程通过<code>acquire()</code>方法获取信号量时，会首先看当前信号量个数是否满足需要，不满足则把当前线程放入阻塞队列，如果满足则通过自旋CAS获取信号量。</p>
<h4 id="7-1-2-1-独占方式"><a href="#7-1-2-1-独占方式" class="headerlink" title="7.1.2.1 独占方式"></a>7.1.2.1 独占方式</h4><p>（1）当一个线程调用<code>acquire(int arg)</code>方法获取独占资源时，会首先使用<code>tryAcquire</code>方法尝试获取资源，具体是设置状态变量<code>state</code>的值，成功则直接返回，失败则将当前线程封装为类型为<code>Node.EXCLUSIVE</code>的<code>Node</code>节点后插入到AQS阻塞队列的尾部，并调用<code>LockSupport.park(this)</code>方法挂起自己。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）当一个线程调用<code>release(int arg)</code>方法时会尝试使用<code>tryRelease</code>操作释放资源，这里是设置状态变量<code>state</code>的值，然后调用<code>LockSupport.unpark(thread)</code>方法激活AQS队列里面被阻塞的一个线程（thread）。被激活的线程则使用<code>tryAcquire</code>尝试，看当前状态变量<code>state</code>的值是否能满足自己的需要，满足则该线程被激活，然后继续向下运行，否则还是会被放入AQS队列并被挂起。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tryRelease(arg)) &#123;</span><br><span class="line">        Node h = head;</span><br><span class="line">        <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">            unparkSuccessor(h);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要注意的是，AQS类并没有提供可用的<code>tryAcquire</code>和<code>tryRelease</code>方法，正如AQS是锁阻塞和同步器的基础框架一样，<code>tryAcquire</code>和<code>tryRelease</code>需要由具体的子类来实现。子类在实现<code>tryAcquire</code>和<code>tryRelease</code>时要根据具体场景使用CAS算法尝试修改<code>state</code>状态值，成功则返回<code>true</code>，否则返回<code>false</code>。子类还需要定义，在调用<code>acquire</code>和<code>release</code>方法时<code>state</code>状态值的增减代表什么含义。</p>
<h4 id="7-1-2-2-共享方式"><a href="#7-1-2-2-共享方式" class="headerlink" title="7.1.2.2 共享方式"></a>7.1.2.2 共享方式</h4><p>（1）当线程调用<code>acquireShared(int arg)</code>获取共享资源时，会首先使用<code>tryAcquireShared</code>尝试获取资源，具体是设置状态<code>state</code>的值，成功则直接返回，失败则将当前线程封装为类型为<code>Node.SHARED</code>的<code>Node</code>节点后插入到AQS阻塞队列的尾部，并使用<code>LockSupport.park(this)</code>方法挂起自己。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquireShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tryAcquireShared(arg) &lt; <span class="number">0</span>)</span><br><span class="line">        doAcquireShared(arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）当一个线程调用<code>releaseShared(int arg)</code>时会尝试使用<code>tryReleaseShared</code>操作释放资源，这里是设置状态变量<code>state</code>的值，然后使用<code>LockSupport.unpark(thread)</code>激活AQS队列里面被阻塞的一个线程（thread）。被激活的线程则使用<code>tryReleaseShared</code>查看当前状态变量<code>state</code>的值是否能满足自己的需要，满足则该线程被激活，然后继续向下运行，否则还是会被放入AQS队列并被挂起。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">releaseShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tryReleaseShared(arg)) &#123;</span><br><span class="line">        doReleaseShared();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样需要注意的是，AQS类并没有提供可用的<code>tryAcquireShared</code>和<code>tryReleaseShared</code>方法，正如AQS是锁阻塞和同步器的基础框架一样，<code>tryAcquire</code>和<code>tryRelease</code>需要由具体的子类来实现。子类在实现<code>tryAcquireShared</code>和<code>tryReleaseShared</code>时要根据具体场景使用CAS算法尝试修改state状态值，成功则返回true，否则返回false。</p>
<h4 id="7-1-2-3-入队操作"><a href="#7-1-2-3-入队操作" class="headerlink" title="7.1.2.3 入队操作"></a>7.1.2.3 入队操作</h4><p>当一个线程获取锁失败后该线程会被转换为<code>Node</code>节点，然后就会使用<code>enq(final Node node)</code>方法将该节点插入到AQS的阻塞队列。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        Node t = tail;                          <span class="comment">// (1)</span></span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123; <span class="comment">// 初始化</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> Node()))  <span class="comment">// (2)</span></span><br><span class="line">                tail = head;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.prev = t;                      <span class="comment">// (3)</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;   <span class="comment">// (4)</span></span><br><span class="line">                t.next = node;</span><br><span class="line">                <span class="keyword">return</span> t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/61205/image-20210503145933217.png" class="" title="image-20210503145933217">

<p>在第一次循环中，在队列尾部插入元素时，队列状态如图（default）所示，队列头尾节点都指向null；</p>
<p>执行代码（1）后节点t指向了尾部节点，此时队列状态如图（I）所示；</p>
<p>执行代码（2），使用CAS设置一个哨兵节点为头结点，如果设置成功，则让尾部节点也指向哨兵节点，此时队列状态如图（II）所示。</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/61205/image-20210503151528555.png" class="" title="image-20210503151528555">

<p>第一次循环之后只插入了一个哨兵节点，还需要插入node节点。</p>
<p>在第二次循环中，执行代码（1）后节点t指向了哨兵节点，此时队列状态如图（III）所示；</p>
<p>执行代码（3），设置node的前驱结点为哨兵节点，此时队列状态如图（IV）所示；</p>
<p>执行代码（4），通过CAS设置node节点为尾部节点，如果设置成功，则队列状态如图（V）所示；</p>
<p>然后设置哨兵节点的后继结点为node结点，此时队列状态如图（VI）所示。</p>
<h4 id="7-1-2-4-补充"><a href="#7-1-2-4-补充" class="headerlink" title="7.1.2.4 补充"></a>7.1.2.4 补充</h4><p>基于AQS实现的锁除了需要重写上面方法以外，还需要重写<code>isHeldExclusively</code>方法，来判断是被当前线程独占还是被共享。</p>
<p>此外，与<code>acquire</code>和<code>release</code>对应的都有一个带有<code>Interruptibly</code>关键字的函数。</p>
<p>区别如下：</p>
<p>不带<code>interruptibly</code>关键字的方法的意思是不对中断进行响应，也就是线程在调用不带<code>interruptibly</code>关键字的方法获取资源时或者获取资源失败被挂起时，其他线程中断了该线程，那么该线程不会因为被中断而抛出异常，它还是继续获取资源或者被挂起，也就是说不对中断进行响应，忽略中断。</p>
<p>而带<code>interruptibly</code>关键字的方法要对中断进行响应，也就是线程在调用带<code>interruptibly</code>关键字的方法获取资源时或者获取资源失败而被挂起时，其他线程中断了该线程，那么该线程会抛出<code>InterruptedException</code>异常而返回。</p>
<h2 id="7-2-ReentrantLock"><a href="#7-2-ReentrantLock" class="headerlink" title="7.2 ReentrantLock"></a>7.2 ReentrantLock</h2><h3 id="7-2-1-概述与应用"><a href="#7-2-1-概述与应用" class="headerlink" title="7.2.1 概述与应用"></a>7.2.1 概述与应用</h3><p><code>ReentrantLock</code>是可重入的独占锁，同时只能有一个线程可以获取该锁，其他获取该锁的线程会被阻塞而被放入该锁的AQS阻塞队列中。</p>
<p>示例1：基于AQS实现的不可重入的独占锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.AbstractQueuedSynchronizer;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021-05-02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span> 不可冲入独占锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParaKLock</span> <span class="keyword">implements</span> <span class="title">Lock</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7379874578553124018L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 独占锁同步器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ParaKSync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6278547169976524823L</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span> <span class="comment">// 是否锁已经被持有</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHeldExclusively</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getState() == <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span> <span class="comment">// 如果state为0，则尝试获取锁</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (Thread.currentThread() == <span class="keyword">this</span>.getExclusiveOwnerThread())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException(<span class="string">&quot;不支持锁重入&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="comment">// 设置独占者线程</span></span><br><span class="line">                setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span> <span class="comment">// 尝释放锁，设置state = 0</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">assert</span> arg == <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (getState() == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException(<span class="string">&quot;当前state不为0&quot;</span>);</span><br><span class="line">            setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">            setState(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 提供条件变量接口</span></span><br><span class="line">        <span class="function">Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConditionObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ParaKSync sync = <span class="keyword">new</span> ParaKSync();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 一直尝试，失败进入AQS队列</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.acquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 尝试一次</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 超时尝试</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquireNanos(<span class="number">1</span>, unit.toNanos(time));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 解锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.release(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否被占有</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.isHeldExclusively();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// 可被打断式加锁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        sync.acquireInterruptibly(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.newCondition();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例2：基于上面自定义独占锁实现生产-消费模型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingDeque;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021-05-03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span> 生产-消费模型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;ProducerConsumerModel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerConsumerModel</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 不可重入独占锁 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ParaKLock LOCK = <span class="keyword">new</span> ParaKLock();</span><br><span class="line">    <span class="comment">/** 已满：生产者条件变量 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Condition FULL = LOCK.newCondition();</span><br><span class="line">    <span class="comment">/** 已空：消费者者条件变量 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Condition EMPTY = LOCK.newCondition();</span><br><span class="line">    <span class="comment">/** 产品队列 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Queue&lt;Character&gt; QUEUE = <span class="keyword">new</span> LinkedBlockingDeque&lt;&gt;();</span><br><span class="line">    <span class="comment">/** 最大容量 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> QUEUE_MAX_SIZE = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">/** 随机变量 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Random RANDOM = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成随机数字/字母字符</span></span><br><span class="line"><span class="comment">     * ascii  char</span></span><br><span class="line"><span class="comment">     * 48-57  0~9</span></span><br><span class="line"><span class="comment">     * 65-90  A~Z</span></span><br><span class="line"><span class="comment">     * 97-122 a~z</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ascii码字符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Character <span class="title">randomChar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> choice = RANDOM.nextInt(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">if</span> (choice == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">char</span>) (RANDOM.nextInt(<span class="number">10</span>) + <span class="number">48</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">char</span>) (RANDOM.nextInt(<span class="number">26</span>) + <span class="number">65</span>);</span><br><span class="line">         <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">char</span>) (RANDOM.nextInt(<span class="number">26</span>) + <span class="number">97</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生产者线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.setName(<span class="string">&quot;Producer&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 获取独占锁</span></span><br><span class="line">                LOCK.lock();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// (1) 如果队列已满，等待</span></span><br><span class="line">                    <span class="keyword">while</span> (QUEUE.size() == QUEUE_MAX_SIZE) &#123;</span><br><span class="line">                        FULL.await();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// (2) 生产一个元素到队列</span></span><br><span class="line">                    Character character = randomChar();</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                    log.debug(<span class="string">&quot;生产 =&gt; [&#123;&#125;]&quot;</span>, character);</span><br><span class="line">                    QUEUE.add(character);</span><br><span class="line">                    <span class="comment">// (3) 唤醒消费者线程</span></span><br><span class="line">                    EMPTY.signalAll();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 释放独占锁</span></span><br><span class="line">                    LOCK.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消费者线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.setName(<span class="string">&quot;Consumer&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 获取独占锁</span></span><br><span class="line">                LOCK.lock();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// (1) 如果队列为空，等待</span></span><br><span class="line">                    <span class="keyword">while</span> (QUEUE.isEmpty()) &#123;</span><br><span class="line">                        EMPTY.await();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// (2) 消费一个元素</span></span><br><span class="line">                    Character character = QUEUE.poll();</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                    log.debug(<span class="string">&quot;消费 =&gt; [&#123;&#125;]&quot;</span>, character);</span><br><span class="line">                    <span class="comment">// (3) 唤醒生产者线程</span></span><br><span class="line">                    FULL.signalAll();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    LOCK.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Producer producer = <span class="keyword">new</span> Producer();</span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> Consumer();</span><br><span class="line">        producer.start();</span><br><span class="line">        consumer.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="7-2-2-非公平锁实现原理"><a href="#7-2-2-非公平锁实现原理" class="headerlink" title="7.2.2 非公平锁实现原理"></a>7.2.2 非公平锁实现原理</h3><p>先结合<code>ReentrantLock</code>的内部类<code>Sync</code> 、<code>NonfailSync</code>和<code>AbstractQueuedSynchronizer</code>中的方法进行分析。</p>
<p><code>Sync</code>中有一个抽象方法<code>lock</code>，公平锁与非公平锁分别有不同的实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>非公平锁<code>NonfairSync</code>的实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// (一)</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">        <span class="comment">// 成功则设置独占线程为当前线程</span></span><br><span class="line">        setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        acquire(<span class="number">1</span>); <span class="comment">// 这个方法在AQS中已经实现好了</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (三)</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nonfairTryAcquire(acquires); <span class="comment">// 这个方法在Sync中已经实现好了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Sync</code>中的<code>nonfairTryAcquire</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// (四)</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">nonfairTryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前进入方法的线程</span></span><br><span class="line">    <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">    <span class="comment">// 获取state状态值</span></span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="comment">// 如果还未获得锁</span></span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 不去AQS队列检查，直接尝试用CAS获得锁，体现了不公平性</span></span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果已经获得了锁并且当前线程是独占线程，表示发生了锁重入</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">        <span class="comment">// state++</span></span><br><span class="line">        <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">        <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">        setState(nextc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取失败，回到调用处</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>AbstractQueuedSynchronizer</code>中涉及到的主要方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// (二) </span></span><br><span class="line"><span class="comment">// 以独占模式获取，忽略中断。通过至少调用一次tryAcquire返回成功。</span></span><br><span class="line"><span class="comment">// 否则线程会排队，可能会反复阻塞和解除阻塞，调用tryAcquire直到成功。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp; </span><br><span class="line">        <span class="comment">// 在NonfairSync已经实现，直接调用上述Sync的nonfairTryAcquire方法，成功则不会进入</span></span><br><span class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg)) </span><br><span class="line">        <span class="comment">// Java编译器会优化，&amp;&amp;前面已经为false，后面的条件不再进行判断</span></span><br><span class="line">        <span class="comment">// 走到这一步说明，获取锁失败，然后执行addWaiter方法，节点设置为独占模式</span></span><br><span class="line">        <span class="comment">// 节点添加完毕后，执行acquireQueued方法，这个方法才是最终的BOSS</span></span><br><span class="line">        <span class="comment">// 这个方法一直循环到返回结果为true，进入if块内的代码执行</span></span><br><span class="line">        selfInterrupt(); <span class="comment">// </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (五)</span></span><br><span class="line"><span class="comment">// 添加等待节点至队列末尾</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建新节点node，模式为EXCLUSIVE(独占)</span></span><br><span class="line">    Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);</span><br><span class="line">    <span class="comment">// 获取尾部节点</span></span><br><span class="line">    Node pred = tail;</span><br><span class="line">    <span class="comment">// 尾部节点非空</span></span><br><span class="line">    <span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 先将node的前驱节点设置为当前尾部节点</span></span><br><span class="line">        node.prev = pred;</span><br><span class="line">        <span class="comment">// 通过CAS操作将node节点设置为tail尾部节点</span></span><br><span class="line">        <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">            <span class="comment">// 如果CAS成功，则将原tail节点的后继结点设置为当前尾部节点node</span></span><br><span class="line">            pred.next = node;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 尾部节点为空，说明没有哨兵节点</span></span><br><span class="line">    <span class="comment">// 这个方法在7.1.2.3已经详述过</span></span><br><span class="line">    <span class="comment">// 需要创建新的哨兵节点，然后插入当前节点</span></span><br><span class="line">    enq(node); </span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (六)</span></span><br><span class="line"><span class="comment">// 在队列中循环尝试获取锁</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">// 获取当前结点的前驱节点</span></span><br><span class="line">            <span class="keyword">final</span> Node p = node.predecessor();</span><br><span class="line">            <span class="comment">// 如果前驱节点为head哨兵节点，说明当前节点为第二节点</span></span><br><span class="line">            <span class="comment">// 拥有尝试获取锁的资格</span></span><br><span class="line">            <span class="comment">// 获取锁成功则进入方法，剔除当前节点</span></span><br><span class="line">            <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">                <span class="comment">// 将当前结点设置为头结点，属性thread和prev都设置为null</span></span><br><span class="line">                <span class="comment">// 直接使用setHead而非compareAndSetHead，没有使用CAS</span></span><br><span class="line">                <span class="comment">// 是因为此时已经成功获取到独占锁</span></span><br><span class="line">                setHead(node);</span><br><span class="line">       			<span class="comment">// 辅助GC</span></span><br><span class="line">                p.next = <span class="keyword">null</span>; </span><br><span class="line">                failed = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">return</span> interrupted;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 执行到这里，只有两种情况</span></span><br><span class="line">            <span class="comment">// (1)不符合获取锁的前提，即当前节点不是第二节点</span></span><br><span class="line">            <span class="comment">// (2)tryAcquire失败，即没有抢占到锁</span></span><br><span class="line">            <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                parkAndCheckInterrupt())</span><br><span class="line">                interrupted = <span class="keyword">true</span>; <span class="comment">// 设置后永久保留</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (failed)</span><br><span class="line">            cancelAcquire(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (七)</span></span><br><span class="line"><span class="comment">// 获取失败后应该挂起：寻找node的有效前驱，并且将有效前驱状态设置为SIGNAL，返回true代表马上可以阻塞</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">shouldParkAfterFailedAcquire</span><span class="params">(Node pred, Node node)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 前驱节点的等待状态</span></span><br><span class="line">    <span class="keyword">int</span> ws = pred.waitStatus;</span><br><span class="line">    <span class="comment">// 前驱节点的状态为SIGNAL，相当于闹钟定好了，自己可以阻塞（安心睡觉）了。</span></span><br><span class="line">    <span class="comment">// 如果前驱节点变成了head，并且head的代表线程释放了锁，就会根据这个SIGNAL唤醒自己。</span></span><br><span class="line">    <span class="keyword">if</span> (ws == Node.SIGNAL)</span><br><span class="line">        <span class="comment">// 返回true，则进入parakAndCheckInterrupt挂起当前线程</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">// 前驱节点的状态&gt;0，即为CANCELLED，说明前驱节点因为超时或者响应了中断而取消。</span></span><br><span class="line">    <span class="comment">// 因此需要跨越这些CANCELLED结点，直到找到一个状态&lt;0的节点。</span></span><br><span class="line">    <span class="keyword">if</span> (ws &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            node.prev = pred = pred.prev;</span><br><span class="line">        &#125; <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>);</span><br><span class="line">        pred.next = node;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 前驱节点的状态为0或者PROPAGATE</span></span><br><span class="line">    <span class="comment">// 通过CAS将其状态设置为SIGNAL</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回false则不进入parakAndChecKInterrupt继续在acquireQueeud中循环</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (八)</span></span><br><span class="line"><span class="comment">// 挂起并检查中断状态</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">parkAndCheckInterrupt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 挂起当前线程</span></span><br><span class="line">    LockSupport.park(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// 检查中断状态</span></span><br><span class="line">    <span class="comment">// 但是会消耗中断状态，第一次为true，第二次就位false</span></span><br><span class="line">    <span class="comment">// 其他线程interrupt当前线程返回true</span></span><br><span class="line">    <span class="comment">// 其他线程unpark当前线程返回false</span></span><br><span class="line">    <span class="keyword">return</span> Thread.interrupted();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (九)</span></span><br><span class="line"><span class="comment">// 让当前线程产生一次中断</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selfInterrupt</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    Thread.currentThread().interrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面开始图示详解：</p>
<p>没有竞争时</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/61205/image-20210502211712585.png" class="" title="image-20210502211712585">

<p>第一个竞争出现时</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/61205/image-20210502211848516.png" class="" title="image-20210502211848516">

<p>Thread-1执行了</p>
<ol>
<li><code>CASC</code>尝试将<code>state</code>由<code>0</code>改为<code>1</code>，结果失败</li>
<li>进入<code>tryAcquire</code>逻辑，这时<code>state</code>已经是<code>1</code>，结果仍然失败</li>
<li>接下来进入<code>addWaiter</code>逻辑，构造<code>Node</code>队列<ul>
<li>图中黄色三角表示该<code>Node</code>的<code>waitStatus</code>状态，其中0为默认正常状态</li>
<li>Node的创建是懒惰的</li>
<li>其中第一个<code>Node</code>称为<code>Dummy</code>（哑元）或哨兵，用来占位，并不关联线程</li>
</ul>
</li>
</ol>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/61205/image-20210502213906982.png" class="" title="image-20210502213906982">

<p>进入<code>acquireQueued</code>逻辑</p>
<ol>
<li><code>acquireQueued</code>会在一个死循环中不断尝试获得锁，失败后进入<code>park</code>阻塞</li>
<li>如果自己是紧邻着<code>head</code>（排第二位），那么再次<code>tryAcquire</code>尝试获取锁，当然这时<code>state</code>仍为<code>1</code>，失败</li>
<li>进入<code>shouldParkAfterFailedAcquire</code>逻辑，将前驱<code>node</code>，即<code>head</code>的<code>waitStatus</code>改为<code>-1</code>，这次返回<code>false</code></li>
</ol>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/61205/image-20210502220340804.png" class="" title="image-20210502220340804">

<ol start="4">
<li><p><code>shouldParkAfterFailedAcquire</code>执行完毕回到<code>acquireQueued</code>，再次<code>tryAcquire</code>尝试获取锁，当然这时<code>state</code>仍然为1，失败</p>
</li>
<li><p>当再次进入<code>shouldParkAfterFailedAcquire</code>时，这时因为其前驱<code>node</code>的<code>waitStatus</code>已经是<code>-1</code>，这次返回<code>true</code></p>
</li>
<li><p>进入<code>parkAndCheckInterrupt</code>，Thread-1 park（灰色表示）</p>
</li>
</ol>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/61205/image-20210502220921530.png" class="" title="image-20210502220921530">

<p>再次有多个线程经历上述过程竞争失败，变成这个样子</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/61205/image-20210502221051585.png" class="" title="image-20210502221051585">

<p>Thread-0释放锁</p>
<ul>
<li>设置<code>exclusiveOwnerThread</code>为<code>null</code></li>
<li><code>state</code> = 0</li>
</ul>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/61205/image-20210502221412738.png" class="" title="image-20210502221412738">

<p>当前队列不为<code>null</code>，并且<code>head</code>的<code>waitStatus</code>，进入<code>unparkSuccessor</code>流程</p>
<p>找到队列中离<code>head</code>最近的一个<code>node</code>（没取消的），<code>unpark</code>恢复其运行，本例中即为Thread-1。</p>
<p>回到Thread-1的<code>acquireQueued</code>流程</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/61205/image-20210502222848420.png" class="" title="image-20210502222848420">

<p>如果加锁成功（没有竞争），会设置</p>
<ul>
<li><code>exclusiveOwnerThread</code>为Thread-1，<code>state</code> = 1</li>
<li><code>head</code>指向刚刚Thread-1所在的<code>Node</code>，该<code>node</code>清空Thread</li>
<li>原本的<code>head</code>因为从链表断开，而可被垃圾回收</li>
</ul>
<p>如果这时候有其他线程来竞争（非公平的体现），例如这时有Thrtead-4来了</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/61205/image-20210502224147622.png" class="" title="image-20210502224147622">

<p>如果不巧又被Thread-4占了先</p>
<ul>
<li>Thread-4被设置为<code>exclusiveOwnerThread</code>，<code>state</code> = 1</li>
<li>Thread-1再次进入<code>acquireQueued</code>流程，获取锁失败，重新进入<code>park</code>阻塞</li>
</ul>
<h3 id="7-2-3-公平锁实现原理"><a href="#7-2-3-公平锁实现原理" class="headerlink" title="7.2.3 公平锁实现原理"></a>7.2.3 公平锁实现原理</h3><p><code>ReentrantLock-Fair</code>的<code>Sync</code>覆盖方法<code>tryAcquire</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 先检查AQS队列中是否有前驱节点，没有才去竞争</span></span><br><span class="line">        <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class="line">            compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">        <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">        <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">        setState(nextc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>AbstractQueuedSynchronizer</code>中涉及到的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询是否有线程等待获取的时间超过当前线程，即查询等待队列中的线程</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasQueuedPredecessors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Node t = tail; <span class="comment">// 尾节点要么为空，要么为等待</span></span><br><span class="line">    Node h = head; <span class="comment">// 头节点要么为空，要么为哨兵节点</span></span><br><span class="line">    Node s;</span><br><span class="line">    <span class="keyword">return</span> h != t &amp;&amp; <span class="comment">// 头尾节点不同说明队列中有其他节点</span></span><br><span class="line">        ((s = h.next) == <span class="keyword">null</span> || <span class="comment">//表示队列中没有第二节点</span></span><br><span class="line">         s.thread != Thread.currentThread()); <span class="comment">// 或者队列中第二线程不是此线程</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="7-2-4-可重入原理"><a href="#7-2-4-可重入原理" class="headerlink" title="7.2.4 可重入原理"></a>7.2.4 可重入原理</h3><p><code>ReentrantLock</code>的内部类<code>Sync</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取锁</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">nonfairTryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取当前线程</span></span><br><span class="line">    <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">    <span class="comment">// 获取state状态值</span></span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="comment">// 如果未获得锁</span></span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// CAS成功后设置独占线程为当前线程即可</span></span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果已经获得锁，当前线程是独占线程，表示发生了锁重入</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">        <span class="comment">// state在当前基础上加acquires</span></span><br><span class="line">        <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">        <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">        setState(nextc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果已经获得锁，当前线程非独占线程，因为是独占锁，其他线程只能阻塞</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放锁</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = getState() - releases;</span><br><span class="line">    <span class="comment">// 当前线程非独占线程则抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">    <span class="keyword">boolean</span> free = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 当state减为0时锁才释放成功</span></span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        free = <span class="keyword">true</span>;</span><br><span class="line">        setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    setState(c);</span><br><span class="line">    <span class="keyword">return</span> free;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="7-2-5-可打断原理"><a href="#7-2-5-可打断原理" class="headerlink" title="7.2.5 可打断原理"></a>7.2.5 可打断原理</h3><p>不可打断模式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 线程无法获得锁时，进入这个方法</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">final</span> Node p = node.predecessor();</span><br><span class="line">            <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">                setHead(node);</span><br><span class="line">                p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                failed = <span class="keyword">false</span>;</span><br><span class="line">                <span class="comment">// 还是需要获得锁后，才能返回打断状态</span></span><br><span class="line">                <span class="keyword">return</span> interrupted;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                parkAndCheckInterrupt())</span><br><span class="line">                <span class="comment">// 如果是因为interrupt被唤醒，返回打断状态为true</span></span><br><span class="line">                interrupted = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (failed)</span><br><span class="line">            cancelAcquire(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">parkAndCheckInterrupt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果打断标记已经是true，则park会失效</span></span><br><span class="line">    LockSupport.park(<span class="keyword">this</span>);</span><br><span class="line">    <span class="comment">// interrupted会清除打断标记</span></span><br><span class="line">    <span class="keyword">return</span> Thread.interrupted();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新产生一次中断</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selfInterrupt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Thread.currentThread().interrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可打断模式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquireInterruptibly</span><span class="params">(<span class="keyword">int</span> arg)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Thread.interrupted())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">    <span class="comment">// 如果没有获得到锁，进入</span></span><br><span class="line">    <span class="keyword">if</span> (!tryAcquire(arg))</span><br><span class="line">        doAcquireInterruptibly(arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可打断锁的获取流程</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doAcquireInterruptibly</span><span class="params">(<span class="keyword">int</span> arg)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node node = addWaiter(Node.EXCLUSIVE);</span><br><span class="line">    <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">final</span> Node p = node.predecessor();</span><br><span class="line">            <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">                setHead(node);</span><br><span class="line">                p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                failed = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                parkAndCheckInterrupt())</span><br><span class="line">                <span class="comment">// 在park过程中如果被interrupt会进入此</span></span><br><span class="line">                <span class="comment">// 这时候抛出异常，而不会再次进入for循环</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (failed)</span><br><span class="line">            cancelAcquire(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="7-2-6-条件变量实现原理"><a href="#7-2-6-条件变量实现原理" class="headerlink" title="7.2.6 条件变量实现原理"></a>7.2.6 条件变量实现原理</h3><p>每个条件变量其实就对应着一个等待队列，其实现类是<code>ConditionObject</code>。</p>
<p>内部属性：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 成员变量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Node firstWaiter; <span class="comment">// 首节点</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Node lastWaiter;  <span class="comment">// 尾节点</span></span><br><span class="line"><span class="comment">// 常量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REINTERRUPT =  <span class="number">1</span>; <span class="comment">// 从等待状态切换为中断状态</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THROW_IE    = -<span class="number">1</span>; <span class="comment">// 抛出异常标识</span></span><br></pre></td></tr></table></figure>



<p><strong>await流程</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向队列中添加节点并返回</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addConditionWaiter</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 释放节点持有的锁</span></span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">fullyRelease</span><span class="params">(Node node)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 判断节点是否在同步队列中</span></span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isOnSyncQueue</span><span class="params">(Node node)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 检查线程是否中断，如果是则终止Condition状态并加入到同步队列</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">checkInterruptWhileWaiting</span><span class="params">(Node node)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 操作节点去申请锁</span></span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 清理等待队列中无效节点</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unlinkCancelledWaiters</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 处理线程中断情况</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reportInterruptAfterWait</span><span class="params">(<span class="keyword">int</span> interruptMode)</span></span></span><br></pre></td></tr></table></figure>

<p>开始Thread-0持有锁，调用<code>await</code>，进入<code>ConditionObject</code>的<code>addConditionWaiter</code>流程。</p>
<p>创建新的<code>Node</code>状态为-2（<code>Node.CONDITION</code>），关联Thread-0，加入等待队列尾部。</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/61205/image-20210504184051341.png" class="" title="image-20210504184051341">

<p>接下来进入AQS的<code>fullRelease</code>流程，释放同步器上的锁</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/61205/image-20210505112113307.png" class="" title="image-20210505112113307">

<p>unpark AQS队列中的下一个节点，竞争锁，假设没有其他竞争线程，那么Thread-1竞争成功</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/61205/image-20210505112236553.png" class="" title="image-20210505112236553">

<p>park阻塞Thread-0</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/61205/image-20210505112338808.png" class="" title="image-20210505112338808">



<p><strong>signal流程</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 唤醒线程入口</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">signal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 判定当前线程是否持有锁</span></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHeldExclusively</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 唤醒first节点</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doSignal</span><span class="params">(Node first)</span> </span></span><br><span class="line"><span class="function"><span class="comment">// 转换节点状态</span></span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">transferForSignal</span><span class="params">(Node node)</span> </span></span><br></pre></td></tr></table></figure>

<p>假设Thread-1要来唤醒Thread-0</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/61205/image-20210505115153129.png" class="" title="image-20210505115153129">

<p>进入<code>ConditionObject</code>的<code>doSignal</code>流程，取得等待队列中第一个<code>Node</code>，Thread-0所在<code>Node</code></p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/61205/image-20210505120611070.png" class="" title="image-20210505120611070">

<p>执行<code>transferForSignal</code>流程，将该<code>Node</code>加入到AQS队列尾部，将Thread-0的<code>waitStatus</code>改为0，Thread-3的<code>waitStatus</code>改为-1</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/61205/image-20210505121200958.png" class="" title="image-20210505121200958">

<p>Thread-1释放锁，进入<code>unlock</code>流程。</p>
<h2 id="7-3-ReentrantReadWriteLock"><a href="#7-3-ReentrantReadWriteLock" class="headerlink" title="7. 3 ReentrantReadWriteLock"></a>7. 3 ReentrantReadWriteLock</h2><h3 id="7-3-1-概述与应用"><a href="#7-3-1-概述与应用" class="headerlink" title="7.3.1 概述与应用"></a>7.3.1 概述与应用</h3><p>当读操作远远高于写操作时，这时候使用读写锁让读-读可以并发，提高性能。</p>
<ul>
<li>读锁不支持条件变量</li>
<li>重入时升级不支持：持有读锁的情况下去获取写锁，会导致写锁永久等待</li>
<li>重入时降级支持：持有写锁的情况下去获取读锁</li>
</ul>
<p>示例1：数据容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021-05-05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;DataContainer&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataContainer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Random RANDOM = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantReadWriteLock lock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantReadWriteLock.ReadLock readLock = lock.readLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantReadWriteLock.WriteLock writeLock = lock.writeLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Character <span class="title">randomChar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> choice = RANDOM.nextInt(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">if</span> (choice == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">char</span>) (RANDOM.nextInt(<span class="number">10</span>) + <span class="number">48</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">char</span>) (RANDOM.nextInt(<span class="number">26</span>) + <span class="number">65</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">char</span>) (RANDOM.nextInt(<span class="number">26</span>) + <span class="number">97</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;获取读锁...&quot;</span>);</span><br><span class="line">        readLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;读取数据 =&gt; [&#123;&#125;]&quot;</span>, data);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;释放读锁...&quot;</span>);</span><br><span class="line">            readLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;获取写锁...&quot;</span>);</span><br><span class="line">        writeLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;写入数据 =&gt; [&#123;&#125;]&quot;</span>, data = randomChar());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;释放写锁...&quot;</span>);</span><br><span class="line">            writeLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例2：文档中的应用示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021-05-05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CachedData</span> </span>&#123;</span><br><span class="line">    Object data;</span><br><span class="line">    <span class="comment">// 是否有效，如果失效，需要重新计算data</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">boolean</span> cacheValid;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> Random RANDOM = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">final</span> ReentrantReadWriteLock lock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">processCachedData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.readLock().lock();</span><br><span class="line">        <span class="keyword">if</span> (!cacheValid) &#123;</span><br><span class="line">            <span class="comment">// 不支持锁升级，获取写锁钱必须释放读锁</span></span><br><span class="line">            lock.readLock().unlock();</span><br><span class="line">            lock.writeLock().lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 双重检查，判断是否其他线程已经获取了读锁更新缓存，避免重复更新</span></span><br><span class="line">                <span class="keyword">if</span> (!cacheValid) &#123;</span><br><span class="line">                    data = write();</span><br><span class="line">                    cacheValid = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 降为读锁，释放写锁，让其他线程读取缓存</span></span><br><span class="line">                lock.readLock().lock();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.writeLock().unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 使用数据，释放读锁</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            use(data);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例3：Redis的Java缓存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021-05-05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;GenericRedisDemo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericRedisDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GenericCached cached = <span class="keyword">new</span> GenericCached();</span><br><span class="line">        cached.update(<span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;KHighness&quot;</span>, <span class="string">&quot;parakovo@gmail.com&quot;</span>));</span><br><span class="line">        cached.update(<span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">&quot;RubbishK&quot;</span>, <span class="string">&quot;rubbish@gmail.com&quot;</span>));</span><br><span class="line">        cached.update(<span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">&quot;FlowerK&quot;</span>, <span class="string">&quot;flower@gmail.com&quot;</span>));</span><br><span class="line">        log.debug(cached.query(User.class, <span class="number">1</span>).toString());</span><br><span class="line">        log.debug(cached.query(User.class, <span class="number">1</span>).toString());</span><br><span class="line">        log.debug(cached.query(User.class, <span class="number">2</span>).toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Integer id, String name, String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Generic</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">update</span><span class="params">(Object obj)</span></span>;</span><br><span class="line">    <span class="function">Map&lt;String, String&gt; <span class="title">query</span><span class="params">(Class&lt;?&gt; clazz, Integer id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericRedis</span> <span class="keyword">implements</span> <span class="title">Generic</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt; clazz = obj.getClass();</span><br><span class="line">        Field[] declaredFields = clazz.getDeclaredFields();</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Integer id = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field idField = clazz.getDeclaredField(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            idField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            id = (Integer) idField.get(obj);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Field field : declaredFields) &#123;</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                map.put(field.getName(), field.get(obj).toString());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jedis.hmset(clazz.getSimpleName() + <span class="string">&quot;:&quot;</span> + id, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">query</span><span class="params">(Class&lt;?&gt; clazz, Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jedis.hgetAll(clazz.getSimpleName() + <span class="string">&quot;:&quot;</span> + id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰器模式，强化</span></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;GenericCached&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericCached</span> <span class="keyword">implements</span> <span class="title">Generic</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> GenericRedis redis = <span class="keyword">new</span> GenericRedis();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Key, Map&lt;String, String&gt;&gt; cache = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantReadWriteLock lock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Key</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt; clazz;</span><br><span class="line">        Integer id;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Key</span><span class="params">(Class&lt;?&gt; clazz, Integer id)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            Key key = (Key) o;</span><br><span class="line">            <span class="keyword">return</span> Objects.equals(clazz, key.clazz) &amp;&amp; Objects.equals(id, key.id);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hash(clazz, id);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Key[&quot;</span> + <span class="string">&quot;clazz=&quot;</span> + clazz + <span class="string">&quot;, id=&quot;</span> + id + <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先更新redis再清除缓存，需要加写锁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        String res = <span class="keyword">null</span>;</span><br><span class="line">        lock.writeLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 更新redis</span></span><br><span class="line">            res = redis.update(obj);</span><br><span class="line">            <span class="comment">// 清除缓存</span></span><br><span class="line">            Field idField = obj.getClass().getDeclaredField(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            idField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            Key key = <span class="keyword">new</span> Key(obj.getClass(), (<span class="keyword">int</span>) idField.get(obj));</span><br><span class="line">            <span class="keyword">if</span> (cache.remove(key) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;清除缓存: &#123;&#125;&quot;</span>, key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException | NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.writeLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先查询缓存，需要加读锁；</span></span><br><span class="line">    <span class="comment">// 没有则查询redis添加到缓存，需要加写锁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">query</span><span class="params">(Class&lt;?&gt; clazz, Integer id)</span> </span>&#123;</span><br><span class="line">        Key key = <span class="keyword">new</span> Key(clazz, id);</span><br><span class="line">        Map&lt;String, String&gt; res = <span class="keyword">null</span>;</span><br><span class="line">        lock.readLock().lock();</span><br><span class="line">        <span class="comment">// 查询缓存</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (cache.containsKey(key)) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;缓存查询: &#123;&#125;&quot;</span>, res = cache.get(key));</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        lock.writeLock().lock();</span><br><span class="line">        <span class="comment">// 查询数据库，添加到缓存</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 双重检查</span></span><br><span class="line">            <span class="keyword">if</span> (cache.containsKey(key)) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;缓存查询: &#123;&#125;&quot;</span>, res = cache.get(key));</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">            cache.put(key, res = redis.query(clazz, id));</span><br><span class="line">            log.debug(<span class="string">&quot;添加缓存: &#123;&#125;&quot;</span>, key);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.writeLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="7-3-2-内部类Sync概述"><a href="#7-3-2-内部类Sync概述" class="headerlink" title="7.3.2 内部类Sync概述"></a>7.3.2 内部类Sync概述</h3><p>读写锁的内部维护了一个<code>ReadLock</code>和一个<code>WriteLock</code>，它们依赖<code>Sync</code>实现具体功能，<code>Sync</code>继承自AQS，并且也提供了公平锁和非公平锁的实现。</p>
<p>AQS中只维护了一个<code>state</code>状态，那么如何表示读和写两种状态呢？</p>
<p><code>Sync</code>巧妙地使用<code>state</code>的高16位表示读获取到读锁的次数，低16位表示获取到写锁的线程的可重入次数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHARED_SHIFT   = <span class="number">16</span>;</span><br><span class="line"><span class="comment">// 共享锁（读锁）状态单位值65536</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHARED_UNIT    = (<span class="number">1</span> &lt;&lt; SHARED_SHIFT);</span><br><span class="line"><span class="comment">// 共享锁线程最大个数65535</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_COUNT      = (<span class="number">1</span> &lt;&lt; SHARED_SHIFT) - <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 排它锁（写锁）掩码</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXCLUSIVE_MASK = (<span class="number">1</span> &lt;&lt; SHARED_SHIFT) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 返回读锁线程数  */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sharedCount</span><span class="params">(<span class="keyword">int</span> c)</span>    </span>&#123; <span class="keyword">return</span> c &gt;&gt;&gt; SHARED_SHIFT; &#125;</span><br><span class="line"><span class="comment">/** 返回写锁可重入个数 */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">exclusiveCount</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123; <span class="keyword">return</span> c &amp; EXCLUSIVE_MASK; &#125;</span><br></pre></td></tr></table></figure>

<p><code>Sync</code>的成员：</p>
<ul>
<li><code>firstReader</code>：记录第一个获取到读锁的线程</li>
<li><code>firstReaderHoldCount</code>：记录第一个获取到读锁的线程获取读锁的可重入次数</li>
<li><code>cacheHoldCounter</code>：记录最后一个获取读锁的线程获取读锁的可重入次数</li>
<li><code>readHolds</code>：存放除去第一个获取锁线程外的其他线程获取读锁的可重入次数。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HoldCounter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 线程ID</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> tid = getThreadId(Thread.currentThread());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalHoldCounter</span> <span class="keyword">extends</span> <span class="title">ThreadLocal</span>&lt;<span class="title">HoldCounter</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> HoldCounter <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HoldCounter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="7-3-3-写锁的获取与释放"><a href="#7-3-3-写锁的获取与释放" class="headerlink" title="7.3.3 写锁的获取与释放"></a>7.3.3 写锁的获取与释放</h3><p>在<code>ReentrantReadWriteLock</code>中写锁使用<code>WriteLock</code>实现。</p>
<p><strong>获取</strong></p>
<p>写锁是个独占锁，某时只有一个线程可以获取该锁。</p>
<p>如果当前没有线程获取到读锁和写锁，则当前线程可以获取到写锁然后返回。</p>
<p>如果当前已经有线程获取到读锁和写锁，则当前请求写锁的线程会被阻塞挂起。</p>
<p>另外，写锁是可重入锁，再次获取只是简单地把可重入次数加1后直接返回。</p>
<p>（1）<code>WriteLock</code>的<code>lock</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sync.acquire(<span class="number">1</span>);  <span class="comment">// 继承自AQS</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）<code>AbstractQueuedSynchronizer</code>的<code>acquire</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp; <span class="comment">// Sync重写</span></span><br><span class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3）<code>Sync</code>重写的<code>tryAcquire</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    Thread current = Thread.currentThread();</span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="keyword">int</span> w = exclusiveCount(c);</span><br><span class="line">    <span class="comment">// (1) c != 0说明读锁或者写锁已经被某线程获取</span></span><br><span class="line">    <span class="keyword">if</span> (c != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// (2) w = 0说明已经有线程获取了读锁，w != 0并且当前线程不是写锁拥有者，则返回false</span></span><br><span class="line">        <span class="keyword">if</span> (w == <span class="number">0</span> || current != getExclusiveOwnerThread())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// (3) 说明当前线程获取了写锁，判断可重入次数</span></span><br><span class="line">        <span class="keyword">if</span> (w + exclusiveCount(acquires) &gt; MAX_COUNT)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">        <span class="comment">// （4）设置可重入次数(+1)</span></span><br><span class="line">        setState(c + acquires);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// (5) c == 0说明第一个写线程获取写锁</span></span><br><span class="line">    <span class="keyword">if</span> (writerShouldBlock() ||</span><br><span class="line">        !compareAndSetState(c, c + acquires))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    setExclusiveOwnerThread(current);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（4）<code>writerShouldBlock</code>方法：</p>
<ul>
<li>公平锁<code>NonfairSync</code>实现：<code>return false</code>，即抢占式执行CAS尝试获取写锁，获取成功则设置当前锁的持有者为当前线程并返回true。</li>
<li>非公平锁<code>FairSync</code>的实现：<code>return hashQueuedPredecessors()</code>，判断当前线程节点是否有前驱结点，有则放弃获取写锁的权限，直接返回false。</li>
</ul>
<p><strong>释放</strong></p>
<p>如果当前线程持有该所，<code>unlock</code>会让该线程对该线程持有的AQS状态值减1，如果减1后当前状态值为0则当前线程会释放该锁，否则仅仅减1而已。</p>
<p>如果当前线程没有持有该锁而调用<code>unlock</code>抛出<code>IllegalMonitorStateException</code>异常。</p>
<p>（1）<code>WriteLock</code>的<code>unlock</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sync.release(<span class="number">1</span>);  <span class="comment">// 继承自AQS</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）<code>AbstractQueuedSynchronizer</code>的<code>release</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tryRelease(arg)) &#123; <span class="comment">// Sync重写</span></span><br><span class="line">        Node h = head;</span><br><span class="line">        <span class="comment">// 激活阻塞队列中的一个线程</span></span><br><span class="line">        <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">            unparkSuccessor(h);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3）<code>Sync</code>重写的<code>tryRelease</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// (1) 检查当前线程是否为锁拥有者</span></span><br><span class="line">    <span class="keyword">if</span> (!isHeldExclusively())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">    <span class="comment">// (2) 获取可重入值，这里没有考虑高16位，因为获取写锁时读锁状态值肯定为0</span></span><br><span class="line">    <span class="keyword">int</span> nextc = getState() - releases;</span><br><span class="line">    <span class="keyword">boolean</span> free = exclusiveCount(nextc) == <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// (3) 如果写锁可重入值为0则释放锁，否则只是简单更新状态值</span></span><br><span class="line">    <span class="keyword">if</span> (free)</span><br><span class="line">        setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">    setState(nextc);</span><br><span class="line">    <span class="keyword">return</span> free;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="7-3-4-读锁的获取与释放"><a href="#7-3-4-读锁的获取与释放" class="headerlink" title="7.3.4 读锁的获取与释放"></a>7.3.4 读锁的获取与释放</h3><p>在<code>ReentrantReadWriteLock</code>中读锁使用<code>ReadLock</code>实现。</p>
<p><strong>获取</strong></p>
<p>如果当前没有线程持有写锁，则当前线程可以获取锁，AQS的状态值<code>state</code>的高16位的值会加1，然后方法返回。</p>
<p>如果其他一个线程持有锁，则当前线程会阻塞。</p>
<p>（1）<code>Read</code>的<code>lock</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sync.acquireShared(<span class="number">1</span>); <span class="comment">// 继承自AQS</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）<code>AbstractQueuedSynchronizer</code>的<code>acquireShared</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquireShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tryAcquireShared(arg) &lt; <span class="number">0</span>) <span class="comment">// Sync重写</span></span><br><span class="line">        doAcquireShared(arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3）<code>Sync</code>重写的<code>tryAcquireShared</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> unused)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// (1) 获取当前线程</span></span><br><span class="line">    Thread current = Thread.currentThread();</span><br><span class="line">    <span class="comment">// (2) 获取当前状态值</span></span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="comment">// (3) 判断当前写锁是否被占用</span></span><br><span class="line">    <span class="keyword">if</span> (exclusiveCount(c) != <span class="number">0</span> &amp;&amp; getExclusiveOwnerThread() != current)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// (4) 获取读锁计数</span></span><br><span class="line">    <span class="keyword">int</span> r = sharedCount(c);</span><br><span class="line">    <span class="comment">// (5) 尝试获取锁，多个度线程只有一个会成功，失败的进入fullTryAcquireShared进行重试</span></span><br><span class="line">    <span class="keyword">if</span> (!readerShouldBlock() &amp;&amp;</span><br><span class="line">        r &lt; MAX_COUNT &amp;&amp;</span><br><span class="line">        compareAndSetState(c, c + SHARED_UNIT)) &#123;</span><br><span class="line">        <span class="comment">// (6) 如果当前线程是第一个获取锁的线程</span></span><br><span class="line">        <span class="keyword">if</span> (r == <span class="number">0</span>) &#123;</span><br><span class="line">            firstReader = current;</span><br><span class="line">            firstReaderHoldCount = <span class="number">1</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">// (7) 如果当前线程是第一个获取读锁的线程</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (firstReader == current) &#123;</span><br><span class="line">            firstReaderHoldCount++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// (8) 记录最后一个获取读锁的线程或者记录其他线程读锁的可重入个数</span></span><br><span class="line">            HoldCounter rh = cachedHoldCounter;</span><br><span class="line">            <span class="keyword">if</span> (rh == <span class="keyword">null</span> || rh.tid != getThreadId(current))</span><br><span class="line">                cachedHoldCounter = rh = readHolds.get();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (rh.count == <span class="number">0</span>)</span><br><span class="line">                readHolds.set(rh);</span><br><span class="line">            rh.count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// (9) 自旋获取</span></span><br><span class="line">    <span class="keyword">return</span> fullTryAcquireShared(current);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（4）<code>readerShouldBlock</code>方法：</p>
<ul>
<li><p>公平锁<code>NonfairStnc</code>实现：<code>return apparentlyFirstQueuedIsExclusive()</code>，实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">apparentlyFirstQueuedIsExclusive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Node h, s;</span><br><span class="line">    <span class="keyword">return</span> (h = head) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">        (s = h.next)  != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">        !s.isShared()         &amp;&amp;</span><br><span class="line">        s.thread != <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码的作用是，如果队列里面存在一个元素，咋判断第一个元素是不是正在尝试获取写锁，如果不是，则当前线程判断当前获取读锁的线程是否到达了最大值，最后执行CAS操作将AQS状态值的高16位值加1。</p>
</li>
<li><p>非公平锁<code>FairSync</code>的实现：<code>return hashQueuedPredecessors()</code>，判断当前线程节点是否有前驱结点，有则放弃获取读锁的权限。</p>
</li>
</ul>
<p>（5）<code>Sync</code>的<code>fullTryAcquireShared</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">fullTryAcquireShared</span><span class="params">(Thread current)</span> </span>&#123;</span><br><span class="line">    HoldCounter rh = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = getState();</span><br><span class="line">        <span class="keyword">if</span> (exclusiveCount(c) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (getExclusiveOwnerThread() != current)</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="comment">// else we hold the exclusive lock; blocking here</span></span><br><span class="line">            <span class="comment">// would cause deadlock.</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (readerShouldBlock()) &#123;</span><br><span class="line">            <span class="comment">// Make sure we&#x27;re not acquiring read lock reentrantly</span></span><br><span class="line">            <span class="keyword">if</span> (firstReader == current) &#123;</span><br><span class="line">                <span class="comment">// assert firstReaderHoldCount &gt; 0;</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (rh == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    rh = cachedHoldCounter;</span><br><span class="line">                    <span class="keyword">if</span> (rh == <span class="keyword">null</span> || rh.tid != getThreadId(current)) &#123;</span><br><span class="line">                        rh = readHolds.get();</span><br><span class="line">                        <span class="keyword">if</span> (rh.count == <span class="number">0</span>)</span><br><span class="line">                            readHolds.remove();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (rh.count == <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sharedCount(c) == MAX_COUNT)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(c, c + SHARED_UNIT)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sharedCount(c) == <span class="number">0</span>) &#123;</span><br><span class="line">                firstReader = current;</span><br><span class="line">                firstReaderHoldCount = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (firstReader == current) &#123;</span><br><span class="line">                firstReaderHoldCount++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (rh == <span class="keyword">null</span>)</span><br><span class="line">                    rh = cachedHoldCounter;</span><br><span class="line">                <span class="keyword">if</span> (rh == <span class="keyword">null</span> || rh.tid != getThreadId(current))</span><br><span class="line">                    rh = readHolds.get();</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (rh.count == <span class="number">0</span>)</span><br><span class="line">                    readHolds.set(rh);</span><br><span class="line">                rh.count++;</span><br><span class="line">                cachedHoldCounter = rh; <span class="comment">// cache for release</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>释放</strong></p>
<p>（1）<code>ReadLock</code>的<code>unlock</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sync.releaseShared(<span class="number">1</span>); <span class="comment">// 继承自AQS</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（2）<code>AbstractQueuedSynchronizer</code>的<code>releaseShared</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">releaseShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tryReleaseShared(arg)) &#123;</span><br><span class="line">        doReleaseShared();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3）<code>Sync</code>的<code>tryReleaseShared</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryReleaseShared</span><span class="params">(<span class="keyword">int</span> unused)</span> </span>&#123;</span><br><span class="line">    Thread current = Thread.currentThread();</span><br><span class="line">    <span class="comment">// (1) 判断当前线程是否为第一个获取读锁的线程</span></span><br><span class="line">    <span class="keyword">if</span> (firstReader == current) &#123;</span><br><span class="line">        <span class="comment">// 可保证firstReaderHoldCount &gt; 0</span></span><br><span class="line">        <span class="comment">// 可重入次数为1，清空读锁第一线程</span></span><br><span class="line">        <span class="keyword">if</span> (firstReaderHoldCount == <span class="number">1</span>) </span><br><span class="line">            firstReader = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 否则，可重入次数减一</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            firstReaderHoldCount--;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// (2) 那么维护最后一个获取读锁的线程的可重入次数</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 最后一个获取读锁的线程的可重入次数</span></span><br><span class="line">        HoldCounter rh = cachedHoldCounter;</span><br><span class="line">        <span class="comment">// 初始化ch</span></span><br><span class="line">        <span class="keyword">if</span> (rh == <span class="keyword">null</span> || rh.tid != getThreadId(current))</span><br><span class="line">            rh = readHolds.get();</span><br><span class="line">        <span class="keyword">int</span> count = rh.count;</span><br><span class="line">        <span class="comment">// 如果可重入次数小于等于1，说明当前线程没有持有读锁，ch是get()成的</span></span><br><span class="line">        <span class="keyword">if</span> (count &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            readHolds.remove();</span><br><span class="line">            <span class="keyword">if</span> (count &lt;= <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> unmatchedUnlockException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 执行到这里，说明当前线程持有读锁中，可重入次数减一</span></span><br><span class="line">        --rh.count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// (3) 修改同步状态，循环直到自己的读计数-1，CAS更新成功</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = getState();</span><br><span class="line">        <span class="keyword">int</span> nextc = c - SHARED_UNIT;</span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(c, nextc))</span><br><span class="line">            <span class="comment">// 状态值=0释放成功</span></span><br><span class="line">            <span class="keyword">return</span> nextc == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="7-4-StampedLock"><a href="#7-4-StampedLock" class="headerlink" title="7.4 StampedLock"></a>7.4 StampedLock</h2><p><code>StampedLock</code>是JDK1.8新增的一个锁，该锁提供了三种模式的读写控制，但是不支持条件变量和锁重入。</p>
<p>当调用获取锁的系列函数时，会返回一个<code>long</code>型的变量，称为戳记(stamp)，代表了锁的状态。其中try系列获取锁的函数，当获取失败后会返回为0的stamp值。当调用释放锁和转换锁的方法时需要传入获取锁时返回的stamp值。</p>
<p><code>StampedLock</code>提供了三种读写模式的锁：</p>
<ol>
<li><p>写锁<code>writeLock</code>：是一个独占锁，任意时刻只有一个线程可以获取到该锁，当一个线程获取该锁后，其他请求读锁和写锁的线程必须等待，这类似于<code>ReentrantReadWriteLock</code>的写锁（不同的是这里的写锁是不可重入锁）；当目前没有线程持有读锁或者写锁时才可以获取到该锁。请求该锁成功后会返回一个<code>stamp</code>变量用来表示该锁的版本，当解释该锁时需要调用<code>unlockWrite</code>方法并传递获取锁时的<code>stamp</code>参数。并且它提供了非阻塞的<code>tryWriteLock</code>方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> stamp = lock.writeLock();</span><br><span class="line">lock.unlockWrite(stamp);</span><br></pre></td></tr></table></figure>
</li>
<li><p>悲观读锁<code>readLock</code>：是一个共享锁，在没有线程获取独占写锁的情况下，多个线程可以同时获取该锁。如果已经有线程持有写锁，则其他线程请求获取该锁会被阻塞，这类似于<code>ReentrantReadWriteLock</code>的读锁（不同的是这里的读锁是不可重入锁）。这里说的悲观是指具体操作数据前会悲观地认为其他线程可以要对自己操作的数据进行修改，所以需要先对数据加锁，这是在读少写多的情况下的一种考虑。请求该所成功后会返回一个<code>stamp</code>变量用来表示该锁的版本，当释放该锁时需要调用<code>unlockRead</code>方法并传递<code>stamp</code>参数。并且它提供了非阻塞的<code>tryReadLock</code>方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> stamp = lock.readLock();</span><br><span class="line">lock.unlockRead(stamp);</span><br></pre></td></tr></table></figure>
</li>
<li><p>乐观读锁<code>tryOptimisticRead</code>：它是相对于悲观锁来说的，在操作数据前并没有通过CAS设置锁的状态，仅仅通过位运算测试。如果当前没有线程持有写锁，则简单地返回一个非0的<code>stamp</code>值。获取该<code>stamp</code>后在具体操作数据前还需要调用<code>validate</code>方法验证该<code>stamp</code>是否已经不可用，也就是看当调用<code>tryOptimisticRead</code>返回<code>stamp</code>后到当前时间期间是否有其他线程持有了写锁，如果是则<code>validate</code>会返回0，否则就可以使用该<code>stamp</code>版本的锁对数据进行操作。由于<code>tryOptimisticRead</code>并没有使用CAS设置锁状态，所以不需要显式地释放该锁。该锁的一个特点是适用于读多写少的场景，因为获取读锁只是使用位操作进行检验，不涉及CAS操作，所以效率上会高很多，但是同时由于没有使用真正的锁，在保证数据一致性上需要复制一份要操作的变量到方法栈，并且在操作数据时可能其他写线程已经修改了数据，而我们操作的是方法栈里面的数据，也就是一个快照，所以最多返回的不是最新的数据，但是一致性还是得到保障的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> stamp = lock.tryOptimisticRead();</span><br><span class="line"><span class="keyword">if</span> (!lock.validate(stamp)) &#123;</span><br><span class="line">    <span class="comment">// 锁升级</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<p>示例：笛卡尔二维点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.StampedLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021-05-05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 横坐标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> x;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 纵坐标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> y;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 锁实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StampedLock lock = <span class="keyword">new</span> StampedLock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移动点到新位置</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;使用排它锁-写锁&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> deltaX 横坐标变化值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> deltaY 纵坐标变化值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">double</span> deltaX, <span class="keyword">int</span> deltaY)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> stamp = lock.writeLock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            x += deltaX;</span><br><span class="line">            y += deltaY;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlockWrite(stamp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算当前位置到原点的距离</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;使用乐观锁读&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 距离原点的距离</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">distanceFromOrigin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> stamp = lock.tryOptimisticRead();</span><br><span class="line">        <span class="keyword">double</span> currentX = x, currentY = y;</span><br><span class="line">        <span class="comment">// 检查获取stamp后，锁是否被其他写线程排他性抢占</span></span><br><span class="line">        <span class="keyword">if</span> (!lock.validate(stamp)) &#123;</span><br><span class="line">            <span class="comment">// 如果被抢占则进行锁升级，获取悲观读锁</span></span><br><span class="line">            stamp = lock.readLock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                currentX = x;</span><br><span class="line">                currentY = y;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlockRead(stamp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.sqrt(currentX * currentX + currentY * currentY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果当前位置在原点则移动至新位置</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;使用悲观锁获取读锁，并尝试转换为写锁&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newX 新位置的横坐标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newY 新位置的纵坐标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">moveIfAtOrigin</span><span class="params">(<span class="keyword">double</span> newX, <span class="keyword">double</span> newY)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里可以用乐观锁读替换</span></span><br><span class="line">        <span class="keyword">long</span> stamp = lock.readLock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (x == <span class="number">0.0</span> &amp;&amp; y == <span class="number">0.0</span>) &#123;</span><br><span class="line">                <span class="comment">// 尝试将读锁升级为写锁</span></span><br><span class="line">                <span class="keyword">long</span> ws = lock.tryConvertToWriteLock(stamp);</span><br><span class="line">                <span class="comment">// 升级成功，则更换戳记，更新坐标，退出循环</span></span><br><span class="line">                <span class="keyword">if</span> (ws != <span class="number">0L</span>) &#123;</span><br><span class="line">                    stamp = ws;</span><br><span class="line">                    x = newX;</span><br><span class="line">                    y = newY;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; </span><br><span class="line">                <span class="comment">// 升级失败，则释放读锁，显式获取写锁，循环重试</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    lock.unlockRead(stamp);</span><br><span class="line">                    stamp = lock.writeLock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放锁</span></span><br><span class="line">            lock.unlockWrite(stamp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>JUC</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JUC-6(并发工具之线程池)</title>
    <url>/posts/62082/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="6-1-自定义线程池"><a href="#6-1-自定义线程池" class="headerlink" title="6.1 自定义线程池"></a>6.1 自定义线程池</h2><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62082/image-20210430145117537.png" class="" title="image-20210430145117537.png">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayDeque;</span><br><span class="line"><span class="keyword">import</span> java.util.Deque;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021-04-30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;ParaKThreadPoolDemo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParaKThreadPoolDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ParaKThreadPool threadPool = <span class="keyword">new</span> ParaKThreadPool(</span><br><span class="line">                <span class="number">1</span>, <span class="number">1000</span>, TimeUnit.MILLISECONDS, <span class="number">1</span>,</span><br><span class="line">                <span class="comment">// (1) 一直等待</span></span><br><span class="line">                <span class="comment">// BlockingQueue::put</span></span><br><span class="line"><span class="comment">//                (2) 超时等待</span></span><br><span class="line">                (queue, task) -&gt; &#123;</span><br><span class="line">                    queue.offer(task, <span class="number">1500</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// (3) 放弃执行</span></span><br><span class="line"><span class="comment">//                (queue, task) -&gt; &#123;</span></span><br><span class="line"><span class="comment">//                    log.debug(&quot;放弃执行: &#123;&#125;&quot;, task);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">                <span class="comment">// (4) 抛出异常</span></span><br><span class="line"><span class="comment">//                (queue, task) -&gt; &#123;</span></span><br><span class="line"><span class="comment">//                    throw new RuntimeException(&quot;任务执行失败: &quot; + task);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">                <span class="comment">// (5) 自己执行</span></span><br><span class="line"><span class="comment">//                (queue, task) -&gt; &#123;</span></span><br><span class="line"><span class="comment">//                    task.run();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> k = i;</span><br><span class="line">            threadPool.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">&quot;&#123;&#125;&quot;</span>, k);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;ParaKThreadPool&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParaKThreadPool</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 任务队列</span></span><br><span class="line">    <span class="keyword">private</span> BlockingQueue&lt;Runnable&gt; taskQueue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线程集合</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HashSet&lt;Worker&gt; workers = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 核心线程数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> coreSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取任务的超时时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> timeout;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 时间单位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TimeUnit timeUnit;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拒绝策略</span></span><br><span class="line">    <span class="keyword">private</span> RejectPolicy&lt;Runnable&gt; rejectPolicy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParaKThreadPool</span><span class="params">(<span class="keyword">int</span> coreSize, <span class="keyword">long</span> timeout, TimeUnit timeUnit, <span class="keyword">int</span> queueCapacity, RejectPolicy&lt;Runnable&gt; rejectPolicy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.coreSize = coreSize;</span><br><span class="line">        <span class="keyword">this</span>.timeout = timeout;</span><br><span class="line">        <span class="keyword">this</span>.timeUnit = timeUnit;</span><br><span class="line">        <span class="keyword">this</span>.taskQueue = <span class="keyword">new</span> BlockingQueue&lt;&gt;(queueCapacity);</span><br><span class="line">        <span class="keyword">this</span>.rejectPolicy = rejectPolicy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行任务</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable task)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当任务数没有超过coreSize时，直接交给worker对象执行</span></span><br><span class="line">        <span class="comment">// 如果任务数超过coreSize时，加入任务队列暂存</span></span><br><span class="line">        <span class="keyword">synchronized</span> (workers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (workers.size() &lt; coreSize) &#123;</span><br><span class="line">                Worker worker = <span class="keyword">new</span> Worker(task);</span><br><span class="line">                log.debug(<span class="string">&quot;执行线程新增: &#123;&#125;&quot;</span>, worker);</span><br><span class="line">                workers.add(worker);</span><br><span class="line">                worker.start();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// (1) 一直等待</span></span><br><span class="line">                <span class="comment">// (2) 超时等待</span></span><br><span class="line">                <span class="comment">// (3) 放弃执行</span></span><br><span class="line">                <span class="comment">// (4) 抛出异常</span></span><br><span class="line">                <span class="comment">// (5) 让调用者自己执行任务</span></span><br><span class="line">                taskQueue.tryPut(rejectPolicy, task);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Runnable task;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Worker</span><span class="params">(Runnable task)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.task = task;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 执行任务</span></span><br><span class="line">            <span class="comment">// (1) 当task不为空，执行任务</span></span><br><span class="line">            <span class="comment">// (2) 当task执行完毕，再接着从任务队列获取任务并执行</span></span><br><span class="line"><span class="comment">//            while (task != null || (task = taskQueue.take()) != null) &#123;</span></span><br><span class="line">            <span class="keyword">while</span> (task != <span class="keyword">null</span> || (task = taskQueue.poll(timeout, timeUnit)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;正在执行 =&gt; &#123;&#125;&quot;</span>, task);</span><br><span class="line">                    task.run();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    task = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (workers) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;执行线程移除: &#123;&#125;&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">                workers.remove(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;BlockingQueue&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlockingQueue</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 任务队列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Deque&lt;T&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最大容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生产者条件变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition fullWaitSet = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消费者条件变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition emptyWaitSet = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BlockingQueue</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带超时的阻塞获取</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">poll</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 将超时时间统一转换为纳秒</span></span><br><span class="line">            <span class="keyword">long</span> nanos = unit.toNanos(timeout);</span><br><span class="line">            <span class="keyword">while</span> (queue.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 返回剩余时间</span></span><br><span class="line">                    <span class="keyword">if</span> (nanos &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    nanos = emptyWaitSet.awaitNanos(nanos);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            T t = queue.removeFirst();</span><br><span class="line">            fullWaitSet.signal();</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 阻塞获取</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">take</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 队列为空，阻塞</span></span><br><span class="line">            <span class="keyword">while</span> (queue.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    emptyWaitSet.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            T t = queue.removeFirst();</span><br><span class="line">            fullWaitSet.signal();</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 阻塞添加</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(T element)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 队列已满，阻塞</span></span><br><span class="line">            <span class="keyword">while</span> (queue.size() == capacity) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;等待加入任务队列: &#123;&#125;...&quot;</span>, element);</span><br><span class="line">                fullWaitSet.await();</span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(<span class="string">&quot;加入任务队列: &#123;&#125;&quot;</span>, element);</span><br><span class="line">            queue.addLast(element);</span><br><span class="line">            emptyWaitSet.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带超时时间添加</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(T element, <span class="keyword">long</span> timeout, TimeUnit timeUnit)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> nanos = timeUnit.toNanos(timeout);</span><br><span class="line">            <span class="comment">// 队列已满，阻塞</span></span><br><span class="line">            <span class="keyword">while</span> (queue.size() == capacity) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nanos &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">&quot;等待加入任务队列: &#123;&#125;...&quot;</span>, element);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    nanos = fullWaitSet.awaitNanos(nanos);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(<span class="string">&quot;加入任务队列: &#123;&#125;&quot;</span>, element);</span><br><span class="line">            queue.addLast(element);</span><br><span class="line">            emptyWaitSet.signal();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取大小</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> queue.size();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tryPut</span><span class="params">(RejectPolicy&lt;T&gt; rejectPolicy, T task)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 判断队列是否已满</span></span><br><span class="line">            <span class="keyword">if</span> (queue.size() == capacity) &#123;</span><br><span class="line">                rejectPolicy.reject(<span class="keyword">this</span>, task);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 有空闲</span></span><br><span class="line">                log.debug(<span class="string">&quot;加入任务队列 &#123;&#125;&quot;</span>, task);</span><br><span class="line">                queue.addLast(task);</span><br><span class="line">                emptyWaitSet.signal();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">RejectPolicy</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">reject</span><span class="params">(BlockingQueue&lt;T&gt; queue, T task)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="6-2-ThreadPoolExecutor"><a href="#6-2-ThreadPoolExecutor" class="headerlink" title="6.2 ThreadPoolExecutor"></a>6.2 ThreadPoolExecutor</h2><h3 id="6-2-1-线程池的继承关系"><a href="#6-2-1-线程池的继承关系" class="headerlink" title="6.2.1 线程池的继承关系"></a>6.2.1 线程池的继承关系</h3><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62082/image-20210430184352672.png" class="" title="image-20210430184352672">



<h3 id="6-2-2-Executor框架结构"><a href="#6-2-2-Executor框架结构" class="headerlink" title="6.2.2 Executor框架结构"></a>6.2.2 Executor框架结构</h3><p>三大部分：</p>
<ul>
<li>任务类（Runnable / Callable）：执行任务需要实现的<code>Runnable</code>或者<code>Callable</code>接口。</li>
<li>任何的执行（Executor）：任务执行机制的核心接口<code>Executor</code>，以及继承自<code>Executor</code>接口的<code>ExecutorService</code>接口。</li>
<li>异步计算结果（Future）：<code>Future</code>接口以及<code>FutureTask</code>类都可以代表异步计算的结果。</li>
</ul>
<p>使用示意：</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62082/image-20210430184722889.png" class="" title="image-20210430184722889.png">



<h3 id="6-2-3-线程池状态"><a href="#6-2-3-线程池状态" class="headerlink" title="6.2.3 线程池状态"></a>6.2.3 线程池状态</h3><p><code>ThreadPoolExecutor</code>使用int的高3位来表示线程池状态，低29位表示线程数量。</p>
<table>
<thead>
<tr>
<th>状态名</th>
<th>高3位</th>
<th>接收新任务</th>
<th>处理阻塞队列任务</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>RUNNING</td>
<td>111</td>
<td>Y</td>
<td>Y</td>
<td>接收新任务，同时处理任务队列中的任务</td>
</tr>
<tr>
<td>SHUTDOWN</td>
<td>000</td>
<td>N</td>
<td>Y</td>
<td>不会接收新任务，但会处理阻塞队列剩余任务</td>
</tr>
<tr>
<td>STOP</td>
<td>001</td>
<td>N</td>
<td>N</td>
<td>会中断正在执行的任务，并抛弃阻塞队列任务</td>
</tr>
<tr>
<td>TIDYING</td>
<td>010</td>
<td>-</td>
<td>-</td>
<td>任务全执行完毕，活动线程为0即将进入终结</td>
</tr>
<tr>
<td>TERMINATED</td>
<td>011</td>
<td>-</td>
<td>-</td>
<td>终结状态</td>
</tr>
</tbody></table>
<p>从数字上比较（第一位是符号位），TERMINATED &gt; TIDYING &gt; STOP &gt; SHUTDOWN &gt; RUNNING。</p>
<p>这些信息存储在一个原子变量ctl中，目的是将线程池状态与线程个数合二为一，这样就可以用一次CAS原子操作进行赋值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// c为旧值，ctlOf返回结果为新值</span></span><br><span class="line">ctl.compareAndSet(c, ctlOf(targetState, workerCountOf(c)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// rs为高三位代表线程池状态，wc为低29位代表线程个数，ctl是合并它们</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ctlOf</span><span class="params">(<span class="keyword">int</span> rs, <span class="keyword">int</span> wc)</span> </span>&#123; <span class="keyword">return</span> rs | wc; &#125;</span><br></pre></td></tr></table></figure>



<h3 id="6-2-4-线程池属性"><a href="#6-2-4-线程池属性" class="headerlink" title="6.2.4 线程池属性"></a>6.2.4 线程池属性</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 工作线程 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/** 正在运行的线程 */</span></span><br><span class="line">    <span class="keyword">final</span> Thread thread;</span><br><span class="line">    <span class="comment">/** 初始化任务 */</span></span><br><span class="line">    Runnable firstTask;</span><br><span class="line">    <span class="comment">/** 已完成的任务数量 */</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">long</span> completedTasks;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** 阻塞队列 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; workQueue;</span><br><span class="line"><span class="comment">/** 锁 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="comment">/** 线程容器 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HashSet&lt;Worker&gt; workers = <span class="keyword">new</span> HashSet&lt;Worker&gt;();</span><br></pre></td></tr></table></figure>



<h3 id="6-2-5-构造函数和参数"><a href="#6-2-5-构造函数和参数" class="headerlink" title="6.2.5 构造函数和参数"></a>6.2.5 构造函数和参数</h3><p>最全构造函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                          ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                          RejectedExecutionHandler handler)</span></span></span><br></pre></td></tr></table></figure>

<p>参数解释：</p>
<ul>
<li><code>corePoolSize</code>：核心线程数量</li>
<li><code>maximumPoolSize</code>：最大线程数量<ul>
<li><code>maximumPool - corePoolSize</code>：救急线程数量</li>
<li>在没有空闲的核心线程和任务队列满了的情况下才使用救急线程</li>
</ul>
</li>
<li><code>keepAliveTime</code>：最大生存时间（对于救急线程）</li>
<li><code>unit</code>：时间单位</li>
<li><code>workQueue</code>：阻塞队列（存放任务）<ul>
<li>有界阻塞队列<code>ArrayBlockingQueue</code></li>
<li>无界阻塞队列<code>LinkedBlockingQueue</code></li>
<li>最多只有一个同步元素的<code>SynchronousQueue</code></li>
<li>优先队列<code>PriorityBlockingQueue</code></li>
</ul>
</li>
<li><code>threadFactory</code>：线程工厂</li>
<li><code>handler</code>：拒绝策略</li>
</ul>
<p>工作流程：</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62082/image-20210430203563881.png" class="" title="image-20210430203563881.png">





<h3 id="6-2-6-拒绝策略和场景"><a href="#6-2-6-拒绝策略和场景" class="headerlink" title="6.2.6 拒绝策略和场景"></a>6.2.6 拒绝策略和场景</h3><p>如果线程数量达到<code>maximumPoolSize</code>仍然有新人物时会执行拒绝策略，JDK提供了四种实现。</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62082/image-20210430215158450.png" class="" title="image-20210430215158450">

<p>具体：</p>
<p>（1）<code>AbortPolicy</code>终止策略：丢弃任务并抛出<code>RejectedExecutionException</code>异常，这是默认策略。</p>
<ul>
<li>详述：这是线程池默认的拒绝策略，在任务不能再提交的时候，抛出异常，及时反馈程序运行状态。如果是比较关键的业务，推荐使用此拒绝策略，这样子在系统不能承载更大的并发量的时候，能够及时的通过异常发现。</li>
<li>功能：当触发拒绝策略时，直接抛出拒绝执行的异常，中止策略的意思也就是打断当前执行流程。</li>
<li>使用场景：这个就没有特殊的场景了，但是有一点要正确处理抛出的异常。ThreadPoolExecutor中默认的策略就是AbortPolicy，ExecutorService接口的系列ThreadPoolExecutor因为都没有显示的设置拒绝策略，所以默认的都是这个。但是请注意，ExecutorService中的线程池实例队列都是无界的，也就是说把内存撑爆了都不会触发拒绝策略。当自己自定义线程池实例时，使用这个策略一定要处理好触发策略时抛的异常，因为他会打断当前的执行流程。</li>
</ul>
<p>（2）<code>DiscardPolicy</code>丢弃策略：丢弃任务，但是不抛出异常。如果线程队列已满，则后续提交的任务都会被丢弃，且静默丢弃。</p>
<ul>
<li>详述：使用此策略，可能使我们无法发现系统的异常状态。建议是一些无关紧要的业务采用此策略。</li>
<li>功能：直接静静地丢弃这个任务，不触发任何动作。</li>
<li>使用场景：如果你提交的任务无关紧要，你就可以使用它 。因为它就是个空实现，会悄无声息的吞噬你的的任务。所以这个策略基本上不用了。</li>
</ul>
<p>（3）<code>DiscardOldestPolicy</code>弃老策略：丢弃队列最前面的任务，然后重新提交被拒绝的任务。</p>
<ul>
<li>详述：喜新厌旧的拒绝策略。是否采用还是得根据实际业务是否允许丢弃老任务来认真衡量。</li>
<li>功能：如果线程池未关闭，就弹出队列头部的元素，然后尝试执行。</li>
<li>使用场景：这个策略还是会丢弃任务，丢弃时也是毫无声息，但是特点是丢弃的是老的未执行的任务，而且是待执行优先级较高的任务。基于这个特性，想到的场景就是，发布消息和修改消息，当消息发布出去后，还未执行，此时更新的消息又来了，这个时候未执行的消息的版本比现在提交的消息版本要低就可以被丢弃了。因为队列中还有可能存在消息版本更低的消息会排队执行，所以在真正处理消息的时候一定要做好消息的版本比较。</li>
</ul>
<p>（4）<code>CallerRunsPolicy</code>调用者运行策略：由调用线程处理该任务。</p>
<ul>
<li>功能：当触发拒绝策略时，只要线程没有关闭，就由提交任务的当前线程处理。</li>
<li>使用场景：一般在不允许失败的、对性能要求不高、并发量较小的场景下使用，因为线程池一般情况下不会关闭，也就是提交的任务一定会被运行，但是由于是调用者线程自己执行的，当多次提交任务时，就会阻塞后续任务执行，性能和效率自然就慢了。</li>
</ul>
<blockquote>
<p>其他框架实现</p>
<ul>
<li>Dubbo：在抛出<code>RejectedExecutionException</code>异常之前会记录日志和dump线程栈信息，方便定位问题</li>
<li>Netty：创建一个新的线程来执行任务</li>
<li>ActiveMQ：超时等待(60s)，尝试放入队列</li>
<li>PinPoint：使用了一种拒绝策略链，会逐一尝试策略链中每种拒绝策略</li>
</ul>
</blockquote>
<p>口诀：拒终丢老调（线程池拒绝策略：终止策略、丢弃策略、弃老策略、调用者运行策略）</p>
<p>场景：</p>
<ul>
<li>终止策略：无特殊场景</li>
<li>丢弃策略：无关紧要的任务</li>
<li>弃老策略：发布消息</li>
<li>调用者运行策略：不允许失败</li>
</ul>
<p>过程：</p>
<ol>
<li>线程池中刚开始没有线程，当一个任务提交给线程池后，线程池会创建一个新线程来执行任务。</li>
<li>当线程数达到<code>corePoolSize</code>并没有线程空闲，这时再加入任务，新加的任务会被加入<code>workQueue</code>队列，直到有空闲的线程。</li>
<li>如果队列选择了有界队列，那么任务超过了队列大小时，会创建<code>maximumPoolSize</code>-<code>corePoolSize</code>数目的线程来救急。</li>
<li>如果线程达到<code>maximumPoolSize</code>仍然有新任务时会执行拒绝策略。</li>
<li>当高峰过去后，超过<code>corePoolSize</code>的救急线程如果一段时间没有任务做，需要结束节省资源，这个时间<code>kepAliveTime</code>和<code>unit</code>来控制。</li>
</ol>
<h3 id="6-2-7-固定大小线程池"><a href="#6-2-7-固定大小线程池" class="headerlink" title="6.2.7 固定大小线程池"></a>6.2.7 固定大小线程池</h3><p><code>newFixedThreadPool</code></p>
<p>构造方法的参数：</p>
<ul>
<li>核心线程数：<code>nThreads</code></li>
<li>线程工厂：<code>threadFactory</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads, ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(),</span><br><span class="line">                                  threadFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>特点：</p>
<ul>
<li>核心线程数 = 最大线程数，没有救急线程，无需设置超时时间。</li>
<li>阻塞队列是无界的，可以放任意数量的任务。</li>
</ul>
<p>场景：适用于任务量已知，相对耗时的任务。</p>
<h3 id="6-2-8-无界限制线程池"><a href="#6-2-8-无界限制线程池" class="headerlink" title="6.2.8 无界限制线程池"></a>6.2.8 无界限制线程池</h3><p><code>newCachedThreadPool</code></p>
<p>构造方法的参数：</p>
<ul>
<li>线程工厂：<code>threadFactory</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">(ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;(),</span><br><span class="line">                                  threadFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>特点：</p>
<ul>
<li>核心线程是<code>0</code>，最大线程数是<code>Integer.MAX_VALUE</code>，救急线程的空闲生存时间是<code>60S</code>，意味着<ul>
<li>全部都是救急线程（空闲60S后可以回收）</li>
<li>救急线程可以无限创建</li>
</ul>
</li>
<li>任务队列采用<code>SyncheonousQueue</code>实现特点是，它没有容量，没有线程来取是放不进去的</li>
</ul>
<p>场景：</p>
<ul>
<li>整个线程池表现为线程数会根据任务量不断增长，没有上限，当任务执行完毕，空闲1分钟后释放线程。</li>
<li>适合任务数比较密集，但每个任务执行时间较短的情况。</li>
</ul>
<p><code>SyncheonousQueue</code>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;SynchronousQueue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronousQueueDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        SynchronousQueue&lt;Integer&gt; integers = <span class="keyword">new</span> SynchronousQueue&lt;&gt;();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;putting &#123;&#125;&quot;</span>, <span class="number">1</span>);</span><br><span class="line">                integers.put(<span class="number">1</span>);</span><br><span class="line">                log.debug(<span class="string">&quot;&#123;&#125; finish&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                log.debug(<span class="string">&quot;putting &#123;&#125;&quot;</span>, <span class="number">2</span>);</span><br><span class="line">                integers.put(<span class="number">2</span>);</span><br><span class="line">                log.debug(<span class="string">&quot;&#123;&#125; finish&quot;</span>, <span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               log.debug(<span class="string">&quot;taking &#123;&#125;&quot;</span>, <span class="number">1</span>);</span><br><span class="line">               integers.take();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;taking &#123;&#125;&quot;</span>, <span class="number">2</span>);</span><br><span class="line">                integers.take();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t3&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021-05-01 15:19:10.611 [t1] DEBUG SynchronousQueue - putting 1</span><br><span class="line">2021-05-01 15:19:11.621 [t2] DEBUG SynchronousQueue - taking 1</span><br><span class="line">2021-05-01 15:19:11.621 [t1] DEBUG SynchronousQueue - 1 finish</span><br><span class="line">2021-05-01 15:19:11.621 [t1] DEBUG SynchronousQueue - putting 2</span><br><span class="line">2021-05-01 15:19:12.632 [t3] DEBUG SynchronousQueue - taking 2</span><br><span class="line">2021-05-01 15:19:12.633 [t1] DEBUG SynchronousQueue - 2 finish</span><br></pre></td></tr></table></figure>



<h3 id="6-2-9-始终如一线程池"><a href="#6-2-9-始终如一线程池" class="headerlink" title="6.2.9 始终如一线程池"></a>6.2.9 始终如一线程池</h3><p><code>newSingleThreadExecutor</code></p>
<p>构造方法的参数：</p>
<ul>
<li>线程工厂：<code>threadFactory</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static ExecutorService newSingleThreadExecutor(ThreadFactory threadFactory) &#123;</span><br><span class="line">    return new FinalizableDelegatedExecutorService</span><br><span class="line">        (new ThreadPoolExecutor(1, 1,</span><br><span class="line">                                0L, TimeUnit.MILLISECONDS,</span><br><span class="line">                                new LinkedBlockingQueue&lt;Runnable&gt;(),</span><br><span class="line">                                threadFactory));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>场景：希望多个任务排队执行。线程数固定为1，任务数多于1时，会放入无界队列排队。任务执行完毕，这唯一的线程也不会被释放。</p>
<p>区别：</p>
<ul>
<li>对比：创建一个单线程串行执行任务<ul>
<li>单线程如果任务执行失败而终止那么没有任何补救措施。</li>
<li><code>newSingleThreadExecutor</code>线程池还会新建一个线程，保证线程池的正常工作。</li>
</ul>
</li>
<li>对比：<code>Executors.newFixedThreadPool(1)</code><ul>
<li><code>newFixedThreadPool</code>对外暴露的是<code>ThreadPoolExecutor</code>对象，可以强转后调用<code>setCoreSize</code>等方法进行修改。</li>
<li><code>FinalizableDelegatedExecutorService</code>应用的是装饰器模式，只对外暴露了<code>ExecutorService</code>接口，因此不能<code>ThreadPoolExecutor</code>中特有的方法。</li>
</ul>
</li>
</ul>
<h3 id="6-2-10-执行-提交任务"><a href="#6-2-10-执行-提交任务" class="headerlink" title="6.2.10 执行/提交任务"></a>6.2.10 执行/提交任务</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 执行任务</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提交任务task，用返回值Future获得任务执行结果</span></span><br><span class="line">&lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Callable&lt;T&gt; task)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提交tasks中所有任务</span></span><br><span class="line">&lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks) <span class="keyword">throws</span> InterruptedException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提交taks中所有任务，带超时时间</span></span><br><span class="line">&lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks, <span class="keyword">long</span> timeout, TimeUnit unit) <span class="keyword">throws</span> InterruptedException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提交tasks中所有任务，哪个任务先成功执行完毕，返回此任务执行结果，其他任务取消</span></span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提交tasks中所有任务，哪个任务先成功执行完毕，返回此任务执行结果，其他任务取消</span></span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks, <span class="keyword">long</span> timeout, TimeUnit unit)</span> sthrows InterruptedException, ExecutionException, TimeoutException</span>;</span><br></pre></td></tr></table></figure>



<h3 id="6-2-11-关闭线程池"><a href="#6-2-11-关闭线程池" class="headerlink" title="6.2.11 关闭线程池"></a>6.2.11 关闭线程池</h3><p><code>shutdown</code></p>
<ul>
<li>将线程池的状态改为<code>SHUTDOWN</code></li>
<li>不再接收新任务，但是会将阻塞队列中的任务执行完</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">    mainLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        checkShutdownAccess();</span><br><span class="line">        <span class="comment">// 修改线程池状态</span></span><br><span class="line">        advanceRunState(SHUTDOWN);</span><br><span class="line">        <span class="comment">// 仅打断空闲线程</span></span><br><span class="line">        interruptIdleWorkers();</span><br><span class="line">        onShutdown(); <span class="comment">// hook for ScheduledThreadPoolExecutor</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        mainLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 尝试终结</span></span><br><span class="line">    tryTerminate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>shutdownNow</code></p>
<ul>
<li>将线程池的状态改为<code>STOP</code></li>
<li>不再接收新任务，也不会再执行阻塞队列中的任务</li>
<li>会将阻塞队列中未执行的任务作为方法返回值</li>
<li>并用<code>interrupt</code>的方式中断正在执行的任务</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Runnable&gt; <span class="title">shutdownNow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Runnable&gt; tasks;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">    mainLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        checkShutdownAccess();</span><br><span class="line">        <span class="comment">// 修改线程池状态</span></span><br><span class="line">        advanceRunState(STOP);</span><br><span class="line">        <span class="comment">// 打断所有线程</span></span><br><span class="line">        interruptWorkers();</span><br><span class="line">        <span class="comment">// 获取队列中剩余任务</span></span><br><span class="line">        tasks = drainQueue();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        mainLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 尝试终结</span></span><br><span class="line">    tryTerminate();</span><br><span class="line">    <span class="keyword">return</span> tasks;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其他方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断线程池状态是否是非RUNNING</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isShutdown</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断线程池状态是否是TERMINATED</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTerminated</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用shutdown后，由于调用线程并不会等待所有任务运行结束，因此如果它想在线程池TERMINATED后做些事情，可以利用此方法等待</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">awaitTermination</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span>;</span><br></pre></td></tr></table></figure>



<h2 id="6-3-异步模式之工作线程"><a href="#6-3-异步模式之工作线程" class="headerlink" title="6.3 异步模式之工作线程"></a>6.3 异步模式之工作线程</h2><h3 id="6-3-1-概述"><a href="#6-3-1-概述" class="headerlink" title="6.3.1 概述"></a>6.3.1 概述</h3><p><strong>定义</strong>：让有限的工作线程（Worker Thread）来轮流移除处理无限多的任务。也可以将其归类为分工模式，它的典型实现就是线程池，也体现了经典设计模式中的享元模式。</p>
<p><strong>例如</strong>：海底捞的服务员（线程），轮流处理每位客人的点餐（任务），如果为每位客人都配一名专属的服务员，那么成本就太高了。（对比另一种多线程设计模式：Thread-Per-Message）</p>
<p><strong>注意</strong>：不同任务类型应该使用不同的线程池，这样能够避免饥饿，并能提升效率。</p>
<p><strong>例如</strong>：如果一个餐馆的工人既要招呼客人（任务类型A），又要到后厨做菜（任务类型B）显然效率不咋地，分成服务员（线程池A）与厨师（线程池B）更为合理，当然还有更细的分工。</p>
<p><strong>饥饿</strong>：固定大小线程池会有饥饿现象</p>
<ul>
<li>两个工人是同一个线程池中的两个线程</li>
<li>他们要做的事情是：为客人点餐和到后厨做菜，这是两个阶段的工作<ul>
<li>客人点餐：必须先点完餐，等菜做好，上菜，在此期间处理点餐的工人必须等待</li>
<li>后厨做菜：做就完了</li>
</ul>
</li>
<li>如果只有一个客人，工人A处理了点餐任务，接下来它要等着工人B去把菜做好，然后上菜</li>
<li>如果同时来了两个客人，这个时候工人A和工人B都去处理点餐了，这时没人做饭了，饥饿</li>
</ul>
<p><strong>解决</strong>：</p>
<p>可以增加线程池的大小，但是不是根本解决之道。不同的任务类型，创建不同的线程池。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;Starvation&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StarvationDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 菜单</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; MENU = Arrays.asList(<span class="string">&quot;鱼香肉丝&quot;</span>, <span class="string">&quot;宫保鸡丁&quot;</span>, <span class="string">&quot;红烧肉&quot;</span>, <span class="string">&quot;烤鸡翅&quot;</span>);</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Random RANDOM = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机做个菜</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">cooking</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MENU.get(RANDOM.nextInt(MENU.size()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 服务员</span></span><br><span class="line">        ExecutorService waiterPool = Executors.newFixedThreadPool(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 厨师</span></span><br><span class="line">        ExecutorService cookPool =  Executors.newFixedThreadPool(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 10位客人</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            waiterPool.execute(() -&gt; &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;处理点餐&quot;</span>);</span><br><span class="line">                Future&lt;String&gt; future = cookPool.submit(() -&gt; &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;做菜&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> cooking();</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;上菜: &#123;&#125;&quot;</span>, future.get());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="6-3-2-创建多少线程池合适"><a href="#6-3-2-创建多少线程池合适" class="headerlink" title="6.3.2 创建多少线程池合适"></a>6.3.2 创建多少线程池合适</h3><ul>
<li>过小会导致程序不能充分地利用系统资源、容易导致饥饿</li>
<li>过大后导致更多的线程上下文切换，占用更多内存</li>
</ul>
<p><strong>CPU密集型运算</strong></p>
<p>通常采用CPU核数 + 1能够实现最优的CPU利用率，+1是保证当线程由于页缺失故障（操作系统）或其他原因导致暂停时，额外的这个线程就能顶上去，保证CPU时钟周期不被浪费。</p>
<p><strong>I/O密集型运算</strong></p>
<p>CPU不总是处于繁忙状态，例如，当你执行业务计算时，这时候会使用CPU资源，但当你执行IO操作时、远程RPC调用时，包括进行数据操作时，这时候CPU就闲下来了，你可以利用多线程提高它的利用率。</p>
<p>经验公式：<code>线程数 = 核数 * 期望CPU利用率 * 总时间(CPU计算时间 + 等待时间) / CPU计算时间</code></p>
<h3 id="6-3-3-任务调度线程池"><a href="#6-3-3-任务调度线程池" class="headerlink" title="6.3.3 任务调度线程池"></a>6.3.3 任务调度线程池</h3><p>在『任务调度线程池』功能加入之前，可以使用<code>java.util.Timer</code>来实现定时功能，<code>Timer</code>的优点在于简单易用，但由于所有任务都是由同一个线程来调度，因此所有任务都是串行执行的，同一时间只能有一个任务再执行，前一个任务的延迟或异常都将会影响到之后的任务。</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;Timer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">        TimerTask task1 = <span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                log.debug(<span class="string">&quot;task1&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        TimerTask task2 = <span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                log.debug(<span class="string">&quot;task2&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        log.debug(<span class="string">&quot;start...&quot;</span>);</span><br><span class="line">        timer.schedule(task1, <span class="number">1000</span>);</span><br><span class="line">        timer.schedule(task2, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021-05-01 22:34:08.514 [main] DEBUG Timer - start...</span><br><span class="line">2021-05-01 22:34:09.528 [Timer-0] DEBUG Timer - task1</span><br><span class="line">2021-05-01 22:34:11.541 [Timer-0] DEBUG Timer - task2</span><br></pre></td></tr></table></figure>

<p>由于task1的原因导致task2被延迟执行。</p>
<p>使用<code>ScheduledThreadPool</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;NewScheduledThreadPool&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewScheduledThreadPoolDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ScheduledExecutorService pool = Executors.newScheduledThreadPool(<span class="number">2</span>);</span><br><span class="line">        pool.schedule(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;task1&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        &#125;, <span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">        pool.schedule(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;task2&quot;</span>);</span><br><span class="line">        &#125;, <span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021-05-01 22:46:23.053 [pool-1-thread-2] DEBUG NewScheduledThreadPool - task2</span><br><span class="line">2021-05-01 22:46:23.053 [pool-1-thread-1] DEBUG NewScheduledThreadPool - task1</span><br></pre></td></tr></table></figure>

<p>task1出现延迟或者抛出异常都不会影响到task2的执行。</p>
<p><code>scheduleAtFixedRate</code>：创建并执行周期性操作。该操作在给定的初始延迟initialDelay后首先启用，随后在给定的周期period内启用。</p>
<p>作用：给一个执行的开始和下一个执行的开始加上给定的延迟period。</p>
<p>异常：如果任务的任何执行遇到异常，则会抑制后续执行。否则，任务将仅通过取消或终止执行程序来终止。如果此任务的任何执行时间超过其周期，则后续执行可能会较晚开始，但不会并发执行。『任务的异常被catch则不影响后续执行』</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 延迟一秒执行，间隔时间为Max&#123;设置间隔时间，线程执行时间&#125;</span></span><br><span class="line">pool.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class="line">    log.debug(<span class="string">&quot;running&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">1</span>, <span class="number">1</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>

<p><code>scheduleWithFixedDelay</code>：创建并执行周期性操作。该操作在给定的初始延迟initialDelay后首先启用，随后在给定的周期period内启用。</p>
<p>作用：给一个执行的终止和下一个执行的开始加上给定的延迟period。</p>
<p>异常：如果任务的任何执行遇到异常，则会抑制后续执行。否则，任务将仅通过取消或终止执行程序来终止。『任务的异常被catch则不影响后续执行』</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 延迟一秒执行，间隔时间为设置时间+线程睡眠时间</span></span><br><span class="line">pool.scheduleWithFixedDelay(() -&gt; &#123;</span><br><span class="line">    log.debug(<span class="string">&quot;running&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">1</span>, <span class="number">1</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>



<h3 id="6-3-4-正确处理异常"><a href="#6-3-4-正确处理异常" class="headerlink" title="6.3.4 正确处理异常"></a>6.3.4 正确处理异常</h3><p>线程池中的线程执行任务时，如果任务抛出了异常，默认是中断该任务而不是抛出异常或者打印异常信息。</p>
<ul>
<li>主动捕获异常</li>
<li>使用Future</li>
</ul>
<h3 id="6-3-5-实现定时任务"><a href="#6-3-5-实现定时任务" class="headerlink" title="6.3.5 实现定时任务"></a>6.3.5 实现定时任务</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;Schedule&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduleDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ScheduledExecutorService pool = Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 每周六15：16：00打印KHighness</span></span><br><span class="line">        solution(DayOfWeek.SUNDAY, <span class="number">15</span>, <span class="number">16</span>, <span class="number">00</span>, () -&gt; &#123; log.debug(<span class="string">&quot;KHighness&quot;</span>); &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定时间执行任务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> day     周几</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hour    几时</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> minute  几分</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> second  几秒</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> task    任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">solution</span><span class="params">(DayOfWeek day, <span class="keyword">int</span> hour, <span class="keyword">int</span> minute, <span class="keyword">int</span> second, Runnable task)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当前时间</span></span><br><span class="line">        LocalDateTime now = LocalDateTime.now();</span><br><span class="line">        <span class="comment">// 目标时间</span></span><br><span class="line">        LocalDateTime tar = now.withHour(hour).withMinute(minute).withSecond(second).with(day);</span><br><span class="line">        <span class="comment">// 如果当前时间 &gt; 目标时间，则为下周</span></span><br><span class="line">        <span class="keyword">if</span> (now.compareTo(tar) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            tar.plusWeeks(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 间隔时间</span></span><br><span class="line">        <span class="keyword">long</span> initialDelay = Duration.between(now, tar).toMillis();</span><br><span class="line">        <span class="comment">// 循环周期</span></span><br><span class="line">        <span class="keyword">long</span> period = <span class="number">7</span> * <span class="number">24</span> * <span class="number">3600</span> * <span class="number">1000</span>;</span><br><span class="line">        <span class="comment">// 执行任务</span></span><br><span class="line">        pool.scheduleAtFixedRate(task, initialDelay, period, TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="6-4-Tomcat线程池"><a href="#6-4-Tomcat线程池" class="headerlink" title="6.4 Tomcat线程池"></a>6.4 Tomcat线程池</h2><h3 id="6-4-1-总体结构"><a href="#6-4-1-总体结构" class="headerlink" title="6.4.1 总体结构"></a>6.4.1 总体结构</h3><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62082/image-20210502151900797.png" class="" title="image-20210502151900797">

<ul>
<li>LimitLatch用来限流，可以控制最大连接个数，类似JUC中的Semaphore</li>
<li>Acceptor只负责接收新的socket连接</li>
<li>Poller只负责监听socket channel是否有新的可读的I/O事件</li>
<li>一旦可读，封装一个任务对象socketProcessor，提交给Executor线程池处理</li>
<li>Executor线程池中的工作线程最终负责处理请求</li>
</ul>
<h3 id="6-4-2-不同之处"><a href="#6-4-2-不同之处" class="headerlink" title="6.4.2 不同之处"></a>6.4.2 不同之处</h3><p>Tomcat线程池扩展了ThreadPoolExecutor，行为稍有不同</p>
<ul>
<li>如果总线程数达到<code>maximumPoolSize</code><ul>
<li>这时不会立刻抛<code>RejectedExecutionException</code></li>
<li>而是尝试将任务放入队列，如果还失败，才抛出<code>RejectedExecutionException</code></li>
</ul>
</li>
</ul>
<p><code>tomcat-7.0.42</code>源码 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command, <span class="keyword">long</span> timeout, TimeUnit unit)</span> </span>&#123;</span><br><span class="line">    submittedCount.incrementAndGet();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.execute(command);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RejectedExecutionException rx) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">super</span>.getQueue() <span class="keyword">instanceof</span> TaskQueue) &#123;</span><br><span class="line">            <span class="keyword">final</span> TaskQueue queue = (TaskQueue)<span class="keyword">super</span>.getQueue();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 尝试将任务重新加入阻塞队列</span></span><br><span class="line">                <span class="keyword">if</span> (!queue.force(command, timeout, unit)) &#123;</span><br><span class="line">                    submittedCount.decrementAndGet();</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RejectedExecutionException(<span class="string">&quot;Queue capacity is full.&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException x) &#123;</span><br><span class="line">                <span class="comment">// 依然失败，抛出异常</span></span><br><span class="line">                submittedCount.decrementAndGet();</span><br><span class="line">                Thread.interrupted();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RejectedExecutionException(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            submittedCount.decrementAndGet();</span><br><span class="line">            <span class="keyword">throw</span> rx;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public boolean force(Runnable o, long timeout, TimeUnit unit) throws InterruptedException &#123;</span><br><span class="line">    if ( parent.isShutdown() )</span><br><span class="line">        throw new RejectedExecutionException(</span><br><span class="line">                &quot;Executor not running, can&#39;t force a command into the queue&quot;</span><br><span class="line">        );</span><br><span class="line">    return super.offer(o,timeout,unit); &#x2F;&#x2F;forces the item onto the queue, to be used if the task is rejected</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="6-4-3-可配置项"><a href="#6-4-3-可配置项" class="headerlink" title="6.4.3 可配置项"></a>6.4.3 可配置项</h3><p>Connector配置</p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>默认值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>acceptorThreadCount</td>
<td>1</td>
<td>accter线程数量</td>
</tr>
<tr>
<td>pollerThreadCount</td>
<td>1</td>
<td>poller线程数量</td>
</tr>
<tr>
<td>minSpareThreads</td>
<td>10</td>
<td>核心线程数，即corePoolSize</td>
</tr>
<tr>
<td>maxThreads</td>
<td>200</td>
<td>最大线程数，即maximumPoolSize</td>
</tr>
<tr>
<td>executor</td>
<td>-</td>
<td>Executor名称，用来引用下面的Executor</td>
</tr>
</tbody></table>
<p>Executor配置</p>
<table>
<thead>
<tr>
<th>配置项</th>
<th>默认值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>threadPriority</td>
<td>5</td>
<td>线程优先级</td>
</tr>
<tr>
<td>daemon</td>
<td>true</td>
<td>是否守护线程</td>
</tr>
<tr>
<td>minSpareThreads</td>
<td>25</td>
<td>核心线程数，即corePoolSize</td>
</tr>
<tr>
<td>maxThreads</td>
<td>200</td>
<td>最大线程数，即maximumPoolSize</td>
</tr>
<tr>
<td>maxIdleTime</td>
<td>60000</td>
<td>线程生存时间，单位是毫秒，默认值即1分钟</td>
</tr>
<tr>
<td>maxQueueSize</td>
<td>Integer.MAX_VALUE</td>
<td>队列长度</td>
</tr>
<tr>
<td>prestartminSpareThreads</td>
<td>false</td>
<td>核心线程是否在服务器启动时启动</td>
</tr>
</tbody></table>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62082/image-20210502155938527.png" class="" title="image-20210502155938527">



<h2 id="6-5-Fork-Join"><a href="#6-5-Fork-Join" class="headerlink" title="6.5 Fork/Join"></a>6.5 Fork/Join</h2><h3 id="6-5-1-概述"><a href="#6-5-1-概述" class="headerlink" title="6.5.1 概述"></a>6.5.1 概述</h3><p>Fork/Join是JDK1.7加入的新的线程池实现，它体现的是一种分治思想，适用于能够进行任务拆分的CPU密集型运算。</p>
<p>所谓的任务拆分，是将一个大任务拆分成算法上相同的小人物，直至不能拆分成可以直接求解。跟递归相关的一些计算，如归并排序、斐波那契数列，都可以用分治思想进行求解。</p>
<p>Fork/Join在分治的基础上加入了多线程，可以把每个任务的分解和合并交给不同的线程来完成，进一步提升了运算效率。</p>
<p>Fork/Join默认会创建与CPU核心数大小相同的线程池。</p>
<h3 id="6-5-2-使用"><a href="#6-5-2-使用" class="headerlink" title="6.5.2 使用"></a>6.5.2 使用</h3><p>提交给Fork/Join线程池的任务需要继承<code>RecursiveTask</code>（有返回值）或<code>RecuisiveAction</code>（没有返回值），例如下面定义了一个对1~n之间的整数求和的任务。</p>
<p>如下面定义了一个对1~n之间的整数求和的任务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;ForkJoin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkJoinDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ForkJoinPool pool = <span class="keyword">new</span> ForkJoinPool(<span class="number">4</span>);</span><br><span class="line">        System.out.println(pool.invoke(<span class="keyword">new</span> Task(<span class="number">5</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;Task&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Task</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.n = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;『&quot;</span> + n +  <span class="string">&quot;』&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Integer <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        Task tas = <span class="keyword">new</span> Task(n - <span class="number">1</span>);</span><br><span class="line">        tas.fork();</span><br><span class="line">        log.debug(<span class="string">&quot;fork: &#123;&#125; &#123;&#125;&quot;</span>, n, tas);</span><br><span class="line">        <span class="keyword">int</span> res = n + tas.join();</span><br><span class="line">        log.debug(<span class="string">&quot;join: &#123;&#125; + &#123;&#125; = &#123;&#125;&quot;</span>, n, tas, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021-05-02 17:04:41.631 [ForkJoinPool-1-worker-2] DEBUG Task - fork: 4 『3』</span><br><span class="line">2021-05-02 17:04:41.631 [ForkJoinPool-1-worker-1] DEBUG Task - fork: 5 『4』</span><br><span class="line">2021-05-02 17:04:41.631 [ForkJoinPool-1-worker-0] DEBUG Task - fork: 2 『1』</span><br><span class="line">2021-05-02 17:04:41.631 [ForkJoinPool-1-worker-3] DEBUG Task - fork: 3 『2』</span><br><span class="line">2021-05-02 17:04:41.634 [ForkJoinPool-1-worker-0] DEBUG Task - join: 2 + 『1』 &#x3D; 3</span><br><span class="line">2021-05-02 17:04:41.634 [ForkJoinPool-1-worker-3] DEBUG Task - join: 3 + 『2』 &#x3D; 6</span><br><span class="line">2021-05-02 17:04:41.634 [ForkJoinPool-1-worker-2] DEBUG Task - join: 4 + 『3』 &#x3D; 10</span><br><span class="line">2021-05-02 17:04:41.634 [ForkJoinPool-1-worker-1] DEBUG Task - join: 5 + 『4』 &#x3D; 15</span><br><span class="line">15</span><br></pre></td></tr></table></figure>

<p>流程：</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62082/image-20210502171007613.png" class="" title="image-20210502171007613">

<p>改进：任务拆分</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;AddTask&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddTask</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> begin;</span><br><span class="line">    <span class="keyword">int</span> end;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AddTask</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.begin = begin;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;『&quot;</span> + begin + <span class="string">&quot;, &quot;</span> + end + <span class="string">&quot;』&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Integer <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (begin == end) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;join: &#123;&#125;&quot;</span>, begin);</span><br><span class="line">            <span class="keyword">return</span> begin;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (end - begin == <span class="number">1</span>) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;join: &#123;&#125; + &#123;&#125; = &#123;&#125;&quot;</span>, begin, end, begin + end);</span><br><span class="line">            <span class="keyword">return</span> begin + end;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = begin + (end - begin &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        AddTask task1 = <span class="keyword">new</span> AddTask(begin, mid);</span><br><span class="line">        task1.fork();</span><br><span class="line">        AddTask task2 = <span class="keyword">new</span> AddTask(mid + <span class="number">1</span>, end);</span><br><span class="line">        task2.fork();</span><br><span class="line">        log.debug(<span class="string">&quot;fork: &#123;&#125; + &#123;&#125; = ?&quot;</span>, task1, task2);</span><br><span class="line">        <span class="keyword">int</span> res = task1.join() + task2.join();</span><br><span class="line">        log.debug(<span class="string">&quot;join: &#123;&#125; + &#123;&#125; = &#123;&#125;&quot;</span>, task1, task2, res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>流程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021-05-02 17:39:00.721 [ForkJoinPool-1-worker-0] DEBUG AddTask - join: 1 + 2 &#x3D; 3</span><br><span class="line">2021-05-02 17:39:00.721 [ForkJoinPool-1-worker-2] DEBUG AddTask - fork: 『1, 2』 + 『3, 3』 &#x3D; ?</span><br><span class="line">2021-05-02 17:39:00.721 [ForkJoinPool-1-worker-3] DEBUG AddTask - join: 4 + 5 &#x3D; 9</span><br><span class="line">2021-05-02 17:39:00.721 [ForkJoinPool-1-worker-1] DEBUG AddTask - fork: 『1, 3』 + 『4, 5』 &#x3D; ?</span><br><span class="line">2021-05-02 17:39:00.724 [ForkJoinPool-1-worker-0] DEBUG AddTask - join: 3</span><br><span class="line">2021-05-02 17:39:00.724 [ForkJoinPool-1-worker-2] DEBUG AddTask - join: 『1, 2』 + 『3, 3』 &#x3D; 6</span><br><span class="line">2021-05-02 17:39:00.724 [ForkJoinPool-1-worker-1] DEBUG AddTask - join: 『1, 3』 + 『4, 5』 &#x3D; 15</span><br><span class="line">15</span><br></pre></td></tr></table></figure>

<p>流程：</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62082/image-20210502174452155.png" class="" title="image-20210502174452155">

]]></content>
      <categories>
        <category>JUC</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JUC-5(共享模型之不可变)</title>
    <url>/posts/53165/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>不可变：如果一个对象子不能够修改其内部状态（属性），那么它就是线程安全的，因为不存在并发修改。</p>
<h2 id="7-1-不可变类的使用"><a href="#7-1-不可变类的使用" class="headerlink" title="7.1 不可变类的使用"></a>7.1 不可变类的使用</h2><h3 id="7-1-1-问题提出"><a href="#7-1-1-问题提出" class="headerlink" title="7.1.1 问题提出"></a>7.1.1 问题提出</h3><p><code>SimpleDateFormat</code>不是线程安全的，下列代码执行时会产生线程安全问题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;SimpleDateFormat&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleDateFormatDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat SDF = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String dateStr = <span class="string">&quot;2001-09-11 00:00:00.000&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    log.debug(SDF.parse(dateStr).toString());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.NumberFormatException: multiple points</span><br><span class="line">	at sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:<span class="number">1890</span>)</span><br><span class="line">	at sun.misc.FloatingDecimal.parseDouble(FloatingDecimal.java:<span class="number">110</span>)</span><br><span class="line">	at java.lang.Double.parseDouble(Double.java:<span class="number">538</span>)</span><br><span class="line">	at java.text.DigitList.getDouble(DigitList.java:<span class="number">169</span>)</span><br><span class="line">	at java.text.DecimalFormat.parse(DecimalFormat.java:<span class="number">2089</span>)</span><br><span class="line">	at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:<span class="number">1869</span>)</span><br><span class="line">	at java.text.SimpleDateFormat.parse(SimpleDateFormat.java:<span class="number">1514</span>)</span><br><span class="line">	at java.text.DateFormat.parse(DateFormat.java:<span class="number">364</span>)</span><br><span class="line">	at top.parak.immutable.SimpleDateFormatDemo.lambda$main$<span class="number">0</span>(SimpleDateFormatDemo.java:<span class="number">22</span>)</span><br><span class="line">	at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">29</span> <span class="number">11</span>:<span class="number">30</span>:<span class="number">23.116</span> [Thread-<span class="number">2</span>] DEBUG SimpleDateFormat - Sun Sep <span class="number">11</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1121</span></span><br><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">29</span> <span class="number">11</span>:<span class="number">30</span>:<span class="number">23.117</span> [Thread-<span class="number">9</span>] DEBUG SimpleDateFormat - Sun Sep <span class="number">11</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">1121</span></span><br><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">29</span> <span class="number">11</span>:<span class="number">30</span>:<span class="number">23.117</span> [Thread-<span class="number">5</span>] DEBUG SimpleDateFormat - Tue Sep <span class="number">11</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">2001</span></span><br></pre></td></tr></table></figure>



<h3 id="7-1-2-同步锁"><a href="#7-1-2-同步锁" class="headerlink" title="7.1.2 同步锁"></a>7.1.2 同步锁</h3><p>使用同步锁<code>synchronized</code>能解决安全问题，但是会带来性能问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (SDF) &#123;</span><br><span class="line">    log.debug(SDF.parse(dateStr).toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="7-1-3-不可变"><a href="#7-1-3-不可变" class="headerlink" title="7.1.3 不可变"></a>7.1.3 不可变</h3><p>使用JDK1.8中的不可变日期格式类<code>DateTimeFormatter</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;DateTimeFormatter&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTimeFormatterDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter DTF = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String dateStr = <span class="string">&quot;2001-09-11 00:00:00.000&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                TemporalAccessor date = DTF.parse(dateStr);</span><br><span class="line">                log.debug(<span class="string">&quot;&#123;&#125;&quot;</span>, date);</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="7-2-不可变类的设计"><a href="#7-2-不可变类的设计" class="headerlink" title="7.2 不可变类的设计"></a>7.2 不可变类的设计</h2><h3 id="7-1-1-final的使用"><a href="#7-1-1-final的使用" class="headerlink" title="7.1.1 final的使用"></a>7.1.1 final的使用</h3><p><code>Integer</code>、<code>Double</code>、<code>String</code>、<code>DateTimeFormatter</code>以及基本类型包装类，都是用final修饰的。</p>
<ul>
<li>属性用final修饰保证了该属性是只读的，不能修改</li>
<li>类用final修饰保证了该类中的方法不能被覆盖，防止子类无意间破坏不可变性</li>
</ul>
<h3 id="7-2-2-保护性拷贝"><a href="#7-2-2-保护性拷贝" class="headerlink" title="7.2.2 保护性拷贝"></a>7.2.2 保护性拷贝</h3><p>以<code>String</code>的<code>substring</code>方法为例，方法的最后还是<code>new String</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (beginIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(beginIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (endIndex &gt; value.length) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(endIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> subLen = endIndex - beginIndex;</span><br><span class="line">    <span class="keyword">if</span> (subLen &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StringIndexOutOfBoundsException(subLen);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ((beginIndex == <span class="number">0</span>) &amp;&amp; (endIndex == value.length)) ? <span class="keyword">this</span></span><br><span class="line">        : <span class="keyword">new</span> String(value, beginIndex, subLen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种创建副本对象来避免共享的手段称为保护性拷贝（defensive copy）。</p>
<h3 id="7-2-3-模式之享元"><a href="#7-2-3-模式之享元" class="headerlink" title="7.2.3 模式之享元"></a>7.2.3 模式之享元</h3><p>定义：运用共享技术来有效地支持大量细粒度对象的复用。</p>
<p>优势：相同对象只保存一份，这降低了系统中对象的数量，降低内存压力。</p>
<p>在JDK中<code>Boolean</code>、<code>Byte</code>、<code>Short</code>、<code>Long</code>、<code>Character</code>等包装类提供了<code>valueOf</code>方法。</p>
<p>例如<code>Longh.valueOf()</code>，在-128~127之间的Long对象，在这个范围内会用缓存对象，超过这个范围，才会信件Long对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title">valueOf</span><span class="params">(<span class="keyword">long</span> l)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> offset = <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= -<span class="number">128</span> &amp;&amp; l &lt;= <span class="number">127</span>) &#123; <span class="comment">// will cache</span></span><br><span class="line">        <span class="keyword">return</span> LongCache.cache[(<span class="keyword">int</span>)l + offset];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Long(l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li><code>Byte</code>、<code>Short</code>、<code>Long</code>缓存的范围：-128~127</li>
<li><code>Character</code>缓存的范围：0~127</li>
<li><code>Integer</code>的默认范围：-128~127，最小值不能变，最大值通过虚拟机参数<code>-Djava.lang.Integer.IntegerCache.high</code>来改变。</li>
<li><code>Boolean</code>缓存：true / false</li>
</ul>
<h3 id="7-2-4-DIY连接池"><a href="#7-2-4-DIY连接池" class="headerlink" title="7.2.4 DIY连接池"></a>7.2.4 DIY连接池</h3><p>例如：一个线上商城应用，QPS 达到数千，如果每次都重新创建和关闭数据库连接，性能会受到极大影响。 这时预先创建好一批连接，放入连接池。一次请求到达后，从连接池获取连接，使用完毕后再还回连接池，这样既节约了连接的创建和关闭时间，也实现了连接的重用，不至于让庞大的连接数压垮数据库。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicIntegerArray;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021-04-29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PoolDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Pool pool = <span class="keyword">new</span> Pool(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">               Connection connection = pool.get();</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   TimeUnit.MILLISECONDS.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">1000</span>));</span><br><span class="line">               &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">               pool.free(connection);</span><br><span class="line">            &#125;, <span class="string">&quot;T-&quot;</span> + (i + <span class="number">1</span>)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;Pool&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接池大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> poolSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Connection[] connections;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接状态数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicIntegerArray states;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化连接池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pool</span><span class="params">(<span class="keyword">int</span> pollSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.poolSize = pollSize;</span><br><span class="line">        connections = <span class="keyword">new</span> Connection[pollSize];</span><br><span class="line">        states = <span class="keyword">new</span> AtomicIntegerArray(<span class="keyword">new</span> <span class="keyword">int</span>[pollSize]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pollSize; i++) &#123;</span><br><span class="line">            connections[i] = <span class="keyword">new</span> ParaKConnection(<span class="string">&quot;连接&quot;</span> + (i + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取一个连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 查看是否有空闲连接</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; poolSize; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (states.get(i) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (states.compareAndSet(i, <span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                        log.debug(<span class="string">&quot;get &#123;&#125;&quot;</span>, connections[i]);</span><br><span class="line">                        <span class="keyword">return</span> connections[i];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 没有空闲连接则等待</span></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;wait...&quot;</span>);</span><br><span class="line">                    <span class="keyword">this</span>.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放一个连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">free</span><span class="params">(Connection connection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; poolSize; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (connections[i] == connection) &#123;</span><br><span class="line">                states.set(i, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;free &#123;&#125;&quot;</span>, connection);</span><br><span class="line">                    <span class="keyword">this</span>.notifyAll();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParaKConnection</span> <span class="keyword">implements</span> <span class="title">Connection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParaKConnection</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ParaKConnection[&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可改进点：</p>
<ul>
<li>连接的动态增长与收缩</li>
<li>连接保活（可用性检测）</li>
<li>等待超时处理</li>
<li>分布式hash</li>
</ul>
<h2 id="7-3-final原理"><a href="#7-3-final原理" class="headerlink" title="7.3 final原理"></a>7.3 final原理</h2><h3 id="7-3-1-设置final变量的原理"><a href="#7-3-1-设置final变量的原理" class="headerlink" title="7.3.1 设置final变量的原理"></a>7.3.1 设置final变量的原理</h3><p>对于以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> k = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>init字节码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 aload_0</span><br><span class="line">1 invokespecial #1 &lt;java&#x2F;lang&#x2F;Object.&lt;init&gt;&gt;</span><br><span class="line">4 aload_0</span><br><span class="line">5 iconst_3</span><br><span class="line">6 putfield #2 &lt;top&#x2F;parak&#x2F;immutable&#x2F;FinalDemo.k&gt;</span><br><span class="line">&lt;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 写屏障</span><br><span class="line">9 return</span><br></pre></td></tr></table></figure>

<p>发现final变量的赋值也会通过putfield指令来完成，同样在这条指令之后也会加入写屏障，保证在其他线程读到它的值时不会出现为0的情况。</p>
<h3 id="7-3-2-获取final变量的原理"><a href="#7-3-2-获取final变量的原理" class="headerlink" title="7.3.2 获取final变量的原理"></a>7.3.2 获取final变量的原理</h3><p>对于以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> A = <span class="number">33333</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> B = <span class="number">33333</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> FinalDemo().a);</span><br><span class="line">        System.out.println(A);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> FinalDemo().b);</span><br><span class="line">        System.out.println(B);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main字节码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> # 获取打印流</span><br><span class="line"> 0 getstatic #4 &lt;java&#x2F;lang&#x2F;System.out&gt;</span><br><span class="line"> </span><br><span class="line"> # 打印a</span><br><span class="line"> 3 new #5 &lt;top&#x2F;parak&#x2F;immutable&#x2F;FinalDemo&gt;</span><br><span class="line"> 6 dup</span><br><span class="line"> 7 invokespecial #6 &lt;top&#x2F;parak&#x2F;immutable&#x2F;FinalDemo.&lt;init&gt;&gt;</span><br><span class="line">10 getfield #2 &lt;top&#x2F;parak&#x2F;immutable&#x2F;FinalDemo.a&gt;</span><br><span class="line">13 invokevirtual #7 &lt;java&#x2F;io&#x2F;PrintStream.println&gt;</span><br><span class="line"></span><br><span class="line"># 打印A</span><br><span class="line">16 getstatic #4 &lt;java&#x2F;lang&#x2F;System.out&gt;</span><br><span class="line"># 不加final，获取A变量的时候使用getStatic，使用共享内存</span><br><span class="line">19 getstatic #8 &lt;top&#x2F;parak&#x2F;immutable&#x2F;FinalDemo.A&gt;  </span><br><span class="line">22 invokevirtual #7 &lt;java&#x2F;io&#x2F;PrintStream.println&gt;</span><br><span class="line">25 getstatic #4 &lt;java&#x2F;lang&#x2F;System.out&gt;</span><br><span class="line"></span><br><span class="line"># 打印b</span><br><span class="line">28 new #5 &lt;top&#x2F;parak&#x2F;immutable&#x2F;FinalDemo&gt;</span><br><span class="line">31 dup</span><br><span class="line">32 invokespecial #6 &lt;top&#x2F;parak&#x2F;immutable&#x2F;FinalDemo.&lt;init&gt;&gt;</span><br><span class="line">35 invokevirtual #9 &lt;java&#x2F;lang&#x2F;Object.getClass&gt;</span><br><span class="line">38 pop</span><br><span class="line">39 iconst_3</span><br><span class="line">40 invokevirtual #7 &lt;java&#x2F;io&#x2F;PrintStream.println&gt;</span><br><span class="line"></span><br><span class="line"># 打印B</span><br><span class="line">43 getstatic #4 &lt;java&#x2F;lang&#x2F;System.out&gt;</span><br><span class="line"># 加了final，没有直接去获取A变量，而是将A复制到当前Java虚拟机栈中</span><br><span class="line">46 ldc #10 &lt;33333&gt;</span><br><span class="line">48 invokevirtual #7 &lt;java&#x2F;io&#x2F;PrintStream.println&gt;</span><br><span class="line">51 return</span><br></pre></td></tr></table></figure>

<p>通过观察字节码可以发现，final修饰的变量有栈内存读取速度的优化。</p>
<h2 id="7-4-无状态"><a href="#7-4-无状态" class="headerlink" title="7.4 无状态"></a>7.4 无状态</h2><p>设计Servlet时为了保证其线程安全，都会有这样的建议，不要为Servlet设置成员变量，这种没有任何成员变量的类是线程安全的。</p>
<p>因为成员变量保存的数据也可以称为无状态信息，因为没有成员变量就称之为【无状态】。</p>
]]></content>
      <categories>
        <category>JUC</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JUC-4(共享模型之无锁)</title>
    <url>/posts/62265/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>主要内容</p>
</blockquote>
<ul>
<li>CAS与volatile</li>
<li>原子整数</li>
<li>原子引用</li>
<li>原子累加器</li>
<li>Unsafe</li>
</ul>
<h2 id="4-1-问题提出"><a href="#4-1-问题提出" class="headerlink" title="4.1 问题提出"></a>4.1 问题提出</h2><h3 id="4-1-1-提取款问题"><a href="#4-1-1-提取款问题" class="headerlink" title="4.1.1 提取款问题"></a>4.1.1 提取款问题</h3><p>有如下需求，保证account、withdraw取款方法的线程安全。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取余额</span></span><br><span class="line">    <span class="function">Integer <span class="title">geBalance</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 取款</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(Integer amount)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法内会启动1000个线程，每个线程做-10元操作</span></span><br><span class="line"><span class="comment">     * 如果初始余额为10000，那么正确的结果应该是0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> account 账户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        List&lt;Thread&gt; ts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            ts.add(<span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                account.withdraw(<span class="number">10</span>);</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line">        ts.forEach(Thread::start);</span><br><span class="line">        ts.forEach(t -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t.join();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        ts.forEach(t -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t.join();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">long</span> end = System.nanoTime();</span><br><span class="line">        System.out.printf(<span class="string">&quot;final balance: %d, spend time(ms): %d] &quot;</span>, account.geBalance(), (end - start) / <span class="number">1000_000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>显然以上做法无法保证线程安全。</p>
<h3 id="4-1-2-锁解决方案"><a href="#4-1-2-锁解决方案" class="headerlink" title="4.1.2 锁解决方案"></a>4.1.2 锁解决方案</h3><p>保护共享变量，给临界区加锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccountSafe</span> <span class="keyword">implements</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 余额</span></span><br><span class="line">    <span class="keyword">private</span> Integer balance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountSafe</span><span class="params">(Integer balance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">geBalance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(Integer amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.balance -= amount;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-1-2-无锁解决方案"><a href="#4-1-2-无锁解决方案" class="headerlink" title="4.1.2 无锁解决方案"></a>4.1.2 无锁解决方案</h3><p>使用原子整数进行CAS操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccountCAS</span> <span class="keyword">implements</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AtomicInteger balance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountCAS</span><span class="params">(Integer balance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.balance = <span class="keyword">new</span> AtomicInteger(balance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">geBalance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> balance.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(Integer amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 获取余额的最新值</span></span><br><span class="line">            <span class="keyword">int</span> prev = <span class="keyword">this</span>.balance.get();</span><br><span class="line">            <span class="comment">// 修改后的余额</span></span><br><span class="line">            <span class="keyword">int</span> next = prev - amount;</span><br><span class="line">            <span class="comment">// 同步到主存</span></span><br><span class="line">            <span class="comment">// CAS(预期值，修改值) =&gt; boolean(是否修改成功)</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.balance.compareAndSet(prev, next)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-1-3-测试"><a href="#4-1-3-测试" class="headerlink" title="4.1.3 测试"></a>4.1.3 测试</h3><p>编写以下代码进行测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;[Unsafe =&gt; &quot;</span>);</span><br><span class="line">        Account a1 = <span class="keyword">new</span> AccountUnsafe(<span class="number">10000</span>);</span><br><span class="line">        Account.demo(a1);</span><br><span class="line">        System.out.print(<span class="string">&quot;[synchronized =&gt; &quot;</span>);</span><br><span class="line">        Account a2 = <span class="keyword">new</span> AccountSafe(<span class="number">10000</span>);</span><br><span class="line">        Account.demo(a2);</span><br><span class="line">        System.out.print(<span class="string">&quot;[compareAndSet =&gt; &quot;</span>);</span><br><span class="line">        Account a3 = <span class="keyword">new</span> AccountCAS(<span class="number">10000</span>);</span><br><span class="line">        Account.demo(a3);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试脚本：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> <span class="operator">-le</span> <span class="number">10</span>; <span class="variable">$i</span>++) &#123; java top.parak.none.AccountDemo &#125;</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62265/image-20210426225654053.png" class="" title="image-20210426225654053">



<h3 id="4-1-5-compareAndSet"><a href="#4-1-5-compareAndSet" class="headerlink" title="4.1.5 compareAndSet"></a>4.1.5 compareAndSet</h3><p>compareAndSet，简称CAS（也有Compare And Swap的说法），它必须是原子操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取余额的最新值</span></span><br><span class="line">    <span class="keyword">int</span> prev = <span class="keyword">this</span>.balance.get();</span><br><span class="line">    <span class="comment">// 修改后的余额</span></span><br><span class="line">    <span class="keyword">int</span> next = prev - amount;</span><br><span class="line">    <span class="comment">// 同步到主存</span></span><br><span class="line">    <span class="comment">// CAS(预期值，修改值) =&gt; boolean(是否修改成功)</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.balance.compareAndSet(prev, next)) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62265/image-20210426230136937.png" class="" title="image-20210426230136937">



<h2 id="4-2-CAS与volatile"><a href="#4-2-CAS与volatile" class="headerlink" title="4.2 CAS与volatile"></a>4.2 CAS与volatile</h2><h3 id="4-2-1-volatile"><a href="#4-2-1-volatile" class="headerlink" title="4.2.1 volatile"></a>4.2.1 volatile</h3><p>获取共享变量时，为了保证该变量的可见性，需要使用volatile修饰。</p>
<p>它可以用来修饰成员变量和静态成员变量，它可以避免线程从自己的工作缓存中查找变量的值，必须到主存中获取它的值，线程操作volatile变量都是操作主存。即一个线程对volatile变量的修改，对另一个线程可见。</p>
<p>CAS必须借助volatile才能读取到共享变量的最新值来实现【比较并交换】的效果。</p>
<h3 id="4-2-2-为什么CAS-重试效率高？"><a href="#4-2-2-为什么CAS-重试效率高？" class="headerlink" title="4.2.2 为什么CAS+重试效率高？"></a>4.2.2 为什么CAS+重试效率高？</h3><ul>
<li>在无锁情况下，即使重试失败，线程始终在高速运行，没有停歇，而synchronized会让线程在没有获得锁的时候，发生上下文切换，进入阻塞。</li>
<li>但是，在无锁情况下，因为线程要保持运行，需要额外CPU的支持，CPU在这里就好比高速跑道，没有额外的跑道，线程想高速运行也无从谈起，虽然也不会进入阻塞，但由于没有分到时间片，仍然会进入可运行状态，还是会导致上下文切换。</li>
</ul>
<h3 id="4-2-3-CAS应用场景"><a href="#4-2-3-CAS应用场景" class="headerlink" title="4.2.3 CAS应用场景"></a>4.2.3 CAS应用场景</h3><p>结合CAS和volatile可以实现无锁并发，适用于线程数少、多核CPU的场景下：</p>
<ul>
<li>CAS是基于乐观锁的思想：非常乐观，假设没有别的线程来修改共享变量，如果其他线程修改了当前线程就再次重试。</li>
<li>synchronized是基于悲观锁的思想：非常悲观，提防其他线程来修改共享变量，当前线程获取资源就立马上锁，其他争抢资源失败的线程进入阻塞状态，修改结束才开锁，</li>
<li>CAS体现的是无锁并发、无阻塞并发<ul>
<li>因为没有使用无锁并发、无阻塞并发，所以线程不会陷入阻塞。</li>
<li>但是如果竞争激烈，重试必然 频繁发生，反而效率会收到影响。</li>
</ul>
</li>
</ul>
<h3 id="4-2-4-CAS特点"><a href="#4-2-4-CAS特点" class="headerlink" title="4.2.4 CAS特点"></a>4.2.4 CAS特点</h3><p>优点：</p>
<ul>
<li>可以保证变量操作的原子性</li>
<li>并发量低时，CAS效率高于synchronized</li>
<li>在线程对共享资源占用时间较短的情况下，使用CAS机制效率也会较高</li>
</ul>
<p>缺点：</p>
<ul>
<li>无法解决ABA问题</li>
<li>可能会消耗较高的CPU</li>
<li>不能保证代码块的原子性</li>
</ul>
<h2 id="4-3-原子整数"><a href="#4-3-原子整数" class="headerlink" title="4.3 原子整数"></a>4.3 原子整数</h2><blockquote>
<p>JUC提供</p>
</blockquote>
<ul>
<li><code>AtomicBoolean</code></li>
<li><code>AtomicInteger</code></li>
<li><code>AtomicLong</code></li>
</ul>
<blockquote>
<p><code>AtomicInteger</code>-API</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62265/image-20210427144944862.png" class="" title="image-20210427144944862">



<h2 id="4-4-原子引用"><a href="#4-4-原子引用" class="headerlink" title="4.4 原子引用"></a>4.4 原子引用</h2><blockquote>
<p>JUC提供</p>
</blockquote>
<ul>
<li><code>AtomicReference</code>：普通原子引用类型，对对象进行原子操作</li>
<li><code>AtomicStampedReference</code>：带int类型版本戳的原子引用类型，记录更改次数</li>
<li><code>AtomicMarkableReference</code>：带boolean类型版本戳的原子引用类型，记录是否更改</li>
</ul>
<p>作用：保证引用类型的共享变量是线程安全的。</p>
<p>使用<code>BigDemical</code>实现提取款问题的线程安全解决方案：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecimalAccountCAS</span> <span class="keyword">implements</span> <span class="title">DecimalAccount</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AtomicReference&lt;BigDecimal&gt; balance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DecimalAccountCAS</span><span class="params">(BigDecimal balance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.balance = <span class="keyword">new</span> AtomicReference&lt;&gt;(balance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">getBalance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> balance.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(BigDecimal amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            BigDecimal prev = balance.get();</span><br><span class="line">            BigDecimal next = prev.subtract(amount);</span><br><span class="line">            <span class="keyword">if</span> (balance.compareAndSet(prev, next)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">DecimalAccount</span> </span>&#123;</span><br><span class="line">    <span class="function">BigDecimal <span class="title">getBalance</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(BigDecimal amount)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-4-1-ABA问题"><a href="#4-4-1-ABA问题" class="headerlink" title="4.4.1 ABA问题"></a>4.4.1 ABA问题</h3><p>如下程序所示，虽然在<code>other</code>方法中存在两个线程对共享变量进行了修改，但是经过了两轮修改又变成了原值，main线程对修改共享变量的过程是不可见的，这种操作对业务代码并无影响。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;ABAAtomicReference&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ABAAtomicReferenceDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicReference&lt;String&gt; ref = <span class="keyword">new</span> AtomicReference&lt;&gt;(<span class="string">&quot;A&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;main start...&quot;</span>);</span><br><span class="line">        String prev = ref.get();</span><br><span class="line">        other();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;change A -&gt; K ? &#123;&#125;&quot;</span>, ref.compareAndSet(prev, <span class="string">&quot;K&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">other</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; log.debug(<span class="string">&quot;change A -&gt; B ? &#123;&#125;&quot;</span>, ref.compareAndSet(ref.get(), <span class="string">&quot;B&quot;</span>)), <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; log.debug(<span class="string">&quot;change B -&gt; A ? &#123;&#125;&quot;</span>, ref.compareAndSet(ref.get(), <span class="string">&quot;A&quot;</span>)), <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021-04-27 17:29:12.538 [main] DEBUG ABAAtomicReference - main start...</span><br><span class="line">2021-04-27 17:29:12.575 [A] DEBUG ABAAtomicReference - change B -&gt; A ? true</span><br><span class="line">2021-04-27 17:29:12.575 [B] DEBUG ABAAtomicReference - change A -&gt; B ? true</span><br><span class="line">2021-04-27 17:29:13.580 [main] DEBUG ABAAtomicReference - change A -&gt; K ? true</span><br></pre></td></tr></table></figure>

<p>虽然ABA对业务没有影响，但是如何让主线程感知到其他线程的修改呢？</p>
<h3 id="4-4-2-AtomicStampedReference"><a href="#4-4-2-AtomicStampedReference" class="headerlink" title="4.4.2 AtomicStampedReference"></a>4.4.2 AtomicStampedReference</h3><p>解决ABA问题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;ABAAtomicStampedReference&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ABAAtomicStampedReferenceDemo</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> AtomicStampedReference&lt;String&gt; ref = <span class="keyword">new</span> AtomicStampedReference&lt;&gt;(<span class="string">&quot;A&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;main start...&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> stamp = ref.getStamp();</span><br><span class="line">        other();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">boolean</span> res = ref.compareAndSet(ref.getReference(), <span class="string">&quot;K&quot;</span>, stamp, stamp + <span class="number">1</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;change A -&gt; K ? &#123;&#125;&quot;</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">other</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">int</span> stamp = ref.getStamp();</span><br><span class="line">            <span class="keyword">boolean</span> res = ref.compareAndSet(ref.getReference(), <span class="string">&quot;B&quot;</span>, stamp, stamp + <span class="number">1</span>);</span><br><span class="line">            log.debug(<span class="string">&quot;change A -&gt; B ? &#123;&#125;&quot;</span>, res);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">int</span> stamp = ref.getStamp();</span><br><span class="line">            <span class="keyword">boolean</span> res = ref.compareAndSet(ref.getReference(), <span class="string">&quot;A&quot;</span>, stamp, stamp + <span class="number">1</span>);</span><br><span class="line">            log.debug(<span class="string">&quot;change B -&gt; A ? &#123;&#125;&quot;</span>, res);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021-04-27 18:18:00.754 [main] DEBUG ABAAtomicStampedReference - main start...</span><br><span class="line">2021-04-27 18:18:00.787 [A] DEBUG ABAAtomicStampedReference - change B -&gt; A ? true</span><br><span class="line">2021-04-27 18:18:00.787 [B] DEBUG ABAAtomicStampedReference - change A -&gt; B ? true</span><br><span class="line">2021-04-27 18:18:01.792 [main] DEBUG ABAAtomicStampedReference - change A -&gt; K ? false</span><br></pre></td></tr></table></figure>



<h3 id="4-4-3-AtomMarkableReference"><a href="#4-4-3-AtomMarkableReference" class="headerlink" title="4.4.3 AtomMarkableReference"></a>4.4.3 AtomMarkableReference</h3><p>不关心引用变量更改了几次，只是单纯的关心是否更改过。</p>
<p>案例：</p>
<p>家里有清洁机器人和保洁阿姨，垃圾袋满时，需要更换，机器人换了阿姨则不需要换，反之亦然。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;ABAAtomicMarkableReference&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ABAAtomicMarkableReferenceDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> GarbageBag bag = <span class="keyword">new</span> GarbageBag(<span class="string">&quot;装满垃圾&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicMarkableReference&lt;GarbageBag&gt; ref = <span class="keyword">new</span> AtomicMarkableReference&lt;&gt;(bag, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;家里需要换垃圾袋...&quot;</span>);</span><br><span class="line">        GarbageBag prev = ref.getReference();</span><br><span class="line">        robot();</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">        aunt();</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">        log.debug(ref.getReference().toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清洁机器人</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">robot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;清洁机器人开始打扫卫生...&quot;</span>);</span><br><span class="line">            <span class="keyword">boolean</span> res = ref.compareAndSet(ref.getReference(), <span class="keyword">new</span> GarbageBag(<span class="string">&quot;新垃圾袋&quot;</span>),</span><br><span class="line">                    <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">            log.debug(<span class="string">&quot;机器人是否换了垃圾袋 ? &#123;&#125;&quot;</span>, res);</span><br><span class="line">        &#125;, <span class="string">&quot;robot&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保洁阿姨</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">aunt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;保洁阿姨开始打扫卫生...&quot;</span>);</span><br><span class="line">            bag.setDesc(<span class="string">&quot;空垃圾袋&quot;</span>);</span><br><span class="line">            <span class="keyword">boolean</span> res = ref.compareAndSet(ref.getReference(), <span class="keyword">new</span> GarbageBag(<span class="string">&quot;新垃圾袋&quot;</span>),</span><br><span class="line">                    <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">            log.debug(<span class="string">&quot;阿姨是否换了垃圾袋 ? &#123;&#125;&quot;</span>, res);</span><br><span class="line">        &#125;, <span class="string">&quot;aunt&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GarbageBag</span> </span>&#123;</span><br><span class="line">    String desc;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GarbageBag</span><span class="params">(String desc)</span> </span>&#123; <span class="keyword">this</span>.desc = desc; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDesc</span><span class="params">(String desc)</span> </span>&#123; <span class="keyword">this</span>.desc = desc; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;GarbageBag[desc=&#x27;&quot;</span> + desc + <span class="string">&quot;&#x27;]&quot;</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021-04-27 20:01:20.764 [main] DEBUG ABAAtomicMarkableReference - 需要换垃圾袋...</span><br><span class="line">2021-04-27 20:01:20.796 [robot] DEBUG ABAAtomicMarkableReference - 清洁机器人开始打扫卫生...</span><br><span class="line">2021-04-27 20:01:20.796 [robot] DEBUG ABAAtomicMarkableReference - 机器人是否换了垃圾袋 ? true</span><br><span class="line">2021-04-27 20:01:20.809 [aunt] DEBUG ABAAtomicMarkableReference - 保洁阿姨开始打扫卫生...</span><br><span class="line">2021-04-27 20:01:20.809 [aunt] DEBUG ABAAtomicMarkableReference - 阿姨是否换了垃圾袋 ? false</span><br><span class="line">2021-04-27 20:01:20.823 [main] DEBUG ABAAtomicMarkableReference - GarbageBag[desc&#x3D;&#39;新垃圾袋&#39;]</span><br></pre></td></tr></table></figure>



<h2 id="4-5-原子数组"><a href="#4-5-原子数组" class="headerlink" title="4.5 原子数组"></a>4.5 原子数组</h2><blockquote>
<p>JUC提供</p>
</blockquote>
<ul>
<li><code>AtomicIntegerArray</code></li>
<li><code>AtomicLongArray</code></li>
<li><code>AtomicReferenceArray</code></li>
</ul>
<p>作用：保证数组内的元素的线程安全。</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;AtomicArray&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicArrayDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        demo(</span><br><span class="line">                () -&gt; <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>],</span><br><span class="line">                array -&gt; array.length,</span><br><span class="line">                (array, index) -&gt; array[index]++,</span><br><span class="line">                array -&gt;  log.debug(<span class="string">&quot;普通数组：&#123;&#125;&quot;</span>, Arrays.toString(array))</span><br><span class="line">        );</span><br><span class="line">        demo(</span><br><span class="line">                () -&gt; <span class="keyword">new</span> AtomicIntegerArray(<span class="number">10</span>),</span><br><span class="line">                AtomicIntegerArray::length,</span><br><span class="line">                AtomicIntegerArray::getAndIncrement,</span><br><span class="line">                array -&gt; log.debug(<span class="string">&quot;安全数组：&#123;&#125;&quot;</span>, array)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arraySupplier   提供数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lengthFunction  获取数组长度的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> putConsumer     指定元素的自增方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> printConsumer   打印数组元素的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@apiNote</span></span></span><br><span class="line"><span class="comment">     * &lt;p&gt; Supplier 提供者 无中生有         () -&gt; 结果 &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; Function  函数  一个参数一个结果 (参数) -&gt; 结果  | BiFunction (参数1，参数2) -&gt; 结果 &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; Consumer 消费者 一个参数没有结果 (参数) -&gt; Void  | BiConsumer (参数1，参数2) -&gt; Void &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">demo</span><span class="params">(Supplier&lt;T&gt; arraySupplier, Function&lt;T, Integer&gt; lengthFunction,</span></span></span><br><span class="line"><span class="function"><span class="params">            BiConsumer&lt;T, Integer&gt; putConsumer, Consumer&lt;T&gt; printConsumer)</span> </span>&#123;</span><br><span class="line">        List&lt;Thread&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        T array = arraySupplier.get();</span><br><span class="line">        <span class="keyword">int</span> length = lengthFunction.apply(array);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10000</span>; j++) &#123; <span class="comment">// 正确结果应该是数组元素都为10000</span></span><br><span class="line">                    putConsumer.accept(array, j % length);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        list.forEach(Thread::start);</span><br><span class="line">        list.forEach(t -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t.join();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        printConsumer.accept(array);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021-04-27 21:09:01.160 [main] DEBUG AtomicArray - 普通数组：[6531, 6533, 6501, 6566, 6515, 6508, 6499, 6519, 6489, 6527]</span><br><span class="line">2021-04-27 21:09:01.166 [main] DEBUG AtomicArray - 安全数组：[10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000]</span><br></pre></td></tr></table></figure>



<h2 id="4-6-字段更新器"><a href="#4-6-字段更新器" class="headerlink" title="4.6 字段更新器"></a>4.6 字段更新器</h2><blockquote>
<p>JUC提供</p>
</blockquote>
<ul>
<li><code>AtomicReferenceFeildUpdater</code>：引用类型的属性</li>
<li><code>AtomicIntegerFieldUpdater</code>：整形的属性</li>
<li><code>AtomicLongFeildUpdater</code>：长整形的属性</li>
</ul>
<p>注意：利用字段更新器，可以针对对象的某个域（Field）进行原子操作，只能配合volatile修饰的字段使用，否则会出现异常。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalArgumentException: Must be volatile type</span><br></pre></td></tr></table></figure>



<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;AtomicFieldUpdater&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicFieldUpdaterDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        AtomicReferenceFieldUpdater updater = AtomicReferenceFieldUpdater.newUpdater(Student.class, String.class, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;update ? &#123;&#125;&quot;</span>, updater.compareAndSet(stu, <span class="keyword">null</span>, <span class="string">&quot;RubbishK&quot;</span>));</span><br><span class="line">        log.debug(<span class="string">&quot;update ? &#123;&#125;&quot;</span>, updater.compareAndSet(stu, stu.getName(), <span class="string">&quot;FlowerK&quot;</span>));</span><br><span class="line">        log.debug(stu.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">&quot;Student[name=&#x27;&quot;</span> + name + <span class="string">&quot;&#x27;]&quot;</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021-04-27 21:36:51.784 [main] DEBUG AtomicFieldUpdater - update ? true</span><br><span class="line">2021-04-27 21:36:51.786 [main] DEBUG AtomicFieldUpdater - update ? true</span><br><span class="line">2021-04-27 21:36:51.786 [main] DEBUG AtomicFieldUpdater - Student[name&#x3D;&#39;FlowerK&#39;]</span><br></pre></td></tr></table></figure>



<h2 id="4-7-原子累加器"><a href="#4-7-原子累加器" class="headerlink" title="4.7 原子累加器"></a>4.7 原子累加器</h2><blockquote>
<p>JUC提供</p>
</blockquote>
<ul>
<li><code>LongAddr</code></li>
<li><code>LongAccumulator</code></li>
<li><code>DouleAddr</code></li>
<li><code>DoubleAccumulator</code></li>
</ul>
<h3 id="4-7-1-累加性能比较"><a href="#4-7-1-累加性能比较" class="headerlink" title="4.7.1 累加性能比较"></a>4.7.1 累加性能比较</h3><p>累加性能比较<code>AtomicLong</code>，<code>LongAddr</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;Compare&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PerformanceCompareDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            demo(AtomicLong::<span class="keyword">new</span>, AtomicLong::getAndIncrement);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            demo(LongAdder::<span class="keyword">new</span>, LongAdder::increment);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">demo</span><span class="params">(Supplier&lt;T&gt; supplier, Consumer&lt;T&gt; consumer)</span> </span>&#123;</span><br><span class="line">        T adder = supplier.get();</span><br><span class="line">        <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line">        List&lt;Thread&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">40</span>; i++) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">50_0000</span>; k++) &#123;</span><br><span class="line">                    consumer.accept(adder);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">        list.forEach(Thread::start);</span><br><span class="line">        list.forEach(t -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t.join();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">long</span> end = System.nanoTime();</span><br><span class="line">        log.debug(<span class="string">&quot;&#123;&#125; cost: &#123;&#125;(ns)&quot;</span>, adder.getClass().getSimpleName(), (end - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">27</span> <span class="number">22</span>:<span class="number">34</span>:<span class="number">29.842</span> [main] DEBUG Compare - AtomicLong cost: <span class="number">363865900</span>(ns)</span><br><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">27</span> <span class="number">22</span>:<span class="number">34</span>:<span class="number">30.176</span> [main] DEBUG Compare - AtomicLong cost: <span class="number">331326300</span>(ns)</span><br><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">27</span> <span class="number">22</span>:<span class="number">34</span>:<span class="number">30.565</span> [main] DEBUG Compare - AtomicLong cost: <span class="number">388361700</span>(ns)</span><br><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">27</span> <span class="number">22</span>:<span class="number">34</span>:<span class="number">30.961</span> [main] DEBUG Compare - AtomicLong cost: <span class="number">396090500</span>(ns)</span><br><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">27</span> <span class="number">22</span>:<span class="number">34</span>:<span class="number">31.349</span> [main] DEBUG Compare - AtomicLong cost: <span class="number">386800900</span>(ns)</span><br><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">27</span> <span class="number">22</span>:<span class="number">34</span>:<span class="number">31.404</span> [main] DEBUG Compare - LongAdder cost: <span class="number">53539000</span>(ns)</span><br><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">27</span> <span class="number">22</span>:<span class="number">34</span>:<span class="number">31.438</span> [main] DEBUG Compare - LongAdder cost: <span class="number">33946400</span>(ns)</span><br><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">27</span> <span class="number">22</span>:<span class="number">34</span>:<span class="number">31.479</span> [main] DEBUG Compare - LongAdder cost: <span class="number">40203000</span>(ns)</span><br><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">27</span> <span class="number">22</span>:<span class="number">34</span>:<span class="number">31.511</span> [main] DEBUG Compare - LongAdder cost: <span class="number">32314300</span>(ns)</span><br><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">27</span> <span class="number">22</span>:<span class="number">34</span>:<span class="number">31.546</span> [main] DEBUG Compare - LongAdder cost: <span class="number">34245400</span>(ns)</span><br></pre></td></tr></table></figure>

<p>可以发现，<code>LongAddr</code>的速度要比<code>AtomicLong</code>高出一个数量级。</p>
<h3 id="4-7-2-LongAdder源码分析"><a href="#4-7-2-LongAdder源码分析" class="headerlink" title="4.7.2 LongAdder源码分析"></a>4.7.2 LongAdder源码分析</h3><p>先贴一下前辈的主页：<a href="http://gee.cs.oswego.edu/">http://gee.cs.oswego.edu</a></p>
<p>作为并发大师@Doug lea 的作品<code>LongAdder</code>，它的设计非常精巧。</p>
<p><code>LongAdder</code>类有几个关键域：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 累加单元数组，懒惰初始化</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">volatile</span> Cell[] cells;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基础值，如果没有竞争，则用CAS累加这个域</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">long</span> base;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在cells创建或者扩容时，置为1，表示加锁</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> cellsBusy;</span><br></pre></td></tr></table></figure>



<h4 id="4-7-2-1-CAS锁"><a href="#4-7-2-1-CAS锁" class="headerlink" title="4.7.2.1 CAS锁"></a>4.7.2.1 CAS锁</h4><p>切勿使用生产环境。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Slf4j(topic &#x3D; &quot;LockCAS&quot;)</span><br><span class="line">public class LockCASDemo &#123;</span><br><span class="line">    &#x2F;&#x2F; 0表示没加锁</span><br><span class="line">    &#x2F;&#x2F; 1表示加了锁</span><br><span class="line">    private final AtomicInteger state &#x3D; new AtomicInteger(0);</span><br><span class="line"></span><br><span class="line">    private void lock() &#123;</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            if (state.compareAndSet(0, 1)) &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void unlock() &#123;</span><br><span class="line">        log.debug(&quot;unlock...&quot;);</span><br><span class="line">        state.set(0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="4-7-2-1-原理之伪共享"><a href="#4-7-2-1-原理之伪共享" class="headerlink" title="4.7.2.1 原理之伪共享"></a>4.7.2.1 原理之伪共享</h4><p>Cell即为累加单元。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 防止缓存行伪共享（一个缓存行容纳多个Cell对象）</span></span><br><span class="line"><span class="meta">@Sun</span>.misc.Contented</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Cell</span> </span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">long</span> value;</span><br><span class="line">    Cell(<span class="keyword">long</span> x) &#123; value = x; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 最重要的方法，用CAS方式进行累加，prev表示旧值，next表示新值</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">cas</span><span class="params">(<span class="keyword">long</span> prev, <span class="keyword">long</span> next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UNSAFE.compareAndSwapLong(<span class="keyword">this</span>, valueOffset, prev, next);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从缓存说起，缓存与内存的速度比较：</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62265/image-20210427234550770.png" class="" title="image-20210427234550770">

<table>
<thead>
<tr>
<th align="center">从CPU到</th>
<th align="center">大约需要的时钟周期</th>
</tr>
</thead>
<tbody><tr>
<td align="center">寄存器</td>
<td align="center">1 cycle（4GHz的CPU约为0.25ns）</td>
</tr>
<tr>
<td align="center">L1</td>
<td align="center">3~4 cycle</td>
</tr>
<tr>
<td align="center">L2</td>
<td align="center">10~20 cycle</td>
</tr>
<tr>
<td align="center">L3</td>
<td align="center">40~45 cycle</td>
</tr>
<tr>
<td align="center">内存</td>
<td align="center">120~240 cycle</td>
</tr>
</tbody></table>
<p>因为CPU与内存的速度差异很大，需要靠预读数据至缓存来提升效率。</p>
<p>而缓存以缓存行为单位，每个缓存对应着一块内存，一般是64 byte（8个long）。</p>
<p>缓存的加入会造成数据副本的产生，即同一份数据会缓存在不同核心的缓存行中。</p>
<p>CPU要保证数据的一致性，如果某个CPU核心更改了数据，其他CPU核心对应的整个缓存行必须失效。</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62265/image-20210428124344773.png" class="" title="image-20210428124344773">

<p>因为Cell是数组形式，在内存中是连续存储的，一个Cell为24字节（16字节的对象头和8字节的value），因此缓存行可以存下2个的Cell对象。这样问题来了；</p>
<ul>
<li>Core-0要修改Cell[0]</li>
<li>Core-1要修改Cell[1]</li>
</ul>
<p>无论谁修改成功，都会导致对方Core的缓存行失效，比如Core-0中Cell[0] = 6000，Cell[1] = 8000。要累加Cell[0] = 6001，Cell[1] = 8000，这时会让Core-1缓存行失效。</p>
<p><code>@sun.misc.Contented</code>用来解决这个问题，它的原理是在使用此注解的对象或字段的前后各增加128字节大小的padding，从而让CPU将对象预读至缓存时占用不同的缓存行，这样，不会造成对方缓存行的失效。</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62265/image-20210428200500865.png" class="" title="image-20210428200500865">



<h4 id="4-7-2-2-主要方法"><a href="#4-7-2-2-主要方法" class="headerlink" title="4.7.2.2 主要方法"></a>4.7.2.2 主要方法</h4><blockquote>
<p>add</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">    Cell[] as; <span class="keyword">long</span> b, v; <span class="keyword">int</span> m; Cell a;</span><br><span class="line">    <span class="keyword">if</span> ((as = cells) != <span class="keyword">null</span>         <span class="comment">/* cells是否为空 */</span> </span><br><span class="line">        || !casBase(b = base, b + x) <span class="comment">/* cas base累加，成功则不会进入if代码块 */</span>) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> uncontended = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (as == <span class="keyword">null</span> || (m = as.length - <span class="number">1</span>) &lt; <span class="number">0</span> ||</span><br><span class="line">            (a = as[getProbe() &amp; m]) == <span class="keyword">null</span> || <span class="comment">/* 当前线程cell是否创建 */</span></span><br><span class="line">            !(uncontended = a.cas(v = a.value, v + x))) <span class="comment">/* cas base累加，失败则进入 */</span></span><br><span class="line">            longAccumulate(x, <span class="keyword">null</span>, uncontended);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62265/image-20210428203546219.png" class="" title="image-20210428203546219">



<blockquote>
<p>longAccumulate</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">longAccumulate</span><span class="params">(<span class="keyword">long</span> x, LongBinaryOperator fn,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">boolean</span> wasUncontended)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">if</span> ((h = getProbe()) == <span class="number">0</span>) &#123;</span><br><span class="line">        ThreadLocalRandom.current(); <span class="comment">// force initialization</span></span><br><span class="line">        h = getProbe();</span><br><span class="line">        wasUncontended = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">boolean</span> collide = <span class="keyword">false</span>;                <span class="comment">// True if last slot nonempty</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123; <span class="comment">// 不断尝试</span></span><br><span class="line">        Cell[] as; Cell a; <span class="keyword">int</span> n; <span class="keyword">long</span> v;</span><br><span class="line">        <span class="keyword">if</span> ((as = cells) != <span class="keyword">null</span> &amp;&amp; (n = as.length) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// （1）cells已创建，Cell未创建</span></span><br><span class="line">            <span class="keyword">if</span> ((a = as[(n - <span class="number">1</span>) &amp; h]) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cellsBusy == <span class="number">0</span>) &#123;       <span class="comment">// 尝试获取cells数组</span></span><br><span class="line">                    Cell r = <span class="keyword">new</span> Cell(x);   <span class="comment">// 乐观创建Cell对象</span></span><br><span class="line">                    <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp; casCellsBusy()) &#123;</span><br><span class="line">                        <span class="comment">// 当前无人上锁，自己尝试上锁</span></span><br><span class="line">                        <span class="keyword">boolean</span> created = <span class="keyword">false</span>;  <span class="comment">// 是否已创建</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;               <span class="comment">// Recheck under lock</span></span><br><span class="line">                            Cell[] rs; <span class="keyword">int</span> m, j;</span><br><span class="line">                            <span class="keyword">if</span> ((rs = cells) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                                (m = rs.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                                rs[j = (m - <span class="number">1</span>) &amp; h] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                <span class="comment">// 再次检查数组数组不为空且长度大于0</span></span><br><span class="line">                                <span class="comment">// 且数组中空置的槽位为空</span></span><br><span class="line">                                rs[j] = r;  <span class="comment">// 将创建的新的Cell对象填充到数组的空槽位</span></span><br><span class="line">                                created = <span class="keyword">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            cellsBusy = <span class="number">0</span>;  <span class="comment">// 释放锁</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (created)</span><br><span class="line">                            <span class="keyword">break</span>;          <span class="comment">// 创建成功则退出循环</span></span><br><span class="line">                        <span class="keyword">continue</span>;           <span class="comment">// Slot is now non-empty</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                collide = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// （2）cells已创建。Cell已创建</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!wasUncontended)       <span class="comment">// CAS already known to fail</span></span><br><span class="line">                wasUncontended = <span class="keyword">true</span>;      <span class="comment">// Continue after rehash</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (a.cas(v = a.value, ((fn == <span class="keyword">null</span>) ? v + x :</span><br><span class="line">                                         fn.applyAsLong(v, x))))</span><br><span class="line">                <span class="comment">// 对累加单元a进行CAS+x，操作成功则退出</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (n &gt;= NCPU || cells != as)</span><br><span class="line">                <span class="comment">// 检查当前n是否超过机器的CPU上限</span></span><br><span class="line">                collide = <span class="keyword">false</span>;            <span class="comment">// At max size or stale</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!collide)  </span><br><span class="line">                <span class="comment">// 上个条件匹配之后，下次循环就走这个判断，不会进入下面的扩容逻辑</span></span><br><span class="line">                collide = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp; casCellsBusy()) &#123;</span><br><span class="line">                <span class="comment">// 扩容</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (cells == as) &#123;      <span class="comment">// Expand table unless stale</span></span><br><span class="line">                        Cell[] rs = <span class="keyword">new</span> Cell[n &lt;&lt; <span class="number">1</span>];  <span class="comment">// 左移一位，扩容两倍</span></span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">                            rs[i] = as[i];  <span class="comment">// 将旧数组拷贝到新数组</span></span><br><span class="line">                        cells = rs;         <span class="comment">// 替换cells</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    cellsBusy = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                collide = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">continue</span>;                   <span class="comment">// Retry with expanded table</span></span><br><span class="line">            &#125;</span><br><span class="line">            h = advanceProbe(h);  <span class="comment">// 以上条件均不匹配，改变线程对应的cell对象</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp; cells == as &amp;&amp; casCellsBusy()) &#123;</span><br><span class="line">            <span class="comment">// （3）cells数组未创建，三个条件如下</span></span><br><span class="line">            <span class="comment">// cellsBusy是标记位，0代表未加锁，1代表已加锁</span></span><br><span class="line">            <span class="comment">// cells == as代表没有其他线程改变cells数组，as是第一次if判断读取到的数组引用</span></span><br><span class="line">            <span class="comment">// casCellsBusy()这个方法的作用就是尝试通过CAS将cellsBusy从0改为1，成功说明加锁成功</span></span><br><span class="line">            <span class="keyword">boolean</span> init = <span class="keyword">false</span>;             <span class="comment">// 是否初始化</span></span><br><span class="line">            <span class="keyword">try</span> &#123;                             <span class="comment">// Initialize table</span></span><br><span class="line">                <span class="keyword">if</span> (cells == as) &#123;            <span class="comment">// 再次判断是否有其他线程修改了cells</span></span><br><span class="line">                    Cell[] rs = <span class="keyword">new</span> Cell[<span class="number">2</span>];  <span class="comment">// 初始大小为2</span></span><br><span class="line">                    rs[h &amp; <span class="number">1</span>] = <span class="keyword">new</span> Cell(x);  <span class="comment">// 赋初始值1</span></span><br><span class="line">                    cells = rs;               <span class="comment">// 将刚刚创建的数组赋值给成员变量</span></span><br><span class="line">                    init = <span class="keyword">true</span>;              </span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                cellsBusy = <span class="number">0</span>;                <span class="comment">// 将标记位设为0，代表解锁</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (init)                         <span class="comment">// 初始化成功则退出循环</span></span><br><span class="line">                <span class="keyword">break</span>;                           </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (casBase(v = base, ((fn == <span class="keyword">null</span>) ? v + x :</span><br><span class="line">                                    fn.applyAsLong(v, x))))</span><br><span class="line">            <span class="comment">// 加锁失败，进行cas base累加，成功则break，失败则继续循环</span></span><br><span class="line">            <span class="keyword">break</span>;                          <span class="comment">// Fall back on using base</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62265/image-20210428211351713.png" class="" title="image-20210428211351713">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62265/image-20210428220931544.png" class="" title="image-20210428220931544">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62265/image-20210428204940662.png" class="" title="image-20210428204940662">



<blockquote>
<p>sum</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Cell[] as = cells; Cell a;</span><br><span class="line">    <span class="keyword">long</span> sum = base;</span><br><span class="line">    <span class="keyword">if</span> (as != <span class="keyword">null</span>) &#123; <span class="comment">// 判空</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; as.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((a = as[i]) != <span class="keyword">null</span>) <span class="comment">// 对每个元素判空</span></span><br><span class="line">                sum += a.value;      <span class="comment">// 累加每个单元值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-8-Unsafe"><a href="#4-8-Unsafe" class="headerlink" title="4.8 Unsafe"></a>4.8 Unsafe</h2><h3 id="4-8-1-概述"><a href="#4-8-1-概述" class="headerlink" title="4.8.1 概述"></a>4.8.1 概述</h3><p><code>Unsafe</code>对象提供了非常底层的，操作内存、线程的办法，<code>Unsafe</code>对象不能直接调用，智能通过反射获得：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeAccessor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Unsafe unsafe;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field theUnsafe = Unsafe.class.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">            theUnsafe.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            unsafe = (Unsafe) theUnsafe.get(<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Unsafe <span class="title">getUnsafe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-8-2-CAS操作"><a href="#4-8-2-CAS操作" class="headerlink" title="4.8.2 CAS操作"></a>4.8.2 CAS操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchFieldException </span>&#123;</span><br><span class="line">        Unsafe unsafe = UnsafeAccessor.getUnsafe();</span><br><span class="line">        Field id = User.class.getDeclaredField(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        Field name = User.class.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">// 获得域的偏移地址</span></span><br><span class="line">        <span class="keyword">long</span> idOffset = unsafe.objectFieldOffset(id);</span><br><span class="line">        <span class="keyword">long</span> nameOffset = unsafe.objectFieldOffset(name);</span><br><span class="line">        <span class="comment">// 使用CAS方法替换成员变量</span></span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        unsafe.compareAndSwapInt(user, idOffset, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        unsafe.compareAndSwapObject(user, nameOffset, <span class="keyword">null</span>, <span class="string">&quot;KHighness&quot;</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">volatile</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> id; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123; <span class="keyword">this</span>.id = id; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123; <span class="keyword">this</span>.name = name; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User[&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User[id=<span class="number">1</span>, name=<span class="string">&#x27;KHighness&#x27;</span>]</span><br></pre></td></tr></table></figure>



<h3 id="4-8-3-自定义原子实现类"><a href="#4-8-3-自定义原子实现类" class="headerlink" title="4.8.3 自定义原子实现类"></a>4.8.3 自定义原子实现类</h3><p>使用自定义的<code>AtomicData</code>实现之前线程安全的原子整数<code>Account</code>实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KAtomicInteger</span> <span class="keyword">implements</span> <span class="title">Account</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> valueOffset;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe UNSAFE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        UNSAFE = UnsafeAccessor.getUnsafe();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            valueOffset = UNSAFE.objectFieldOffset(KAtomicInteger.class.getDeclaredField(<span class="string">&quot;value&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KAtomicInteger</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrement</span><span class="params">(<span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> prev = <span class="keyword">this</span>.value;</span><br><span class="line">            <span class="keyword">int</span> next = prev - amount;</span><br><span class="line">            <span class="keyword">if</span> (UNSAFE.compareAndSwapInt(<span class="keyword">this</span>, valueOffset, prev, next)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">geBalance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(Integer amount)</span> </span>&#123;</span><br><span class="line">        decrement(amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>JUC</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JUC-3(共享模型之内存)</title>
    <url>/posts/37386/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>JMM即Java Memory Model，它定义了主存、工作内存抽象概念，底层对应着CPU寄存器、缓存、硬件内存、CPU指令优化等。</p>
<p>JMM体现在以下几个方面：</p>
<ul>
<li>原子性：保证指令不会受到线程上下文切换的影响</li>
<li>可见性：保证指令不会受CPU缓存的影响</li>
<li>有序性：保证指令不会受CPU指令并行优化的影响</li>
</ul>
<h2 id="3-1-可见性"><a href="#3-1-可见性" class="headerlink" title="3.1 可见性"></a>3.1 可见性</h2><h3 id="3-1-1-退不出的循环"><a href="#3-1-1-退不出的循环" class="headerlink" title="3.1.1 退不出的循环"></a>3.1.1 退不出的循环</h3><p>先看一个现象，main线程对run变量的修改对于t线程不可见，导致了t线程无法停止：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;While&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WhileDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> run = <span class="keyword">true</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (run) &#123; &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t&quot;</span>);</span><br><span class="line">        t.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        run = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-1-2-分析"><a href="#3-1-2-分析" class="headerlink" title="3.1.2 分析"></a>3.1.2 分析</h3><ol>
<li>初始状态，t线程刚开始从主内存读取了run的值到工作内存。</li>
</ol>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/37386/image-20210423224812159.png" class="" title="image-20210423224812159">

<ol start="2">
<li><p>因为t线程要频繁地从主内存中读取run的值，JIT编译器会将run的值缓存至自己工作内存中的高速缓存中，减少对主存中run的访问，提高效率。</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/37386/image-20210423225409195.png" class="" title="image-20210423225409195">
</li>
<li><p>1秒之后，main线程修改了run的值，并同步至主存，而t是从自己工作内存中的高速缓存中读取这个变量的值，结果永远是旧值。</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/37386/image-20210423230248092.png" class="" title="image-20210423230248092">



</li>
</ol>
<h3 id="3-1-3-解决办法"><a href="#3-1-3-解决办法" class="headerlink" title="3.1.3 解决办法"></a>3.1.3 解决办法</h3><p>（1）给变量<code>run</code>加上修饰符<code>volatile</code>。</p>
<p>它可以用来修饰成员变量和静态成员变量，他可以避免线程从自己的工作缓存中查找变量的值，必须到主存中获取它的值，线程操作<code>volitale</code>变量都说直接操作主存。</p>
<p>（2）使用<code>synchronized</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;While&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WhileDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> run = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (run) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (lock) &#123; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t&quot;</span>);</span><br><span class="line">        t.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        run = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            run = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（3）在<code>while</code>循环中使用<code>System.out.println()</code>也会终止循环，原因可以看<code>println()</code>的源代码，其中执行的是<code>PrintStream#newLine()</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">newLine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;  <span class="comment">// 加锁</span></span><br><span class="line">            ensureOpen();</span><br><span class="line">            textOut.newLine();</span><br><span class="line">            textOut.flushBuffer();</span><br><span class="line">            charOut.flushBuffer();</span><br><span class="line">            <span class="keyword">if</span> (autoFlush)</span><br><span class="line">                out.flush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (InterruptedIOException x) &#123;</span><br><span class="line">        Thread.currentThread().interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (IOException x) &#123;</span><br><span class="line">        trouble = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-1-4-synchronized-volatile"><a href="#3-1-4-synchronized-volatile" class="headerlink" title="3.1.4 synchronized/volatile"></a>3.1.4 synchronized/volatile</h3><ul>
<li><code>synchronized</code>可以修饰变量和方法，<code>volatile</code>只能修饰变量。</li>
<li><code>synchronized</code>保证操作的原子性，<code>volatile</code>保持变量的可见性。</li>
<li><code>synchronized</code>通常适用于写多读少的场景，<code>volatile</code>通常适用于写少读多的场景。</li>
</ul>
<h2 id="3-2-模式"><a href="#3-2-模式" class="headerlink" title="3.2 模式"></a>3.2 模式</h2><h3 id="3-2-1-终止模式之两阶段终止模式"><a href="#3-2-1-终止模式之两阶段终止模式" class="headerlink" title="3.2.1 终止模式之两阶段终止模式"></a>3.2.1 终止模式之两阶段终止模式</h3><p>使用<code>volatile</code>实现两阶段终止：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoStageTerminationDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TwoStageTermination tst = <span class="keyword">new</span> TwoStageTermination();</span><br><span class="line">        tst.start();</span><br><span class="line">        Thread.sleep(<span class="number">3500</span>);</span><br><span class="line">        tst.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;TwoStageTermination&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoStageTermination</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 监控线程</span></span><br><span class="line">    <span class="keyword">private</span> Thread monitorThread;</span><br><span class="line">    <span class="comment">// 是否被打断</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> stop = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        monitorThread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                Thread current = Thread.currentThread();</span><br><span class="line">                <span class="comment">// 是否被打断</span></span><br><span class="line">                <span class="keyword">if</span> (stop) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;料理后事&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                    log.info(<span class="string">&quot;执行监控...&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="comment">// 睡眠被打断被清除打断标记，需要重新设置</span></span><br><span class="line">                    current.interrupt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;monitor&quot;</span>);</span><br><span class="line">        monitorThread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stop = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-2-2-同步模式之Balking"><a href="#3-2-2-同步模式之Balking" class="headerlink" title="3.2.2 同步模式之Balking"></a>3.2.2 同步模式之Balking</h3><p>Balking（犹豫）模式用在一个线程发现另一个线程发现另一个线程或本线程已经做了某一件相同的事，那么本线程就无需再做了，直接结束返回，实际上是一种单例模式。</p>
<p>修改两阶段终止如下，监控线程执行一次之后就不再执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BalkingTwoStageTerminationDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        BalkingTwoStageTermination btst = <span class="keyword">new</span> BalkingTwoStageTermination();</span><br><span class="line">        btst.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        btst.stop();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        btst.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        btst.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;BalkingTwoStageTermination&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BalkingTwoStageTermination</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 监控线程</span></span><br><span class="line">    <span class="keyword">private</span> Thread monitorThread;</span><br><span class="line">    <span class="comment">// 是否被打断</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> stop = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 是否已执行</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (started) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            stop = <span class="keyword">false</span>;</span><br><span class="line">            started = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        monitorThread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                Thread current = Thread.currentThread();</span><br><span class="line">                <span class="comment">// 是否被打断</span></span><br><span class="line">                <span class="keyword">if</span> (stop) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;停止监控&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                log.info(<span class="string">&quot;执行监控...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;monitor&quot;</span>);</span><br><span class="line">        monitorThread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暂停</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stop = <span class="keyword">true</span>;</span><br><span class="line">        started = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-3-有序性"><a href="#3-3-有序性" class="headerlink" title="3.3 有序性"></a>3.3 有序性</h2><h3 id="3-3-1-指令重排序"><a href="#3-3-1-指令重排序" class="headerlink" title="3.3.1 指令重排序"></a>3.3.1 指令重排序</h3><p>JIT即时编译器的优化，可能会导致指令重排。JVM会在不影响正确性的前提下，调整语句的执行顺序。</p>
<p>（1）例如以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作</span></span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line">j = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>对于<code>i</code>和<code>j</code>的赋值操作顺序，对最终的结果都没有影响。因此在真正执行的时候，可能<code>i</code>也可能是<code>j</code>先被赋值。但是在多线程情况下指令重排序会影响正确性。</p>
<p>（2）比如<code>new</code>一个对象：一般顺序为（1）分配内存（2）对象初始化（3）建立指针对应关系，高并发情况下顺序可能乱成132，对象初始化时就被另一个线程读取造成问题。</p>
<h3 id="3-3-3-诡异的结果"><a href="#3-3-3-诡异的结果" class="headerlink" title="3.3.3 诡异的结果"></a>3.3.3 诡异的结果</h3><p>在如下代码中，<code>I_Result</code> 是一个对象，有一个属性<code>r1</code>用来保存结果。</p>
<p>线程1执行<code>actor1</code>方法，线程2执行<code>actor2</code>方法，思考<code>r1</code>的可能结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">boolean</span> ready = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actor1</span><span class="params">(I_Result r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ready) &#123;</span><br><span class="line">        r.r1 = num + num;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        r.r1 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actor2</span><span class="params">(I_Result r)</span> </span>&#123;</span><br><span class="line">    num = <span class="number">2</span>;</span><br><span class="line">    ready = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>线程1先执行，线程2后执行，此时结果为1</li>
<li>线程2先执行，线程1后执行，此时结果为4</li>
<li>线程2先执行，执行到<code>num = 2</code>，线程1开始执行，此时结果为1</li>
<li>线程2先执行，但是指令重排，先执行<code>ready = true</code>，线程1开始执行，进入<code>if (ready)</code>，此时结果为2</li>
</ol>
<p>解决方法：给<code>ready</code>加上修复符<code>volatile</code>。</p>
<h3 id="3-3-2-重排序规则"><a href="#3-3-2-重排序规则" class="headerlink" title="3.3.2 重排序规则"></a>3.3.2 重排序规则</h3><ul>
<li>指令重排序不会对存在数据依赖关系的操作进行重排序。比如：<code>a= 1; b = a;</code>。</li>
<li>重排序是为了优化性能，但是不管如何重排，单线程下程序的执行结果不能改变。</li>
<li>指令重排序保证单线程模式下的结果正确性，但是不保证多线程模式下的正确性。</li>
<li>解决方法：<code>volatile</code>修饰的变量，可以禁用指令重排。</li>
</ul>
<h2 id="3-4-volatile原理"><a href="#3-4-volatile原理" class="headerlink" title="3.4 volatile原理"></a>3.4 volatile原理</h2><p><code>volatile</code>的底层实现原理是内存屏障，Memory barrier。</p>
<ul>
<li>对<code>volatile</code>变量的写指令后会加入写屏障。</li>
<li>对<code>volatile</code>变量的读指令后会加入读屏障。</li>
</ul>
<h3 id="3-4-1-保证可见性"><a href="#3-4-1-保证可见性" class="headerlink" title="3.4.1 保证可见性"></a>3.4.1 保证可见性</h3><p>写屏障保证在该屏障之前的，对共享变量的改动，都同步在主存当中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actor2</span><span class="params">(I_Result r)</span> </span>&#123;</span><br><span class="line">    num = <span class="number">2</span>;</span><br><span class="line">    readt = <span class="keyword">true</span>; <span class="comment">// ready是volatile赋值带写屏障</span></span><br><span class="line">    <span class="comment">// 写屏障</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>读屏障保证在该屏障之后的，对共享变量的读取，加载的是主存中的最新数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actor1</span><span class="params">(I_Result r)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 读屏障</span></span><br><span class="line">    <span class="comment">// ready是volatile读取值带读屏障</span></span><br><span class="line">    <span class="keyword">if</span> (ready) &#123;</span><br><span class="line">        r.r1 = num + num;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        r.r1 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/37386/image-20210424184907780.png" class="" title="image-20210424184907780">



<h3 id="3-4-2-保证有序性"><a href="#3-4-2-保证有序性" class="headerlink" title="3.4.2 保证有序性"></a>3.4.2 保证有序性</h3><p>写屏障会确保指令重排序时，不会将写屏障之前的代码排在写屏障之后。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actor2</span><span class="params">(I_Result r)</span> </span>&#123;</span><br><span class="line">    num = <span class="number">2</span>;</span><br><span class="line">    ready = <span class="keyword">true</span>; <span class="comment">// ready是volatile赋值到</span></span><br><span class="line">   	<span class="comment">// 写屏障</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>读屏障会确保指令重排序时，不会将读屏障之后的代码排在读屏障之前</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actor1</span><span class="params">(I_Result r)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 读屏障</span></span><br><span class="line">    <span class="comment">// ready是volatile读取值</span></span><br><span class="line">    <span class="keyword">if</span> (ready) &#123;</span><br><span class="line">        r.r1 = num + num;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        r.r1 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/37386/image-20210424213414173.png" class="" title="image-20210424213414173">



<p>但是不能解决指令交错：</p>
<ul>
<li>写屏障仅仅是保证之后的读能够读到最新的结果，但不能保证读在写操作之前还是之后</li>
<li>有序性的保证也只是保证了本线程内相关代码不被重排序</li>
</ul>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/37386/image-20210424215341050.png" class="" title="image-20210424215341050">



<h3 id="3-4-3-double-checked-locking"><a href="#3-4-3-double-checked-locking" class="headerlink" title="3.4.3 double-checked locking"></a>3.4.3 double-checked locking</h3><p>以著名的DCL(double-checked locking)单例模式为例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DCLSingleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DCLSingleton</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DCLSingleton INSTANCE = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在第一次线程调用getInstance()，直接在synchronized外，判断instance对象是否存在</span></span><br><span class="line"><span class="comment">     * 如果不存在，才会去获取锁，然后创建单例对象，并且返回；第二个线程调用getInstance()，</span></span><br><span class="line"><span class="comment">     * 会进行instance的空判断，如果已经有单例对象就不会去同步块中获取锁，提高效率。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> DCLSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 这个判断并不在synchronized同步代码块中，</span></span><br><span class="line">            <span class="comment">// 不能保证原子性、可见性和有序性，可能导致指令重排</span></span><br><span class="line">            <span class="keyword">synchronized</span> (DCLSingleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> DCLSingleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上实现的特点：</p>
<ul>
<li>延迟实例化</li>
<li>首次使用<code>getInstance()</code>才使用<code>synchronbized</code>加锁，后续使用时无需加锁。</li>
<li>有隐含的，但很关键的一点：第一个<code>if</code>使用了<code>INSTANCE</code>变量，是在同步块之外。</li>
</ul>
<p>但是在多线程环境下，上面的代码是有问题的，<code>getInstance()</code>方法对应的字节码为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 0 getstatic #2 &lt;top&#x2F;parak&#x2F;jmm&#x2F;DCLSingleton.INSTANCE&gt;  # 获取静态变量INSTANCE</span><br><span class="line"> 3 ifnonnull 37 (+34)                                  # 判断INSTANCE是否为空</span><br><span class="line"> 6 ldc #3 &lt;top&#x2F;parak&#x2F;jmm&#x2F;DCLSingleton&gt;                 # 从运行时常量池中将DCLSingeton的class对象推入操作数栈</span><br><span class="line"> 8 dup                                                 # 复制操作数栈栈顶的值，即DCLSingleton的class对象</span><br><span class="line"> 9 astore_0                                            # 将DCLSingleton的class对象存入局部变量表索引为0的位置</span><br><span class="line">10 monitorenter                                        # 进入INSTANCE对象的monitor</span><br><span class="line">11 getstatic #2 &lt;top&#x2F;parak&#x2F;jmm&#x2F;DCLSingleton.INSTANCE&gt;  # 获取静态变量INSTANCE</span><br><span class="line">14 ifnonnull 27 (+13)                                  # 判断INSTANCE是否为空</span><br><span class="line">17 new #3 &lt;top&#x2F;parak&#x2F;jmm&#x2F;DCLSingleton&gt;                 # new一个DCLSingleton</span><br><span class="line">20 dup                                                 # 复制操作数栈栈顶的值，即DCLSingleton的class对象</span><br><span class="line">21 invokespecial #4 &lt;top&#x2F;parak&#x2F;jmm&#x2F;DCLSingleton.&lt;init&gt;&gt;# 调用DCLSingeton的构造方法</span><br><span class="line">24 putstatic #2 &lt;top&#x2F;parak&#x2F;jmm&#x2F;DCLSingleton.INSTANCE&gt;  # 将新对象赋值给静态变量INSTANCE</span><br><span class="line">27 aload_0                                             # 从局部变量表导出索引为0位置的元素</span><br><span class="line">28 monitorexit                                         # 退出INSTANCE对象的monitor</span><br><span class="line">29 goto 37 (+8)                                        # goto37行处理</span><br><span class="line">32 astore_1                                            # 32-35是异常</span><br><span class="line">33 aload_0</span><br><span class="line">34 monitorexit</span><br><span class="line">35 aload_1</span><br><span class="line">36 athrow</span><br><span class="line">37 getstatic #2 &lt;top&#x2F;parak&#x2F;jmm&#x2F;DCLSingleton.INSTANCE&gt; # 获取静态变量INSTANCE</span><br><span class="line">40 areturn</span><br></pre></td></tr></table></figure>

<p>重点关注17-24行：</p>
<ul>
<li>17：创建<code>DCLSingleton</code>对象</li>
<li>20：复制<code>DCLSingleton</code>的class对象</li>
<li>21：调用class对象的默认构造方法</li>
<li>24：将新对象赋值给静态变量<code>INSTANCE</code></li>
</ul>
<p>也许JVM会优化为：先执行24，再执行21，即先赋值，再调构造。</p>
<p>可能造成：一个线程正在造对象，对象还为空的时候就被另一线程拿去使用。</p>
<p>解决方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DCLSingleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DCLSingleton</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> DCLSingleton INSTANCE = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> DCLSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (DCLSingleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> DCLSingleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从字节码上看不出volatile的效果，但是我们从屏障的角度分析：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> # &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; 加入对INSTANCE的读屏障</span><br><span class="line"> # 保证此后的读取，加载的都是主存中的最新数据</span><br><span class="line"> 0 getstatic #2 &lt;top&#x2F;parak&#x2F;jmm&#x2F;DCLSingleton.INSTANCE&gt;</span><br><span class="line"> 3 ifnonnull 37 (+34)</span><br><span class="line"> 6 ldc #3 &lt;top&#x2F;parak&#x2F;jmm&#x2F;DCLSingleton&gt;</span><br><span class="line"> 8 dup</span><br><span class="line"> 9 astore_0</span><br><span class="line">10 monitorenter # &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; 保证原子性和可见性</span><br><span class="line">11 getstatic #2 &lt;top&#x2F;parak&#x2F;jmm&#x2F;DCLSingleton.INSTANCE&gt;</span><br><span class="line">14 ifnonnull 27 (+13)</span><br><span class="line">17 new #3 &lt;top&#x2F;parak&#x2F;jmm&#x2F;DCLSingleton&gt;</span><br><span class="line">20 dup</span><br><span class="line">21 invokespecial #4 &lt;top&#x2F;parak&#x2F;jmm&#x2F;DCLSingleton.&lt;init&gt;&gt;</span><br><span class="line">24 putstatic #2 &lt;top&#x2F;parak&#x2F;jmm&#x2F;DCLSingleton.INSTANCE&gt;</span><br><span class="line"> # &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; 加入对INSTANCE的写屏障</span><br><span class="line"> # 保证此前的写入，都同步到主存当中</span><br><span class="line">27 aload_0</span><br><span class="line">28 monitorexit  # &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt; 保证原子性和可见性</span><br><span class="line">29 goto 37 (+8)</span><br><span class="line">32 astore_1</span><br><span class="line">33 aload_0</span><br><span class="line">34 monitorexit</span><br><span class="line">35 aload_1</span><br><span class="line">36 athrow</span><br><span class="line">37 getstatic #2 &lt;top&#x2F;parak&#x2F;jmm&#x2F;DCLSingleton.INSTANCE&gt;</span><br><span class="line">40 areturn</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/37386/image-20210425100017250.png" class="" title="image-20210425100017250">



<h3 id="3-4-4-happens-before"><a href="#3-4-4-happens-before" class="headerlink" title="3.4.4 happens-before"></a>3.4.4 happens-before</h3><p>happens-before规定了对共享变量的写操作对其他线程的读操作可见，它是可见性与有序性的一套规则总结，抛开以下happens-before规则，JMM并不能保证一个线程对共享变量的写，对于其他线程对该共享变量的读可见。</p>
<ol>
<li>线程解锁m之前对变量的写，对于接下来对m加锁的其他线程对该变量的读可见</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">static</span> Object m = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (m) &#123;</span><br><span class="line">        x = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(() -&lt; &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (m) &#123;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="string">&quot;t2&quot;</span>);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>线程对volatile变量的写，对接下来其他线程对改变了的读可见</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">int</span> x;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    x = <span class="number">10</span>;</span><br><span class="line">&#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>线程start前对变量的写，对该线程开始后对该变量的读可见</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static int x;</span><br><span class="line"></span><br><span class="line">x &#x3D; 10;</span><br><span class="line"></span><br><span class="line">new Thread(() -&gt; &#123;</span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;, &quot;t2&quot;).start();</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>线程结束前对变量的写，对其他线程得知它结束后的读可见（比如其他线程调用<code>t1.isAlive()</code>或<code>t1.join()</code>等待它结束）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> x;</span><br><span class="line"></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    x = <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line">t1.start();</span><br><span class="line"></span><br><span class="line">t1.join();</span><br><span class="line">System.out.println(x);</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>线程<code>t1</code>打断<code>t2</code>前对变量的写，对于其他线程得知<code>t2</code>被打断后对变量的读可见</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;InterruptRead&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterruptReadDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> x;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;x: &#123;&#125;&quot;</span>, x);</span><br><span class="line">                <span class="keyword">if</span> (Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;x: &#123;&#125;&quot;</span>, x);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            x = <span class="number">3</span>;</span><br><span class="line">            t2.interrupt();</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">while</span> (!t2.isInterrupted()) &#123;</span><br><span class="line">            Thread.yield();</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">&quot;x: &#123;&#125;&quot;</span>, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li><p>对变量默认值（0，false，null）的写，对其他线程对该变量的读可见</p>
</li>
<li><p>具有传递性，如果<code>x hb =&gt; y</code>并且<code>y hb =&gt; z</code>那么有<code>x hb =&gt; z</code>，配合<code>volatile</code>的防止指令重排序，有下面的例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    y = <span class="number">10</span>;</span><br><span class="line">    x = <span class="number">10</span>;</span><br><span class="line">&#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// x = 20对t2可见</span></span><br><span class="line">    <span class="comment">// 同时y = 20对t2可见 </span></span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="3-5-习题"><a href="#3-5-习题" class="headerlink" title="3.5 习题"></a>3.5 习题</h2><h3 id="3-5-1-balking模式"><a href="#3-5-1-balking模式" class="headerlink" title="3.5.1 balking模式"></a>3.5.1 balking模式</h3><p>希望<code>doInit()</code>方法仅被调用一次，下面的实现是否有问题，为什么？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;BalkingPractice&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BalkingPractice</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> initialized = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialized) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        doInit();</span><br><span class="line">        initialized = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有问题，<code>volatile</code>无法保证原子性，当多个线程同时调用<code>init()</code>方法时，此时都进入到<code>if</code>判断，都调用<code>doInit()</code>方法，此时就调用了多次。</p>
<p>解决方法：对<code>init()</code>方法的方法体，通过<code>synchronized</code>加锁，防止多个线程共享<code>initialized</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;BalkingPractice&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BalkingPractice</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> initialized = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (initialized) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            doInit();</span><br><span class="line">            initialized = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-5-2-线程安全单例"><a href="#3-5-2-线程安全单例" class="headerlink" title="3.5.2 线程安全单例"></a>3.5.2 线程安全单例</h3><blockquote>
<p>饿汉式</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 问题1：为什么加final？</span></span><br><span class="line"><span class="comment">// 答：防止子类继承修改。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> <span class="title">implaments</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 问题2：为什么构造函数设为私有？是否能防止反射创建新的实例？</span></span><br><span class="line">    <span class="comment">// 答：防止其他类中使用new生成新的实例，不能防止反射创建新的实例。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 问题3：这样初始化是否能保证单例对象创建时的线程安全？</span></span><br><span class="line">    <span class="comment">// 答：能，类变量在JVM类加载的初始化(clinit)阶段完成赋值，JVM保证此操作的线程安全性。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 问题4：为什么提供静态方法而不是直接将INSTANCE设置为public？</span></span><br><span class="line">    <span class="comment">// 答：（1）提供更好的封装性（2）提供泛型的支持</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 问题5：这个方法有什么作用?</span></span><br><span class="line">    <span class="comment">// 答：防止反序列化时生成不同的单例对象。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>DCL懒汉式</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DCLSingleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DCLSingleton</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">    <span class="comment">// 问题1：为什么要给单例变量加上volatile关键字修饰？</span></span><br><span class="line">    <span class="comment">// 答：防止第一次创建对象时指令重排序。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> DCLSingleton INSTANCE = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> DCLSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (DCLSingleton.class) &#123;</span><br><span class="line">                <span class="comment">// 问题3：前面已经进行一次判空，为什么还要在这里加上为空判断？</span></span><br><span class="line">				<span class="comment">// 答：防止多线程并发导致不安全的问题：单例对象重复创建。</span></span><br><span class="line">                <span class="comment">// 比如：有两个线程。都进入了第一次判空，它们都判断单例为空。</span></span><br><span class="line">                <span class="comment">// （1）t1线程获取到单例对象锁，然后创建对象，释放锁。</span></span><br><span class="line">                <span class="comment">// （2）t2线程获取到单例对象锁，由于第一次判空为真，</span></span><br><span class="line">                <span class="comment">//     如果没有进行第二次判空，它也会创建单例对象，破坏单例。</span></span><br><span class="line">                <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> DCLSingleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>静态内部类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">    <span class="comment">// 问题1：静态内部类属于饿汉式还是懒汉式？</span></span><br><span class="line">    <span class="comment">// 答：属于懒汉式，当Sinleton加载的时候，SingletonHolder并没有加载进内存，只要当第一次调用getInstance的时候，SingletonHolder才会加载进内存，并且初始化INSTANCE实例。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 问题2：这样创建单例对象是否存在线程安全问题？</span></span><br><span class="line">        <span class="comment">// 答：类加载时JVM会保证线程安全。</span></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Singletonolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>枚举类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 问题1：枚举单例是如何限制实例个数的？</span></span><br><span class="line"><span class="comment">// 答：创建枚举类的时候就已经定义好了，每个枚举常量其实就是枚举类的一个静态成员变量。</span></span><br><span class="line"><span class="comment">// 问题2：枚举单例在创建时是否有并发问题？</span></span><br><span class="line"><span class="comment">// 答：没有并发问题，枚举类成员底层是一个静态成员边框，在类加载时就创建了，JVM会保证线程安全。</span></span><br><span class="line"><span class="comment">// 问题3：枚举单例能否被反射破坏单例?</span></span><br><span class="line"><span class="comment">// 答：不能，反射在newInstance的时候会检查，如果是枚举类型就会抛出异常。</span></span><br><span class="line"><span class="comment">// 问题4：枚举单例能否被反序列化破坏单例？</span></span><br><span class="line"><span class="comment">// 答：不能，枚举类的实现考虑到了这一点，反序列化后依然是从前的单例。</span></span><br><span class="line"><span class="comment">// 问题5：枚举单例如果希望加入一些单例创建时的初始化逻辑应该如何做？</span></span><br><span class="line"><span class="comment">// 答：加构造方法。</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JUC</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JUC-2(共享模型之管程)</title>
    <url>/posts/62531/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="2-1-第一部分-线程安全"><a href="#2-1-第一部分-线程安全" class="headerlink" title="2.1 第一部分-线程安全"></a>2.1 第一部分-线程安全</h2><h3 id="2-1-1-线程安全问题"><a href="#2-1-1-线程安全问题" class="headerlink" title="2.1.1 线程安全问题"></a>2.1.1 线程安全问题</h3><blockquote>
<p>案例</p>
</blockquote>
<p>两个线程对初始值为0的静态变量一个做自增，一个做自增，一个做自减，结果是0吗？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;AddSub&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddSubDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">                counter++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">                counter--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        log.debug(<span class="string">&quot;counter = &#123;&#125;&quot;</span>, counter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果是变化的。</p>
<blockquote>
<p>分析</p>
</blockquote>
<p>对于静态变量i，自增和自减的字节码指令如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># i++</span><br><span class="line">getstatic i <span class="comment">// 获取静态变量i的值</span></span><br><span class="line">iconst_1    <span class="comment">// 准备常量1</span></span><br><span class="line">iadd        <span class="comment">// 自增</span></span><br><span class="line">putstatic i <span class="comment">// 将修改后的值存入静态变量i</span></span><br><span class="line"># i--</span><br><span class="line">getstatic i <span class="comment">// 获取静态变量i的值</span></span><br><span class="line">iconst_1    <span class="comment">// 准备常量1</span></span><br><span class="line">isub        <span class="comment">// 自减</span></span><br><span class="line">putstatic i <span class="comment">// 将修改后的值存入静态变量i</span></span><br></pre></td></tr></table></figure>

<p>Java的内存模型如下，完成静态变量的自增和自减，需要在主存和工作内存中进行数据交换：</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62531/image-20210407174859979.png" class="" title="image-20210407174859979">

<p>如果是单线程顺序执行以上8行字节码指令，不会出现问题：</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62531/image-20210407175158573.png" class="" title="image-20210407175158573">

<p>但是在双线程的情况下，会产生指令重排序，导致各种问题，比如脏读（读取更新未保存的数据）：</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62531/image-20210407175406638.png" class="" title="image-20210407175406638">



<blockquote>
<p>拓展</p>
</blockquote>
<p><code>i++</code>、<code>i--</code>、<code>++i</code>、<code>--i</code>等操作都是非原子性的，因为JVM指令可并非一条。可以分析一下字节码指令（<code>javap -v</code>）。</p>
<p><code>i++</code>的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">System.out.println(i++);</span><br></pre></td></tr></table></figure>

<p>字节码指令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 iconst_0                                         # 将常量0加载到栈顶</span><br><span class="line">1 istore_1                                         # 弹出栈顶元素，并赋值给局部变量表中索引为1的位置</span><br><span class="line">2 getstatic #2 &lt;java&#x2F;lang&#x2F;System.out&gt;              # 获取系统类的静态属性</span><br><span class="line">5 iload_1                                          # 将局部变量表中索引为1的元素加载到栈顶</span><br><span class="line">6 iinc 1 by 1                                      # 直接把局部变量表中索引为1的元素值+1</span><br><span class="line">9 invokevirtual #3 &lt;java&#x2F;io&#x2F;PrintStream.println&gt;   # 调用流的打印方法</span><br></pre></td></tr></table></figure>

<p>顺序：先将元素加载到栈顶，然后更新局部变量表的元素的值。</p>
<p><code>++i</code>的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">System.out.println(++i);</span><br></pre></td></tr></table></figure>

<p>字节码指令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 iconst_0                                         # 将常量0加载到栈顶</span><br><span class="line">1 istore_1                                         # 弹出栈顶元素，并赋值给局部变量表中索引为1的位置</span><br><span class="line">2 getstatic #2 &lt;java&#x2F;lang&#x2F;System.out&gt;              # 获取系统类的静态属性</span><br><span class="line">5 iinc 1 by 1                                      # 直接把局部变量表中索引为1的元素值+1</span><br><span class="line">8 iload_1                                          # 将局部变量表中索引为1的元素加载到栈顶</span><br><span class="line">9 invokevirtual #3 &lt;java&#x2F;io&#x2F;PrintStream.println&gt;   # 调用流的打印方法</span><br></pre></td></tr></table></figure>

<p>顺序：先更新局部变量表的元素的值，再将元素加载到栈顶。</p>
<blockquote>
<p>临界区</p>
</blockquote>
<p>一段代码块内如果内存堆共享资源的多线程读写操作，称这段代码块为临界区。</p>
<blockquote>
<p>竞态条件</p>
</blockquote>
<p>多个线程在临界区内执行，由于代码的执行序列不同而导致结果无法预测，称之为发生了竞态条件。</p>
<h3 id="2-1-2-synchronized解决方案"><a href="#2-1-2-synchronized解决方案" class="headerlink" title="2.1.2 synchronized解决方案"></a>2.1.2 synchronized解决方案</h3><blockquote>
<p>应用互斥</p>
</blockquote>
<p>为了避免临界区的竞态条件发生，有多种手段可以达到目的：</p>
<ul>
<li>阻塞式的解决方案：<code>synchoronized</code>，<code>Lock</code></li>
<li>非阻塞式的解决方案：原子变量<code>AtomicInteger</code>、<code>AtomicLong</code></li>
</ul>
<blockquote>
<p>synchronized</p>
</blockquote>
<p>语法;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (对象) &#123;</span><br><span class="line">    临界区</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解决：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;AddSub&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SafeAddSubDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Integer counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                    counter++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                    counter--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        log.debug(<span class="string">&quot;counter = &#123;&#125;&quot;</span>, counter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就能保证输出结果为0了。</p>
<blockquote>
<p>思考</p>
</blockquote>
<p><code>synchronized</code>实际是用对象锁保证了临界区代码的原子性，临界区内的代码对外是不可分割的，不会被线程切换所打断。</p>
<p>思考如下问题：</p>
<ul>
<li><p>如果把<code>synchronized(obj)</code>放在for循环的外面, 如何理解？</p>
<p>for循环也是一个原子操作, 表现出原子性。</p>
</li>
<li><p>如果t1<code>synchronized(obj1)</code> 而 t2<code>synchronized(obj2)</code>会怎么运行?<br>因为t1,、t2拿到不是同一把对象锁,，所以他们仍然会发现安全问题， 必须要是同一把对象锁。</p>
</li>
<li><p>如果t1<code>synchronized(obj)</code>而t2没有加会怎么样 ?<br>因为t2没有加锁，所以t2不需要获取t1的锁， 直接就可以执行下面的代码, 仍然会出现安全问题。</p>
</li>
</ul>
<blockquote>
<p>面向对象改进</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;BetterAddAndSub&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BetterAddSubDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Room room = <span class="keyword">new</span> Room();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">                room.increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">                room.decrement();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        log.debug(<span class="string">&quot;counter = &#123;&#125;&quot;</span>, room.getCounter());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Room</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            counter++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrement</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            counter--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCounter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> counter;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-1-3-八锁现象"><a href="#2-1-3-八锁现象" class="headerlink" title="2.1.3 八锁现象"></a>2.1.3 八锁现象</h3><blockquote>
<p>方法上的synchronized</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    	<span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 等价于（锁住的是实例对象）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">    	<span class="comment">// do something</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 等价于（锁住的是类对象）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(Test.class) &#123;</span><br><span class="line">            <span class="comment">// do something</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>八锁现象</p>
</blockquote>
<p>情况一：<code>synchronized</code>方法锁住的是实例对象，两个方法使用同一个锁，谁先获取锁谁先执行。</p>
<p>结果：<u>AB</u></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;LockTest&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Lock lock = <span class="keyword">new</span> Lock();</span><br><span class="line">        <span class="keyword">new</span> Thread(lock::printA, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(lock::printB, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;Lock&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span> </span>&#123; log.debug(<span class="string">&quot;A =&gt; [&#123;&#125;]&quot;</span>, System.nanoTime()); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span> </span>&#123; log.debug(<span class="string">&quot;B =&gt; [&#123;&#125;]&quot;</span>, System.nanoTime()); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>情况二：<code>synchronized</code>方法锁住的是实例对象，两个方法使用同一个锁，谁先获取锁谁先执行。</p>
<p>结果：<u>AB</u></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;LockTest1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockDemo2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Lock2 lock = <span class="keyword">new</span> Lock2();</span><br><span class="line">        <span class="keyword">new</span> Thread(lock::printA, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(lock::printB, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;Lock&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lock2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;A =&gt; [&#123;&#125;]&quot;</span>, System.nanoTime());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;B =&gt; [&#123;&#125;]&quot;</span>, System.nanoTime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>情况三：未加<code>synchronized</code>的方法不需要等待锁。</p>
<p>结果：<u>CAB</u></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;LockTest3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockDemo3</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Lock3 lock = <span class="keyword">new</span> Lock3();</span><br><span class="line">        <span class="keyword">new</span> Thread(lock::printA, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(lock::printB, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(lock::printC, <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;Lock3&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lock3</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>); <span class="comment">// 会让出CPU执行权</span></span><br><span class="line">        log.debug(<span class="string">&quot;A =&gt; [&#123;&#125;]&quot;</span>, System.nanoTime());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;B =&gt; [&#123;&#125;]&quot;</span>, System.nanoTime());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;C =&gt; [&#123;&#125;]&quot;</span>, System.nanoTime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>情况四：两个线程的方法锁住是各自的实例对象，不存在互斥，并且睡眠会让出CPU执行权。</p>
<p>结果：<u>BA</u></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;LockTest4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockDemo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Lock4 lock1 = <span class="keyword">new</span> Lock4();</span><br><span class="line">        Lock4 lock2 = <span class="keyword">new</span> Lock4();</span><br><span class="line">        <span class="keyword">new</span> Thread(lock1::printA, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(lock2::printB, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;Lock4&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lock4</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>); </span><br><span class="line">        log.debug(<span class="string">&quot;A =&gt; [&#123;&#125;]&quot;</span>, System.nanoTime());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;B =&gt; [&#123;&#125;]&quot;</span>, System.nanoTime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>情况5：<code>static synchronized</code>方法锁住的是类对象，<code>synchronized</code>方法锁住的是实例对象。两线程锁住的对象不同，不存在互斥。</p>
<p>结果：<u>BA</u></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;LockTest5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockDemo5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Lock5 lock5 = <span class="keyword">new</span> Lock5();</span><br><span class="line">        <span class="keyword">new</span> Thread(Lock5::printA, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(lock5::printB, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;Lock5&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lock5</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;A =&gt; [&#123;&#125;]&quot;</span>, System.nanoTime());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;B =&gt; [&#123;&#125;]&quot;</span>, System.nanoTime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>情况六：<code>synchronized</code>方法锁住的是类对象，两线程使用同一个锁，谁先获取谁先执行。</p>
<p>结果：<u>AB</u></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;LockTest6&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockDemo6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(Lock6::printA, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(Lock6::printB, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;Lock6&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lock6</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;A =&gt; [&#123;&#125;]&quot;</span>, System.nanoTime());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;B =&gt; [&#123;&#125;]&quot;</span>, System.nanoTime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>情况七：两个线程使用的一个是类对象，一个是实例对象，不存在互斥。</p>
<p>结果：<u>BA</u></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;LockTest7&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockDemo7</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Lock7 lock7 = <span class="keyword">new</span> Lock7();</span><br><span class="line">        <span class="keyword">new</span> Thread(Lock7::printA, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(lock7::printB, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;Lock7&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lock7</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;A =&gt; [&#123;&#125;]&quot;</span>, System.nanoTime());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;B =&gt; [&#123;&#125;]&quot;</span>, System.nanoTime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>情况八：两个线程的方法锁住的都是类对象，谁先获取谁先执行。</p>
<p>结果：<u>AB</u></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;LockTest8&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockDemo8</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(Lock8::printA, <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(Lock8::printB, <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;Lock8&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lock8</span> </span>&#123;</span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;A =&gt; [&#123;&#125;]&quot;</span>, System.nanoTime());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;B =&gt; [&#123;&#125;]&quot;</span>, System.nanoTime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-1-4-变量的线程安全"><a href="#2-1-4-变量的线程安全" class="headerlink" title="2.1.4  变量的线程安全"></a>2.1.4  变量的线程安全</h3><blockquote>
<p>成员变量和静态变量</p>
</blockquote>
<ul>
<li>如果它们没有共享，则线程安全</li>
<li>如果它们被共享了：<ul>
<li>如果只有读操作，则线程安全</li>
<li>如果有读写操作，则这段代码是临界区，需要考虑线程安全</li>
</ul>
</li>
</ul>
<blockquote>
<p>局部变量</p>
</blockquote>
<ul>
<li>局部变量是线程安全的</li>
<li>局部变量的引用未必是线程安全的<ul>
<li>如果该对象没有逃离方法的作用范围，它是线程安全的</li>
<li>如果该对象逃离了方法的作用范围，需要考虑线程安全</li>
</ul>
</li>
</ul>
<blockquote>
<p>成员变量案例分析</p>
</blockquote>
<p>有如下类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnsafeOperation</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(<span class="keyword">int</span> loopNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class="line">            <span class="comment">// &#123; 临界区，会产生竞态条件</span></span><br><span class="line">                method2();</span><br><span class="line">                method3();</span><br><span class="line">            <span class="comment">// &#125; 临界区</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123; list.add(<span class="string">&quot;1&quot;</span>); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123; list.remove(<span class="number">0</span>); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行如下代码则会出现线程安全问题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;UnsafeArrayList&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeArrayListDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THREAD_NUMBER = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LOOP_NUMBER = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        UnsafeOperation operation = <span class="keyword">new</span> UnsafeOperation();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; THREAD_NUMBER; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; operation.method1(LOOP_NUMBER), <span class="string">&quot;Thread&quot;</span> + (i + <span class="number">1</span>)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析：</p>
<ul>
<li>两个线程中的<code>method2</code>引用的都是同一个对象中的list成员变量。</li>
<li><code>method3</code>和<code>method2</code>分析相同。</li>
</ul>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62531/image-20210407220707659.png" class="" title="image-20210407220707659">

<p>将原类中的成员变量修改为局部变量则不会有线程安全问题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SafeOperation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">(<span class="keyword">int</span> loopNumber)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class="line">            method2(list);</span><br><span class="line">            method3(list);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">(ArrayList&lt;String&gt; list)</span> </span>&#123; list.add(<span class="string">&quot;1&quot;</span>); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">(ArrayList&lt;String&gt; list)</span> </span>&#123; list.remove(<span class="number">0</span>); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析：</p>
<ul>
<li><code>list</code>是局部变量，每个线程调用时会创建其不同实例，没有共享。</li>
<li><code>method2</code>的参数是从<code>method1</code>中传递过来的，与<code>method1</code>中引用同一个对象。</li>
<li><code>method3</code>的参数分析与<code>method2</code>相同。</li>
</ul>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62531/image-20210407221447318.png" class="" title="image-20210407221447318">



<blockquote>
<p>private或final的重要性</p>
</blockquote>
<p>在上述的<code>SafeOperation</code>中，如果把<code>method2</code>和<code>method3</code>的方法修改为<code>public</code>会不会导致线程安全问题？</p>
<p>情况一：有其他线程调用<code>method2</code>和<code>method3</code>。</p>
<p>结果：不会导致线程安全问题，因为一个线程调用<code>method1</code>中的局部变量<code>list</code>与其他线程传给<code>method2</code>和<code>method3</code>的参数不同。</p>
<p>情况二：为<code>SafeOperation</code>添加子类，子类覆盖<code>method3</code>方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSafeOperation</span> <span class="keyword">extends</span> <span class="title">SafeOperation</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">(ArrayList&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; list.remove(<span class="number">0</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：由于<code>method3</code>的访问权限为<code>public</code>，此时子类重写父类的方法，子类和父类共享<code>list</code>对象，在子类中新开线程来操作<code>list</code>对象，此时就会出现线程安全问题。</p>
<p>所以不想子类重写父类的方法的，需要将父类中的方法设置为<code>private</code>或者<code>final</code>，这便是开闭原则中的【闭】。</p>
<blockquote>
<p>4.5 常见线程安全类</p>
</blockquote>
<ul>
<li>String</li>
<li>Integer</li>
<li>StringBuffer</li>
<li>Random</li>
<li>Vector</li>
<li>HashTable</li>
<li>ConcurrentMap</li>
<li>java.util.concurrent</li>
</ul>
<p>它们的每个方法是原子的，但是它们多个方法的组合不是原子的。</p>
<h3 id="2-1-5-习题"><a href="#2-1-5-习题" class="headerlink" title="2.1.5 习题"></a>2.1.5 习题</h3><blockquote>
<p>卖票</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;ExerciseSell&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExerciseSellDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Random为线程安全</span></span><br><span class="line">    <span class="keyword">static</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随机数1~5</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">randomAmount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> random.nextInt(<span class="number">5</span>) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 售票窗口，总共1000张票</span></span><br><span class="line">        TicketWindow window = <span class="keyword">new</span> TicketWindow(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">// 线程集合，模拟多人买票</span></span><br><span class="line">        List&lt;Thread&gt; threadList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 卖出的票数统计，Vector线程安全</span></span><br><span class="line">        List&lt;Integer&gt; amountList = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        <span class="comment">// 模拟1000个人买票</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="comment">// 买票</span></span><br><span class="line">                <span class="keyword">int</span> amount = window.sell(randomAmount());</span><br><span class="line">                <span class="comment">// 睡眠</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(randomAmount());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 统计买票数</span></span><br><span class="line">                amountList.add(amount);</span><br><span class="line">            &#125;);</span><br><span class="line">            threadList.add(thread);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Thread thread : threadList) &#123;</span><br><span class="line">            thread.join();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 查看余票数量和售票数量之和是否为1000</span></span><br><span class="line">        log.debug(<span class="string">&quot;余票 =&gt; [&#123;&#125;]&quot;</span>, window.getCount());</span><br><span class="line">        log.debug(<span class="string">&quot;售票 =&gt; [&#123;&#125;]&quot;</span>, amountList.stream().mapToInt(i -&gt; i).sum());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 售票窗口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TicketWindow</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 票总数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TicketWindow</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取余票数量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 售票</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sell</span><span class="params">(<span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.count &gt;= amount) &#123;</span><br><span class="line">            <span class="keyword">this</span>.count -= amount;</span><br><span class="line">            <span class="keyword">return</span> amount;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了测出异常结果，使用windows测试脚本：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> /L %n <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">1</span>,<span class="number">10</span>) <span class="keyword">do</span> java <span class="literal">-cp</span> <span class="string">&quot;.;C:\Java\maven\localRepository\org\projectlombok\lombok\1.18.12\lombok-1.18.12.jar;C:\Java\maven\localRepository\ch\qos\logback\logback-classic\1.1.2\logback-classic-1.1.2.jar;C:\Java\maven\localRepository\ch\qos\logback\logback-core\1.1.2\logback-core-1.1.2.jar;C:\Java\maven\localRepository\org\slf4j\slf4j-api\1.7.6\slf4j-api-1.7.6.jar&quot;</span> top.parak.safe.ExerciseSellDemo</span><br></pre></td></tr></table></figure>

<p>多次测试，终于发现错误结果：</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62531/image-20210408140200022.png" class="" title="image-20210408140200022">

<p>分析原因，就在于临界区<code>TicketWindow</code>的<code>sell()</code>方法，多个线程对类的成员变量<code>count</code>进行写操作，而这个方法并未受到保护，于是出现线程安全问题。只需要在方法头上标识<code>synchronized</code>即可，锁住实例对象，则线程安全。</p>
<blockquote>
<p>转账</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;ExerciseTransfer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExerciseTransferDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Random为线程安全</span></span><br><span class="line">    <span class="keyword">static</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随机数1~100</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">randomAmount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> random.nextInt(<span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 模拟两个账户</span></span><br><span class="line">        Account k1 = <span class="keyword">new</span> Account(<span class="number">1000</span>);</span><br><span class="line">        Account k2 = <span class="keyword">new</span> Account(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">// 互相转账1000次</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">               k1.transfer(k2, randomAmount());</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                k2.transfer(k1, randomAmount());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        <span class="comment">// 查看转账2000次后的余额</span></span><br><span class="line">        log.debug(<span class="string">&quot;k1 =&gt; [&#123;&#125;]&quot;</span>, k1.getMoney());</span><br><span class="line">        log.debug(<span class="string">&quot;k2 =&gt; [&#123;&#125;]&quot;</span>, k2.getMoney());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 账户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> money;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(<span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Account target, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.money &gt;= amount) &#123;</span><br><span class="line">            <span class="keyword">this</span>.setMoney(<span class="keyword">this</span>.getMoney() - amount);</span><br><span class="line">            target.setMoney(target.getMoney() + amount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行一次：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021-04-08 14:47:33.703 [main] DEBUG ExerciseTransfer - k1 &#x3D;&gt; [1]</span><br><span class="line">2021-04-08 14:47:33.706 [main] DEBUG ExerciseTransfer - k2 &#x3D;&gt; [145]</span><br></pre></td></tr></table></figure>

<p>发现<code>k1</code>和<code>k2</code>的余额之和不为2000，所以<code>Account</code>是线程不安全的。</p>
<p>由于转账需要操作自己和对方的<code>money</code>，所以需要直接锁住两个类的<code>money</code>，即锁住<code>Account</code>类。</p>
<p>改进如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Account target, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (Account.class) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.money &gt;= amount) &#123;</span><br><span class="line">            <span class="keyword">this</span>.setMoney(<span class="keyword">this</span>.getMoney() - amount);</span><br><span class="line">            target.setMoney(target.getMoney() + amount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="2-2-第二部分-Monitor"><a href="#2-2-第二部分-Monitor" class="headerlink" title="2.2 第二部分-Monitor"></a>2.2 第二部分-Monitor</h2><h3 id="2-2-1-Monitor"><a href="#2-2-1-Monitor" class="headerlink" title="2.2.1 Monitor"></a>2.2.1 Monitor</h3><blockquote>
<p>Java对象头</p>
</blockquote>
<p>普通对象</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62531/image-20210408123514132.png" class="" title="image-20210408123514132">

<p>数组对象</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62531/image-20210408123633123.png" class="" title="image-20210408123633123">

<p>其中Mark Word结构为：</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62531/image-20210408123818981.png" class="" title="image-20210408123818981">

<ul>
<li><code>Normal</code>：一般状态，没有加任何锁，Mark Word前面30位保存的是对象的信息，最后2位为状态（01），倒数第三位表示是否使用偏向锁（未使用：0）</li>
<li><code>Biased</code>：偏向状态，使用偏向锁，Mark Word前面30位保存当前线程的ID，最后2位为状态（01），倒数第三位表示是否使用偏向锁（使用：1）</li>
<li><code>Lightweight</code>：使用轻量级锁，Mark Word前30位保存的是锁记录的指针，最后2位为状态（00）</li>
<li><code>Heavyweight</code>：使用重量级锁，Mark Word前30位保存的是Monitor的地址指针，最后2位状态（10）</li>
</ul>
<blockquote>
<p>Monitor</p>
</blockquote>
<p>Monitor被翻译为监视器或管程</p>
<p>每个Java对象都可以关联一个Monitor对象，如果使用<code>synchronized</code>给对象上锁（重量级）之后，该对象头的Mark Word中就被设置指向Monitor对象的指针。</p>
<p>Monitor结构如下：</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62531/image-20210408204555166.png" class="" title="image-20210408204555166">

<ul>
<li>刚开始<code>Monitor</code>中<code>Owner</code>为null。</li>
<li>当<code>Thread-2</code>执行<code>synchronized(obj)</code>就会将<code>Monitor</code>的所有者<code>Owner</code>置为<code>Thread-2</code>，<code>Monitor</code>中只能有一个<code>Owner</code>。</li>
<li>当<code>Thread-2</code>上锁的过程中，如果<code>Thread-3</code>、<code>Thread-4</code>、<code>Thread-5</code>也来执行<code>synchronized(obj)</code>，就会进入<code>EntryList BLOCKED</code>。</li>
<li><code>Thread-2</code>执行完同步代码块的内容，然后唤醒<code>EntryList</code>中等待的线程来竞争锁，竞争的是非公平的。</li>
<li>图中的<code>WaitSet</code>中的<code>Thread-0</code>、<code>Thread-1</code>是之前获得过锁，但条件不满足进入<code>WAITING</code>状态的线程。</li>
</ul>
<p>注意：</p>
<ul>
<li>synchronized必须是进入同一个对象的Monitor才有上述的效果。</li>
<li>不加synchronized的对象不会关联监视器，不遵从以上规则。</li>
</ul>
<h3 id="2-2-2-synchronized原理"><a href="#2-2-2-synchronized原理" class="headerlink" title="2.2.2 synchronized原理"></a>2.2.2 synchronized原理</h3><p>Demo：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">        counter++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>字节码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">   descriptor: ([Ljava/lang/String;)V</span><br><span class="line">   flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">   Code:</span><br><span class="line">     stack=<span class="number">2</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line">        0: getstatic     #2         // 从类中获取静态变量lock (synchronized开始)</span><br><span class="line">        <span class="number">3</span>: dup                      <span class="comment">// 复制操作数栈的栈顶数值</span></span><br><span class="line">        <span class="number">4</span>: astore_1                 <span class="comment">// 将复制的引用插入到局部变量表索引为1的位置</span></span><br><span class="line">        <span class="number">5</span>: monitorenter             <span class="comment">// 进入lock对象的MarkWord的monitor</span></span><br><span class="line">        6: getstatic     #3         // 从类中获取静态变量i</span><br><span class="line">        <span class="number">9</span>: iconst_1                 <span class="comment">// 将i放入常量池</span></span><br><span class="line">       <span class="number">10</span>: iadd                     <span class="comment">// 让i自增</span></span><br><span class="line">       11: putstatic     #3         // 将类中的静态变量i值设置为新值</span><br><span class="line">       <span class="number">14</span>: aload_1                  <span class="comment">// 导出局部变量表中索引为1的位置的对象，即lock引用</span></span><br><span class="line">       <span class="number">15</span>: monitorexit              <span class="comment">// 退出lock对象的MarkWord的monitor，唤醒EntryList</span></span><br><span class="line">       <span class="number">16</span>: goto          <span class="number">24</span>         <span class="comment">// 直接goto24的return </span></span><br><span class="line">       <span class="number">19</span>: astore_2                 <span class="comment">// 将异常对象插入到局部变量表索引为2的位置</span></span><br><span class="line">       <span class="number">20</span>: aload_1                  <span class="comment">// 加载局部变量表中索引为1的位置的对象，即lock引用</span></span><br><span class="line">       <span class="number">21</span>: monitorexit              <span class="comment">// 退出lock对象的MarkWord的monitor，唤醒EntryList</span></span><br><span class="line">       <span class="number">22</span>: aload_2                  <span class="comment">// 加载局部变量表中索引为2的位置的对象，即异常</span></span><br><span class="line">       <span class="number">23</span>: athrow                   <span class="comment">// throw Exception</span></span><br><span class="line">       <span class="number">24</span>: <span class="keyword">return</span></span><br><span class="line">     Exception table:</span><br><span class="line">        from    to  target type</span><br><span class="line">            <span class="number">6</span>    <span class="number">16</span>    <span class="number">19</span>   any     <span class="comment">// 同步代码块6-16，共享一个异常</span></span><br><span class="line">           <span class="number">19</span>    <span class="number">22</span>    <span class="number">19</span>   any     <span class="comment">// 同步代码块19-22，共享一个异常</span></span><br></pre></td></tr></table></figure>



<h3 id="2-2-3-轻量级锁"><a href="#2-2-3-轻量级锁" class="headerlink" title="2.2.3 轻量级锁"></a>2.2.3 轻量级锁</h3><p>使用场景：如果一个对象虽然有多线程访问，但多线程访问的时间是错开的（也就是没有竞争），那么可以使用轻量级锁来优化。</p>
<p>轻量级锁对使用者是透明的，即语法仍然是<code>synchronized</code>。</p>
<p>假设有两个方法同步块，利用同一个对象加锁：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> vod <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">        <span class="comment">// 同步块A</span></span><br><span class="line">        method2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">        <span class="comment">// 同步块B</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>加锁流程：</p>
<ul>
<li><p>栈帧中创建锁记录（Lock Record）对象：每个线程的栈帧都会包含一个锁记录的结构，内部可以存储锁定对象的Mark Word</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62531/image-20210409150238190.png" class="" title="image-20210409150238190">
</li>
<li><p>让锁记录中Object reference指向锁对象，并尝试用CAS替换Object的Mark Word，将Mark Word的值存入锁记录</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62531/image-20210409150651052.png" class="" title="image-20210409150651052">
</li>
<li><p>如果CAS替换成功，对象头中存储了锁记录地址和状态，表示由该线程给对象加锁，这时图示如下：</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62531/image-20210409155409161.png" class="" title="image-20210409155409161">
</li>
<li><p>如果CAS替换失败，有两种情况：</p>
<ul>
<li>如果是其他线程已经持有了该Object的轻量级锁，这时表明有竞争，进入锁膨胀过程</li>
<li>如果是自己执行了synchronized锁重入，那么再添加一条Lock Record作为重入的计数。在上面的代码中</li>
</ul>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62531/image-20210409155939040.png" class="" title="image-20210409155939040">
</li>
<li><p>当退出synchronized代码块（解锁时）如果有取值位null的锁记录，表示有重入，这是重置锁记录，表示重入计数减一</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62531/image-20210409160448791.png" class="" title="image-20210409160448791">
</li>
<li><p>当退出synchronized代码块（解锁时）锁记录的值不为null，这时使用CAS将Mark Word的值恢复给对象头。</p>
<ul>
<li>成功，则解锁成功</li>
<li>失败，说明轻量级锁进行了锁膨胀或已经升级位重量级锁，进入重量级锁解锁流程</li>
</ul>
</li>
</ul>
<h3 id="2-2-4-重量级锁"><a href="#2-2-4-重量级锁" class="headerlink" title="2.2.4 重量级锁"></a>2.2.4 重量级锁</h3><p>如果在尝试加轻量级锁的过程中，CAS操作无法成功，这时一种情况就是有其他线程为此对象加上了轻量级锁（有竞争），这是需要进行锁膨胀，将轻量级锁变为重量级锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">        <span class="comment">// 同步块</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>当Thread-1进行轻量级加锁时，Thread-0已经对该对象加了轻量级锁</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62531/image-20210409161426089.png" class="" title="image-20210409161426089">
</li>
<li><p>这时Thread-1加轻量级锁失败，进入锁膨胀流程（因为Thread-1线程加轻量级锁失败，轻量级锁没有阻塞队列的概念，所以此时就要为对象申请Monitor锁（重量级锁），让Object指向重量级锁，然后Thread-1自己进入了Monitor的EntryList变成BLOCKED状态。）</p>
<ul>
<li>即为Object对象申请Monitor锁，让Object指向重量级锁地址</li>
<li>然后自己进入Monitor的EntryList BLOCKED</li>
</ul>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62531/image-20210409163035688.png" class="" title="image-20210409163035688">
</li>
<li><p>当Thread-0退出同步块解锁时，使用CAS将Mark Word的值恢复给对象头，肯定恢复失败，因为对象的对象头中存储的是重量级锁的地址。这时会进入重量级解锁流程，即按照Monitor地址找到Monitor对象，设置Owner为null，唤醒EntryList中BLOCKED线程Thread-1。</p>
</li>
</ul>
<blockquote>
<p>自旋锁优化</p>
</blockquote>
<p>重量级锁竞争的时候，还可以使用自旋来进行优化，如果当前线程自旋成功（即这时候持锁线程已经退出了同步块，释放了锁），这时当前线程就可以避免阻塞。</p>
<p>在Java 6之后自旋锁是自适应的，比如对象刚刚的一次自旋操作成功过，那么认为这次自旋成功的可能性会高，就多自旋几次；反之，就少自旋甚至不自旋，总之，比较智能。</p>
<p>Java 7之后不能控制是否开启自旋功能。</p>
<h3 id="2-2-5-偏向锁"><a href="#2-2-5-偏向锁" class="headerlink" title="2.2.5 偏向锁"></a>2.2.5 偏向锁</h3><p>轻量级锁在没有竞争时，每次重入仍然需要执行CAS操作。</p>
<p>Java 6中引入了偏向锁来做进一步优化：只有第一次使用CAS将线程ID设置到对象的Mark Word头，之后发现这个线程ID是自己的就表示没有竞争，不用重新CAS。以后只要不发生竞争，这个对象就归该线程所有。</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">        <span class="comment">// 同步块A</span></span><br><span class="line">        m2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">        <span class="comment">// 同步块B</span></span><br><span class="line">        m3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">        <span class="comment">// 同步块C</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62531/image-20210409171350303.png" class="" title="image-20210409171350303">



<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62531/image-20210409171429240.png" class="" title="image-20210409171429240">



<blockquote>
<p>偏向状态</p>
</blockquote>
<p>一个对象创建时：</p>
<ul>
<li><p>如果开启了偏向锁（默认开启），那么对象创建后，Mark Word值为0x05即最后三位为101，这时它的thread_id、epoch、age都为0。</p>
</li>
<li><p>偏向锁是默认是延迟的，不会在程序启动时立即生效，如果想避免延迟，可以加VM参数</p>
<p><code>-XX:BiasedLockingStartupDelay=0</code>来禁用延迟。</p>
</li>
<li><p>如果没有开启偏向锁，那么对象创建后，Mark Word值为0x01即最后3位为001，这时它的hashcode、age都为0，第一次用到hashcode时才会赋值。</p>
</li>
<li><p>JVM禁用偏向锁：<code>-XX:-UseBiasedLocking</code></p>
</li>
</ul>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;Biased&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BiasedDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Biased biased = <span class="keyword">new</span> Biased();</span><br><span class="line">        log.debug(<span class="string">&quot;Before Biased Lock&quot;</span>);</span><br><span class="line">        log.debug(ClassLayout.parseInstance(biased.toPrintable());</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;After Biased Lock&quot;</span>);</span><br><span class="line">        log.debug(ClassLayout.parseInstance(biased).toPrintable());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Biased</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021-04-09 19:14:30.487 [main] DEBUG Biased - Before Biased Lock</span><br><span class="line">2021-04-09 19:14:32.083 [main] DEBUG Biased - top.parak.safe.Biased object internals:</span><br><span class="line"> OFFSET  SIZE   TYPE DESCRIPTION                               VALUE</span><br><span class="line">      0     4        (object header)                           01 00 00 00 (00000001 00000000 00000000 00000000) (1)</span><br><span class="line">      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)</span><br><span class="line">      8     4        (object header)                           70 b8 01 f8 (01110000 10111000 00000001 11111000) (-134104976)</span><br><span class="line">     12     4        (loss due to the next object alignment)</span><br><span class="line">Instance size: 16 bytes</span><br><span class="line">Space losses: 0 bytes internal + 4 bytes external &#x3D; 4 bytes total</span><br><span class="line"></span><br><span class="line">2021-04-09 19:14:35.096 [main] DEBUG Biased - After Biased Lock</span><br><span class="line">2021-04-09 19:14:35.097 [main] DEBUG Biased - top.parak.safe.Biased object internals:</span><br><span class="line"> OFFSET  SIZE   TYPE DESCRIPTION                               VALUE</span><br><span class="line">      0     4        (object header)                           05 00 00 00 (00000101 00000000 00000000 00000000) (5)</span><br><span class="line">      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)</span><br><span class="line">      8     4        (object header)                           70 b8 01 f8 (01110000 10111000 00000001 11111000) (-134104976)</span><br><span class="line">     12     4        (loss due to the next object alignment)</span><br><span class="line">Instance size: 16 bytes</span><br><span class="line">Space losses: 0 bytes internal + 4 bytes external &#x3D; 4 bytes total</span><br></pre></td></tr></table></figure>

<p>因为偏向锁有延迟，所以在第二次创建对象前延时5S。</p>
<p>第一次创建对象时，可以看到，对象头的第一个字节为<code>00000001</code>，即没有加锁，</p>
<p>第二次创建对象时，可以看到，对象头的第一个字节为<code>00000101</code>，即加偏向锁。</p>
<blockquote>
<p>工具类</p>
</blockquote>
<p>这个工具类主要是将繁琐的<code>ClassLayout.parseInstance(obj).toPrintable()</code>的详细信息输出做一步简化，只输出关于Mark Word锁那一行的部分：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.openjdk.jol.info.ClassLayout;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2021-04-09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLayoutUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> FIRST_LINE_START = <span class="number">185</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> LINE_LENGTH = <span class="number">53</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">printSimple</span><span class="params">(ClassLayout instance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance.toPrintable().substring(FIRST_LINE_START, FIRST_LINE_START + LINE_LENGTH);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>撤销偏向锁-hashcode方法</p>
</blockquote>
<p>使用偏向锁则进入Biased状态，使用<code>hashcode()</code>方法则进入Normal状态。</p>
<p>Normal状态下：Mark Word(32) = hashcode(25) + age(4) + biased(1) + 01(2)</p>
<p>Biased状态下：Mark Word(32) = thread_id(23) + epoch(2) + biased(1) + 01(2) </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;HashcodeBiased&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashcodeBiasedDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * -XX:BiasedLockingStartupDelay=0  禁用偏向锁延迟</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashcodeBiased biased = <span class="keyword">new</span> HashcodeBiased();</span><br><span class="line">        log.debug(ClassLayoutUtil.printSimple(ClassLayout.parseInstance(biased))); <span class="comment">// 偏向锁</span></span><br><span class="line">        log.debug(String.valueOf(biased.hashCode()));</span><br><span class="line">        log.debug(ClassLayoutUtil.printSimple(ClassLayout.parseInstance(biased))); <span class="comment">// 无锁</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashcodeBiased</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021-04-09 23:03:39.378 [main] DEBUG HashcodeBiased - 00 00 00 (00000101 00000000 00000000 00000000) (5)</span><br><span class="line">2021-04-09 23:03:39.380 [main] DEBUG HashcodeBiased - 1268650975</span><br><span class="line">2021-04-09 23:03:39.381 [main] DEBUG HashcodeBiased - df 13 9e (00000001 11011111 00010011 10011110) (-1642</span><br></pre></td></tr></table></figure>

<p>可以看到第一行为<code>101</code>，第三行为<code>001</code>，说明对象的偏向锁被撤销。</p>
<blockquote>
<p>撤销偏向锁-其他线程使用对象</p>
</blockquote>
<p>当有其他线程使用偏向锁对象时，会将偏向锁升级为轻量级锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;OtherThreadBiased&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OtherThreadBiasedDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * -XX:BiasedLockingStartupDelay=0  禁用偏向锁延迟</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        OtherThreadBiased biased = <span class="keyword">new</span> OtherThreadBiased();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            log.debug(ClassLayoutUtil.printSimple(ClassLayout.parseInstance(biased)));     <span class="comment">//  偏向锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (biased) &#123;</span><br><span class="line">                log.debug(ClassLayoutUtil.printSimple(ClassLayout.parseInstance(biased))); <span class="comment">// 偏向锁</span></span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(ClassLayoutUtil.printSimple(ClassLayout.parseInstance(biased)));     <span class="comment">// 偏向锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (OtherThreadBiased.class) &#123;</span><br><span class="line">                OtherThreadBiased.class.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (OtherThreadBiased.class) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    OtherThreadBiased.class.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(ClassLayoutUtil.printSimple(ClassLayout.parseInstance(biased)));      <span class="comment">// 偏向锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (biased) &#123;</span><br><span class="line">                log.debug(ClassLayoutUtil.printSimple(ClassLayout.parseInstance(biased)));  <span class="comment">// 偏向锁</span></span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(ClassLayoutUtil.printSimple(ClassLayout.parseInstance(biased)));      <span class="comment">// 无锁</span></span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OtherThreadBiased</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021-04-09 23:20:08.722 [t1] DEBUG OtherThreadBiased - 05 00 00 00 (00000101 00000000 00000000 00000000) (5)</span><br><span class="line">2021-04-09 23:20:08.724 [t1] DEBUG OtherThreadBiased - 05 80 71 20 (00000101 10000000 01110001 00100000) (54</span><br><span class="line">2021-04-09 23:20:08.725 [t1] DEBUG OtherThreadBiased - 05 80 71 20 (00000101 10000000 01110001 00100000) (54</span><br><span class="line">2021-04-09 23:20:08.726 [t2] DEBUG OtherThreadBiased - 05 80 71 20 (00000101 10000000 01110001 00100000) (54</span><br><span class="line">2021-04-09 23:20:08.727 [t2] DEBUG OtherThreadBiased - a0 f2 c0 20 (10100000 11110010 11000000 00100000) (54</span><br><span class="line">2021-04-09 23:20:08.728 [t2] DEBUG OtherThreadBiased - 01 00 00 00 (00000001 00000000 00000000 00000000) (1)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>撤销偏向锁-调用wait/notify</p>
</blockquote>
<p>因为wait/notify只有重量级锁才有。</p>
<blockquote>
<p>批量重定向</p>
</blockquote>
<p>如果对象虽然被多个线程访问，但没有竞争，这时偏向了线程T1的对象仍有机会重新偏向T2，重偏向会重置对象的Thread ID。</p>
<p>当撤销偏向锁阈值超过20次后，JVM会这样觉得，我是不是偏向错了呢，于是会再给这些对象加锁时重新偏向至加锁线程。</p>
<blockquote>
<p>批量撤销</p>
</blockquote>
<p>当撤销偏向锁阈值超过40次后，JVM会这样觉得，自己确实偏向错了，根本就不该偏向，于是整个类的所有对象都会变为不可偏向的，新建的对象也是不可偏向的。</p>
<blockquote>
<p>锁消除</p>
</blockquote>
<ul>
<li>线程同步的代价是相当高的，同步的后果是降低并发性和性能。</li>
<li>在动态编译同步块的时候，JIT编译器可以借助逃逸分析来判断同步块所使用的锁对象是否只能够被一个线程访问而没有被发布到其他线程。</li>
<li>如果没有，那么JIT编译器在编译这个同步块的时候就会取消对这部分代码的同步。</li>
</ul>
<h2 id="2-3-第三部分-模式"><a href="#2-3-第三部分-模式" class="headerlink" title="2.3 第三部分-模式"></a>2.3 第三部分-模式</h2><h3 id="2-3-1-wait-notify"><a href="#2-3-1-wait-notify" class="headerlink" title="2.3.1 wait notify"></a>2.3.1 wait notify</h3><blockquote>
<p>wait/notify原理</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62531/image-20210410164622176.png" class="" title="image-20210410164622176">



<ul>
<li><code>Owner</code>线程发现条件不满足，调用<code>wait</code>方法，即可进入<code>WaitSet</code>变成<code>WAITING</code>状态</li>
<li><code>BLOCKED</code>和<code>WAITING</code>的线程都处于阻塞状态，不占用CPU时间片</li>
<li><code>BLOCKED</code>线程会在<code>Owner</code>线程加锁时唤醒</li>
<li><code>WAITING</code>线程会在<code>Owner</code>线程调用<code>notify</code>或<code>notifyAll</code>时唤醒，但唤醒后并不意味着立刻获得锁，仍需进入<code>EntryList</code>重新竞争。</li>
</ul>
<blockquote>
<p>API介绍</p>
</blockquote>
<ul>
<li><code>obj.wait()</code> 让进入object监视器的线程到<code>WaitSet</code>等待</li>
<li><code>obj.notify()</code> 在object上正在<code>WaitSet</code>等待的线程中挑一个唤醒</li>
<li><code>obj.notifyAll()</code> 让object上正在<code>WaitSet</code>等待的线程全部唤醒</li>
</ul>
<p>它们都是线程之间进行协作的手段，都属于object对象的方法，必须获得此对象的锁，才能调用这几个方法。</p>
<p>案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;WaitNotify&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitNotifyDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;执行...&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    obj.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">&quot;其它代码...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;执行...&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    obj.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">&quot;其它代码...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;唤醒obj上其他线程&quot;</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">            obj.notify();     <span class="comment">// (1)</span></span><br><span class="line">            obj.notifyAll();  <span class="comment">// (2)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注释（2），即调用<code>obj.notify()</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021-04-10 19:53:10.709 [t1] DEBUG WaitNotify - 执行...</span><br><span class="line">2021-04-10 19:53:10.711 [t2] DEBUG WaitNotify - 执行...</span><br><span class="line">2021-04-10 19:53:11.717 [main] DEBUG WaitNotify - 唤醒obj上其他线程</span><br><span class="line">2021-04-10 19:53:11.717 [t1] DEBUG WaitNotify - 其它代码...</span><br></pre></td></tr></table></figure>

<p>注释（1），即调用<code>obj.notifyAll()</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021-04-10 19:54:13.288 [t1] DEBUG WaitNotify - 执行...</span><br><span class="line">2021-04-10 19:54:13.289 [t2] DEBUG WaitNotify - 执行...</span><br><span class="line">2021-04-10 19:54:14.296 [main] DEBUG WaitNotify - 唤醒obj上其他线程</span><br><span class="line">2021-04-10 19:54:14.296 [t2] DEBUG WaitNotify - 其它代码...</span><br><span class="line">2021-04-10 19:54:14.296 [t1] DEBUG WaitNotify - 其它代码...</span><br></pre></td></tr></table></figure>

<p>可以看到<code>notify</code>只能唤醒一个线程，而<code>notifyAll</code>唤醒了所有线程。</p>
<blockquote>
<p>sleep与wait</p>
</blockquote>
<p><code>Thread#sleep()</code>与<code>Object#wait()</code></p>
<p>相同点：</p>
<ul>
<li>线程进入了<code>sleep</code>和<code>wait</code>都进入<code>TIMED_WAITING</code>状态。</li>
</ul>
<p>不同点：</p>
<ul>
<li><code>sleep</code>不需要强制和<code>synchronized</code>配合使用，但是<code>wait</code>一定要和<code>synchronized</code>配合使用</li>
<li><code>sleep</code>在睡眠的同时不会释放对象锁，但是<code>wait</code>在等待时会释放对象锁。</li>
</ul>
<p>案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;SleepAndWait&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SleepAndWaitDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;获得锁&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">20_000</span>);  <span class="comment">// (1)</span></span><br><span class="line">                    lock.wait(<span class="number">20_000</span>);   <span class="comment">// (2)</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;获得锁&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注释（2），即调用<code>Thread.sleep()</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021-04-10 20:23:40.382 [t1] DEBUG SleepAndWait - 获得锁</span><br><span class="line">2021-04-10 20:24:00.386 [main] DEBUG SleepAndWait - 获得锁</span><br></pre></td></tr></table></figure>

<p>注释（1），即调用<code>obj.wait()</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">10</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">40.335</span> [t1] DEBUG SleepAndWait - 获得锁</span><br><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">10</span> <span class="number">20</span>:<span class="number">26</span>:<span class="number">41.335</span> [main] DEBUG SleepAndWait - 获得锁</span><br></pre></td></tr></table></figure>

<p>可以看到sleep情况下主线程20S后才拿到锁，而wait情况下主线程立即可以拿到锁。</p>
<blockquote>
<p>wait/notify正确姿势</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一个线程</span></span><br><span class="line"><span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">    <span class="keyword">while</span> (condition) &#123; <span class="comment">// 防止虚假唤醒</span></span><br><span class="line">    	lock.wait();</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一个线程</span></span><br><span class="line"><span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">	lock.notifyAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-3-2-同步模式之保护性暂停"><a href="#2-3-2-同步模式之保护性暂停" class="headerlink" title="2.3.2 同步模式之保护性暂停"></a>2.3.2 同步模式之保护性暂停</h3><blockquote>
<p>要点</p>
</blockquote>
<p>Guarded Suspension，用在一个线程等待另一个线程的执行结果。</p>
<ul>
<li>有一个结果需要从一个线程传递到另一个线程，让他们关联到一个Guarded Object</li>
<li>如果有结果不断从一个线程到另一个线程那么可以使用消息队列（见生产者/消费者）</li>
<li>JDK中，join的实现、future的实现，采用的就是此模式</li>
<li>因为要等待另一方的结果，因此归类到同步模式</li>
</ul>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62531/image-20210411112747728.png" class="" title="image-20210411112747728">



<blockquote>
<p>示例</p>
</blockquote>
<p>一个线程需要等待另一个线程的下载结果，并且设置超时时间。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;GuardedObject&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuardedObjectDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GuardedObject guardedObject = <span class="keyword">new</span> GuardedObject();</span><br><span class="line">        <span class="comment">// 获取结果线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;等待结果&quot;</span>);</span><br><span class="line">            List&lt;String&gt; response = (List&lt;String&gt;) guardedObject.getResponse(<span class="number">5000</span>);</span><br><span class="line">            <span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;结果大小：&#123;&#125;&quot;</span>, response.size());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;下载失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;receive&quot;</span>).start();</span><br><span class="line">        <span class="comment">// 下载内容线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;执行下载&quot;</span>);</span><br><span class="line">            List&lt;String&gt; download = ParaKDownloader.download(<span class="string">&quot;https://www.parak.top&quot;</span>);</span><br><span class="line">            guardedObject.setResponse(download);</span><br><span class="line">        &#125;, <span class="string">&quot;download&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GuardedObject</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 结果</span></span><br><span class="line">    <span class="keyword">private</span> Object response;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取结果</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getResponse</span><span class="params">(<span class="keyword">long</span> timeout)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="comment">// 开始时间</span></span><br><span class="line">            <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">            <span class="comment">// 经历时间</span></span><br><span class="line">            <span class="keyword">long</span> pass = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 没有结果</span></span><br><span class="line">            <span class="keyword">while</span> (response == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 此轮循环应该等待的时间</span></span><br><span class="line">                <span class="keyword">long</span> wait = timeout - pass;</span><br><span class="line">                <span class="keyword">if</span> (wait &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.wait(wait);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                pass = System.currentTimeMillis() - start;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> response;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 产生结果</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResponse</span><span class="params">(Object response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.response = response;</span><br><span class="line">            <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParaKDownloader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">download</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        HttpURLConnection connection = <span class="keyword">null</span>;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        String line = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = (HttpURLConnection) <span class="keyword">new</span> URL(url).openConnection();</span><br><span class="line">            BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));</span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                res.add(line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>join原理</p>
</blockquote>
<p>看一看<code>Thread#join()</code>的源代码，即是同步模式之保护性暂停的应用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">long</span> millis)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> base = System.currentTimeMillis();  <span class="comment">// 开始时间</span></span><br><span class="line">    <span class="keyword">long</span> now = <span class="number">0</span>;                            <span class="comment">// 当前时间</span></span><br><span class="line">    <span class="keyword">if</span> (millis &lt; <span class="number">0</span>) &#123; <span class="comment">// 参数校验</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;timeout value is negative&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (millis == <span class="number">0</span>) &#123; <span class="comment">// 一直等待，直到线程结束</span></span><br><span class="line">        <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">            wait(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">            <span class="keyword">long</span> delay = millis - now; <span class="comment">// 这轮需要等待的时间</span></span><br><span class="line">            <span class="keyword">if</span> (delay &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            wait(delay);               <span class="comment">// 等待</span></span><br><span class="line">            now = System.currentTimeMillis() - base; <span class="comment">// 经过时间</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>扩展</p>
</blockquote>
<p>如果需要在多个类中间使用<code>GuardedObject</code>对象，作为参数传递不是很方便，因此设计一个用来解耦的中间类。</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62531/image-20210411231829154.png" class="" title="image-20210411231829154">

<p>比如一个小区有一个信箱，每个居民只需要在信箱里根据ID取到自己的信件，而每一封信件都由不同的邮递员送达。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailBoxesDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> People().start();</span><br><span class="line">        &#125;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (Integer id : MailBoxes.getIds()) &#123;</span><br><span class="line">            <span class="keyword">new</span> Postman(id, <span class="string">&quot;内容&quot;</span> + id).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 居民</span></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;People&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Mail mail = MailBoxes.createMail();</span><br><span class="line">        log.debug(<span class="string">&quot;开始收信: &#123;&#125;&quot;</span>, mail.getId());</span><br><span class="line">        String content = (String) mail.getContent(<span class="number">5000</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;收到信件: &#123;&#125;&quot;</span>,  content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 邮递员</span></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;Postman&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Postman</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Postman</span><span class="params">(<span class="keyword">int</span> id, String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Mail mail = MailBoxes.getMail(id);</span><br><span class="line">        log.debug(<span class="string">&quot;送信 [id=&#123;&#125;, content=&#123;&#125;]&quot;</span>, id, content);</span><br><span class="line">        mail.setContent(content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 信箱</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MailBoxes</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Mail&gt; boxes = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">generateId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Mail <span class="title">getMail</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> boxes.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Mail <span class="title">createMail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> id = generateId();</span><br><span class="line">        Mail mail = <span class="keyword">new</span> Mail(id);</span><br><span class="line">        boxes.put(id, mail);</span><br><span class="line">        <span class="keyword">return</span> mail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Integer&gt; <span class="title">getIds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> boxes.keySet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 信件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mail</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 信件ID</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mail</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 信件内容</span></span><br><span class="line">    <span class="keyword">private</span> Object content;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取内容</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getContent</span><span class="params">(<span class="keyword">long</span> timeout)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="comment">// 开始时间</span></span><br><span class="line">            <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">            <span class="comment">// 经历时间</span></span><br><span class="line">            <span class="keyword">long</span> pass = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 没有结果</span></span><br><span class="line">            <span class="keyword">while</span> (content == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 此轮循环应该等待的时间</span></span><br><span class="line">                <span class="keyword">long</span> wait = timeout - pass;</span><br><span class="line">                <span class="keyword">if</span> (wait &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.wait(wait);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                pass = System.currentTimeMillis() - start;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> content;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置内容</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(Object content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.content = content;</span><br><span class="line">            <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-3-3-异步模式之生产者-消费者"><a href="#2-3-3-异步模式之生产者-消费者" class="headerlink" title="2.3.3 异步模式之生产者/消费者"></a>2.3.3 异步模式之生产者/消费者</h3><blockquote>
<p>要点</p>
</blockquote>
<ul>
<li>消费队列可以平衡生产和消费的资源</li>
<li>生产者仅负责产生结果数据，不关心数据该如何处理，而消费者专心处理结果数据</li>
<li>消息队列是有容量限制的，满时不会再加入数据，空时不会再消耗数据</li>
<li>JDK中各种阻塞队列，采用的就是这种模式</li>
</ul>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62531/image-20210411232117401.png" class="" title="image-20210411232117401">



<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageQueueDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MessageQueue queue = <span class="keyword">new</span> MessageQueue(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 3个生产者</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> id = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                queue.put(<span class="keyword">new</span> Message(id, <span class="string">&quot;值&quot;</span> + id));</span><br><span class="line">            &#125;, <span class="string">&quot;生产者&quot;</span> + id).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 1个消费者</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 1S消费一个线程</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                queue.get();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;消费者&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消息队列类</span></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;MessageDemo&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MessageQueue</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 消息队列集合</span></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Message&gt; list;</span><br><span class="line">    <span class="comment">// 消息队列容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessageQueue</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        <span class="keyword">this</span>.list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Message <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 检查队列是否为空</span></span><br><span class="line">        <span class="keyword">synchronized</span> (list) &#123;</span><br><span class="line">            <span class="keyword">while</span> (list.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;队列为空，消费者线程等待&quot;</span>);</span><br><span class="line">                    list.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 从队列头部获取消息并返回</span></span><br><span class="line">            Message message = list.removeFirst();</span><br><span class="line">            log.debug(<span class="string">&quot;消费消息 &lt;= &#123;&#125;&quot;</span>, message.toString());</span><br><span class="line">            list.notifyAll();</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存入消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (list) &#123;</span><br><span class="line">            <span class="comment">// 检查队列是否已满</span></span><br><span class="line">            <span class="keyword">while</span> (list.size() == capacity) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;队列已满，生产者线程等待&quot;</span>);</span><br><span class="line">                    list.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将消息加入队列尾部</span></span><br><span class="line">            list.addLast(message);</span><br><span class="line">            log.debug(<span class="string">&quot;生产消息 =&gt; &#123;&#125;&quot;</span>, message.toString());</span><br><span class="line">            list.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消息</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> Object value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Message</span><span class="params">(<span class="keyword">int</span> id, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Message[&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, value=&quot;</span> + value +</span><br><span class="line">                <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-3-4-park-unprak"><a href="#2-3-4-park-unprak" class="headerlink" title="2.3.4 park unprak"></a>2.3.4 park unprak</h3><blockquote>
<p>介绍</p>
</blockquote>
<p>它们是<code>LockSupport</code>类中的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 暂停当前线程</span></span><br><span class="line">LockSupport.park();</span><br><span class="line"><span class="comment">// 恢复线程运行</span></span><br><span class="line">LockSupport.unpark(Thread thread);</span><br></pre></td></tr></table></figure>



<blockquote>
<p>特点</p>
</blockquote>
<p><code>park &amp; unpark</code> 与<code>wait &amp; notify</code></p>
<ul>
<li><code>wai</code>t、<code>notify</code>和<code>notifyAll</code>必须配合Object Monitor一起使用，而<code>park</code>和<code>unpark</code>不必。</li>
<li><code>park/unpark</code>是以线程为单位类【阻塞】和【唤醒】线程，而<code>notify</code>只能随机唤醒一个等待线程，<code>notifyAll</code>是唤醒所有等待线程，就不那么【精确】。</li>
<li><code>park &amp; unpark</code>可以先<code>unpark</code>，而<code>wait &amp; notify</code>不能先<code>notify</code>。</li>
</ul>
<blockquote>
<p>示例</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;ParkUnpark&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParkUnparkDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String str  = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (!(str = sc.nextLine()).equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">            String[] s = str.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> time1 = Integer.parseInt(s[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">int</span> time2 = Integer.parseInt(s[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// park</span></span><br><span class="line">            Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;start...&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(time1);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">&quot;park...&quot;</span>);</span><br><span class="line">                LockSupport.park();</span><br><span class="line">                log.debug(<span class="string">&quot;continue...&quot;</span>);</span><br><span class="line">            &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">            t1.start();</span><br><span class="line">            <span class="comment">// unpark</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(time2);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// unpark既可以在park之前调用，也可以在park之后调用</span></span><br><span class="line">            log.debug(<span class="string">&quot;unpark...&quot;</span>);</span><br><span class="line">            LockSupport.unpark(t1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2021</span><span class="literal">-04</span><span class="literal">-18</span> <span class="number">20</span>:<span class="number">20</span>:<span class="number">53.213</span> [<span class="type">t1</span>] DEBUG ParkUnpark - <span class="built_in">start</span>...</span><br><span class="line"><span class="number">2021</span><span class="literal">-04</span><span class="literal">-18</span> <span class="number">20</span>:<span class="number">20</span>:<span class="number">54.217</span> [<span class="type">t1</span>] DEBUG ParkUnpark - park...</span><br><span class="line"><span class="number">2021</span><span class="literal">-04</span><span class="literal">-18</span> <span class="number">20</span>:<span class="number">20</span>:<span class="number">55.226</span> [<span class="type">main</span>] DEBUG ParkUnpark - unpark...</span><br><span class="line"><span class="number">2021</span><span class="literal">-04</span><span class="literal">-18</span> <span class="number">20</span>:<span class="number">20</span>:<span class="number">55.226</span> [<span class="type">t1</span>] DEBUG ParkUnpark - <span class="keyword">continue</span>...</span><br><span class="line"><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">2021</span><span class="literal">-04</span><span class="literal">-18</span> <span class="number">20</span>:<span class="number">20</span>:<span class="number">57.756</span> [<span class="type">t1</span>] DEBUG ParkUnpark - <span class="built_in">start</span>...</span><br><span class="line"><span class="number">2021</span><span class="literal">-04</span><span class="literal">-18</span> <span class="number">20</span>:<span class="number">20</span>:<span class="number">58.771</span> [<span class="type">main</span>] DEBUG ParkUnpark - unpark...</span><br><span class="line"><span class="number">2021</span><span class="literal">-04</span><span class="literal">-18</span> <span class="number">20</span>:<span class="number">20</span>:<span class="number">59.762</span> [<span class="type">t1</span>] DEBUG ParkUnpark - park...</span><br><span class="line"><span class="number">2021</span><span class="literal">-04</span><span class="literal">-18</span> <span class="number">20</span>:<span class="number">20</span>:<span class="number">59.762</span> [<span class="type">t1</span>] DEBUG ParkUnpark - <span class="keyword">continue</span>...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第一次输入，<code>time1</code> = 1， <code>time2</code> = 2，于是先执行<code>park</code>，后执行<code>unpark</code>，最终执行了<code>continue</code>；</p>
<p>第一次输入，<code>time1</code> = 2， <code>time2</code> = 1，于是先执行<code>unpark</code>，后执行<code>park</code>，最终也执行了<code>continue</code>。</p>
<p>证明<code>unpark</code>的执行比较随意。</p>
<blockquote>
<p>park/unpark原理</p>
</blockquote>
<p>每个线程都有自己的Parker对象，由三部分组成：<code>_countrer</code>、<code>_cond</code>和<code> _mutex</code>打个比喻。</p>
<ul>
<li>线程就像一个旅人，Parker就像为他随身携带的背包，<code>_cond</code>就好比背包中的帐篷，<code>_counter</code></li>
</ul>
<p>就好比背包中的备用干粮（0为耗尽，1为充足）</p>
<ul>
<li>调用<code>park</code>就是要看需不需要停下来歇息<ul>
<li>如果备用干粮耗尽（<code>_counter</code> = 0），那么钻进帐篷歇息。</li>
<li>如果备用干粮充足（<code>_counter</code> = 1），那么就不需停留，继续前进。</li>
</ul>
</li>
<li>调用<code>unpark</code>，就好比向背包中补充干粮<ul>
<li>如果这时线程还在敞篷，就唤醒让他继续前进。</li>
<li>如果这时线程还在运行，那么下次他调用<code>park</code>时，仅是消耗掉备用干粮，不需停留继续前进。<ul>
<li>因为背包空间有限，多次调用<code>unpark</code>仅会补充一份备用干粮。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>图示</strong></p>
<p>（1）先调用<code>park</code>再调用<code>unpark</code></p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62531/image-20210418212139187.png" class="" title="image-20210418212139187">

<ol>
<li>当前线程调用<code>Unsafe.park()</code>方法</li>
<li>检查<code>_counter</code>，本情况为0，这时，获得<code>_mutex</code>互斥锁</li>
<li>线程进入<code>_cond</code>条件变量阻塞</li>
<li>设置<code>_counter = 0</code></li>
</ol>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62531/image-20210419110033795.png" class="" title="image-20210419110033795">

<ol>
<li>调用<code>Unsafe.unpark(Thread_0)</code>方法，设置<code>_counter</code>为1</li>
<li>唤醒<code>_cond</code>条件变量中的<code>Thread_0</code></li>
<li><code>Thread_0</code>恢复运行</li>
<li>设置<code>_counter</code>为0</li>
</ol>
<p>（2）先调用<code>unpark</code>再调用<code>park</code></p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62531/image-20210419214214099.png" class="" title="image-20210419214214099">

<ol>
<li>调用<code>Unsafe.unpark(Thread)0</code>方法，设置<code>_counter</code>为1</li>
<li>当前线程调用<code>Unsafe.park()</code>方法</li>
<li>检查<code>_counter</code>，本情况为1，这时线程无需阻塞，继续运行</li>
<li>设置<code>_counter</code>为0</li>
</ol>
<h3 id="2-3-5-线程状态转换"><a href="#2-3-5-线程状态转换" class="headerlink" title="2.3.5 线程状态转换"></a>2.3.5 线程状态转换</h3><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62531/image-20210419222926434.png" class="" title="image-20210419222926434">

<p>假设有线程t:</p>
<p>（1）情况1：<code>NEW</code> ==&gt; <code>RUNNABLE</code></p>
<p>当调用<code>t.start()</code>方法时，由<code>NEW</code> =&gt; <code>RUNNABLE</code></p>
<p>（2）情况2：<code>RUNNABLE</code> &lt;==&gt; <code>WAITING</code></p>
<p><code>t</code>线程用<code>synchronized(obj)</code>获取了对象锁后</p>
<ul>
<li><p>调用<code>obj.wait()</code>方法时，t线程从<code>RUNNABLE</code> ==&gt; <code>WAITING</code></p>
</li>
<li><p>调用<code>obj.notify()</code>、<code>obj.notifyAll()</code>、<code>t.interrupt()</code>时</p>
<ul>
<li>竞争锁成功，t线程从<code>WAITING</code> ==&gt; <code>RUNNABLE</code></li>
<li>竞争锁失败，t线程从<code>WAITING</code> ==&gt; <code>BLOCKED</code></li>
</ul>
</li>
</ul>
<p>（3）情况3：<code>RUNNABLE</code> &lt;==&gt; <code> WAITING</code></p>
<ul>
<li>当前线程调用<code>t.join()</code>方法时，当前线程从<code>RUNNABLE</code> ==&gt; <code>WAITING</code><ul>
<li>注意是当前线程在<code>t</code>线程对象的监视器上等待 </li>
</ul>
</li>
<li><code>t</code>线程运行结束，或调用了当前线程的<code>interrupt()</code>时，当前线程从<code>WAITING</code> ==&gt; <code>RUNNABLE</code></li>
</ul>
<p>（4）情况4：<code>RUNNABLE</code> &lt;==&gt; <code>WAITING</code></p>
<ul>
<li>当前线程调用<code>LockSupport.park()</code>方法会让当前线程从<code>RUNNABLE</code> ==&gt; <code>WAITING</code></li>
<li>调用<code>LockSupport.unpark(目标线程)</code>或者调用了线程的<code>interrupt()</code>，会让目标线程从<code>WAITING</code> ==&gt; <code>RUNNABLE</code></li>
</ul>
<p>（5）情况5：<code>RUNNABLE</code> &lt;==&gt; <code>WAITING</code></p>
<p><code>t</code>线程用<code>synchronized(obj)</code>获取了对象锁后</p>
<ul>
<li>调用<code>obj.wait(long n)</code>方法时，<code>t</code>线程从<code>RUNNABLE</code> ==&gt; <code>TIMED_WAITING</code></li>
<li><code>t</code>线程等待时间超过了n毫秒，或调用<code>obj.notify()</code>，<code>obj.notifyAll()</code>，<code>t.interrupt()</code>时<ul>
<li>竞争时成功，<code>t</code>线程从<code>TIMED_WAITING</code> ==&gt; <code>RUNNABLE</code></li>
<li>竞争锁失败，<code>t</code>线程从<code>TIMED_WAITING</code> ==&gt; <code>BLOCKED</code></li>
</ul>
</li>
</ul>
<p>（6）情况6：<code>RUNNABLE</code> &lt;==&gt; <code>TIMED_WAITING</code></p>
<ul>
<li>当前线程调用<code>t.join(long n)</code>方法时，当前线程从<code>RUNNABLE</code> ==&gt; <code>TIMED_WAITING</code><ul>
<li>注意是当前线程在<code>t</code>线程对象的监视器上等待</li>
</ul>
</li>
<li>当前线程等待时间超过了n毫秒，或者<code>t</code>线程运行结束，或者调用了当前线程的<code>interrupt()</code>时，当前线程从<code>TIMED_WAITING</code> ==&gt; <code>RUNNABLE</code></li>
</ul>
<p>（7）情况7：<code>RUNNABLE</code> &lt;==&gt; <code>TIMED_WAITING</code></p>
<ul>
<li>当前线程调用<code>Thread.sleep(long n)</code>，当前线程从<code>RUNNABLE</code> ==&gt; <code>TIMED_WAITING</code></li>
<li>当前线程等待时间超过了n毫秒，当前线程从<code>TIMED_WAITING</code> ==&gt; <code>RUNNABLE</code></li>
</ul>
<p>（8）情况8：<code>RUNNABLE</code> &lt;==&gt; <code>TIMED_WAITING</code></p>
<ul>
<li>当前线程调用<code>LockSupport.parkNanos(long nanos)</code>或<code>LockSupport.parkUntil(long millons)</code>，当前线程从<code>RUNNABLE</code> ==&gt; <code>TIMED_WAITING</code></li>
<li>调用<code>LockSupport.unpark(目标线程)</code>或者调用了线程的<code>interrupt()</code>，或时等待超时，会让目标线程从<code>TIMED_WAITING</code> ==&gt; <code>RUNNABLE</code></li>
</ul>
<p>（9）情况9：<code>RUNNABLE</code> &lt;==&gt; <code>BLOCKED</code></p>
<ul>
<li><code>t</code>线程用<code>synchronized(obj)</code>获取了对象锁时如果竞争失败，从<code>RUNNABLE</code> ==&gt; <code>BLOCKED</code></li>
<li>持<code>obj</code>锁线程的同步代码块执行完毕，会唤醒该对象上所有<code>BLOCKED</code>的线程重新竞争，如果其中<code>t</code>线程竞争成功，从<code>BLOCKED</code> ==&gt; <code>RUNNABLE</code>，其他失败的线程仍然<code>BLOCKED</code></li>
</ul>
<p>（10）情况10：<code>RUNNABLE</code> &lt;==&gt; <code>TERMINATED</code></p>
<p>当先线程所有代码运行完毕，进入<code>TERMINATED</code></p>
<h2 id="2-4-第四部分-锁"><a href="#2-4-第四部分-锁" class="headerlink" title="2.4 第四部分-锁"></a>2.4 第四部分-锁</h2><h3 id="2-4-1-多把锁"><a href="#2-4-1-多把锁" class="headerlink" title="2.4.1 多把锁"></a>2.4.1 多把锁</h3><p><strong>多把不相干的锁</strong></p>
<p>一件大屋子有两个功能：睡觉、学习，互不相干。</p>
<p>现在小南要学习，小女要睡觉，但如果只用一间屋子（一个对象锁）的话，那么并发度很低。</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiLockDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BigRoom bigRoom = <span class="keyword">new</span> BigRoom();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bigRoom.study();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;小南&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bigRoom.sleep();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;小女&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;BigRoom&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BigRoom</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;sleep2个小时&quot;</span>);</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;sleep1个小时&quot;</span>);</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解决方法是准备多个房间（多个对象锁），让小南和小女获得不同的锁：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;BigRoom&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BigRoom</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 书房 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object studyRoom = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="comment">/* 卧室 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object sleepRoom = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (sleepRoom) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;sleep2个小时&quot;</span>);</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (studyRoom) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;sleep1个小时&quot;</span>);</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>锁的粒度细分：</p>
<ul>
<li>好处：增强程序的并发性。</li>
<li>坏处：如果一个线程需要同时获得多把锁，就容易发生死锁。</li>
</ul>
<h3 id="2-4-2-活跃性"><a href="#2-4-2-活跃性" class="headerlink" title="2.4.2 活跃性"></a>2.4.2 活跃性</h3><ul>
<li><p>因为某种原因，使得代码一直无法执行完毕，这样的现象叫做活跃性。</p>
</li>
<li><p>活跃性相关的一系列问题都可以用<code>ReentrantLock</code>进行解决。</p>
</li>
</ul>
<h4 id="2-4-2-1-死锁"><a href="#2-4-2-1-死锁" class="headerlink" title="2.4.2.1 死锁"></a>2.4.2.1 死锁</h4><blockquote>
<p>说明</p>
</blockquote>
<p>一个线程需要同时获得多把锁，这时就容易发生死锁。</p>
<p>如：线程1获取A对象锁，线程2获取B对象锁，此时线程1又想获取B对象锁，线程2又想获取A对象锁，它们都等着对象释放锁，此时就称为死锁。</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;DeadLock&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLockDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Object A = <span class="keyword">new</span> Object();</span><br><span class="line">        <span class="keyword">final</span> Object B = <span class="keyword">new</span> Object();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (A) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;lock A&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (B) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;lock B&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (B) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;lock B&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (A) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;lock A&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">22</span> <span class="number">22</span>:<span class="number">48</span>:<span class="number">27.708</span> [t2] DEBUG DeadLock - lock B</span><br><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">22</span> <span class="number">22</span>:<span class="number">48</span>:<span class="number">27.708</span> [t1] DEBUG DeadLock - lock A</span><br></pre></td></tr></table></figure>



<blockquote>
<p>发生死锁的必要条件</p>
</blockquote>
<ul>
<li>互斥条件：在一段时间内，一种资源只能被一个进程所使用。</li>
<li>请求和保持条件：进程已经拥有了至少一种资源，同时又去申请其他资源。因为其他资源被别的进程所使用，该进程进入阻塞状态，并且不释放自己已有的资源。</li>
<li>不可剥夺条件：进程对已获得的资源在未使用完成前不能被强占，只能在进程使用完后自己释放。</li>
<li>循环等待条件：发生死锁时，必然存在一个进程——资源的循环链。</li>
</ul>
<blockquote>
<p>定位死锁的方法</p>
</blockquote>
<p>先运行上述死锁示例，保证系统中存在死锁进程。</p>
<ol>
<li>jps进程id + jstack定位死锁</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">PS</span> &gt; jps</span><br><span class="line"><span class="number">13616</span> Jps</span><br><span class="line"><span class="number">14432</span> Launcher </span><br><span class="line"><span class="number">13796</span> DeadLockDemo      // 死锁进程</span><br><span class="line"><span class="number">16676</span></span><br><span class="line"><span class="number">26428</span> RemoteMavenServer36</span><br><span class="line"><span class="built_in">PS</span> &gt; jstack <span class="number">13796</span></span><br><span class="line"><span class="number">2021</span><span class="literal">-04</span><span class="literal">-22</span> <span class="number">11</span>:<span class="number">15</span>:<span class="number">43</span></span><br><span class="line">Full thread dump Java HotSpot(TM) <span class="number">64</span><span class="literal">-Bit</span> Server VM (<span class="number">25.221</span><span class="literal">-b11</span> mixed mode):</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">Found one Java<span class="literal">-level</span> deadlock: // 发现一个Java级别的死锁</span><br><span class="line">=============================</span><br><span class="line">// 死锁的引用情况</span><br><span class="line"><span class="string">&quot;t2&quot;</span>:</span><br><span class="line">  waiting to lock monitor <span class="number">0</span>x000000001d390b08 (object <span class="number">0</span>x000000076cfd4e58, a java.lang.Object),</span><br><span class="line">  which is held by <span class="string">&quot;t1&quot;</span></span><br><span class="line"><span class="string">&quot;t1&quot;</span>:</span><br><span class="line">  waiting to lock monitor <span class="number">0</span>x000000001d393028 (object <span class="number">0</span>x000000076cfd4e68, a java.lang.Object),</span><br><span class="line">  which is held by <span class="string">&quot;t2&quot;</span></span><br><span class="line"></span><br><span class="line">Java stack information <span class="keyword">for</span> the threads listed above:</span><br><span class="line">===================================================</span><br><span class="line"><span class="string">&quot;t2&quot;</span>:</span><br><span class="line">        at top.parak.share.DeadLockDemo.lambda<span class="variable">$main</span><span class="variable">$1</span>(DeadLockDemo.java:<span class="number">39</span>) // 发生死锁的位置</span><br><span class="line">        - waiting to lock &lt;<span class="number">0</span>x000000076cfd4e58&gt; (a java.lang.Object)</span><br><span class="line">        - locked &lt;<span class="number">0</span>x000000076cfd4e68&gt; (a java.lang.Object)</span><br><span class="line">        at top.parak.share.DeadLockDemo<span class="variable">$</span><span class="variable">$Lambda</span><span class="variable">$2</span>/<span class="number">885951223</span>.run(Unknown Source)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br><span class="line"><span class="string">&quot;t1&quot;</span>:</span><br><span class="line">        at top.parak.share.DeadLockDemo.lambda<span class="variable">$main</span><span class="variable">$0</span>(DeadLockDemo.java:<span class="number">26</span>) // 发生死锁的位置</span><br><span class="line">        - waiting to lock &lt;<span class="number">0</span>x000000076cfd4e68&gt; (a java.lang.Object)</span><br><span class="line">        - locked &lt;<span class="number">0</span>x000000076cfd4e58&gt; (a java.lang.Object)</span><br><span class="line">        at top.parak.share.DeadLockDemo<span class="variable">$</span><span class="variable">$Lambda</span><span class="variable">$1</span>/<span class="number">1854778591</span>.run(Unknown Source)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br><span class="line"></span><br><span class="line">Found <span class="number">1</span> deadlock.</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>jconsole工具检测死锁</li>
</ol>
<p>powershell输入<code>jconsole</code>，连接本地进程，选择线程界面</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62531/image-20210422112258636.png" class="" title="image-20210422112258636">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62531/image-20210422112653368.png" class="" title="image-20210422112653368">



<blockquote>
<p>死锁举例：哲学家就餐问题</p>
</blockquote>
<p>有五位哲学家，围坐在圆桌旁：</p>
<ul>
<li>他们只做两件事，思考和吃饭，思考一会吃口饭，吃完饭接着思考。</li>
<li>吃饭时要用两根筷子吃，桌子上共有五根筷子，每位哲学家左右手边各有一根筷子。</li>
<li>如果筷子被身边的人拿着，自己就得等待。</li>
</ul>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62531/image-20210422110000353.png" class="" title="image-20210422110000353">

<p>当每位哲学家即线程持有一根筷子时，他们都在等待另一个线程释放锁，因此造成了死锁。</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhilosophersEatingDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM = <span class="number">5</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Chopstick[] c = <span class="keyword">new</span> Chopstick[NUM];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NUM; i++) &#123;</span><br><span class="line">            c[i] = <span class="keyword">new</span> Chopstick(String.valueOf(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> Philosopher(<span class="string">&quot;苏格拉底&quot;</span>, c[<span class="number">0</span>], c[<span class="number">1</span>]).start();</span><br><span class="line">        <span class="keyword">new</span> Philosopher(<span class="string">&quot;柏拉图&quot;</span>, c[<span class="number">1</span>], c[<span class="number">2</span>]).start();</span><br><span class="line">        <span class="keyword">new</span> Philosopher(<span class="string">&quot;亚里士多德&quot;</span>, c[<span class="number">2</span>], c[<span class="number">3</span>]).start();</span><br><span class="line">        <span class="keyword">new</span> Philosopher(<span class="string">&quot;郝拉克利特&quot;</span>, c[<span class="number">3</span>], c[<span class="number">4</span>]).start();</span><br><span class="line">        <span class="keyword">new</span> Philosopher(<span class="string">&quot;阿基米德&quot;</span>, c[<span class="number">4</span>], c[<span class="number">0</span>]).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 哲学家</span></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;Philosopher&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Philosopher</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Chopstick left;  <span class="comment">// 左手筷子</span></span><br><span class="line">    <span class="keyword">final</span> Chopstick right; <span class="comment">// 右手筷子</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Philosopher</span><span class="params">(String name, Chopstick left, Chopstick right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.left = left;</span><br><span class="line">        <span class="keyword">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 尝试获得左手筷子</span></span><br><span class="line">            <span class="keyword">synchronized</span> (left) &#123;</span><br><span class="line">                <span class="comment">// 尝试获得右手筷子</span></span><br><span class="line">                <span class="keyword">synchronized</span> (right) &#123;</span><br><span class="line">                    eat();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 吃饭</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;eating...&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 筷子</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chopstick</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Chopstick</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;筷子[&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">2021</span><span class="literal">-04</span><span class="literal">-22</span> <span class="number">14</span>:<span class="number">15</span>:<span class="number">57.623</span> [亚里士多德] DEBUG Philosopher - eating...</span><br><span class="line"><span class="number">2021</span><span class="literal">-04</span><span class="literal">-22</span> <span class="number">14</span>:<span class="number">15</span>:<span class="number">57.623</span> [苏格拉底] DEBUG Philosopher - eating...</span><br><span class="line"><span class="number">2021</span><span class="literal">-04</span><span class="literal">-22</span> <span class="number">14</span>:<span class="number">15</span>:<span class="number">58.632</span> [亚里士多德] DEBUG Philosopher - eating...</span><br><span class="line"><span class="number">2021</span><span class="literal">-04</span><span class="literal">-22</span> <span class="number">14</span>:<span class="number">15</span>:<span class="number">58.632</span> [苏格拉底] DEBUG Philosopher - eating...</span><br><span class="line"><span class="number">2021</span><span class="literal">-04</span><span class="literal">-22</span> <span class="number">14</span>:<span class="number">15</span>:<span class="number">59.643</span> [柏拉图] DEBUG Philosopher - eating...</span><br><span class="line"><span class="number">2021</span><span class="literal">-04</span><span class="literal">-22</span> <span class="number">14</span>:<span class="number">16</span>:<span class="number">00.647</span> [柏拉图] DEBUG Philosopher - eating...</span><br></pre></td></tr></table></figure>

<p>jconsole检测死锁：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---------------------------------------------------------------------</span><br><span class="line">名称: 苏格拉底</span><br><span class="line">状态: top.parak.share.Chopstick@798c4fad【筷子1】上的BLOCKED, 拥有者: 柏拉图</span><br><span class="line">总阻止数: 8, 总等待数: 6</span><br><span class="line"></span><br><span class="line">堆栈跟踪: </span><br><span class="line">top.parak.share.Philosopher.run(PhilosophersEatingDemo.java:45)</span><br><span class="line">   - 已锁定 top.parak.share.Chopstick@6ea242ba【筷子0】</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">名称: 柏拉图</span><br><span class="line">状态: top.parak.share.Chopstick@6057af47【筷子2】上的BLOCKED, 拥有者: 亚里士多德</span><br><span class="line">总阻止数: 3, 总等待数: 2</span><br><span class="line"></span><br><span class="line">堆栈跟踪: </span><br><span class="line">top.parak.share.Philosopher.run(PhilosophersEatingDemo.java:45)</span><br><span class="line">   - 已锁定 top.parak.share.Chopstick@798c4fad【筷子1】</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">名称: 亚里士多德</span><br><span class="line">状态: top.parak.share.Chopstick@6796caf6【筷子3】上的BLOCKED, 拥有者: 郝拉克利特</span><br><span class="line">总阻止数: 8, 总等待数: 2</span><br><span class="line"></span><br><span class="line">堆栈跟踪: </span><br><span class="line">top.parak.share.Philosopher.run(PhilosophersEatingDemo.java:45)</span><br><span class="line">   - 已锁定 top.parak.share.Chopstick@6057af47【筷子2】</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">名称: 郝拉克利特</span><br><span class="line">状态: top.parak.share.Chopstick@16b56e05【筷子4】上的BLOCKED, 拥有者: 阿基米德</span><br><span class="line">总阻止数: 2, 总等待数: 0</span><br><span class="line"></span><br><span class="line">堆栈跟踪: </span><br><span class="line">top.parak.share.Philosopher.run(PhilosophersEatingDemo.java:45)</span><br><span class="line">   - 已锁定 top.parak.share.Chopstick@6796caf6【筷子3】</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">名称: 阿基米德</span><br><span class="line">状态: top.parak.share.Chopstick@6ea242ba【筷子0】上的BLOCKED, 拥有者: 苏格拉底</span><br><span class="line">总阻止数: 1, 总等待数: 0</span><br><span class="line"></span><br><span class="line">堆栈跟踪: </span><br><span class="line">top.parak.share.Philosopher.run(PhilosophersEatingDemo.java:45)</span><br><span class="line">   - 已锁定 top.parak.share.Chopstick@16b56e05【筷子4】</span><br></pre></td></tr></table></figure>

<p>大家都拿着一根筷子，等着另一根筷子，造成死锁，解决得看后面的<code>ReentrantLock</code>。</p>
<h4 id="2-4-2-2-活锁"><a href="#2-4-2-2-活锁" class="headerlink" title="2.4.2.2 活锁"></a>2.4.2.2 活锁</h4><blockquote>
<p>说明</p>
</blockquote>
<p>活锁出现在两个线程互相改变对方的结束条件，最后谁也无法结束。</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;LiveLock&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LiveLockDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 期望减到0，退出循环</span></span><br><span class="line">            <span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.MILLISECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                count--;</span><br><span class="line">                log.debug(<span class="string">&quot;count: &#123;&#125;&quot;</span>, count);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 期望超过20退出循环</span></span><br><span class="line">            <span class="keyword">while</span> (count &lt; <span class="number">20</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.MILLISECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                count++;</span><br><span class="line">                log.debug(<span class="string">&quot;count: &#123;&#125;&quot;</span>, count);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解决：在线程执行时，中途给予不同的间隔时间，让某个线程先结束即可。</p>
<p>死锁与活锁的区别：</p>
<ul>
<li>死锁是因为线程互相持有对象想要的锁，并且都不释放，最后到时线程阻塞，停止运行的现象。</li>
<li>活锁是因为线程间修改了对方的结束条件，从而导致代码一直在运行，却一直运行不完的现象。</li>
</ul>
<h4 id="2-4-2-3-饥饿"><a href="#2-4-2-3-饥饿" class="headerlink" title="2.4.2.3 饥饿"></a>2.4.2.3 饥饿</h4><blockquote>
<p>说明</p>
</blockquote>
<p>某些线程因为优先级太低，始终得不到CPU调度执行，也不能够结束。</p>
<p>在使用顺序加锁时，可能会出现饥饿现象：</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62531/image-20210422165813526.png" class="" title="image-20210422165813526">

<p>顺序加锁的解决方案：</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/62531/image-20210422205258032.png" class="" title="image-20210422205258032">



<h3 id="2-4-3-ReentrantLock"><a href="#2-4-3-ReentrantLock" class="headerlink" title="2.4.3 ReentrantLock"></a>2.4.3 ReentrantLock</h3><blockquote>
<p>特点（synchronized不具备的）</p>
</blockquote>
<ul>
<li>可中断</li>
<li>可以设置超时时间</li>
<li>可以设置为公平锁</li>
<li>支持多个条件变量</li>
</ul>
<p>与<code>synchronized</code>一样，都支持可重入。</p>
<blockquote>
<p>比较</p>
</blockquote>
<table>
<thead>
<tr>
<th></th>
<th>Lock</th>
<th>synchronized</th>
</tr>
</thead>
<tbody><tr>
<td>层次方面</td>
<td>（1）<code>Lock</code>是一个接口，是在类级别上的实现；（2）JDK层次的实现</td>
<td>（1）<code>synchronized</code>是Java关键字；（2）JVM层次定义 的</td>
</tr>
<tr>
<td>灵活性方面</td>
<td><code>Lock</code>接口提供的<code>lock()</code>和<code>unlock()</code>方法，可以随时获得锁、释放锁，非常灵活。</td>
<td>释放锁、获得锁是被动的。释放锁只有两种情况：（1）同步代码块执行完毕（2）抛出异常，同步器执行<code>monitor.exit()</code>释放锁。</td>
</tr>
<tr>
<td>锁的状态方面</td>
<td>（1）<code>Lock</code>可以判断锁的状态，它会提供<code>tryLock()</code>方法来告诉我们是否获得锁成功。（2）<code>tryLock()</code>有返回值，用来尝试获取锁，如果获取成功，则返回false；获取失败，返回false，这个方法无论如何都会立即返回。在拿不到锁时不会一直在那等待。</td>
<td>（1）在锁的状态方面，<code>synchronized</code>完全是被动的，没法判断锁的状态。（2）<code>synchronized</code>在拿不到锁时，则会阻塞在那里，一直等待。</td>
</tr>
<tr>
<td>锁的类型方面</td>
<td>基于<code>Lock</code>接口，有多种锁的实现，如：（1）可重入锁：<code>ReentrantLock</code>；（2）可重入读写锁：<code>ReentrantReadWriteLock</code>等。针对可重入锁，还有公平锁和非公平锁之分。</td>
<td>对于<code>synchronized</code>来说，它只是一个JVM层次的关键字，并不是一个接口，没有具体实现。</td>
</tr>
</tbody></table>
<blockquote>
<p>语法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取锁</span></span><br><span class="line">reentrantLock.lock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 临界区</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 释放锁</span></span><br><span class="line">    reentrantLock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-4-3-1-可重入"><a href="#2-4-3-1-可重入" class="headerlink" title="2.4.3.1 可重入"></a>2.4.3.1 可重入</h4><p>可重入是指同一个线程如果首次获得了这把锁，那么因为它是这把锁的拥有者，因此有权利再次获取这把锁。如果是不可重入锁，那么第二次获得锁时，自己也会被锁挡住。</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;ReentrantLock&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLockDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;enter main&quot;</span>);</span><br><span class="line">            m1();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;enter m1&quot;</span>);</span><br><span class="line">            m2();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;enter m2&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021-04-22 22:49:46.320 [main] DEBUG ReentrantLock - enter main</span><br><span class="line">2021-04-22 22:49:46.322 [main] DEBUG ReentrantLock - enter m1</span><br><span class="line">2021-04-22 22:49:46.322 [main] DEBUG ReentrantLock - enter m2</span><br></pre></td></tr></table></figure>





<h4 id="2-4-3-2-可打断"><a href="#2-4-3-2-可打断" class="headerlink" title="2.4.3.2 可打断"></a>2.4.3.2 可打断</h4><p><code>synchoronized</code>和<code>reentrantLock.lock()</code>的锁，是不可被打断的，也就是说别的线程已经获得了锁，我的线程就需要一直等待下去，不能中断。</p>
<p>可被中断的锁，通过<code>reentrantLock.lockInterruptibly()</code>获取的锁对象，可以通过调用阻塞线程的<code>interrupt()</code>方法。</p>
<p>如果某个线程处于阻塞状态，可以调用其<code>interrupt()</code>方法让其停止阻塞，获得锁失败。处于阻塞状态的线程，被打断了就不用阻塞了，直接停止就行。</p>
<p>可中断的锁，在一定程度上可以被动的减少死锁的概率，之所以被动，是因为我们需要手动调用阻塞线程的<code>interrupt()</code>方法。</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;LockInterruptibly&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockInterruptiblyDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 如果没有竞争那么此方法就会获取lock对象锁</span></span><br><span class="line">                <span class="comment">// 如果有竞争就进入阻塞队列，可以被其他线程用interrupt方法打断</span></span><br><span class="line">                log.debug(<span class="string">&quot;尝试获得锁&quot;</span>);</span><br><span class="line">                lock.lockInterruptibly();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                log.debug(<span class="string">&quot;未获取锁&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;获取到锁&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        lock.lock();</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">&quot;打断t1线程&quot;</span>);</span><br><span class="line">        t1.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021-04-22 22:57:01.129 [t1] DEBUG LockInterruptibly - 尝试获得锁</span><br><span class="line">2021-04-22 22:57:02.148 [main] DEBUG LockInterruptibly - 打断t1线程</span><br><span class="line">2021-04-22 22:57:02.149 [t1] DEBUG LockInterruptibly - 未获取锁</span><br><span class="line">java.lang.InterruptedException</span><br></pre></td></tr></table></figure>



<h4 id="2-4-3-3-锁超时"><a href="#2-4-3-3-锁超时" class="headerlink" title="2.4.3.3 锁超时"></a>2.4.3.3 锁超时</h4><p>防止无限制等待，减少死锁。</p>
<ul>
<li><code>reentrantLock.tryLock()</code>会返回锁是否成功。如果成功则返回true，反之则返回false。</li>
<li><code>tryLock(long timeout， TimeUnit unit)</code>可以设置指定等待时间，其中timeout为最长等待时间，unit为时间单位。</li>
</ul>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Slf4j(topic &#x3D; &quot;TryLock&quot;)</span><br><span class="line">public class TryLockDemo &#123;</span><br><span class="line">    private static final ReentrantLock lock &#x3D; new ReentrantLock();</span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        Thread t1 &#x3D; new Thread(() -&gt; &#123;</span><br><span class="line">            log.debug(&quot;尝试获取锁&quot;);</span><br><span class="line">            try &#123;</span><br><span class="line">                if (!lock.tryLock(2, TimeUnit.SECONDS)) &#123; &#x2F;&#x2F; 尝试等待2S，获取锁</span><br><span class="line">                    log.debug(&quot;获取不到锁&quot;);</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                log.debug(&quot;获取不到锁&quot;);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            try &#123;</span><br><span class="line">                log.debug(&quot;获取到锁&quot;);</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, &quot;t1&quot;);</span><br><span class="line">        lock.lock();</span><br><span class="line">        log.debug(&quot;获取到锁&quot;);</span><br><span class="line">        t1.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(1);</span><br><span class="line">        lock.unlock();</span><br><span class="line">        log.debug(&quot;释放了锁&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021-04-23 00:46:54.944 [main] DEBUG TryLock - 获取到锁</span><br><span class="line">2021-04-23 00:46:54.946 [t1] DEBUG TryLock - 尝试获取锁</span><br><span class="line">2021-04-23 00:46:55.949 [main] DEBUG TryLock - 释放了锁</span><br><span class="line">2021-04-23 00:46:55.949 [t1] DEBUG TryLock - 获取到锁</span><br></pre></td></tr></table></figure>



<blockquote>
<p>解决哲学家就餐的问题</p>
</blockquote>
<p>尝试获取筷子，获取不到就放下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhilosophersEatingDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NUM = <span class="number">5</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Chopstick[] c = <span class="keyword">new</span> Chopstick[NUM];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NUM; i++) &#123;</span><br><span class="line">            c[i] = <span class="keyword">new</span> Chopstick(String.valueOf(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> Philosopher(<span class="string">&quot;苏格拉底&quot;</span>, c[<span class="number">0</span>], c[<span class="number">1</span>]).start();</span><br><span class="line">        <span class="keyword">new</span> Philosopher(<span class="string">&quot;柏拉图&quot;</span>, c[<span class="number">1</span>], c[<span class="number">2</span>]).start();</span><br><span class="line">        <span class="keyword">new</span> Philosopher(<span class="string">&quot;亚里士多德&quot;</span>, c[<span class="number">2</span>], c[<span class="number">3</span>]).start();</span><br><span class="line">        <span class="keyword">new</span> Philosopher(<span class="string">&quot;郝拉克利特&quot;</span>, c[<span class="number">3</span>], c[<span class="number">4</span>]).start();</span><br><span class="line">        <span class="keyword">new</span> Philosopher(<span class="string">&quot;阿基米德&quot;</span>, c[<span class="number">4</span>], c[<span class="number">0</span>]).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 哲学家</span></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;Philosopher&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Philosopher</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Chopstick left;  <span class="comment">// 左手筷子</span></span><br><span class="line">    <span class="keyword">final</span> Chopstick right; <span class="comment">// 右手筷子</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Philosopher</span><span class="params">(String name, Chopstick left, Chopstick right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.left = left;</span><br><span class="line">        <span class="keyword">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (left.tryLock()) &#123; <span class="comment">// 尝试获得左手筷子</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (right.tryLock()) &#123; <span class="comment">// 尝试获得右手筷子</span></span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            eat();</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            right.unlock(); <span class="comment">// 释放右手筷子</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    left.unlock();  <span class="comment">// 释放左手筷子</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 吃饭</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;eating...&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 筷子</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chopstick</span> <span class="keyword">extends</span> <span class="title">ReentrantLock</span>  </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Chopstick</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;筷子[&quot;</span> + <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-4-3-4-公平锁"><a href="#2-4-3-4-公平锁" class="headerlink" title="2.4.3.4 公平锁"></a>2.4.3.4 公平锁</h4><ul>
<li>可以把竞争的线程放在一个先进先出的阻塞队列上</li>
<li>只要持有锁的线程执行完了，唤醒阻塞队列中的下一个线程获取锁即可</li>
<li>先进入队列的线程先获取到锁</li>
</ul>
<p>synchronized是不公平锁。一个线程持有锁，其他线程进入阻塞队列；当这个线程释放了锁，那么阻塞队列的线程就会一起去争抢，而不是按照先来先得的顺序。</p>
<p>ReentrantLock默认是不公平的，但是可以切换为公平锁，看一眼带参构造方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span> </span>&#123;</span><br><span class="line">    sync = fair ? <span class="keyword">new</span> FairSync() : <span class="keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>构造一个公平锁<code>new ReentrantLock(true)</code>，公平锁没有必要，会降低并发度。</p>
<h4 id="2-4-3-5-条件变量"><a href="#2-4-3-5-条件变量" class="headerlink" title="2.4.3.5 条件变量"></a>2.4.3.5 条件变量</h4><p>synchronized中也有条件变量，就是<code>waitSet</code>，当条件不满足时进入<code>waitSet</code>，当条件不满足时进入<code>waitSet</code>等待。<code>ReentrantLock</code>的条件变量比<code>synchronized</code>强大之处在于，它是支持多个条件变量的。</p>
<ul>
<li><code>synchronized</code>让那些不满足条件的线程都在一间休息室等消息</li>
<li><code>ReentrantLock</code>支持多间休息室，有专门等的休息室、专门等早餐的休息室、唤醒时也是按休息室来唤醒</li>
</ul>
<p>使用流程：</p>
<ul>
<li><code>await</code>前需要获得锁</li>
<li><code>await</code>执行后，会释放锁，进入<code>conditionObject</code>等待</li>
<li><code>await</code>的线程被唤醒（或打断、或超时）重新竞争lock锁</li>
<li>竞争lock锁成功后，从await后继续执行</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;CorrectPostureStep4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorrectPostureStep4Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> hasCigarette = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> hasTakeAway = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">static</span> ReentrantLock ROOM = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="comment">// 等烟的休息室</span></span><br><span class="line">    <span class="keyword">static</span> Condition waitCigaretteSet = ROOM.newCondition();</span><br><span class="line">    <span class="comment">// 等外卖的休息室</span></span><br><span class="line">    <span class="keyword">static</span> Condition waitTakeAwaySet = ROOM.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            ROOM.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String name = Thread.currentThread().getName();</span><br><span class="line">                log.debug(<span class="string">&quot;有烟吗 ? [&#123;&#125;]&quot;</span>, hasCigarette);</span><br><span class="line">                <span class="keyword">while</span> (!hasCigarette) &#123; <span class="comment">// 防止虚假唤醒</span></span><br><span class="line">                    log.debug(<span class="string">&quot;没有烟 =&gt; [&#123;&#125;]先歇会...&quot;</span>, name);</span><br><span class="line">                    waitCigaretteSet.await();</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">&quot;再看看有烟吗 ? [&#123;&#125;]&quot;</span>, hasCigarette);</span><br><span class="line">                <span class="keyword">if</span> (hasCigarette) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;有烟了 =&gt; [&#123;&#125;]开始干活ing&quot;</span>, name);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;依然没有烟 =&gt; [&#123;&#125;]不干活了&quot;</span>, name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                ROOM.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;FlowerK&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            ROOM.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String name = Thread.currentThread().getName();</span><br><span class="line">                log.debug(<span class="string">&quot;外卖是否送到 ? [&#123;&#125;]&quot;</span>, hasTakeAway);</span><br><span class="line">                <span class="keyword">if</span> (!hasTakeAway) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;外卖还未送到 =&gt; [&#123;&#125;]先歇会...&quot;</span>, name);</span><br><span class="line">                    waitTakeAwaySet.await();</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">&quot;再看看外卖是否送到 ? [&#123;&#125;]&quot;</span>, hasTakeAway);</span><br><span class="line">                <span class="keyword">if</span> (hasTakeAway) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;外卖已经送到 =&gt; [&#123;&#125;]开始干活ing&quot;</span>, name);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;外卖仍然未到 =&gt; [&#123;&#125;]不干活了&quot;</span>, hasTakeAway);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                ROOM.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;RubbishK&quot;</span>).start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            ROOM.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                hasTakeAway = <span class="keyword">true</span>;</span><br><span class="line">                waitTakeAwaySet.signal();</span><br><span class="line">                log.debug(<span class="string">&quot;外卖已送到&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                ROOM.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;美团外卖&quot;</span>).start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            ROOM.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                hasCigarette = <span class="keyword">true</span>;</span><br><span class="line">                waitCigaretteSet.signal();</span><br><span class="line">                log.debug(<span class="string">&quot;烟已送到&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                ROOM.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;饿了么&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-4-4-同步模式之顺序控制"><a href="#2-4-4-同步模式之顺序控制" class="headerlink" title="2.4.4 同步模式之顺序控制"></a>2.4.4 同步模式之顺序控制</h3><h4 id="2-4-4-1-固定输出"><a href="#2-4-4-1-固定输出" class="headerlink" title="2.4.4.1 固定输出"></a>2.4.4.1 固定输出</h4><p>有两个线程，线程A打印1，线程B打印2。</p>
<p>要求：程序必须先打印2再打印1。</p>
<blockquote>
<p>wait/notify版本</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;OrderWaitNotify&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderWaitNotifyDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> bRunned = <span class="keyword">false</span>; <span class="comment">// 表示t2是否运行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread a = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="keyword">while</span> (!bRunned) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        lock.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">        Thread b = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock)  &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">                bRunned = <span class="keyword">true</span>;</span><br><span class="line">                lock.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>);</span><br><span class="line">        a.start();</span><br><span class="line">        b.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>await/signal版本</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;OrderReentrant&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderReentrantDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Condition condition = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> bRunned = <span class="keyword">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread a = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!bRunned) &#123;</span><br><span class="line">                    condition.await();</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">        Thread b = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">                bRunned = <span class="keyword">true</span>;</span><br><span class="line">                condition.signal();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>);</span><br><span class="line">        a.start();</span><br><span class="line">        b.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>park/unpark版本</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;OrderParkUnpark&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderParkUnparkDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread a = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            LockSupport.park();</span><br><span class="line">            log.debug(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span>);</span><br><span class="line">        Thread b = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">            LockSupport.unpark(a);</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span>);</span><br><span class="line">        a.start();</span><br><span class="line">        b.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-4-4-2-交替输出"><a href="#2-4-4-2-交替输出" class="headerlink" title="2.4.4.2 交替输出"></a>2.4.4.2 交替输出</h4><p>线程A输出a五次，线程B输出b五次，线程C输出c五次。</p>
<p>要求：程序交替输出5次<code>abc</code>。</p>
<blockquote>
<p>wait/notify版本</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlternateWaitNotifyDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AlternateWaitNotify alternateWaitNotify = <span class="keyword">new</span> AlternateWaitNotify(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; alternateWaitNotify.print(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>, <span class="number">2</span>), <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; alternateWaitNotify.print(<span class="string">&quot;b&quot;</span>, <span class="number">2</span>, <span class="number">3</span>), <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; alternateWaitNotify.print(<span class="string">&quot;c&quot;</span>, <span class="number">3</span>, <span class="number">1</span>), <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;AlternateWaitNotify&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlternateWaitNotify</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 当前标记</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> flag;</span><br><span class="line">    <span class="comment">// 循环次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> loopNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AlternateWaitNotify</span><span class="params">(<span class="keyword">int</span> flag, <span class="keyword">int</span> loopNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">        <span class="keyword">this</span>.loopNumber = loopNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *   输出内容   等待标记   下个标记</span></span><br><span class="line"><span class="comment">     *      a         1         2</span></span><br><span class="line"><span class="comment">     *      b         2         3</span></span><br><span class="line"><span class="comment">     *      c         3         1</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str       输出内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> waitFlag  等待标记</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nextFlag  下个标记</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String str, <span class="keyword">int</span> waitFlag, <span class="keyword">int</span> nextFlag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (waitFlag != <span class="keyword">this</span>.flag) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">this</span>.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(str);</span><br><span class="line">                <span class="keyword">this</span>.flag = nextFlag;</span><br><span class="line">                <span class="keyword">this</span>.notifyAll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<blockquote>
<p>await/signal版本</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlternateAwaitSignalDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AlternateAwaitSignal alternateWaitNotify = <span class="keyword">new</span> AlternateAwaitSignal(<span class="number">5</span>);</span><br><span class="line">        Condition aCondition = alternateWaitNotify.newCondition();</span><br><span class="line">        Condition bCondition = alternateWaitNotify.newCondition();</span><br><span class="line">        Condition cCondition = alternateWaitNotify.newCondition();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; alternateWaitNotify.print(<span class="string">&quot;a&quot;</span>, aCondition, bCondition), <span class="string">&quot;A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; alternateWaitNotify.print(<span class="string">&quot;b&quot;</span>, bCondition, cCondition), <span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; alternateWaitNotify.print(<span class="string">&quot;c&quot;</span>, cCondition, aCondition), <span class="string">&quot;C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;AlternateAwaitSignal&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlternateAwaitSignal</span> <span class="keyword">extends</span> <span class="title">ReentrantLock</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> loopNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AlternateAwaitSignal</span><span class="params">(<span class="keyword">int</span> loopNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loopNumber = loopNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str   打印内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> curr  当前休息室</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> next  下个休息室</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String str, Condition curr, Condition next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class="line">            lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                curr.await();</span><br><span class="line">                log.debug(str);</span><br><span class="line">                next.signal();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>park/unpark版本</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlternateParkUnparkDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Thread t1;</span><br><span class="line">    <span class="keyword">static</span> Thread t2;</span><br><span class="line">    <span class="keyword">static</span> Thread t3;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AlternateParkUnpark alternateParkUnpark = <span class="keyword">new</span> AlternateParkUnpark(<span class="number">5</span>);</span><br><span class="line">        t1 = <span class="keyword">new</span> Thread(() -&gt; alternateParkUnpark.print(<span class="string">&quot;a&quot;</span>, t2), <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t2 = <span class="keyword">new</span> Thread(() -&gt; alternateParkUnpark.print(<span class="string">&quot;b&quot;</span>, t3), <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">        t3 = <span class="keyword">new</span> Thread(() -&gt; alternateParkUnpark.print(<span class="string">&quot;c&quot;</span>, t1), <span class="string">&quot;t3&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">        LockSupport.unpark(t1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;AlternateParkUnpark&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlternateParkUnpark</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> loopNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AlternateParkUnpark</span><span class="params">(<span class="keyword">int</span> loopNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loopNumber = loopNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String str, Thread next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class="line">            LockSupport.park();</span><br><span class="line">            log.debug(str);</span><br><span class="line">            LockSupport.unpark(next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<p>重点掌握：</p>
<ul>
<li>分析多线程访问资源时，哪些代码片段属于临界区</li>
<li>使用<code>synchronized</code>互斥解决临界区的线程安全问题<ul>
<li>掌握<code>synchronized</code>锁对象语法</li>
<li>掌握<code>synchronized</code>加载成员方法和静态方法语法</li>
<li>掌握<code>wait/notify</code>同步方法</li>
</ul>
</li>
<li>使用<code>Lock</code>互斥解决临界区的线程安全问题<ul>
<li>掌握<code>Lock</code>的使用细节：可打断、锁超时、公平锁、条件变量</li>
</ul>
</li>
<li>学会分析变量的线程安全性、掌握常见线程安全类的使用</li>
<li>了解线程活跃性问题：死锁、活锁、饥饿</li>
<li>应用方面<ul>
<li>互斥：使用<code>synchronized</code>或<code>Lock</code>达到共享资源互斥效果</li>
<li>同步：使用<code>wait/notify</code>或<code>Lock</code>的条件变量来达到线程间通信效果</li>
</ul>
</li>
<li>原理方面<ul>
<li><code>monitor</code>、<code>sychronized</code>、<code>wait/notify</code>原理</li>
<li><code>synchronized</code>进阶原理</li>
<li><code>park &amp; unpark</code>原理</li>
</ul>
</li>
<li>模式方面<ul>
<li>同步模式之保护性暂停</li>
<li>异步模式之生产者消费者</li>
<li>同步模式之顺序控制</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JUC</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JUC-1(线程基础)</title>
    <url>/posts/9175/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-1-项目准备"><a href="#1-1-项目准备" class="headerlink" title="1.1 项目准备"></a>1.1 项目准备</h2><h3 id="1-1-1-何谓JUC"><a href="#1-1-1-何谓JUC" class="headerlink" title="1.1.1 何谓JUC"></a>1.1.1 何谓JUC</h3><p><code>java.util.concurrent</code></p>
<h3 id="1-1-2-Maven工程"><a href="#1-1-2-Maven工程" class="headerlink" title="1.1.2 Maven工程"></a>1.1.2 Maven工程</h3><p>pom.xml：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logback.version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">logback.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jmh.version</span>&gt;</span>1.28<span class="tag">&lt;/<span class="name">jmh.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.13.1<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;logback.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jmh.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="1-1-3-日志配置"><a href="#1-1-3-日志配置" class="headerlink" title="1.1.3 日志配置"></a>1.1.3 日志配置</h3><p>logback.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 定义日志文件的存储地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_HOME&quot;</span> <span class="attr">value</span>=<span class="string">&quot;log/&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度,%msg：日志消息，%n是换行符 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 文件日志，按照每天生成日志文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志文件输出的文件名 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/juc.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志文件保留天数 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志文件最大的大小 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">MaxFileSize</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志输出级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="1-2-相关概念"><a href="#1-2-相关概念" class="headerlink" title="1.2 相关概念"></a>1.2 相关概念</h2><h3 id="1-2-1-线程与进程"><a href="#1-2-1-线程与进程" class="headerlink" title="1.2.1 线程与进程"></a>1.2.1 线程与进程</h3><blockquote>
<p>进程</p>
</blockquote>
<ul>
<li>程序由指令和数据组成，但这些指令要运行，数据要读写，就必须将指令加载至CPU，数据加载至内存。在指令运行过程中还需要用到磁盘、网络等设备。进程就是用来加载指令、管理内存、管理IO的。</li>
<li>当一个程序被运行，从磁盘加载这个程序的代码至内存，这时就开启了一个进程。</li>
<li>进程就可以视为程序的一个实例。大部分程序可以同时运行多个实例进程（例如IntelliJ IDEA），也有的程序只能启动一个实例进程（例如QQ音乐）。</li>
</ul>
<blockquote>
<p>线程</p>
</blockquote>
<ul>
<li>一个进程之内可以分到多个线程。</li>
<li>一个线程就是一个指令流，将指令流中的一条条指令以一定的顺序交给CPU执行。</li>
<li>Java中，线程作为最小调度单位，进程作为资源分配的最小单位。在Windows中进程是不活动的，只是作为线程的容器。</li>
</ul>
<blockquote>
<p>区别</p>
</blockquote>
<ul>
<li>线程是程序执行的最小单位，进程是OS分配资源的最小单位。</li>
<li>一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线。</li>
<li>进程之间相互独立，但同一进程下的各个线程之间共享程序的内存空间(包括代码段、数据集和堆等)及一些进程级的资源，一个进程内的线程在其他进程不可见。</li>
<li>调度和切换：线程上下文切换比进程上下文切换要快得多。</li>
</ul>
<blockquote>
<p>进程间的通信方式</p>
</blockquote>
<p>（1）管道：分为无名管道和有名管道，都是半双工的通信方式</p>
<p>无名管道：数据只能单向流动，而且只能在具有亲缘关系的进程间使用。</p>
<p>有名管道：允许无亲缘关系进程间的通信。（亲缘关系一般指父子进程）</p>
<p>（2）信号量</p>
<p>信号量是一个计数器，可以用来控制多个线程对共享资源的访问。信号量常作为一种锁机制，用于实现进程间的互斥与同步（或者同一个进程间的不同进程间的同步），而不是用于存储进程间通信数据。</p>
<p>特点：</p>
<ul>
<li>信号量用于进程间同步，若要在进程间传递数据需要结合共享内存。</li>
<li>信号量基于操作系统的PV操作，程序对信号量的操作都是原子操作。</li>
<li>每次对信号量的PV操作不仅限于对信号量值加1或减1，而且可以加减任意正整数。</li>
<li>支持信号量组。</li>
</ul>
<p>（3）消息队列</p>
<p>消息队列是消息的链表，存放在内核中。一个消息队列由一个队列标识符（队列ID）来标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。</p>
<p>特点：</p>
<ul>
<li>消息队列是面向记录的，其中的消息具有特定的格式和特定的优先级。</li>
<li>消息队列独立于发送和接收进程。进程终止时，消息队列及其内容并不会被删除。</li>
<li>消息队列可以实现消息的随机查询，消息不一定要以先进先出的次序读取，也可以按消息的类型读取。</li>
</ul>
<p>（4）共享内存</p>
<p>共享内存，指两个或多个进程共享一个给定的存储区。</p>
<p>特点：</p>
<ul>
<li>共享内存是最快的一种IPC，因为进程是直接对内存进行存取。</li>
<li>因为多个进程可以同时操作，所以需要进行同步。</li>
<li>信号量+共享内存通常结合在一起使用，信号量用来同步对共享内存的访问。</li>
</ul>
<p>（5）信号</p>
<p>信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。</p>
<p>（6）套接字</p>
<p>套接字也是一种进程间通信机制，可用于不同主机间的进程通信。</p>
<h3 id="1-2-2-并发与并行"><a href="#1-2-2-并发与并行" class="headerlink" title="1.2.2 并发与并行"></a>1.2.2 并发与并行</h3><blockquote>
<p>并发</p>
</blockquote>
<p>单核CPU下，线程实际还是串行执行的。操作系统的任务调度器将CPU的时间片（Windows下时间最小约15ms）分给不同的线程使用，只是由于CPU在线程间（时间片很短）的切换非常快，人类感觉是同时运行的。微观串行，宏观并行。</p>
<p>一般会将这种线程轮流使用CPU的做法叫做并发，concurrent。</p>
<blockquote>
<p>并行</p>
</blockquote>
<p>多核CPU下，每个核都可以调度运行线程，这时候线程可以是并行的，parallel。</p>
<blockquote>
<p>区别</p>
</blockquote>
<p>并发：多线程操作一个资源（不一定同时），CPU一核交替运行多条线程</p>
<p>并行：多个线程同时执行（同时），CPU多核同时执行多条线程</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/9175/BFBX.jpg" class="" title="BFBX">



<blockquote>
<p>TIP</p>
</blockquote>
<p>查看CPU核数：<code>Runtime.getRuntime().availableProcessors()</code></p>
<h3 id="1-2-3-应用"><a href="#1-2-3-应用" class="headerlink" title="1.2.3 应用"></a>1.2.3 应用</h3><blockquote>
<p>异步调用</p>
</blockquote>
<p>从方法调用的角度来讲，如果：</p>
<ul>
<li>需要等待结果返回，才能继续运行就是同步</li>
<li>不需要等待结果返回，就能继续运行就是异步</li>
</ul>
<p>注意：同步在多线程中还有一层意思，是让多个线程步调一致。</p>
<blockquote>
<p>设计</p>
</blockquote>
<p>多线程可以让方法 执行变为异步的。</p>
<ul>
<li>比如在项目中，视频文件需要转换格式等操作比较耗时，这时开一个线程处理视频转换，避免阻塞主线程。</li>
<li>tomcat的异步servlety也是类似的目的，让用户线程处理耗时较长的操作，避免阻塞tomcat的工作线程。</li>
<li>UI程序中，开线程进行其他操作，避免阻塞UI线程。</li>
</ul>
<h2 id="1-3-Java线程"><a href="#1-3-Java线程" class="headerlink" title="1.3 Java线程"></a>1.3 Java线程</h2><h3 id="1-3-1-创建线程"><a href="#1-3-1-创建线程" class="headerlink" title="1.3.1 创建线程"></a>1.3.1 创建线程</h3><blockquote>
<p>Thread</p>
</blockquote>
<p>方式一：继承<code>Thread</code>，重写<code>run()</code>方法。</p>
<p>优点：在<code>run()</code>方法内获取当前线程直接使用<code>this</code>即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;I am a child thread.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread thread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>Runnable</p>
</blockquote>
<p>方式二：实现<code>Runnable</code>，实现<code>run()</code>方法。</p>
<p>优点：任务与逻辑分离，多个线程可以执行相同的任务。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableTaskTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I am a child thread.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RunnableTaskTest task = <span class="keyword">new</span> RunnableTaskTest();</span><br><span class="line">        <span class="keyword">new</span> Thread(task).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(task).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>FutureTask</p>
</blockquote>
<p>方式三：实现<code>Callable</code>接口，实现<code>call</code>方法，通过<code>FutureTask</code>创建线程。</p>
<p>优点：任务可以携带返回值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallerTaskTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CallerTask</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String  <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;KHighness&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">        FutureTask&lt;String&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;&gt;(<span class="keyword">new</span> CallerTask());</span><br><span class="line">        <span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String result = futureTask.get();</span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="1-3-2-查看线程"><a href="#1-3-2-查看线程" class="headerlink" title="1.3.2 查看线程"></a>1.3.2 查看线程</h3><blockquote>
<p>Windows</p>
</blockquote>
<ul>
<li><code>taskmgr</code>：打开任务管理器</li>
<li><code>tasklist | findstr &lt;pid&gt;/&lt;pname&gt;  </code>：根据进程id或者名称查找进程</li>
<li><code>taskkill /pid &lt;pid&gt;  </code> ：根据进程id终止进程</li>
<li><code>taskkill /im &lt;pname&gt;</code>：格局进程名称终止进程</li>
<li><code>/t</code>：终止指定的进程和由它启用的子进程</li>
<li><code>/f</code>：指定强制终止进程</li>
</ul>
<blockquote>
<p>Linux</p>
</blockquote>
<ul>
<li><code>ps -ef</code>：查看所有进程</li>
<li><code>ps -fT -p &lt;pid&gt;</code>：查看某个进程(ID)的所有线程</li>
<li><code>kill</code>：终止进程</li>
<li><code>top -H -p &lt;pid&gt;</code>：查看某个进程(ID)的所有线程</li>
</ul>
<blockquote>
<p>Java</p>
</blockquote>
<ul>
<li><code>jps</code>：查看所有java进程</li>
<li><code>jstack &lt;pid&gt;</code>：查看某个Java进程的所有线程状态</li>
</ul>
<blockquote>
<p>jconsole远程监控</p>
</blockquote>
<p>需要如下方式运行类：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -Djava.rmi.server.hostname=&lt;ip&gt; -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=&lt;port&gt; -Dcom.sun.management.jmxremote.ssl=&lt;true/false&gt; -Dcom.sun.management.jmxremote.authenticate=&lt;true/false&gt; &lt;class&gt;</span><br></pre></td></tr></table></figure>

<p>如果认证访问则需要：</p>
<ul>
<li>复制jmxremote.password文件</li>
<li>修改jmxremote.password和jmxremote.access文件的权限为600</li>
<li>连接时候填入c</li>
</ul>
<h3 id="1-3-3-运行原理"><a href="#1-3-3-运行原理" class="headerlink" title="1.3.3 运行原理"></a>1.3.3 运行原理</h3><blockquote>
<p>栈与栈帧</p>
</blockquote>
<p>Java Virtual Machine Stacks（Java虚拟机栈）</p>
<ul>
<li>每个栈由多个栈帧组成，对应着每次方法调用时所占的内存</li>
<li>每个线程只能有一个活动栈帧，对应着当前正在执行的方法</li>
</ul>
<blockquote>
<p>线程上下文切换</p>
</blockquote>
<p>因为以下原因导致CPU不再执行当前的线程，转而执行另一个线程的代码：</p>
<ul>
<li>线程的CPU时间片用完</li>
<li>垃圾回收</li>
<li>有更高优先级的线程需要运行</li>
<li>线程自己调用了sleep、yield、wait、join、park、sychronized、lock等方法</li>
</ul>
<p>当Thread Context Switch发生时，需要由操作系统保存当前线程的状态，并恢复另一个线程的状态，并恢复另一个线程的状态，Java中对应的概念就是程序计数器（Program Counter Register），它的作用是记住下一条JVM指令的执行地址，是线程私有的。</p>
<ul>
<li>状态包括程序计数器、虚拟机栈中每个栈帧的信息，如局部变量、操作数栈、返回地址等</li>
<li>Thread Context Switch频繁发生会影响性能</li>
</ul>
<h3 id="1-3-4-常见方法"><a href="#1-3-4-常见方法" class="headerlink" title="1.3.4 常见方法"></a>1.3.4 常见方法</h3><table>
<thead>
<tr>
<th>方法名</th>
<th>功能</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>start()</code></td>
<td>启动一个新线程，在新的线程运行run方法中的代码</td>
<td>start方法只是让线程进入就绪，里面代码不一定理科运行（CPU的时间片还没分给它）。每个线程对象的start方法只能调用一次，如果调用了多次会出现<code>IllegalThreadStateException</code>。</td>
</tr>
<tr>
<td><code>run()</code></td>
<td>新线程启动后会调用的方法</td>
<td>如果在构造<code>Thread</code>对象时传递了<code>Runnable</code>参数，则线程启动后会调用<code>Runnable</code>中的run方法，否则默认不执行任何操作。但可以创建<code>Thread</code>的子类对象，来覆盖默认行为。</td>
</tr>
<tr>
<td><code>join()</code></td>
<td>等待线程运行结束</td>
<td></td>
</tr>
<tr>
<td><code>join(long n)</code></td>
<td>等待线程运行结束，最多等待n毫秒</td>
<td></td>
</tr>
<tr>
<td><code>getId()</code></td>
<td>获取线程长整型的id</td>
<td>id唯一</td>
</tr>
<tr>
<td><code>getName()</code></td>
<td>获取线程名</td>
<td></td>
</tr>
<tr>
<td><code>setName(String)</code></td>
<td>修改线程名</td>
<td></td>
</tr>
<tr>
<td><code>getPriority()</code></td>
<td>获取线程优先级</td>
<td></td>
</tr>
<tr>
<td><code>setPriority(int)</code></td>
<td>修改线程优先级</td>
<td>Java中规定线程优先级是1~10的整数，较大的优先级能提高该线程被CPU调度的几率</td>
</tr>
<tr>
<td><code>getState()</code></td>
<td>获取线程状态</td>
<td>Java中线程状态是用6个<code>enum</code>表示，分别为：<code>NEW</code>、<code>RUNNABLE</code>、<code>BLOCKED</code>、<code>WAITING</code>、<code>TIMED_WAITING</code>、<code>TERMINATED</code>。</td>
</tr>
<tr>
<td><code>isInterrupted()</code></td>
<td>判断是否给打断</td>
<td>不会清除打断标记。线程的中断标记不受此方法的影响。</td>
</tr>
<tr>
<td><code>isAlive()</code></td>
<td>线程是否存活</td>
<td></td>
</tr>
<tr>
<td><code>interrupt()</code></td>
<td>打断线程</td>
<td>如果被打断线程正在sleep、wait、join会导致被打断的线程抛出<code>InterruptedException</code>，并清除打断标记；如果打断的是正在运行的线程，则会设置打断标记；park的线程被打断，也会设置打断标记。</td>
</tr>
<tr>
<td><code>interrupted()</code> static</td>
<td>判断当前线程是否被打断</td>
<td>清除线程的中断标记。如果这个方法连续调用两次，那么第二次调用将返回false。</td>
</tr>
<tr>
<td><code>currentThread()</code> static</td>
<td>获取当前线程</td>
<td></td>
</tr>
<tr>
<td><code>sleep()</code> static</td>
<td>让当前执行的线程休眠n毫秒，休眠时间让出CPU的时间片给其他线程</td>
<td></td>
</tr>
<tr>
<td><code>yield()</code> static</td>
<td>提示线程调度器让出当前线程对CPU的使用</td>
<td>主要是为了测试和调试</td>
</tr>
</tbody></table>
<h3 id="1-3-5-start和run"><a href="#1-3-5-start和run" class="headerlink" title="1.3.5 start和run"></a>1.3.5 start和run</h3><ul>
<li>start：让线程处于就绪状态，并没有运行，一旦得到CPU时间片，就开始运行run()方法。</li>
<li>run：如果该线程使用独立的<code>Runnable</code>运行对象构造的，则调用该<code>Runnable</code>对象的run()方法，否则，该方法不执行任何操作返回。</li>
<li>总结：调用<code>start</code>方法可启动线程，而<code>run</code>方法只是<code>Thread</code>类中的一个普通调用，还是在主线程里执行。</li>
</ul>
<h3 id="1-3-6-sleep与yield"><a href="#1-3-6-sleep与yield" class="headerlink" title="1.3.6 sleep与yield"></a>1.3.6 sleep与yield</h3><blockquote>
<p>sleep</p>
</blockquote>
<ul>
<li>调用<code>sleep</code>会让当前线程从<code>RUNNING</code>进入到<code>TIMED_WAITING</code>状态</li>
<li>其他线程可以使用<code>interrupt</code>方法打断正在睡眠的线程。</li>
<li>睡眠结束后的线程未必会立刻得到执行。</li>
<li>建议使用<code>TimeUnit</code>的<code>sleep</code>代替<code>Thread</code>的<code>sleep</code>来获得更好的可读性。</li>
</ul>
<blockquote>
<p>yield</p>
</blockquote>
<ul>
<li>调用<code>yield</code>会让当前线程从<code>RUNNING</code>进入<code>RUNNABLE</code>就绪状态，然后调度执行其他线程。</li>
<li>具体的实现依赖于操作系统的任务调度器。</li>
</ul>
<h3 id="1-3-7-线程优先级"><a href="#1-3-7-线程优先级" class="headerlink" title="1.3.7 线程优先级"></a>1.3.7 线程优先级</h3><blockquote>
<p>说明</p>
</blockquote>
<ul>
<li>线程优先级会提示调度器优先调度该线程，但它仅仅是一个提示，调度器可以忽略它。</li>
<li>如果CPU比较忙，那么优先级高的线程会获得更多的时间片，但是CPU闲时，优先级几乎没有作用。</li>
</ul>
<h3 id="1-3-8-join"><a href="#1-3-8-join" class="headerlink" title="1.3.8 join"></a>1.3.8 join</h3><blockquote>
<p>示例</p>
</blockquote>
<p>在下面的程序中，想让<code>update</code>输出i修改后的结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;Join&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoinDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        update();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;main thread start&quot;</span>);</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;child thread start&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(<span class="string">&quot;child thread end&quot;</span>);</span><br><span class="line">            i *= i;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        log.debug(<span class="string">&quot;i =&gt; [&#123;&#125;]&quot;</span>, i);</span><br><span class="line">        log.debug(<span class="string">&quot;main thread end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">16</span>:<span class="number">52.692</span> [main] DEBUG Join - main thread start</span><br><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">16</span>:<span class="number">52.726</span> [t1] DEBUG Join - child thread start</span><br><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">16</span>:<span class="number">52.726</span> [main] DEBUG Join - i =&gt; [<span class="number">3</span>]</span><br><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">16</span>:<span class="number">52.727</span> [main] DEBUG Join - main thread end</span><br><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">16</span>:<span class="number">53.734</span> [t1] DEBUG Join - child thread end</span><br></pre></td></tr></table></figure>

<p>在第22行后添加<code>t1.join();</code>方法后的输出结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">14</span>:<span class="number">53.431</span> [main] DEBUG Join - main thread start</span><br><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">14</span>:<span class="number">53.461</span> [t1] DEBUG Join - child thread start</span><br><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">14</span>:<span class="number">54.474</span> [t1] DEBUG Join - child thread end</span><br><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">14</span>:<span class="number">54.474</span> [main] DEBUG Join - i =&gt; [<span class="number">9</span>]</span><br><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">06</span> <span class="number">16</span>:<span class="number">14</span>:<span class="number">54.475</span> [main] DEBUG Join - main thread end</span><br></pre></td></tr></table></figure>



<h3 id="1-3-9-interrupt"><a href="#1-3-9-interrupt" class="headerlink" title="1.3.9 interrupt"></a>1.3.9 interrupt</h3><blockquote>
<p>API</p>
</blockquote>
<ul>
<li><code>interrupt()</code>：声明此线程中断，但是线程并不会立即中断</li>
<li><code>isInterrupted</code>：判断此线程是否已中断，判断完后不修改县城管的中断状态</li>
<li><code>interrupted()</code>：判断此线程已中断，判断完后清除线程的中断状态</li>
</ul>
<blockquote>
<p>理解</p>
</blockquote>
<ul>
<li><code>interrupt()</code>：皇上（线程）每晚挑选一个妃子侍寝，到了时间，太监会告诉皇上，时间到了（声明线程中断），皇上知道了，停不停还是皇上说了算。</li>
<li><code>isInterrupted()</code>：如果（<code>isInterrupted = true</code>）则可以控制皇上（线程）停止，皇上停止后，线程还是中断状态，即<code>interruptes = true</code>。</li>
<li><code>interrupted()</code>：如果（<code>isInterrupted = true</code>）则可以控制皇上（线程）停止，皇上停止后，线程会清除中断状态，即<code>interruptes = false</code>。</li>
</ul>
<blockquote>
<p>证明</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;InterruptAPI&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterruptDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            Thread thread = Thread.currentThread();</span><br><span class="line">            <span class="keyword">while</span> (!thread.isInterrupted()) &#123;  <span class="comment">// (1) isInterrupted</span></span><br><span class="line"><span class="comment">//            while (!Thread.interrupted()) &#123;      // (2) interrupted(static)</span></span><br><span class="line">                log.debug(<span class="string">&quot;&#123;&#125;&quot;</span>, thread.isInterrupted());</span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(<span class="string">&quot;&#123;&#125;&quot;</span>, thread.isInterrupted());</span><br><span class="line">        &#125;, <span class="string">&quot;t&quot;</span>);</span><br><span class="line">        t.start();</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        t.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注释（2）结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">24</span> <span class="number">14</span>:<span class="number">04</span>:<span class="number">26.851</span> [t] DEBUG InterruptAPI - <span class="keyword">false</span></span><br><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">24</span> <span class="number">14</span>:<span class="number">04</span>:<span class="number">26.853</span> [t] DEBUG InterruptAPI - <span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<p>证明<code>isInterrupted()</code>不会修改中断状态。</p>
<p>注释（1）结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">24</span> <span class="number">14</span>:<span class="number">04</span>:<span class="number">54.046</span> [t] DEBUG InterruptAPI - <span class="keyword">false</span></span><br><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">24</span> <span class="number">14</span>:<span class="number">04</span>:<span class="number">54.049</span> [t] DEBUG InterruptAPI - <span class="keyword">false</span></span><br></pre></td></tr></table></figure>

<p>证明<code>interrupted()</code>会重置中断状态。</p>
<h3 id="1-3-10-两阶段终止模式"><a href="#1-3-10-两阶段终止模式" class="headerlink" title="1.3.10 两阶段终止模式"></a>1.3.10 两阶段终止模式</h3><blockquote>
<p>图示</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">w(&quot;while(true)&quot;) --&gt; a</span><br><span class="line">a(&quot;有没有被打断&quot;) -- 是 --&gt; b(料理后事)</span><br><span class="line">b --&gt; c((结束循环))</span><br><span class="line">a -- 否 --&gt; d(睡眠2S)</span><br><span class="line">d -- 无异常 --&gt; e(执行监控记录)</span><br><span class="line">d -- 有异常 --&gt; i(设置打断标记)</span><br><span class="line">i --&gt; w</span><br><span class="line">e --&gt; w</span><br></pre></td></tr></table></figure>



<blockquote>
<p>代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;TwoStageTermination&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoStageTermination</span> </span>&#123;</span><br><span class="line">     Thread monitor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动监控线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        monitor = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                Thread current = Thread.currentThread();</span><br><span class="line">                <span class="comment">// 正在运行的线程被打断，直接设置打断标记</span></span><br><span class="line">                <span class="keyword">if</span> (current.isInterrupted()) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;料理后事&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                    log.info(<span class="string">&quot;执行监控...&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    log.debug(e.getMessage());</span><br><span class="line">                    <span class="comment">// 正在运行的线程被打断，会被清除打断标记，需要重新设置设置打断标记</span></span><br><span class="line">                    current.interrupt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        monitor.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 停止监控线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        monitor.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">24</span> <span class="number">14</span>:<span class="number">26</span>:<span class="number">23.321</span> [Thread-<span class="number">0</span>] INFO  TwoStageTermination - 执行监控...</span><br><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">24</span> <span class="number">14</span>:<span class="number">26</span>:<span class="number">24.329</span> [Thread-<span class="number">0</span>] INFO  TwoStageTermination - 执行监控...</span><br><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">24</span> <span class="number">14</span>:<span class="number">26</span>:<span class="number">25.336</span> [Thread-<span class="number">0</span>] INFO  TwoStageTermination - 执行监控...</span><br><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">24</span> <span class="number">14</span>:<span class="number">26</span>:<span class="number">25.823</span> [Thread-<span class="number">0</span>] DEBUG TwoStageTermination - sleep interrupted</span><br><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">24</span> <span class="number">14</span>:<span class="number">26</span>:<span class="number">25.823</span> [Thread-<span class="number">0</span>] DEBUG TwoStageTermination - 料理后事</span><br></pre></td></tr></table></figure>



<blockquote>
<p>park</p>
</blockquote>
<p><code>LockSupport</code>的<code>park()</code>可用于暂停当前线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;Park&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParkDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        park();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">park</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;park...&quot;</span>);</span><br><span class="line">            log.debug(<span class="string">&quot;isInterrupted =&gt; [&#123;&#125;]&quot;</span>, Thread.currentThread().isInterrupted());</span><br><span class="line">            LockSupport.park();</span><br><span class="line">            log.debug(<span class="string">&quot;unpark...&quot;</span>);</span><br><span class="line">            log.debug(<span class="string">&quot;isInterrupted =&gt; [&#123;&#125;]&quot;</span>, Thread.currentThread().isInterrupted());</span><br><span class="line">            LockSupport.park();</span><br><span class="line">            Thread.interrupted();</span><br><span class="line">            log.debug(<span class="string">&quot;isInterrupted =&gt; [&#123;&#125;]&quot;</span>, Thread.currentThread().isInterrupted());</span><br><span class="line">            log.debug(<span class="string">&quot;unpark...&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        t1.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">06</span> <span class="number">20</span>:<span class="number">23</span>:<span class="number">08.234</span> [t1] DEBUG Park - park...</span><br><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">06</span> <span class="number">20</span>:<span class="number">23</span>:<span class="number">08.237</span> [t1] DEBUG Park - isInterrupted =&gt; [<span class="keyword">false</span>]</span><br><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">06</span> <span class="number">20</span>:<span class="number">23</span>:<span class="number">09.234</span> [t1] DEBUG Park - unpark...</span><br><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">06</span> <span class="number">20</span>:<span class="number">23</span>:<span class="number">09.234</span> [t1] DEBUG Park - isInterrupted =&gt; [<span class="keyword">true</span>]</span><br><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">06</span> <span class="number">20</span>:<span class="number">23</span>:<span class="number">09.234</span> [t1] DEBUG Park - isInterrupted =&gt; [<span class="keyword">false</span>]</span><br><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">06</span> <span class="number">20</span>:<span class="number">23</span>:<span class="number">09.234</span> [t1] DEBUG Park - unpark...</span><br></pre></td></tr></table></figure>



<blockquote>
<p>打断线程的错误思路</p>
</blockquote>
<ul>
<li>使用线程对象的<code>stop()</code>方法停止线程：<code>stop()</code>方法会真正杀死线程，如果这时线程锁住了共享资源，那么当它被杀死后就再也没有机会释放锁，其它线程将永远无法释放锁。</li>
<li>使用<code>System.exit(int)</code>方法终止线程：目的仅是停止一个线程，但这种会让整个程序都停止。</li>
</ul>
<p>以下方法不推荐使用：</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>stop()</code></td>
<td>停止线程运行</td>
</tr>
<tr>
<td><code>suspend()</code></td>
<td>挂起线程运行</td>
</tr>
<tr>
<td><code>resume()</code></td>
<td>恢复线程运行</td>
</tr>
</tbody></table>
<h3 id="1-3-11-主线程与守护线程"><a href="#1-3-11-主线程与守护线程" class="headerlink" title="1.3.11 主线程与守护线程"></a>1.3.11 主线程与守护线程</h3><p>默认情况下，Java进程需要等待所有线程都运行结束，才会结束。有一种特殊的线程叫做守护线程，只要其他非守护线程运行结束了，即使守护线程的代码没有执行完，也会强制结束。</p>
<blockquote>
<p>守护线程示例</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">&quot;&#123;&#125; end&quot;</span>, Thread.currentThread().getName());</span><br><span class="line">    &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">    t1.start();</span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;&#123;&#125; end&quot;</span>, Thread.currentThread().getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2021</span>-<span class="number">04</span>-<span class="number">07</span> <span class="number">10</span>:<span class="number">37</span>:<span class="number">04</span>.<span class="number">886</span> [main] DEBUG Daemon - main end</span><br></pre></td></tr></table></figure>

<p>虽然main线程终止，但是t1线程并未终止。</p>
<p>但是<code>t1.setDaemon(true);</code>之后，main线程终止，t1线程立马终止。</p>
<h3 id="1-3-12-五种状态"><a href="#1-3-12-五种状态" class="headerlink" title="1.3.12 五种状态"></a>1.3.12 五种状态</h3><blockquote>
<p>图示</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/9175/image-20210407110528028.png" class="" title="image-20210407110528028">

<ul>
<li>【初始状态】：仅是在语言层面创建了线程对象，还未与操作系统线程关联</li>
<li>【可运行状态】：该线程已经被创建，与操作系统关联，处于就绪状态，可以由CPU调度执行</li>
<li>【运行状态】：获取了CPU时间片运行中的状态<ul>
<li>当CPU时间片用完，会从运行状态转换成可运行状态，会导致线程的上下文切换</li>
</ul>
</li>
<li>【阻塞状态】：<ul>
<li>如果调用了阻塞API，如BIO读写文件，这时该线程实际不会用到CPU，会导致上下文切换，进入阻塞状态</li>
<li>等BIO操作完毕，会由操作系统唤醒阻塞的线程，转换至【可运行状态】</li>
</ul>
</li>
<li>【终止状态】：表示线程已经执行完毕，生命周期已经结束，不会再转换为其他状态。</li>
</ul>
<h3 id="1-3-13-六种状态"><a href="#1-3-13-六种状态" class="headerlink" title="1.3.13 六种状态"></a>1.3.13 六种状态</h3><p>从Java API层面描述，根据<code>Thread.State</code>枚举，分为六种状态：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NEW            新建状态</span><br><span class="line">RUNNABLE       运行状态（就绪状态、运行中状态）</span><br><span class="line">BLOCKED        阻塞状态</span><br><span class="line">WAITING        等待状态</span><br><span class="line">TIMED_WAITING  计时等待状态</span><br><span class="line">TERMINATED     终止状态</span><br></pre></td></tr></table></figure>

<ul>
<li>NEW线程刚被创建，但是还没有调用<code>start()</code>方法</li>
<li>RUNNABLE当调用了<code>start()</code>方法之后，注意，Java API层面的RUNNABLE状态涵盖了操作系统层面的【可运行状态】、【运行状态】和【阻塞状态】（由于BIO导致的线程阻塞，在Java里无法区分，仍然认为是可运行）。</li>
<li>BLOCKED、WAITING、TIMED_WAITING都是Java API层面对【阻塞状态】的细分。‘</li>
<li>TERMINATED当线程代码运行结束。</li>
</ul>
<blockquote>
<p>图示</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/9175/image-20210407114128028.png" class="" title="image-20210407114128028">



<blockquote>
<p>示例</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;State&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StateDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; log.debug(<span class="string">&quot;&#123;&#125; running...&quot;</span>, Thread.currentThread().getName()), <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123; <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;&#125; &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(() -&gt; log.debug(<span class="string">&quot;&#123;&#125; running...&quot;</span>, Thread.currentThread().getName()), <span class="string">&quot;t3&quot;</span>);</span><br><span class="line">        Thread t4 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (StateDemo.class) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t4&quot;</span>);</span><br><span class="line">        Thread t5 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t2.join();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t5&quot;</span>);</span><br><span class="line">        Thread t6 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (StateDemo.class) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t4&quot;</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">        t4.start();</span><br><span class="line">        t5.start();</span><br><span class="line">        t6.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">&quot;t1 =&gt; [&#123;&#125;]&quot;</span>, t1.getState());   <span class="comment">// TERMINATED</span></span><br><span class="line">        log.debug(<span class="string">&quot;t2 =&gt; [&#123;&#125;]&quot;</span>, t2.getState());   <span class="comment">// RUNNABLE</span></span><br><span class="line">        log.debug(<span class="string">&quot;t3 =&gt; [&#123;&#125;]&quot;</span>, t3.getState());   <span class="comment">// TERMINATED</span></span><br><span class="line">        log.debug(<span class="string">&quot;t4 =&gt; [&#123;&#125;]&quot;</span>, t4.getState());   <span class="comment">// TIMED_WAITING</span></span><br><span class="line">        log.debug(<span class="string">&quot;t5 =&gt; [&#123;&#125;]&quot;</span>, t5.getState());   <span class="comment">// WAITING</span></span><br><span class="line">        log.debug(<span class="string">&quot;t6 =&gt; [&#123;&#125;]&quot;</span>, t6.getState());   <span class="comment">// BLOCKED</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p> 1.3.14 习题</p>
<blockquote>
<p>应用之统筹（烧水泡茶）</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">统筹方法，是一种安排工作进程的数学方法。它的实用范围极广泛，在企业管理和基本建设中，以及关系复杂的科研项目的组织与管理中，都可以应用。</span><br><span class="line">怎样应用呢？主要是把工序安排好。</span><br><span class="line">比如，想泡壶茶喝。当时的情况是：开水没有；水壶要洗，茶壶、茶杯要洗；火已生了，茶叶也有了。怎么办？</span><br><span class="line"></span><br><span class="line">- 办法甲：洗好水壶，灌上凉水，放在火上；在等待水开的时间里，洗茶壶、洗茶杯、拿茶叶；等水开了，泡茶喝。</span><br><span class="line">- 办法乙：先做好一些准备工作，洗水壶，洗茶壶茶杯，拿茶叶；一切就绪，灌水烧水；坐待水开了，泡茶喝。</span><br><span class="line">- 办法丙：洗净水壶，灌上凉水，放在火上，坐待水开；水开了之后，急急忙忙找茶叶，洗茶壶茶杯，泡茶喝。</span><br><span class="line"></span><br><span class="line">哪一种方法省时间？我们能一眼看出，第一种办法好，后两种办法都窝了工。</span><br><span class="line">——华罗庚《统筹方法》</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">a(洗水壶) --&gt; b(烧开水)</span><br><span class="line">c(洗茶壶,洗茶杯,拿茶叶)</span><br><span class="line">b --&gt; d(泡茶)</span><br><span class="line">c --&gt; d(泡茶)</span><br></pre></td></tr></table></figure>

<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;BoilWaterToMakeTea&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlanDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;洗水壶&quot;</span>);</span><br><span class="line">            sleep(<span class="number">60</span>);      <span class="comment">// 洗水壶 1分钟</span></span><br><span class="line">            log.debug(<span class="string">&quot;烧开水&quot;</span>);</span><br><span class="line">            sleep(<span class="number">60</span> * <span class="number">5</span>);  <span class="comment">// 烧开水 5分钟</span></span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;洗茶壶&quot;</span>);</span><br><span class="line">            sleep(<span class="number">60</span>);      <span class="comment">// 洗水壶 1分钟</span></span><br><span class="line">            log.debug(<span class="string">&quot;洗茶杯&quot;</span>);</span><br><span class="line">            sleep(<span class="number">60</span> * <span class="number">2</span>);  <span class="comment">// 洗茶杯 2分钟</span></span><br><span class="line">            log.debug(<span class="string">&quot;拿茶叶&quot;</span>);</span><br><span class="line">            sleep(<span class="number">60</span> );     <span class="comment">// 烧开水 1分钟</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t1.join();               <span class="comment">// 等待t1烧水</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(<span class="string">&quot;泡茶&quot;</span>);</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">int</span> nanoSeconds)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.NANOSECONDS.sleep(nanoSeconds);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021-04-07 14:12:12.989 [t1] DEBUG top.parak.demo.BoilWaterToMakeTea - 洗水壶</span><br><span class="line">2021-04-07 14:12:12.989 [t2] DEBUG top.parak.demo.BoilWaterToMakeTea - 洗茶壶</span><br><span class="line">2021-04-07 14:12:12.994 [t1] DEBUG top.parak.demo.BoilWaterToMakeTea - 烧开水</span><br><span class="line">2021-04-07 14:12:12.994 [t2] DEBUG top.parak.demo.BoilWaterToMakeTea - 洗茶杯</span><br><span class="line">2021-04-07 14:12:12.996 [t2] DEBUG top.parak.demo.BoilWaterToMakeTea - 拿茶叶</span><br><span class="line">2021-04-07 14:12:12.998 [t2] DEBUG top.parak.demo.BoilWaterToMakeTea - 泡茶</span><br></pre></td></tr></table></figure>



<blockquote>
<p>小结</p>
</blockquote>
<ul>
<li>sleep不释放锁，释放CPU</li>
<li>join释放锁，抢占CPU</li>
<li>yield不释放锁，释放CPU</li>
<li>wait释放锁，释放CPU</li>
</ul>
]]></content>
      <categories>
        <category>JUC</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-Serilizable</title>
    <url>/posts/29446/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a name="YYYCK"></a></p>
<h2 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><p>序列化：将Java对象转换为字节序列，以便持久化到磁盘或者网络传输。</p>
<p>反序列化：将磁盘文件或者网络文件中的字节序列恢复为原先的Java对象。</p>
<p>Java对象的序列化的方式有两种：</p>
<ul>
<li>实现<code>Serilizable</code>接口，比较方便。</li>
<li>实现<code>Exteranlizable</code>接口，需要重写<code>writeExternal</code>和<code>readExterna</code>方法。</li>
</ul>
<p>定义User：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// AllArgsConstructor</span></span><br><span class="line">    <span class="comment">// ToString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>序列化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    ObjectOutputStream output = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(</span><br><span class="line">        <span class="keyword">new</span> File(System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;/src/main/resources/public/&quot;</span> + <span class="string">&quot;user.txt&quot;</span>)));</span><br><span class="line">    output.writeObject(obj);</span><br><span class="line">    output.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>反序列化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">deserialize</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    ObjectInputStream input = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(</span><br><span class="line">        <span class="keyword">new</span> File(System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;/src/main/resources/public/&quot;</span> + <span class="string">&quot;user.txt&quot;</span>)));</span><br><span class="line">    <span class="keyword">return</span> (User) input.readObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;Khighness&quot;</span>, <span class="keyword">new</span> Date());</span><br><span class="line">    serialize(user);</span><br><span class="line">    User des = deserialize();</span><br><span class="line">    System.out.println(des);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>控制台输出：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">User[<span class="type">id</span>=<span class="number">1</span>, <span class="type">username</span>=<span class="string">&#x27;Khighness&#x27;</span>, <span class="type">birth</span>=<span class="type">Thu</span> <span class="type">Apr</span> <span class="number">22</span> <span class="number">12</span>:<span class="number">12</span>:<span class="number">48</span> <span class="type">CST</span> <span class="number">2021</span>]</span><br></pre></td></tr></table></figure>

<p><a name="P1aos"></a><br></p>
<h2 id="Serializable"><a href="#Serializable" class="headerlink" title="Serializable"></a>Serializable</h2><p>看一下源代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>发现只是个空接口，因此这只是个标示性接口。<br />那我们点进刚才使用的<code>writeObject</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (enableOverride) &#123;           <span class="comment">// 表示是否可覆写，默认false</span></span><br><span class="line">        writeObjectOverride(obj);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        writeObject0(obj, <span class="keyword">false</span>); <span class="comment">// 主要执行的方法</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">        <span class="keyword">if</span> (depth == <span class="number">0</span>) &#123;</span><br><span class="line">            writeFatalException(ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到它调用的是<code>writeObject0</code>方法，再进入这个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// remaining cases 判断对象</span></span><br><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String) &#123;              <span class="comment">// 是否为字符串</span></span><br><span class="line">    writeString((String) obj, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (cl.isArray()) &#123;                <span class="comment">// 是否为数组</span></span><br><span class="line">    writeArray(obj, desc, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Enum) &#123;         <span class="comment">// 是否为枚举类</span></span><br><span class="line">    writeEnum((Enum&lt;?&gt;) obj, desc, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Serializable) &#123; <span class="comment">// 是否实现了Serializable接口</span></span><br><span class="line">    writeOrdinaryObject(obj, desc, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;                                  <span class="comment">// 四非则抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotSerializableException(</span><br><span class="line">            cl.getName() + <span class="string">&quot;\n&quot;</span> + debugInfoStack.toString());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotSerializableException(cl.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="fYvZd"></a><br></p>
<h2 id="serialVersionUID"><a href="#serialVersionUID" class="headerlink" title="serialVersionUID"></a>serialVersionUID</h2><p>继续测试，给User类添加字段：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String email;</span><br></pre></td></tr></table></figure>
<p>将测试代码改为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    User des = deserialize();</span><br><span class="line">    System.out.println(des);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">&quot;main&quot;</span> java.io.InvalidClassException: top.parak.entity.User; local <span class="class"><span class="keyword">class</span> <span class="title">incompatible</span>: <span class="title">stream</span> <span class="title">classdesc</span> <span class="title">serialVersionUID</span> = -5676367428859465228, <span class="title">local</span> <span class="title">class</span> <span class="title">serialVersionUID</span> = -1182591043963610802</span></span><br></pre></td></tr></table></figure>
<p>发现报错，并且抛出<code>InvalidClassException</code>异常，提示信息：本地类不兼容，序列化前后的<code>serialVersionUID</code>不同。<br />因此，有两个重要结论：</p>
<ul>
<li><code>serialVersionUID</code>是序列化前后的唯一标识符。</li>
<li>默认如果没有显示定义<code>serialVersionUID</code>，则编译器会为它自动声明一个。</li>
</ul>
<p>扩展：</p>
<ul>
<li><code>serialVersionUID</code>序列化ID，可以看成是序列化和反序列化过程中的暗号（连上彼此的讯号才有个依靠），在反序列化时，JVM会把字节流中的序列化ID和被序列号类中的序列化ID做对比，只有两者一致，才能重新反序列化，否则抛出异常终止反序列化的过程。</li>
<li>如果在定义一个可序列化的类时，没有人为显示地给它定义一个<code>serialVersionUID</code>的话，则Java运行时环境会根据该类的各方面信息自动地为它生成一个默认的<code>serialVersionUID</code>，一旦更改了类的结构或者信息，则类的<code>serialVersionUID</code>也会跟着变化。</li>
</ul>
<p><a name="B8uH5"></a><br></p>
<h2 id="static-amp-transient"><a href="#static-amp-transient" class="headerlink" title="static&amp;transient"></a>static&amp;transient</h2><p>继续测试，将<code>User</code>类的<code>email</code>字段添加修饰符<code>static</code>或者<code>transient</code>，发现测试成功。<br />于是可以得出结论，对于<code>Serilizable</code>接口：</p>
<ol>
<li>凡是被<code>static</code>修饰的字段是不会被序列化的</li>
<li>凡是被<code>transient</code>修饰的字段是不会被序列化的</li>
</ol>
<blockquote>
<p>transient</p>
</blockquote>
<p><code>transient</code>关键字的作用就是把被修饰的字段的生命周期仅存于调用者的内存而不会持久化到磁盘中。<br /></p>
<blockquote>
<p>注意</p>
</blockquote>
<p>实现<code>Exteranlizable</code>接口时，<code>transient</code>是无效的。<br /></p>
<p><a name="PzCRj"></a><br></p>
<h2 id="单例模式增强"><a href="#单例模式增强" class="headerlink" title="单例模式增强"></a>单例模式增强</h2><p>静态内部类的单例模式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">3992737853791586260L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后写一个测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">// 序列化</span></span><br><span class="line">    Singleton instance = Singleton.getInstance();</span><br><span class="line">    ObjectOutputStream output = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(</span><br><span class="line">        <span class="keyword">new</span> File(System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;/src/main/resources/public/&quot;</span> + <span class="string">&quot;singleton.txt&quot;</span>)));</span><br><span class="line">    output.writeObject(instance);</span><br><span class="line">    output.close();</span><br><span class="line">    <span class="comment">// 反序列化</span></span><br><span class="line">    ObjectInputStream input = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(</span><br><span class="line">        <span class="keyword">new</span> File(System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;/src/main/resources/public/&quot;</span> + <span class="string">&quot;singleton.txt&quot;</span>)));</span><br><span class="line">    Singleton singleton = (Singleton) input.readObject();</span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    System.out.println(instance == singleton);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行之后，发现控制台打印的是<code>false</code>。<br />解决方法：在单例中手写<code>readResolve</code>函数，直接返回单例对象，来规避之。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> SingletonHolder.singleton;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang-MySQL</title>
    <url>/posts/52018/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h2><p>方式一：设置代理并安装驱动</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> go env <span class="literal">-w</span> GOPROXY=https://goproxy.cn</span><br><span class="line"><span class="variable">$</span> go get github.com/go<span class="literal">-sql</span><span class="literal">-driver</span>/mysql</span><br><span class="line"><span class="variable">$</span> go get github.com/jmoiron/sqlx</span><br></pre></td></tr></table></figure>
<p>方式二：使用mod创建项目</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化</span></span><br><span class="line"><span class="variable">$</span> go mod init go<span class="literal">-mysql</span></span><br><span class="line"><span class="comment"># 在go.mod中添加</span></span><br><span class="line">require github.com/go<span class="literal">-sql</span><span class="literal">-driver</span>/mysql v1.<span class="number">6.0</span></span><br><span class="line"><span class="comment"># 下载依赖</span></span><br><span class="line"><span class="variable">$</span> go mod download</span><br></pre></td></tr></table></figure>

<h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><blockquote>
<p>建表语句</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `id` int NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(<span class="number">25</span>) CHARACTER <span class="built_in">SET</span> utf8 COLLATE utf8_general_ci NOT NULL,</span><br><span class="line">  `age` tinyint unsigned NOT NULL DEFAULT <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=<span class="number">16</span> DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>初始数据</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`demo`</span>.<span class="string">`user`</span>(<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;Khighness&#x27;</span>, <span class="number">19</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`demo`</span>.<span class="string">`user`</span>(<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;RabbishK&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`demo`</span>.<span class="string">`user`</span>(<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;UnknownK&#x27;</span>, <span class="number">17</span>);</span><br></pre></td></tr></table></figure>

<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go-mysql</span><br><span class="line">├── .idea</span><br><span class="line">├── db</span><br><span class="line">│   ├── delete.go</span><br><span class="line">│   ├── insert.go</span><br><span class="line">│   ├── mysql.go</span><br><span class="line">│   ├── select.go</span><br><span class="line">│   ├── transaction.go</span><br><span class="line">│   ├── update.go</span><br><span class="line">│   └── user.go</span><br><span class="line">├── db_test.go</span><br><span class="line">├── go.mod</span><br><span class="line">└── go.sum</span><br></pre></td></tr></table></figure>

<h2 id="MySQL连接池"><a href="#MySQL连接池" class="headerlink" title="MySQL连接池"></a>MySQL连接池</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;database/sql&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author KHighness</span></span><br><span class="line"><span class="comment"> * @since 2021-04-20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> MysqlDB *sql.DB</span><br><span class="line"><span class="keyword">var</span> MysqlDBERR error</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	USERNAME = <span class="string">&quot;root&quot;</span></span><br><span class="line">	PASSWORD = <span class="string">&quot;KAG1823&quot;</span></span><br><span class="line">	HOST     = <span class="string">&quot;8.133.183.149&quot;</span></span><br><span class="line">	PORT     = <span class="string">&quot;3306&quot;</span></span><br><span class="line">	DATABASE = <span class="string">&quot;demo&quot;</span></span><br><span class="line">	CHARSET  = <span class="string">&quot;utf8&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化链接</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	dbDSN := fmt.Sprintf(<span class="string">&quot;%s:%s@tcp(%s:%s)/%s?charset=%s&quot;</span>, USERNAME, PASSWORD, HOST, PORT, DATABASE, CHARSET)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 打开连接失败</span></span><br><span class="line">	MysqlDB, MysqlDBERR = sql.Open(<span class="string">&quot;mysql&quot;</span>, dbDSN)</span><br><span class="line">	<span class="keyword">if</span> MysqlDBERR != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;dbDSN: &quot;</span> + dbDSN)</span><br><span class="line">		<span class="built_in">panic</span>(<span class="string">&quot;数据源配置错误: &quot;</span> + MysqlDBERR.Error())</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 最大连接数</span></span><br><span class="line">	MysqlDB.SetMaxOpenConns(<span class="number">100</span>)</span><br><span class="line">	<span class="comment">// 闲置连接数</span></span><br><span class="line">	MysqlDB.SetMaxIdleConns(<span class="number">20</span>)</span><br><span class="line">	<span class="comment">// 最大连接周期</span></span><br><span class="line">	MysqlDB.SetConnMaxLifetime(<span class="number">100</span> * time.Second)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> MysqlDBERR = MysqlDB.Ping(); <span class="literal">nil</span> != MysqlDBERR &#123;</span><br><span class="line">		<span class="built_in">panic</span>(<span class="string">&quot;数据库连接失败: &quot;</span> + MysqlDBERR.Error())</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="用户结构体"><a href="#用户结构体" class="headerlink" title="用户结构体"></a>用户结构体</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author KHighness</span></span><br><span class="line"><span class="comment"> * @since 2021-04-20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户结构体</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	Id <span class="keyword">int64</span> <span class="string">`db:&quot;id&quot;`</span></span><br><span class="line">	Name <span class="keyword">string</span> <span class="string">`db:&quot;name&quot;`</span></span><br><span class="line">	Age <span class="keyword">int</span> <span class="string">`db:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="INSERT操作"><a href="#INSERT操作" class="headerlink" title="INSERT操作"></a>INSERT操作</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author KHighness</span></span><br><span class="line"><span class="comment"> * @since 2021-04-20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存用户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SaveUser</span><span class="params">(user User)</span></span>  &#123;</span><br><span class="line">	res, _ := MysqlDB.Exec(<span class="string">&quot;INSERT INTO user(name, age) VALUES (?, ?)&quot;</span>, user.Name, user.Age)</span><br><span class="line">	lastInsertId, _ := res.LastInsertId()</span><br><span class="line">	rowsAffected, _ := res.RowsAffected()</span><br><span class="line">	log.Printf(<span class="string">&quot;插入ID =&gt; [%d], 影响行数 =&gt; [%d]&quot;</span>, lastInsertId, rowsAffected)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SELECT操作"><a href="#SELECT操作" class="headerlink" title="SELECT操作"></a>SELECT操作</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author KHighness</span></span><br><span class="line"><span class="comment"> * @since 2021-04-20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据ID查询</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QueryById</span><span class="params">(id <span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">	user := <span class="built_in">new</span>(User)</span><br><span class="line">	row := MysqlDB.QueryRow(<span class="string">&quot;SELECT * FROM user WHERE id = ?&quot;</span>, id)</span><br><span class="line">	<span class="keyword">if</span> err :=row.Scan(&amp;user.Id,&amp;user.Name,&amp;user.Age); err != <span class="literal">nil</span>&#123;</span><br><span class="line">		log.Printf(<span class="string">&quot;scan failed, err:%v&quot;</span>,err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	log.Printf(<span class="string">&quot;query result =&gt; [%s]\n&quot;</span>, user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询所有</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QueryList</span><span class="params">()</span></span> &#123;</span><br><span class="line">	users := <span class="built_in">make</span>([]User, <span class="number">0</span>)</span><br><span class="line">	rows, _ := MysqlDB.Query(<span class="string">&quot;SELECT * FROM user&quot;</span>)</span><br><span class="line">	<span class="comment">// 遍历</span></span><br><span class="line">	<span class="keyword">var</span> user User</span><br><span class="line">	<span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">		_ = rows.Scan(&amp;user.Id, &amp;user.Name, &amp;user.Age)</span><br><span class="line">		users = <span class="built_in">append</span>(users, user)</span><br><span class="line">	&#125;</span><br><span class="line">	log.Printf(<span class="string">&quot;query result =&gt; [%s]\n&quot;</span>, users)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="UPDATE操作"><a href="#UPDATE操作" class="headerlink" title="UPDATE操作"></a>UPDATE操作</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author KHighness</span></span><br><span class="line"><span class="comment"> * @since 2021-04-20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新用户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UpdateById</span><span class="params">(user User)</span></span>  &#123;</span><br><span class="line">	res, _ := MysqlDB.Exec(<span class="string">&quot;UPDATE user SET name = ?, age = ? WHERE id = ? &quot;</span>, user.Name, user.Age, user.Id)</span><br><span class="line">	lastInsertId, _ := res.LastInsertId()</span><br><span class="line">	rowsAffected, _ := res.RowsAffected()</span><br><span class="line">	log.Printf(<span class="string">&quot;更新ID =&gt; [%d], 影响行数 =&gt; [%d]&quot;</span>, lastInsertId, rowsAffected)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="DELETE操作"><a href="#DELETE操作" class="headerlink" title="DELETE操作"></a>DELETE操作</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author KHighness</span></span><br><span class="line"><span class="comment"> * @since 2021-04-20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除用户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DeleteById</span><span class="params">(id <span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">	res, _ := MysqlDB.Exec(<span class="string">&quot;DELETE FROM user WHERE id = ?&quot;</span>, id)</span><br><span class="line">	lastInsertId, _ := res.LastInsertId()</span><br><span class="line">	rowsAffected, _ := res.RowsAffected()</span><br><span class="line">	log.Printf(<span class="string">&quot;删除ID =&gt; [%d], 影响行数 =&gt; [%d]&quot;</span>, lastInsertId, rowsAffected)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author KHighness</span></span><br><span class="line"><span class="comment"> * @since 2021-04-20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 事务: 批量插入5个用户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BatchSaveUser</span><span class="params">(users [5]User)</span></span>  &#123;</span><br><span class="line">	<span class="comment">// 开始事务</span></span><br><span class="line">	tx, _ := MysqlDB.Begin()</span><br><span class="line">	<span class="keyword">var</span> total <span class="keyword">int64</span> = <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> _, user := <span class="keyword">range</span> users &#123;</span><br><span class="line">		res, _ := MysqlDB.Exec(<span class="string">&quot;INSERT INTO user(name, age) VALUES(?, ?)&quot;</span>, user.Name, user.Age)</span><br><span class="line">		aff, _ := res.RowsAffected()</span><br><span class="line">		total += aff</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 转字符串比较</span></span><br><span class="line">	<span class="keyword">if</span>  strconv.FormatInt(total, <span class="number">10</span>) == strconv.Itoa(<span class="built_in">len</span>(users)) &#123; 	<span class="comment">// 提交事务</span></span><br><span class="line">		_ = tx.Commit()</span><br><span class="line">		log.Print(<span class="string">&quot;事务提交&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123; <span class="comment">// 回滚</span></span><br><span class="line">		_ = tx.Rollback()</span><br><span class="line">		log.Print(<span class="string">&quot;事务回滚&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;go-mysql/db&quot;</span></span><br><span class="line">	<span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author KHighness</span><br><span class="line"> * @since <span class="number">2021</span><span class="literal">-04</span><span class="literal">-20</span></span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 测试查询</span><br><span class="line">func TestQueryById(t *testing.T) &#123;</span><br><span class="line">	db.QueryById(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 测试查询所有</span><br><span class="line">func TestQueryList(t *testing.T) &#123;</span><br><span class="line">	db.QueryList()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 测试保存</span><br><span class="line">func TestSaveUser(t *testing.T) &#123;</span><br><span class="line">	user := db.User&#123;Name: <span class="string">&quot;FlowerK&quot;</span>, Age: <span class="number">16</span>&#125;</span><br><span class="line">	db.SaveUser(user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 测试更新</span><br><span class="line">func TestUpdateById(t *testing.T)  &#123;</span><br><span class="line">	user := db.User&#123;Id: <span class="number">1</span>, Name: <span class="string">&quot;K&quot;</span>, Age: <span class="number">20</span>&#125;</span><br><span class="line">	db.UpdateById(user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 测试删除</span><br><span class="line">func TestDeleteById(t *testing.T)  &#123;</span><br><span class="line">	db.DeleteById(<span class="number">4</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 测试事务</span><br><span class="line">func TestBatchSaveUser(t *testing.T)  &#123;</span><br><span class="line">	var users [<span class="number">5</span>]db.User</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">		users[<span class="type">i</span>] = db.User&#123;Name: fmt.Sprintf(<span class="string">&quot;%s-%d&quot;</span>, <span class="string">&quot;K&quot;</span>, i + <span class="number">1</span>), Age: i + <span class="number">1</span>&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	db.BatchSaveUser(users)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang-Module</title>
    <url>/posts/58003/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p>modules的wiki: <a href="https://github.com/golang/go/wiki/Modules">https://github.com/golang/go/wiki/Modules</a></p>
<blockquote>
<p>go 1.14</p>
</blockquote>
<p>模块支持已经准备好用于生产，并且鼓励所有用户从其他依赖管理系统迁移到模块。</p>
<blockquote>
<p>go 1.16</p>
</blockquote>
<p>模块模式默认开启，即GO111MODULE=on。</p>
<h2 id="GO111MODULE"><a href="#GO111MODULE" class="headerlink" title="GO111MODULE"></a>GO111MODULE</h2><p>GO111MODULE有三个值：off、on和auto，不同版本的默认值不尽相同。</p>
<ol>
<li>off：go命令行将不会支持module功能，寻找依赖包的方式将会沿用旧版本通过vendor目录或者GOPATH模式查找。</li>
<li>on：go命令行会使用modules，而且一点也不会去GOPATH目录下查找。</li>
<li>auto：go命令行将会根据当前目录来决定是否启用module功能，分为两种情形：<ol>
<li>当前目录在$GOPATH/src之外且该目录包含go.mod文件</li>
<li>当前文件在包含go.mod文件的目录下面</li>
</ol>
</li>
</ol>
<p>说明：当modules 功能启用时，依赖包的存放位置变更为$GOPATH/pkg，允许同一个package多个版本并存，且多个项目可以共享缓存的 module。</p>
<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><p>golang提供了<code>go mod</code>命令来管理包，后置参数如下</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>download</td>
<td>下载依赖包</td>
</tr>
<tr>
<td>edit</td>
<td>编辑go.mod</td>
</tr>
<tr>
<td>graph</td>
<td>打印模块依赖图</td>
</tr>
<tr>
<td>init</td>
<td>在当前目录初始化mod</td>
</tr>
<tr>
<td>tidy</td>
<td>拉取缺少的模块，移除不用的模块</td>
</tr>
<tr>
<td>vendor</td>
<td>将依赖复制到vendor下</td>
</tr>
<tr>
<td>verify</td>
<td>验证依赖是否正确</td>
</tr>
<tr>
<td>why</td>
<td>解释为什么需要依赖</td>
</tr>
</tbody></table>
<h2 id="mod文件"><a href="#mod文件" class="headerlink" title="mod文件"></a>mod文件</h2><p>go.mod文件中提供了四个命令：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>module</td>
<td>指定包的名称</td>
</tr>
<tr>
<td>require</td>
<td>指定依赖项模块</td>
</tr>
<tr>
<td>replace</td>
<td>替换依赖项模块</td>
</tr>
<tr>
<td>exclude</td>
<td>忽略依赖项模块</td>
</tr>
</tbody></table>
<h2 id="项目案例"><a href="#项目案例" class="headerlink" title="项目案例"></a>项目案例</h2><p>环境：go 1.16.3</p>
<blockquote>
<p>创建项目</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> mkdir go<span class="literal">-mod</span> &amp;&amp; <span class="built_in">cd</span> go<span class="literal">-mod</span></span><br><span class="line"><span class="variable">$</span> go mod init hello</span><br><span class="line"><span class="variable">$</span> touch server.go</span><br><span class="line"><span class="variable">$</span> mkdir api &amp;&amp; <span class="built_in">cd</span> api</span><br><span class="line"><span class="variable">$</span> touch hello.go &amp;&amp; touch print.go</span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目结构</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">go<span class="literal">-mod</span></span><br><span class="line">├── go.mod</span><br><span class="line">├── server.go</span><br><span class="line">└── api</span><br><span class="line">    ├── hello.mod</span><br><span class="line">    └── print.go</span><br></pre></td></tr></table></figure>
<p>其中server需要调用api中的hello的<code>_HelloKHighness_</code>和print的<code>_ConsolePrint_</code>接口。</p>
<p>初始化的go-mod中内容如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">module hello</span><br><span class="line"></span><br><span class="line">go <span class="number">1.16</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>hello.go</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author KHighness</span></span><br><span class="line"><span class="comment"> * @since 2021-04-20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/labstack/echo&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HelloKHighness</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> c.JSON(http.StatusOK, <span class="string">&quot;Hello KHighness!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>print.go</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author KHighness</span></span><br><span class="line"><span class="comment"> * @since 2021-04-20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ConsolePrint</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Hello, KHighness!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>server.go</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author KHighness</span></span><br><span class="line"><span class="comment"> * @since 2021-04-20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/labstack/echo&quot;</span></span><br><span class="line">	helloAPI <span class="string">&quot;hello/api&quot;</span> </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	helloAPI.ConsolePrint()</span><br><span class="line">	e := echo.New()</span><br><span class="line">	e.GET(<span class="string">&quot;/&quot;</span>, helloAPI.HelloKHighness)</span><br><span class="line">	e.Logger.Fatal(e.Start(<span class="string">&quot;:3333&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>安装依赖</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> go mod tidy</span><br><span class="line">go: finding module <span class="keyword">for</span> package github.com/labstack/<span class="built_in">echo</span></span><br><span class="line">go: found github.com/labstack/<span class="built_in">echo</span> <span class="keyword">in</span> github.com/labstack/<span class="built_in">echo</span> v3.<span class="number">3.10</span>+incompatible</span><br><span class="line">go: finding module <span class="keyword">for</span> package github.com/stretchr/testify/assert</span><br><span class="line">go: finding module <span class="keyword">for</span> package github.com/labstack/gommon/color</span><br><span class="line">go: finding module <span class="keyword">for</span> package github.com/labstack/gommon/log</span><br><span class="line">go: finding module <span class="keyword">for</span> package golang.org/x/crypto/acme/autocert</span><br><span class="line">go: found github.com/labstack/gommon/color <span class="keyword">in</span> github.com/labstack/gommon v0.<span class="number">3.0</span></span><br><span class="line">go: found github.com/labstack/gommon/log <span class="keyword">in</span> github.com/labstack/gommon v0.<span class="number">3.0</span></span><br><span class="line">go: found golang.org/x/crypto/acme/autocert <span class="keyword">in</span> golang.org/x/crypto v0.<span class="number">0.0</span><span class="literal">-20210415154028</span><span class="literal">-4f45737414dc</span></span><br><span class="line">go: found github.com/stretchr/testify/assert <span class="keyword">in</span> github.com/stretchr/testify v1.<span class="number">7.0</span></span><br></pre></td></tr></table></figure>
<p>安装后可以看到go.mod文件如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module hello</span><br><span class="line"></span><br><span class="line">go 1.16</span><br><span class="line"></span><br><span class="line">require (</span><br><span class="line">	github.com&#x2F;labstack&#x2F;echo v3.3.10+incompatible</span><br><span class="line">	github.com&#x2F;labstack&#x2F;gommon v0.3.0 &#x2F;&#x2F; indirect</span><br><span class="line">	github.com&#x2F;stretchr&#x2F;testify v1.7.0 &#x2F;&#x2F; indirect</span><br><span class="line">	golang.org&#x2F;x&#x2F;crypto v0.0.0-20210415154028-4f45737414dc &#x2F;&#x2F; indirect</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行项目</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> go run server.go</span><br><span class="line">Hello, KHighness!</span><br><span class="line"></span><br><span class="line">   ____    __</span><br><span class="line">  / __/___/ /  ___</span><br><span class="line"> / _// __/ _ \/ _ \</span><br><span class="line">/___/\__/_//_/\___/ v3.<span class="number">3.10</span><span class="literal">-dev</span></span><br><span class="line">High performance, minimalist Go web framework</span><br><span class="line">https://echo.labstack.com</span><br><span class="line">____________________________________O/_______</span><br><span class="line">                                    O\</span><br><span class="line">⇨ http server started on [::]:<span class="number">3333</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目测试</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"> <span class="variable">$</span> <span class="built_in">curl</span> <span class="literal">-X</span> GET http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">3333</span></span><br><span class="line"><span class="string">&quot;Hello KHighness!&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目打包</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> go build</span><br></pre></td></tr></table></figure>
<p>打包后在项目根目录下可以看到hello.exe可执行文件。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>[1] modules wiki: <a href="https://github.com/golang/go/wiki/Modules">https://github.com/golang/go/wiki/Modules</a><br>[2] go mod 使用: <a href="https://juejin.cn/post/6844903798658301960">https://juejin.cn/post/6844903798658301960</a><br>[3] 再探go modules: <a href="https://www.cnblogs.com/apocelipes/p/10295096.html">https://www.cnblogs.com/apocelipes/p/10295096.html</a></p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>RMI &amp; RPC</title>
    <url>/posts/18721/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h2><p>Remote Method Invocation：远程方法调用</p>
<h3 id="调用过程"><a href="#调用过程" class="headerlink" title="调用过程"></a>调用过程</h3><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/18721/rmi.png" class="" title="rmi">

<ul>
<li>Client调用Client Stub上的方法</li>
<li>Client Stub将方法和参数进行序列化（编码）成可传输消息体</li>
<li>消息通过网络传输到Server</li>
<li>Server Stub将消息进行反序列化（解码）</li>
<li>Server根据解码结果调用方法，并将结果返回给Server Stub</li>
<li>Server Stub对返回结果进行序列化（编码）成可传输消息体</li>
<li>消息网络传输到Client</li>
<li>Client Stub对消息进行反序列化（解码）</li>
<li>Client Stub将解码结果返回给Client</li>
</ul>
<br>


<h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><p>Remote Procedure Call：远程过程调用</p>
<h3 id="框架组成"><a href="#框架组成" class="headerlink" title="框架组成"></a>框架组成</h3><ul>
<li>客户端（Client）：服务调用方</li>
<li>客户端存根（Client Stub）：存放服务端地址信息，将客户端的请求参数数据信息打包成网络消息，再通过网络传输发送给服务端</li>
<li>服务端存根（Server Stub）：接收客户端发送过来的请求消息并进行解包，然后再调用本地服务进行处理</li>
<li>服务端（Server）：服务的真正提供者</li>
<li>Network Service：底层传输，可以是 TCP 或 HTTP</li>
</ul>
<h3 id="调用过程-1"><a href="#调用过程-1" class="headerlink" title="调用过程"></a>调用过程</h3><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/18721/rpc.png" class="" title="rpc">

<ul>
<li>Client通过本地调用的方式调用服务</li>
<li>Client Stub接收到调用请求后负责将方法、参数等编码成可传输消息体</li>
<li>Client Stub找到远程的服务地址，并且将消息通过网络发送给Server</li>
<li>Server Stub收到消息后进行解码操作</li>
<li>Server Stub根据解码结果调用本地的服务进行相关处理</li>
<li>Server进行业务逻辑处理</li>
<li>Server将处理结果返回给Server Stub</li>
<li>Server Stub将返回结果进行编码</li>
<li>Server Stub将结果通过网络发送至消费方</li>
<li>Client Stub接收到消息，并进行解码</li>
<li>Client得到最终结果</li>
</ul>
<h3 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h3><ul>
<li>服务寻址</li>
<li>数据流的序列化和反序列化</li>
<li>网络传输</li>
</ul>
<br>


<h2 id="RPC-VS-PMI"><a href="#RPC-VS-PMI" class="headerlink" title="RPC VS PMI"></a>RPC VS PMI</h2><p>不同点：</p>
<p>（1）方法调用方式不同</p>
<p>RMI中是通过在客户端的Stub对象作为远程接口进行远程方法的调用。每个远程方法都具有方法签名。如果服务器上添加了一个可执行方法，但是没有相匹配的签名被添加到这个远程接口Stub对象上，那么这个新方法就不能被客户端调用。RPC是通过网络服务协议向远程主机发送请求，请求包含了一个参数集和文本值，通常形成”classname.methodname”的形式，服务器就去搜索与之相匹配的类和方法，找到后就执行方法并把结果编码，通过网络协议返回。</p>
<p>（2）使用语言范围不同</p>
<p>RMI是J2EE的13大规范之一，只适用于Java；RPC是网络协议，与操作系统和语言无关。</p>
<p>（3）调用结果的返回形式不同</p>
<p>RMI的调用结果可以是Java的对象类型或者基本数据类型；RPC的调用结果统一由外部数据表示。</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>RPC</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot-json</title>
    <url>/posts/22416/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>前言</p>
</blockquote>
<p>平日里项目中处理JSON一般用的都是阿里巴巴的fastjson，现在发现使用SpringBoot内置的Jackson的序列化和反序列化也挺方便的。Jackson不但可以完成简单的序列化和反序列化操作，也能实现复杂的个性化的序列化和反序列化操作。</p>
<p>——以上文案皆盗于鸟叔博客，勿怪勿怪。<br></p>
<blockquote>
<p>准备</p>
</blockquote>
<p>实体类User</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">3180230416244251692L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// NoArgsConstructor</span></span><br><span class="line">    <span class="comment">// AllArgsConstructor</span></span><br><span class="line">    <span class="comment">// Getter and Setter</span></span><br><span class="line">    <span class="comment">// ToString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="ObjectMapper-API"><a href="#ObjectMapper-API" class="headerlink" title="ObjectMapper API"></a>ObjectMapper API</h2><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/22416/objectmapper.png" class="" title="objectmapper">



<h2 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><p>序列化属性SerializationFeature</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WRAP_ROOT_VALUE(<span class="keyword">false</span>),                   </span><br><span class="line">INDENT_OUTPUT(<span class="keyword">false</span>),</span><br><span class="line">FAIL_ON_EMPTY_BEANS(<span class="keyword">true</span>),</span><br><span class="line">FAIL_ON_SELF_REFERENCES(<span class="keyword">true</span>),</span><br><span class="line">WRAP_EXCEPTIONS(<span class="keyword">true</span>),</span><br><span class="line">FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS(<span class="keyword">true</span>),</span><br><span class="line">CLOSE_CLOSEABLE(<span class="keyword">false</span>),</span><br><span class="line">FLUSH_AFTER_WRITE_VALUE(<span class="keyword">true</span>),</span><br><span class="line">WRITE_DATES_AS_TIMESTAMPS(<span class="keyword">true</span>),</span><br><span class="line">WRITE_DATE_KEYS_AS_TIMESTAMPS(<span class="keyword">false</span>),</span><br><span class="line">WRITE_DATES_WITH_ZONE_ID(<span class="keyword">false</span>),</span><br><span class="line">WRITE_DURATIONS_AS_TIMESTAMPS(<span class="keyword">true</span>),</span><br><span class="line">WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS(<span class="keyword">false</span>),</span><br><span class="line">WRITE_ENUMS_USING_TO_STRING(<span class="keyword">false</span>),</span><br><span class="line">WRITE_ENUMS_USING_INDEX(<span class="keyword">false</span>),</span><br><span class="line">WRITE_ENUM_KEYS_USING_INDEX(<span class="keyword">false</span>),</span><br><span class="line">WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED(<span class="keyword">false</span>),</span><br><span class="line">WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS(<span class="keyword">true</span>),</span><br><span class="line">ORDER_MAP_ENTRIES_BY_KEYS(<span class="keyword">false</span>),</span><br><span class="line">EAGER_SERIALIZER_FETCH(<span class="keyword">true</span>),</span><br><span class="line">USE_EQUALITY_FOR_OBJECT_ID(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>
<p>反序列化属性DeserializationFeature</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">USE_BIG_DECIMAL_FOR_FLOATS(<span class="keyword">false</span>),</span><br><span class="line">USE_BIG_INTEGER_FOR_INTS(<span class="keyword">false</span>),</span><br><span class="line">USE_LONG_FOR_INTS(<span class="keyword">false</span>),</span><br><span class="line">USE_JAVA_ARRAY_FOR_JSON_ARRAY(<span class="keyword">false</span>),</span><br><span class="line">FAIL_ON_UNKNOWN_PROPERTIES(<span class="keyword">true</span>),</span><br><span class="line">FAIL_ON_NULL_FOR_PRIMITIVES(<span class="keyword">false</span>),</span><br><span class="line">FAIL_ON_NUMBERS_FOR_ENUMS(<span class="keyword">false</span>),</span><br><span class="line">FAIL_ON_INVALID_SUBTYPE(<span class="keyword">true</span>),</span><br><span class="line">FAIL_ON_READING_DUP_TREE_KEY(<span class="keyword">false</span>),</span><br><span class="line">FAIL_ON_IGNORED_PROPERTIES(<span class="keyword">false</span>),</span><br><span class="line">FAIL_ON_UNRESOLVED_OBJECT_IDS(<span class="keyword">true</span>),</span><br><span class="line">FAIL_ON_MISSING_CREATOR_PROPERTIES(<span class="keyword">false</span>),</span><br><span class="line">FAIL_ON_NULL_CREATOR_PROPERTIES(<span class="keyword">false</span>),</span><br><span class="line">FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY(<span class="keyword">true</span>),</span><br><span class="line">FAIL_ON_TRAILING_TOKENS(<span class="keyword">false</span>),</span><br><span class="line">WRAP_EXCEPTIONS(<span class="keyword">true</span>),</span><br><span class="line">ACCEPT_SINGLE_VALUE_AS_ARRAY(<span class="keyword">false</span>),</span><br><span class="line">UNWRAP_SINGLE_VALUE_ARRAYS(<span class="keyword">false</span>),</span><br><span class="line">UNWRAP_ROOT_VALUE(<span class="keyword">false</span>),</span><br><span class="line">ACCEPT_EMPTY_STRING_AS_NULL_OBJECT(<span class="keyword">false</span>),</span><br><span class="line">ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT(<span class="keyword">false</span>),</span><br><span class="line">ACCEPT_FLOAT_AS_INT(<span class="keyword">true</span>),</span><br><span class="line">READ_ENUMS_USING_TO_STRING(<span class="keyword">false</span>),</span><br><span class="line">READ_UNKNOWN_ENUM_VALUES_AS_NULL(<span class="keyword">false</span>),</span><br><span class="line">READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE(<span class="keyword">false</span>),</span><br><span class="line">READ_DATE_TIMESTAMPS_AS_NANOSECONDS(<span class="keyword">true</span>),</span><br><span class="line">ADJUST_DATES_TO_CONTEXT_TIME_ZONE(<span class="keyword">true</span>),</span><br><span class="line">EAGER_DESERIALIZER_FETCH(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>



<h2 id="environment配置"><a href="#environment配置" class="headerlink" title="environment配置"></a>environment配置</h2><p>可配置</p>
<ul>
<li>spring.jackson.deserialization.<feature_name>=true|false</li>
<li>spring.jackson.generator.<feature_name>=true|false</li>
<li>spring.jackson.mapper.<feature_name>=true|false</li>
<li>spring.jackson.parser.<feature_name>=true|false</li>
<li>spring.jackson.serialization.<feature_name>=true|false</li>
<li>spring.jackson.serialization-inclusion=always|non_null|non_absent|non_default|non_empty</li>
</ul>
<p>application.yml：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="comment"># 日期格式化</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">    <span class="comment"># 设置空属性何如序列化</span></span><br><span class="line">    <span class="attr">default-property-inclusion:</span> <span class="string">non_empty</span></span><br><span class="line">    <span class="comment"># 序列化</span></span><br><span class="line">    <span class="attr">serialization:</span></span><br><span class="line">    <span class="comment"># 反序列化</span></span><br><span class="line">    <span class="attr">deserialization:</span></span><br><span class="line">    <span class="comment"># 解析    </span></span><br><span class="line">    <span class="attr">parser:</span> </span><br></pre></td></tr></table></figure>



<h2 id="configuration配置"><a href="#configuration配置" class="headerlink" title="configuration配置"></a>configuration配置</h2><p>在@Configuration类中生成bean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JacksonConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(ObjectMapper.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ObjectMapper <span class="title">objectMapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">// 序列化日期格式</span></span><br><span class="line">        objectMapper.setDateFormat(<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>));</span><br><span class="line">        <span class="comment">// 没有匹配的属性名称时不作处理</span></span><br><span class="line">        objectMapper.configure(MapperFeature.AUTO_DETECT_FIELDS, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        <span class="comment">//禁止序列化空值</span></span><br><span class="line">        objectMapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, <span class="keyword">false</span>);</span><br><span class="line">        objectMapper.configure(SerializationFeature.WRITE_ENUMS_USING_TO_STRING, <span class="keyword">true</span>);</span><br><span class="line">        objectMapper.configure(SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS, <span class="keyword">true</span>);</span><br><span class="line">        objectMapper.configure(SerializationFeature.FLUSH_AFTER_WRITE_VALUE, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 不包含空值属性</span></span><br><span class="line">        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_EMPTY);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        <span class="comment">//禁止遇到空原始类型时抛出异常，用默认值代替</span></span><br><span class="line">        objectMapper.configure(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES, <span class="keyword">false</span>);</span><br><span class="line">        objectMapper.configure(DeserializationFeature.READ_ENUMS_USING_TO_STRING, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 禁止遇到未知（新）属性时报错，支持兼容扩展</span></span><br><span class="line">        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="keyword">false</span>);</span><br><span class="line">        objectMapper.configure(DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES, <span class="keyword">false</span>);</span><br><span class="line">        objectMapper.configure(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT, <span class="keyword">true</span>);</span><br><span class="line">        objectMapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, <span class="keyword">true</span>);</span><br><span class="line">        objectMapper.configure(DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS, <span class="keyword">true</span>);</span><br><span class="line">        objectMapper.configure(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL, <span class="keyword">true</span>);</span><br><span class="line">        objectMapper.configure(DeserializationFeature.READ_ENUMS_USING_TO_STRING, <span class="keyword">true</span>);</span><br><span class="line">        objectMapper.configure(DeserializationFeature.READ_ENUMS_USING_TO_STRING, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> objectMapper;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Rest接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(UserController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 序列化接口</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;KHighness&quot;</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">return</span> objectMapper.writeValueAsString(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反序列化接口</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(<span class="meta">@RequestBody</span> String userJsonList)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = objectMapper.readValue(userJsonList, <span class="keyword">new</span> TypeReference&lt;List&lt;User&gt;&gt;() &#123;&#125;);</span><br><span class="line">        userList.forEach(e -&gt; &#123;log.info(e.toString());&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CURL测试（windows下建议使用cmd进行测试，用powershell会到导致POST错误）<br />序列化测试：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">curl</span> <span class="literal">-X</span> GET http://localhost:<span class="number">3333</span>/user/get</span><br></pre></td></tr></table></figure>
<p>序列化测试结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;id&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;KHighness&quot;</span>,<span class="attr">&quot;birth&quot;</span>:<span class="string">&quot;2021-04-15&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>反序列化测试：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">curl</span> <span class="literal">-H</span> <span class="string">&quot;Content-Type:application/json&quot;</span> <span class="literal">-X</span> POST -<span class="literal">-data</span> <span class="string">&quot;[&#123;\&quot;</span>id\<span class="string">&quot;:1, \&quot;</span>name\<span class="string">&quot;:\&quot;</span>Khighness\<span class="string">&quot;, \&quot;</span>birth\<span class="string">&quot;:\&quot;</span><span class="number">2001</span><span class="literal">-09</span><span class="literal">-11</span>\<span class="string">&quot;&#125;, &#123;\&quot;</span>id\<span class="string">&quot;:2, \&quot;</span>name\<span class="string">&quot;:\&quot;</span>FlowerK\<span class="string">&quot;, \&quot;</span>birth\<span class="string">&quot;:\&quot;</span><span class="number">2003</span><span class="literal">-07</span><span class="literal">-24</span>\<span class="string">&quot;&#125;]&quot;</span>  http://localhost:<span class="number">3333</span>/user/save</span><br></pre></td></tr></table></figure>
<p>反序列化测试结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[&#123;<span class="attr">&quot;id&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;Khighness&quot;</span>,<span class="attr">&quot;birth&quot;</span>:<span class="string">&quot;2001-09-11&quot;</span>&#125;,&#123;<span class="attr">&quot;id&quot;</span>:<span class="number">2</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;FlowerK&quot;</span>,<span class="attr">&quot;birth&quot;</span>:<span class="string">&quot;2003-07-24&quot;</span>&#125;]</span><br></pre></td></tr></table></figure>

<h2 id="Jackson注解"><a href="#Jackson注解" class="headerlink" title="Jackson注解"></a>Jackson注解</h2><p>（1）@JsonProperty<br>作用在属性上，用于序列化和反序列化时为JSON key指定一个别名。<br>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonProperty(&quot;bth&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Date birth;</span><br></pre></td></tr></table></figure>
<p>此时序列化测试结果为：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;id&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;KHighness&quot;</span>,<span class="attr">&quot;bth&quot;</span>:<span class="string">&quot;2021-04-16&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>（2）@JsonIgnore<br>作用在属性上，用于在序列化和反序列化时忽略此属性。<br>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonIgnore</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure>
<p>此时序列化测试结果为：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;id&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;birth&quot;</span>:<span class="string">&quot;2021-04-16&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>（3）@JsonIgnoreProperties<br>作用在类上，用于忽略一组属性。<br>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonIgnoreProperties(&#123;&quot;id&quot;, &quot;birth&quot;&#125;)</span></span><br></pre></td></tr></table></figure>
<p>此时序列化测试结果为：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;KHighness&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>（4）@JsonFormat<br>作用在日期属性上，用于格式化。<br>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy.MM.dd&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Date birth;</span><br></pre></td></tr></table></figure>
<p>此时序列化测试结果为：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;id&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;userName&quot;</span>:<span class="string">&quot;KHighness&quot;</span>,<span class="attr">&quot;birth&quot;</span>:<span class="string">&quot;2021.04.16&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>（5）@JsonNaming<br>作用在类上，用于指定一个命名策略。</p>
<p>Jackson自带了五种(两种)命名策略，使用方式，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonNaming(PropertyNamingStrategy.&lt;Strategy&gt;.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"> 	<span class="keyword">private</span> String userName;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>命名策略</th>
<th>中文描述</th>
<th>作用结果</th>
</tr>
</thead>
<tbody><tr>
<td>KebabCaseStrategy</td>
<td>中划线</td>
<td>user-name</td>
</tr>
<tr>
<td>SnakeCaseStrategy</td>
<td>下划线</td>
<td>user_name</td>
</tr>
<tr>
<td>UpperCamelCaseStrategy</td>
<td>大驼峰</td>
<td>UserName</td>
</tr>
<tr>
<td>LowerCaseStrategy</td>
<td>全小写</td>
<td>username</td>
</tr>
<tr>
<td>LowerDotCaseStrategy</td>
<td>小写点</td>
<td>user.name</td>
</tr>
</tbody></table>
<p>（6）@JsonSerialize<br>作用在类上，指定一个类来自定义序列化，该类必须实现<code>JsonSerializer</code>接口。<br>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserSerializer</span> <span class="keyword">extends</span> <span class="title">JsonSerializer</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(User user, JsonGenerator jsonGenerator, </span></span></span><br><span class="line"><span class="function"><span class="params">                          SerializerProvider serializerProvider)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        jsonGenerator.writeStartObject();</span><br><span class="line">        jsonGenerator.writeStringField(<span class="string">&quot;USER-NAME&quot;</span>, user.getUserName());</span><br><span class="line">        jsonGenerator.writeEndObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonSerialize(using = UserSerializer.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">3180230416244251692L</span>;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时序列化接口测试结果为：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;USER-NAME&quot;</span>:<span class="string">&quot;KHighness&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>（7）@JsonDeserialize<br>作用在类上，指定一个类来自定义反序列化，该类必须实现<code>JsonDeserializer</code>接口。<br>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDeserializer</span> <span class="keyword">extends</span> <span class="title">JsonDeserializer</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">deserialize</span><span class="params">(JsonParser jsonParser, DeserializationContext deserializationContext)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, JsonProcessingException </span>&#123;</span><br><span class="line">        JsonNode node = jsonParser.getCodec().readTree(jsonParser);</span><br><span class="line">        String userName = node.get(<span class="string">&quot;user-name&quot;</span>).asText();</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUserName(userName);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonDeserialize(using = UserDeserializer.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">3180230416244251692L</span>;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>反序列化测试：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">curl -H &quot;Content-Type:application/json&quot; -X POST --data &quot;[&#123;\&quot;user-name\&quot;:\&quot;Khighness\&quot;&#125;, &#123;\&quot;user-name\&quot;:\&quot;FlowerK\&quot;&#125;]&quot;  http://localhost:3333/user/save</span><br><span class="line">[&#123;<span class="attr">&quot;userName&quot;</span>:<span class="string">&quot;Khighness&quot;</span>&#125;,&#123;<span class="attr">&quot;userName&quot;</span>:<span class="string">&quot;FlowerK&quot;</span>&#125;]</span><br></pre></td></tr></table></figure>
<p>反序列化测试结果为：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[&#123;<span class="attr">&quot;userName&quot;</span>:<span class="string">&quot;Khighness&quot;</span>&#125;,&#123;<span class="attr">&quot;userName&quot;</span>:<span class="string">&quot;FlowerK&quot;</span>&#125;]</span><br></pre></td></tr></table></figure>

<p>（8）@JsonView<br>作用在类、属性和方法上，用来序列化组。<br>比如对于User对象，某些情况下只返回userName即可，</p>
<p>而某些情况下需要返回全部属性。因此User对象可以这样定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">3180230416244251692L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 仅包含userName</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserNameView</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 包含全部属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AllUserFieldView</span> <span class="keyword">extends</span> <span class="title">UserNameView</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonView(AllUserFieldView.class)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonView(UserNameView.class)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonView(AllUserFieldView.class)</span></span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在controller的方法上使用@JsonView，可以指定序列化组名。<br />使用组名UserNameView：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonView(User.UserNameView.class)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/get&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;KHighness&quot;</span>, <span class="keyword">new</span> Date());</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>序列化测试结果为：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;userName&quot;</span>:<span class="string">&quot;KHighness&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>当组名指定为<code>AllUserFieldView</code>时，序列化测试结果为：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;id&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;userName&quot;</span>:<span class="string">&quot;KHighness&quot;</span>,<span class="attr">&quot;birth&quot;</span>:<span class="string">&quot;2021-04-17&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<br>
参考：

<ul>
<li><a href="https://www.kancloud.cn/ahutchen/spring-boot-reference-guide/333370">自定义Jackson ObjectMapper</a></li>
<li><a href="https://mrbird.cc/Spring-Boot%20JSON.html">SpringBoot中的JSON技术</a></li>
</ul>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>Chartjs</title>
    <url>/posts/50163/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>前言</p>
</blockquote>
<p>四月了，水一篇博客吧，关于<code>hexo-tag-chart</code>插件的使用，文档只有一个案例，官方文档只给出<code>js</code>用法，至于怎么使用以及用到何种程度，就看自己的造化吧。</p>
<p>示例：<a href="https://shen-yu.gitee.io/2020/chartjs">沈宇大佬博客</a></p>
<p>文档：<a href="https://chartjs.bootcss.com/">中文官方文档</a></p>
<h3 id="每月明细"><a href="#每月明细" class="headerlink" title="每月明细"></a>每月明细</h3><div style="width: 80%;margin: 0 auto">
    <canvas id="chart5030" style="height: 120px"></canvas>
</div>
<script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script>
<script type="text/javascript">
    var ctx = document.getElementById('chart5030').getContext('2d');
    var options = {
    type: 'line',
    data: {
        labels: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],
        datasets: [{
        	label: '2020',
            borderColor: 'orange',
            backgroundColor: 'yellow',
			data: [0, 0, 0, 0, 0, 1, 0, 0, 1, 6, 5, 1], 
		},{
			label: '2021',
            borderColor: 'blue',
            backgroundColor: 'lightBlue',
			data: [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
		}]
    },
    options: {
        responsive: true,
        title: {
            display: true,
            text: '每月明细'
        }
    }
};;
    new Chart(ctx, options);
</script>



<a id="more"></a>




<h3 id="年度统计"><a href="#年度统计" class="headerlink" title="年度统计"></a>年度统计</h3><div style="width: 100%;margin: 0 auto">
    <canvas id="chart2440" style="height: 100px"></canvas>
</div>
<script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script>
<script type="text/javascript">
    var ctx = document.getElementById('chart2440').getContext('2d');
    var options = {
    type: 'polarArea',
    data: {
        labels: ['2020', '2021'],
        datasets: [{
            backgroundColor: ['orange', 'blue'],
			data: [14, 1], 
		}]
    },
    options: {
        responsive: true,
        title: {
            display: true,
            text: '博客统计'
        }
    }
};;
    new Chart(ctx, options);
</script>



<h3 id="能力雷达"><a href="#能力雷达" class="headerlink" title="能力雷达"></a>能力雷达</h3><div style="width: 100%;margin: 0 auto">
    <canvas id="chart5678" style="height: 100px"></canvas>
</div>
<script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script>
<script type="text/javascript">
    var ctx = document.getElementById('chart5678').getContext('2d');
    var options = {
    type: 'radar',
    data: {
        labels: ['Java', 'MySQL', 'Redis', 'Spring', 'SpringBoot', 'SpringCloud Alibaba', 'Vue', 'TCP/IP', 'OS'],
        datasets: [{
            label: '2020',
            fill: true,
            borderColor: 'rgb(253, 100, 131)',
			pointHoverBackgroundColor: 'red',
			data: [0.5, 0.4, 0.4, 0.1, 0.5, 0.2, 0.2, 0.5, 0.3]
		},
		{
			label: '2021',
			fill: true,
			borderColor: 'rgb(100, 147, 208)',
			pointHoverBackgroundColor: 'blue', 
			data: [0.7, 0.7, 0.5, 0.5, 0.7, 0.5, 0.1, 0.6, 0.2]
        }]
    },
    options: {
        responsive: true,
        title: {
            display: true,
            text: '能力雷达'
        }
    }
};;
    new Chart(ctx, options);
</script>

]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>Chartjs</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/posts/c24675b4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="MySQL概述"><a href="#MySQL概述" class="headerlink" title="MySQL概述"></a>MySQL概述</h2><h3 id="CentOS7安装"><a href="#CentOS7安装" class="headerlink" title="CentOS7安装"></a>CentOS7安装</h3><blockquote>
<p>下载RPM安装包</p>
</blockquote>
<p>下载: <a href="https://downloads.mysql.com/archives/community/">mysql download</a></p>
<p>将四个包下载后移动到opt文件夹下</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/c24675b4/image-20210314104200636.png" class="" title="s">



<a id="more"></a>



<blockquote>
<p>检查是否已安装MySQL</p>
</blockquote>
<p>如果没有信息显示则表示未安装MySQL</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rpm -qa | grep -i mysql</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>安装MySQL</p>
</blockquote>
<p><code>-i</code>：显示套件的文件列表</p>
<p><code>-v</code>：显示指令执行过程</p>
<p><code>-h</code>：套件安装时列出标记</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rpm -ivh &lt;包名&gt;</span></span><br></pre></td></tr></table></figure>

<p>安装顺序：</p>
<ol>
<li>common</li>
<li>libs</li>
<li>client</li>
<li>server</li>
</ol>
<p>依赖冲突：</p>
<p>直接卸载mariadb</p>
<p>详情如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@parak opt]# rpm -ivh mysql-community-common-8.0.20-1.el7.x86_64.rpm </span><br><span class="line">警告：mysql-community-common-8.0.20-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY</span><br><span class="line">准备中...                          ################################# [100%]</span><br><span class="line">正在升级/安装...</span><br><span class="line">   1:mysql-community-common-8.0.20-1.e################################# [100%]</span><br><span class="line">[root@parak opt]# rpm -ivh mysql-community-libs-8.0.20-1.el7.x86_64.rpm </span><br><span class="line">警告：mysql-community-libs-8.0.20-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY</span><br><span class="line">错误：依赖检测失败：</span><br><span class="line">	mariadb-libs 被 mysql-community-libs-8.0.20-1.el7.x86_64 取代</span><br><span class="line">[root@parak opt]# rpm -qa | grep mariadb</span><br><span class="line">mariadb-libs-5.5.68-1.el7.x86_64</span><br><span class="line">[root@parak opt]# rpm -e mariadb-libs-5.5.68-1.el7.x86_64</span><br><span class="line">错误：依赖检测失败：</span><br><span class="line">	libmysqlclient.so.18()(64bit) 被 (已安裝) postfix-2:2.10.1-9.el7.x86_64 需要</span><br><span class="line">	libmysqlclient.so.18(libmysqlclient_18)(64bit) 被 (已安裝) postfix-2:2.10.1-9.el7.x86_64 需要</span><br><span class="line">[root@parak opt]# rpm -e --nodeps mariadb-libs-5.5.68-1.el7.x86_64</span><br><span class="line">[root@parak opt]# rpm -ivh mysql-community-libs-8.0.20-1.el7.x86_64.rpm </span><br><span class="line">警告：mysql-community-libs-8.0.20-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY</span><br><span class="line">准备中...                          ################################# [100%]</span><br><span class="line">正在升级/安装...</span><br><span class="line">   1:mysql-community-libs-8.0.20-1.el7################################# [100%]</span><br><span class="line">[root@parak opt]# rpm -ivh mysql-community-client-8.0.20-1.el7.x86_64.rpm </span><br><span class="line">警告：mysql-community-client-8.0.20-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY</span><br><span class="line">准备中...                          ################################# [100%]</span><br><span class="line">正在升级/安装...</span><br><span class="line">   1:mysql-community-client-8.0.20-1.e################################# [100%]</span><br><span class="line">[root@parak opt]# rpm -ivh mysql-community-server-8.0.20-1.el7.x86_64.rpm </span><br><span class="line">警告：mysql-community-server-8.0.20-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY</span><br><span class="line">准备中...                          ################################# [100%]</span><br><span class="line">正在升级/安装...</span><br><span class="line">   1:mysql-community-server-8.0.20-1.e################################# [100%]</span><br></pre></td></tr></table></figure>



<blockquote>
<p>查看是否安装成功</p>
</blockquote>
<ul>
<li>方式一：查看mysql版本号<code>mysqladmin --version</code></li>
<li>方式二：查看是否创建了mysql用户(组)<code>cat /etc/passwd | grep mysql</code></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@parak opt]# mysqladmin --version</span><br><span class="line">mysqladmin  Ver 8.0.20 for Linux on x86_64 (MySQL Community Server - GPL)</span><br><span class="line">[root@parak opt]# cat /etc/passwd | grep mysql</span><br><span class="line">mysql:x:27:27:MySQL Server:/var/lib/mysql:/bin/false</span><br></pre></td></tr></table></figure>



<blockquote>
<p>启动MySQL服务</p>
</blockquote>
<ul>
<li>启动MySQL：<code>systemctl start mysqld</code></li>
<li>停止MySQL：<code>systemctl stop mysqld</code></li>
</ul>
<blockquote>
<p>登录MySQL</p>
</blockquote>
<p>两种方式：</p>
<ul>
<li>方式一：查看MySQL初始密码<code> cat /var/log/mysqld.log | grep password</code></li>
<li>方式二：修改<code>my.cnf</code>配置文件用于跳过密码，在<code>[mysqld]</code>下添加<code> skip-grant-tables</code></li>
</ul>
<p>推荐使用第一种，因为在MySQL8在跳过登录的状态下是不允许修改登录密码的。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 登录mysql</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysql -uroot -p</span></span><br><span class="line">Enter password:</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改校验密码策略等级</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysql&gt; <span class="built_in">set</span> global validate_password.policy=LOW;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置密码最小长度</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysql&gt; <span class="built_in">set</span> global validate_password.length=1;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 最后设置密码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY &lt;password&gt;;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>Navicat连接产生问题</p>
</blockquote>
<p>（1）HOST <IP> is not allowed to connect to this mysql server</p>
<p>解决：关闭防火墙，更新可连接IP</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看防火墙状态</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl status firewalld.service</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭防火墙</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl stop firewalld.service</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 禁止自启动</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">disable</span> firewalld.service</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 让所有IP都可以连接MySQL</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysql&gt; update user <span class="built_in">set</span> host=<span class="string">&#x27;%&#x27;</span> <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span>;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 刷新权限</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysql&gt; flush privileges;</span></span><br></pre></td></tr></table></figure>



<p>（2）Client does not support authentication protocol requested by server</p>
<p>解决：更改加密规则，更新用户密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">#更改加密方式</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysql&gt; ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;password&#x27;</span> PASSWORD EXPIRE NEVER; </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新用户密码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysql&gt; ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;&lt;password&gt;&#x27;</span>;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>设置开机自启动</p>
</blockquote>
<p>按照以上安装方式mysql服务是默认开机自启动的，可以通过<code>systemctl list-unit-files </code>查看开机启动项</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@parak mysql]# systemctl list-unit-files | grep mysql</span><br><span class="line">mysqld.service                                enabled </span><br><span class="line">mysqld@.service                               disabled</span><br></pre></td></tr></table></figure>

<p>如果不是开机自启动，可以通过<code>ntsysv</code>启用服务，<code>[]</code>中设置<code>*</code>即可使其开机自启动：</p>
<ul>
<li>上下键：可以在中间的方框当中，在各个服务之间移动</li>
<li>空格键：可以用来选择你所需要的服务，[*]表示开起启动</li>
<li>tab键：可以在方框、OK、Cancel之间移动</li>
<li>F1键：可以显示该服务的说明</li>
</ul>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/c24675b4/image-20210314131906998.png" class="" title="image-20210314131906998">



<h3 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h3><blockquote>
<p>拉取镜像</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull mysql:8.0.20</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>创建挂载的数据和配置文件夹</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir -p /home/mysql/data /home/mysql/conf</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>先启动MySQL容器</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --name mysql -d -p 3306:3306 \</span></span><br><span class="line">-e MYSQL_ROOT_PASSWORD=&lt;password&gt; mysql:8.0.20</span><br></pre></td></tr></table></figure>



<blockquote>
<p>进入容器查看配置文件位置</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it mysql bash</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysql --<span class="built_in">help</span> | grep my.cnf</span></span><br><span class="line">                      order of preference, my.cnf, $MYSQL_TCP_PORT,</span><br><span class="line">/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf </span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">exit</span></span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>将配置文件复制到挂载配置文件夹</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker cp mysql:/etc/mysql/my.cnf /home/mysql/conf</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>在配置文件中添加</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 表名称大小写不敏感</span></span><br><span class="line">lower_case_table_names=1</span><br></pre></td></tr></table></figure>



<blockquote>
<p>先停止并删除容器</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker stop mysql &amp;&amp; docker rm mysql</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>重新运行MySQL容器</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --name mysql \</span></span><br><span class="line">-d -p 3306:3306  \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=&lt;password&gt; \</span><br><span class="line">--mount type=bind,src=/home/mysql/conf/my.cnf,dst=/etc/mysql/my.cnf \</span><br><span class="line">--mount type=bind,src=/home/mysql/data,dst=/var/lib/mysql \</span><br><span class="line">--restart=on-failure:3 \</span><br><span class="line"> mysql:8.0.20</span><br></pre></td></tr></table></figure>



<blockquote>
<p>Navicat无法连接</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it mysql bash</span><br><span class="line">$ mysql -u root -p&lt;password&gt;</span><br><span class="line">$ ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;&lt;password&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure>



<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><blockquote>
<p>安装目录</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">路径</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">/var/lib/mysql/</td>
<td align="center">数据库文件的存放位置</td>
</tr>
<tr>
<td align="center">/usr/share/mysql-8.0/</td>
<td align="center">配置文件目录</td>
</tr>
<tr>
<td align="center">/usr/bin/</td>
<td align="center">相关命令目录</td>
</tr>
</tbody></table>
<blockquote>
<p>查看编码</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show variables like <span class="string">&#x27;character%&#x27;</span>;</span></span><br><span class="line">+--------------------------+--------------------------------+</span><br><span class="line">| Variable_name            | Value                          |</span><br><span class="line">+--------------------------+--------------------------------+</span><br><span class="line">| character_set_client     | utf8mb4                        |</span><br><span class="line">| character_set_connection | utf8mb4                        |</span><br><span class="line">| character_set_database   | utf8mb4                        |</span><br><span class="line">| character_set_filesystem | binary                         |</span><br><span class="line">| character_set_results    | utf8mb4                        |</span><br><span class="line">| character_set_server     | utf8mb4                        |</span><br><span class="line">| character_set_system     | utf8                           |</span><br><span class="line">| character_sets_dir       | /usr/share/mysql-8.0/charsets/ |</span><br><span class="line">+--------------------------+--------------------------------+</span><br></pre></td></tr></table></figure>

<p>可以看到，MySQL 8的默认编码格式除了文件系统是二进制编码以外，已经全部改为utf8和utf8mb4(拥有比utf8更好的兼容性)，因此我们不需要再修改。</p>
<p>注意：使用Navicat连接MySQL时编码应设置为自动，切勿设置为utf8，否则会中文乱码。</p>
<h3 id="逻辑架构"><a href="#逻辑架构" class="headerlink" title="逻辑架构"></a>逻辑架构</h3><blockquote>
<p>优势</p>
</blockquote>
<p>和其他数据库相比，MySQL有点与众不同，它的架构可以在多种不同场景中应用并发挥良好作用和。主要体现在存储引擎的架构上，插件式的存储引擎架构将查询处理和其他的系统任务以及数据的存储提取相分离。这种架构可以根据业务的需求和实际需要选择合适的存储引擎。</p>
<blockquote>
<p>图示</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/c24675b4/image-20210324110838854.png" class="" title="image-20210324110838854">



<blockquote>
<p>详解</p>
</blockquote>
<ul>
<li>连接层：最上层是一些客户端和连接服务，包含本地sock通信和大多数基于客户端/服务端工具实现的类似于TCP/IP通信。主要完成一些类似于连接处理、授权认证及相关的安全方案。在该层上引入了线程池的概念，未通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全连接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。</li>
<li>服务层：第二层架构主要完成大多数的核心功能，如SQL接口，并完成缓存的查询，SQL的分析和优化及部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如过程、函数等。在该层，服务器会解析查询并创建相应的内部解析树，并对其完成相应的优化如确定查询表的顺序，是否利用索引等，最后生成相应的执行操作。如果是select语句，服务器还会查询内部的缓存。如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。</li>
<li>引擎层：存储引擎层，存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API与存储引擎进行通信。不同的存储引擎具有的功能不同，这样我们可以根据自己的实际需要进行选取。</li>
<li>存储层：数据存储层，主要是将数据存储在运行于裸设备的文件系统之上，并完成与存储引擎的交互。</li>
</ul>
<h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><blockquote>
<p>查看存储引擎</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mysql&gt;show engines;</span></span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/c24675b4/image-20210314164337734.png" class="" title="image-20210314164337734">



<blockquote>
<p>MyISAM和InnoDB</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">对比项</th>
<th align="center">MyISAM</th>
<th align="center">InnoDB</th>
</tr>
</thead>
<tbody><tr>
<td align="center">主外键</td>
<td align="center">不支持</td>
<td align="center">支持</td>
</tr>
<tr>
<td align="center">事务</td>
<td align="center">不支持</td>
<td align="center">支持</td>
</tr>
<tr>
<td align="center">行表锁</td>
<td align="center">表锁，即使操作一条记录也会锁住整个表，不合适高并发的操作</td>
<td align="center">行锁，操作时只锁住某一行，不对其他行有影响，适合高并发的操作</td>
</tr>
<tr>
<td align="center">缓存</td>
<td align="center">只缓存索引，不缓存真实数据</td>
<td align="center">不仅缓存索引还要缓存真实数据，对内存要求较高，而且内存大小对性能有决定性的影响。</td>
</tr>
<tr>
<td align="center">表空间</td>
<td align="center">小</td>
<td align="center">大</td>
</tr>
<tr>
<td align="center">关注点</td>
<td align="center">性能</td>
<td align="center">事务</td>
</tr>
<tr>
<td align="center">默认安装</td>
<td align="center">Y</td>
<td align="center">Y</td>
</tr>
</tbody></table>
<blockquote>
<p>说明</p>
</blockquote>
<p>MySQL 8.0：不再支持查询缓存。</p>
<p>MySQL团队博客：<a href="https://mysqlserverteam.com/mysql-8-0-retiring-support-for-the-query-cache/">https://mysqlserverteam.com/mysql-8-0-retiring-support-for-the-query-cache/</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">尽管MySQL Query Cache旨在提高性能，但它存在严重的可伸缩性问题，并且很容易成为严重的瓶颈。</span><br><span class="line"></span><br><span class="line">自MySQL 5.6（2013）以来，默认情况下已禁用查询缓存，因为众所周知，它不能与多核计算机上在高吞吐量工作负载情况下进行扩展。</span><br><span class="line"></span><br><span class="line">我们考虑了可以对查询缓存进行哪些改进，以及我们可以进行的优化，这些优化可以改善所有工作负载。</span><br><span class="line"></span><br><span class="line">虽然这些选择本身是正交的，但工程资源是有限的。也就是说，我们正在转变战略，投资于更普遍适用于所有工作负载的改进。</span><br><span class="line"></span><br><span class="line">建议把缓存放到客户端。</span><br></pre></td></tr></table></figure>



<blockquote>
<p>Alibaba选择</p>
</blockquote>
<ul>
<li>Percona为MySQL数据库服务进行了改进，在功能和性能上较MySQL有着很显著的提升。该版本提升了在高负载情况下的InnoDB的性能、为DBA提供了一些非常有用的性能诊断工具；另外有更多的参数和命令来控制服务器行为。</li>
<li>阿里巴巴大部分MySQL数据库其实使用的时percona的原型加以修改。阿里新建了一款存储引擎叫xtradb完全可以替代innodb，并且在性能和并发上做得更好。</li>
</ul>
<h2 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h2><h3 id="索引简介"><a href="#索引简介" class="headerlink" title="索引简介"></a>索引简介</h3><blockquote>
<p>定义</p>
</blockquote>
<p>MySQL官方对索引的定义为：索引是帮助MySQL高效获取数据的数据结构。</p>
<p>可以得到索引的本质：索引是数据结构。</p>
<p>简单理解：排好序的快速查找数据结构。</p>
<p>一般来说索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储在磁盘上。</p>
<p>我们平常所说的索引，如果没有特别指明，都是指B树（多路搜索树，不一定是二叉树）结构的索引。</p>
<p>其中聚集索引，次要索引，复合索引，前缀索引，唯一索引默认都是使用B+树索引，统称索引。除了B+树这种类型的索引之外，还有哈希索引等。</p>
<blockquote>
<p>优势</p>
</blockquote>
<p>类似于大学图书馆建数目索引，提高数据检索的效率，降低数据库的IO成本。</p>
<p>通过索引列队数据进行排序，降低数据排序的成本，降低了CPU的消耗。</p>
<blockquote>
<p>劣势</p>
</blockquote>
<p>虽然索引大大提高了查询速度，同时会降低表的更新速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段，都会调整因为更新所带来的键值变化后的索引信息。</p>
<p>索引只是提高效率的一个因素，如果你的MySQL有大数据量的表，就需要花时间研究建立最优秀的索引，或优化查询。</p>
<h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><blockquote>
<p>单值索引</p>
</blockquote>
<p>一个索引列只包含单个列，一个表可以有多个索引。</p>
<blockquote>
<p>唯一索引</p>
</blockquote>
<p>索引列的值必须唯一，但允许有空值。</p>
<blockquote>
<p>复合索引</p>
</blockquote>
<p>一个索引包含多个列。</p>
<blockquote>
<p>覆盖索引</p>
</blockquote>
<p>SQL只需要通过索引就可以返回查询所需要的数据，而不必通过二级索引查到主键之后再去查询数据，即查询字段为索引字段。</p>
<blockquote>
<p>基本语法</p>
</blockquote>
<ul>
<li>创建</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE [UNIQUE] INDEX &lt;index_name&gt; ON &lt;table_name&gt;(&lt;column_name&gt;(length));</span><br><span class="line">ALTER &lt;table_name&gt; ADD [UNIQUE] INDEX &lt;index_name&gt; ON (&lt;column_name&gt;(length));</span><br></pre></td></tr></table></figure>

<ul>
<li>删除</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP INDEX &lt;index_name&gt; ON &lt;table_name&gt;;</span><br></pre></td></tr></table></figure>

<ul>
<li>查看</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">INDEX</span> <span class="keyword">FROM</span> &lt;table_name&gt;;</span><br></pre></td></tr></table></figure>

<ul>
<li>ALTER</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 添加主键，即唯一索引</span><br><span class="line">ALTER TABLE &lt;table_name&gt; PRIMARY KEY (column_list);</span><br><span class="line">-- 创建唯一索引</span><br><span class="line">ALTER TABLE &lt;table_name&gt; UNIQUE &lt;index_name&gt;(column_list);</span><br><span class="line">-- 添加普通索引</span><br><span class="line">ALTER TABLE &lt;table_name&gt; INDEX &lt;index_name&gt;(column_list);</span><br><span class="line">-- 指定全文索引</span><br><span class="line">ALTER TABLE &lt;table_name&gt; FULLTEXT index_name&gt;(column_list);</span><br></pre></td></tr></table></figure>



<h3 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h3><blockquote>
<p>索引</p>
</blockquote>
<ul>
<li>BTREE </li>
<li>HASH</li>
<li>FULL-TEXT</li>
<li>R-TREE</li>
</ul>
<blockquote>
<p>需要建立索引的情况</p>
</blockquote>
<ul>
<li>主键自动建立唯一索引</li>
<li>频繁作为查询条件的字段应该创建索引</li>
<li>查询中与其它表关联的字段，外键关系建立索引</li>
<li>频繁更新的字段不适合创建索引</li>
<li>Where条件里用不到的字段不创建索引</li>
<li>单值/组合索引的选择，在高并发下倾向创建组合索引</li>
<li>查询中排序的字段，排序字段若通过索引去访问将大大提高排序速度</li>
<li>查询中统计或者分组字段</li>
</ul>
<blockquote>
<p>不需要建立索引的情况</p>
</blockquote>
<ul>
<li>表记录太少  [原因：低于百万数的表MySQL还是扛得住的。]</li>
<li>经常增删改的表  [原因：提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。]</li>
<li>数据重复且分布均匀的表字段，因此应该只为最经常查询和最经常排序的数据列建立索引。注意，如果某个数据列包含许多重复的内容，为它建立索引就没有太大的实际效果  [例如：性别等字段。]</li>
</ul>
<h3 id="Join查询"><a href="#Join查询" class="headerlink" title="Join查询"></a>Join查询</h3><blockquote>
<p>join说明</p>
</blockquote>
<ul>
<li>LEFT JOIN：返回左表中的所有记录和右表中联结字段相等的记录。<ul>
<li>格式：<code>SELECT ... table1 LEFT JOIN table2 ON ...</code></li>
<li>说明：会取得table1全部记录，即使table2没有匹配记录</li>
</ul>
</li>
<li>RIGHT JOIN：返回右表中的所有记录和左表中联结字段相等的记录。<ul>
<li>格式：<code>SELECT ... table1 RIGHT JOIN table2 ON ...</code></li>
<li>说明：会取得table2全部记录，即使table1没有匹配记录</li>
</ul>
</li>
<li>INNER JOIN：只返回两个表中联结字段相等的记录。<ul>
<li>格式：<code>SELECT ... table1 INNER JOIN table2 ON ...</code></li>
<li>说明：会取得table1table2联结字段相等的记录</li>
</ul>
</li>
</ul>
<blockquote>
<p>join图示</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT &lt;select_list&gt; from table_a a LEFT JOIN table_b b ON a.key &#x3D; b.key</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/c24675b4/image-20210314221223407.png" class="" title="image-20210314221223407">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT &lt;select_list&gt; from table_a a LEFT JOIN table_b ON a.key &#x3D;&#x3D; b.key WHERE b.key is NULL</span><br></pre></td></tr></table></figure>



<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/c24675b4/image-20210314222433261.png" class="" title="image-20210314222433261">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT &lt;select_list&gt; from table_a a INNER JOIN table_b b ON a.key &#x3D; b.key</span><br></pre></td></tr></table></figure>



<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/c24675b4/image-20210314221536479.png" class="" title="image-20210314221536479">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT &lt;select_list&gt; from table_a a RIGHT JOIN table_b b ON a.key &#x3D; b.key</span><br></pre></td></tr></table></figure>



<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/c24675b4/image-20210314221440655.png" class="" title="image-20210314221440655">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT &lt;select_list&gt; from table_a a RIGHT JOIN table_b ON a.key &#x3D; b.key WHERE a.key is NULL</span><br></pre></td></tr></table></figure>


<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/c24675b4/image-20210314222235183.png" class="" title="image-20210314222235183">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Oracle支持 FULL OUTER JOIN，但是MySQL不支持</span><br><span class="line"># Oracle</span><br><span class="line">SELECT &lt;select_list&gt; FROM table_a a FULL OUTER JOIN table_b b ON a.key &#x3D; b.key</span><br><span class="line"># MySQL</span><br><span class="line">SELECT &lt;select_list&gt; from table_a a LEFT JOIN table_b b ON a.key &#x3D; b.key</span><br><span class="line">union</span><br><span class="line">SELECT &lt;select_list&gt; from table_a a RIGHT JOIN table_b b ON a.key &#x3D; b.key</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/c24675b4/image-20210314222826674.png" class="" title="image-20210314222826674">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Oracle</span><br><span class="line">SELECT &lt;select_list&gt; FROM table_a a FULL OUTER JOIN table_b b ON a.key &#x3D; b.key WHERE a.key is NULL or b.key is NULL</span><br><span class="line"># MySQL</span><br><span class="line">SELECT &lt;select_list&gt; from table_a a LEFT JOIN table_b b ON a.key &#x3D; b.key where b.id is null</span><br><span class="line">union</span><br><span class="line">SELECT &lt;select_list&gt; from table_a a RIGHT JOIN table_b b ON a.key &#x3D; b.key where a.id is null</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/c24675b4/image-20210314222858303.png" class="" title="image-20210314222858303">





<blockquote>
<p>SQL执行顺序</p>
</blockquote>
<ul>
<li>手写</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span></span><br><span class="line">	&lt;select_list&gt;</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	&lt;left_table&gt; &lt;join_table&gt;</span><br><span class="line"><span class="keyword">JOIN</span> &lt;right_table&gt; <span class="keyword">ON</span> &lt;join_condetion&gt;</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	&lt;where_condition&gt;</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">	&lt;group_by_list&gt;</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">	&lt;having_condition&gt;</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">	&lt;order_by_condition&gt;</span><br><span class="line"><span class="keyword">LIMIT</span> &lt;limit_number&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>机读</li>
</ul>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/c24675b4/image-20210314215216629.png" class="" title="image-20210314215216629">





<h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><blockquote>
<p>MySQL Query Optimizer</p>
</blockquote>
<p>MySQL中有专门负责优化SELECT语句的优化器模块，主要功能：通过计算分析系统中收集到的统计信息，为客户端请求的Query提供他认为最优的执行计划(它认为最优的数据检索方式，但不见得是DBA认为是最优的，这部分最耗费时间)<br>当客户端向MySQL请求一条Query，命令解析器模块完成请求分类，区别出是SELECT并转发给MySQL Query Optimizer时，MySQL Query Optimizer 首先会对整条Query进行优化，处理掉一些常量表达式的预算，直接换算成常量值。并对Query 中的查询条件进行简化和转换，如去掉一些无用或显而易见的条件、结构调整等。然后分析Query 中的Hint 信息(如果有)，看显示Hint信息是否可以完全确定该Query的执行计划。如果没有Hint或Hint信息还不足以完全确定执行计划，则会读取所涉及对象的统计信息，根据Query进行写相应的计算分析，然后再得出最后的执行计划。</p>
<blockquote>
<p>MySQL性能瓶颈</p>
</blockquote>
<p>CPU: CPU在饱和的时候一般发生在数据装入内存或从磁盘上读取数据的时候</p>
<p>IO: 磁盘I/O瓶颈发生在装入数据远大于内存容量的时候</p>
<p>服务器硬件的性能瓶颈：<code>top</code>、<code>free</code>、<code>iostat</code>、<code>vmstat</code>来查看系统的性能状态</p>
<blockquote>
<p>Explain</p>
</blockquote>
<p>官网介绍：<a href="https://dev.mysql.com/doc/refman/8.0/en/explain-output.html">https://dev.mysql.com/doc/refman/8.0/en/explain-output.html</a></p>
<p>使用目的：</p>
<ul>
<li>表的读取顺序</li>
<li>数据读取操作的操作类型</li>
<li>可以使用的索引</li>
<li>实际使用的索引</li>
<li>表之间的引用</li>
<li>每张表被优化器查询的行数</li>
</ul>
<p>使用方法：<code>explain + sql语句</code></p>
<blockquote>
<p>字段解释</p>
</blockquote>
<p>（1）id</p>
<p>解释：</p>
<p>select查询的序列号，包含一组数字，表示查询中执行的select子句或操作表的顺序。</p>
<p>说明：</p>
<ul>
<li>id相同，执行顺序由上至下；</li>
<li>id不同，如果是子查询，id递增，id值越大优先级越高，越先被执行；</li>
<li>id相同不同，同时存在，id如果相同，可以认为是一组，从上往下顺序执行，在所有组中，id值越大，优先级越高。</li>
</ul>
<p>（2）select_type</p>
<p>解释：</p>
<p>查询的类型：SIMPLE、PRIMARY、SUBQUERY、DERIVED、UNION、UNION RESULT。查询的类型，主要是用于区别普通查询、联合查询、子查询等的复杂查询。</p>
<p>说明：</p>
<ul>
<li>SIMPLE：简单的select查询，查询中不包含子查询或者UNION；</li>
<li>PRIMARY：查询中若包含任何复杂的子部分，最外层查询责则被标记为PRIMARY；</li>
<li>SUBQUERY：在SELECT或WHERE列表中包含了子查询；</li>
<li>DERIVED：在FROM列表中包含的子查询被标记为DERIVED(衍生)，MySQL会递归执行这些子查询，把结果放在临时表里；</li>
<li>UNION：若第二个SELECT出现在UNION之后，则被标记为UNION；若UNION包含在FROM子句的子查询中，外层SELECT将被被标记为：DERIVED；</li>
<li>UNION RESULT：从UNION表获取结果的SELECT。</li>
</ul>
<p>（3）table</p>
<p>解释：显示这一行数据是关于哪一张表的。</p>
<p>（4）type</p>
<p>解释：显示查询了何种类型。</p>
<p>说明：</p>
<p>从最好到最差依次是：<code>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</code>。</p>
<p>常见的是：<code>system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL</code>。</p>
<p>一般来说，得保证查询至少达到range级别，最好能到ref。</p>
<ul>
<li>system：表只有一行记录（等于系统表），这是const类型的特例，平时不会出现，这个也可以忽略不计。</li>
<li>const：表示通过索引一次就找到了，const用于比较primary key或者unique索引。因为只匹配一行数据，所以很快。如将主键置于where列表中，MySQL就能将该查询转换为一个常量。</li>
<li>eq_ref：唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配。常见于主键或唯一索引扫描。</li>
<li>ref：非唯一性索引扫描，返回匹配某个单独值的所有行。本质上也是一种索引访问，它返回所有匹配某个单独值的行，然而，它可能会找到多个符合条件的行，所以他应该属于查找和扫描的混合体。</li>
<li>range：只检索给定范围的行，使用一个索引来选择行。key列显示使用了哪个索引，一般就是在你的where语句中出现了between、&lt;、&gt;、in等的查询这种范围扫描索引会比全表扫描要好，因为它只需要开始于索引的某一点，而结束于另一点，不用扫描全部索引。</li>
<li>index：Full Index Scan，index与ALL区别为index类型只遍历索引树。这通常比ALL快，因为索引文件通常比数据文件小。（也就是说虽然ALL和index都是全表，但index是从索引出发的，而ALL是从硬盘读取的。）</li>
<li>ALL：Full Table Scan，将扫描全表以找到匹配的行。</li>
</ul>
<p>（5）possible_keys</p>
<p>解释：</p>
<p>显示可能应用在这张表中的索引，一个或多个。</p>
<p>查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询实际使用。</p>
<p>（6）key</p>
<p>解释：实际使用的索引。如果为NULL，则没有使用索引。查询中若使用了覆盖索引，则该索引仅出现在key列表中。</p>
<p>（7）key_len</p>
<p>解释：表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。在不损失精确性的情况下，长度越短越好。key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len时根据表定义计算而得，不是通过表内检索出的。</p>
<p>计算：</p>
<ul>
<li>字符串 <ul>
<li>char(n)：n字节长度</li>
<li>varchar(n)：2字节存储字符串长度，如果是utf-8，则长度 3n + 2</li>
</ul>
</li>
<li>数值类型 <ul>
<li>tinyint：1字节</li>
<li>smallint：2字节</li>
<li>int：4字节</li>
<li>bigint：8字节　　</li>
</ul>
</li>
<li>时间类型　 <ul>
<li>date：3字节</li>
<li>timestamp：4字节</li>
<li>datetime：8字节</li>
</ul>
</li>
<li>如果字段允许为 NULL，需要1字节记录是否为 NULL</li>
</ul>
<p>索引最大长度是768字节，当字符串过长时，mysql会做一个类似左前缀索引的处理，将前半部分的字符提取出来做索引。</p>
<p>（8）ref</p>
<p>解释：</p>
<p>显示索引的哪一列被使用了，如果可能的话，是一个常数。哪些列或常量被用于查找索引列上的值。</p>
<p>（9）rows</p>
<p>解释：</p>
<p>这一列是mysql估计要读取并检测的行数，注意这个不是结果集里的行数。</p>
<p>（10）extra</p>
<p>解释：</p>
<p>包含不适合在其他列中显示但十分重要的额外信息。</p>
<p>说明：</p>
<ul>
<li><code>using index</code>：这发生在对表的请求列都是同一索引的部分的时候，返回的列数据只使用了索引中的信息，而没有再去访问表中的行记录，是性能高的表现。如果同时出现using where，表明索引被用来执行索引键值的查找；如果没有同时出现using where，表明索引用来读取数据而非执行查找动作。</li>
<li><code>using filesort</code>：MySQL会对结果使用一个外部索引排序，而不是按索引次序从表里读取行。此时MySQL会根据联接类型浏览所有符合条件的记录，并保存排序关键字和行指针，然后排序关键字并按顺序检索行信息。这种情况一般是很危险的，九死一生。</li>
<li><code>using temporary</code>：MySQL需要创建一张临时表来处理查询，对于查询结果排序时使用临时表，常见于排序order by和分组查询group by。常见于这种情况就更加危险了，十死无生。</li>
<li><code>using where</code>：使用where过滤。</li>
<li><code>using join buffer</code>：使用连接缓存。</li>
<li><code>impossible where</code>：where子句总是false，不能用来获取任何元组。</li>
<li><code>select tables optimized away</code>：在没有GROUP BY子句的情况下，基于索引优化MIN/MAX或者对于MyISAM存储引擎优化COUNT(*)操作，不必等到执行阶段再进行计算，查询执行计划生成的阶段即完成优化。</li>
<li><code>distinct</code>：一旦MySQL找到了与行相联合匹配的行，就停止搜索。</li>
</ul>
<h3 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h3><blockquote>
<p>案例1</p>
</blockquote>
<p>建表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;tb2_article&#96; (</span><br><span class="line">  &#96;id&#96; int NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;author_id&#96; int NOT NULL,</span><br><span class="line">  &#96;category_id&#96; int NOT NULL,</span><br><span class="line">  &#96;views&#96; int NOT NULL,</span><br><span class="line">  &#96;comments&#96; int NOT NULL,</span><br><span class="line">  &#96;title&#96; varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,</span><br><span class="line">  &#96;content&#96; text NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;4 DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci;</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;tb2_article&#96; VALUES (1, 1, 1, 1, 1, &#39;1&#39;, &#39;1&#39;);</span><br><span class="line">INSERT INTO &#96;tb2_article&#96; VALUES (2, 2, 2, 2, 2, &#39;2&#39;, &#39;2&#39;);</span><br><span class="line">INSERT INTO &#96;tb2_article&#96; VALUES (3, 3, 3, 3, 3, &#39;3&#39;, &#39;3&#39;);</span><br></pre></td></tr></table></figure>

<p>第一次explain：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT id, author_id FROM tb2_article WHERE category_id &#x3D; 1 AND comments &gt; 1 order by views desc limit 1;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+-------------+-------------+------------+------+---------------+------+---------+------+------+----------+-----------------------------+</span><br><span class="line">| id | select_type | table       | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                       |</span><br><span class="line">+----+-------------+-------------+------------+------+---------------+------+---------+------+------+----------+-----------------------------+</span><br><span class="line">|  1 | SIMPLE      | tb2_article | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    2 |    50.00 | Using where; Using filesort |</span><br><span class="line">+----+-------------+-------------+------------+------+---------------+------+---------+------+------+----------+-----------------------------+</span><br></pre></td></tr></table></figure>

<p>建立索引：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE INDEX idx_article_ccv on tb2_article(category_id,comments, views);</span><br></pre></td></tr></table></figure>

<p>第二次explain：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT id, author_id FROM tb2_article WHERE category_id &#x3D; 1 AND comments &gt; 1 order by views desc limit 1;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+-------------+-------------+------------+-------+-----------------+-----------------+---------+------+------+----------+---------------------------------------+</span><br><span class="line">| id | select_type | table       | partitions | type  | possible_keys   | key             | key_len | ref  | rows | filtered | Extra                                 |</span><br><span class="line">+----+-------------+-------------+------------+-------+-----------------+-----------------+---------+------+------+----------+---------------------------------------+</span><br><span class="line">|  1 | SIMPLE      | tb2_article | NULL       | range | idx_article_ccv | idx_article_ccv | 8       | NULL |    1 |   100.00 | Using index condition; Using filesort |</span><br><span class="line">+----+-------------+-------------+------------+-------+-----------------+-----------------+---------+------+------+----------+---------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>发现key中已经显示了刚刚建立的索引，但是依然使用了文件排序。</p>
<p>第三次explain：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT id, author_id FROM tb2_article WHERE category_id &#x3D; 1 AND comments &#x3D; 1 order by views desc limit 1;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+-------------+-------------+------------+------+-----------------+-----------------+---------+-------------+------+----------+---------------------+</span><br><span class="line">| id | select_type | table       | partitions | type | possible_keys   | key             | key_len | ref         | rows | filtered | Extra               |</span><br><span class="line">+----+-------------+-------------+------------+------+-----------------+-----------------+---------+-------------+------+----------+---------------------+</span><br><span class="line">|  1 | SIMPLE      | tb2_article | NULL       | ref  | idx_article_ccv | idx_article_ccv | 8       | const,const |    1 |   100.00 | Backward index scan |</span><br><span class="line">+----+-------------+-------------+------------+------+-----------------+-----------------+---------+-------------+------+----------+---------------------+</span><br></pre></td></tr></table></figure>

<p>当把查询条件修改为等于时，发现ref中出现两个常量，即两个查询常量，并且没有使用文件排序。说明当查询条件为大于号时，索引失效。</p>
<p>浅析第二次加了索引之后explain依然使用<code>filesort</code>：</p>
<p>按照BTree的工作原理，先排序<code>category_id</code>，如果遇到相同的<code>category_id</code>则再排序<code>comments</code>，如果遇到相同的<code>commnents</code>则再排序<code>views</code>。当<code>comments</code>字段在联合索引里处于中间位置时，因<code>comments &gt; 1</code>条件是一个范围值(range)，MySQL无法利用索引再对后面的views部分进行检索，即range类型查询字段后面的索引无效。</p>
<p>删除索引：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP INDEX idx_article_ccv ON tb2_article;</span><br></pre></td></tr></table></figure>

<p>新建索引：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE INDEX idx_article_cv ON  tb2_article(category_id, views);</span><br></pre></td></tr></table></figure>

<p>再次explain：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT id, author_id FROM tb2_article WHERE category_id &#x3D; 1 AND comments &gt; 1 order by views desc limit 1;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+-------------+-------------+------------+------+----------------+----------------+---------+-------+------+----------+----------------------------------+</span><br><span class="line">| id | select_type | table       | partitions | type | possible_keys  | key            | key_len | ref   | rows | filtered | Extra                            |</span><br><span class="line">+----+-------------+-------------+------------+------+----------------+----------------+---------+-------+------+----------+----------------------------------+</span><br><span class="line">|  1 | SIMPLE      | tb2_article | NULL       | ref  | idx_article_cv | idx_article_cv | 4       | const |    1 |    50.00 | Using where; Backward index scan |</span><br><span class="line">+----+-------------+-------------+------------+------+----------------+----------------+---------+-------+------+----------+----------------------------------+</span><br></pre></td></tr></table></figure>

<p>可以看到type变成了<code>ref</code>，Extra中的<code>using filesort</code>也消失了，结果非常理想。</p>
<p>结论：建立复合索引的时候最好不要带上含有范围查询的字段。</p>
<blockquote>
<p>案例2</p>
</blockquote>
<p>继续建表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;tb2_class&#96; (</span><br><span class="line">  &#96;id&#96; int NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;card&#96; int NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;2 DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci;</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;tb2_book&#96; (</span><br><span class="line">  &#96;bookid&#96; int NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;card&#96; int NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;bookid&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci;</span><br><span class="line"></span><br><span class="line">INSERT INTO tb2_class(card) VALUES(FLOOR(1 + RAND() * 20));</span><br><span class="line">INSERT INTO tb2_book(card) VALUES(FLOOR(1 + RAND() * 20));</span><br></pre></td></tr></table></figure>

<p>第一次explain：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM tb2_class LEFT JOIN tb2_book on tb2_class.card &#x3D; tb2_book.card;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+</span><br><span class="line">| id | select_type | table     | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                      |</span><br><span class="line">+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+</span><br><span class="line">|  1 | SIMPLE      | tb2_class | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    9 |   100.00 | NULL                                       |</span><br><span class="line">|  1 | SIMPLE      | tb2_book  | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    9 |   100.00 | Using where; Using join buffer (hash join) |</span><br><span class="line">+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+</span><br></pre></td></tr></table></figure>

<p>可以看到type都为ALL。</p>
<p>建立右表tb2_book索引：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE tb2_book ADD INDEX(card);</span><br></pre></td></tr></table></figure>

<p>第二次explain：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM tb2_class LEFT JOIN tb2_book on tb2_class.card &#x3D; tb2_book.card;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+-------------+-----------+------------+------+---------------+------+---------+----------------------------+------+----------+-------------+</span><br><span class="line">| id | select_type | table     | partitions | type | possible_keys | key  | key_len | ref                        | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+-----------+------------+------+---------------+------+---------+----------------------------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | tb2_class | NULL       | ALL  | NULL          | NULL | NULL    | NULL                       |    9 |   100.00 | NULL        |</span><br><span class="line">|  1 | SIMPLE      | tb2_book  | NULL       | ref  | card          | card | 4       | mysql_learn.tb2_class.card |    1 |   100.00 | Using index |</span><br><span class="line">+----+-------------+-----------+------------+------+---------------+------+---------+----------------------------+------+----------+-------------+</span><br></pre></td></tr></table></figure>

<p>可以看到tb2_class的type依然是ALL，tb2_book的type优化为ref。</p>
<p>删除tb2_book的索引：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP INDEX card ON tb2_book;</span><br></pre></td></tr></table></figure>

<p>建立左表tb2_class索引：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE tb2_class ADD INDEX(card);</span><br></pre></td></tr></table></figure>

<p>第三次explain：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM tb2_class LEFT JOIN tb2_book on tb2_class.card &#x3D; tb2_book.card;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+-------------+-----------+------------+-------+---------------+------+---------+------+------+----------+--------------------------------------------+</span><br><span class="line">| id | select_type | table     | partitions | type  | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                      |</span><br><span class="line">+----+-------------+-----------+------------+-------+---------------+------+---------+------+------+----------+--------------------------------------------+</span><br><span class="line">|  1 | SIMPLE      | tb2_class | NULL       | index | NULL          | card | 4       | NULL |    9 |   100.00 | Using index                                |</span><br><span class="line">|  1 | SIMPLE      | tb2_book  | NULL       | ALL   | NULL          | NULL | NULL    | NULL |    9 |   100.00 | Using where; Using join buffer (hash join) |</span><br><span class="line">+----+-------------+-----------+------------+-------+---------------+------+---------+------+------+----------+--------------------------------------------+</span><br></pre></td></tr></table></figure>

<p>可以看到tb2_class的type为index，tb2_book的type下降为ALL。</p>
<p>最后再次建立tb2_book的索引：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE tb2_book ADD INDEX(card);</span><br></pre></td></tr></table></figure>

<p>第四次explain：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM tb2_class LEFT JOIN tb2_book on tb2_class.card &#x3D; tb2_book.card;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+-------------+-----------+------------+-------+---------------+------+---------+----------------------------+------+----------+-------------+</span><br><span class="line">| id | select_type | table     | partitions | type  | possible_keys | key  | key_len | ref                        | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+-----------+------------+-------+---------------+------+---------+----------------------------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | tb2_class | NULL       | index | NULL          | card | 4       | NULL                       |    9 |   100.00 | Using index |</span><br><span class="line">|  1 | SIMPLE      | tb2_book  | NULL       | ref   | card          | card | 4       | mysql_learn.tb2_class.card |    1 |   100.00 | Using index |</span><br><span class="line">+----+-------------+-----------+------------+-------+---------------+------+---------+----------------------------+------+----------+-------------+</span><br></pre></td></tr></table></figure>

<p>发现type都提升了，index和ref，结果很理想。</p>
<p>结论：对于JOIN连接查询的两张表最好都在联结字段建立单值索引。</p>
<blockquote>
<p>案例3</p>
</blockquote>
<p>继续建表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;tb2_phone&#96; (</span><br><span class="line">  &#96;phoneid&#96; int NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;card&#96; int DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;phoneid&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci;</span><br><span class="line"></span><br><span class="line">INSERT INTO tb2_phone(card) VALUES(FLOOR(1 + (RAND()*20)));</span><br></pre></td></tr></table></figure>

<p>第一次explain：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM tb2_class LEFT JOIN tb2_book ON tb2_class.card &#x3D; tb2_book.card LEFT JOIN tb2_phone ON tb2_book.card &#x3D; tb2_phone.card ;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+</span><br><span class="line">| id | select_type | table     | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                      |</span><br><span class="line">+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+</span><br><span class="line">|  1 | SIMPLE      | tb2_class | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    9 |   100.00 | NULL                                       |</span><br><span class="line">|  1 | SIMPLE      | tb2_book  | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    9 |   100.00 | Using where; Using join buffer (hash join) |</span><br><span class="line">|  1 | SIMPLE      | tb2_phone | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    9 |   100.00 | Using where; Using join buffer (hash join) |</span><br><span class="line">+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+</span><br></pre></td></tr></table></figure>

<p>发现三张表的type都是ALL。</p>
<p>建立tb2_phone和tb2_book的索引：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE tb2_phone INDEX(card);</span><br><span class="line">ALTER TABLE tb2_book ADD INDEX(card);</span><br></pre></td></tr></table></figure>

<p>第二次explain：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM tb2_class LEFT JOIN tb2_book ON tb2_class.card &#x3D; tb2_book.card LEFT JOIN tb2_phone ON tb2_book.card &#x3D; tb2_phone.card ;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+-------------+-----------+------------+------+---------------+------+---------+----------------------------+------+----------+-------------+</span><br><span class="line">| id | select_type | table     | partitions | type | possible_keys | key  | key_len | ref                        | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+-----------+------------+------+---------------+------+---------+----------------------------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | tb2_class | NULL       | ALL  | NULL          | NULL | NULL    | NULL                       |    9 |   100.00 | NULL        |</span><br><span class="line">|  1 | SIMPLE      | tb2_book  | NULL       | ref  | card          | card | 4       | mysql_learn.tb2_class.card |    1 |   100.00 | Using index |</span><br><span class="line">|  1 | SIMPLE      | tb2_phone | NULL       | ref  | card          | card | 5       | mysql_learn.tb2_book.card  |    1 |   100.00 | Using index |</span><br><span class="line">+----+-------------+-----------+------------+------+---------------+------+---------+----------------------------+------+----------+-------------+</span><br></pre></td></tr></table></figure>

<p>发现tb2_phone和tb2_book的type被优化为ref，并且rows也优化的很好。</p>
<p>结论：</p>
<ul>
<li><strong>永远用小结果集驱动大结果集</strong></li>
<li>尽可能减少Join语句中的NestedLoop的循环总次数</li>
<li>优先优化NestedLoop的内存循环</li>
<li>保证Join语句中被驱动表上Join条件字段已经被索引</li>
<li>当无法保证被驱动表的Join条件字段被索引且内存资源充足的前提下，不要太吝啬JoinBuffer的设置</li>
</ul>
<h3 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h3><blockquote>
<p>SQL脚本</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;tb3_staff&#96; (</span><br><span class="line">  &#96;id&#96; int NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;name&#96; varchar(20) DEFAULT NULL,</span><br><span class="line">  &#96;age&#96; int DEFAULT NULL,</span><br><span class="line">  &#96;pos&#96; varchar(20) DEFAULT NULL,</span><br><span class="line">  &#96;add_time&#96; timestamp NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;5 DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci;</span><br><span class="line"></span><br><span class="line">INSERT INTO tb3_staff(name, age, pos, add_time) VALUES ( &#39;KHighness&#39;, 19, &#39;manager&#39;, NOW());</span><br><span class="line">INSERT INTO tb3_staff(name, age, pos, add_time) VALUES ( &#39;FlowerK&#39;, 18, &#39;dev&#39;, NOW());</span><br><span class="line">INSERT INTO tb3_staff(name, age, pos, add_time) VALUES ( &#39;UnknownK&#39;, 17, &#39;dev&#39;, NOW());</span><br><span class="line"></span><br><span class="line">ALTER TABLE tb3_staff ADD INDEX id_staff_nameagepos(name, age, pos);</span><br></pre></td></tr></table></figure>



<blockquote>
<p>生效场景</p>
</blockquote>
<ul>
<li><code>EXPLAIN SELECT * FROM tb3_staff WHERE name = &#39;KHighness&#39;;</code></li>
<li><code>EXPLAIN SELECT * FROM tb3_staff WHERE name = &#39;KHighness&#39; and age = 19;</code></li>
<li><code>EXPLAIN SELECT * FROM tb3_staff WHERE name = &#39;KHighness&#39; and age = 19 and pos = &quot;dev&quot;;</code></li>
</ul>
<blockquote>
<p>失效场景</p>
</blockquote>
<ul>
<li><code>EXPLAIN SELECT * FROM tb3_staff WHERE age = 19 and pos = &quot;dev&quot;;</code></li>
<li> <code>EXPLAIN SELECT * FROM tb3_staff WHERE  pos = &quot;dev&quot;;</code></li>
</ul>
<blockquote>
<p>部分失效</p>
</blockquote>
<ul>
<li><code>EXPLAIN SELECT * FROM tb3_staff WHERE name = &#39;KHighness&#39; and pos = &quot;dev&quot;;</code></li>
</ul>
<blockquote>
<p>总结</p>
</blockquote>
<p>1、最理想的情况就是查询字段与索引字段相同</p>
<p>2、最佳左前缀法则</p>
<p>3、不在索引列上做任何操作（计算、函数、（自动or手动）类型转换），会导致索引失效而转向全表扫描</p>
<p>4、存储引擎不能使用索引中范围条件右边的列</p>
<p>5、尽量使用覆盖索引（只访问索引的查询（索引列和查询列一致）），减少select *</p>
<p>6、使用不等于(!= 或者 &lt;&gt;)的时候索引失效会导致range（MySQL5中是ALL）</p>
<p>7、使用is null或者is not null的时候索引失效会导致range（MySQL5中是ALL）</p>
<p>8、like以通配符开头索引失效会导致ALL，建立覆盖索引可以防止</p>
<p>9、MySQL5中字符串不加单引号索引失效会导致ALL，MySQL8中直接报错</p>
<p>10、使用or连接索引失效会导致ALL</p>
<h3 id="索引面试"><a href="#索引面试" class="headerlink" title="索引面试"></a>索引面试</h3><blockquote>
<p>SQL语句</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;tb4_test&#96; (</span><br><span class="line">  &#96;id&#96; int NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;c1&#96; char(10) DEFAULT NULL,</span><br><span class="line">  &#96;c2&#96; char(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,</span><br><span class="line">  &#96;c3&#96; char(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,</span><br><span class="line">  &#96;c4&#96; char(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,</span><br><span class="line">  &#96;c5&#96; char(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci;</span><br><span class="line"></span><br><span class="line">CREATE INDEX idx_tb4_test_c1234 ON tb4_test(c1, c2, c3, c4);</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;mysql_learn&#96;.&#96;tb4_test&#96;(&#96;id&#96;, &#96;c1&#96;, &#96;c2&#96;, &#96;c3&#96;, &#96;c4&#96;, &#96;c5&#96;) VALUES (1, &#39;a1&#39;, &#39;a2&#39;, &#39;a3&#39;, &#39;a4&#39;, &#39;a5&#39;);</span><br><span class="line">INSERT INTO &#96;mysql_learn&#96;.&#96;tb4_test&#96;(&#96;id&#96;, &#96;c1&#96;, &#96;c2&#96;, &#96;c3&#96;, &#96;c4&#96;, &#96;c5&#96;) VALUES (2, &#39;b1&#39;, &#39;b2&#39;, &#39;b3&#39;, &#39;b4&#39;, &#39;b5&#39;);</span><br><span class="line">INSERT INTO &#96;mysql_learn&#96;.&#96;tb4_test&#96;(&#96;id&#96;, &#96;c1&#96;, &#96;c2&#96;, &#96;c3&#96;, &#96;c4&#96;, &#96;c5&#96;) VALUES (3, &#39;c1&#39;, &#39;c2&#39;, &#39;c3&#39;, &#39;c4&#39;, &#39;c5&#39;);</span><br><span class="line">INSERT INTO &#96;mysql_learn&#96;.&#96;tb4_test&#96;(&#96;id&#96;, &#96;c1&#96;, &#96;c2&#96;, &#96;c3&#96;, &#96;c4&#96;, &#96;c5&#96;) VALUES (4, &#39;d1&#39;, &#39;d2&#39;, &#39;d3&#39;, &#39;d4&#39;, &#39;d5&#39;);</span><br><span class="line">INSERT INTO &#96;mysql_learn&#96;.&#96;tb4_test&#96;(&#96;id&#96;, &#96;c1&#96;, &#96;c2&#96;, &#96;c3&#96;, &#96;c4&#96;, &#96;c5&#96;) VALUES (5, &#39;e1&#39;, &#39;e2&#39;, &#39;e3&#39;, &#39;e4&#39;, &#39;e5&#39;);</span><br></pre></td></tr></table></figure>



<blockquote>
<p>EXPLAIN测试</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 最好索引如何创建就如何使用，避免让MySQL自己再翻译优化 --</span><br><span class="line"></span><br><span class="line">-- 1. 用到索引c1 c2 c3 c4全字段，全值匹配</span><br><span class="line">EXPLAIN SELECT * FROM tb4_test WHERE c1 &#x3D; &#39;a1&#39; AND c2 &#x3D; &#39;a2&#39; AND c3 &#x3D; &#39;a3&#39; AND c4 &#x3D; &#39;a4&#39;;</span><br><span class="line"></span><br><span class="line">-- 2. 用到索引c1 c2 c3 c4全字段，查询优化器会优化SQL语句的执行顺序</span><br><span class="line">EXPLAIN SELECT * FROM tb4_test WHERE c4 &#x3D; &#39;a4&#39; AND c3 &#x3D; &#39;a3&#39; AND c2 &#x3D; &#39;a2&#39; AND c1 &#x3D; &#39;a1&#39;;</span><br><span class="line"></span><br><span class="line">-- 3. 用到索引c1 c2 c3字段，c4字段失效，范围之后全失效</span><br><span class="line">EXPLAIN SELECT * FROM tb4_test WHERE c1 &#x3D; &#39;a1&#39; AND c2 &#x3D; &#39;a2&#39; AND c3 &gt; &#39;a3&#39; AND c4 &#x3D; &#39;a4&#39;;</span><br><span class="line"></span><br><span class="line">-- 4. 用到索引c1 c2 c3 c4全字段，查询优化器会优化SQL语句的执行顺序</span><br><span class="line">EXPLAIN SELECT * FROM tb4_test WHERE c1 &#x3D; &#39;a1&#39; AND c2 &#x3D; &#39;a2&#39; AND c4 &gt; &#39;a4&#39; AND c3 &#x3D; &#39;a3&#39;;</span><br><span class="line"></span><br><span class="line">-- order by排序一定要注意顺序，这个顺序MySQL不会自动优化 --</span><br><span class="line"></span><br><span class="line">-- 5. 用到索引c1 c2 c3字段，c1 c2用于查找，c3用于排序，但是没有统计到key_len中，c4字段失效</span><br><span class="line">EXPLAIN SELECT * FROM tb4_test WHERE c1 &#x3D; &#39;a1&#39; AND c2 &#x3D; &#39;a2&#39; AND c4 &gt; &#39;a4&#39; ORDER BY c3;</span><br><span class="line"></span><br><span class="line">-- 6. 用到索引c1 c2字段，c1 c2用于查找，c4排序产生了Using filesort说明c4失效</span><br><span class="line">EXPLAIN SELECT * FROM tb4_test WHERE c1 &#x3D; &#39;a1&#39; AND c2 &#x3D; &#39;a2&#39; ORDER BY c4;</span><br><span class="line"></span><br><span class="line">-- 7. 用到索引c1 c2 c3字段，c1用于查找，c2 c3用于排序</span><br><span class="line">EXPLAIN SELECT * FROM tb4_test WHERE c1 &#x3D; &#39;a1&#39; AND c5 &#x3D; &#39;a5&#39; ORDER BY c2, c3;</span><br><span class="line"></span><br><span class="line">-- 8. 用到索引c1字段，c1用于查找，c3 c2失效，产生了Using filesort</span><br><span class="line">EXPLAIN SELECT * FROM tb4_test WHERE c1 &#x3D; &#39;a1&#39; AND c5 &#x3D; &#39;a5&#39; ORDER BY c3, c2;</span><br><span class="line"></span><br><span class="line">-- 9. 用到索引c1 c2 c3字段，c1 c2用于查找，c2 c3用于排序</span><br><span class="line">EXPLAIN SELECT * FROM tb4_test WHERE c1 &#x3D; &#39;a1&#39; AND c2 &#x3D; &#39;a2&#39; AND c5 &#x3D; &#39;a5&#39; ORDER BY c2, c3;</span><br><span class="line"></span><br><span class="line">-- 10. 用到索引c1 c2 c3字段，c1 c2用于查找，c3才用于排序</span><br><span class="line">--     没有产生Using filesort，因为c2查找时已经确定了，排序时c2已经不用排序了</span><br><span class="line">EXPLAIN SELECT * FROM tb4_test WHERE c1 &#x3D; &#39;a1&#39; AND c2 &#x3D; &#39;a2&#39; AND c5 &#x3D; &#39;a5&#39; ORDER BY c3, c2;</span><br><span class="line"></span><br><span class="line">-- group by虽然是分组，但是分组之前必然排序 --</span><br><span class="line"></span><br><span class="line">-- 11. 用到索引c1 c2 c3字段，c1用于查找，c2 c3用于排序，c4失效</span><br><span class="line">EXPLAIN SELECT * FROM tb4_test WHERE c1 &#x3D; &#39;a1&#39; AND c4 &#x3D; &#39;a4&#39; GROUP BY c2, c3;</span><br><span class="line"></span><br><span class="line">-- 12. 用到索引c1字段，c1用于查找，c2 c3失效，产生了Using temporary</span><br><span class="line">EXPLAIN SELECT * FROM tb4_test WHERE c1 &#x3D; &#39;a1&#39; AND c4 &#x3D; &#39;a4&#39; GROUP BY c3, c2;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>总结</p>
</blockquote>
<ul>
<li>定值、范围还是排序，一般order by是给个范围。</li>
<li>group by基本上都需要进行排序，会有临时表产生。</li>
<li>like匹配%在字符串最右边会使用使用，%在字符串最左边不会使用。</li>
</ul>
<blockquote>
<p>一般性建议</p>
</blockquote>
<ul>
<li><p>对于单键索引，尽量选择针对当前query过滤性更好的索引。</p>
</li>
<li><p>在选择组合索引的时候，当前query中过滤性最好的字段在索引字段顺序中，位置越靠前越好。</p>
</li>
<li><p>在选择组合索引的时候，尽量选择可以能够包含当前query中的where子句中更多字段的索引。</p>
</li>
<li><p>尽可能通过分析统计信息和调整query的写法来达到选择合适索引的目的。</p>
</li>
</ul>
<blockquote>
<p>优化口诀</p>
</blockquote>
<p>带头大哥不能死，中间兄弟不能断；</p>
<p>覆盖索引不写星，索引列上少计算；</p>
<p>不等有时会失效，范围之后全失效；</p>
<p>LIKE百分写最右，一般SQL少用OR。</p>
<h2 id="查询截取"><a href="#查询截取" class="headerlink" title="查询截取"></a>查询截取</h2><h3 id="查询优化-1"><a href="#查询优化-1" class="headerlink" title="查询优化-1"></a>查询优化-1</h3><blockquote>
<p>优化策略</p>
</blockquote>
<p>永远小表驱动大表。</p>
<blockquote>
<p>IN</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM A WHERE id IN (SELECT id FROM B)</span><br></pre></td></tr></table></figure>

<p>等价于：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for select id from B</span><br><span class="line">	for select * from A where A.id &#x3D; B.id</span><br></pre></td></tr></table></figure>

<p>当A表的数据集大于B表的数据集时，用in优先exists。</p>
<blockquote>
<p>EXISTS</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM A WHERE EXISTS (SELECT 1 FROM B WHERE B.id &#x3D; A.id)</span><br></pre></td></tr></table></figure>

<p>等价于</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for select id from A</span><br><span class="line">	for select * from B &#x3D; B.id &#x3D; A.id</span><br></pre></td></tr></table></figure>

<p>当A表的数据集小于B表的数据集时，用exists优先in。</p>
<h3 id="查询优化-2"><a href="#查询优化-2" class="headerlink" title="查询优化-2"></a>查询优化-2</h3><blockquote>
<p>优化策略</p>
</blockquote>
<p>Order By关键字优化：</p>
<p>Order By子句，尽量使用Index方式排序，避免使用FileSort方式排序。</p>
<p>尽可能在索引列上完成排序操作，遵照索引建的最佳左前缀。</p>
<p>如果不在索引列上，FileSort有两种算法：MySQL就要启动双路排序和单路排序。</p>
<blockquote>
<p>案例</p>
</blockquote>
<p>SQL脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;tb5_a&#96; (</span><br><span class="line">  &#96;age&#96; int NOT NULL,</span><br><span class="line">  &#96;birth&#96; timestamp NOT NULL</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci;</span><br><span class="line"></span><br><span class="line">INSERT INTO tb5_a(age, birth) VALUES(17, NOW());</span><br><span class="line">INSERT INTO tb5_a(age, birth) VALUES(18, NOW());</span><br><span class="line">INSERT INTO tb5_a(age, birth) VALUES(19, NOW());</span><br><span class="line"></span><br><span class="line">CREATE INDEX idx_a_agebirth ON tb5_a(age, birth);</span><br></pre></td></tr></table></figure>

<p>八个case：</p>
<ul>
<li><code>EXPLAIN SELECT * FROM tb5_a WHERE age &gt; 20 ORDER BY age;</code> =&gt; 正常</li>
<li><code>EXPLAIN SELECT * FROM tb5_a WHERE age &gt; 20 ORDER BY birth;</code> =&gt; using filesort</li>
<li><code>EXPLAIN SELECT * FROM tb5_a WHERE age &gt; 20 ORDER BY age, birth;</code> =&gt; 正常</li>
<li><code> EXPLAIN SELECT * FROM tb5_a WHERE age &gt; 20 ORDER BY birth，age;</code> =&gt; using filesprt</li>
<li><code>EXPLAIN SELECT * FROM tb5_a WHERE birth &gt; &#39;2020-3:23 00:00:00&#39; ORDER BY age;</code> =&gt; 正常</li>
<li><code>EXPLAIN SELECT * FROM tb5_a WHERE birth &gt; &#39;2020-3:23 00:00:00&#39; ORDER BY birth;</code> =&gt; using filesort</li>
<li><code>EXPLAIN SELECT * FROM tb5_a WHERE birth &gt; &#39;2020-3:23 00:00:00&#39; ORDER BY age,birth;</code> =&gt; 正常</li>
<li><code>EXPLAIN SELECT * FROM tb5_a WHERE birth &gt; &#39;2020-3:23 00:00:00&#39; ORDER BY birth,age;</code> =&gt; using filesort</li>
<li><code>EXPLAIN SELECT * FROM tb5_a ORDER BY age ASC,birth ASC;</code> =&gt; 正常</li>
<li><code>EXPLAIN SELECT * FROM tb5_a ORDER BY age DESC,birth DESC;</code> =&gt; 正常</li>
<li><code>EXPLAIN SELECT * FROM tb5_a ORDER BY age ASC,birth DESC;</code> =&gt; using filesort</li>
<li><code>EXPLAIN SELECT * FROM tb5_a ORDER BY age DESC,birth ASC;</code> =&gt; using filesort</li>
</ul>
<blockquote>
<p>总结</p>
</blockquote>
<p>总结：Order By满足两种情况，会使用Index方式排序：</p>
<ul>
<li>Order By语句使用索引最左前列</li>
<li>使用Where子句与Order By子句条件列组合满足索引最左前列</li>
</ul>
<p>注意：如果不在索引列上，filesort有两种算法：</p>
<ul>
<li>双路排序：两次扫描磁盘获取数据，读取行指针和order by列，对它们进行排序，然后扫描已经排序号的列表，按照列表中的值重新从列表中读取对应的数据输出。</li>
<li>单路排序：从磁盘读取查询需要的所有列，按照order by列在buffer对它们进行排序，然后扫描排序后的列表进行输出，它的效率更快一些，避免了第二次读取数据。并且把随机IO变成了顺序IO，但是它会使用更多的空间，因为它把每一行都保存在内存中了。</li>
<li>单路问题：在单路排序中，要占用很多空间，因为需要把所有字段都取出，所以有可能取出的数据的总大小超出了sort_buffer的容量，导致每次只能取sort_buffer容量大小的数据，进行排序（创建tmp文件，多路合并），排完再取sort_buffer容量大小，再排，从而导致多次I/O。</li>
<li>优化策略：SQL服务器参数调优，增大sort_buffer_size参数的设置，增大max_length_for_sort_data参数的设置。</li>
</ul>
<p>提高Order By的速度：</p>
<p>（1）Order By时select *是一个大忌，只查询需要字段，这点非常重要。</p>
<p>（2）尝试提高sort_buffer_size。</p>
<p>（3）尝试提高max_length_for_sort_data。</p>
<blockquote>
<p>排序案例</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">index a_b_c(a, b, c);</span><br><span class="line"></span><br><span class="line">-- 使用索引最左前缀</span><br><span class="line">ORDER BY a</span><br><span class="line">ORDER BY a, b</span><br><span class="line">ORDER BY a, b, c</span><br><span class="line">ORDER BY a DESC, b DESC, c DESC</span><br><span class="line"></span><br><span class="line">-- WHERE使用索引的最左前缀定义为常量</span><br><span class="line">WHERE a &#x3D; const ORDER BY b, c</span><br><span class="line">WHERE a &#x3D; const AND b &#x3D; const ORDER BY c</span><br><span class="line">WHERE a &#x3D; const ORDER BY b, c</span><br><span class="line">WHERE a &#x3D; count AND b &gt; const ORDER BY b, c</span><br><span class="line"></span><br><span class="line">-- 不能使用户索引进行排序</span><br><span class="line">ORDER BY a ASC, b DESC, c DESC  -- 排序不一致</span><br><span class="line">WHERE g &#x3D; const ORDER BY b, c   -- 丢失a索引</span><br><span class="line">WHERE a &#x3D; const ORDER BY  c     -- 丢失b索引</span><br><span class="line">WHERE a &#x3D; const ORDER BY a, d   -- d不是索引的一部分</span><br><span class="line">WHERE a IN (...) ORDER BY b, c  -- 对于排序来说，多个相等条件也是范围查询</span><br></pre></td></tr></table></figure>



<h3 id="查询优化-3"><a href="#查询优化-3" class="headerlink" title="查询优化-3"></a>查询优化-3</h3><blockquote>
<p>优化策略</p>
</blockquote>
<p>Group By关键字优化：</p>
<p>优化策略与Order By相似。</p>
<p>Group By实质是先排序后进行分组，遵照索引建的最佳左前缀。</p>
<p>当无法使用索引列，增大max_length_for_sort_data参数设置，增大sort_buffer_size参数的设置。</p>
<p>where高于having，能卸载where限定的条件就不要去having限定了。</p>
<h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><blockquote>
<p>简介</p>
</blockquote>
<ul>
<li><p>MySQL的慢查询日志是MySQL提供的一种日志记录，它用来记录在MySQL中响应时间超过阈值的语句，具体指运行时间超过long_query_time值的SQL，则会被记录到慢查询日志中。</p>
</li>
<li><p>具体指运行时间超过long_query_time值的SQL，则会被记录到慢查询日志中。long_query_time的默认值为10，意思是运行10秒以上的语句。</p>
</li>
<li><p>默认情况下，MySQL数据库没有开启慢查询日志，需要我们手动来设置这个参数。</p>
</li>
<li><p>当然，如果不是调优需要的话，一般不建议启动该参数，因为开启漫长哈讯日志会或多或少带来一定的性能影响。慢查询日志支持将日志记录写入文件。</p>
</li>
</ul>
<blockquote>
<p>配置</p>
</blockquote>
<p>查看是否开启慢查询日志和文件位置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE &#39;%SLOW_QUERY_LOG%&#39;;</span><br><span class="line">+---------------------+-------------------------------+</span><br><span class="line">| Variable_name       | Value                         |</span><br><span class="line">+---------------------+-------------------------------+</span><br><span class="line">| slow_query_log      | OFF                           |</span><br><span class="line">| slow_query_log_file | &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;parak-slow.log |</span><br><span class="line">+---------------------+-------------------------------+</span><br></pre></td></tr></table></figure>

<p>开启慢查询日志（只对本次生效，重启后失效）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET global slow_query_log &#x3D; 1;</span><br></pre></td></tr></table></figure>

<p>查看慢查询阈值（默认为10s）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE &#39;long_query_time%&#39;;</span><br><span class="line">+-----------------+-----------+</span><br><span class="line">| Variable_name   | Value     |</span><br><span class="line">+-----------------+-----------+</span><br><span class="line">| long_query_time | 10.000000 |</span><br><span class="line">+-----------------+-----------+</span><br></pre></td></tr></table></figure>

<p>设置慢查询阈值（3s）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET global long_query_time &#x3D; 3;</span><br></pre></td></tr></table></figure>

<p>查看慢查询记录数量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW global STATUS LIKE &#39;%SLOW_QUERIES%&#39;;</span><br></pre></td></tr></table></figure>

<p>永久生效需要修改配置文件/etc/my.cnf，需要在[mysqld]下增加或修改参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">slow_query_log &#x3D; 1</span><br><span class="line">slow_query_log_file &#x3D; &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;&lt;hostname&gt;-slow.log</span><br><span class="line">long_query_time  &#x3D; &lt;time&gt;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>mysqldumpslow</p>
</blockquote>
<p>参数：</p>
<ul>
<li>s：表示按照何种方式排序</li>
<li>c：访问次数</li>
<li>l：锁定时间</li>
<li>r：返回记录</li>
<li>t：查询时间</li>
<li>al：平均锁定时间</li>
<li>ar：平均返回记录数量</li>
<li>at：平均查询时间</li>
<li>t：返回数据数量</li>
<li>g：正则匹配，大小写不敏感</li>
</ul>
<p>得到返回记录最多的10个SQL：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldumpslow -s r -t 10 &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;parak-slow.log</span><br></pre></td></tr></table></figure>

<p>得到访问次数最多的10个SQL：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldumpslow -s c -t 10 &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;parak-slow.log</span><br></pre></td></tr></table></figure>

<p>得到按照时间排序的前10条里面含有左连接的查询语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldumpslow -s t -t 10 -g &quot;left join&quot; &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;parak-slow.log</span><br></pre></td></tr></table></figure>

<p>建议在使用这些命令时结合 | 和 more使用，防止爆屏。</p>
<h3 id="批量数据脚本"><a href="#批量数据脚本" class="headerlink" title="批量数据脚本"></a>批量数据脚本</h3><blockquote>
<p>配置</p>
</blockquote>
<p>变量<code>log_bin_trust_function_creators</code>：控制是否可以信任存储函数创建者，不会创建写入二进制日志引起不安全事件的存储函数。</p>
<p>查看是否开启：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE &#39;log_bin_trust_function_creators&#39;;</span><br><span class="line">+---------------------------------+-------+</span><br><span class="line">| Variable_name                   | Value |</span><br><span class="line">+---------------------------------+-------+</span><br><span class="line">| log_bin_trust_function_creators | OFF   |</span><br><span class="line">+---------------------------------+-------+</span><br></pre></td></tr></table></figure>

<p>开启（暂时性开启，永久性依然是修改my.cnf）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET global log_bin_trust_function_creators &#x3D; 1;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>数据准备</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;tb6_dept&#96; (</span><br><span class="line">  &#96;id&#96; int NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;deptno&#96; mediumint NOT NULL DEFAULT &#39;0&#39;,</span><br><span class="line">  &#96;dname&#96; varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,</span><br><span class="line">  &#96;loc&#96; varchar(13) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci;</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;tb6_emp&#96; (</span><br><span class="line">  &#96;id&#96; int NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;empno&#96; mediumint NOT NULL DEFAULT &#39;0&#39;,</span><br><span class="line">  &#96;ename&#96; varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,</span><br><span class="line">  &#96;job&#96; varchar(9) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,</span><br><span class="line">  &#96;mgr&#96; mediumint NOT NULL DEFAULT &#39;0&#39;,</span><br><span class="line">  &#96;hiredate&#96; date NOT NULL,</span><br><span class="line">  &#96;sal&#96; decimal(7,2) NOT NULL,</span><br><span class="line">  &#96;comm&#96; decimal(7,2) DEFAULT NULL,</span><br><span class="line">  &#96;deptno&#96; mediumint NOT NULL DEFAULT &#39;0&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>创建函数</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 随机产生字符串</span><br><span class="line">DELIMITER $$</span><br><span class="line">CREATE FUNCTION rand_string(n INT) RETURNS VARCHAR(255)</span><br><span class="line">BEGIN</span><br><span class="line">    DECLARE chars_str VARCHAR(100) DEFAULT &#39;abcdefghijklmnopqrstuvwsyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;;</span><br><span class="line">    DECLARE return_str VARCHAR(255) DEFAULT &#39;&#39;;</span><br><span class="line">    DECLARE i INT DEFAULT 0;</span><br><span class="line">    WHILE i &lt; n DO</span><br><span class="line">    SET return_str &#x3D; CONCAT(return_str,SUBSTRING(chars_str,FLOOR(1+RAND()*52),1));</span><br><span class="line">    SET i &#x3D; i + 1;</span><br><span class="line">    END WHILE;</span><br><span class="line">    RETURN return_str;</span><br><span class="line">END $$</span><br><span class="line"></span><br><span class="line"># 随机产生部门编号</span><br><span class="line">DELIMITER $$</span><br><span class="line">CREATE FUNCTION rand_num() RETURNS INT(5)</span><br><span class="line">BEGIN</span><br><span class="line">    DECLARE i INT DEFAULT 0;</span><br><span class="line">    SET i &#x3D; FLOOR(100 + RAND() * 10);</span><br><span class="line">    RETURN i;</span><br><span class="line">END $$</span><br></pre></td></tr></table></figure>



<blockquote>
<p>创建存储过程</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 向tb6_dept表批量插入</span><br><span class="line">DELIMITER $$</span><br><span class="line">CREATE PROCEDURE insert_dept(IN START INT(10),IN max_num INT(10))</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE i INT DEFAULT 0;</span><br><span class="line">    SET autocommit &#x3D; 0;</span><br><span class="line">    REPEAT</span><br><span class="line">    SET i &#x3D; i + 1;</span><br><span class="line">    INSERT INTO dept(deptno,dname,loc) VALUES((START + i),rand_string(10),rand_string(8));</span><br><span class="line">    UNTIL i &#x3D; max_num</span><br><span class="line">    END REPEAT;</span><br><span class="line">    COMMIT;</span><br><span class="line">END $$</span><br><span class="line"></span><br><span class="line"># 向tb6_emp表批量插入</span><br><span class="line">DELIMITER $$</span><br><span class="line">CREATE PROCEDURE insert_emp(IN START INT(10),IN max_num INT(10))</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE i INT DEFAULT 0;</span><br><span class="line">    SET autocommit &#x3D; 0;</span><br><span class="line">    REPEAT</span><br><span class="line">    SET i &#x3D; i + 1;</span><br><span class="line">    INSERT INTO emp(empno,ename,job,mgr,hiredata,sal,comm,deptno) VALUES((START + i),rand_string(6),&#39;SALESMAN&#39;,0001,CURDATE(),2000,400,rand_num());</span><br><span class="line">    UNTIL i &#x3D; max_num</span><br><span class="line">    END REPEAT;</span><br><span class="line">    COMMIT;</span><br><span class="line">END $$</span><br></pre></td></tr></table></figure>



<blockquote>
<p>批量插入数据</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 向tb6_dept中插入10条数据</span><br><span class="line">DELIMITER ;</span><br><span class="line">CALL insert_dept(100, 10);</span><br><span class="line"></span><br><span class="line"># 向tb6_emp中插入50万条数据</span><br><span class="line">DELIMITER ;</span><br><span class="line">CALL insert_emp(100001, 500000);</span><br></pre></td></tr></table></figure>



<h3 id="Show-Profile"><a href="#Show-Profile" class="headerlink" title="Show Profile"></a>Show Profile</h3><blockquote>
<p>概述</p>
</blockquote>
<p>MySQL提供的可以用来分析当前会话中语句执行的资源消耗情况，可以用于SQL调优的测量。</p>
<p>官网：<a href="https://dev.mysql.com/doc/refman/8.0/en/show-profile.html">https://dev.mysql.com/doc/refman/8.0/en/show-profile.html</a></p>
<p>默认情况下，参数处于关闭状态，并保存最近15次的运行结果。</p>
<blockquote>
<p>配置</p>
</blockquote>
<p>查看开启状态：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE &#39;profiling&#39;;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| profiling     | OFF   |</span><br><span class="line">+---------------+-------+</span><br></pre></td></tr></table></figure>

<p>开启：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET global profiling &#x3D; 1;</span><br></pre></td></tr></table></figure>

<p>MySQL8需要关闭依赖检测，即从sql_mode中移除<code>ONLY_FULL_GROUP_BY</code>：</p>
<p>查看sql_mode：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT @@global.sql_mode;</span><br><span class="line">+-----------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| @@global.sql_mode                                                                                                     |</span><br><span class="line">+-----------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION |</span><br><span class="line">+-----------------------------------------------------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure>

<p>移除<code>ONLY_FULL_GROUP_BY</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET global @@sql_mode &#x3D; &#96;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&#96;;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>相关命令</p>
</blockquote>
<p>查看SQL：<code>SHOW PROFILES</code></p>
<p>诊断SQL：<code>SHOW PROFILE &lt;type ...&gt; FOR QUERY &lt;Query_ID&gt;</code></p>
<p>可选参数如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| ALL                -- 显示所有的开销信息</span><br><span class="line">| BLOCK IO           -- 显示块IO相关开销</span><br><span class="line">| CONTEXT SWITCHES   -- 上下文切换相关开销</span><br><span class="line">| CPU                -- 显示CPU相关开销信息</span><br><span class="line">| IPC                -- 显示内存相关开销信息</span><br><span class="line">| MEMORY             -- 显示内存相关开销信息</span><br><span class="line">| PAGE FAULTS        -- 显示页面错误相关开销信息</span><br><span class="line">| SOURCE             -- 显示和Source_function, Source_file, Source_line相关的开销信息</span><br><span class="line">| SWAPS              -- 显示交换次数相关开销的信息</span><br></pre></td></tr></table></figure>



<blockquote>
<p>日常开发需要注意</p>
</blockquote>
<ul>
<li>converting HEAP to MyISAM 查询结果太大，内存都不够用了王磁盘上搬了</li>
<li>Creating tmp table 拷贝数据到临时表，用完再删除</li>
<li>Copying to tmp table on disk 吧内存中临时表复制到磁盘，危险</li>
<li>locked 死锁</li>
</ul>
<h3 id="全局查询日志"><a href="#全局查询日志" class="headerlink" title="全局查询日志"></a>全局查询日志</h3><blockquote>
<p>永久启用</p>
</blockquote>
<p>修改my.cnf，设置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 开启</span><br><span class="line">general_log &#x3D; 1</span><br><span class="line"># 记录日志文件的路径</span><br><span class="line">general_log_file &#x3D; &#x2F;&lt;path&gt;&#x2F;&lt;name&gt;</span><br><span class="line"># 输出格式</span><br><span class="line">log_output &#x3D; &lt;.extension&gt;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>临时启用</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set global general_log &#x3D; 1;</span><br><span class="line">set global log_output &#x3D; &#39;TABLE&#39;;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>注意</p>
</blockquote>
<p>永远不要在生产环境开启这个功能。</p>
<h2 id="锁机制"><a href="#锁机制" class="headerlink" title="锁机制"></a>锁机制</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>前言</p>
</blockquote>
<p>锁是计算机协调多个进程或线程并发访问某一资源的机制。</p>
<p>在数据库中，除传统的计算资源（如CPU、RAM、I/O等）的争用，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。</p>
<blockquote>
<p>分类</p>
</blockquote>
<p>从对数据操作的类型分：</p>
<ul>
<li>读锁（共享锁）：针对同一份数据，多个读操作可以同时进行而不会相互影响。</li>
<li>写锁（排他锁）：当前写操作没有完成之前，它会阻断其他写锁和读锁。</li>
</ul>
<p>从对数据操作的粒度分：</p>
<ul>
<li>行级锁：对当前操作的行加锁。（开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度最高）</li>
<li>表级锁：对当前操作的表加锁。（开销小，加锁快；不会出现死锁；锁定粒度大，发出锁冲突的概率最高，并发度最低）</li>
<li>页级锁：介于行级锁和表级锁中间的一种锁。（开销和加锁时间介于表锁和行锁之间，会出现死锁；并发度一般）</li>
</ul>
<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><blockquote>
<p>概述</p>
</blockquote>
<p>事务是由一组SQL语句组成的逻辑处理单元，事务具有以下4个属性，通常简称为事务的ACID属性。</p>
<ul>
<li><p>A(atomicity/原子性)：事务是一个原子操作单元，其对数据的修改，要么全都执行，要么全都不执行。</p>
</li>
<li><p>C(consistency/一致性)：在事务开始和完成时，数据都必须保持一致状态。这意味着所有相关的数据规则都必须应用于事务的修改，以保持数据的完整性；事务结束时，所有的内部数据结构（如B树索引或双向链表）也都必须是正确的。</p>
</li>
<li><p>I(isolation/隔离性)：数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的“独立”环境执行。这意味着事务处理过程中的中间状态对外部是不可见的，反之亦然。</p>
</li>
<li><p>D(durability/持久性)：事务完成之后，它对于数据的修改是永久性的，即时出现系统故障也能够保持。</p>
</li>
</ul>
<blockquote>
<p>并发事务处理带来的问题</p>
</blockquote>
<p><strong>更新丢失（Lost Update）</strong></p>
<p>当两个或多个事务选择同一行，然后基于最初选定的值更新该行时，由于每个事务都不知道其他事务的存在，就会发生丢失更新问题——最后的更新覆盖了由其他事务所做的更新。</p>
<p>例如，两个程序员修改同一Java文件。每程序员独立地更改其副本，然后保存更改的副本后，这样就覆盖了原始文档。最后保存其更改副本的编辑人员覆盖前一个程序员所做的更改。</p>
<p>如果一个在一个程序员完成并提交事务之前，另一个程序员不能访问同一文件，则可避免此问题。</p>
<p><strong>脏读（Dirty Reads）</strong></p>
<p>一个事务正在对一条记录做修改，在这个事务完成并提交前，这条记录的数据就处于不一致状态；这时，另一个事务也来读取同一条记录，如果不加控制，第二个事务读取了这些“脏”数据，并据此做进一步的处理，就会产生未提交的数据依赖关系。这种现象被形象地叫做“脏读”。</p>
<p>事务A读取到事务B已修改但未提交的数据，还在这个数据基础上做了操作。此时，如果B事务回滚，A读取的数据无效，不符合一致性要求。</p>
<p><strong>不可重复读（Non-Repeatable Reads）</strong></p>
<p>一个事务在服务某些数据后的某个时间，再次读取以前读过的数据，却发现其读出的数据已经发生了改变、或某些记录已经被删除，这种现象就叫做不可重复读。</p>
<p>事务A读取到了事务B已经提交的修改数据，不符合隔离性。</p>
<p><strong>幻读（Phantom Reads）</strong></p>
<p>一个事务按相同的查询条件重新读取以前检索过的数据，却发现其他事务插入了满足其查询条件的新数据，这种现象就称为“幻读”。</p>
<p>事务A读取到事务B提交的新增数据，不符合隔离性。</p>
<blockquote>
<p>事务隔离级别</p>
</blockquote>
<p>“脏读”、“不可重复读”和“幻读”，其实都是数据库读一致性问题，必须由数据库提供一定的书屋隔离级别来解决。</p>
<p>数据库实现事务隔离的方式，基本上可分为以下两种：</p>
<ul>
<li>一种是在读取数据前，对其加锁，阻止其他事物对数据修改。</li>
<li>另一种是不用加任何锁，通过一定机制生成一个数据请求时间点的一致性数据快照（Snapshot），并用这个快照来提供一定级别（语句级或事务级）的一致性读取。同用户的角度来看，好像是数据库可以提供统一数据的多个版本，因此，这种技术叫数据多版本并发控制（MultiVersion Concurrency Control，简称MVCC或MCC），也经常称为多版本数据库。</li>
</ul>
<p>为了解决“隔离”与“并发”的矛盾，ISO/ANSI SQL92定义了4个事务隔离级别，每个级别的隔离程度不同，允许出现的副作用也不同，允许出现的副作用也不同，应用可以根据自己的业务逻辑需求，通过选择不同的隔离级别来平衡“隔离”与“并发”的矛盾。</p>
<table>
<thead>
<tr>
<th>读数据一致性及允许的并发副作用隔离级别</th>
<th>读数据一致性</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>未提交读（Read uncommitted）</td>
<td>最低级别，只能保证不读取物理上损坏的数据</td>
<td>是</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>已提交读（Read committed）</td>
<td>语句级</td>
<td>否</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>可重复读（Repeatable read）</td>
<td>事务级</td>
<td>否</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>可序列化（Serializable）</td>
<td>最高级别，事务级</td>
<td>否</td>
<td>否</td>
<td>否</td>
</tr>
</tbody></table>
<p>数据库的事务隔离越严格，并发副作用越小，但付出的代价也玖越大，因为事务隔离实质上就是使事务在一定程度上“串行化”进行，这显然与“并发”是矛盾的。同时，不同的应用对读一致性和事务隔离程度的要求也是不同的，比如许多应用对“不可重复读”和“幻读”并不敏感，可能更关心数据并发访问的能力。</p>
<blockquote>
<p>配置</p>
</blockquote>
<p>查看的事务隔离级别（默认为可重复读）：<code>SELECT @@transaction_isolation;</code>  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT @@transaction_isolation;</span><br><span class="line">+-------------------------+</span><br><span class="line">| @@transaction_isolation |</span><br><span class="line">+-------------------------+</span><br><span class="line">| REPEATABLE-READ         |</span><br><span class="line">+-------------------------+</span><br></pre></td></tr></table></figure>

<p>设置读未提交: <code>SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</code></p>
<p>设置读已提交：<code>SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;</code></p>
<p>设置可重复读：<code>SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;</code></p>
<p>设置可序列化：<code> SET SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE;</code></p>
<blockquote>
<p>SQL命令</p>
</blockquote>
<p>事务开始：<code>BEGIN</code> 或者 <code>START TRANSACTION</code></p>
<p>事务结束：<code>COMMIT</code>或者<code>COMMIT WORK</code></p>
<p>事务回滚：<code>ROLLBACK</code>或者<code>ROLLBACK WORK</code></p>
<h3 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h3><blockquote>
<p>特点</p>
</blockquote>
<p>表锁（偏读）：偏向MyISAM存储引擎，开销小，加锁快；无死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。</p>
<blockquote>
<p>操作</p>
</blockquote>
<p>手动增加表锁：<code>LOCK TABLE &lt;tablename_1&gt; read(write),&lt;tablename_1&gt; read(write) ... </code></p>
<p>查看表上的锁：<code>SHOW OPEN TABLES;</code></p>
<p>解锁：<code>UNLOCK TABLES;</code></p>
<blockquote>
<p>分析</p>
</blockquote>
<p>分析表锁定：<code>SHOW STATUS LIKE &#39;table%&#39;;</code></p>
<p>有两个状态变量记录MySQL内部表级锁定的情况，两个变量说下：</p>
<p><code>Table_locs_immediate</code>：产生表级锁定的次数，表示可以立即获取锁的查询次数，每立即获取锁值+1;</p>
<p><code>Table_locks_waited</code>：出现表级锁定争用而发生等待的次数（不能立即获取锁的次数，每等待一次锁值+1），此值高则说明存在着比较严重的表级锁争用情况。</p>
<p>此外，MyISAM的读写锁调度是写优先，这也是MyISAM不适合做写为主表的引擎，因为写锁后，其他线程不能做任何操作，大量的更新会使查询很难得到锁，从而造成永远阻塞。</p>
<blockquote>
<p>总结</p>
</blockquote>
<p>当前线程给一个表加上读锁时，当前线程和其他线程都可以读这个表，但是当前线程线程读其他表时会报错，当前线程写该表时会报错，其他线程写该表时会阻塞。</p>
<p>当前线程给一个表加上写锁时，当前线程可以对该表进行读和写操作，但是当前线程对其他表进行读和写操作时会报错，其他线程对该表进行读和写时会阻塞。</p>
<p>读锁阻塞写，写锁都阻塞。</p>
<h3 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h3><blockquote>
<p>特点</p>
</blockquote>
<p>行锁（偏写）：偏向InnoDB存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。</p>
<p>InnoDB与MyISAM的最大不同有两点：一是支持事务；二是采用了行级锁。</p>
<blockquote>
<p>InnoDB行锁实现方式</p>
</blockquote>
<p>InnoDB行锁是通过索引上的索引项加锁来实现的，这一点MySQL与Oracle不同，后者是通过在数据块中对相应数据行加锁来实现的。InnoDB这种行锁实现特点意味着：只有通过索引条件来检索数据，InnoDB才使用行级锁，否则InnoDB将使用表锁。</p>
<blockquote>
<p>总结</p>
</blockquote>
<p>当前线程<code>begin</code>以后对一张表进行写操作，其他线程对该表进行写操作时会阻塞。当前线程写操作完毕后仅当前线程可见，其他线程只能读更新之前的数据，只有当前线程<code>commit;</code>之后其他线程才可读更新数据。</p>
<blockquote>
<p>间隙锁</p>
</blockquote>
<p>当我们用范围条件而不是相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据记录的索引项加锁；对于键值在条件范围内但并不存在的记录，叫做间隙。</p>
<p>InnoDB也会对这个间隙加锁，这种锁机制就是所谓的间隙锁。</p>
<p>危害：因为Query执行过程中通过范围查找的话，它会锁定整个范围内的所有索引键值，即使这个键值并不存在。间隙所有一个比较致命的弱点，就是当锁定一个范围键值之后，即时某些不存在的键值也会被无辜的锁定，而造成在锁定的时候无法插入锁定键值范围内的任何数据。在某些场景下这可能会对性能造成很大的危害。</p>
<blockquote>
<p>如何锁定一行</p>
</blockquote>
<p><code>SELECT .....FOR UPDATE</code>在锁定某一行后，其他写操作会被阻塞，直到锁定的行被<code>COMMIT</code>。</p>
<p>结论：</p>
<p>InnoDB存储引擎由于实现了行级锁定，虽然在锁定机制的实现方面所带来的性能损耗可能比表级锁定会要更高一些，但是在整体并发处理能力方面要远远优于MyISAM的表级锁定的。当系统并发量较高的时候，InnoDB的整体性能和MyISAM相比就会有比较明显的优势了。</p>
<p>但是，InnoDB的行级锁定同样有其脆弱的一面，当我们使用不当的时候，可能会让InnoDB的整体性能表现不仅不能比MyISAM高，甚至可能更差。</p>
<blockquote>
<p>分析行锁定</p>
</blockquote>
<p>通过检查InnoDB_row_lock状态变量来分析系统上的行锁的争夺情况：<code>SHOW STATUS LIKE &#39;innodb_row_lock;&#39;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW STATUS LIKE &#39;innodb_row_lock%&#39;;</span><br><span class="line">+-------------------------------+-------+</span><br><span class="line">| Variable_name                 | Value |</span><br><span class="line">+-------------------------------+-------+</span><br><span class="line">| Innodb_row_lock_current_waits | 0     |</span><br><span class="line">| Innodb_row_lock_time          | 38921 |</span><br><span class="line">| Innodb_row_lock_time_avg      | 9730  |</span><br><span class="line">| Innodb_row_lock_time_max      | 14962 |</span><br><span class="line">| Innodb_row_lock_waits         | 4     |</span><br><span class="line">+-------------------------------+-------+</span><br></pre></td></tr></table></figure>

<p>对各个状态量的说明如下：</p>
<ul>
<li><code>Innodb_row_lock_current_waits</code>：当前正在等待锁定的数量</li>
<li><code>Innodb_row_lock_time</code>：从系统启动到现在锁定总时间长度</li>
<li><code>Innodb_row_lock_time_avg</code>：每次等待所花平均时间</li>
<li><code>Innodb_row_lock_time_max</code>：从系统启动到现在等待最长的一次所花的时间</li>
<li><code>Innodb_row_lock_waits</code>：系统启动后到现在总共等待的次数</li>
</ul>
<p>注意waits金额time_avg比较高的，就要分析系统并制定优化方案。</p>
<blockquote>
<p>优化建议</p>
</blockquote>
<ul>
<li>尽可能让所有数据检索都通过索引来完成，避免无索引行锁升级为表锁</li>
<li>合理设计索引，尽量缩小锁的范围</li>
<li>尽可能减少检索条件，避免间隙锁</li>
<li>尽量控制事务大小，减少锁定资源量和时间长度</li>
<li>尽可能低级别事务隔离</li>
</ul>
<h3 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h3><blockquote>
<p>说明</p>
</blockquote>
<p>MVCC（Multiversion concurrency control ）是一种多版本并发控制机制。</p>
<blockquote>
<p>实现</p>
</blockquote>
<ul>
<li>插入：添加隐藏两列，创建版本号(当前事务id)和删除版本号(null)</li>
<li>查询：需要满足条件，创建版本号 &lt; 当前事务id &lt; 删除版本号</li>
<li>删除：更新数据的删除版本号为当前事务id</li>
<li>更新：复制一份数据，先执行删除，再执行插入，就旧数据的删除版本号和新数据的创建版本号都设置为当前事务id</li>
</ul>
<h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><h3 id="复制的基本原则"><a href="#复制的基本原则" class="headerlink" title="复制的基本原则"></a>复制的基本原则</h3><p>MySQL复制过程分为三步：</p>
<ul>
<li>Master将改变记录到二进制日志(Binary Log)。这些记录过程叫做二进制日志事件，<code>Binary Log Events</code>；</li>
<li>Slave将Master的<code>Binary Log Events</code>拷贝到它的中继日志(Replay Log);</li>
<li>Slave重做中继日志中的事件，将改变应用到自己的数据库中。MySQL复制是异步且串行化的。</li>
</ul>
<h3 id="复制的最大问题"><a href="#复制的最大问题" class="headerlink" title="复制的最大问题"></a>复制的最大问题</h3><ul>
<li>每个Slave只有一个Master。</li>
<li>每个Slave只能有一个唯一的服务器ID。</li>
<li>每个Master可以有多个Salve。</li>
</ul>
<h3 id="一主一从配置"><a href="#一主一从配置" class="headerlink" title="一主一从配置"></a>一主一从配置</h3><blockquote>
<p>基本准备</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@parak home]# mkdir -p mysql-3307/conf mysql-3307/data mysql-3308/conf mysql-3308/data</span><br><span class="line">[root@parak home]# touch mysql-3307/conf/my.cnf mysql-3308/conf/my.cnf</span><br><span class="line"><span class="meta">#</span><span class="bash"> Master配置文件</span></span><br><span class="line">[root@parak home]# vi mysql-3307/conf/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">datadir = /var/lib/mysql</span><br><span class="line">server-id = 1</span><br><span class="line">log-bin = mysql-bin</span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION</span><br><span class="line"><span class="meta">#</span><span class="bash"> Slave配置文件</span></span><br><span class="line">[root@parak home]# vi mysql-3308/conf/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">datadir = /var/lib/mysql</span><br><span class="line">server-id = 2</span><br><span class="line">log-bin = mysql-bin</span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION</span><br></pre></td></tr></table></figure>



<blockquote>
<p>Docker启动</p>
</blockquote>
<p>mysql-3307用作Master</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-v /home/mysql-3307/conf/my.cnf:/etc/my.cnf \</span><br><span class="line">-v /home/mysql-3307/data:/var/lib/mysql \</span><br><span class="line">-p 3307:3306 \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=KAG1823 \</span><br><span class="line">--restart=always \</span><br><span class="line">--name mysql-3307 \</span><br><span class="line">mysql:8.0.20</span><br></pre></td></tr></table></figure>

<p>mysql-3308用作Slave</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-v /home/mysql-3308/conf/my.cnf:/etc/my.cnf \</span><br><span class="line">-v /home/mysql-3308/data:/var/lib/mysql \</span><br><span class="line">-p 3308:3306 \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=KAG1823 \</span><br><span class="line">--restart=always \</span><br><span class="line">--name mysql-3308 \</span><br><span class="line">mysql:8.0.20</span><br></pre></td></tr></table></figure>



<blockquote>
<p>查看网络</p>
</blockquote>
<p>查看bridge网络的所有容器：<code>docker inspect bridgr</code></p>
<p>根据容器ID或者容器名称查询：<code>docker inspect --format=&#39;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#39; 容器名称 | 容器id</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@parak ~]# docker inspect --format=&#x27;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#x27; mysql-3307</span><br><span class="line">172.17.0.5</span><br><span class="line">[root@parak ~]# docker inspect --format=&#x27;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#x27; mysql-3308</span><br><span class="line">172.17.0.6</span><br></pre></td></tr></table></figure>

<p>mysql-3307的IP为：<code>172.17.0.5</code></p>
<p>mysql-3308的IP为：<code>172.17.0.6</code></p>
<blockquote>
<p>Master配置</p>
</blockquote>
<p>进入Master内部</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建用户，用于Slave访问Master</span><br><span class="line">mysql&gt; CREATE USER &#39;Khighness&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;KAG1823&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; GRANT REPLICATION SLAVE ON *.* TO &#39;Khighness&#39;@&#39;%&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 记录File和Position</span><br><span class="line">mysql&gt; SHOW MASTER STATUS\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">             File: mysql-bin.000003</span><br><span class="line">         Position: 4440</span><br><span class="line">     Binlog_Do_DB:</span><br><span class="line"> Binlog_Ignore_DB:</span><br><span class="line">Executed_Gtid_Set:</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR:</span><br><span class="line">No query specified</span><br></pre></td></tr></table></figure>

<p>用户名：<code>slave</code></p>
<p>File：<code>mysql-bin.000003</code></p>
<p>Position：<code>4440</code></p>
<blockquote>
<p>Slave配置</p>
</blockquote>
<p>进入Slave内部</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; CHANGE MASTER TO</span><br><span class="line">    -&gt; MASTER_HOST&#x3D;&#39;172.17.0.5&#39;,</span><br><span class="line">    -&gt; MASTER_PORT&#x3D;3307,</span><br><span class="line">    -&gt; MASTER_USER&#x3D;&#39;Khighness&#39;,</span><br><span class="line">    -&gt; MASTER_PASSWORD&#x3D;&#39;KAG1823&#39;,</span><br><span class="line">    -&gt; MASTER_LOG_FILE&#x3D;&#39;mysql-bin.000003&#39;,</span><br><span class="line">    -&gt; MASTER_LOG_POS&#x3D;4440;</span><br><span class="line">Query OK, 0 rows affected, 2 warnings (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; START SLAVE;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/posts/f5f9fa9b/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="📖概述"><a href="#📖概述" class="headerlink" title="📖概述"></a>📖概述</h2>

<blockquote>
<p>故事</p>
</blockquote>
<p>2010年，几个搞 IT 的年轻人，在美国旧金山成立了一家名叫 <code>dotCloud </code>的公司。<code>dotCloud </code>的平台即服务（Platform-as-a-Service）提供商。底层技术上，<code>dotCloud</code> 平台利用了<code>Linux</code>的 <code>LXC </code>容器技术。为了方便创建和管理这些容器，<code>dotCloud </code>基于 Google 公司推出的 <code>Go </code>语言开发了一套内部工具，之后被命名为 <code>Docker</code>。<code>Docker </code>就是这样诞生的。</p>
<p>2013年的后端技术领域已经太久没有出现让人振奋的东西了。当然<code>Docker</code>在发行之后也没用引起行业的关注。在开源之后才爆火。</p>
<p><code>Docker</code>定义容器技术标砖使得容器技术的落地变得十分简单，应用可以稳定便携的运行在容器中。</p>
<a id="more"></a>



<blockquote>
<p>特点</p>
</blockquote>
<ul>
<li><strong>更快速的应用交付和部署</strong></li>
<li><strong>更便捷的升级和扩缩容</strong></li>
<li><strong>更高效的计算资源利用</strong></li>
<li><strong>更简单的系统运维</strong></li>
</ul>
<blockquote>
<p>架构</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/f5f9fa9b/Docker%E6%9E%B6%E6%9E%84.jpg" class="" title="Docker">

<p><strong>镜像（image）：</strong> 相当于一个模板，可以通过这个模板来创建容器服务</p>
<p><strong>容器（container）：</strong> 独立运行一个或者一个组应用</p>
<p><strong>仓库（repository）：</strong> 存放镜像的地方</p>
<br>

<h2 id="🔨安装"><a href="#🔨安装" class="headerlink" title="🔨安装"></a>🔨安装</h2><blockquote>
<p>官方文档</p>
</blockquote>
<p>CentOS 7安装：<a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p>
<blockquote>
<p>卸载旧版本</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum remove docker \</span></span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>



<blockquote>
<p>设置存储库</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install -y yum-utils</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>更换镜像源</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>更新YUM包</p>
<p>更新YUM索引</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum makecache fast</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>安装docker引擎和容器</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install docker-ce docker-ce-cli containerd.io</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>启动Docker并测试hello-world</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start docker</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo docker run hello-world</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>卸载方式</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum remove docker-ce docker-ce-cli containerd.io</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo rm -rf /var/lib/docker</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>镜像加速</p>
</blockquote>
<p>1️⃣使用阿里镜像加速器</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/f5f9fa9b/image-20201206122604398.png" class="" title="image-20201206122604398">

<p>2️⃣使用中科大或者网易镜像加速</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加daemon.json</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> touch /etc/docker/daemon.json</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 写入内容并保存</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 科大源: https://docker.mirrors.ustc.edu.cn/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 网易源：http://hub-mirror.c.163.com</span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn/&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启Dicker</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl restart docker</span></span><br></pre></td></tr></table></figure>

<br>

<h2 id="🚀原理"><a href="#🚀原理" class="headerlink" title="🚀原理"></a>🚀原理</h2><blockquote>
<p>docker run的执行流程</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/f5f9fa9b/image-20201203233730702.png" class="" title="image-20201203233730702">

<blockquote>
<p>Docker的工作</p>
</blockquote>
<p>Docker是一个Client-Server结构的系统，Docker的守护进程运行在主机上。通过Socket从客户端访问。</p>
<p><strong>为什么Docker比VM快？</strong></p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/f5f9fa9b/image-20201204003500802.png" class="" title="image-20201204003500802">

<p>1、Docker有比虚拟机更少的抽象层。Docker不需要Hypervisor实现硬件资源虚拟化，运行在Docker容器上的程序直接使用的是实际物理机的硬件资源，因此在CPU、内存利用率上Docker将会在效率上有明显的优势。</p>
<p>2、Docker利用的是宿主机的内核，而不需要Guest OS。因此创建一个容器时，不需要和虚拟机一样重新加载一个操作系统内核。从而避免引寻、加载操作系统内核返回时耗时耗资源的过程，当新建一个虚拟机时，虚拟机软件需要加载Guest OS，返回新建过程是分钟级别的。而新建一个Docker容器只需要几秒钟。</p>
<p>3、Docker与VM相比：</p>
<ul>
<li>Docker灵活，VM笨重</li>
<li>Docker存储的镜像小，便于存储和传输，VM镜像庞大</li>
</ul>
<br>

<h2 id="🔰命令"><a href="#🔰命令" class="headerlink" title="🔰命令"></a>🔰命令</h2><blockquote>
<p>🌐官方文档</p>
</blockquote>
<p>Command-line reference：<a href="https://docs.docker.com/reference/">https://docs.docker.com/reference/</a></p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/f5f9fa9b/image-20201204225734966.png" class="" title="image-20201204225734966">

<br>

<h3 id="1️⃣帮助命令"><a href="#1️⃣帮助命令" class="headerlink" title="1️⃣帮助命令"></a>1️⃣帮助命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker version    <span class="comment"># 显示Docker版本信息</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker info       <span class="comment"># 显示Docker系统信息</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker --<span class="built_in">help</span>     <span class="comment"># Docker命令帮助信息</span></span></span><br></pre></td></tr></table></figure>

<br>

<h3 id="2️⃣镜像命令"><a href="#2️⃣镜像命令" class="headerlink" title="2️⃣镜像命令"></a>2️⃣镜像命令</h3><blockquote>
<p>查看镜像</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker images</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可选项</span></span><br><span class="line">-a, --all             # 列出所有镜像</span><br><span class="line">    --digests         # 显示镜像的摘要信息</span><br><span class="line">-q, --quiet           # 只显示镜像的ID</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行</span></span><br><span class="line">[root@parak khighness]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              bf756fb1ae65        11 months ago       13.3kB</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解释</span></span><br><span class="line">REPOSITORY  镜像的仓库源</span><br><span class="line">TAG         镜像的标签</span><br><span class="line">IMAGE ID    镜像的ID</span><br><span class="line">CREATED     镜像的创建时间</span><br><span class="line">SIZE        镜像的大小</span><br></pre></td></tr></table></figure>



<blockquote>
<p>搜索镜像</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker search &lt;IMAGE&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可选项</span></span><br><span class="line">--filter=STARS=1000 # 镜像的STARS大于1000</span><br></pre></td></tr></table></figure>



<blockquote>
<p>下载镜像</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull &lt;IMAGE&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker pull .io/library/mysql:latest</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果不写tag，默认就是最新的</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定版本下载</span></span><br><span class="line">[root@parak khighness]# docker pull mysql:8.0.20</span><br><span class="line">8.0.20: Pulling from library/mysql  # 分层下载</span><br><span class="line">8559a31e96f4: Pull complete </span><br><span class="line">d51ce1c2e575: Pull complete </span><br><span class="line">c2344adc4858: Pull complete </span><br><span class="line">fcf3ceff18fc: Pull complete </span><br><span class="line">16da0c38dc5b: Pull complete </span><br><span class="line">b905d1797e97: Pull complete </span><br><span class="line">4b50d1c6b05c: Pull complete </span><br><span class="line">c75914a65ca2: Pull complete </span><br><span class="line">1ae8042bdd09: Pull complete </span><br><span class="line">453ac13c00a3: Pull complete </span><br><span class="line">9e680cd72f08: Pull complete </span><br><span class="line">a6b5dc864b6c: Pull complete </span><br><span class="line">Digest: sha256:8b7b328a7ff6de46ef96bcf83af048cb00a1c86282bfca0cb119c84568b4caf6</span><br><span class="line">Status: Downloaded newer image for mysql:8.0.20</span><br><span class="line">docker.io/library/mysql:8.0.20</span><br></pre></td></tr></table></figure>



<blockquote>
<p>删除镜像</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通过镜像ID删除</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker rmi -f &lt;IMAGE ID&gt; ...</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除所有镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker rmi -f $(docker images -aq)0</span></span><br></pre></td></tr></table></figure>

<br>

<h3 id="3️⃣容器命令"><a href="#3️⃣容器命令" class="headerlink" title="3️⃣容器命令"></a>3️⃣容器命令</h3><blockquote>
<p>下载一个CentOS镜像来测试学(套)习(娃)</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@parak khighness]# docker pull centos</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/centos</span><br><span class="line">3c72a8ed6814: Pull complete </span><br><span class="line">Digest: sha256:76d24f3ba3317fa945743bb3746fbaf3a0b752f10b10376960de01da70685fbd</span><br><span class="line">Status: Downloaded newer image for centos:latest</span><br><span class="line">docker.io/library/centos:latest</span><br></pre></td></tr></table></figure>



<blockquote>
<p>新建容器并启动</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run [可选参数] &lt;IMAGE&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 参数说明</span></span><br><span class="line">--name=&quot;NAME&quot;   容器名字，用于区分容器</span><br><span class="line">-d              后台方式运行</span><br><span class="line">-it             使用交互方式运行，进如容器查看内容</span><br><span class="line">-p              指定容器端口  -p 8080:8080</span><br><span class="line">	-p ip:主机端口:容器端口</span><br><span class="line">	-p 主机端口:容器端口</span><br><span class="line">	-p 容器端口</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试，启动并进入容器</span></span><br><span class="line">[root@parak khighness]# docker run -it centos /bin/bash</span><br><span class="line">[root@e4efa1c507b8 /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line"><span class="meta">#</span><span class="bash"> 从容器中退回主机</span></span><br><span class="line">[root@e4efa1c507b8 /]# exit</span><br><span class="line">exit</span><br><span class="line">[root@parak khighness]# ls</span><br><span class="line">公共  模板  视频  图片  文档  下载  音乐  桌面</span><br></pre></td></tr></table></figure>



<blockquote>
<p>查看容器</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps  <span class="comment"># 显示所有正在运行的容器</span></span></span><br><span class="line">-a           # 显示所有正在运行的容器+历史运行过的容器</span><br><span class="line">-n=?         # 显示最近创建的n个容器</span><br><span class="line">-q           # 只显示容器的编号</span><br></pre></td></tr></table></figure>



<blockquote>
<p>退出容器</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">exit</span>        </span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>删除容器</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rm &lt;Container ID/NAME&gt;    <span class="comment"># 删除指定的容器，不能删除只在运行的容器</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker rm -f $(docker ps -aq)    <span class="comment"># 删除所有的容器</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker ps -a -q|xargs docker rm  <span class="comment"># 删除所有的容器 </span></span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>容器操作</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker start   &lt;Container ID/NAME&gt;  <span class="comment"># 启动容器 </span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker restart &lt;Container ID/NAME&gt;  <span class="comment"># 重启容器</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker stop    &lt;Container ID/NAME&gt;  <span class="comment"># 停止当前正在运行的容器</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">kill</span>    &lt;Container ID/NAME&gt;  <span class="comment"># 强制停止当前容器</span></span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>查看日志</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker logs -tf --tail &lt;n&gt; &lt;Container ID/NAME&gt; <span class="comment"># 显示指定行数的日志</span></span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>查看容器中进程信息</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker top &lt;Container ID/NAME&gt;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>查看镜像的元数据</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker inspect</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>进入当前正在运行的容器</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it &lt;Container ID&gt; bashShell  </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入容器后开启一个新的终端，可以在里面操作；</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">exec</span>之后不会终结当前容器进程</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker attach &lt;Container ID&gt;              </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入容器中正在执行的终端，不会启动新的进程</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">exec</span>之后终结当前容器进程</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>从容器拷贝新的东西到主机</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 开启CentOS容器</span></span><br><span class="line">[root@parak khighness]# docker start b9ace468ea7d</span><br><span class="line">b9ace468ea7d</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入CentOS容器</span></span><br><span class="line">[root@parak khighness]# docker attach b9ace468ea7d</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建文件夹和文件</span></span><br><span class="line">[root@b9ace468ea7d /]# cd home/</span><br><span class="line">[root@b9ace468ea7d home]# mkdir document </span><br><span class="line">[root@b9ace468ea7d home]# vi K1.java</span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出容器</span></span><br><span class="line">[root@b9ace468ea7d document]# exit</span><br><span class="line">exit</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将容器文件复制到主机上</span></span><br><span class="line">[root@parak khighness]# docker cp b9ace468ea7d:/home/document/K1.java document/</span><br><span class="line">[root@parak khighness]# cd document/</span><br><span class="line">[root@parak document]# ll</span><br><span class="line">总用量 4</span><br><span class="line">-rw-r--r--. 1 root root 186 12月  5 11:33 K1.java</span><br></pre></td></tr></table></figure>

<br>

<h2 id="🔱练习"><a href="#🔱练习" class="headerlink" title="🔱练习"></a>🔱练习</h2><br>

<h3 id="🌠-安装Nginx"><a href="#🌠-安装Nginx" class="headerlink" title="🌠 安装Nginx"></a>🌠 安装Nginx</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 搜索镜像</span></span><br><span class="line">[root@parak khighness]# docker search nginx</span><br><span class="line">NAME                               DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">nginx                              Official build of Nginx.                        14063               [OK]                </span><br><span class="line">jwilder/nginx-proxy                Automated Nginx reverse proxy for docker con…   1912                                    [OK]</span><br><span class="line">richarvey/nginx-php-fpm            Container running Nginx + PHP-FPM capable of…   795                                     [OK]</span><br><span class="line">linuxserver/nginx                  An Nginx container, brought to you by LinuxS…   131                                     </span><br><span class="line">jc21/nginx-proxy-manager           Docker container for managing Nginx proxy ho…   115                                     </span><br><span class="line">tiangolo/nginx-rtmp                Docker image with Nginx using the nginx-rtmp…   105                                     [OK]</span><br><span class="line">bitnami/nginx                      Bitnami nginx Docker Image                      90                                      [OK]</span><br><span class="line">alfg/nginx-rtmp                    NGINX, nginx-rtmp-module and FFmpeg from sou…   80                                      [OK]</span><br><span class="line">jlesage/nginx-proxy-manager        Docker container for Nginx Proxy Manager        72                                      [OK]</span><br><span class="line">nginxdemos/hello                   NGINX webserver that serves a simple page co…   63                                      [OK]</span><br><span class="line">nginx/nginx-ingress                NGINX Ingress Controller for Kubernetes         45                                      </span><br><span class="line">privatebin/nginx-fpm-alpine        PrivateBin running on an Nginx, php-fpm &amp; Al…   42                                      [OK]</span><br><span class="line">nginxinc/nginx-unprivileged        Unprivileged NGINX Dockerfiles                  21                                      </span><br><span class="line">schmunk42/nginx-redirect           A very simple container to redirect HTTP tra…   19                                      [OK]</span><br><span class="line">nginx/nginx-prometheus-exporter    NGINX Prometheus Exporter                       15                                      </span><br><span class="line">centos/nginx-112-centos7           Platform for running nginx 1.12 or building …   15                                      </span><br><span class="line">staticfloat/nginx-certbot          Opinionated setup for automatic TLS certs lo…   14                                      [OK]</span><br><span class="line">raulr/nginx-wordpress              Nginx front-end for the official wordpress:f…   13                                      [OK]</span><br><span class="line">centos/nginx-18-centos7            Platform for running nginx 1.8 or building n…   13                                      </span><br><span class="line">mailu/nginx                        Mailu nginx frontend                            8                                       [OK]</span><br><span class="line">bitwarden/nginx                    The Bitwarden nginx web server acting as a r…   7                                       </span><br><span class="line">flashspys/nginx-static             Super Lightweight Nginx Image                   7                                       [OK]</span><br><span class="line">bitnami/nginx-ingress-controller   Bitnami Docker Image for NGINX Ingress Contr…   6                                       [OK]</span><br><span class="line">wodby/nginx                        Generic nginx                                   1                                       [OK]</span><br><span class="line">ansibleplaybookbundle/nginx-apb    An APB to deploy NGINX                          1                                       [OK]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载镜像</span></span><br><span class="line">[root@parak khighness]# docker pull nginx</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">852e50cd189d: Pull complete </span><br><span class="line">571d7e852307: Pull complete </span><br><span class="line">addb10abd9cb: Pull complete </span><br><span class="line">d20aa7ccdb77: Pull complete </span><br><span class="line">8b03f1e11359: Pull complete </span><br><span class="line">Digest: sha256:6b1daa9462046581ac15be20277a7c75476283f969cb3a61c8725ec38d3b01c3</span><br><span class="line">Status: Downloaded newer image for nginx:latest</span><br><span class="line">docker.io/library/nginx:latest</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看镜像</span></span><br><span class="line">[root@parak khighness]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">nginx               latest              bc9a0695f571        10 days ago         133MB</span><br><span class="line">centos              latest              0d120b6ccaa8        3 months ago        215MB</span><br><span class="line">mysql               8.0.20              be0dbf01a0f3        5 months ago        541MB</span><br><span class="line">hello-world         latest              bf756fb1ae65        11 months ago       13.3kB</span><br><span class="line"><span class="meta">#</span><span class="bash"> 后台启动80端口nginx，对外开放3355端口</span></span><br><span class="line">[root@parak khighness]# docker run -d --name nginx1 -p 3355:80 nginx </span><br><span class="line">b6072408f44cd78594f01c95bc63da6baf911f74d62bf232ec42c1cd8b08b4d0</span><br><span class="line">[root@parak khighness]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES</span><br><span class="line">b6072408f44c        nginx               &quot;/docker-entrypoint.…&quot;   6 seconds ago       Up 4 seconds        0.0.0.0:3355-&gt;80/tcp   nginx1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试，可以用ip:3355在浏览器访问</span></span><br><span class="line">[root@parak khighness]# curl localhost:3355</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        width: 35em;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="🌠-安装Tomcat"><a href="#🌠-安装Tomcat" class="headerlink" title="🌠 安装Tomcat"></a>🌠 安装Tomcat</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@parak khighness]# docker pull tomcat:9.0</span><br><span class="line">9.0: Pulling from library/tomcat</span><br><span class="line">756975cb9c7e: Pull complete </span><br><span class="line">d77915b4e630: Pull complete </span><br><span class="line">5f37a0a41b6b: Pull complete </span><br><span class="line">96b2c1e36db5: Pull complete </span><br><span class="line">27a2d52b526e: Pull complete </span><br><span class="line">a867dba77389: Pull complete </span><br><span class="line">0939c055fb79: Pull complete </span><br><span class="line">0b0694ce0ae2: Pull complete </span><br><span class="line">81a5f8099e05: Pull complete </span><br><span class="line">c3d7917d545e: Pull complete </span><br><span class="line">Digest: sha256:a319b10d8729817c7ce0bcc2343a6f97711c7870395019340d96b6aafd6ccbea</span><br><span class="line">Status: Downloaded newer image for tomcat:9.0</span><br><span class="line">docker.io/library/tomcat:9.0</span><br><span class="line"></span><br><span class="line">[root@parak khighness]# docker run -d -p 3355:8080 --name tomcat1 tomcat</span><br><span class="line">48c7de09007af158b13a9bef1f2d2b77bed0c4bc2f93a4887eac427911118a9b</span><br><span class="line">[root@parak khighness]# docker exec -it tomcat1 /bin/bash</span><br><span class="line">root@48c7de09007a:/usr/local/tomcat# ls -al</span><br><span class="line">total 128</span><br><span class="line">drwxr-xr-x. 1 root root    30 Nov 19 06:16 .</span><br><span class="line">drwxr-xr-x. 1 root root    20 Nov 19 06:12 ..</span><br><span class="line">-rw-r--r--. 1 root root 18982 Nov 12 15:41 BUILDING.txt</span><br><span class="line">-rw-r--r--. 1 root root  5409 Nov 12 15:41 CONTRIBUTING.md</span><br><span class="line">-rw-r--r--. 1 root root 57092 Nov 12 15:41 LICENSE</span><br><span class="line">-rw-r--r--. 1 root root  2333 Nov 12 15:41 NOTICE</span><br><span class="line">-rw-r--r--. 1 root root  3257 Nov 12 15:41 README.md</span><br><span class="line">-rw-r--r--. 1 root root  6898 Nov 12 15:41 RELEASE-NOTES</span><br><span class="line">-rw-r--r--. 1 root root 16507 Nov 12 15:41 RUNNING.txt</span><br><span class="line">drwxr-xr-x. 2 root root  4096 Nov 19 06:16 bin</span><br><span class="line">drwxr-xr-x. 1 root root    22 Dec  5 13:15 conf</span><br><span class="line">drwxr-xr-x. 2 root root  4096 Nov 19 06:16 lib</span><br><span class="line">drwxrwxrwx. 1 root root   177 Dec  5 13:15 logs</span><br><span class="line">drwxr-xr-x. 2 root root   134 Nov 19 06:16 native-jni-lib</span><br><span class="line">drwxrwxrwx. 2 root root    30 Nov 19 06:16 temp</span><br><span class="line">drwxr-xr-x. 2 root root     6 Nov 19 06:16 webapps</span><br><span class="line">drwxr-xr-x. 7 root root    81 Nov 12 15:38 webapps.dist</span><br><span class="line">drwxrwxrwx. 2 root root     6 Nov 12 15:35 work</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以发现webapps目录为空</span></span><br><span class="line">root@48c7de09007a:/usr/local/tomcat# cd webapps</span><br><span class="line">root@48c7de09007a:/usr/local/tomcat/webapps# ls -l</span><br><span class="line">total 0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将webapps.list目录下的内容拷贝到webapps下，再用浏览器测试访问</span></span><br><span class="line">root@48c7de09007a:/usr/local/tomcat/webapps# cd ..</span><br><span class="line">root@48c7de09007a:/usr/local/tomcat# cd webapps.dist/</span><br><span class="line">root@48c7de09007a:/usr/local/tomcat/webapps.dist# ls</span><br><span class="line">ROOT  docs  examples  host-manager  manager</span><br><span class="line">root@48c7de09007a:/usr/local/tomcat/webapps.dist# cd ..</span><br><span class="line">root@48c7de09007a:/usr/local/tomcat# cp -r webapps.dist/* webapps/</span><br><span class="line">root@48c7de09007a:/usr/local/tomcat# cd webapps</span><br><span class="line">root@48c7de09007a:/usr/local/tomcat/webapps# ls</span><br><span class="line">ROOT  docs  examples  host-manager  manager</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试访问 <a href="http://192.168.117.155:3355/">http://192.168.117.155:3355/</a></p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/f5f9fa9b/image-20201205214537503.png" class="" title="image-20201205214537503">

<br>

<h3 id="🌠安装es-kibana"><a href="#🌠安装es-kibana" class="headerlink" title="🌠安装es + kibana"></a>🌠安装es + kibana</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> --net somenetwork 网络配置</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d --name es1 -p 9200:9200 -p 9300:9300 -e <span class="string">&quot;discovery.type=single-node&quot;</span> elasticsearch:7.6.2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看主机状态</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> doucker stats</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载并运行ES</span></span><br><span class="line">[root@parak khighness]#  docker run -d --name es1 -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; elasticsearch:7.6.2</span><br><span class="line">Unable to find image &#x27;elasticsearch:7.6.2&#x27; locally</span><br><span class="line">7.6.2: Pulling from library/elasticsearch</span><br><span class="line">ab5ef0e58194: Pull complete </span><br><span class="line">c4d1ca5c8a25: Pull complete </span><br><span class="line">941a3cc8e7b8: Pull complete </span><br><span class="line">43ec483d9618: Pull complete </span><br><span class="line">c486fd200684: Pull complete </span><br><span class="line">1b960df074b2: Pull complete </span><br><span class="line">1719d48d6823: Pull complete </span><br><span class="line">Digest: sha256:1b09dbd93085a1e7bca34830e77d2981521a7210e11f11eda997add1c12711fa</span><br><span class="line">Status: Downloaded newer image for elasticsearch:7.6.2</span><br><span class="line">51441d9abfb966c4baa0402ceb99e702f58ec68cd427710a2b8c8043983412e9</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看主机状态</span></span><br><span class="line">[root@parak khighness]# docker stats</span><br><span class="line">CONTAINER ID    NAME   CPU %   MEM USAGE/LIMIT  MEM %     NET I/O    BLOCK I/O      PIDS</span><br><span class="line">51441d9abfb9    es1   42.74%  495.6MiB/972.4MiB 50.97%    656B/0B   4.76GB/629MB     46</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止es1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker stop es1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除es1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker rm es1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 限制内存，启动ES</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d --name es1 -p 9200:9200 -p 9300:9300 -e <span class="string">&quot;discovery.type=single-node&quot;</span> -e ES_JAVA_OPTS=<span class="string">&quot;-Xms64m -Xmx512m&quot;</span> elasticsearch:7.6.2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新启动es1</span></span><br><span class="line">[root@parak khighness]# docker run -d --name es1 -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; -e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot; elasticsearch:7.6.2</span><br><span class="line">ca4494f52e5642d5992c49816b636b1858f2e2f5c1aaf38621c76001262e8e4d</span><br><span class="line"><span class="meta">#</span><span class="bash"> 再次查看状态</span></span><br><span class="line">[root@parak khighness]# docker stats</span><br><span class="line">CONTAINER ID    NAME   CPU %   MEM USAGE/LIMIT   MEM %     NET I/O   BLOCK I/O       PIDS</span><br><span class="line">ca4494f52e56    es1    0.68%   357.5MiB/972.4MiB 36.77%    737B/0B   476MB/1.78MB     45</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试访问</span></span><br><span class="line">[root@parak khighness]# curl localhost:9200</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;ca4494f52e56&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;docker-cluster&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;aDKZlZW_T7Ss3Dr0CXZQlQ&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;7.6.2&quot;,</span><br><span class="line">    &quot;build_flavor&quot; : &quot;default&quot;,</span><br><span class="line">    &quot;build_type&quot; : &quot;docker&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;ef48eb35cf30adf4db14086e8aabd07ef6fb113f&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2020-03-26T06:34:37.794943Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;8.4.0&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="📈可视化"><a href="#📈可视化" class="headerlink" title="📈可视化"></a>📈可视化</h2><p>Y1S1可视化面板的前端写的真好看，我爱了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装运行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 8088:9000 --name=pt --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=<span class="literal">true</span> portainer/portainer</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>访问测试 <a href="http://192.168.117.155:8088/">http://192.168.117.155:8088/</a></p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="Docker/image-20201205232646075.png" alt="image-20201205232646075"  />

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="Docker/image-20201206105337297.png" alt="image-20201206105337297"  />





<h2 id="📑DockerFile"><a href="#📑DockerFile" class="headerlink" title="📑DockerFile"></a>📑DockerFile</h2><p>DockerFile就是用来构建docker镜像的构建文件-命令脚本。</p>
<blockquote>
<p>命令</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">描述</th>
<th align="center">理解</th>
</tr>
</thead>
<tbody><tr>
<td align="center">FROM</td>
<td align="center">指定基础镜像</td>
<td align="center">公司的父公司</td>
</tr>
<tr>
<td align="center">MAINTAINER</td>
<td align="center">指定维护者信息</td>
<td align="center">公司注册信息</td>
</tr>
<tr>
<td align="center">RUN</td>
<td align="center">把命令前面加上RUN即可</td>
<td align="center">公司注册流程</td>
</tr>
<tr>
<td align="center">ADD</td>
<td align="center">COPY文件，会自动解压</td>
<td align="center">公司注册资金</td>
</tr>
<tr>
<td align="center">WORKDIR</td>
<td align="center">设置当前工作目录</td>
<td align="center">公司大楼仓库</td>
</tr>
<tr>
<td align="center">VOLUMN</td>
<td align="center">挂载主机目录</td>
<td align="center">公司的主仓库</td>
</tr>
<tr>
<td align="center">EXPOSE</td>
<td align="center">指定对外端口</td>
<td align="center">公司开放大门</td>
</tr>
<tr>
<td align="center">RUN</td>
<td align="center">进程要一直运行下去</td>
<td align="center">公司永不倒闭</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CMD</td>
<td align="center">指定这容器启动的时候要运行的命令只有最后一个会生效，可被替代。</td>
</tr>
<tr>
<td align="center">ENTRYPOINT</td>
<td align="center">指定这个容器启动的时候要运行的命令，可以追加命令。</td>
</tr>
<tr>
<td align="center">ONBUILD</td>
<td align="center">当构建一个被继承DockerFile这就会运行ONBUILD指令。触发指令.</td>
</tr>
<tr>
<td align="center">COPY</td>
<td align="center">类似ADD，将文件拷贝到镜像中。</td>
</tr>
<tr>
<td align="center">ENV</td>
<td align="center">构建的时候设置环境变量。</td>
</tr>
</tbody></table>
<blockquote>
<p>实例1-测试</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@parak home]# mkdir volume</span><br><span class="line">[root@parak home]# cd volume/</span><br><span class="line">[root@parak volume]# vim dockerfile1</span><br><span class="line">[root@parak volume]# cat dockerfile1 </span><br><span class="line">FROM centos</span><br><span class="line">VOLUME [&quot;volume01&quot;,&quot;volume02&quot;]</span><br><span class="line">CMD echo &quot;---end---&quot;</span><br><span class="line">CMD /bin/bash</span><br><span class="line">[root@parak volume]# docker build -f /home/volume/dockerfile1 -t khighness/centos:1.0 .</span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/4 : FROM centos</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 0d120b6ccaa8</span></span><br><span class="line">Step 2/4 : VOLUME [&quot;volume01&quot;,&quot;volume02&quot;]</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 79dc7b449286</span></span><br><span class="line">Removing intermediate container 79dc7b449286</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 9a6608557c9a</span></span><br><span class="line">Step 3/4 : CMD echo &quot;---end---&quot;</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 8b8c40056f99</span></span><br><span class="line">Removing intermediate container 8b8c40056f99</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 2158b18dedff</span></span><br><span class="line">Step 4/4 : CMD /bin/bash</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 9d76c3598d69</span></span><br><span class="line">Removing intermediate container 9d76c3598d69</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 240a84cdfbef</span></span><br><span class="line">Successfully built 240a84cdfbef</span><br><span class="line">Successfully tagged khighness/centos:1.0</span><br></pre></td></tr></table></figure>



<blockquote>
<p>实例2-构建自己的centos</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、编写DockerFile文件</span></span><br><span class="line">[root@parak dockerfile]# vim mydockerfile-centos</span><br><span class="line">[root@parak dockerfile]# cat mydockerfile-centos </span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER khighness&lt;1823676372@qq.com&gt;</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH </span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo &quot;---end---&quot;</span><br><span class="line">CMD /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、通过DockerFile构建镜像</span></span><br><span class="line">[root@parak dockerfile]# docker build -f mydockerfile-centos  -t mycentos:1.0 .</span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/10 : FROM centos</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 0d120b6ccaa8</span></span><br><span class="line">Step 2/10 : MAINTAINER khighness&lt;1823676372@qq.com&gt;</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 024da1b1d4cc</span></span><br><span class="line">Removing intermediate container 024da1b1d4cc</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 6c9b636504d2</span></span><br><span class="line">Step 3/10 : ENV MYPATH /usr/local</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 4046d4e257ac</span></span><br><span class="line">Removing intermediate container 4046d4e257ac</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> a5710fdc760e</span></span><br><span class="line">Step 4/10 : WORKDIR $MYPATH</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 252416d49e94</span></span><br><span class="line">Removing intermediate container 252416d49e94</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> fdbae7da4ca4</span></span><br><span class="line">Step 5/10 : RUN yum -y install vim</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 9eb786294022</span></span><br><span class="line">CentOS-8 - AppStream                            288 kB/s | 6.2 MB     00:22    </span><br><span class="line">CentOS-8 - Base                                 703 kB/s | 2.3 MB     00:03    </span><br><span class="line">CentOS-8 - Extras                               1.3 kB/s | 8.1 kB     00:06    </span><br><span class="line">Dependencies resolved.</span><br><span class="line">================================================================================</span><br><span class="line"> Package             Arch        Version                   Repository      Size</span><br><span class="line">================================================================================</span><br><span class="line">Installing:</span><br><span class="line"> vim-enhanced        x86_64      2:8.0.1763-15.el8         AppStream      1.4 M</span><br><span class="line">Installing dependencies:</span><br><span class="line"> gpm-libs            x86_64      1.20.7-15.el8             AppStream       39 k</span><br><span class="line"> vim-common          x86_64      2:8.0.1763-15.el8         AppStream      6.3 M</span><br><span class="line"> vim-filesystem      noarch      2:8.0.1763-15.el8         AppStream       48 k</span><br><span class="line"> which               x86_64      2.21-12.el8               BaseOS          49 k</span><br><span class="line"></span><br><span class="line">Transaction Summary</span><br><span class="line">================================================================================</span><br><span class="line">Install  5 Packages</span><br><span class="line"></span><br><span class="line">Total download size: 7.8 M</span><br><span class="line">Installed size: 30 M</span><br><span class="line">Downloading Packages:</span><br><span class="line">(1/5): gpm-libs-1.20.7-15.el8.x86_64.rpm        340 kB/s |  39 kB     00:00    </span><br><span class="line">(2/5): vim-filesystem-8.0.1763-15.el8.noarch.rp 664 kB/s |  48 kB     00:00    </span><br><span class="line">(3/5): which-2.21-12.el8.x86_64.rpm             315 kB/s |  49 kB     00:00    </span><br><span class="line">(4/5): vim-enhanced-8.0.1763-15.el8.x86_64.rpm  543 kB/s | 1.4 MB     00:02    </span><br><span class="line">(5/5): vim-common-8.0.1763-15.el8.x86_64.rpm    387 kB/s | 6.3 MB     00:16    </span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">Total                                           448 kB/s | 7.8 MB     00:17     </span><br><span class="line">warning: /var/cache/dnf/AppStream-02e86d1c976ab532/packages/gpm-libs-1.20.7-15.el8.x86_64.rpm: Header V3 RSA/SHA256 Signature, key ID 8483c65d: NOKEY</span><br><span class="line">CentOS-8 - AppStream                            1.6 MB/s | 1.6 kB     00:00    </span><br><span class="line">Importing GPG key 0x8483C65D:</span><br><span class="line"> Userid     : &quot;CentOS (CentOS Official Signing Key) &lt;security@centos.org&gt;&quot;</span><br><span class="line"> Fingerprint: 99DB 70FA E1D7 CE22 7FB6 4882 05B5 55B3 8483 C65D</span><br><span class="line"> From       : /etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial</span><br><span class="line">Key imported successfully</span><br><span class="line">Running transaction check</span><br><span class="line">Transaction check succeeded.</span><br><span class="line">Running transaction test</span><br><span class="line">Transaction test succeeded.</span><br><span class="line">Running transaction</span><br><span class="line">  Preparing        :                                                        1/1 </span><br><span class="line">  Installing       : which-2.21-12.el8.x86_64                               1/5 </span><br><span class="line">  Installing       : vim-filesystem-2:8.0.1763-15.el8.noarch                2/5 </span><br><span class="line">  Installing       : vim-common-2:8.0.1763-15.el8.x86_64                    3/5 </span><br><span class="line">  Installing       : gpm-libs-1.20.7-15.el8.x86_64                          4/5 </span><br><span class="line">  Running scriptlet: gpm-libs-1.20.7-15.el8.x86_64                          4/5 </span><br><span class="line">  Installing       : vim-enhanced-2:8.0.1763-15.el8.x86_64                  5/5 </span><br><span class="line">  Running scriptlet: vim-enhanced-2:8.0.1763-15.el8.x86_64                  5/5 </span><br><span class="line">  Running scriptlet: vim-common-2:8.0.1763-15.el8.x86_64                    5/5 </span><br><span class="line">  Verifying        : gpm-libs-1.20.7-15.el8.x86_64                          1/5 </span><br><span class="line">  Verifying        : vim-common-2:8.0.1763-15.el8.x86_64                    2/5 </span><br><span class="line">  Verifying        : vim-enhanced-2:8.0.1763-15.el8.x86_64                  3/5 </span><br><span class="line">  Verifying        : vim-filesystem-2:8.0.1763-15.el8.noarch                4/5 </span><br><span class="line">  Verifying        : which-2.21-12.el8.x86_64                               5/5 </span><br><span class="line"></span><br><span class="line">Installed:</span><br><span class="line">  gpm-libs-1.20.7-15.el8.x86_64         vim-common-2:8.0.1763-15.el8.x86_64    </span><br><span class="line">  vim-enhanced-2:8.0.1763-15.el8.x86_64 vim-filesystem-2:8.0.1763-15.el8.noarch</span><br><span class="line">  which-2.21-12.el8.x86_64             </span><br><span class="line"></span><br><span class="line">Complete!</span><br><span class="line">Removing intermediate container 9eb786294022</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 491907dac3e2</span></span><br><span class="line">Step 6/10 : RUN yum -y install net-tools</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 3a13d71952e5</span></span><br><span class="line">Last metadata expiration check: 0:00:24 ago on Mon Dec  7 11:45:38 2020.</span><br><span class="line">Dependencies resolved.</span><br><span class="line">================================================================================</span><br><span class="line"> Package         Architecture Version                        Repository    Size</span><br><span class="line">================================================================================</span><br><span class="line">Installing:</span><br><span class="line"> net-tools       x86_64       2.0-0.52.20160912git.el8       BaseOS       322 k</span><br><span class="line"></span><br><span class="line">Transaction Summary</span><br><span class="line">================================================================================</span><br><span class="line">Install  1 Package</span><br><span class="line"></span><br><span class="line">Total download size: 322 k</span><br><span class="line">Installed size: 942 k</span><br><span class="line">Downloading Packages:</span><br><span class="line">net-tools-2.0-0.52.20160912git.el8.x86_64.rpm   1.0 MB/s | 322 kB     00:00    </span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">Total                                           141 kB/s | 322 kB     00:02     </span><br><span class="line">Running transaction check</span><br><span class="line">Transaction check succeeded.</span><br><span class="line">Running transaction test</span><br><span class="line">Transaction test succeeded.</span><br><span class="line">Running transaction</span><br><span class="line">  Preparing        :                                                        1/1 </span><br><span class="line">  Installing       : net-tools-2.0-0.52.20160912git.el8.x86_64              1/1 </span><br><span class="line">  Running scriptlet: net-tools-2.0-0.52.20160912git.el8.x86_64              1/1 </span><br><span class="line">  Verifying        : net-tools-2.0-0.52.20160912git.el8.x86_64              1/1 </span><br><span class="line"></span><br><span class="line">Installed:</span><br><span class="line">  net-tools-2.0-0.52.20160912git.el8.x86_64                                     </span><br><span class="line"></span><br><span class="line">Complete!</span><br><span class="line">Removing intermediate container 3a13d71952e5</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 0d095f331d4a</span></span><br><span class="line">Step 7/10 : EXPOSE 80</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 66d8aceea20c</span></span><br><span class="line">Removing intermediate container 66d8aceea20c</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> a86402c5f9b7</span></span><br><span class="line">Step 8/10 : CMD echo $MYPATH</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> b6af3ea8ff6a</span></span><br><span class="line">Removing intermediate container b6af3ea8ff6a</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 17533352607f</span></span><br><span class="line">Step 9/10 : CMD echo &quot;---end---&quot;</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> f015d24c9277</span></span><br><span class="line">Removing intermediate container f015d24c9277</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> cf7d78851a04</span></span><br><span class="line">Step 10/10 : CMD /bin/bash</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> d0f70eaa39ec</span></span><br><span class="line">Removing intermediate container d0f70eaa39ec</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> d59930f07e43</span></span><br><span class="line">Successfully built d59930f07e43</span><br><span class="line">Successfully tagged mycentos:1.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、测试运行，官方的centos镜像中是没有网络命令和VIM命令的，而自己构建的centos中已经有</span></span><br><span class="line">[root@parak dockerfile]# docker run -it --name=mycen mycentos:1.0 </span><br><span class="line">[root@43b0b7eb76d8 local]# pwd</span><br><span class="line">/usr/local</span><br><span class="line">[root@43b0b7eb76d8 local]# vim test</span><br><span class="line">[root@43b0b7eb76d8 local]# cat test </span><br><span class="line">Khighness</span><br><span class="line">[root@43b0b7eb76d8 local]# ifconfig</span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.4  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class="line">        ether 02:42:ac:11:00:04  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 8  bytes 656 (656.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0    </span><br><span class="line">[root@43b0b7eb76d8 local]# exit</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、查看镜像的变更历史</span></span><br><span class="line">[root@parak dockerfile]# docker history mycentos:1.0 </span><br><span class="line">IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT</span><br><span class="line">d59930f07e43        23 minutes ago      /bin/sh -c #(nop)  CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;/bin…   0B          </span><br><span class="line">cf7d78851a04        23 minutes ago      /bin/sh -c #(nop)  CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;echo…   0B               </span><br><span class="line">17533352607f        23 minutes ago      /bin/sh -c #(nop)  CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;echo…   0B                  </span><br><span class="line">a86402c5f9b7        23 minutes ago      /bin/sh -c #(nop)  EXPOSE 80                    0B                  </span><br><span class="line">0d095f331d4a        23 minutes ago      /bin/sh -c yum -y install net-tools             23.2MB              </span><br><span class="line">491907dac3e2        23 minutes ago      /bin/sh -c yum -y install vim                   57.7MB              </span><br><span class="line">fdbae7da4ca4        24 minutes ago      /bin/sh -c #(nop) WORKDIR /usr/local            0B                  </span><br><span class="line">a5710fdc760e        24 minutes ago      /bin/sh -c #(nop)  ENV MYPATH=/usr/local        0B                  </span><br><span class="line">6c9b636504d2        24 minutes ago      /bin/sh -c #(nop)  MAINTAINER khighness&lt;1823…   0B                  </span><br><span class="line">0d120b6ccaa8        3 months ago        /bin/sh -c #(nop)  CMD [&quot;/bin/bash&quot;]            0B                  </span><br><span class="line">&lt;missing&gt;           3 months ago        /bin/sh -c #(nop)  LABEL org.label-schema.sc…   0B                  </span><br><span class="line">&lt;missing&gt;           3 months ago        /bin/sh -c #(nop) ADD file:538afc0c5c964ce0d…   215MB         </span><br></pre></td></tr></table></figure>



<blockquote>
<p>CMD和ENTRYPOINT的区别</p>
</blockquote>
<p><strong>测试CMD</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编写测试CMD的dockerfile</span></span><br><span class="line">[root@parak dockerfile]# vim dockerfile-cmd-test1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 内容就是一个CMD命令</span></span><br><span class="line">[root@parak dockerfile]# cat dockerfile-cmd-test1 </span><br><span class="line">FROM centos</span><br><span class="line">CMD [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建镜像</span></span><br><span class="line">[root@parak dockerfile]# docker build -f dockerfile-cmd-test1 -t cmdtest .</span><br><span class="line">Sending build context to Docker daemon  3.072kB</span><br><span class="line">Step 1/2 : FROM centos</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 0d120b6ccaa8</span></span><br><span class="line">Step 2/2 : CMD [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> e4df49ad7ca4</span></span><br><span class="line">Removing intermediate container e4df49ad7ca4</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 4be395747805</span></span><br><span class="line">Successfully built 4be395747805</span><br><span class="line">Successfully tagged cmdtest:latest</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行镜像就相当于运行CMD命令：ls -a</span></span><br><span class="line">[root@parak dockerfile]# docker run cmdtest</span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">lost+found</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br><span class="line"><span class="meta">#</span><span class="bash"> 追加命令-l，即ls -al</span></span><br><span class="line">[root@parak dockerfile]# docker run cmdtest -l</span><br><span class="line">docker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused &quot;exec: \&quot;-l\&quot;: executable file not found in $PATH&quot;: unknown.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>测试ENTRYPOINT</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编写测试ENTRYPOINT的dockerfile</span></span><br><span class="line">[root@parak dockerfile]# vim dockerfile-entrypoint-test1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 内容就是一个ENTRYPOINT命令</span></span><br><span class="line">[root@parak dockerfile]# cat dockerfile-entrypoint-test1 </span><br><span class="line">FROM centos</span><br><span class="line">ENTRYPOINT [&quot;ls&quot;, &quot;-a&quot;]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建镜像</span></span><br><span class="line">[root@parak dockerfile]# docker build -f dockerfile-entrypoint-test1 -t entrypointtest .</span><br><span class="line">Sending build context to Docker daemon  4.096kB</span><br><span class="line">Step 1/2 : FROM centos</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 0d120b6ccaa8</span></span><br><span class="line">Step 2/2 : ENTRYPOINT [&quot;ls&quot;, &quot;-a&quot;]</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 0aa9b4c97293</span></span><br><span class="line">Removing intermediate container 0aa9b4c97293</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 472d86e826d8</span></span><br><span class="line">Successfully built 472d86e826d8</span><br><span class="line">Successfully tagged entrypointtest:latest</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行镜像</span></span><br><span class="line">[root@parak dockerfile]# docker run entrypointtest</span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">lost+found</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br><span class="line"><span class="meta">#</span><span class="bash"> 追击命令-l，即ls -al</span></span><br><span class="line">[root@parak dockerfile]# docker run entrypointtest -l</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x.   1 root root   6 Dec  7 12:27 .</span><br><span class="line">drwxr-xr-x.   1 root root   6 Dec  7 12:27 ..</span><br><span class="line">-rwxr-xr-x.   1 root root   0 Dec  7 12:27 .dockerenv</span><br><span class="line">lrwxrwxrwx.   1 root root   7 May 11  2019 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x.   5 root root 340 Dec  7 12:27 dev</span><br><span class="line">drwxr-xr-x.   1 root root  66 Dec  7 12:27 etc</span><br><span class="line">drwxr-xr-x.   2 root root   6 May 11  2019 home</span><br><span class="line">lrwxrwxrwx.   1 root root   7 May 11  2019 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx.   1 root root   9 May 11  2019 lib64 -&gt; usr/lib64</span><br><span class="line">drwx------.   2 root root   6 Aug  9 21:40 lost+found</span><br><span class="line">drwxr-xr-x.   2 root root   6 May 11  2019 media</span><br><span class="line">drwxr-xr-x.   2 root root   6 May 11  2019 mnt</span><br><span class="line">drwxr-xr-x.   2 root root   6 May 11  2019 opt</span><br><span class="line">dr-xr-xr-x. 259 root root   0 Dec  7 12:27 proc</span><br><span class="line">dr-xr-x---.   2 root root 162 Aug  9 21:40 root</span><br><span class="line">drwxr-xr-x.  11 root root 163 Aug  9 21:40 run</span><br><span class="line">lrwxrwxrwx.   1 root root   8 May 11  2019 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x.   2 root root   6 May 11  2019 srv</span><br><span class="line">dr-xr-xr-x.  13 root root   0 Dec  6 08:24 sys</span><br><span class="line">drwxrwxrwt.   7 root root 145 Aug  9 21:40 tmp</span><br><span class="line">drwxr-xr-x.  12 root root 144 Aug  9 21:40 usr</span><br><span class="line">drwxr-xr-x.  20 root root 262 Aug  9 21:40 var</span><br></pre></td></tr></table></figure>

<br>

<h2 id="🔍镜像"><a href="#🔍镜像" class="headerlink" title="🔍镜像"></a>🔍镜像</h2><blockquote>
<p>概念</p>
</blockquote>
<p>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p>
<blockquote>
<p>UnionFS(联合文件系统)</p>
</blockquote>
<p>UnionFS: 联合文件系统是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(Unite several directions into a single virtual file system)。Union文件系统是Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像(没有父镜像)，可以制作各种具体的应用镜像。</p>
<p>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p>
<blockquote>
<p>Docker镜像加载原理</p>
</blockquote>
<p>Docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。</p>
<p>bootfs(boot file system)主要包含bootloader和kernel，bootloader主要是引导加载kernel，Linux刚启动时会在家bootfs文件系统，在Docker镜像的最底层是bootfs。这一层与我们典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存和使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</p>
<p>rootfs(root file system)，在bootfs之后。包含的就是典型Linux系统/dev，/proc，/bin，/etc等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu、CentOS等等。</p>
<blockquote>
<p>commit镜像</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker commit -m=<span class="string">&quot;&lt;messahe&gt;&quot;</span> -a=<span class="string">&quot;&lt;author&gt;&quot;</span> &lt;Container ID/NAME&gt; &lt;Target&gt;:&lt;Tag&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如，改装tomcat:9.0的镜像打包成自己的镜像k-tom:1.0</span></span><br><span class="line">[root@parak khighness]# docker commit -a=&quot;Khighness&quot; -m=&quot;Add web application&quot; tom1 k-tom:1.0</span><br><span class="line">sha256:fa4617c8771c81b890dc2a87c7be1d2b851c6ba92b053d0d1d8730b2006550c5</span><br><span class="line">[root@parak khighness]# docker images</span><br><span class="line">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">k-tom                 1.0                 fa4617c8771c        26 seconds ago      654MB</span><br><span class="line">nginx                 latest              bc9a0695f571        11 days ago         133MB</span><br><span class="line">tomcat                9.0                 e0bd8b34b4ea        2 weeks ago         649MB</span><br><span class="line">redis                 latest              74d107221092        2 weeks ago         104MB</span><br><span class="line">portainer/portainer   latest              62771b0b9b09        4 months ago        79.1MB</span><br><span class="line">elasticsearch         7.6.2               f29a1ee41030        8 months ago        791MB</span><br><span class="line">hello-world           latest              bf756fb1ae65        11 months ago       13.3kB</span><br></pre></td></tr></table></figure>

<br>

<h2 id="🌀容器数据卷"><a href="#🌀容器数据卷" class="headerlink" title="🌀容器数据卷"></a>🌀容器数据卷</h2><blockquote>
<p>概念</p>
</blockquote>
<p>目录挂载，将容器内的目录挂载在CentOS上</p>
<ul>
<li>Docker容器产生的数据同步到宿主机</li>
<li>数据卷可以在容器之间共享或重用数据</li>
</ul>
<blockquote>
<p>命令行挂载</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -it -v -p &lt;主机目录&gt;:&lt;容器目录&gt; </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如，将docker的centos容器目录/home/<span class="built_in">test</span>与宿主centos的/home/<span class="built_in">test</span>挂载起来</span></span><br><span class="line">[root@parak khighness]# docker run -it --name=cen -v /home/test:/home/test centos  /bin/bash</span><br><span class="line">Unable to find image &#x27;centos:latest&#x27; locally</span><br><span class="line">latest: Pulling from library/centos</span><br><span class="line">3c72a8ed6814: Pull complete </span><br><span class="line">Digest: sha256:76d24f3ba3317fa945743bb3746fbaf3a0b752f10b10376960de01da70685fbd</span><br><span class="line">Status: Downloaded newer image for centos:latest</span><br><span class="line">[root@4410a5c86528 /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@4410a5c86528 /]# cd home/</span><br><span class="line">[root@4410a5c86528 home]# ls</span><br><span class="line">test</span><br><span class="line">[khighness@parak ~]$ cd /home/</span><br><span class="line">[khighness@parak home]$ ls</span><br><span class="line">khighness  test</span><br><span class="line">[root@parak home]# docker inspect cen</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如下是挂载信息</span></span><br><span class="line">        &quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;bind&quot;,              # 类型：绑定</span><br><span class="line">                &quot;Source&quot;: &quot;/home/test&quot;,      # 容器目录</span><br><span class="line">                &quot;Destination&quot;: &quot;/home/test&quot;, # 主机目录</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;rprivate&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在容器的挂载目录下新建K1.java，在宿主机的挂载目录中可以直接看到</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/f5f9fa9b/image-20201206183841366.png" class="" title="image-20201206183841366">



<blockquote>
<p>安装MySQL</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载8.0.20版本的mysql镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker pull mysql:8.0.20</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动mysql服务</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -d 后台运行</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -v 挂载配置和数据</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -e MYSQL_ROOT)PASSWORD 设置密码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run --name ksql -d -p 3306:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=KAG1823 mysql:8.0.20</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决windows的navicat无法连接的问题</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入mysql客户端</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it ksql  bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 登录mysql</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysql -u root -pKAG1823</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重置密码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;KAG1823&#x27;</span>;</span></span><br></pre></td></tr></table></figure>

<br>

<h2 id="🌐Docker网络"><a href="#🌐Docker网络" class="headerlink" title="🌐Docker网络"></a>🌐Docker网络</h2><blockquote>
<p>实现原理</p>
</blockquote>
<p>Docker使用Linux桥接，在宿主机虚拟一个Docker容器网桥(Docker0)，Docker启动一个容器时会根据Docker网桥的网段分配给容器一个IP地址，称为Container-IP，同时Docker网桥是每个容器的默认网关。因为在同一宿主机内的容器都接入同一网桥。这样容器之间就能够通过容器的Contain-IP直接通信。</p>
<p>Docker网桥是宿主机虚拟出来的，并不是真实存在的网络设备，外部设备是无法寻址到的，这也意味着外部设备无法通过直接Container-IP访问到容器。如果容器希望外部访问到，可以通过映射容器端口到宿主主机（端口映射），即docker run创建容器时候通过-p或者-P参数来启动，访问容器的时候就通过[宿主机IP]:[容器端口]访问容器。</p>
<blockquote>
<p>网络模式</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">模式</th>
<th align="center">配置</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Bridge模式</td>
<td align="center">-net=bridge</td>
<td align="center">默认模式</td>
</tr>
<tr>
<td align="center">Host模式</td>
<td align="center">-net=host</td>
<td align="center">容器和宿主机共享Network NameSpace</td>
</tr>
<tr>
<td align="center">Container模式</td>
<td align="center">-net=container : NAME OR ID</td>
<td align="center">容器和另外一个容器共享Network NameSpace</td>
</tr>
<tr>
<td align="center">None模式</td>
<td align="center">-net=none</td>
<td align="center">容器有独立的Network NameSpace，但并没有对其进行任何网络设置，如分配veth pair 和网桥连接，配置IP等</td>
</tr>
</tbody></table>
<br>

<h3 id="1️⃣host模式"><a href="#1️⃣host模式" class="headerlink" title="1️⃣host模式"></a>1️⃣host模式</h3><p>如果启动容器的时候使用host模式，那么这个容器将不会获得一个独立的Network NameSpace，而是和宿主机共用一个Network NameSpace。容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口。但是，容器的其他方面，如文件系统、进程列表等还是和宿主机隔离的。</p>
<p>使用host模式的容器可以直接使用宿主机的IP地址与外界通信，容器内部的服务端口也可以使用宿主机的端口，不需要进行NAT，host最大的优势就是网络性能比较好，但是docker host上已经使用的端口就不能再用了，网络的隔离性不好。</p>
<br>

<h3 id="2️⃣container模式"><a href="#2️⃣container模式" class="headerlink" title="2️⃣container模式"></a>2️⃣container模式</h3><p>这个模式指定新创建的容器和已经存在的一个容器共享一个 Network NameSpace，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过 lo 网卡设备通信。</p>
<br>

<h3 id="3️⃣none模式"><a href="#3️⃣none模式" class="headerlink" title="3️⃣none模式"></a>3️⃣none模式</h3><p>使用none模式，Docker容器拥有自己的Network NameSpace，但是，并不为Docker容器进行任何网络配置。也就是说，这个Docker容器没有网卡、IP、路由等信息。需要我们自己为Docker容器添加网卡、配置IP等。</p>
<p>这种网络模式下容器只有lo回环网络，没有其他网卡。none模式可以在容器创建时通过–network=none来指定。这种类型的网络没有办法联网，封闭的网络能很好的保证容器的安全性。</p>
<br>

<h3 id="4️⃣bridge模式"><a href="#4️⃣bridge模式" class="headerlink" title="4️⃣bridge模式"></a>4️⃣bridge模式</h3><p>当Docker进程启动时，会在主机上创建一个名为docker0的虚拟网桥，此主机上启动的Docker容器会连接到这个虚拟网桥上。虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。</p>
<p>从docker0子网中分配一个IP给容器使用，并设置docker0的IP地址为容器的默认网关。在主机上创建一对虚拟网卡veth pair设备，Docker将veth pair设备的一端放在新创建的容器中，并命名为eth0（容器的网卡），另一端放在主机中，以vethxxx这样类似的名字命名，并将这个网络设备加入到docker0网桥中。可以通过brctl show命令查看。</p>
<p>bridge模式是docker的默认网络模式，不写–net参数，就是bridge模式。使用docker run -p时，docker实际是在iptables做了DNAT规则，实现端口转发功能。可以使用iptables -t nat -vnL查看。</p>
<blockquote>
<p>–link探究</p>
</blockquote>
<p>官方已经不推荐使用，我们可以了解一下。</p>
<p>2个容器之间互相访问通信：<code>docker run &lt;container1-id/name&gt; --link &lt;container2-id/name&gt; &lt;image&gt;</code></p>
<p>使用这个命令启动容器2的时候，容器便可以ping通容器1，但是反向ping不通。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建容器tom1</span></span><br><span class="line">[root@parak khighness]# docker run -d -p 3356:8080 --name tom1 tomcat:9.0 </span><br><span class="line">dd615d6d2ccb9467aad8ba008ece995588680d849b9f61945b10de5c3475f671</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用--link创建容器2</span></span><br><span class="line">[root@parak khighness]# docker run -d -p 3357:8081 --name tom2 --link tom1  tomcat:9.0 </span><br><span class="line">b2c17969a2cb4407bb1a61a53703a38998a11db01ce516feb70e397b42af6ad3</span><br><span class="line"><span class="meta">#</span><span class="bash"> tom1不能ping通tom2</span></span><br><span class="line">[root@parak khighness]# docker exec -it tom1 ping tom2</span><br><span class="line">ping: tom2: Name or service not known</span><br><span class="line"><span class="meta">#</span><span class="bash"> tom2可以ping通tom1</span></span><br><span class="line">[root@parak khighness]# docker exec -it tom2 ping tom1</span><br><span class="line">PING tom1 (172.17.0.4) 56(84) bytes of data.</span><br><span class="line">64 bytes from tom1 (172.17.0.4): icmp_seq=1 ttl=64 time=0.161 ms</span><br><span class="line">64 bytes from tom1 (172.17.0.4): icmp_seq=2 ttl=64 time=0.108 ms</span><br><span class="line">64 bytes from tom1 (172.17.0.4): icmp_seq=3 ttl=64 time=0.122 ms</span><br><span class="line">^C</span><br><span class="line">--- tom1 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 4ms</span><br><span class="line">rtt min/avg/max/mdev = 0.108/0.130/0.161/0.024 ms</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看tom2内部的hosts文件</span></span><br><span class="line">[root@parak khighness]# docker exec -it tom2 cat /etc/hosts</span><br><span class="line">127.0.0.1	localhost</span><br><span class="line">::1	localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0	ip6-localnet</span><br><span class="line">ff00::0	ip6-mcastprefix</span><br><span class="line">ff02::1	ip6-allnodes</span><br><span class="line">ff02::2	ip6-allrouters</span><br><span class="line">172.17.0.4	tom1 dd615d6d2ccb # ==&gt; 根源：本质就是tom2就是在本地配置了tom1的域名IP解析。</span><br><span class="line">172.17.0.5	b2c17969a2cb</span><br></pre></td></tr></table></figure>



<blockquote>
<p>自定义网络</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建网络</span></span><br><span class="line">[root@parak khighness]# docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span><br><span class="line">abaebdc493149a140ee77965274885adea3882bf117c4f8e61e4034730c3b890</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看网络</span></span><br><span class="line">[root@parak khighness]# docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">4399361ba4a9        bridge              bridge              local</span><br><span class="line">65f0ec2bfb42        host                host                local</span><br><span class="line">abaebdc49314        mynet               bridge              local</span><br><span class="line">feab1dfce431        none                null                local</span><br><span class="line"><span class="meta">#</span><span class="bash"> 详细信息</span></span><br><span class="line">[root@parak khighness]# docker network inspect mynet </span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;mynet&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;abaebdc493149a140ee77965274885adea3882bf117c4f8e61e4034730c3b890&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2020-12-10T16:12:08.563828418+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;192.168.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;192.168.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在mynet下启动tomcat1</span></span><br><span class="line">[root@parak khighness]# docker run -d -it -p 8080:3355 --net mynet --name mynet-tom1 tomcat:9.0 </span><br><span class="line">4d799757f01f560af7fd44d610b7fdabd1e0f66ef528bf1259f09242bddbb636</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在mynet下启动tomcat2</span></span><br><span class="line">[root@parak khighness]# docker run -d -it -p 8081:3356 --net mynet --name mynet-tom2 tomcat:9.0 </span><br><span class="line">15c045f96d5b7b2ee2e470cb69e5b1f86511929f7ed05ed8f20db26ef4b975af</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用mynet-tom2 ping mynet-tom1</span></span><br><span class="line">[root@parak khighness]# docker exec -it mynet-tom2 ping mynet-tom1</span><br><span class="line">PING mynet-tom1 (192.168.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from mynet-tom1.mynet (192.168.0.2): icmp_seq=1 ttl=64 time=0.068 ms</span><br><span class="line">64 bytes from mynet-tom1.mynet (192.168.0.2): icmp_seq=2 ttl=64 time=0.042 ms</span><br><span class="line">64 bytes from mynet-tom1.mynet (192.168.0.2): icmp_seq=3 ttl=64 time=0.055 ms</span><br><span class="line">--- mynet-tom1 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 4ms</span><br><span class="line">rtt min/avg/max/mdev = 0.042/0.055/0.068/0.010 ms</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用mynet-tom1 ping mynet-tom2</span></span><br><span class="line">[root@parak khighness]# docker exec -it mynet-tom1 ping mynet-tom2</span><br><span class="line">PING mynet-tom2 (192.168.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from mynet-tom2.mynet (192.168.0.3): icmp_seq=1 ttl=64 time=0.036 ms</span><br><span class="line">64 bytes from mynet-tom2.mynet (192.168.0.3): icmp_seq=2 ttl=64 time=0.048 ms</span><br><span class="line">64 bytes from mynet-tom2.mynet (192.168.0.3): icmp_seq=3 ttl=64 time=0.058 ms</span><br><span class="line">--- mynet-tom2 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 2ms</span><br><span class="line">rtt min/avg/max/mdev = 0.036/0.047/0.058/0.010 ms</span><br></pre></td></tr></table></figure>

<p>自定义网络自动维护好容器的网络关系！</p>
<blockquote>
<p>网络连通</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在Docker0网络启动tomcat</span></span><br><span class="line">[root@parak khighness]# docker run -d -it -p 8082:3357 --name tom1 tomcat:9.0 </span><br><span class="line">0344f04baab2eaeaac0118dac7a93d8b2d77946636c76ed3bde804cbeda836be</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试tom1 ping mynet—tom1</span></span><br><span class="line">[root@parak khighness]# docker exec tom1 ping mynet-tom1</span><br><span class="line">ping: mynet-tom1: Name or service not known</span><br><span class="line"><span class="meta">#</span><span class="bash"> 连通mynet - tom1</span></span><br><span class="line">[root@parak khighness]# docker network connect mynet tom1 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看mynet1的详细信息</span></span><br><span class="line">[root@parak khighness]# docker inspect mynet</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;mynet&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;abaebdc493149a140ee77965274885adea3882bf117c4f8e61e4034730c3b890&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2020-12-10T16:12:08.563828418+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;192.168.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;192.168.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">        	# 发现mynet将tom1放到了mynet网络下，即一个容器，两个IP</span><br><span class="line">            &quot;0344f04baab2eaeaac0118dac7a93d8b2d77946636c76ed3bde804cbeda836be&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;tom1&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;8911ad05a9b0d7d0effbf50c82659f36b82d21e18f992359b09494073dddd969&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:04&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;192.168.0.4/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;15c045f96d5b7b2ee2e470cb69e5b1f86511929f7ed05ed8f20db26ef4b975af&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;mynet-tom2&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;907f16284e90be0d880a999b29210d1cd82adb2c79b4179eeb1d70d75130362a&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:03&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;192.168.0.3/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;4d799757f01f560af7fd44d610b7fdabd1e0f66ef528bf1259f09242bddbb636&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;mynet-tom1&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;6529ef4fc05dffe65fe875fdf15f2f4a61665c4d969767db94dd828baf88b323&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;192.168.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 再次测试tom1 ping mynet—tom1</span></span><br><span class="line">[root@parak khighness]# docker exec -it tom1 ping mynet-tom1</span><br><span class="line">PING mynet-tom1 (192.168.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from mynet-tom1.mynet (192.168.0.2): icmp_seq=1 ttl=64 time=0.097 ms</span><br><span class="line">64 bytes from mynet-tom1.mynet (192.168.0.2): icmp_seq=2 ttl=64 time=0.052 ms</span><br><span class="line">64 bytes from mynet-tom1.mynet (192.168.0.2): icmp_seq=3 ttl=64 time=0.053 ms</span><br><span class="line">--- mynet-tom1 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 3ms</span><br><span class="line">rtt min/avg/max/mdev = 0.052/0.067/0.097/0.022 ms</span><br></pre></td></tr></table></figure>

<br>

<h2 id="💠Redis集群部署"><a href="#💠Redis集群部署" class="headerlink" title="💠Redis集群部署"></a>💠Redis集群部署</h2><blockquote>
<p>shell脚本</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建网卡</span></span><br><span class="line">docker network create redis --subnet 172.38.0.0/16</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过脚本创建六个redis配置</span></span><br><span class="line">for port in $(seq 1 6); \</span><br><span class="line">do \</span><br><span class="line">mkdir -p /mydata/redis/node-$&#123;port&#125;/conf</span><br><span class="line">touch /mydata/redis/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="line">cat &lt;&lt; EOF &gt;&gt;/mydata/redis/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="line">port 6379</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">cluster-announce-ip 172.38.0.1$&#123;port&#125;</span><br><span class="line">cluster-announce-port 6379</span><br><span class="line">cluster-announce-bus-port 16379</span><br><span class="line">appendonly yes</span><br><span class="line">EOF</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行redis</span></span><br><span class="line">for port in $(seq 1 6); \</span><br><span class="line">do</span><br><span class="line">docker run -p 637$&#123;port&#125;:6379 -p 1637$&#123;port&#125;:16379 --name redis-$&#123;port&#125; \</span><br><span class="line">-v /mydata/redis/node-$&#123;port&#125;/data:/data \</span><br><span class="line">-v /mydata/redis/node-$&#123;port&#125;/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.1$&#123;port&#125; redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入redis-1</span></span><br><span class="line">docker exec -it redis-1 /bin/sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 搭建集群</span></span><br><span class="line">redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止集群</span></span><br><span class="line">for port in $(seq 1 6); \</span><br><span class="line">do</span><br><span class="line">docker stop redis-$&#123;port&#125; </span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动集群</span></span><br><span class="line">for port in $(seq 1 6); \</span><br><span class="line">do </span><br><span class="line">docker start redis-$&#123;port&#125; </span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<br>

<h2 id="💨SpringBoot测试"><a href="#💨SpringBoot测试" class="headerlink" title="💨SpringBoot测试"></a>💨SpringBoot测试</h2><blockquote>
<p>步骤</p>
</blockquote>
<ul>
<li>构建SpringBoot项目</li>
<li>打包web应用</li>
<li>编写dockerfile</li>
<li>构建镜像</li>
<li>发布运行</li>
</ul>
<blockquote>
<p>编写Controller</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(<span class="meta">@PathVariable(&quot;name&quot;)</span> String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot;\n\n&quot;</span> + <span class="string">&quot; -from KHighness&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过maven的package打包</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[INFO] Scanning for projects...</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --------------------------&lt; top.parak:hello &gt;---------------------------</span><br><span class="line">[INFO] Building hello 1.0-SNAPSHOT</span><br><span class="line">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class="line">[INFO] --- maven-resources-plugin:3.1.0:resources (default-resources) @ hello ---</span><br><span class="line">[INFO] Using &#x27;UTF-8&#x27; encoding to copy filtered resources.</span><br><span class="line">[INFO] Copying 0 resource</span><br><span class="line">[INFO] Copying 0 resource</span><br><span class="line">[INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ hello ---</span><br><span class="line">[INFO] Changes detected - recompiling the module!</span><br><span class="line">[INFO] Compiling 2 source files to C:\Users\18236\Desktop\Recent\hello\target\classes</span><br><span class="line">[INFO] --- maven-resources-plugin:3.1.0:testResources (default-testResources) @ hello ---</span><br><span class="line">[INFO] Using &#x27;UTF-8&#x27; encoding to copy filtered resources.</span><br><span class="line">[INFO] skip non existing resourceDirectory C:\Users\18236\Desktop\Recent\hello\src\test\resources</span><br><span class="line">[INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ hello ---</span><br><span class="line">[INFO] No sources to compile</span><br><span class="line">[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ hello ---</span><br><span class="line">[INFO] No tests to run.</span><br><span class="line">[INFO] --- maven-jar-plugin:3.1.2:jar (default-jar) @ hello ---</span><br><span class="line">[INFO] Building jar: C:\Users\18236\Desktop\Recent\hello\target\hello-1.0-SNAPSHOT.jar</span><br><span class="line">[INFO] --- spring-boot-maven-plugin:2.2.5.RELEASE:repackage (repackage) @ hello ---</span><br><span class="line">[INFO] Replacing main artifact with repackaged archive</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  5.534 s</span><br><span class="line">[INFO] Finished at: 2020-12-10T17:54:11+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>

<blockquote>
<p>编写Dockerfile</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM java:8</span><br><span class="line"></span><br><span class="line">COPY *.jar /app.jar</span><br><span class="line"></span><br><span class="line">CMD [&quot;--server.port=8080&quot;]</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;/app.jar&quot;]</span><br></pre></td></tr></table></figure>

<p>通过Xftp将构建好的jar包和DockerFile发送到虚拟机</p>
<blockquote>
<p>构建镜像</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@parak hello]# docker build -t hello .</span><br><span class="line">Sending build context to Docker daemon   17.6MB</span><br><span class="line">Step 1/5 : FROM java:8</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> d23bdf5b1b1b</span></span><br><span class="line">Step 2/5 : COPY *.jar /app.jar</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 34774df7a107</span></span><br><span class="line">Step 3/5 : CMD [&quot;--server.port=8080&quot;]</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> [Warning] IPv4 forwarding is disabled. Networking will not work.</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 11d95474e047</span></span><br><span class="line">Removing intermediate container 11d95474e047</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> e8b6fa21a3a0</span></span><br><span class="line">Step 4/5 : EXPOSE 8080</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> [Warning] IPv4 forwarding is disabled. Networking will not work.</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 896cc7d50875</span></span><br><span class="line">Removing intermediate container 896cc7d50875</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> b139242b232d</span></span><br><span class="line">Step 5/5 : ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;/app.jar&quot;]</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> [Warning] IPv4 forwarding is disabled. Networking will not work.</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 562f3bb605a0</span></span><br><span class="line">Removing intermediate container 562f3bb605a0</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 1d28463205d5</span></span><br><span class="line">Successfully built 1d28463205d5</span><br><span class="line">Successfully tagged hello:latest</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行镜像</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@parak hello]# docker run -d -it -p 8001:8080 hello</span><br><span class="line">7e19b364789de18c736c51e5c84d611e7474d3a733f188220dfd7cc011e55729</span><br><span class="line">[root@parak hello]# curl http://192.168.117.155:8001/hello/KKK</span><br><span class="line">Hello, KKK</span><br><span class="line"></span><br><span class="line"> -from KHighness</span><br></pre></td></tr></table></figure>

<br>

<h2 id="⭕相关问题"><a href="#⭕相关问题" class="headerlink" title="⭕相关问题"></a>⭕相关问题</h2><blockquote>
<p>解决问题1: WARNING: IPv4 forwarding is disabled. Networking will not work.</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;net.ipv4.ip_forward=1&quot;</span> &gt;&gt;/usr/lib/sysctl.d/00-system.conf</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart network &amp;&amp; systemctl restart docker</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>解决问题2: 使用阿里云服务器运行一个容器，外部IP不能访问</p>
</blockquote>
<p>需要在阿里云服务器配置防火墙相关端口对外开放。</p>
<p>比如跑一个开放端口为3333的springboot应用需要在阿里云服务器控制台的防火墙添加规则:</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/f5f9fa9b/image-20201211233834182.png" class="" title="image-20201211233834182">



]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>负距离</title>
    <url>/posts/33422a09/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/33422a09/bg.jpg" class="" title="bg">



<p>想是因为久了所以记不起了，想是因为空气湿了不是眼眶红了。</p>
<p>我看见凋零的枫，天空的颜色比油彩更凝重，大块白色的浮云掠过，那栋灰色的建筑闪烁香槟色的光芒，我从未怀疑过自己在梦里。</p>
<p>两年以来，自己是否成长，又是否改变？当初懵懂的选择，中间努力的迷茫，而今这已是一条不归路。</p>
<p>每个人的身体和意志，总有被环境的牢笼禁锢那一部分，想施展拳脚就各种Error。</p>
<p>或许人都应该做到张弛有度，速度不缓不急，自有安排妥当的节奏，该收敛的时候不逞强，该出击的时候不犹豫，该保留的时候不盲目，该竭力的时候不气短。</p>
<p>2020，惟愿信念使自己超越。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT</title>
    <url>/posts/1bb08f7a/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="📖官方文档"><a href="#📖官方文档" class="headerlink" title="📖官方文档"></a>📖官方文档</h2><blockquote>
<p>🌐官方文档</p>
</blockquote>
<p>👉<a href="https://jwt.io/introduction/">JWT</a></p>
<blockquote>
<p>💰JWT概述</p>
</blockquote>
<p><strong>JSON Web Token</strong>是一个开放标准（RFC 7519），它定义了一种紧凑且包含的方式，用于在各方之间安全地传输信息作为JSON对象。由于此信息是经过数字签名的，用于在各方面之间安全地传输信息作为JSON对象。由于此信息是经过数字签名地，因此可以被验证和信任。可以使用秘密（或者<strong>HMAC</strong>算法）或使用<strong>RSA</strong>或<strong>ECDSA</strong>的公钥/私钥对对JWT进行签名。</p>
<p>尽管可以对JWT进行加密以提供双方之间的保密性，但我们将重点关注已签名的令牌。签名的令牌可以验证其中包含的声明的完整性，而加密的令牌则将这些声明隐藏在其他方的面前。当使用公钥/私钥对对令牌进行签名时，签名还证明只有持有私钥的一方才是对其进行签名的一方。</p>
<br>

<a id="more"></a>



<blockquote>
<p>🔱应用场景</p>
</blockquote>
<ul>
<li>授权认证：使用JWT的最常见方案。一旦用户登录，每个后续请求将包括令牌，从而允许用户访问该令牌允许的路由、服务和资源。单点登录是当今广泛使用JWT的一项功能，因为它的开销很小并且可以在不同的域中轻松使用。</li>
<li>信息交换：JWT是在各方之间安全地传输信息的一种好方法。因为可以对JWT进行签名，例如使用公钥/私钥对。此外。由于签名是使用标头和有效负载计算的，因此还可以验证内容是否遭到篡改。</li>
</ul>
<br>

<h2 id="🚀认证流程"><a href="#🚀认证流程" class="headerlink" title="🚀认证流程"></a>🚀认证流程</h2><blockquote>
<p>⛔️session认证</p>
</blockquote>
<p>传统方式：用户第一次请求登录时候设置session，此后每次访问携带cookie。</p>
<p>问题：</p>
<ul>
<li>每个用户经过我们的应用认证之后，我们的应用都要在服务端做一次记录，以方便用户下次请求的鉴别，通常而言session都是保存在内存中，而随着用户的增多，服务端的开销会明显增大。</li>
<li>用户认证之后，服务端做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须要请求在这台服务器上，这样才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡器的能力，这也意味着限制了应用的扩展能力。</li>
<li>因为是基于cookie来进行用户识别的，cookie如何被截获，用户很容易受到跨站请求伪造的攻击。</li>
</ul>
<br>

<blockquote>
<p>🔰JWT认证</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/1bb08f7a/JWT%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B.png" class="" title="JWT认证">

<p>认证流程：</p>
<p>首先，前端通过web表单将自己的用户名和密码发送到后端的接口，这一过程一般是一个Http POST请求。</p>
<p>后端核对用户名和密码成功后，将用户的id等其他信息作为JWT payload(负载)，将其与头部分别进行Based64编码拼接后签名，形成一个JWT。形成的JWT就形同xxx.yyy.zzz的字符串。</p>
<p>后端将JWT字符串作为登陆成功的返回结果返回给前端，前端可以将返回的结果保存在localStorage上，退出登录时前端删除保存的JWT即可。</p>
<p>前端在每次请求时将JWT放入HTTP Header的Authorization位。（解决XSS和XSRF问题）</p>
<p>后端检查是否存在，如存在验证JWT的有效性。（签名是否正确，Token是否过期等）</p>
<p>验证通过后后端使用JWT中包含的用户信息进行其他逻辑操作，并返回相应结果。</p>
<p>优势：</p>
<ul>
<li>简洁，可以通过URL，POST参数或者在HTTP Header发送，因为数据量小，传输速度也很快</li>
<li>自包含：负载中包含了所有用户所需要的信息，避免了多次查询数据库</li>
<li>因为Token是JSON加密的形式保存在客户端的，所以JWT是跨语言的，原则上任何web形式都支持</li>
<li>不需要再服务端保存会话信息，特别适合用于分布式微服务</li>
</ul>
<br>

<blockquote>
<p>⛓令牌结构</p>
</blockquote>
<p>JSON Web Token以紧凑的形式由三部分组成，三部分由<code>.</code>分隔，即<code>xxxxx.yyyyy.zzzzz</code></p>
<ul>
<li><p>标头(Header)  : Base64编码，由令牌类型和签名算法组成</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;alg&quot;</span>: <span class="string">&quot;HS256&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>负载(Payload) : Base64编码，用于放置携带信息，不能放敏感信息</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;Khighness&quot;</span></span><br><span class="line">    <span class="string">&quot;admin&quot;</span>:<span class="literal">true</span></span><br><span class="line">    <span class="string">&quot;gender&quot;</span>:<span class="string">&quot;male&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>签名(Signature) : 对标头和负载进行签名，防止内容被篡改</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">HMACSHA256(baseUrlEncode(header)) + &quot;.&quot; + base64UrlEncode(payload).secret)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<br>

<h2 id="💻JWT-Demo"><a href="#💻JWT-Demo" class="headerlink" title="💻JWT-Demo"></a>💻JWT-Demo</h2><blockquote>
<p>➕添加依赖</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JWT --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jwt.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>📑Java代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">generateToken</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    Calendar calendar = Calendar.getInstance();</span><br><span class="line">    calendar.add(Calendar.SECOND, <span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">    String token = JWT.create()</span><br><span class="line">            .withHeader(map)                                     <span class="comment">// Header</span></span><br><span class="line">            .withClaim(<span class="string">&quot;userID&quot;</span>, <span class="number">1011</span>)              <span class="comment">// Payload</span></span><br><span class="line">            .withClaim(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;KHighness&quot;</span>)</span><br><span class="line">            .withExpiresAt(calendar.getTime())                  <span class="comment">// 指定令牌过期时间: 60S</span></span><br><span class="line">            .sign(Algorithm.HMAC256(<span class="string">&quot;PARAK&quot;</span>));                 <span class="comment">// Signature，设置密钥PARAK</span></span><br><span class="line"></span><br><span class="line">    System.out.println(token);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;验证令牌&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">verifyToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    JWTVerifier jwtVerifier = JWT.require(Algorithm.HMAC512(<span class="string">&quot;PARAK&quot;</span>)).build();</span><br><span class="line">    String token = <span class="string">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MDU5NDU0ODQsInVzZXJJRCI6MTAxMSwidXNlcm5hbWUiOiJLSGlnaG5lc3MifQ.Gvwa3vu_LYogcEPFxKOgFgaH6WnTKoo-UDW977W1GAw&quot;</span>;</span><br><span class="line">    DecodedJWT verify = jwtVerifier.verify(token);</span><br><span class="line">    System.out.println(verify.getClaim(<span class="string">&quot;userID&quot;</span>).asInt());</span><br><span class="line">    System.out.println(verify.getClaim(<span class="string">&quot;username&quot;</span>).asString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>❗️ 常见异常</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">异常</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">TokenExpiredException</td>
<td align="center">令牌过期异常</td>
</tr>
<tr>
<td align="center">SignatureVerificationException</td>
<td align="center">签名不一致异常</td>
</tr>
<tr>
<td align="center">AlgorithmMismatchException</td>
<td align="center">加密算法不匹配异常</td>
</tr>
<tr>
<td align="center">InvalidClaimException</td>
<td align="center">失效的负载异常</td>
</tr>
</tbody></table>
<br>

<h2 id="🍃整合Springboot"><a href="#🍃整合Springboot" class="headerlink" title="🍃整合Springboot"></a>🍃整合Springboot</h2><blockquote>
<p>💬说明</p>
</blockquote>
<p>用户在第一次登陆的时候，后台生成token返回给前端存储在sessionStorage中，此后每次前端需要调用后端需要认证的接口时都把token取出来携带在http header中。后台设置拦截器，设置需要认证才能访问的接口，每次处理请求时，先从request的http header中取出token进行认证，通过后才进行相关接口处理。</p>
<br>

<blockquote>
<p>🔧封装工具类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWT;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWTCreator;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: Springboot-JWT &lt;/P&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.common &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: KKJWTUtil &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: JWT工具类 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KKJWTUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;签名的密钥[<span class="doctag">@NAME</span>]&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String secret = <span class="string">&quot;@KHIGHNESS&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;签名的过期时间[A Week]&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> accessTokenExpireTime = <span class="number">604800</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;令牌颁布者身份标识[DOMAIN]&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String issuer = <span class="string">&quot;parak.top&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;生成Token&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chaims</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateToken</span><span class="params">(Map&lt;String, String&gt; chaims)</span> </span>&#123;</span><br><span class="line">        JWTCreator.Builder builder = JWT.create();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 添加负载 */</span></span><br><span class="line">        chaims.forEach((k, v) -&gt; &#123;</span><br><span class="line">            builder.withClaim(k, v);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 设置过期时间 */</span></span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        calendar.add(Calendar.SECOND, accessTokenExpireTime);</span><br><span class="line">        builder.withExpiresAt(calendar.getTime());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 设置颁发者身份 */</span></span><br><span class="line">        builder.withIssuer(issuer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 设置加密算法以及密钥 */</span></span><br><span class="line">        String token = builder.sign(Algorithm.HMAC256(secret));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;解析token&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DecodedJWT <span class="title">verifyToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JWT.require(Algorithm.HMAC256(secret)).build().verify(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>用户控制器</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.ObjectUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> top.parak.common.KKCondition;</span><br><span class="line"><span class="keyword">import</span> top.parak.common.KKDataResponse;</span><br><span class="line"><span class="keyword">import</span> top.parak.common.KKJWTUtil;</span><br><span class="line"><span class="keyword">import</span> top.parak.entity.User;</span><br><span class="line"><span class="keyword">import</span> top.parak.service.UserService;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     用户控制层</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-11-19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;用户注册&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KKDataResponse <span class="title">register</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> User user)</span> </span>&#123;</span><br><span class="line">        String username = user.getUsername();</span><br><span class="line">        String password = user.getPassword();</span><br><span class="line">        log.info(<span class="string">&quot;用户注册 =&gt; [&#123;&#125;]&quot;</span>, username);</span><br><span class="line">        KKCondition condition = <span class="keyword">new</span> KKCondition();</span><br><span class="line">        condition.setName(username);</span><br><span class="line">        <span class="keyword">if</span> (!ObjectUtils.isEmpty(userService.queryUserInCondition(condition))) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;用户名&#123;&#125;已被注册，不可重复注册&quot;</span>, username);</span><br><span class="line">            <span class="keyword">return</span> KKDataResponse.errorResponse(<span class="string">&quot;该用户名已被注册，不可重复注册&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userService.saveUser(username, password) == <span class="number">1</span> ? KKDataResponse.successResponse(<span class="keyword">true</span>) : KKDataResponse.errorResponse(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;用户登录&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loginDataJson</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KKDataResponse <span class="title">login</span><span class="params">(<span class="meta">@RequestBody</span> String loginDataJson)</span> </span>&#123;</span><br><span class="line">        JSONObject loginData = JSON.parseObject(loginDataJson);</span><br><span class="line">        String username = loginData.get(<span class="string">&quot;username&quot;</span>).toString();</span><br><span class="line">        String password = loginData.get(<span class="string">&quot;password&quot;</span>).toString();</span><br><span class="line">        log.info(<span class="string">&quot;用户登录 =&gt; [&#123;&#125;]&quot;</span>, username);</span><br><span class="line">        Map&lt;String, Object&gt; response = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (userService.authenticate(username, password)) &#123;</span><br><span class="line">            response.put(<span class="string">&quot;loginState&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">/* 生成令牌 */</span></span><br><span class="line">            Map&lt;String, String&gt; payload = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            payload.put(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line">            String token = KKJWTUtil.generateToken(payload);</span><br><span class="line">            response.put(<span class="string">&quot;kktoken&quot;</span>, token);</span><br><span class="line">            <span class="keyword">return</span> KKDataResponse.successResponse(response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response.put(<span class="string">&quot;loginState&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">            response.put(<span class="string">&quot;kktoken&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> KKDataResponse.errorResponse(response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KKDataResponse <span class="title">test</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String kktoken = (String) request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        DecodedJWT verify = KKJWTUtil.verifyToken(kktoken);</span><br><span class="line">        String username = verify.getClaim(<span class="string">&quot;username&quot;</span>).asString();</span><br><span class="line">        log.info(<span class="string">&quot;请求用户 =&gt; [&#123;&#125;]&quot;</span>, username);</span><br><span class="line">        <span class="keyword">return</span> KKDataResponse.successResponse(<span class="string">&quot;请求成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>设置拦截器</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.AlgorithmMismatchException;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.InvalidClaimException;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.SignatureVerificationException;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.TokenExpiredException;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> top.parak.common.JwtTokenUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: Springboot-JWT &lt;/P&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.interceptor &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: JWTInterceptor &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 令牌拦截器 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JWTInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String kktoken = request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;请求令牌 =&gt; [&#123;&#125;]&quot;</span>, kktoken);</span><br><span class="line">            DecodedJWT decodedJWT = KKJWTUtil.verifyToken(kktoken);</span><br><span class="line">            log.info(<span class="string">&quot;验证结果 =&gt; [&#123;&#125;]&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TokenExpiredException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;发成异常 =&gt; [&#123;&#125;]&quot;</span>, e.getMessage());</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;令牌过期&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SignatureVerificationException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;发成异常 =&gt; [&#123;&#125;]&quot;</span>, e.getMessage());</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;签名错误&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlgorithmMismatchException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;发成异常 =&gt; [&#123;&#125;]&quot;</span>, e.getMessage());</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;加密算法不匹配&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidClaimException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;发成异常 =&gt; [&#123;&#125;]&quot;</span>, e.getMessage());</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;失效负载&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;发成异常 =&gt; [&#123;&#125;]&quot;</span>, e.getMessage());</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;令牌为空&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;发成异常 =&gt; [&#123;&#125;]&quot;</span>, e.getMessage());</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        log.error(<span class="string">&quot;验证结果 =&gt; [&#123;&#125;]&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">        map.put(<span class="string">&quot;state&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">/* map转json */</span></span><br><span class="line">        String json = <span class="keyword">new</span> ObjectMapper().writeValueAsString(map);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        PrintWriter writer = response.getWriter();</span><br><span class="line">        writer.println(json);</span><br><span class="line">        writer.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>拦截器配置</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"><span class="keyword">import</span> top.parak.intercepter.JWTIntercepter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: Springboot-JWT &lt;/P&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.config &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: IntercepterConfig &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> JWTInterceptor())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/api/**/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/api/user/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>JWT</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis-plus</title>
    <url>/posts/fd1960c6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="📖-官方文档"><a href="#📖-官方文档" class="headerlink" title="📖 官方文档"></a>📖 官方文档</h2><blockquote>
<p>🌐文档</p>
</blockquote>
<p>👉 <a href="https://mybatis.plus/">mybatis-plus</a></p>
<blockquote>
<p>☄️特性</p>
</blockquote>
<ul>
<li>润物无声：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑。</li>
<li>效率至上：只需简单配置，即可快速进行单表 CRUD 操作，从而节省大量时间。</li>
<li>丰富功能：代码生成、物理分页、性能分析等功能一应俱全。</li>
</ul>
<blockquote>
<p>⛓结构</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/fd1960c6/mybatis-plus-framework.jpg" class="" title="mybatis-plus-framework">

<br>

<a id="more"></a>



<h2 id="➕-添加依赖"><a href="#➕-添加依赖" class="headerlink" title="➕ 添加依赖"></a>➕ 添加依赖</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml</span> <span class="string">version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;project</span> <span class="string">xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="line">         <span class="attr">xmlns</span>:<span class="string">xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         <span class="attr">xsi</span>:<span class="string">schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span></span><br><span class="line">    <span class="attr">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&lt;groupId&gt;top.parak&lt;/groupId&gt;</span></span><br><span class="line">    <span class="attr">&lt;artifactId&gt;Mybatis-plus&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="meta">&lt;description&gt;Mybatis-plus</span> <span class="string">Learning&lt;/description&gt;</span></span><br><span class="line">    <span class="attr">&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&lt;developers&gt;</span></span><br><span class="line">        <span class="attr">&lt;developer&gt;</span></span><br><span class="line">            <span class="attr">&lt;name&gt;KHighness&lt;/name&gt;</span></span><br><span class="line">            <span class="attr">&lt;email&gt;parakovo@gmail.com&lt;/email&gt;</span></span><br><span class="line">        <span class="attr">&lt;/developer&gt;</span></span><br><span class="line">    <span class="attr">&lt;/developers&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&lt;parent&gt;</span></span><br><span class="line">        <span class="attr">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">        <span class="attr">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span></span><br><span class="line">        <span class="attr">&lt;version&gt;2.2.5.RELEASE&lt;/version&gt;</span></span><br><span class="line">    <span class="attr">&lt;/parent&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&lt;properties&gt;</span></span><br><span class="line">        <span class="attr">&lt;mysql.version&gt;8.0.20&lt;/mysql.version&gt;</span></span><br><span class="line">        <span class="attr">&lt;fastjson.version&gt;1.2.58&lt;/fastjson.version&gt;</span></span><br><span class="line">        <span class="attr">&lt;gson.version&gt;2.8.6&lt;/gson.version&gt;</span></span><br><span class="line">        <span class="attr">&lt;mybatis-plus.version&gt;3.4.0&lt;/mybatis-plus.version&gt;</span></span><br><span class="line">        <span class="attr">&lt;common-io.version&gt;2.6&lt;/common-io.version&gt;</span></span><br><span class="line">        <span class="attr">&lt;common-fileupload.version&gt;1.4&lt;/common-fileupload.version&gt;</span></span><br><span class="line">        <span class="attr">&lt;mybatis-plus-generate.version&gt;2.3.3&lt;/mybatis-plus-generate.version&gt;</span></span><br><span class="line">    <span class="attr">&lt;/properties&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&lt;dependencies&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">&lt;!--</span> <span class="string">Spring Web --&gt;</span></span><br><span class="line">        <span class="attr">&lt;dependency&gt;</span></span><br><span class="line">            <span class="attr">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">            <span class="attr">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span></span><br><span class="line">        <span class="attr">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">&lt;!--</span> <span class="string">Spring Aop --&gt;</span></span><br><span class="line">        <span class="attr">&lt;dependency&gt;</span></span><br><span class="line">            <span class="attr">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">            <span class="attr">&lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span></span><br><span class="line">        <span class="attr">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">&lt;!--</span> <span class="string">Spring Test --&gt;</span></span><br><span class="line">        <span class="attr">&lt;dependency&gt;</span></span><br><span class="line">            <span class="attr">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">            <span class="attr">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span></span><br><span class="line">            <span class="attr">&lt;scope&gt;test&lt;/scope&gt;</span></span><br><span class="line">            <span class="attr">&lt;exclusions&gt;</span></span><br><span class="line">                <span class="attr">&lt;exclusion&gt;</span></span><br><span class="line">                    <span class="attr">&lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;</span></span><br><span class="line">                    <span class="attr">&lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;</span></span><br><span class="line">                <span class="attr">&lt;/exclusion&gt;</span></span><br><span class="line">            <span class="attr">&lt;/exclusions&gt;</span></span><br><span class="line">        <span class="attr">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">&lt;!--</span> <span class="string">Spring Configuration --&gt;</span></span><br><span class="line">        <span class="attr">&lt;dependency&gt;</span></span><br><span class="line">            <span class="attr">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">            <span class="attr">&lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span></span><br><span class="line">            <span class="attr">&lt;optional&gt;true&lt;/optional&gt;</span></span><br><span class="line">        <span class="attr">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">&lt;!--</span> <span class="string">Mybatis-plus --&gt;</span></span><br><span class="line">        <span class="attr">&lt;dependency&gt;</span></span><br><span class="line">            <span class="attr">&lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span></span><br><span class="line">            <span class="attr">&lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span></span><br><span class="line">            <span class="attr">&lt;version&gt;$&#123;mybatis-plus.version&#125;&lt;/version&gt;</span></span><br><span class="line">        <span class="attr">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">&lt;!--</span> <span class="string">mybatis-plus-generator --&gt;</span></span><br><span class="line">        <span class="attr">&lt;dependency&gt;</span></span><br><span class="line">            <span class="attr">&lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span></span><br><span class="line">            <span class="attr">&lt;artifactId&gt;mybatis-plus-generate&lt;/artifactId&gt;</span></span><br><span class="line">            <span class="attr">&lt;version&gt;$&#123;mybatis-plus-generate.version&#125;&lt;/version&gt;</span></span><br><span class="line">        <span class="attr">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">&lt;!--</span> <span class="string">Mysql --&gt;</span></span><br><span class="line">        <span class="attr">&lt;dependency&gt;</span></span><br><span class="line">            <span class="attr">&lt;groupId&gt;mysql&lt;/groupId&gt;</span></span><br><span class="line">            <span class="attr">&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span></span><br><span class="line">            <span class="attr">&lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt;</span></span><br><span class="line">        <span class="attr">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">&lt;!--</span> <span class="string">Unit Test --&gt;</span></span><br><span class="line">        <span class="attr">&lt;dependency&gt;</span></span><br><span class="line">            <span class="attr">&lt;groupId&gt;junit&lt;/groupId&gt;</span></span><br><span class="line">            <span class="attr">&lt;artifactId&gt;junit&lt;/artifactId&gt;</span></span><br><span class="line">            <span class="attr">&lt;scope&gt;test&lt;/scope&gt;</span></span><br><span class="line">        <span class="attr">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">&lt;!--</span> <span class="string">Lombok --&gt;</span></span><br><span class="line">        <span class="attr">&lt;dependency&gt;</span></span><br><span class="line">            <span class="attr">&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span></span><br><span class="line">            <span class="attr">&lt;artifactId&gt;lombok&lt;/artifactId&gt;</span></span><br><span class="line">            <span class="attr">&lt;scope&gt;provided&lt;/scope&gt;</span></span><br><span class="line">        <span class="attr">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">&lt;!--</span> <span class="string">FastJSON --&gt;</span></span><br><span class="line">        <span class="attr">&lt;dependency&gt;</span></span><br><span class="line">            <span class="attr">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span></span><br><span class="line">            <span class="attr">&lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span></span><br><span class="line">            <span class="attr">&lt;version&gt;$&#123;fastjson.version&#125;&lt;/version&gt;</span></span><br><span class="line">        <span class="attr">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&lt;/dependencies&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&lt;build&gt;</span></span><br><span class="line">        <span class="attr">&lt;plugins&gt;</span></span><br><span class="line">            <span class="attr">&lt;plugin&gt;</span></span><br><span class="line">                <span class="attr">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">                <span class="attr">&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span></span><br><span class="line">                <span class="attr">&lt;configuration&gt;</span></span><br><span class="line">                    <span class="attr">&lt;mainClass&gt;top.parak.KHighnessApplication&lt;/mainClass&gt;</span></span><br><span class="line">                <span class="attr">&lt;/configuration&gt;</span></span><br><span class="line">            <span class="attr">&lt;/plugin&gt;</span></span><br><span class="line">        <span class="attr">&lt;/plugins&gt;</span></span><br><span class="line">    <span class="attr">&lt;/build&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&lt;/project&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<h2 id="💥配置日志"><a href="#💥配置日志" class="headerlink" title="💥配置日志"></a>💥配置日志</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Server</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">3333</span></span><br><span class="line"><span class="meta">server.tomcat.uri-encoding</span>=<span class="string">UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Database</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;allowMultiQueries=true</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">KAG1823</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mybatis-plus</span></span><br><span class="line"><span class="meta">mybatis-plus.mapper-locations</span>=<span class="string">classpath*:/mapper/**/*.xml</span></span><br><span class="line"><span class="meta">mybatis-plus.type-aliases-package</span>=<span class="string">top.parak.entity</span></span><br><span class="line"><span class="meta">mybatis-plus.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.banner</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">mybatis-plus.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"><span class="comment"># Logic-Delete</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.db-config.logic-delete-value</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.db-config.logic-not-delete-value</span>=<span class="string">0</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># Log</span></span><br><span class="line"><span class="meta">logging.level.top.parak.mapper</span>=<span class="string">debug</span></span><br><span class="line"><span class="meta">logging.level.top.parak.controller</span>=<span class="string">debug</span></span><br></pre></td></tr></table></figure>

<br>

<h2 id="🌀主键生成策略"><a href="#🌀主键生成策略" class="headerlink" title="🌀主键生成策略"></a>🌀主键生成策略</h2><blockquote>
<p>❄️Snowflake</p>
</blockquote>
<p><code>SnowFlake</code>是<code>Twitter</code>开源的分布式<code>ID</code>生成算法。</p>
<blockquote>
<p>🆔ID结构</p>
</blockquote>
<p><code>SnowFlake</code>生成<code>ID</code>固定是一个<code>long</code>型的数字，一个<code>long</code>型占8个字节，也就是64个<code>bit</code>，分配如下：</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/fd1960c6/SnowFlakeID.jpg" class="" title="SnowFlake">

<ol>
<li>第一个bit是标识位部分，在<code>Java</code>中由于<code>long</code>的最高位是符号位，正数是<code>0</code>，负数是<code>1</code>，一般生成的<code>ID</code>为正数，所以固定为<code>0</code>。</li>
<li>时间戳部分占<code>41bit</code>，这个是毫秒级的时间，一般实现上不会存储当前的时间戳，而是时间戳的差值(当前时间-固定的开始时间)，这样可以使产生的<code>ID</code>从更小值开始。<code>41</code>位的时间戳可以使用<code>69</code>年。</li>
<li>工作机器<code>ID</code>占<code>10bit</code>，这里比较灵活，比如，可以使用前<code>5</code>位作为数据中心机房标识，后<code>5</code>位作为单机房机器标识，可以部署<code>1024</code>个节点。</li>
<li>序列号部分占<code>12bit</code>，支持同一毫秒内同一个节点可以生成2^12^=<code>4096</code>个<code>ID</code>。</li>
</ol>
<blockquote>
<p>🌠 优点和缺点</p>
</blockquote>
<p>优点：</p>
<ul>
<li>毫秒数在高位，自增序列在低位，<code>ID</code>趋势递增。</li>
<li>以服务方式部署，可以做高可用。</li>
<li>根据业务分配<code>bit</code>位，灵活。</li>
</ul>
<p>缺点：</p>
<ul>
<li>每台机器的时钟不同，当时钟回拨可能会发生重复ID。</li>
<li>当数据量大时，需要对<code>ID</code>取模分库分表，在跨毫秒时，序列号总是归<code>0</code>，会发生取模后分布不均衡。</li>
</ul>
<blockquote>
<p>💻 Java实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: Mybatis-plus &lt;/P&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.common &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: SnowShakeUntil &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 雪花算法 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SnowFlakeUntil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;开始时间戳&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> START_STMP;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        String startDateTime = <span class="string">&quot;2001-09-11 00:00:00&quot;</span>;</span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/* 13位时间戳 */</span></span><br><span class="line">            START_STMP = simpleDateFormat.parse(startDateTime).getTime();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;序列号占用的位数&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> SEQUENCE_BIT = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;数据中心标识占用的位数&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> MACHINE_BIT = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;机器标识占用的位数&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> DATACENTER_BIT = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 每一部分的最大值：先进行左移运算，再同-1进行异或运算 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;用位运算计算出最大支持的数据中心数量：31&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> MAX_DATACENTER_NUM = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; DATACENTER_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;用位运算计算出最大支持的机器数量&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> MAX_MACHINE_NUM = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; MACHINE_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;用位运算计算出最大支持的最大正整数4095&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> MAX_SEQUENCE = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; SEQUENCE_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;机器标志较序列号的偏移量&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> MACHINE_LEFT = SEQUENCE_BIT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;数据中心较机器标志的偏移量&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> DATACENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;时间戳较数据中心的偏移量&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> TIMESTMP_LEFT = DATACENTER_LEFT + DATACENTER_BIT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;数据中心&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> dataCenterId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;机器标识&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> machineId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;序列号&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> sequence = <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 4&lt;p&gt;上一次时间戳&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> lastStmp = -<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;此处无参构造私有，同时没有给出有参构造，在于避免以下两点问题：&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;1. 私有化避免了通过new的方式进行调用，主要是解决了在for循环中通过new的方式调用产生的id不一定唯一问题问题，因为用于记录上一次时间戳的lastStmp永远无法得到比对&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;2. 没有给出有参构造在第一点的基础上考虑了一套分布式系统产生的唯一序列号应该是基于相同的参数&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SnowFlakeUntil</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;生成ID&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">long</span> <span class="title">nextID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 获取当前时间戳*/</span></span><br><span class="line">        <span class="keyword">long</span> currStmp = getNewStmp();</span><br><span class="line">        <span class="comment">/* 如果当前时间戳小于上次时间戳则抛出异常 */</span></span><br><span class="line">        <span class="keyword">if</span> (currStmp &lt; lastStmp) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Clock moved backwards. Refusing to generate id&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 相同毫秒内，序列号自增 */</span></span><br><span class="line">        <span class="keyword">if</span> (currStmp == lastStmp) &#123;</span><br><span class="line">            sequence = (sequence + <span class="number">1</span>) &amp; MAX_SEQUENCE;</span><br><span class="line">            <span class="comment">/* 同一毫秒的序列数已经达到最大*/</span></span><br><span class="line">            <span class="keyword">if</span> (sequence == <span class="number">0L</span>) &#123;</span><br><span class="line">                currStmp = getNextStmp();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 不同毫秒内，序列号设为0 */</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            sequence = <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 当前时间戳存档记录*/</span></span><br><span class="line">        lastStmp = currStmp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (currStmp - START_STMP) &lt;&lt; TIMESTMP_LEFT  <span class="comment">// 时间戳部分</span></span><br><span class="line">                | dataCenterId &lt;&lt; DATACENTER_LEFT        <span class="comment">// 数据中心部分</span></span><br><span class="line">                | machineId &lt;&lt; MACHINE_LEFT              <span class="comment">// 机器标识部分</span></span><br><span class="line">                | sequence;                              <span class="comment">// 序列号部分</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;当前时间戳&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getNewStmp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;下一时间的时间戳&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getNextStmp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> mill = getNewStmp();</span><br><span class="line">        <span class="keyword">while</span> (mill &lt;= lastStmp) &#123;</span><br><span class="line">            mill = getNewStmp();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mill;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>🔱在Mybatis-plus中自定义ID生成器</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomIdGenerator</span> <span class="keyword">implements</span> <span class="title">IdentifierGenerator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">nextId</span><span class="params">(Object entity)</span> </span>&#123;</span><br><span class="line">      	<span class="comment">// 可以将当前传入的class全类名来作为bizKey,或者提取参数来生成bizKey进行分布式Id调用生成.</span></span><br><span class="line">      	String bizKey = entity.getClass().getName();</span><br><span class="line">        <span class="comment">// 根据bizKey调用分布式ID生成</span></span><br><span class="line">        <span class="keyword">long</span> id = ....;</span><br><span class="line">      	<span class="comment">// 返回生成的id值即可.</span></span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="🚀-CRUD拓展"><a href="#🚀-CRUD拓展" class="headerlink" title="🚀 CRUD拓展"></a>🚀 CRUD拓展</h2><blockquote>
<p>建表</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">tinyint</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">18</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_bin;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>实体</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="🌌自动填充"><a href="#🌌自动填充" class="headerlink" title="🌌自动填充"></a>🌌自动填充</h3><p>对于普通字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">FieldFill</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 默认不处理 */</span></span><br><span class="line">    DEFAULT,</span><br><span class="line">    <span class="comment">/* 插入填充字段 */</span></span><br><span class="line">    INSERT,</span><br><span class="line">    <span class="comment">/*更新填充字段 */</span></span><br><span class="line">    UPDATE,</span><br><span class="line">    <span class="comment">/* 插入和更新填充字段 */</span></span><br><span class="line">    INSERT_UPDATE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>所有的数据库表都应该包含创建时间gmt_create和修改时间gmt_modified，而且需要自动化。——《阿里巴巴开发手册》</p>
<blockquote>
<p>🛢数据库级别</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> update_time DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> create_time DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>⌨️代码级别</p>
</blockquote>
<ul>
<li>数据表添加字段</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> update_time DATETIME;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> create_time DATETIME;</span><br></pre></td></tr></table></figure>

<ul>
<li>实体类添加字段和注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> Date createTime;</span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> Date updateTime;</span><br></pre></td></tr></table></figure>

<ul>
<li>编写处理器处理注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: Mybatis-plus &lt;/P&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.handler &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: DataObjectHandler &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 自动填充处理器 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/9</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;插入时的填充策略&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;createTime&quot;</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;更新时的填充策略&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="🔏悲观锁"><a href="#🔏悲观锁" class="headerlink" title="🔏悲观锁"></a>🔏悲观锁</h3><blockquote>
<p>📖理解</p>
</blockquote>
<p>当要对数据库的一条数据进行修改的时候，为了避免同时被其他人修改，最好的办法就是直接对数据进行加锁防止并发。</p>
<p>这种借助数据库锁机制，在修改数据之前先锁定，再修改的方式被称为悲观并发控制(Pessimistic Concurrency Control，缩写PCC，又名悲观锁)。</p>
<blockquote>
<p>💠实现</p>
</blockquote>
<p>悲观锁的实现，往往依靠数据库提供的锁机制(只有数据库层提供的锁机制才能真正保证数据访问的排他性，否则，即使在本系统中实现了加锁机制，也无法保证外部系统不会修改数据)。悲观锁的实现：</p>
<ul>
<li>传统的关系型数据库使用这种锁机制，比如行锁、表锁、读锁、写锁等，都是在做操作之前先上锁</li>
<li>Java里面的同步<code>synchronized</code>关键字的实现</li>
<li><code>JUC</code>中的<code>lock</code>加锁</li>
</ul>
<blockquote>
<p>🔱分类 </p>
</blockquote>
<ul>
<li>共享锁：又称为读锁，简称S锁。顾名思义，共享锁就是多个事务对于同一个数九可以共享一把锁，都能访问到数据，但是只能读不能修改。</li>
<li>排他锁：又称为写锁，简称X锁。顾名思义，排他锁就是不能与其他锁并存，如果一个事务获取了一个数据行的排它锁，其他事务就不能再获取该行的其他锁，包括共享锁和排他锁，但是获取到排他锁的事务可以对数据进行读取和修改。</li>
</ul>
<blockquote>
<p>💬说明</p>
</blockquote>
<p>悲观并发控制实质上是<strong>先取锁再访问</strong>的保守策略，为数据处理的安全提供了保证。</p>
<p>但是在效率方面，处理加锁的机制会让数据库产生额外的开销，还有增加产生死锁的机会。</p>
<p>另外还会降低并行性，一个事务如果锁定了某行数据，其他事务就必须等待该事务处理完才可以处理那行数据。</p>
<br>

<h3 id="🔓乐观锁"><a href="#🔓乐观锁" class="headerlink" title="🔓乐观锁"></a>🔓乐观锁</h3><blockquote>
<p>📖理解</p>
</blockquote>
<p>乐观锁假设数据在一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则返回给用户错误的信息，让用户决定如何去做。乐观锁适用于读操作多的场景，这样可以提高程序的吞吐量。</p>
<blockquote>
<p>💠实现</p>
</blockquote>
<p>乐观锁不会可以使用数据库本身的锁机制，而是依据数据本身来保证数据的正确性。乐观锁的实现：</p>
<ul>
<li><p>CAS实现：<code>Java </code>中<code>java.concurrent.atomic</code>包下面的原子变量使用了乐观锁的一种 <code>CAS</code> 实现方式</p>
</li>
<li><p>版本号控制：一般是在数据表中添加一个数据版本号<code>version</code>字段，表示数据被修改的次数。当数据被修改时，<code>version</code>值会+1。当线程A更新数据值时，在读取数据的同时也会读取<code>version</code>值，在提交更新时，若刚才读取到<code>version</code>值与当前数据库中的<code>version</code>值相等时才更新，否则重试更新操作，直到更新成功。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1 查询版本号</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">version</span> <span class="keyword">as</span> oldversion <span class="keyword">where</span> <span class="keyword">id</span> = <span class="comment">#&#123;id&#125;</span></span><br><span class="line"><span class="comment">-- 2 更新操作</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">set</span> ... , <span class="keyword">version</span> = <span class="keyword">version</span>  + <span class="number">1</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="comment">#&#123;id&#125;  and version = oldversion</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<blockquote>
<p>💬说明</p>
</blockquote>
<p>乐观并发控制相信事务之间的数据竞争概率是比较小的。因此尽可能直接做下去，直到提交的时候才去锁定，所以不会产生任何锁或死锁。</p>
<blockquote>
<p>🔧插件</p>
</blockquote>
<ul>
<li>数据表添加字段</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> <span class="keyword">version</span> <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>; </span><br></pre></td></tr></table></figure>

<ul>
<li>实体类添加属性和注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 乐观锁 */</span></span><br><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure>

<ul>
<li>在mybatis-plus配置类中增加乐观锁拦截器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor mybatisPlusInterceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        <span class="comment">/* 乐观锁插件 */</span></span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> OptimisticLockerInnerInterceptor());</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>乐观锁测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;乐观锁测试1&lt;/p&gt;</span></span><br><span class="line"><span class="comment">    */</span>    </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">optimisticLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 查询信息</span></span><br><span class="line">       User user1 = userMapper.selectById(<span class="number">10L</span>);</span><br><span class="line">       <span class="comment">// 修改信息</span></span><br><span class="line">       user1.setName(<span class="string">&quot;Khighness10&quot;</span>);</span><br><span class="line">       user1.setAge(<span class="number">10</span>);</span><br><span class="line">       user1.setEmail(<span class="string">&quot;khighness10@qq.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 插队操作: 抢先更新，会更新版本号</span></span><br><span class="line">       User user2 = userMapper.selectById(<span class="number">10L</span>);</span><br><span class="line">       user2.setAge(<span class="number">100</span>);</span><br><span class="line">       userMapper.updateById(user2);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 执行更新：更新失败，版本号不对</span></span><br><span class="line">       userMapper.updateById(user1);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 测试结果</span><br><span class="line">JDBC Connection [HikariProxyConnection@597623166 wrapping com.mysql.cj.jdbc.ConnectionImpl@38cedb7d] will not be managed by Spring</span><br><span class="line">&#x3D;&#x3D;&gt;  Preparing: SELECT id,name,age,email,create_time,update_time,version FROM user WHERE id&#x3D;? </span><br><span class="line">&#x3D;&#x3D;&gt; Parameters: 10(Long)</span><br><span class="line">&lt;&#x3D;&#x3D;    Columns: id, name, age, email, create_time, update_time, version</span><br><span class="line">&lt;&#x3D;&#x3D;        Row: 10, Khighness10, 10, khighness10@qq.com, 2020-11-09 13:30:04, 2020-11-09 13:35:49, 2</span><br><span class="line">&lt;&#x3D;&#x3D;      Total: 1</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@12a14b74]</span><br><span class="line">Creating a new SqlSession</span><br><span class="line">SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@6a9344f5] was not registered for synchronization because synchronization is not active</span><br><span class="line">JDBC Connection [HikariProxyConnection@1434769862 wrapping com.mysql.cj.jdbc.ConnectionImpl@38cedb7d] will not be managed by Spring</span><br><span class="line">&#x3D;&#x3D;&gt;  Preparing: SELECT id,name,age,email,create_time,update_time,version FROM user WHERE id&#x3D;? </span><br><span class="line">&#x3D;&#x3D;&gt; Parameters: 10(Long)</span><br><span class="line">&lt;&#x3D;&#x3D;    Columns: id, name, age, email, create_time, update_time, version</span><br><span class="line">&lt;&#x3D;&#x3D;        Row: 10, Khighness10, 10, khighness10@qq.com, 2020-11-09 13:30:04, 2020-11-09 13:35:49, 2</span><br><span class="line">&lt;&#x3D;&#x3D;      Total: 1</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@6a9344f5]</span><br><span class="line">Creating a new SqlSession</span><br><span class="line">SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@3234474] was not registered for synchronization because synchronization is not active</span><br><span class="line">JDBC Connection [HikariProxyConnection@1137013089 wrapping com.mysql.cj.jdbc.ConnectionImpl@38cedb7d] will not be managed by Spring</span><br><span class="line">&#x3D;&#x3D;&gt;  Preparing: UPDATE user SET name&#x3D;?, age&#x3D;?, email&#x3D;?, create_time&#x3D;?, update_time&#x3D;?, version&#x3D;? WHERE id&#x3D;? AND version&#x3D;? </span><br><span class="line">&#x3D;&#x3D;&gt; Parameters: Khighness10(String), 100(Integer), khighness10@qq.com(String), 2020-11-09 13:30:04.0(Timestamp), 2020-11-09 13:59:41.434(Timestamp), 3(Integer), 10(Long), 2(Integer)</span><br><span class="line">&lt;&#x3D;&#x3D;    Updates: 1   &#x2F;&#x2F; 插队更新，影响行数为1&#x3D;&gt;成功</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@3234474]</span><br><span class="line">Creating a new SqlSession</span><br><span class="line">SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@58658f63] was not registered for synchronization because synchronization is not active</span><br><span class="line">JDBC Connection [HikariProxyConnection@1424043852 wrapping com.mysql.cj.jdbc.ConnectionImpl@38cedb7d] will not be managed by Spring</span><br><span class="line">&#x3D;&#x3D;&gt;  Preparing: UPDATE user SET name&#x3D;?, age&#x3D;?, email&#x3D;?, create_time&#x3D;?, update_time&#x3D;?, version&#x3D;? WHERE id&#x3D;? AND version&#x3D;? </span><br><span class="line">&#x3D;&#x3D;&gt; Parameters: Khighness10(String), 10(Integer), khighness10@qq.com(String), 2020-11-09 13:30:04.0(Timestamp), 2020-11-09 13:59:41.45(Timestamp), 3(Integer), 10(Long), 2(Integer)</span><br><span class="line">&lt;&#x3D;&#x3D;    Updates: 0   &#x2F;&#x2F; 执行更新，影响行数为0&#x3D;&gt;失败</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@58658f63]</span><br></pre></td></tr></table></figure>

<br>

<h3 id="🔖分页查询"><a href="#🔖分页查询" class="headerlink" title="🔖分页查询"></a>🔖分页查询</h3><ul>
<li>mybatis-plus配置类中增加分页拦截器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor mybatisPlusInterceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        <span class="comment">/* 分页插件 */</span></span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>直接使用<code>Page</code>对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询，使用page</span></span><br><span class="line"><span class="comment"> * 构造函数Page(current, size)</span></span><br><span class="line"><span class="comment"> * current: 页号</span></span><br><span class="line"><span class="comment"> * size: 页面大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">page</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Page&lt;User&gt; userPage = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">    userMapper.selectPage(userPage, <span class="keyword">null</span>);</span><br><span class="line">    log.info(<span class="string">&quot;总记录数量: &#123;&#125;&quot;</span>, userPage.getTotal());</span><br><span class="line">    log.info(<span class="string">&quot;第3页结果如下&quot;</span>);</span><br><span class="line">    userPage.getRecords().stream().forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 测试结果</span><br><span class="line">Creating a new SqlSession</span><br><span class="line">SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@d5556bf] was not registered for synchronization because synchronization is not active</span><br><span class="line">2020-11-09 15:44:02.969  INFO 6560 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...</span><br><span class="line">2020-11-09 15:44:03.107  INFO 6560 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.</span><br><span class="line">JDBC Connection [HikariProxyConnection@2068279617 wrapping com.mysql.cj.jdbc.ConnectionImpl@784223e9] will not be managed by Spring</span><br><span class="line">&#x3D;&#x3D;&gt;  Preparing: SELECT COUNT(1) FROM user</span><br><span class="line">&#x3D;&#x3D;&gt; Parameters: </span><br><span class="line">&lt;&#x3D;&#x3D;    Columns: COUNT(1)</span><br><span class="line">&lt;&#x3D;&#x3D;        Row: 12</span><br><span class="line">&lt;&#x3D;&#x3D;      Total: 1</span><br><span class="line">&#x3D;&#x3D;&gt;  Preparing: SELECT id,name,age,email,create_time,update_time,version FROM user LIMIT ?,?</span><br><span class="line">&#x3D;&#x3D;&gt; Parameters: 6(Long), 3(Long)</span><br><span class="line">&lt;&#x3D;&#x3D;    Columns: id, name, age, email, create_time, update_time, version</span><br><span class="line">&lt;&#x3D;&#x3D;        Row: 7, UnknownK, 3, unknownk@gmail.@32423.com, 2020-11-09 15:33:38, 2020-11-09 15:33:38, 1</span><br><span class="line">&lt;&#x3D;&#x3D;        Row: 8, UnknownK, 3, unknownk@gmail.@32423.com, 2020-11-09 15:33:38, 2020-11-09 15:33:38, 1</span><br><span class="line">&lt;&#x3D;&#x3D;        Row: 9, UnknownK, 3, unknownk@gmail.com, 2020-11-09 13:28:49, 2020-11-09 13:28:49, 1</span><br><span class="line">&lt;&#x3D;&#x3D;      Total: 3</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@d5556bf]</span><br><span class="line">2020-11-09 15:44:03.170  INFO 6560 --- [           main] top.parak.mapper.UserMapperTest          : 总记录数量: 12</span><br><span class="line">2020-11-09 15:44:03.170  INFO 6560 --- [           main] top.parak.mapper.UserMapperTest          : 第3页结果如下</span><br><span class="line">User(id&#x3D;7, name&#x3D;UnknownK, age&#x3D;3, email&#x3D;unknownk@gmail.@32423.com, createTime&#x3D;Mon Nov 09 15:33:38 CST 2020, updateTime&#x3D;Mon Nov 09 15:33:38 CST 2020, version&#x3D;1)</span><br><span class="line">User(id&#x3D;8, name&#x3D;UnknownK, age&#x3D;3, email&#x3D;unknownk@gmail.@32423.com, createTime&#x3D;Mon Nov 09 15:33:38 CST 2020, updateTime&#x3D;Mon Nov 09 15:33:38 CST 2020, version&#x3D;1)</span><br><span class="line">User(id&#x3D;9, name&#x3D;UnknownK, age&#x3D;3, email&#x3D;unknownk@gmail.com, createTime&#x3D;Mon Nov 09 13:28:49 CST 2020, updateTime&#x3D;Mon Nov 09 13:28:49 CST 2020, version&#x3D;1)</span><br></pre></td></tr></table></figure>

<br>

<h3 id="📛逻辑删除"><a href="#📛逻辑删除" class="headerlink" title="📛逻辑删除"></a>📛逻辑删除</h3><blockquote>
<p>物理删除：从数据库中直接删除。</p>
<p>逻辑删除：不从数据库中移除，通过一个变量使其失效。实质上是更新，防止数据丢失。</p>
</blockquote>
<ul>
<li>数据库添加字段</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> deleted </span><br></pre></td></tr></table></figure>
<ul>
<li>实体类添加属性和注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 逻辑删除 */</span></span><br><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Integer deleted;</span><br></pre></td></tr></table></figure>

<ul>
<li>Application.properties中增加配置</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 逻辑删除</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.db-config.logic-delete-value</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.db-config.logic-not-delete-value</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure>

<br>

<h3 id="🔍性能分析"><a href="#🔍性能分析" class="headerlink" title="🔍性能分析"></a><del>🔍性能分析</del></h3><p>3.4.X版本中该插件已经移除。</p>
<br>

<h3 id="💤条件构造器"><a href="#💤条件构造器" class="headerlink" title="💤条件构造器"></a>💤条件构造器</h3><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/fd1960c6/image-20201112160607792.png" class="" title="image-20201112160607792">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WrapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="comment">// 姓名不为空</span></span><br><span class="line">        <span class="comment">// 邮箱不为空</span></span><br><span class="line">        <span class="comment">// 年龄大于等于18</span></span><br><span class="line">        wrapper</span><br><span class="line">                .isNotNull(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">                .isNotNull(<span class="string">&quot;email&quot;</span>)</span><br><span class="line">                .ge(<span class="string">&quot;age&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        userMapper.selectList(wrapper).stream().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;RubbishK&quot;</span>);</span><br><span class="line">        <span class="comment">// 只能查询一个用户，结果多于1个会报错</span></span><br><span class="line">        System.out.println(userMapper.selectOne(wrapper));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="comment">// 查询年龄在13到19的用户数量</span></span><br><span class="line">        wrapper.between(<span class="string">&quot;age&quot;</span>, <span class="number">13</span>, <span class="number">19</span>);</span><br><span class="line">        System.out.println(userMapper.selectCount(wrapper));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="comment">// 模糊查询</span></span><br><span class="line">        wrapper</span><br><span class="line">                .likeRight(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;K&quot;</span>)  <span class="comment">// K%</span></span><br><span class="line">                .likeLeft(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;@gmail.com&quot;</span>);  <span class="comment">// %@gmail.com</span></span><br><span class="line">        userMapper.selectList(wrapper).stream().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="comment">// 拼接sql语句</span></span><br><span class="line">        wrapper.inSql(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;select id from user where id &lt; 3&quot;</span>);</span><br><span class="line">        userMapper.selectList(wrapper).stream().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="comment">// 通过ID降序排序</span></span><br><span class="line">        wrapper.orderByDesc(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        userMapper.selectList(wrapper).stream().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="🔰代码生成器"><a href="#🔰代码生成器" class="headerlink" title="🔰代码生成器"></a>🔰代码生成器</h3><blockquote>
<p>自动生成 entity、mapper、service、controller层的代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.generator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.InjectionConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.GlobalConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.PackageConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.StrategyConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.DateType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: Mybatis-plus &lt;/P&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.generator &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: ParaKCode &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParaKCodeGenerator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 代码生成器</span></span><br><span class="line">        AutoGenerator autoGenerator = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 全局配置</span></span><br><span class="line">        GlobalConfig globalConfig = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        String projectPath = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">        globalConfig.setOutputDir(projectPath + <span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置作者名</span></span><br><span class="line">        globalConfig.setAuthor(<span class="string">&quot;KHighness&quot;</span>);</span><br><span class="line">        <span class="comment">// 操作完成是否打开资源管理器</span></span><br><span class="line">        globalConfig.setOpen(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 是否覆盖原有文件</span></span><br><span class="line">        globalConfig.setFileOverride(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 去Service的I前缀</span></span><br><span class="line">        globalConfig.setServiceName(<span class="string">&quot;%sService&quot;</span>); </span><br><span class="line">        globalConfig.setIdType(IdType.ID_WORKER);</span><br><span class="line">        globalConfig.setDateType(DateType.ONLY_DATE);</span><br><span class="line">        autoGenerator.setGlobalConfig(globalConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据源配置</span></span><br><span class="line">        DataSourceConfig dataSourceConfig = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dataSourceConfig.setDbType(DbType.MYSQL);</span><br><span class="line">        dataSourceConfig.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/test?serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&quot;</span>);</span><br><span class="line">        dataSourceConfig.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSourceConfig.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSourceConfig.setPassword(<span class="string">&quot;KAG1823&quot;</span>);</span><br><span class="line">        autoGenerator.setDataSource(dataSourceConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 包配置</span></span><br><span class="line">        PackageConfig packageConfig = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        packageConfig.setModuleName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        packageConfig.setParent(<span class="string">&quot;top.parak&quot;</span>);</span><br><span class="line">        packageConfig.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">        packageConfig.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        packageConfig.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        packageConfig.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        autoGenerator.setPackageInfo(packageConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 策略配置</span></span><br><span class="line">        StrategyConfig strategyConfig = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        <span class="comment">// 映射表名</span></span><br><span class="line">        strategyConfig.setInclude(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        strategyConfig.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategyConfig.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        <span class="comment">// Lombok实体类</span></span><br><span class="line">        strategyConfig.setEntityLombokModel(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 驼峰命名</span></span><br><span class="line">        strategyConfig.setRestControllerStyle(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 逻辑删除</span></span><br><span class="line">        strategyConfig.setLogicDeleteFieldName(<span class="string">&quot;deleted&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建时间</span></span><br><span class="line">        TableFill gmt_create = <span class="keyword">new</span> TableFill(<span class="string">&quot;create_time&quot;</span>, FieldFill.INSERT);</span><br><span class="line">        <span class="comment">// 更新时间</span></span><br><span class="line">        TableFill gmt_modify = <span class="keyword">new</span> TableFill(<span class="string">&quot;update_time&quot;</span>, FieldFill.INSERT);</span><br><span class="line">        List&lt;TableFill&gt; tableFills = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        tableFills.add(gmt_create);</span><br><span class="line">        tableFills.add(gmt_modify);</span><br><span class="line">        strategyConfig.setTableFillList(tableFills);</span><br><span class="line">        <span class="comment">// 乐观锁</span></span><br><span class="line">        strategyConfig.setVersionFieldName(<span class="string">&quot;version&quot;</span>);</span><br><span class="line">        strategyConfig.setControllerMappingHyphenStyle(<span class="keyword">true</span>);</span><br><span class="line">        autoGenerator.setStrategy(strategyConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义配置</span></span><br><span class="line">        InjectionConfig injectionConfig = <span class="keyword">new</span> InjectionConfig() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行生成</span></span><br><span class="line">        autoGenerator.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Mybatis-plus</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/posts/41682/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>可扩展性的本质是找到系统的变化点，并隔离变化点。 </p>
<p>世间众多设计模式其实就是一种设计模式即隔离变化点的模式。</p>
<p>极致扩展性的标志，就是需求的新增，不会在原有代码交付物上进行任何形式的修改。</p>
<p>——《阿里巴巴Java开发手册》</p>
<br>

<h2 id="1-设计原则"><a href="#1-设计原则" class="headerlink" title="1. 设计原则"></a>1. 设计原则</h2><br>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/41682/image-20210413121732627.png" class="" title="DesignPrinciple">



<a id="more"></a>

<br>

<h3 id="1-1-开闭原则"><a href="#1-1-开闭原则" class="headerlink" title="1.1 开闭原则"></a>1.1 开闭原则</h3><blockquote>
<p>定义</p>
</blockquote>
<p>软件实体应当对扩展开放，对修改关闭。</p>
<blockquote>
<p>实现</p>
</blockquote>
<p>可以通过“抽象约束、封装变化”来实现开闭原则，即通过接口或者抽象类为软件实体定义一个相对稳定的抽象层，而将相同的可变因素封装在相同的具体实现类中。</p>
<p>因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。而软件中易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类来扩展就可以了。</p>
<blockquote>
<p>作用</p>
</blockquote>
<p>开闭原则是面向对象程序设计的终极目标，它使软件实体拥有一定的适应性和灵活性的同时具备稳定性和延续性。具体来说，其作用如下。</p>
<ol>
<li>对软件测试的影响</li>
</ol>
<p>软件遵守开闭原则的话，软件测试时只需要对扩展的代码进行测试就可以了，因为原有的测试代码仍然能够正常运行。</p>
<ol start="2">
<li>可以提高代码的可复用性</li>
</ol>
<p>粒度越小，被复用的可能性就越大；在面向对象的程序设计中，根据原子和抽象编程可以提高代码的可复用性。</p>
<ol start="3">
<li>可以提高软件的可维护性</li>
</ol>
<p>遵守开闭原则的软件，其稳定性高和延续性强，从而易于扩展和维护。</p>
<br>

<h3 id="1-2-里式替换原则"><a href="#1-2-里式替换原则" class="headerlink" title="1.2 里式替换原则"></a>1.2 里式替换原则</h3><blockquote>
<p>定义</p>
</blockquote>
<p>继承必须确保超类所拥有的性质在子类中仍然成立</p>
<blockquote>
<p>实现</p>
</blockquote>
<p>子类可以扩展父类的功能，但不能改变父类原有的功能。也就是说：子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。</p>
<p>根据上述理解，对里氏替换原则的定义可以总结如下：</p>
<ul>
<li>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法</li>
<li>子类中可以增加自己特有的方法</li>
<li>当子类的方法重载父类的方法时，方法的前置条件（即方法的输入参数）要比父类的方法更宽松</li>
<li>当子类的方法实现父类的方法时（重写/重载或实现抽象方法），方法的后置条件（即方法的的输出/返回值）要比父类的方法更严格或相等</li>
</ul>
<blockquote>
<p>作用</p>
</blockquote>
<ul>
<li><p>里氏替换原则是实现开闭原则的重要方式之一。</p>
</li>
<li><p>它克服了继承中重写父类造成的可复用性变差的缺点。</p>
</li>
<li><p>它是动作正确性的保证。即类的扩展不会给已有的系统引入新的错误，降低了代码出错的可能性。</p>
</li>
<li><p>加强程序的健壮性，同时变更时可以做到非常好的兼容性，提高程序的维护性、可扩展性，降低需求变更时引入的风险。</p>
</li>
</ul>
<br>

<h3 id="1-3-依赖倒置原则"><a href="#1-3-依赖倒置原则" class="headerlink" title="1.3 依赖倒置原则"></a>1.3 依赖倒置原则</h3><blockquote>
<p>定义</p>
</blockquote>
<p>高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。</p>
<blockquote>
<p>实现</p>
</blockquote>
<ul>
<li><p>每个类尽量提供接口或抽象类，或者两者都具备。</p>
</li>
<li><p>变量的声明类型尽量是接口或者是抽象类。</p>
</li>
<li><p>任何类都不应该从具体类派生。</p>
</li>
<li><p>使用继承时尽量遵循里氏替换原则。</p>
</li>
</ul>
<blockquote>
<p>作用</p>
</blockquote>
<ul>
<li>依赖倒置原则可以降低类间的耦合性。</li>
<li>依赖倒置原则可以提高系统的稳定性。</li>
<li>依赖倒置原则可以减少并行开发引起的风险。</li>
<li>依赖倒置原则可以提高代码的可读性和可维护性。</li>
</ul>
<br>

<h3 id="1-4-单一职责原则"><a href="#1-4-单一职责原则" class="headerlink" title="1.4 单一职责原则"></a>1.4 单一职责原则</h3><blockquote>
<p>定义</p>
</blockquote>
<p>一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分</p>
<blockquote>
<p>实现</p>
</blockquote>
<p>单一职责原则是最简单但又最难运用的原则，需要设计人员发现类的不同职责并将其分离，再封装到不同的类或模块中。</p>
<blockquote>
<p>作用</p>
</blockquote>
<p>单一职责原则的核心就是控制类的粒度大小、将对象解耦、提高其内聚性。</p>
<ul>
<li>降低类的复杂度。一个类只负责一项职责，其逻辑肯定要比负责多项职责简单得多。</li>
<li>提高类的可读性。复杂性降低，自然其可读性会提高。</li>
<li>提高系统的可维护性。可读性提高，那自然更容易维护了。</li>
<li>变更引起的风险降低。变更是必然的，如果单一职责原则遵守得好，当修改一个功能时，可以显著降低对其他功能的影响。</li>
</ul>
<br>

<h3 id="1-5-接口隔离原则"><a href="#1-5-接口隔离原则" class="headerlink" title="1.5 接口隔离原则"></a>1.5 接口隔离原则</h3><blockquote>
<p>定义</p>
</blockquote>
<p>要为各个类建立它们需要的专用接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。</p>
<blockquote>
<p>实现</p>
</blockquote>
<p>在具体应用接口隔离原则时，应该根据以下几个规则来衡量。</p>
<ul>
<li>接口尽量小，但是要有限度。一个接口只服务于一个子模块或业务逻辑。</li>
<li>为依赖接口的类定制服务。只提供调用者需要的方法，屏蔽不需要的方法。</li>
<li>了解环境，拒绝盲从。每个项目或产品都有选定的环境因素，环境不同，接口拆分的标准就不同深入了解业务逻辑。</li>
<li>提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。</li>
</ul>
<blockquote>
<p>作用</p>
</blockquote>
<p>接口隔离原则是为了约束接口、降低类对接口的依赖性，遵循接口隔离原则有以下 5 个优点。</p>
<ul>
<li><p>将臃肿庞大的接口分解为多个粒度小的接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性。</p>
</li>
<li><p>接口隔离提高了系统的内聚性，减少了对外交互，降低了系统的耦合性。</p>
</li>
<li><p>如果接口的粒度大小定义合理，能够保证系统的稳定性；但是，如果定义过小，则会造成接口数量过多，使设计复杂化；如果定义太大，灵活性降低，无法提供定制服务，给整体项目带来无法预料的风险。</p>
</li>
<li><p>使用多个专门的接口还能够体现对象的层次，因为可以通过接口的继承，实现对总接口的定义。</p>
</li>
<li><p>能减少项目工程中的代码冗余。过大的大接口里面通常放置许多不用的方法，当实现这个接口的时候，被迫设计冗余的代码。</p>
</li>
</ul>
<br>

<h3 id="1-6-迪米特法则"><a href="#1-6-迪米特法则" class="headerlink" title="1.6 迪米特法则"></a>1.6 迪米特法则</h3><blockquote>
<p>定义</p>
</blockquote>
<p>如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。</p>
<blockquote>
<p>实现</p>
</blockquote>
<ul>
<li><p>从依赖者的角度来说，只依赖应该依赖的对象。</p>
</li>
<li><p>从被依赖者的角度说，只暴露应该暴露的方法。</p>
</li>
</ul>
<blockquote>
<p>作用</p>
</blockquote>
<p>迪米特法则要求限制软件实体之间通信的宽度和深度，正确使用迪米特法则将有以下两个优点。</p>
<ul>
<li><p>降低了类之间的耦合度，提高了模块的相对独立性。</p>
</li>
<li><p>由于亲合度降低，从而提高了类的可复用率和系统的扩展性。</p>
</li>
</ul>
<br>

<h2 id="2-设计模式"><a href="#2-设计模式" class="headerlink" title="2. 设计模式"></a>2. 设计模式</h2><br>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/41682/image-20210413121858931.png" class="" title="DesignPrinciple">



<h3 id="2-1-单例模式-Singleton"><a href="#2-1-单例模式-Singleton" class="headerlink" title="2.1 单例模式-Singleton"></a>2.1 单例模式-Singleton</h3><blockquote>
<p>定义</p>
</blockquote>
<p>一个类只有一个实例，且该类能自行创建这个实例</p>
<blockquote>
<p>特点</p>
</blockquote>
<ol>
<li>单例类只有一个实例对象。</li>
<li>该单例对象必须由单例类自行创建。</li>
<li>单例类对外提供一个访问该单例的全局访问点。</li>
</ol>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>单例模式可以保证内存中只有一个实例，减少了内存的开销。</li>
<li>可以避免对资源的多重占用。</li>
<li>单例模式设置全局访问点，可以优化和共享资源的访问。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>单例模式一般没有接口，扩展困难，如果要扩展，则除了修改原来的代码，没有第二种途径，违背开闭原则。</li>
<li>在并发测试中，单例模式不利于代码调试。在调试过程中，如果单例中的代码没有执行完，也不能模拟生成一个新的对象。</li>
<li>单例模式的功能代码通常写在一个类中，如果功能设计不合理，则很容易违背单一职责原则。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>单例类</li>
<li>访问类</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<ul>
<li>懒汉式单例</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.singleton.pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.singeleton.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: LazySingleton &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 懒汉式单例 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 特点：</span></span><br><span class="line"><span class="comment"> * 类加载时没有生成单例，只有第一次调用getInstance方法时才会创建这个单例</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* volatile: 具有可见性、有序性，不具备原子性</span></span><br><span class="line"><span class="comment">    volatile声明变量的值可能随时会被其他线程修改，</span></span><br><span class="line"><span class="comment">    使用volatile修饰的变量会强制将修改的值立即写入主存，</span></span><br><span class="line"><span class="comment">    主存中值的更新会使缓存中的值失效。</span></span><br><span class="line"><span class="comment">    volatile不会让线程阻塞，响应速度比synchronized快 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// volatile保证instance在所有线程中同步可见</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> LazySingleton instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// private避免类在外部被实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加锁同步，保证getInstance()只能被一个线程调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> LazySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> LazySingleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>饿汉式单例</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.singleton.pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.singeleton.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: HungrySingleton &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 饿汉式单例 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 特点：</span></span><br><span class="line"><span class="comment"> * 类一旦加载就创建一个单例，保证在调用getInstance()之前单例就已经存在</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungrySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 在类加载时就创建一个静态对象供系统使用，以后不再改变，</span></span><br><span class="line"><span class="comment">    所以是线程安全的，可以直接用于多线程而不会出现问题 */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HungrySingleton instance = <span class="keyword">new</span> HungrySingleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungrySingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungrySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-2-原型模式-Prototype"><a href="#2-2-原型模式-Prototype" class="headerlink" title="2.2 原型模式-Prototype"></a>2.2 原型模式-Prototype</h3><blockquote>
<p>定义</p>
</blockquote>
<p>用一个已经创建的实例，通过复制该原型对象来创建一个和原型相同或者相似的新对象</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>Java自带的原型模式基于内存二进制流的复制，在性能上比直接new一个对象更加优良。</li>
<li>可以使用深克隆方式保存对象的状态，使用原型模式将对象复制一份，并将其状态保存起来，简化了创建对象的过程，以便在需要的时候使用（例如恢复到历史某一状态），可复制实现撤销操作。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>需要为每一个类都配置一个clone方法。</li>
<li>clone方法位于类的内部，当对于已有类进行改造的时候，需要修改代码，违背了开闭原则。</li>
<li>当实现深克隆时，需要编写较为复杂的代码，而且当对象之间存在多重嵌套引用时，为了实现深克隆，每一层对象对应的类都必须支持深克隆，实现起来会比较麻烦。因此，浅克隆和深克隆需要需要运用得当。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象原型类：规定了具体原型对象必须实现的接口。</li>
<li>具体原型类：实现抽象原型类的clone()方法，它是可被复制的对象。</li>
<li>访问类：使用具体原型类中的clone()方法类复制新的对象。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.prototype.pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.prototype.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: Prototype &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 原型模式浅克隆 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 特点：</span></span><br><span class="line"><span class="comment"> * 浅克隆：创建一个新对象，新对象的属性和原来对象完全相同，对于非基本类型属性，扔指向原有属性所指向的对象的内存地址</span></span><br><span class="line"><span class="comment"> * 深克隆：创建一个对象，属性中引用的对象也会被克隆，不再指向原有对象地址</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Prototype</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Logger log = Logger.getLogger(Prototype.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        RealizeType realizeType1 = <span class="keyword">new</span> RealizeType();</span><br><span class="line">        RealizeType realizeType2 = (RealizeType) realizeType1.clone();</span><br><span class="line">        log.info(<span class="string">&quot;realizeType1 == realizeType2 ? &quot;</span> + (realizeType1 == realizeType2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealizeType</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(RealizeType.class);</span><br><span class="line"></span><br><span class="line">    RealizeType() &#123;</span><br><span class="line">        log.info(<span class="string">&quot;原型创建&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;原型复制&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-3-简单工厂模式-Simple-Factory"><a href="#2-3-简单工厂模式-Simple-Factory" class="headerlink" title="2.3 简单工厂模式-Simple Factory"></a>2.3 <del>简单工厂模式-Simple Factory</del></h3><blockquote>
<p>定义</p>
</blockquote>
<p>定义一个创建产品对象的工厂接口，将产品对象的实际创建工作推迟到具体子工厂类当中。</p>
<blockquote>
<p>按照业务场景划分，工厂模式有3种实现方式</p>
</blockquote>
<p><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="../../../../Java/DesignPatternNote/DesignPattern/image-20201111164349538.png" alt="image-20201111164349538"></p>
<center>
    <font face="Kristen ITC" color="#555555" font-size=100px>三种实现方式</font><br>
</center>



<blockquote>
<p>说明</p>
</blockquote>
<p>简单工厂模式有一个具体的工厂类，可以生产多个不同的产品，属于创建型设计模式，但是简单工厂模式不在GOF23中设计模式之列。</p>
<p>在简单工厂模式中创建实例的方法通常为静态(static)方法，因此简单工厂模式(Simple Factory Pattern)又叫做静态工厂方法模式(Static Factory Method Pattern)。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>工厂类包含必要的逻辑判断，可以决定在什么时候创建哪一个产品的实例。客户端可以免除直接创建产品对象的职责，很方便的创建响应的产品。工厂和产品的职责区分明确。</li>
<li>客户端无需知道所创建具体产品的类名，只需知道参数即可。</li>
<li>也可以引入配置文件，在不修改客户端的代码的情况下更换和添加新的具体产品类。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>简单工厂模式的工厂类单一，负责所有产品的创建，职责过重，一旦异常，整个系统将受到影响。且工厂类代码会非常臃肿，违背高聚合原则。</li>
<li>使用简单工厂模式会增加系统中类的个数(引入新的工厂类)，增加系统的复杂度和理解难度。</li>
<li>系统拓展困难，一旦增加新产品不得不修改工厂逻辑，在产品类型较多时，可能造成逻辑过于复杂。</li>
</ul>
<blockquote>
<p>应用场景</p>
</blockquote>
<p>对于产品种类相对较少的情况，考虑使用简单工厂模式。使用简单工厂模式的客户端只需要传入工厂类的参数，不需要关心如何创建对象的逻辑，可以很方便地创建所需产品。</p>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>简单工厂(Simple Factory)：是简单工厂模式的核心，负责实现创建所有实例的内部逻辑。工厂类创建产品类的方法可以被外界直接调用，创建所需的产品对象。</li>
<li>抽象产品(Abstract Product)：是简单工厂创建的所有对象的父亲，负责描述所有实例共有的公共接口。</li>
<li>具体产品(Concrete Product)：是简单工厂模式的创建目标。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.simpleFactory.pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.simpleactory.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: Client &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 简单工厂模式 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;测试类&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactoryDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = Logger.getLogger(SimpleFactoryDemo.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;输入产品型号：&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> choice = scanner.nextInt();</span><br><span class="line">            <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>: log.info(<span class="string">&quot;成功退出&quot;</span>); <span class="keyword">return</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>: SimpleFactory.makeProduct(Constant.PRODUCT_1).show(); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>: SimpleFactory.makeProduct(Constant.PRODUCT_2).show(); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>: SimpleFactory.makeProduct(Constant.PRODUCT_3).show(); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>: log.info(<span class="string">&quot;该产品不存在，请重新输入！&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象产品</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">product</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     枚举所有产品</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Constant</span> </span>&#123;</span><br><span class="line">    PRODUCT_1,</span><br><span class="line">    PRODUCT_2,</span><br><span class="line">    PRODUCT_3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体产品1</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct1</span> <span class="keyword">implements</span> <span class="title">product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteProduct1.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体产品1显示...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体产品2</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct2</span> <span class="keyword">implements</span> <span class="title">product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteProduct2.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体产品2显示...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体产品3</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct3</span> <span class="keyword">implements</span> <span class="title">product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteProduct3.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体产品3显示...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     简单工厂</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> product <span class="title">makeProduct</span><span class="params">(Constant c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">            <span class="keyword">case</span> PRODUCT_1:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct1();</span><br><span class="line">            <span class="keyword">case</span> PRODUCT_2:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct2();</span><br><span class="line">            <span class="keyword">case</span> PRODUCT_3:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct3();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-4-工厂方法模式-Factory-Method"><a href="#2-4-工厂方法模式-Factory-Method" class="headerlink" title="2.4 工厂方法模式-Factory Method"></a>2.4 工厂方法模式-Factory Method</h3><blockquote>
<p>说明</p>
</blockquote>
<p>工厂方法模式是对简单工厂模式的进一步抽象化，其好处是可以使系统在不修改原来代码的情况下引进新的产品，即满足开闭原则。</p>
<p>工厂方法模式考虑的是一种工厂负责一类产品的生产，畜牧场只养动物、电视机厂只生产电视机、计算机软件学院只培养计算机软件专业的学生等。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>用户只需要具体工厂的名称就可得到所要的产品，无需知道产品的具体创建过程。</li>
<li>灵活性增强，对于新产品的创建，只需多写一个相应的工厂类。</li>
<li>典型的解耦框架。高层模块只需要知道产品的抽象类，无需关系其他实现类，满足迪米特法则、依赖倒置原则和里式替换原则。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>类的个数容易过多，增加复杂度。</li>
<li>增加了系统的抽象性和理解难度。</li>
<li>一个工厂只能生产一种产品，此弊端可使用抽象工厂模式解决。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象工厂(Abstract Factory)：提供了创建产品的接口，调用者通过它访问具体工厂的工厂方法类创建产品。</li>
<li>具体工厂(Concrete Factory)：主要是实现抽象工厂中的抽象方法，完成具体产品的创建。</li>
<li>抽象产品(Abstract Product)：定义了产品的规范，描述了产品的主要特性和功能。</li>
<li>具体产品(Concrete Product)：实现了抽象产品角色定义的接口，由具体工厂来创建，它同具体工厂之间一一对应。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.factoryMethod.pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Document;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.NodeList;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.SAXException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilder;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.ParserConfigurationException;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.factoryMethod.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: FactoryMethod &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 工厂方法模式 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;测试类&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryMethodDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = Logger.getLogger(FactoryMethodDemo.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 读取XML配置文件，提取具体类名，返回实例对象集合</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> List&lt;Object&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SAXException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ParserConfigurationException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassNotFoundException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalAccessException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InstantiationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Object&gt; <span class="title">getObjects</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException, SAXException, ParserConfigurationException,  ClassNotFoundException, IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line">        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();</span><br><span class="line">        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();</span><br><span class="line">        Document document = documentBuilder.parse(<span class="keyword">new</span> File(filePath));</span><br><span class="line">        NodeList nodeList = document.getElementsByTagName(<span class="string">&quot;className&quot;</span>);</span><br><span class="line">        List&lt;Object&gt; objects = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nodeList.getLength(); i++) &#123;</span><br><span class="line">            String packageName = FactoryMethodDemo.class.getPackage().getName();</span><br><span class="line">            String className = nodeList.item(i).getTextContent();</span><br><span class="line">            Class&lt;?&gt; c = Class.forName(packageName + <span class="string">&quot;.&quot;</span> + className);</span><br><span class="line">            objects.add(c.newInstance());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> objects;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;Object&gt; objects = getObjects(<span class="string">&quot;src/main/java/top/parak/factoryMethod/pattern/config.xml&quot;</span>);</span><br><span class="line">            objects.stream().forEach( o -&gt; &#123;</span><br><span class="line">                AbstractFactory factory = (AbstractFactory) o;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    factory.produce().show();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    log.error(e.getMessage());</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;P&gt;</span></span><br><span class="line"><span class="comment"> *     抽象产品</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">product</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体产品1</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct1</span> <span class="keyword">implements</span> <span class="title">product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteProduct1.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体产品1展示...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体产品2</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct2</span> <span class="keyword">implements</span> <span class="title">product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteProduct2.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体产品2展示...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体产品3</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct3</span> <span class="keyword">implements</span> <span class="title">product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteProduct3.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体产品3展示...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象工厂</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> product <span class="title">produce</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体工厂1</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory1</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteFactory1.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> product <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体工厂1生产中...&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;===&gt;产品1生产完成&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体工厂2</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory2</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteFactory2.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> product <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体工厂2生产中...&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;===&gt;产品2生产完成&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体工厂3</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory3</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteFactory3.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> product <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体工厂3生产中...&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;===&gt;产品3生产完成&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>config.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">className</span>&gt;</span>ConcreteFactory1<span class="tag">&lt;/<span class="name">className</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">className</span>&gt;</span>ConcreteFactory2<span class="tag">&lt;/<span class="name">className</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">className</span>&gt;</span>ConcreteFactory3<span class="tag">&lt;/<span class="name">className</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2020-10-17 11:25:34 PARAK INFO  [top.parak.factoryMethod.pattern.ConcreteFactory1] [thread: main] [FactoryMethod.java: 143] - 具体工厂1生产中...</span><br><span class="line">2020-10-17 11:25:35 PARAK INFO  [top.parak.factoryMethod.pattern.ConcreteFactory1] [thread: main] [FactoryMethod.java: 149] - ===&gt;产品1生产完成</span><br><span class="line">2020-10-17 11:25:35 PARAK INFO  [top.parak.factoryMethod.pattern.ConcreteProduct1] [thread: main] [FactoryMethod.java: 98] - 具体产品1展示...</span><br><span class="line">2020-10-17 11:25:35 PARAK INFO  [top.parak.factoryMethod.pattern.ConcreteFactory2] [thread: main] [FactoryMethod.java: 162] - 具体工厂2生产中...</span><br><span class="line">2020-10-17 11:25:36 PARAK INFO  [top.parak.factoryMethod.pattern.ConcreteFactory2] [thread: main] [FactoryMethod.java: 168] - ===&gt;产品2生产完成</span><br><span class="line">2020-10-17 11:25:36 PARAK INFO  [top.parak.factoryMethod.pattern.ConcreteProduct2] [thread: main] [FactoryMethod.java: 110] - 具体产品2展示...</span><br><span class="line">2020-10-17 11:25:36 PARAK INFO  [top.parak.factoryMethod.pattern.ConcreteFactory3] [thread: main] [FactoryMethod.java: 181] - 具体工厂3生产中...</span><br><span class="line">2020-10-17 11:25:37 PARAK INFO  [top.parak.factoryMethod.pattern.ConcreteFactory3] [thread: main] [FactoryMethod.java: 187] - ===&gt;产品3生产完成</span><br><span class="line">2020-10-17 11:25:37 PARAK INFO  [top.parak.factoryMethod.pattern.ConcreteProduct3] [thread: main] [FactoryMethod.java: 122] - 具体产品3展示...</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-5-抽象工厂模式-Abstract-Factory"><a href="#2-5-抽象工厂模式-Abstract-Factory" class="headerlink" title="2.5 抽象工厂模式-Abstract Factory"></a>2.5 抽象工厂模式-Abstract Factory</h3><blockquote>
<p>说明</p>
</blockquote>
<p>工厂方法模式：一个工厂只负责一类产品的生产，像小作坊，电器厂只生产电风扇。<br>抽象工厂模式：一个工厂负责多种相关产品的生产，像综合型工厂，电器厂生产电视机、空调和冰箱等。</p>
<p>抽象工厂模式是工厂方法模式的升级版本，工厂方法模式只生产一个等级的产品，抽象工厂模式可生产多个等级的产品。</p>
<blockquote>
<p>定义</p>
</blockquote>
<p>一种为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构。</p>
<blockquote>
<p>使用条件</p>
</blockquote>
<ul>
<li>系统中有多个产品族，每个具体工厂创建同一族但属于不同等级结构的产品。</li>
<li>系统一次只可能消费其中某一族产品，即同族的产品一起使用。</li>
</ul>
<blockquote>
<p>优点</p>
</blockquote>
<p>除了包含工厂方法模式的优点，还有如下优点：</p>
<ul>
<li>可以在类的内部对产品族中相关联的多等级产品共同管理，而不必专门引入多个新的类来进行管理。</li>
<li>当需要产品族时，抽象工厂可以保证客户端始终只使用同一个产品的产品族。</li>
<li>抽象工厂增强了程序的可扩展性，当增加一个新的产品族时，不需要修改原代码，满足开闭原则。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<p>当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改。增加了系统的抽象性和理解难度。</p>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象工厂(Abstract Factory)：提供了创建产品的接口，它包含多个创建产品的方法，可以创建多个不同等级的产品。</li>
<li>具体工厂(Concrete Factory)：主要是实现抽象工厂中的多个抽象方法，完成具体产品的创建。</li>
<li>抽象产品(Abstract Product)：定义了产品的规范，描述了产品的主要特性和功能，抽象工厂模式有多个抽象产品。</li>
<li>具体产品(Concrete Product)：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间是多对一的关系。</li>
</ul>
<blockquote>
<p>实例</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.abstractFactory.example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.abstractFactory.example &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: Farm &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 抽象工厂模式模拟农场 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.border.TitledBorder;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     农场测试类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FarmDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> JFrame frame = <span class="keyword">new</span> JFrame(<span class="string">&quot;FarmDemo&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> JDesktopPane desktopPane = <span class="keyword">new</span> JDesktopPane();</span><br><span class="line">    <span class="keyword">private</span> JPanel contentPane = (JPanel) frame.getContentPane();</span><br><span class="line">    <span class="keyword">private</span> JPanel leftPanel = <span class="keyword">new</span> JPanel();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ImageIcon backIcon = <span class="keyword">new</span> ImageIcon(<span class="string">&quot;img/Farm.jpg&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JLabel rightLabel = <span class="keyword">new</span> JLabel(backIcon);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JLabel tipLabel = <span class="keyword">new</span> JLabel(<span class="string">&quot;选择产品&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JButton produceButton = <span class="keyword">new</span> JButton(<span class="string">&quot;开始生产&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Font font = <span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>, Font.PLAIN, <span class="number">20</span>);</span><br><span class="line">    <span class="keyword">private</span> JComboBox&lt;String&gt; productComboBox = <span class="keyword">new</span> JComboBox&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> JTextArea textArea = <span class="keyword">new</span> JTextArea();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AbstractFarm baoXingFarm = <span class="keyword">new</span> BaoXingFarm();</span><br><span class="line">    <span class="keyword">private</span> AbstractFarm zhouQiaoFarm = <span class="keyword">new</span> ZhouQiaoFarm();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FarmDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        contentPane.setOpaque(<span class="keyword">false</span>);</span><br><span class="line">        contentPane.setLayout(<span class="keyword">null</span>);</span><br><span class="line">        rightLabel.setBounds(<span class="number">300</span>, <span class="number">0</span>, backIcon.getIconWidth(), backIcon.getIconHeight());</span><br><span class="line">        desktopPane.setLayout(<span class="keyword">null</span>);</span><br><span class="line">        desktopPane.add(rightLabel, <span class="keyword">new</span> Integer(Integer.MIN_VALUE));</span><br><span class="line">        leftPanel.setBackground(Color.CYAN);</span><br><span class="line">        leftPanel.setBounds(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">420</span>);</span><br><span class="line">        desktopPane.add(leftPanel);</span><br><span class="line"></span><br><span class="line">        leftPanel.setLayout(<span class="keyword">null</span>);</span><br><span class="line">        tipLabel.setFont(font);</span><br><span class="line">        tipLabel.setBounds(<span class="number">5</span>, <span class="number">10</span>, <span class="number">90</span>, <span class="number">30</span>);</span><br><span class="line">        leftPanel.add(tipLabel);</span><br><span class="line">        String[] products = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;马&quot;</span>, <span class="string">&quot;牛&quot;</span>, <span class="string">&quot;青菜&quot;</span>, <span class="string">&quot;白菜&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (String product : products) &#123;</span><br><span class="line">            productComboBox.addItem(product);</span><br><span class="line">        &#125;</span><br><span class="line">        productComboBox.setFont(font);</span><br><span class="line">        produceButton.setFont(font);</span><br><span class="line">        productComboBox.setBounds(<span class="number">90</span>, <span class="number">10</span>, <span class="number">80</span>, <span class="number">30</span>);</span><br><span class="line">        leftPanel.add(productComboBox);</span><br><span class="line">        produceButton.setBounds(<span class="number">180</span>, <span class="number">10</span>, <span class="number">115</span>, <span class="number">30</span>);</span><br><span class="line">        leftPanel.add(produceButton);</span><br><span class="line">        produceButton.addActionListener(<span class="keyword">new</span> ProductAction());</span><br><span class="line"></span><br><span class="line">        textArea.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>, Font.PLAIN, <span class="number">14</span>));</span><br><span class="line">        JScrollPane scrollPane = <span class="keyword">new</span> JScrollPane(textArea);</span><br><span class="line">        scrollPane.setBounds(<span class="number">10</span>, <span class="number">50</span>, <span class="number">280</span>, <span class="number">360</span>);</span><br><span class="line">        scrollPane.setBorder(<span class="keyword">new</span> TitledBorder(<span class="string">&quot;生产日志&quot;</span>));</span><br><span class="line">        scrollPane.getViewport().setOpaque(<span class="keyword">false</span>);</span><br><span class="line">        leftPanel.add(scrollPane);</span><br><span class="line"></span><br><span class="line">        frame.setContentPane(desktopPane);</span><br><span class="line">        frame.setBounds(<span class="number">300</span>,<span class="number">300</span>,<span class="number">1500</span>,<span class="number">500</span>);</span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ProductAction</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">            JInternalFrame internalFrame = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">switch</span> (productComboBox.getSelectedItem().toString()) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;马&quot;</span>:</span><br><span class="line">                    internalFrame = zhouQiaoFarm.produceAnimalProduct().showImage();</span><br><span class="line">                    textArea.append(getTime() + <span class="string">&quot; 周桥农场：新马出生\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;牛&quot;</span>:</span><br><span class="line">                    internalFrame = baoXingFarm.produceAnimalProduct().showImage();</span><br><span class="line">                    textArea.append(getTime() + <span class="string">&quot; 宝兴农场：新牛出生\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;青菜&quot;</span>:</span><br><span class="line">                    internalFrame = baoXingFarm.producePlantProduct().showImage();</span><br><span class="line">                    textArea.append(getTime() + <span class="string">&quot; 宝兴农场：青菜出生\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;白菜&quot;</span>:</span><br><span class="line">                    internalFrame = zhouQiaoFarm.producePlantProduct().showImage();</span><br><span class="line">                    textArea.append(getTime() + <span class="string">&quot; 周桥农场：白菜出生\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            internalFrame.setBounds(index + <span class="number">300</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">350</span>);</span><br><span class="line">            desktopPane.add(internalFrame);</span><br><span class="line">            index = (index + <span class="number">300</span>) % <span class="number">1200</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> String <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class="keyword">new</span> Date());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> FarmDemo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象产品：动物类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AnimalProduct</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JInternalFrame <span class="title">showImage</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象产品：植物类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PlantProduct</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JInternalFrame <span class="title">showImage</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     动物产品展示窗口</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimalFrame</span> <span class="keyword">extends</span> <span class="title">JInternalFrame</span> <span class="keyword">implements</span> <span class="title">AnimalProduct</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AnimalFrame</span><span class="params">(String animalName, String imagePath)</span> </span>&#123;</span><br><span class="line">        Container contentPane = getContentPane();</span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line">        panel.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">        panel.setBorder(BorderFactory.createTitledBorder(<span class="string">&quot;动物：&quot;</span> + animalName));</span><br><span class="line">        JScrollPane scrollPane = <span class="keyword">new</span> JScrollPane(panel);</span><br><span class="line">        contentPane.add(scrollPane, BorderLayout.CENTER);</span><br><span class="line">        JLabel label = <span class="keyword">new</span> JLabel(<span class="keyword">new</span> ImageIcon(imagePath));</span><br><span class="line">        panel.add(label);</span><br><span class="line">        pack();</span><br><span class="line">        setTitle(animalName);</span><br><span class="line">        setVisible(<span class="keyword">false</span>);</span><br><span class="line">        setClosable(<span class="keyword">true</span>);</span><br><span class="line">        setIconifiable(<span class="keyword">true</span>);</span><br><span class="line">        setResizable(<span class="keyword">false</span>);</span><br><span class="line">        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JInternalFrame <span class="title">showImage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     植物产品展示窗口</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PlantFrame</span> <span class="keyword">extends</span> <span class="title">JInternalFrame</span> <span class="keyword">implements</span> <span class="title">PlantProduct</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PlantFrame</span><span class="params">(String plantName, String imagePath)</span> </span>&#123;</span><br><span class="line">        Container contentPane = getContentPane();</span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line">        panel.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">        panel.setBorder(BorderFactory.createTitledBorder(<span class="string">&quot;植物：&quot;</span> + plantName));</span><br><span class="line">        JScrollPane scrollPane = <span class="keyword">new</span> JScrollPane(panel);</span><br><span class="line">        contentPane.add(scrollPane, BorderLayout.CENTER);</span><br><span class="line">        JLabel label = <span class="keyword">new</span> JLabel(<span class="keyword">new</span> ImageIcon(imagePath));</span><br><span class="line">        panel.add(label);</span><br><span class="line">        pack();</span><br><span class="line">        setTitle(plantName);</span><br><span class="line">        setVisible(<span class="keyword">false</span>);</span><br><span class="line">        setClosable(<span class="keyword">true</span>);</span><br><span class="line">        setIconifiable(<span class="keyword">true</span>);</span><br><span class="line">        setResizable(<span class="keyword">false</span>);</span><br><span class="line">        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JInternalFrame <span class="title">showImage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体动物产品：马类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Horse</span> <span class="keyword">extends</span> <span class="title">AnimalFrame</span>  </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Horse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">&quot;马-🐴&quot;</span>, <span class="string">&quot;img/Horse.jpg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体动物产品：牛类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cattle</span> <span class="keyword">extends</span> <span class="title">AnimalFrame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cattle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">&quot;牛-🐮&quot;</span>, <span class="string">&quot;img/Cattle.jpg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体植物产品：青菜</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vegetable</span> <span class="keyword">extends</span> <span class="title">PlantFrame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Vegetable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">&quot;青菜&quot;</span>, <span class="string">&quot;img/Vegetable.jpg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体植物产品：白菜</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cabbage</span> <span class="keyword">extends</span> <span class="title">PlantFrame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cabbage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">&quot;白菜&quot;</span>, <span class="string">&quot;img/Cabbage.jpg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象工厂：农场类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AbstractFarm</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> AnimalProduct <span class="title">produceAnimalProduct</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlantProduct <span class="title">producePlantProduct</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体工厂：宝兴农场</span></span><br><span class="line"><span class="comment"> *     生产产品：牛、青菜</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaoXingFarm</span> <span class="keyword">implements</span> <span class="title">AbstractFarm</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(BaoXingFarm.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AnimalProduct <span class="title">produceAnimalProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;宝兴农场===&gt;新牛出生&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cattle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlantProduct <span class="title">producePlantProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;宝兴农场===&gt;青菜长成&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Vegetable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体农场：周桥农场</span></span><br><span class="line"><span class="comment"> *     生产产品：马、白菜</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZhouQiaoFarm</span> <span class="keyword">implements</span> <span class="title">AbstractFarm</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ZhouQiaoFarm.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AnimalProduct <span class="title">produceAnimalProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;周桥农场===&gt;新马出生&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Horse();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlantProduct <span class="title">producePlantProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;周桥农场===&gt;白菜长成&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cabbage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果</p>
</blockquote>
<p><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="../../../../Java/DesignPatternNote/DesignPattern/image-20201017185342528.png" alt="image-20201017185342528"></p>
<br>

<h3 id="2-6-建造者模式-Builder"><a href="#2-6-建造者模式-Builder" class="headerlink" title="2.6 建造者模式-Builder"></a>2.6 建造者模式-Builder</h3><blockquote>
<p>定义</p>
</blockquote>
<p>将一个复杂对象的构造与它的表示分离，使同样的构造过程可以创建不同的表示。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>封装性好，构建和表示分离。</li>
<li>扩展性好，各个具体的建造者相互独立，有利于系统的解耦。</li>
<li>客户端不必知道产品内部组成的细节，建造者可以对创建过程逐步细化，而不对其他模块产生任何影响，便于控制细节风险。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>产品的组成部分必须相同，这限制了其使用范围。</li>
<li>如果产品的内部变化复杂，如果产品内部发生变化，则建造者也要同步修改，后期维护成本较大。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li><p>产品角色(Product)：包含多个组件的复杂对象，由具体建造者来创建其各个零部件。</p>
</li>
<li><p>抽象建造者(Abstract Builder)：包含创建产品各个子部件的抽象方法的接口，通常还包含一个返回复杂产品的方法getResult()。</p>
</li>
<li><p>具体建造者(Concrete Builder)：实现抽象建造者的接口，完成复杂产品的各个部件的具体创建方法。</p>
</li>
<li><p>指挥者(Director)：它调用建造者对象中的部件构造与装配方法完成复杂对象的创建，在指挥者中不涉及具体产品的信息。</p>
</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.builder.pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.builder.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: Builder &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 建造者模式 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;测试类&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuilderDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = Logger.getLogger(BuilderDemo.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Builder builder = <span class="keyword">new</span> ConcreteBuilder();</span><br><span class="line">        Director director = <span class="keyword">new</span> Director(builder);</span><br><span class="line">        Product product = director.construct();</span><br><span class="line">        log.info(product.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象产品类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String componentA;</span><br><span class="line">    <span class="keyword">private</span> String componentB;</span><br><span class="line">    <span class="keyword">private</span> String componentC;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象建造者</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Product product = <span class="keyword">new</span> Product();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildComponentA</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildComponentB</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildComponentC</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">getProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体建造者</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteBuilder</span> <span class="keyword">extends</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildComponentA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        product.setComponentA(<span class="string">&quot;建造零件A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildComponentB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        product.setComponentB(<span class="string">&quot;建造零件B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildComponentC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        product.setComponentC(<span class="string">&quot;建造零件C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;P&gt;</span></span><br><span class="line"><span class="comment"> *     指挥者</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Builder builder;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.builder = builder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        builder.buildComponentA();</span><br><span class="line">        builder.buildComponentB();</span><br><span class="line">        builder.buildComponentC();</span><br><span class="line">        <span class="keyword">return</span> builder.getProduct();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-7-代理模式-Proxy"><a href="#2-7-代理模式-Proxy" class="headerlink" title="2.7 代理模式-Proxy"></a>2.7 代理模式-Proxy</h3><blockquote>
<p>定义</p>
</blockquote>
<p>由于某些原因需要给某对象提供一个代理以控制对该对象的访问。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>代理模式在客户端和目标对象之间起到一个中介作用和保护目标对象的作用。</li>
<li>代理对象可以扩展对象的功能。</li>
<li>代理模式能将客户端与目标对象分离，在一定程度上降低系统的耦合度，增加了系统的可扩展性。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>代理模式会造成系统设计中类的数量增加。</li>
<li>代理模式能将客户端与目标对象之间增加一个代理对象，会造成请求处理速度变慢。</li>
<li>增加了系统的复杂度。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象主题(Subject)：通过接口或抽象类声明真实主题和代理对象实现的业务方法。</li>
<li>真实主题(Real Subject)：实现了抽象主题中的具体业务，是代理对象锁代表的真实对象，是最终要引用的对象。</li>
<li>代理(Proxy)：提供了与真实主题相同的接口，其内部含有对真实主题的引用，它可以访问、控制或扩展真实主题的功能。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.proxy.pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.proxy.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: Proxy &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 代理模式 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;测试类&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Proxy proxy = <span class="keyword">new</span> Proxy();</span><br><span class="line">        proxy.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象主题</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     真实主题</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(RealSubject.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;访问真实主题...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     代理</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(Proxy.class);</span><br><span class="line">    <span class="keyword">private</span> RealSubject realSubject;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (realSubject == <span class="keyword">null</span>) &#123;</span><br><span class="line">            realSubject = <span class="keyword">new</span> RealSubject();</span><br><span class="line">            preHandler();</span><br><span class="line">            realSubject.request();</span><br><span class="line">            postHandler();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;访问真实主题之前的预处理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;访问真实主题之后的后续处理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-8-适配器模式-Adapter"><a href="#2-8-适配器模式-Adapter" class="headerlink" title="2.8 适配器模式-Adapter"></a>2.8 适配器模式-Adapter</h3><blockquote>
<p>定义</p>
</blockquote>
<p>将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>客户端通过适配器可以透明地调用目标接口。</li>
<li>复用了现存的类，程序员不需要修改原有代码而复用现有的适配者类。</li>
<li>将目标类与适配者类解耦，解决了目标类和适配者类接口不一致的问题。</li>
<li>在很多业务场景中符合开闭原则。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>适配器编写过程需要结合业务场景全面考虑，可能会增加系统的复杂性。</li>
<li>增加代码阅读难度，过多使用适配器会使系统代码变得凌乱。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>目标接口(Target)：当前系统业务所期待的接口，可以是抽象类或者接口。</li>
<li>适配者类(Adaptee)：被访问和适配的现存组件库中的组件接口。</li>
<li>适配器类(Adapter)：转换器，通过继承或引用适配者的对象，把适配者接口转换目标接口，让客户端目标接口的格式访问适配者。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.adapter.pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.adapter.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: Adapter &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 适配器模式 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;P&gt;测试类&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Target target = <span class="keyword">new</span> Adapter();</span><br><span class="line">        target.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     目标接口</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     适配者接口</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(Adaptee.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">specificRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;适配者中的业务代码被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     适配器类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Adaptee</span> <span class="keyword">implements</span> <span class="title">Target</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        specificRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-9-桥接模式-Bridge"><a href="#2-9-桥接模式-Bridge" class="headerlink" title="2.9 桥接模式-Bridge"></a>2.9 桥接模式-Bridge</h3><blockquote>
<p>定义</p>
</blockquote>
<p>将抽象与实现分离，使它们可以独立变化。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>抽象与实现分离，扩展能力强。</li>
<li>符合开闭原则。</li>
<li>符合合成复用原则。</li>
<li>其实现细节对客户透明。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>由于聚合关系建立在抽象层，要求开发者对抽象化进行设计与编程，能正确的识别出系统中两个独立变化的维度，这增加了系统的理解与设计难度。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象化角色(Abstraction)：定义抽象类，并包含一个对实现化对象的引用。</li>
<li>扩展抽象化角色(Refined Abstraction)：是抽象化角色的子类，实现父类中的业务方法，并通过组合关系调用实现化角色中的业务方法。</li>
<li>实现化角色(Implementor)：定义实现化角色的接口，供扩展抽象化角色调用。</li>
<li>具体实现化角色(Concrete Implementor)：给出实现化角色接口的具体实现。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.bridge.pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.bridge.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: Bridge &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 桥接模式 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;测试类&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BridgeDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Implementor implementor = <span class="keyword">new</span> ConcreteImplementorA();</span><br><span class="line">        Abstraction abstraction = <span class="keyword">new</span> RefinedAbstraction(implementor);</span><br><span class="line">        abstraction.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     实现化角色</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Implementor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationImpl</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体实现化角色</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteImplementorA</span> <span class="keyword">implements</span> <span class="title">Implementor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteImplementorA.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体实现化角色(Concrete Implementor)被访问&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象化角色</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Abstraction</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Implementor implementor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Abstraction</span><span class="params">(Implementor implementor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.implementor = implementor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     扩展抽象化角色</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RefinedAbstraction</span> <span class="keyword">extends</span> <span class="title">Abstraction</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(RefinedAbstraction.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">RefinedAbstraction</span><span class="params">(Implementor implementor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(implementor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;扩展抽象化角色(Refined Abstraction)被访问&quot;</span>);</span><br><span class="line">        implementor.operationImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-10-装饰模式-Decorator"><a href="#2-10-装饰模式-Decorator" class="headerlink" title="2.10 装饰模式-Decorator"></a>2.10 装饰模式-Decorator</h3><blockquote>
<p>定义</p>
</blockquote>
<p>在不改变现有对象结构的情况下，动态地给该对象增加一些职责的模式。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>装饰器是继承的有力补充，比继承灵活，在不改变原有对象的情况下，动态的给一个对象扩展功能，即插即用。</li>
<li>通过使用不用装饰类及这些装饰类的排列组合，可以实现不同效果。</li>
<li>装饰模式完全遵守开闭原则。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>装饰模式会增加许多子类，过度使用会增加程序的复杂性。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象构建角色(Component)：定义一个抽象接口以规范准备接附加责任的对象。</li>
<li>具体构建角色(Concrete Component)：实现抽象构件，通过装饰角色为其添加一些职责。</li>
<li>抽象装饰角色(Decorator)：继承抽象构件，并包含具体构件的实例，可以通过其子类扩展具体构件的功能。</li>
<li>具体装饰角色(Concrete Decorator)：实现抽象装饰的相关方法，并给具体构件对象添加附加的责任。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.decorator.pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.decorator.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: Decorator &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 装饰模式 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;测试类&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecoratorDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Component component1 = <span class="keyword">new</span> ConcreteComponent();</span><br><span class="line">        component1.operation();</span><br><span class="line">        Component component2 = <span class="keyword">new</span> ConcreteDecorator(component1);</span><br><span class="line">        component2.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象构件角色</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体构件角色</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponent</span> <span class="keyword">implements</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteComponent.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteComponent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;创建具体构件角色&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;调用具体构件角色的方法operation()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象装饰角色</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">implements</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Component component;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.component = component;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体装饰角色</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecorator</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteComponent.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteDecorator</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(component);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.operation();</span><br><span class="line">        addFunction();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;为具体构件角色增加额外的功能function()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-11-外观模式-Facade"><a href="#2-11-外观模式-Facade" class="headerlink" title="2.11 外观模式-Facade"></a>2.11 外观模式-Facade</h3><blockquote>
<p>定义</p>
</blockquote>
<p>通过为多个复杂的子系统提供一个一致的接口，而使这些子系统更加容易被访问。外观模式对外有一个统一接口，外部应用程序不用关心内部子系统的具体细节，这样会大大降低应用程序的复杂度，提高了程序的可维护性。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>降低了子系统与客户端之间的耦合度，使得子系统高的变化不会影响调用它的客户类。</li>
<li>对客户屏蔽了子系统组件，减少了客户处理的对象数目，并使得子系统使用起来更加容易。</li>
<li>降低了大型软件系统中的编译依赖性，简化了系统在不同平台之间的移植过程，因为编译一个子系统不会影响其他的子系统，也不会影响外观对象。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>不能很好地限制客户使用子系统类，很容易带来未知风险。</li>
<li>增加新的子系统可能需要修改外观类或客户端的源代码，违背了开闭原则。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>外观角色(Facade)：为多个子系统对外提供一个共同的接口。</li>
<li>子系统角色(Sub System)：实现系统的部分功能，客户可以通过外观角色访问它。</li>
<li>客户角色(Client)：通过一个外观角色访问各个子系统的功能。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.facade.pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/P&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.facade.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: Facade &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 外观模式 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;测试类&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FacadeDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Facade facade = <span class="keyword">new</span> Facade();</span><br><span class="line">        facade.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SubSys1 subSys1 = <span class="keyword">new</span> SubSys1();</span><br><span class="line">    <span class="keyword">private</span> SubSys2 subSys2 = <span class="keyword">new</span> SubSys2();</span><br><span class="line">    <span class="keyword">private</span> SubSys3 subSys3 = <span class="keyword">new</span> SubSys3();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        subSys1.method1();</span><br><span class="line">        subSys2.method2();</span><br><span class="line">        subSys3.method3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSys1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(SubSys1.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;子系统1的method1被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSys2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(SubSys2.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;子系统2的method2被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSys3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(SubSys3.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;子系统3的method3被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-12-享元模式-Flyweight"><a href="#2-12-享元模式-Flyweight" class="headerlink" title="2.12 享元模式-Flyweight"></a>2.12 享元模式-Flyweight</h3><blockquote>
<p>定义</p>
</blockquote>
<p>运用共享技术来有效地支持大量细粒度对象的复用。</p>
<blockquote>
<p>优势</p>
</blockquote>
<p>相同对象只保存一份，这降低了系统中对象的数量，从而降低了系统中细粒度对象给内存带来的压力。</p>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>为了使对象可以共享，需要将一些不能共享的状态外部化，这将增加程序的复杂性。</li>
<li>读取享元模式的外部状态会使得运行时间稍微变长。</li>
</ul>
<blockquote>
<p>状态</p>
</blockquote>
<ul>
<li>内部状态：不会随着环境的改变而改变的可共享部分。</li>
<li>外部状态：随着环境改变而改变的不可以共享的部分。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象享元角色(Flyweight)：所有的具体享元类的基类，为具体享元规范需要实现的公共接口，非享元的外部状态以参数的形式通过方法传入。</li>
<li>具体享元角色(Concrete Flyweight)：实现抽象享元角色中所规定的接口。</li>
<li>非享元角色(Unsharable Flyweight)：是不可以共享的外部状态，它以参数的形式注入具体享元的相关方法中。</li>
<li>享元工厂角色(Flyweight Factory)：负责创建和管理享元角色。当客户对象请求的时候，享元工厂检查系统中是否存在符合要求的享元对象，如果存在则提供给客户；如果不存在的话，则创建一个新的享元对象。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.flyweight.pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.flyweight.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: Flyweight &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 享元模式 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;P&gt;测试类&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyweightDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FlyweightFactory factory = <span class="keyword">new</span> FlyweightFactory();</span><br><span class="line">        Flyweight f1 = factory.getFlyweight(<span class="string">&quot;K&quot;</span>);</span><br><span class="line">        Flyweight f2 = factory.getFlyweight(<span class="string">&quot;H&quot;</span>);</span><br><span class="line">        Flyweight f3 = factory.getFlyweight(<span class="string">&quot;I&quot;</span>);</span><br><span class="line">        Flyweight f4 = factory.getFlyweight(<span class="string">&quot;G&quot;</span>);</span><br><span class="line">        Flyweight f5 = factory.getFlyweight(<span class="string">&quot;H&quot;</span>);</span><br><span class="line">        f1.operation(<span class="keyword">new</span> UnsharedConcreteFlyweight(<span class="string">&quot;第一次调用K&quot;</span>));</span><br><span class="line">        f2.operation(<span class="keyword">new</span> UnsharedConcreteFlyweight(<span class="string">&quot;第一次调用H&quot;</span>));</span><br><span class="line">        f3.operation(<span class="keyword">new</span> UnsharedConcreteFlyweight(<span class="string">&quot;第一次调用I&quot;</span>));</span><br><span class="line">        f4.operation(<span class="keyword">new</span> UnsharedConcreteFlyweight(<span class="string">&quot;第一次调用G&quot;</span>));</span><br><span class="line">        f5.operation(<span class="keyword">new</span> UnsharedConcreteFlyweight(<span class="string">&quot;第二次调用H&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     非享元角色</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnsharedConcreteFlyweight</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象享元角色</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Flyweight</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(UnsharedConcreteFlyweight concreteFlyweight)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体享元角色</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFlyweight</span> <span class="keyword">implements</span> <span class="title">Flyweight</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteFlyweight.class);</span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteFlyweight</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        log.info(<span class="string">&quot;具体享元&quot;</span> + key + <span class="string">&quot;被创建&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(UnsharedConcreteFlyweight concreteFlyweight)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体享元&quot;</span> + key + <span class="string">&quot;被调用&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;非享元信息是：&quot;</span> + concreteFlyweight.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     享元工厂角色</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyweightFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(FlyweightFactory.class);</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, Flyweight&gt; flyweightMap = <span class="keyword">new</span> HashMap&lt;String, Flyweight&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flyweight <span class="title">getFlyweight</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        Flyweight flyweight = (Flyweight) flyweightMap.get(key);</span><br><span class="line">        <span class="keyword">if</span> (flyweight != <span class="keyword">null</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;具体享元&quot;</span> + key + <span class="string">&quot;已经存在，被成功获取！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            flyweight = <span class="keyword">new</span> ConcreteFlyweight(key);</span><br><span class="line">            flyweightMap.put(key, flyweight);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flyweight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-13-组合模式-Composite"><a href="#2-13-组合模式-Composite" class="headerlink" title="2.13 组合模式-Composite"></a>2.13 组合模式-Composite</h3><blockquote>
<p>定义</p>
</blockquote>
<p>有时又叫做部分-整体模式，它是一种将对象组合成树状的层次结构的模式，用来表示”部分-整体”的关系，使用户对单个组合对象具有一致的访问性。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>组合模式使得客户端代码可以一致地处理单个对象和组合对象，无须关心自己处理的是单个对象，还是组合对象，这简化了客户端代码。</li>
<li>更容易在组合体内加入了新的对象，客户端不会因为加入了新的对象而更改源代码，满足开闭原则。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>设计较复杂，客户端需要花更多时间理清类之间的层次关系。</li>
<li>不容易限制容器中的构件。</li>
<li>不容易用继承的方法来增加构件的新功能。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象构件角色(Component)：它的主要作用是为树叶构件和树枝构件声明公共接口，并实现它们的默认行为，在透明式的组合模式中抽象插件还声明访问和管理子类的接口；在安全式的组合模式中不声明访问和管理子类的接口，管理工作由树枝构件完成。</li>
<li>树叶构件角色(Leaf)：是组合模式中的叶子结点，没有子结点，用于实现抽象构件角色中声明的公共接口。</li>
<li>树枝构件角色(Composite)：是组合模式中的分支结点对象，有子结点，它实现了抽象构件角色中声明的接口，主要作用是存储和管理子部件，通常包含add()、remove()、getChild()等方法。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.composite.pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.composite.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: Composite &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 组合模式 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;测试类&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompositeDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Component component0 = <span class="keyword">new</span> Composite();</span><br><span class="line">        Component component1 = <span class="keyword">new</span> Composite();</span><br><span class="line">        Component component2 = <span class="keyword">new</span> Leaf(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        Component component3 = <span class="keyword">new</span> Leaf(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        Component component4 = <span class="keyword">new</span> Leaf(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        component0.add(component2);</span><br><span class="line">        component0.add(component1);</span><br><span class="line">        component1.add(component3);</span><br><span class="line">        component1.add(component4);</span><br><span class="line">        component0.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象构件</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component c)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component c)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Component <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     树叶构件</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">implements</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(Leaf.class);</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Leaf</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component c)</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component c)</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Component <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;树叶&quot;</span> + name + <span class="string">&quot;被访问&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">	 **</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> *     树枝构件</span><br><span class="line"> * &lt;/p&gt;</span><br><span class="line"> */</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Composite</span> <span class="keyword">implements</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Component&gt; children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component c)</span> </span>&#123;</span><br><span class="line">        children.add(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component c)</span> </span>&#123;</span><br><span class="line">        children.remove(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Component <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> children.get(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Object obj : children) &#123;</span><br><span class="line">            ((Component) obj).operation();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-14-模板方法模式-Template-Method"><a href="#2-14-模板方法模式-Template-Method" class="headerlink" title="2.14 模板方法模式-Template Method"></a>2.14 模板方法模式-Template Method</h3><blockquote>
<p>定义</p>
</blockquote>
<p>定义一个操作中的算法骨架，而将算法中的一些步骤延迟到子类中，使得子类可以不改变算法结构的情况下重定义该算法的某些特定步骤。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>封装了不变部分，扩展可变部分。它把认为是不变部分的算法封装到父类实现中，而把可变部分算法由子类继承实现，便于子类继续扩展。</li>
<li>它在父类中提取了公共的部分代码，便于代码复用。</li>
<li>部分方法是子类实现的，因此子类可以通过扩展方式增加相应的功能，符合开闭原则。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>对每个不同的实现都需要定义一个子类，这会导致类的个数增加，系统更加庞大，设计也更加抽象。</li>
<li>父类中的抽象方法由子类实现，子类执行的结果会影响父类的结果，这导致一种反向的控制结构，它提高了代码阅读的难度。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象类(Abstract class)：负责给出一个算法的轮廓和骨架。它由一个模板方法和若干个基本方法构成<ul>
<li>模板方法：定义了算法的骨架，按某种顺序调用其包含的基本方法</li>
<li>基本方法：<ul>
<li>抽象方法：在抽象类中申明，由具体子类中可以继承或重写它。</li>
<li>具体方法：在抽象类中已经实现，在具体子类中可以继承或重写它。</li>
<li>钩子方法：在抽象类中已经实现，包括用于判断的逻辑方法和需要子类重写的孔方法两种。</li>
</ul>
</li>
</ul>
</li>
<li>具体子类(Concrete Class)：实现抽象类中所定义的抽象方法和钩子方法，它们是一个顶级逻辑的一个组成步骤。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.templateMethod.pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.templateMethod.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: TemplateMethodDemo &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;测试类&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplateMethodDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstractClass abstractClass = <span class="keyword">new</span> ConcreteClass();</span><br><span class="line">        abstractClass.templateMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;P&gt;</span></span><br><span class="line"><span class="comment"> *     抽象类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(AbstractClass.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 模板方法 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">templateMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        specificMethod();</span><br><span class="line">        abstractMethod1();</span><br><span class="line">        abstractMethod2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 具体方法 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">specificMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体方法被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 抽象方法1 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">abstractMethod1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/* 抽象方法2 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">abstractMethod2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteClass.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">abstractMethod1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;抽象方法1的实现被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">abstractMethod2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;抽象方法2的实现被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-15-策略模式-Strategy"><a href="#2-15-策略模式-Strategy" class="headerlink" title="2.15 策略模式-Strategy"></a>2.15 策略模式-Strategy</h3><blockquote>
<p>定义</p>
</blockquote>
<p>该模式定义了一系列算法，并将每个算法封装起来，使它们可以相互依赖，且算法的变化不会影响到使用算法的用户。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>多重条件语句不易维护，而使用策略模式可以避免使用多重条件语句。</li>
<li>策略模式提供了一系列的可供重用的算法族，恰当使用继承可以把算法族的公共代码转移到父类里面，从而避免重复的代码。</li>
<li>策略模式可以提供相同行为的不同实现，客户可以根据不同时间或空间要求选择不同的。</li>
<li>策略模式提供了对开闭原则的完美支持，可以在不修改原代码的情况下，灵活增加新算法。</li>
<li>策略模式把算法的使用放到环境类中，而算法的实现移到具体策略类中，实现了二者的分离。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>客户端必须理解所有策略算法的区别，以便适时选择恰当的算法类。</li>
<li>策略模式造成很多的策略类。</li>
</ul>
<blockquote>
<p> 结构</p>
</blockquote>
<ul>
<li>抽象策略类(Strategy)：定义了一个公共接口，各种不同的算法以不同的方式实现这个接口，环境角色使用这个接口调用不同的算法，一般使用接口或抽象类实现。</li>
<li>具体策略类(Concrete Strategy)：实现了抽象了策略定义的接口，环境角色使用这个接口调用不同的算法，一般使用接口或抽象类实现。</li>
<li>环境类(Context)：持有一个策略类的引用，最终给客户端调用。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.strategy.pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.strategy.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: StrategyDemo &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 策略模式 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;测试类&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Context context = <span class="keyword">new</span> Context();</span><br><span class="line">        Strategy strategy1 = <span class="keyword">new</span> ConcreteStrategyA();</span><br><span class="line">        Strategy strategy2 = <span class="keyword">new</span> ConcreteStrategyB();</span><br><span class="line">        context.setStrategy(strategy1);</span><br><span class="line">        context.strategyMethod();</span><br><span class="line">        context.setStrategy(strategy2);</span><br><span class="line">        context.strategyMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象策略类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">strategyMethod</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体策略类A</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyA</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteStrategyA.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">strategyMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体策略A的策略方法被访问&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体策略类B</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyB</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteStrategyB.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">strategyMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体策略B的策略方法被访问&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     环境类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Strategy <span class="title">getStrategy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> strategy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStrategy</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">strategyMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        strategy.strategyMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-16-命令模式-Command"><a href="#2-16-命令模式-Command" class="headerlink" title="2.16 命令模式-Command"></a>2.16 命令模式-Command</h3><blockquote>
<p>定义</p>
</blockquote>
<p>将请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。这样两者之间通过命令对象进行沟通，这样方便将命令对象进行储存、传递、调用、增加与管理。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>降低系统的耦合度。命令模式能将调用操作的对象与实现该操作的对象解耦。</li>
<li>增加或删除命令非常方便。采用命令模式增加与删除命令不会影响其他类，它满足开闭原则，对拓展比较灵活。</li>
<li>可以实现宏命令。命令模式可以与组合模式结合，将多个命令装配成一个组合命令，即宏命令。</li>
<li>方便实现Undo和Redo操作。命令模式可以与备忘录模式结合，实现命令的撤销与恢复。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<p>可能产生大量具体命令类。因为对每一个具体操作都需要设计一个具体命令类，这将增加系统的复杂性。</p>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象命令类(Command)：声明执行命令的接口，拥有执行命令的抽象方法execute()。</li>
<li>具体命令角色(Concrete Command)：是抽象命令类的具体实现类，它拥有接收者对象，并通过调用接收者的功能来完成命令要执行的操作。</li>
<li>接收者(Receiver)：执行命令功能的相关操作，是具体命令对象业务的真正实现者。</li>
<li>请求者(Invoker)：请求的发送者，它通常拥有很多的命令对象，并通过访问命令对象类执行相关请求，它不张子杰访问接收者。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.command.pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.command.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: CommandDemo &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 命令模式 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;测试类&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Logger log = Logger.getLogger(CommandDemo.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Command command = <span class="keyword">new</span> ConcreteCommand();</span><br><span class="line">        Invoker invoker = <span class="keyword">new</span> Invoker(command);</span><br><span class="line">        log.info(<span class="string">&quot;客户访问调用者的call方法&quot;</span>);</span><br><span class="line">        invoker.call();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     调用者</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Invoker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(Invoker.class);</span><br><span class="line">    <span class="keyword">private</span> Command command;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Invoker</span><span class="params">(Command command)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(Command command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;调用者执行命令command&quot;</span>);</span><br><span class="line">        command.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象命令</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;具体命令&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Receiver receiver;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteCommand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.receiver = <span class="keyword">new</span> Receiver();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        receiver.action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;接收者&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(Receiver.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;接收者的action方法被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-17-责任链模式-Chain-of-Responsibility"><a href="#2-17-责任链模式-Chain-of-Responsibility" class="headerlink" title="2.17 责任链模式-Chain of Responsibility"></a>2.17 责任链模式-Chain of Responsibility</h3><blockquote>
<p>定义</p>
</blockquote>
<p>为了避免请求发送者与多个请求处理者耦合在一起，将所有请求的处理者通过前一对象记住其下一个对象的引用而连成一条链；当有请求发生时，可以将请求沿着这条链传递，直到有对象处理它为止。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>降低了对象之间的耦合度。该模式使得一个对象无须知道到底是哪一个对象处理其请求以及链的结构，发送者和接收者也无须拥有对方的明确信息。</li>
<li>增强了系统的可扩展性。可以根据需要增加新的请求处理类，满足开闭原则。</li>
<li>增强了给对象指派职责的灵活性。当工作流程发生变化，可以动态地改变链内的成员或者调动它们的次序，也可动态地新增或者删除责任。</li>
<li>责任链简化了对象之间的连接。每个对象只需保持一个指向其后继者的引用，不需保持其他所有处理者的引用，这避免了使用众多的if-else语句。</li>
<li>责任分担。每个类只需要处理自己该处理的工作，不该处理的传递给下一个对象完成，明确各类的责任范围，符合类的单一职责原则。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>不能保证每个请求一定被处理。由于一个请求没有明确的接收者，所以不能保证它一定会被处理，该请求可能一直传到链的末端都得不到处理。</li>
<li>对比较长的责任链，请求的处理可能涉及多个处理对象，系统性能将受到一个影响。</li>
<li>职责链的建立的合理性要靠客户端来保证，增加了客户端的复杂性，可能会由于责任链的错误设置而导致系统出错，如可能还会造成循环调用。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li><p>抽象处理者(Handler)：定义一个处理请求的接口，包含抽象处理方法和一个后继连接。</p>
</li>
<li><p>具体处理者(Concrete Handler)：实现抽象处理者的处理方法，判断能否本次请求，如果可以处理请求则处理，否则将给请求转给它的后继者。</p>
</li>
<li><p>客户类(Client)：创建处理链，并向链头的具体处理者对象提交请求，它不关心处理细节和请求的传递过程。</p>
</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.chainofResposibility.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.chainofResposibility.example &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: Main &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 责任链Demo &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     测试类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Support RubbishK = <span class="keyword">new</span> NoSupport(<span class="string">&quot;RubbishK&quot;</span>);</span><br><span class="line">        Support FlowerK = <span class="keyword">new</span> LimitSupport(<span class="string">&quot;FlowerK&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        Support EyedropK = <span class="keyword">new</span> LimitSupport(<span class="string">&quot;EyedropK&quot;</span>, <span class="number">200</span>);</span><br><span class="line">        Support UnknownK = <span class="keyword">new</span> SpecialSupport(<span class="string">&quot;UnknownK&quot;</span>, <span class="number">300</span>);</span><br><span class="line">        Support KHighness = <span class="keyword">new</span> SpecialSupport(<span class="string">&quot;KHighness&quot;</span>, <span class="number">330</span>);</span><br><span class="line">        Support BrotherK = <span class="keyword">new</span> OddSupport(<span class="string">&quot;BrotherK&quot;</span>);</span><br><span class="line">        <span class="comment">// 制造责任链</span></span><br><span class="line">        RubbishK.setNext(FlowerK).setNext(EyedropK).setNext(UnknownK).setNext(KHighness).setNext(BrotherK);</span><br><span class="line">        <span class="comment">// 制造问题</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500</span>; i += <span class="number">30</span>) &#123;</span><br><span class="line">            RubbishK.support(<span class="keyword">new</span> Trouble(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     发生的问题的类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trouble</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trouble</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[Trouble &quot;</span> +</span><br><span class="line">                <span class="string">&quot;number=&quot;</span> + number +</span><br><span class="line">                <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     用来解决问的抽象类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Support</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(Support.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Support next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Support</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Support <span class="title">setNext</span><span class="params">(Support next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">support</span><span class="params">(Trouble trouble)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (resolve(trouble)) &#123;</span><br><span class="line">            done(trouble);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            next.support(trouble);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fail(trouble);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">resolve</span><span class="params">(Trouble trouble)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">done</span><span class="params">(Trouble trouble)</span> </span>&#123;</span><br><span class="line">        log.info(trouble + <span class="string">&quot; is resolved by &quot;</span> + <span class="keyword">this</span> + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">fail</span><span class="params">(Trouble trouble)</span> </span>&#123;</span><br><span class="line">        log.info(trouble + <span class="string">&quot; cannot be resolved.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     解决问题具体类：不能解决问题</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoSupport</span> <span class="keyword">extends</span> <span class="title">Support</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NoSupport</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">resolve</span><span class="params">(Trouble trouble)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     解决问题具体类：解决问题编号小于limit值得类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LimitSupport</span> <span class="keyword">extends</span> <span class="title">Support</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> limit;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LimitSupport</span><span class="params">(String name, <span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.limit = limit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">resolve</span><span class="params">(Trouble trouble)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (trouble.getNumber() &lt; limit) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     解决问题具体类：解决奇数编号得问题</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OddSupport</span> <span class="keyword">extends</span> <span class="title">Support</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OddSupport</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">resolve</span><span class="params">(Trouble trouble)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (trouble.getNumber() % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     解决问题具体类：只解决指定编号得问题</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpecialSupport</span> <span class="keyword">extends</span> <span class="title">Support</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpecialSupport</span><span class="params">(String name, <span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">resolve</span><span class="params">(Trouble trouble)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (trouble.getNumber() == <span class="keyword">this</span>.number) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-18-状态模式-State"><a href="#2-18-状态模式-State" class="headerlink" title="2.18 状态模式-State"></a>2.18 状态模式-State</h3><blockquote>
<p>定义</p>
</blockquote>
<p>对有状态的对象，把复杂的“判断逻辑”提取到不同的状态对象中，允许状态对象在其内部状态发生改变时改变其行为。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>状态模式与特定状态相关的行为局部化到一个状态中，并且将不同状态的行为分割开来，满足单一职责原则。</li>
<li>减少对象间的相互依赖。将不同的状态引入独立的对象中会使得状态变得更加明确，切减少对象间的相互依赖。</li>
<li>有利于程序的拓展。通过定义新的子类很容易德增加新的状态和转换。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>状态模式的使用必然会增加系统的类与对象的个数。</li>
<li>状态模式的结构和实现都较为复杂，如果使用不当会导致程序结构和代码的混乱。 </li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>环境类(Context)：也称为上下文，它定义了客户感兴趣的接口，维护一个当前状态，并将与状态相关的操作都委托给当前状态对象类处理。</li>
<li>抽象状态类(State)：定义一个接口，用以封装环境对象中特定状态所对应的行为。</li>
<li>具体状态类(Concrete State)：实现抽象状态所对应的行为。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;package top.parak.state.pattern;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="string"> * &lt;p&gt; Package: top.parak.state.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="string"> * &lt;p&gt; FileName: StateDemo &lt;p&gt;</span></span><br><span class="line"><span class="string"> * &lt;p&gt; Description: 状态模式 &lt;p&gt;</span></span><br><span class="line"><span class="string"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="string"> *</span></span><br><span class="line"><span class="string"> * @author KHighness</span></span><br><span class="line"><span class="string"> * @since 2020/11/8</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">import org.apache.log4j.Logger;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * &lt;p&gt;测试类&lt;/p&gt;</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">public class StateDemo &#123;</span></span><br><span class="line"><span class="string">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="string">        Context context = new Context();</span></span><br><span class="line"><span class="string">        context.handle();</span></span><br><span class="line"><span class="string">        context.handle();</span></span><br><span class="line"><span class="string">        context.handle();</span></span><br><span class="line"><span class="string">        context.handle();</span></span><br><span class="line"><span class="string">        context.handle();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * &lt;p&gt;</span></span><br><span class="line"><span class="string"> *     环境类</span></span><br><span class="line"><span class="string"> * &lt;/p&gt;</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">class Context &#123;</span></span><br><span class="line"><span class="string">    private State state;</span></span><br><span class="line"><span class="string">    /* 初始状态 */</span></span><br><span class="line"><span class="string">    public Context()  &#123;</span></span><br><span class="line"><span class="string">        this.state = new ConcreteStateA();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    /* 读取状态 */</span></span><br><span class="line"><span class="string">    public State getState() &#123;</span></span><br><span class="line"><span class="string">        return state;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    /* 设置状态 */</span></span><br><span class="line"><span class="string">    public void setState(State state) &#123;</span></span><br><span class="line"><span class="string">        this.state = state;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    /* 处理请求 */</span></span><br><span class="line"><span class="string">    public void handle()  &#123;</span></span><br><span class="line"><span class="string">        state.handle(this);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * &lt;p&gt;</span></span><br><span class="line"><span class="string"> *     抽象状态类</span></span><br><span class="line"><span class="string"> * &lt;/p&gt;</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">abstract class State &#123;</span></span><br><span class="line"><span class="string">    abstract void handle(Context context);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * &lt;p&gt;</span></span><br><span class="line"><span class="string"> *     具体状态A类</span></span><br><span class="line"><span class="string"> * &lt;/p&gt;</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">class ConcreteStateA extends State &#123;</span></span><br><span class="line"><span class="string">    private Logger log = Logger.getLogger(ConcreteStateA.class);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @Override</span></span><br><span class="line"><span class="string">    void handle(Context context) &#123;</span></span><br><span class="line"><span class="string">        log.info(&quot;当前状态：A&quot;);</span></span><br><span class="line"><span class="string">        context.setState(new ConcreteStateB());</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * &lt;p&gt;</span></span><br><span class="line"><span class="string"> *     具体状态B类</span></span><br><span class="line"><span class="string"> * &lt;/p&gt;</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">class ConcreteStateB extends State &#123;</span></span><br><span class="line"><span class="string">    private Logger log = Logger.getLogger(ConcreteStateB.class);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @Override</span></span><br><span class="line"><span class="string">    void handle(Context context) &#123;</span></span><br><span class="line"><span class="string">        log.info(&quot;当前状态：B&quot;);</span></span><br><span class="line"><span class="string">        context.setState(new ConcreteStateA());</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-19-观察者模式-Observer"><a href="#2-19-观察者模式-Observer" class="headerlink" title="2.19 观察者模式-Observer"></a>2.19 观察者模式-Observer</h3><blockquote>
<p>定义</p>
</blockquote>
<p>多个对象之间存在一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新，又叫做发布-订阅模式。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li><p>降低了目标与观察者之间的耦合关系，两者之间是抽象耦合关系。</p>
</li>
<li><p>目标与观察者之间建立了一套触发机制。</p>
</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>目标与观察者之间的依赖关系并没有完全解除，而且有可能出现循环引用。</li>
<li>当观察者对象很多时，通知的发布会花费很多时间，影响程序的效率。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象主题(Subject)：提供了一个用于保存观察者对象的聚集类和增加、增加观察者对象的方法，以及通知所有观察者的抽象方法。</li>
<li>具体主题(Concrete Subject)：实现抽象目标中的通知方法，当具体主题的内部状态发生改变时，通知所有注册过的观察者对象。</li>
<li>抽象观察者(Observer)：一个抽象类或者接口，包含了一个更新自己的抽象方法，当接到具体主题的更改通知时被调用。</li>
<li>具体观察者(Concrete Observer)：实现抽象观察者中定义的抽象方法，以便在得到目标的更改通知时更新自身的状态。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.observer.pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.observer.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: ObserverDemo &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 观察者模式 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Subject subject = <span class="keyword">new</span> ConcreteSubject();</span><br><span class="line">        Observer[] observers = <span class="keyword">new</span> Observer[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                observers[i] = <span class="keyword">new</span> ConcreteObserver1();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                observers[i] = <span class="keyword">new</span> ConcreteObserver2();</span><br><span class="line">            &#125;</span><br><span class="line">            subject.add(observers[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        subject.notifyObserver();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象目标</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</span><br><span class="line">    <span class="comment">/* 增加观察者 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 删除观察者 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 通知观察者 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">notifyObserver</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体目标</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObserver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体目标发生改变&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;——————————————&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Observer observer : observers) &#123;</span><br><span class="line">            observer.response();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象观察者</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 作出反应 */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">response</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体观察者1</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver1</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteObserver1.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">response</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体观察者1作出反应&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;P&gt;</span></span><br><span class="line"><span class="comment"> *     具体观察者2</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver2</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteObserver2.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">response</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体观察者2作出反应&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-20-中介者模式-Mediator"><a href="#2-20-中介者模式-Mediator" class="headerlink" title="2.20 中介者模式-Mediator"></a>2.20 中介者模式-Mediator</h3><blockquote>
<p>定义</p>
</blockquote>
<p>定义一个中介对象来封装一系列对象之间的交互，使原有对象直接的耦合松散，且可以独立地改变它们之间的交互。中介者模式又叫调停模式。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>降低了对象之间的耦合性，使得对象易于独立地被复用。</li>
<li>将对象之间的一对多关联转为一对一的关联，提高系统的灵活性，使得系统易于维护和拓展。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>当同事类太多时，中介者的职责职责将很大，它会变得复杂而庞大，以至于系统难以维护。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象中介者(Mediator)：它是中介者的接口，提供了同事对象注册与转发同事对象信息的抽象方法。</li>
<li>具体中介者(Concrete Mediator)：实现中介者接口，定义一个List来管理同事对象，协调各个同事角色之间的交互关系，因此它依赖于同事角色。</li>
<li>抽象同事类(Colleague)：定义同事类的接口，保存中介者对象，提供同事对象交互的抽象方法，实现所有相互影响的同事类的公共功能。</li>
<li>具体同事类(Concrete Colleague)：是抽象同事类的实现者，当需要与其他同事对象交互时，由中介者对象负责后续的交互。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.mediator.pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.mediator.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: MediatorDemo &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     中介者</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MediatorDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Mediator mediator = <span class="keyword">new</span> ConcreteMediator();</span><br><span class="line">        Colleague colleague1, colleague2;</span><br><span class="line">        colleague1 = <span class="keyword">new</span> ConcreteColleague1();</span><br><span class="line">        colleague2 = <span class="keyword">new</span> ConcreteColleague2();</span><br><span class="line">        mediator.register(colleague1);</span><br><span class="line">        mediator.register(colleague2);</span><br><span class="line">        colleague1.send();</span><br><span class="line">        colleague2.send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     中介者</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 注册 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Colleague colleague)</span></span>;</span><br><span class="line">    <span class="comment">/* 转发 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">relay</span><span class="params">(Colleague colleague)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体中介者</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteMediator</span> <span class="keyword">extends</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Colleague&gt; colleagues = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Colleague colleague)</span> </span>&#123;</span><br><span class="line">        colleagues.add(colleague);</span><br><span class="line">        colleague.setMediator(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">relay</span><span class="params">(Colleague colleague)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Colleague colleague1 : colleagues) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!colleague1.equals(colleague)) &#123;</span><br><span class="line">                colleague1.receive();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象同事类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(Colleague.class);</span><br><span class="line">    <span class="keyword">protected</span> Mediator mediator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMediator</span><span class="params">(Mediator mediator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mediator = mediator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体同事类1</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleague1</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteColleague1.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体同事类1收到请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体同事1发出请求&quot;</span>);</span><br><span class="line">        mediator.relay(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体同事类2</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleague2</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteColleague2.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体同事类2收到请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体同事2发出请求&quot;</span>);</span><br><span class="line">        mediator.relay(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-21迭代器模式-Iterator"><a href="#2-21迭代器模式-Iterator" class="headerlink" title="2.21迭代器模式-Iterator"></a>2.21迭代器模式-Iterator</h3><blockquote>
<p>定义</p>
</blockquote>
<p>提供一个对象来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>访问一个聚合对象的内容而无须暴露它的内部表示。</li>
<li>遍历任务交由迭代器完成，这简化了聚合类。</li>
<li>它支持以不同方式遍历一个聚合，甚至可以自定义迭代器的子类以支持新的遍历。</li>
<li>增加新的聚合类和迭代器都很方便，无须修改原有代码。</li>
<li>封装性良好，为遍历不同的聚合结构提供一个统一的接口。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>增加了类的个数，这在一定程度上增加了系统的复杂性。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象聚合角色(Aggregate)：定义存储、添加、删除聚合对象以及创建迭代器对象的接口。</li>
<li>具体聚合色(Concrete Aggregate)：实现抽象聚合类，返回一个具体迭代器的实例。</li>
<li>抽象迭代器角色(Iterator)：定义访问和遍历聚合元素的接口，通常包含hasNext()、first()、next()等方法。</li>
<li>具体迭代器角色(Concrete Iterator)：实现抽象迭代器接口中所定义的方法，完成对聚合对象的遍历，记录遍历的当前位置。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.iterator.pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.iterator.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: IteratorDemo &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 迭代器模式 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Logger log = Logger.getLogger(IteratorDemo.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Aggregate aggregate = <span class="keyword">new</span> ConcreteAggregate();</span><br><span class="line">        aggregate.add(<span class="string">&quot;KHighness&quot;</span>);</span><br><span class="line">        aggregate.add(<span class="string">&quot;ParaK&quot;</span>);</span><br><span class="line">        aggregate.add(<span class="string">&quot;FlowerK&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;聚合的内容&quot;</span>);</span><br><span class="line">        Iterator iterator = aggregate.getIterator();</span><br><span class="line">        log.info(iterator.first().toString());</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            log.info(iterator.next().toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象聚合</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Aggregate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object o)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(Object o)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">getIterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体聚合</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteAggregate</span> <span class="keyword">implements</span> <span class="title">Aggregate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        list.add(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        list.remove(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">getIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">new</span> ConcreteIterator(list));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象迭代器</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    <span class="function">Object <span class="title">first</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Object <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体迭代器</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteIterator</span><span class="params">(List&lt;Object&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">first</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        index = <span class="number">0</span>;</span><br><span class="line">        Object object = list.get(index);</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object object = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.hasNext()) &#123;</span><br><span class="line">            object = list.get(++index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; list.size() - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-22-访问者模式-Visitor"><a href="#2-22-访问者模式-Visitor" class="headerlink" title="2.22 访问者模式-Visitor"></a>2.22 访问者模式-Visitor</h3><blockquote>
<p>定义</p>
</blockquote>
<p>将作用于某种数据结构中的各元素的操作分离出来封装成独立的类，使其在不改变数据结构的前提下可以添加作用于这些元素的新的操作。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>扩展性好</li>
<li>复用性好</li>
<li>灵活性好</li>
<li>符合单一职责原则</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>增加新的元素很困难</li>
<li>破坏封装</li>
<li>违反了依赖倒置原则</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象访问者(Visitor)：定义一个访问具体元素的接口，为每个具体元素类对应一个访问操作visit()，该操作中的参数类型标识了被访问的具体元素。</li>
<li>具体访问者(Concrete Visitor)：实现抽象访问者角色声明的各个访问操作，确定访问者访问一个元素时该做什么。</li>
<li>抽象元素(Element)：声明一个包含接受操作accept()的接口，被接受的访问者对象作为accept()的参数。</li>
<li>具体元素(Concrete Element)：实现抽象元素角色提供的accept()操作。</li>
<li>对象结构(Object Structure)：包含元素角色的容器，提供让访问者对象遍历容器中的所有元素的方法。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.visitor.pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.visitor.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: VisitorDemo &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 访问者模式 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;测试类&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VisitorDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ObjectStructure structure = <span class="keyword">new</span> ObjectStructure();</span><br><span class="line">        structure.add(<span class="keyword">new</span> ConcreteElementA());</span><br><span class="line">        structure.add(<span class="keyword">new</span> ConcreteElementB());</span><br><span class="line">        structure.add(<span class="keyword">new</span> ConcreteElementC());</span><br><span class="line"></span><br><span class="line">        Visitor visitorA = <span class="keyword">new</span> ConcreteVisitorA();</span><br><span class="line">        Visitor visitorB = <span class="keyword">new</span> ConcreteVisitorB();</span><br><span class="line">        structure.accept(visitorA);</span><br><span class="line">        structure.accept(visitorB);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象访问者</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElementA elementA)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElementB elementB)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElementC elementC)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体访问者A</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitorA</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteVisitorA.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElementA elementA)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体访问者A访问=&gt;具体元素A&quot;</span>);</span><br><span class="line">        elementA.operaA();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElementB elementB)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体访问者A访问=&gt;具体元素B&quot;</span>);</span><br><span class="line">        elementB.operaB();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElementC elementC)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体访问者A访问=&gt;具体元素C&quot;</span>);</span><br><span class="line">        elementC.operaC();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体访问者B</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitorB</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteVisitorB.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElementA elementA)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体访问者B访问=&gt;具体元素A&quot;</span>);</span><br><span class="line">        elementA.operaA();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElementB elementB)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体访问者B访问=&gt;具体元素B&quot;</span>);</span><br><span class="line">        elementB.operaB();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElementC elementC)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体访问者B访问=&gt;具体元素C&quot;</span>);</span><br><span class="line">        elementC.operaC();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象元素类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体元素A</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteElementA</span> <span class="keyword">implements</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteElementA.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operaA</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体元素A操作...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体元素B</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteElementB</span> <span class="keyword">implements</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteElementB.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operaB</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体元素B操作...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体元素C</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteElementC</span> <span class="keyword">implements</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteElementC.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operaC</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体元素C操作...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     对象结构角色</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectStructure</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Element&gt; list = <span class="keyword">new</span> ArrayList&lt;Element&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        Iterator&lt;Element&gt; iterator = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            iterator.next().accept(visitor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Element element)</span> </span>&#123;</span><br><span class="line">        list.add(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Element element)</span> </span>&#123;</span><br><span class="line">        list.remove(element);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-23-备忘录模式-Memento"><a href="#2-23-备忘录模式-Memento" class="headerlink" title="2.23 备忘录模式-Memento"></a>2.23 备忘录模式-Memento</h3><blockquote>
<p>定义</p>
</blockquote>
<p>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，以便以后当需要时能将该对象恢复到原先保存的状态。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>提供了一个可以恢复状态的机制</li>
<li>实现内部状态的封装</li>
<li>简化了发起人</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>资源消耗大</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>发起人(Originator)：记录当前时刻的内部状态信息，提供创建备忘录和恢复备忘录数据的功能，实现其他业务功能，它可以访问备忘录里的所有信息。</li>
<li>备忘录(Memento)：负责存储发起人的内部状态，在需要的时候提供这些内部状态给发起人。</li>
<li>管理者(Caretaker)：对备忘录进行管理，提供保存与获取备忘录的功能，但不能对备忘录进行访问与修改。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.memento.pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.memento.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: MementoDemo &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 备忘录模式 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;测试类&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MementoDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Logger log = Logger.getLogger(MementoDemo.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Originator originator = <span class="keyword">new</span> Originator();</span><br><span class="line">        Caretaker caretaker = <span class="keyword">new</span> Caretaker();</span><br><span class="line">        originator.setState(<span class="string">&quot;State1&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;初始状态：&quot;</span> + originator.getState());</span><br><span class="line">        <span class="comment">// 保存状态</span></span><br><span class="line">        caretaker.setMemento(originator.createMemento());</span><br><span class="line">        originator.setState(<span class="string">&quot;State2&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;新的状态：&quot;</span> + originator.getState());</span><br><span class="line">        <span class="comment">// 恢复状态</span></span><br><span class="line">        originator.restoreMemento(caretaker.getMemento());</span><br><span class="line">        log.info(<span class="string">&quot;恢复状态：&quot;</span> + originator.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     备忘录</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memento</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Memento</span><span class="params">(String state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     发起人</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Originator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">createMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Memento(state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restoreMemento</span><span class="params">(Memento memento)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(memento.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     管理者</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Caretaker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Memento memento;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">getMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> memento;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(Memento memento)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.memento = memento;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-24-解释器模式-Interpreter"><a href="#2-24-解释器模式-Interpreter" class="headerlink" title="2.24 解释器模式-Interpreter"></a>2.24 解释器模式-Interpreter</h3><blockquote>
<p>定义</p>
</blockquote>
<p>给分析对象定义一个语言，并定义该语言的文法表示，再设计一个解析器来解释其中的句子。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>扩展性好</li>
<li>容易实现</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>执行效率较低</li>
<li>会引起类膨胀</li>
<li>可应用的场景比较少</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象表达式(Abstract Expression)：定义解释器的接口，约定解释器的解释操作，主要包含解释方法interpret()。</li>
<li>终结符表达式(Terminal Expression)：抽象表达式的子类，用来实现文法中与终结符相关的操作，文法中的每条一个终结符都对应于一个非终结符表达式。</li>
<li>非终结符表达式(Terminal Expression)：抽象表达式的子类，用来实现文法中与非终结符相关的操作，文法中的每条规则都对应于一个非终结符表达式。</li>
<li>环境(Context)：通常包含各个解释器需要的数据或是公共的功能，一般用来传递被所有解释器共享的数据，后开你的解释器可以从这里获取这些值。</li>
<li>客户端(Client)：主要任务是将需要分析的句子或表达式转换成使用解释器对象描述的抽象语法树，然后调用解释器的解释方法，当然也可以通过环境角色间接访问解释器的解释方法。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.interpreter.pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.interpreter.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: InterpreterDemo &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 解释器模式 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     测试类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterpreterDemo</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象表达式</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AbstractExpression</span> </span>&#123;</span><br><span class="line">    <span class="function">Object <span class="title">interpret</span><span class="params">(String info)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     终结符表达式类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TerminalExpression</span> <span class="keyword">implements</span> <span class="title">AbstractExpression</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">interpret</span><span class="params">(String info)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 对终结符表达式的处理 */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     非终结符表达式类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonTerminalExpression</span> <span class="keyword">implements</span> <span class="title">AbstractExpression</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">interpret</span><span class="params">(String info)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 对非终结符表达式的处理 */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     环境类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AbstractExpression abstractExpression;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 数据初始化 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(String info)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 调用相关表达式的解释方法 */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Software Engineering</category>
      </categories>
      <tags>
        <tag>Design Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>红黑树</title>
    <url>/posts/f89cb603/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="📓-定义"><a href="#📓-定义" class="headerlink" title="📓 定义"></a>📓 定义</h2><p>红黑树是一种含有红黑节点并能自平衡的二叉查找树</p>
<blockquote>
<p>🌲二叉查找树</p>
<p>满足约束：左结点的值小于父结点，父结点的值小于右结点的值。</p>
<p>场景理解：假设二叉查找树建立在x-y笛卡尔坐标系中，则所有结点向x轴投影，值正好沿着x轴递增。</p>
</blockquote>
<br>

<a id="more"></a>



<h2 id="🔰-性质"><a href="#🔰-性质" class="headerlink" title="🔰 性质"></a>🔰 性质</h2><ul>
<li>每个结点要么是黑色，要么是红色</li>
<li>根节点是黑色</li>
<li>每个叶子结点(NIL)是黑色的(虚结点)</li>
<li>每个红色结点的两个子结点一定都是黑色</li>
<li>任意一结点到每个叶子结点的路径都包含数量相同的黑结点(黑色完美平衡)</li>
</ul>
<p>以上为最简性质，任何一条不可缺少，任意四条不能推出另外一条。</p>
<br>

<h2 id="🌗-平衡"><a href="#🌗-平衡" class="headerlink" title="🌗 平衡"></a>🌗 平衡</h2><p>红黑树是非完美平衡二叉查找树，是完美黑色平衡二叉查找树。</p>
<br>

<blockquote>
<p>⭕红黑树自平衡的最小单元</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/f89cb603/image-20201106225159861.png" class="" title="image-20201106225159861">

<p>红黑树的自平衡</p>
<p>插入只考虑G-{P, U}-C三代，删除只考虑P-{C, B}-{CL, CR, BL, BR}三代</p>
<br>

<blockquote>
<p>🔱红黑树自平衡的原子操作</p>
</blockquote>
<p>包括：变色、左旋、右旋</p>
<p>旋转要有圆心，有方向。</p>
<p>旋转结点是父结点围绕子节点旋转(子节点为圆心)。</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/f89cb603/image-20201103220142748.png" class="" title="image-20201103220142748">

<center>
    <font face="Kristen ITC" color="#555555" font-size=100px>☬ 旋转结点 ☬</font><br>
</center>

<br>

<blockquote>
<p>🌐变色：P-Black=&gt;Red,CB-Red=&gt;Black</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/f89cb603/image-20201103221816468.png" class="" title="image-20201103221816468">

<center>
    <font face="Kristen ITC" color="#555555" font-size=100px>☬ 变色操作 ☬</font><br>
</center>

<br>

<blockquote>
<p>🌔左旋：旋转结点绕圆心逆时针方向旋转。基于最短路径来确定方向。</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/f89cb603/image-20201103222025132.png" class="" title="image-20201103222025132">

<center>
    <font face="Kristen ITC" color="#555555" font-size=100px>☬ 左旋操作 ☬</font><br>
</center>

<br>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;左旋&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;过程：父亲下沉，右子上升，右子的左子变为原父的右子&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     左旋X结点</span></span><br><span class="line"><span class="comment"> *             P                                P</span></span><br><span class="line"><span class="comment"> *            /                                /</span></span><br><span class="line"><span class="comment"> *           X                                Y</span></span><br><span class="line"><span class="comment"> *         /  \        --(左旋)--&gt;           / \</span></span><br><span class="line"><span class="comment"> *       lX    Y                           X  rY</span></span><br><span class="line"><span class="comment"> *            / \                        /  \</span></span><br><span class="line"><span class="comment"> *          lY   rY                     lX  lY</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leftRotate</span><span class="params">(RBTNode&lt;T, D&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 右子结点 */</span></span><br><span class="line">    RBTNode&lt;T, D&gt; y = x.getRight();</span><br><span class="line">    <span class="comment">/* 父亲结点 */</span></span><br><span class="line">    RBTNode&lt;T, D&gt; p = x.getParent();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Y的左子 变成 X的右子</span></span><br><span class="line"><span class="comment">    * 若X不Y的左子不为空</span></span><br><span class="line"><span class="comment">    * 则设置Y的左子的父亲为X */</span></span><br><span class="line">    x.setRight(y.getLeft());</span><br><span class="line">    <span class="keyword">if</span> (y.getLeft() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        y.getLeft().setParent(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置Y的父亲为P</span></span><br><span class="line"><span class="comment">    * 1. P为空，则根节点设置为Y</span></span><br><span class="line"><span class="comment">    * 2. X为P的左子， 则P的左子设置为Y</span></span><br><span class="line"><span class="comment">    * 3. X为P的右子，则P的右子设置为Y */</span></span><br><span class="line">    y.setParent(p);</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.root = y;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (p.getLeft() == x) &#123;</span><br><span class="line">            p.setLeft(y);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p.setRight(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 将X的父亲设置为Y</span></span><br><span class="line"><span class="comment">    * 将Y的左子设置为X */</span></span><br><span class="line">    x.setParent(y);</span><br><span class="line">    y.setLeft(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>🌖右旋：旋转结点绕圆心顺时针方向旋转。基于最短路径确定方向。</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/f89cb603/image-20201103223223997.png" class="" title="image-20201103223223997">

<center>
    <font face="Kristen ITC" color="#555555" font-size=100px>☬ 右旋操作 ☬</font><br>
</center>

<br>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;右旋&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;过程：父亲下沉，左子上升，左子的右子变成原父的左子&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     右旋X结点</span></span><br><span class="line"><span class="comment"> *             P                                P</span></span><br><span class="line"><span class="comment"> *            /                                /</span></span><br><span class="line"><span class="comment"> *           X                                Y</span></span><br><span class="line"><span class="comment"> *         /  \        --(右旋)--&gt;           /  \</span></span><br><span class="line"><span class="comment"> *        Y   rX                           lY   X</span></span><br><span class="line"><span class="comment"> *       / \                                   / \</span></span><br><span class="line"><span class="comment"> *     lY  rY                                rY  rX</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rightRotate</span><span class="params">(RBTNode&lt;T, D&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 左子结点 */</span></span><br><span class="line">    RBTNode&lt;T, D&gt; y = x.getLeft();</span><br><span class="line">    <span class="comment">/* 父亲结点 */</span></span><br><span class="line">    RBTNode&lt;T, D&gt; p = x.getParent();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Y的右子 变成 X的左子</span></span><br><span class="line"><span class="comment">    * 若Y的右子不为空</span></span><br><span class="line"><span class="comment">    * 则设置Y的右子的父亲为X */</span></span><br><span class="line">    x.setLeft(y.getRight());</span><br><span class="line">    <span class="keyword">if</span> (y.getRight() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        y.getRight().setParent(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置Y的父亲为P</span></span><br><span class="line"><span class="comment">     * 1. P为空，则根节点设置为Y</span></span><br><span class="line"><span class="comment">     * 2. X为P的左子， 则P的左子设置为Y</span></span><br><span class="line"><span class="comment">     * 3. X为P的右子，则P的右子设置为Y */</span></span><br><span class="line">    y.setParent(p);</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.root = y;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (p.getLeft() == x) &#123;</span><br><span class="line">            p.setLeft(y);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p.setRight(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 将X的父亲设置为Y</span></span><br><span class="line"><span class="comment">    * 将Y的右子设置为X */</span></span><br><span class="line">    x.setParent(y);</span><br><span class="line">    y.setRight(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="🌀-增删"><a href="#🌀-增删" class="headerlink" title="🌀 增删"></a>🌀 增删</h2><br>

<blockquote>
<p>➕插入结点</p>
</blockquote>
<p>新增结点默认为红色，避免破坏黑色完美平衡。</p>
<p>首先寻找新结点的插入位置，即找到新结点的父亲，然后决定将新结点插入到父亲的左边还是右边。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;插入结点&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertNode</span><span class="params">(T key, D data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cmp;</span><br><span class="line">    RBTNode&lt;T, D&gt; x = <span class="keyword">this</span>.root;</span><br><span class="line">    RBTNode&lt;T, D&gt; y = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 寻找新结点的插入位置 */</span></span><br><span class="line">    <span class="keyword">while</span> (x != <span class="keyword">null</span>) &#123;</span><br><span class="line">        y = x;</span><br><span class="line">        cmp = key.compareTo(x.getKey());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cmp == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/* key已存在，直接更新 */</span></span><br><span class="line">            System.out.println(getCurrentTime() + <span class="string">&quot; [WARN] key已存在&quot;</span>);</span><br><span class="line">            System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] 更新value: &quot;</span> + get(key) + <span class="string">&quot; =&gt; &quot;</span> + data);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">/* key较大，继续向右查询 */</span></span><br><span class="line">            x = x.getRight();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/* key较小，继续向左查询 */</span></span><br><span class="line">            x = x.getLeft();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 生成一个新的结点 */</span></span><br><span class="line">    RBTNode&lt;T, D&gt; node = <span class="keyword">new</span> RBTNode&lt;&gt;(RBTColor.red, key, data, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] 新增结点 (&quot;</span> + key + <span class="string">&quot;, &quot;</span> + data + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">    <span class="comment">/* 总结点数量+1 */</span></span><br><span class="line">    <span class="keyword">this</span>.count.incrementAndGet();</span><br><span class="line">    <span class="comment">/* 设置新结点的父亲为Y */</span></span><br><span class="line">    node.setParent(y);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 再次比较决定新结点是y的左子还是右子*/</span></span><br><span class="line">    <span class="keyword">if</span> (y == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.root = node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cmp = key.compareTo(y.getKey());</span><br><span class="line">        <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            y.setRight(node);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            y.setLeft(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 最后进行自平衡 */</span></span><br><span class="line">    balanceInsertion(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>💉插入修复</p>
</blockquote>
<p>插入结点为红色，因此只有当父亲结点为红色时才需要修复。</p>
<p>G-祖父、P-父亲、U-叔叔、C-插入。</p>
<p>我总结了五种情况以及解决口诀:</p>
<p>（1）叔叔为红</p>
<p>CASE 1</p>
<p>Description: 叔叔为红</p>
<p>Solution: GPU变色，若不满足红黑树约束则递归变色</p>
<br>

<p>（2）叔叔为黑</p>
<p>CASE 2</p>
<p>Description: 父为左子，GPC三点一线</p>
<p>Solution: 右旋祖父，GP变色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  (<span class="number">1</span>) 右旋祖父结点</span><br><span class="line">    黑祖                        红父</span><br><span class="line">    / \                         / \</span><br><span class="line"> 红父  黑叔    --(右旋)--&gt;    红插  黑祖</span><br><span class="line">  /                                 \</span><br><span class="line">红插                                黑叔</span><br><span class="line">  (<span class="number">2</span>) 祖父和父亲变色</span><br><span class="line">    红父                        黑父</span><br><span class="line">    / \                         / \</span><br><span class="line"> 红插  黑祖    --(变色)--&gt;    红插  红祖</span><br><span class="line">       \                            \</span><br><span class="line">       黑叔                         黑叔</span><br></pre></td></tr></table></figure>

<br>

<p>CASE 3: </p>
<p>Description: 父为左子，GPC三角关系</p>
<p>Solution: 左旋父亲，交换PC，右旋祖父，GP变色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   (<span class="number">1</span>) 左旋父亲结点，并且交换父子身份，此时GPC三点一线</span><br><span class="line">    黑祖                        黑祖                        黑祖</span><br><span class="line">    / \                         / \                        / \</span><br><span class="line"> 红父  黑叔    --(左旋)--&gt;    红插  黑叔    --(交换)--&gt;    红父  黑叔</span><br><span class="line">  \                          /                           /</span><br><span class="line">  红插                     红父                         红插</span><br><span class="line">  (<span class="number">2</span>) 右旋祖父结点</span><br><span class="line">    黑祖                        红父</span><br><span class="line">    / \                         / \</span><br><span class="line"> 红父  黑叔    --(右旋)--&gt;    红插  黑祖</span><br><span class="line">  /                                 \</span><br><span class="line">红插                                黑叔</span><br><span class="line">  (<span class="number">3</span>) 祖父和父亲变色</span><br><span class="line">    红父                        黑父</span><br><span class="line">    / \                         / \</span><br><span class="line"> 红插  黑祖    --(变色)--&gt;    红插  红组</span><br><span class="line">        \                           \</span><br><span class="line">        黑叔                        黑叔</span><br></pre></td></tr></table></figure>

<br>

<p>CASE 4</p>
<p>Description: 父为右子，GPC三点一线</p>
<p>Solution: 左旋祖父，GP变色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  (<span class="number">1</span>) 左旋祖父结点</span><br><span class="line">    黑祖                        红父</span><br><span class="line">    / \                         / \</span><br><span class="line"> 黑叔  红父    --(右旋)--&gt;    黑祖  红插</span><br><span class="line">        \                     /</span><br><span class="line">        红插                黑叔</span><br><span class="line">  (<span class="number">2</span>) 祖父和父亲变色</span><br><span class="line">    红父                        黑父</span><br><span class="line">    / \                         / \</span><br><span class="line"> 黑祖  红插    --(变色)--&gt;    红祖  红插</span><br><span class="line">  /                           /</span><br><span class="line">黑叔                        黑叔</span><br></pre></td></tr></table></figure>

<br>

<p>CASE 5</p>
<p>Description: 父为右子，GPC三角关系</p>
<p>Solution: 右旋父亲，交换PC，左旋祖父，GP变色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   (<span class="number">1</span>) 右旋父亲结点，并且交换父子身份，此时GPC三点一线</span><br><span class="line">    黑祖                        黑祖                        黑祖</span><br><span class="line">    / \                         / \                        / \</span><br><span class="line"> 黑叔  红父    --(右旋)--&gt;    黑祖  红插    --(交换)--&gt;    黑祖  红父</span><br><span class="line">       /                            \                          \</span><br><span class="line">     红插                           红父                        红插</span><br><span class="line">   (<span class="number">2</span>) 左旋祖父</span><br><span class="line">    黑祖                        红父</span><br><span class="line">    / \                         / \</span><br><span class="line"> 黑叔  红父    --(左旋)--&gt;    黑祖  红插</span><br><span class="line">        \                    /</span><br><span class="line">        红插               黑叔</span><br><span class="line">   (<span class="number">3</span>) 祖父和父亲变色</span><br><span class="line">    红父                        黑父</span><br><span class="line">    / \                         / \</span><br><span class="line"> 黑叔  红插    --(变色)--&gt;    红祖  红插</span><br><span class="line">  /                         /</span><br><span class="line">黑叔                      黑叔</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>➖删除结点</p>
</blockquote>
<p>三种情况，解决方案主要为寻找后裔顶替自己</p>
<p>CASE 1</p>
<p>Description: 待删结点左子和右子都存在:</p>
<p>Solution: 替代结点为右子树的最左孩子，然后调整关系</p>
<p>CASE 2:</p>
<p>Description: 待删结点没有左子和右子:</p>
<p>Solution: 直接删除，然后调整关系</p>
<p>CASE 3:</p>
<p>Description: 待删结点只有左子或者右子:</p>
<p>Solution: 替代结点为存在的孩子，然后调整关系</p>
<br>

<blockquote>
<p>💉删除修复</p>
</blockquote>
<p>仅删除黑色结点需要修复，删除红色不需要。</p>
<p>P-父亲、D-删除、B-兄弟、BR-兄弟右子、BL-兄弟左子。</p>
<ul>
<li>D为左子<ul>
<li>B为红色：左旋父亲，父亲染红，兄弟染黑，然后continue</li>
<li>B为黑色<ul>
<li>BL为黑色且BR黑色：兄弟染红，父亲回溯</li>
<li>BL为红色且BR为黑色：右旋兄弟，兄弟染红，BL染黑</li>
<li>BR为红色：左旋父亲，父亲的颜色给兄弟，父亲黑化，BR黑化，然后break</li>
</ul>
</li>
</ul>
</li>
<li>D为右子<ul>
<li>B为红色：右旋父亲，父亲染红，兄弟染黑，然后continue</li>
<li>B为黑色：<ul>
<li>BL为黑色且BR为黑色：兄弟染红，父亲回溯</li>
<li>BL为红色且BR为黑色：左旋兄弟，父亲染红，BR染黑</li>
<li>BL为红色：右旋父亲，父亲的颜色给兄弟，父亲黑化，BL黑化，然后break</li>
</ul>
</li>
</ul>
</li>
</ul>
<br>

<h2 id="📑-源码"><a href="#📑-源码" class="headerlink" title="📑 源码"></a>📑 源码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.DataStructures.RBTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: Algorithm &lt;/P&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.DataStructures.RBTree &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: RBTree &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 红黑树 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 红黑颜色 */</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">RBTColor</span> </span>&#123;</span><br><span class="line">    red,</span><br><span class="line">    black</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 红黑结点 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RBTNode</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;, <span class="title">D</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 结点颜色 */</span></span><br><span class="line">    <span class="keyword">private</span> RBTColor color;</span><br><span class="line">    <span class="comment">/* 结点键值 */</span></span><br><span class="line">    <span class="keyword">private</span> T key;</span><br><span class="line">    <span class="comment">/* 结点数据 */</span></span><br><span class="line">    <span class="keyword">private</span> D data;</span><br><span class="line">    <span class="comment">/* 父亲结点 */</span></span><br><span class="line">    <span class="keyword">private</span> RBTNode&lt;T, D&gt; parent;</span><br><span class="line">    <span class="comment">/* 左子结点 */</span></span><br><span class="line">    <span class="keyword">private</span> RBTNode left;</span><br><span class="line">    <span class="comment">/* 右子结点 */</span></span><br><span class="line">    <span class="keyword">private</span> RBTNode right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RBTNode</span><span class="params">(RBTColor color, T key, D data, RBTNode&lt;T, D&gt; parent, RBTNode left, RBTNode right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.parent = parent;</span><br><span class="line">        <span class="keyword">this</span>.left = left;</span><br><span class="line">        <span class="keyword">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RBTColor <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> color;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(RBTColor color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.color == RBTColor.red) &#123;</span><br><span class="line">            <span class="keyword">this</span>.color = RBTColor.black;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.color = RBTColor.red;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(T key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> D <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(D data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RBTNode&lt;T, D&gt; <span class="title">getParent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParent</span><span class="params">(RBTNode&lt;T, D&gt; parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parent = parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RBTNode <span class="title">getLeft</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeft</span><span class="params">(RBTNode left)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.left = left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RBTNode <span class="title">getRight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRight</span><span class="params">(RBTNode right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;RBTNode[&quot;</span> +</span><br><span class="line">                <span class="string">&quot;color=&quot;</span> + color +</span><br><span class="line">                <span class="string">&quot;, key=&quot;</span> + key +</span><br><span class="line">                <span class="string">&quot;, data=&quot;</span> + data +</span><br><span class="line">                <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 红黑树 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedBlackTree</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;, <span class="title">D</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 时间格式 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat SDF = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 根节点 */</span></span><br><span class="line">    <span class="keyword">private</span> RBTNode&lt;T, D&gt; root;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 树结点数量 */</span></span><br><span class="line">    <span class="keyword">private</span> AtomicLong count = <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;获取时间&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getCurrentTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SDF.format(<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;大小&lt;p/&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;查询&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> D <span class="title">get</span><span class="params">(T key)</span> </span>&#123;</span><br><span class="line">        RBTNode&lt;T, D&gt; node = search(key, <span class="keyword">this</span>.root);</span><br><span class="line">        <span class="keyword">return</span> node == <span class="keyword">null</span> ? <span class="keyword">null</span> : node.getData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;插入&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T key, D data)</span> </span>&#123;</span><br><span class="line">        insertNode(key, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;删除&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(T key)</span> </span>&#123;</span><br><span class="line">        RBTNode&lt;T, D&gt; node = search(key, <span class="keyword">this</span>.root);</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            deleteNode(node);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(getCurrentTime() + <span class="string">&quot; [ERROR] &quot;</span> + <span class="string">&quot;key为&quot;</span> + key + <span class="string">&quot;的结点不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;root-getter&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RBTNode&lt;T, D&gt; <span class="title">getRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;判断结点是否为红色&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">isRed</span><span class="params">(RBTNode&lt;T, D&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (node != <span class="keyword">null</span> &amp;&amp; node.getColor() == RBTColor.red) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;判断结点是否为黑色&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">isBlack</span><span class="params">(RBTNode&lt;T, D&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (node == <span class="keyword">null</span> || node.getColor() == RBTColor.black) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;查询key值的结点&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;递归查询: 比较key，相等直接返回，过大则继续向右，过小则继续向左&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RBTNode&lt;T, D&gt; <span class="title">search</span><span class="params">(T key, RBTNode&lt;T, D&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> cmp = key.compareTo(node.getKey());</span><br><span class="line">            <span class="keyword">if</span> (cmp == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> node;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> search(key, node.getRight());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> search(key, node.getLeft());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;左旋&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;过程：父亲下沉，右子上升，右子的左子变为原父的右子&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     *     左旋X结点</span></span><br><span class="line"><span class="comment">     *             P                                P</span></span><br><span class="line"><span class="comment">     *            /                                /</span></span><br><span class="line"><span class="comment">     *           X                                Y</span></span><br><span class="line"><span class="comment">     *         /  \        --(左旋)--&gt;           / \</span></span><br><span class="line"><span class="comment">     *       lX    Y                           X  rY</span></span><br><span class="line"><span class="comment">     *            / \                        /  \</span></span><br><span class="line"><span class="comment">     *          lY   rY                     lX  lY</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">leftRotate</span><span class="params">(RBTNode&lt;T, D&gt; x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 右子结点 */</span></span><br><span class="line">        RBTNode&lt;T, D&gt; y = x.getRight();</span><br><span class="line">        <span class="comment">/* 父亲结点 */</span></span><br><span class="line">        RBTNode&lt;T, D&gt; p = x.getParent();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Y的左子 变成 X的右子</span></span><br><span class="line"><span class="comment">        * 若X不Y的左子不为空</span></span><br><span class="line"><span class="comment">        * 则设置Y的左子的父亲为X */</span></span><br><span class="line">        x.setRight(y.getLeft());</span><br><span class="line">        <span class="keyword">if</span> (y.getLeft() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            y.getLeft().setParent(x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 设置Y的父亲为P</span></span><br><span class="line"><span class="comment">        * 1. P为空，则根节点设置为Y</span></span><br><span class="line"><span class="comment">        * 2. X为P的左子， 则P的左子设置为Y</span></span><br><span class="line"><span class="comment">        * 3. X为P的右子，则P的右子设置为Y */</span></span><br><span class="line">        y.setParent(p);</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.root = y;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.getLeft() == x) &#123;</span><br><span class="line">                p.setLeft(y);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p.setRight(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 将X的父亲设置为Y</span></span><br><span class="line"><span class="comment">        * 将Y的左子设置为X */</span></span><br><span class="line">        x.setParent(y);</span><br><span class="line">        y.setLeft(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;右旋&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;过程：父亲下沉，左子上升，左子的右子变成原父的左子&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     *     右旋X结点</span></span><br><span class="line"><span class="comment">     *             P                                P</span></span><br><span class="line"><span class="comment">     *            /                                /</span></span><br><span class="line"><span class="comment">     *           X                                Y</span></span><br><span class="line"><span class="comment">     *         /  \        --(右旋)--&gt;           /  \</span></span><br><span class="line"><span class="comment">     *        Y   rX                           lY   X</span></span><br><span class="line"><span class="comment">     *       / \                                   / \</span></span><br><span class="line"><span class="comment">     *     lY  rY                                rY  rX</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rightRotate</span><span class="params">(RBTNode&lt;T, D&gt; x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 左子结点 */</span></span><br><span class="line">        RBTNode&lt;T, D&gt; y = x.getLeft();</span><br><span class="line">        <span class="comment">/* 父亲结点 */</span></span><br><span class="line">        RBTNode&lt;T, D&gt; p = x.getParent();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Y的右子 变成 X的左子</span></span><br><span class="line"><span class="comment">        * 若Y的右子不为空</span></span><br><span class="line"><span class="comment">        * 则设置Y的右子的父亲为X */</span></span><br><span class="line">        x.setLeft(y.getRight());</span><br><span class="line">        <span class="keyword">if</span> (y.getRight() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            y.getRight().setParent(x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 设置Y的父亲为P</span></span><br><span class="line"><span class="comment">         * 1. P为空，则根节点设置为Y</span></span><br><span class="line"><span class="comment">         * 2. X为P的左子， 则P的左子设置为Y</span></span><br><span class="line"><span class="comment">         * 3. X为P的右子，则P的右子设置为Y */</span></span><br><span class="line">        y.setParent(p);</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.root = y;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.getLeft() == x) &#123;</span><br><span class="line">                p.setLeft(y);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p.setRight(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 将X的父亲设置为Y</span></span><br><span class="line"><span class="comment">        * 将Y的右子设置为X */</span></span><br><span class="line">        x.setParent(y);</span><br><span class="line">        y.setRight(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;插入结点&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insertNode</span><span class="params">(T key, D data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cmp;</span><br><span class="line">        RBTNode&lt;T, D&gt; x = <span class="keyword">this</span>.root;</span><br><span class="line">        RBTNode&lt;T, D&gt; y = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 寻找新结点的插入位置 */</span></span><br><span class="line">        <span class="keyword">while</span> (x != <span class="keyword">null</span>) &#123;</span><br><span class="line">            y = x;</span><br><span class="line">            cmp = key.compareTo(x.getKey());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (cmp == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">/* key已存在，直接更新 */</span></span><br><span class="line">                System.out.println(getCurrentTime() + <span class="string">&quot; [WARN] key已存在&quot;</span>);</span><br><span class="line">                System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] 更新value: &quot;</span> + get(key) + <span class="string">&quot; =&gt; &quot;</span> + data);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">/* key较大，继续向右查询 */</span></span><br><span class="line">                x = x.getRight();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">/* key较小，继续向左查询 */</span></span><br><span class="line">                x = x.getLeft();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 生成一个新的结点 */</span></span><br><span class="line">        RBTNode&lt;T, D&gt; node = <span class="keyword">new</span> RBTNode&lt;&gt;(RBTColor.red, key, data, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] 新增结点 (&quot;</span> + key + <span class="string">&quot;, &quot;</span> + data + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">        <span class="comment">/* 总结点数量+1 */</span></span><br><span class="line">        <span class="keyword">this</span>.count.incrementAndGet();</span><br><span class="line">        <span class="comment">/* 设置新结点的父亲为Y */</span></span><br><span class="line">        node.setParent(y);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 再次比较决定新结点是y的左子还是右子*/</span></span><br><span class="line">        <span class="keyword">if</span> (y == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.root = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cmp = key.compareTo(y.getKey());</span><br><span class="line">            <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                y.setRight(node);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                y.setLeft(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 最后进行自平衡 */</span></span><br><span class="line">        balanceInsertion(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;插入结点的自平衡操作&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;由于插入节点默认颜色为红色，所以只有父结点为红色时候才需要修复</span></span><br><span class="line"><span class="comment">     *   分三种情况讨论&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;case1. 叔叔结点也为红色&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;case2. 叔叔结点为空，且祖父子三点一线&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;case3. 叔叔结点为空，且祖父子三角关系&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;G-祖父、P-父亲、U-叔叔、C-插入&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">balanceInsertion</span><span class="params">(RBTNode&lt;T, D&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 父亲 · 祖父 */</span></span><br><span class="line">        RBTNode&lt;T, D&gt; paren, grand;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 当父亲节点为黑色时，结束修复 */</span></span><br><span class="line">        <span class="keyword">while</span> (((paren = node.getParent()) != <span class="keyword">null</span>) &amp;&amp; isRed(paren)) &#123;</span><br><span class="line">            grand = paren.getParent();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 确定父亲和叔叔的左右关系 */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* CASE: 父左叔右 */</span></span><br><span class="line">            <span class="keyword">if</span> (grand.getLeft() == paren) &#123;</span><br><span class="line">                RBTNode&lt;T, D&gt; uncle = grand.getRight();</span><br><span class="line"></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * case1: PU双红</span></span><br><span class="line"><span class="comment">                 * solution1: GPU变色</span></span><br><span class="line"><span class="comment">                 * 如果此时整棵树不满足约束，则递归进行GPU变色</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span> (isRed(uncle)) &#123;</span><br><span class="line">                    grand.setColor(RBTColor.red);</span><br><span class="line">                    paren.setColor(RBTColor.black);</span><br><span class="line">                    uncle.setColor(RBTColor.black);</span><br><span class="line">                    node = grand;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * case2: P红U黑，父为左子，GPC三点一线</span></span><br><span class="line"><span class="comment">                 * solution2: 右旋祖父，GP变色</span></span><br><span class="line"><span class="comment">                 *         (1) 右旋祖父结点</span></span><br><span class="line"><span class="comment">                 *           黑祖                        红父</span></span><br><span class="line"><span class="comment">                 *           / \                         / \</span></span><br><span class="line"><span class="comment">                 *        红父  黑叔    --(右旋)--&gt;    红插  黑祖</span></span><br><span class="line"><span class="comment">                 *         /                                 \</span></span><br><span class="line"><span class="comment">                 *       红插                                黑叔</span></span><br><span class="line"><span class="comment">                 *         (2) 祖父和父亲变色</span></span><br><span class="line"><span class="comment">                 *           红父                        黑父</span></span><br><span class="line"><span class="comment">                 *           / \                         / \</span></span><br><span class="line"><span class="comment">                 *        红插  黑祖    --(变色)--&gt;    红插  红祖</span></span><br><span class="line"><span class="comment">                 *              \                            \</span></span><br><span class="line"><span class="comment">                 *              黑叔                         黑叔</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                * case3: P红U黑，父为左子，GPC三角关系</span></span><br><span class="line"><span class="comment">                * solution3: 左旋父亲，交换PC，右旋祖父，GP变色</span></span><br><span class="line"><span class="comment">                *         (1) 左旋父亲结点，并且交换父子身份，此时GPC三点一线</span></span><br><span class="line"><span class="comment">                *          黑祖                        黑祖                        黑祖</span></span><br><span class="line"><span class="comment">                *          / \                         / \                        / \</span></span><br><span class="line"><span class="comment">                *       红父  黑叔    --(左旋)--&gt;    红插  黑叔    --(交换)--&gt;    红父  黑叔</span></span><br><span class="line"><span class="comment">                *        \                          /                           /</span></span><br><span class="line"><span class="comment">                *        红插                     红父                         红插</span></span><br><span class="line"><span class="comment">                *        (2) 右旋祖父结点</span></span><br><span class="line"><span class="comment">                *          黑祖                        红父</span></span><br><span class="line"><span class="comment">                *          / \                         / \</span></span><br><span class="line"><span class="comment">                *       红父  黑叔    --(右旋)--&gt;    红插  黑祖y</span></span><br><span class="line"><span class="comment">                *        /                                 \</span></span><br><span class="line"><span class="comment">                *      红插                                黑叔</span></span><br><span class="line"><span class="comment">                *        (3) 祖父和父亲变色</span></span><br><span class="line"><span class="comment">                *          红父                        黑</span></span><br><span class="line"><span class="comment">                *          / \                         / \</span></span><br><span class="line"><span class="comment">                *       红插  黑祖    --(变色)--&gt;    红插  红组</span></span><br><span class="line"><span class="comment">                *              \                           \</span></span><br><span class="line"><span class="comment">                *              黑叔                        黑叔</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 * attention:</span></span><br><span class="line"><span class="comment">                 * 三角关系经过一步旋转即可转换成三点一线</span></span><br><span class="line"><span class="comment">                 * 因此case3先经过一步处理到case2，再进行case2的处理</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (paren.getRight() == node) &#123; <span class="comment">// case3</span></span><br><span class="line">                        leftRotate(paren);</span><br><span class="line">                        RBTNode&lt;T, D&gt; temp = node;</span><br><span class="line">                        node = paren;</span><br><span class="line">                        paren = temp;</span><br><span class="line">                    &#125; <span class="comment">// case2</span></span><br><span class="line">                    rightRotate(grand);</span><br><span class="line">                    grand.updateColor();</span><br><span class="line">                    paren.updateColor();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* CASE: 父右叔左 */</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                RBTNode&lt;T, D&gt; uncle = grand.getLeft();</span><br><span class="line"></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * case1: PU双红(父亲和叔叔都为红色)</span></span><br><span class="line"><span class="comment">                 * solution1: GPU变色(祖父变为红色，父亲和叔叔都变为黑色)</span></span><br><span class="line"><span class="comment">                 * 如果此时整棵树不满足约束，则递归进行GPU变色</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span> (isRed(uncle)) &#123;</span><br><span class="line">                    grand.setColor(RBTColor.red);</span><br><span class="line">                    paren.setColor(RBTColor.black);</span><br><span class="line">                    uncle.setColor(RBTColor.black);</span><br><span class="line">                    node = grand;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * case4: P红U黑，父为左子，GPC三点一线</span></span><br><span class="line"><span class="comment">                 * solution4: 左旋祖父，GP变色</span></span><br><span class="line"><span class="comment">                 *         (1) 左旋祖父结点</span></span><br><span class="line"><span class="comment">                 *           黑祖                        红父</span></span><br><span class="line"><span class="comment">                 *           / \                         / \</span></span><br><span class="line"><span class="comment">                 *        黑叔  红父    --(右旋)--&gt;    黑祖  红插</span></span><br><span class="line"><span class="comment">                 *               \                     /</span></span><br><span class="line"><span class="comment">                 *               红插                黑叔</span></span><br><span class="line"><span class="comment">                 *          (2) 祖父和父亲变色</span></span><br><span class="line"><span class="comment">                 *           红父                        黑父</span></span><br><span class="line"><span class="comment">                 *           / \                         / \</span></span><br><span class="line"><span class="comment">                 *        黑祖  红插    --(变色)--&gt;    红祖  红插</span></span><br><span class="line"><span class="comment">                 *         /                           /</span></span><br><span class="line"><span class="comment">                 *       黑叔                        黑叔</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 * case5: P红U黑，父为右子，GPC三角关系</span></span><br><span class="line"><span class="comment">                 * solution5: 右旋父亲，交换PC，左旋祖父，GP变色</span></span><br><span class="line"><span class="comment">                 *          (1) 右旋父亲结点，并且交换父子身份，此时GPC三点一线</span></span><br><span class="line"><span class="comment">                 *           黑祖                        黑祖                        黑祖</span></span><br><span class="line"><span class="comment">                 *           / \                         / \                        / \</span></span><br><span class="line"><span class="comment">                 *        黑叔  红父    --(右旋)--&gt;    黑祖  红插    --(交换)--&gt;    黑祖  红父</span></span><br><span class="line"><span class="comment">                 *              /                            \                          \</span></span><br><span class="line"><span class="comment">                 *            红插                           红父                        红插</span></span><br><span class="line"><span class="comment">                 *          (2) 左旋祖父</span></span><br><span class="line"><span class="comment">                 *           黑祖                        红父</span></span><br><span class="line"><span class="comment">                 *           / \                         / \</span></span><br><span class="line"><span class="comment">                 *        黑叔  红父    --(左旋)--&gt;    黑祖  红插</span></span><br><span class="line"><span class="comment">                 *               \                    /</span></span><br><span class="line"><span class="comment">                 *               红插               黑叔</span></span><br><span class="line"><span class="comment">                 *          (3) 祖父和父亲变色</span></span><br><span class="line"><span class="comment">                 *           红父                        黑父</span></span><br><span class="line"><span class="comment">                 *           / \                         / \</span></span><br><span class="line"><span class="comment">                 *        黑叔  红插    --(变色)--&gt;    红祖  红插</span></span><br><span class="line"><span class="comment">                 *         /                         /</span></span><br><span class="line"><span class="comment">                 *       黑叔                      黑叔</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 * attention:</span></span><br><span class="line"><span class="comment">                 * 三角关系经过一步旋转即可转换成三点一线</span></span><br><span class="line"><span class="comment">                 * 因此case3先经过一步处理到case2，再进行case2的处理</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (paren.getLeft() == node) &#123; <span class="comment">// case3</span></span><br><span class="line">                        rightRotate(paren);</span><br><span class="line">                        RBTNode&lt;T, D&gt; temp = node;</span><br><span class="line">                        node = paren;</span><br><span class="line">                        paren = temp;</span><br><span class="line">                    &#125; <span class="comment">// case2</span></span><br><span class="line">                    leftRotate(grand);</span><br><span class="line">                    grand.updateColor();</span><br><span class="line">                    paren.updateColor();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 保证根节点为黑色 */</span></span><br><span class="line">        <span class="keyword">if</span> (root == node) &#123;</span><br><span class="line">            node.setColor(RBTColor.black);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;删除结点&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;三种情况&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;case1. 待删结点左子和右子都存在&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;case2. 待删结点没有左子和右子&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;case3. 待删结点只有左子或者右子&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(RBTNode&lt;T, D&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 父亲 · 儿子 · 继承者 */</span></span><br><span class="line">        RBTNode&lt;T, D&gt; paren, child, replace;</span><br><span class="line">        RBTColor color;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * case1: 待删结点左子和右子都存在</span></span><br><span class="line"><span class="comment">         * solution1:</span></span><br><span class="line"><span class="comment">         * - 找到该结点的右子树中的最左子结点</span></span><br><span class="line"><span class="comment">         * - 把它的值和要删除的结点的值进行交换</span></span><br><span class="line"><span class="comment">         * - 然后删除这个结点即相当于删除所需删除结点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> ((node.getLeft() != <span class="keyword">null</span>) &amp;&amp; (node.getRight() != <span class="keyword">null</span>))  &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*  获取其后继结点: 右子树中的最左子结点 */</span></span><br><span class="line">            replace = descendants(node);</span><br><span class="line">            paren = replace.getParent();</span><br><span class="line">            child = replace.getRight();</span><br><span class="line">            color = replace.getColor();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node == replace.getParent()) &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * case:</span></span><br><span class="line"><span class="comment">                 *    node              replace</span></span><br><span class="line"><span class="comment">                 *      \                  \</span></span><br><span class="line"><span class="comment">                 *      replace    --&gt;    child</span></span><br><span class="line"><span class="comment">                 *         \</span></span><br><span class="line"><span class="comment">                 *         child</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                paren = replace;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * case:</span></span><br><span class="line"><span class="comment">                 *     node                replace</span></span><br><span class="line"><span class="comment">                 *       \                   \</span></span><br><span class="line"><span class="comment">                 *        X                   X</span></span><br><span class="line"><span class="comment">                 *       / \                 / \</span></span><br><span class="line"><span class="comment">                 *  paren   X    --&gt;    paren   X</span></span><br><span class="line"><span class="comment">                 *     /                  /</span></span><br><span class="line"><span class="comment">                 *  replace            child</span></span><br><span class="line"><span class="comment">                 *     \</span></span><br><span class="line"><span class="comment">                 *     child</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="comment">/* 建立替代结点的父亲与替换结点的右子的父子关系，即爷孙変父子 */</span></span><br><span class="line">                <span class="keyword">if</span> (child != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    child.setParent(replace.getParent());</span><br><span class="line">                &#125;</span><br><span class="line">                replace.getParent().setLeft(child);</span><br><span class="line">                <span class="comment">/* 建立替代节点与待删节点的右子的父子关系 */</span></span><br><span class="line">                replace.setRight(node.getRight());</span><br><span class="line">                node.getRight().setParent(replace);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 待删节点的父亲设置为替代结点的父亲 */</span></span><br><span class="line">            replace.setParent(node.getParent());</span><br><span class="line">            <span class="comment">/* 建立替换结点与待删节点左子的父子关系 */</span></span><br><span class="line">            replace.setLeft(node.getLeft());</span><br><span class="line">            node.getLeft().setParent(replace);</span><br><span class="line">            <span class="comment">/* 替代结点沿用待删节点的颜色 */</span></span><br><span class="line">            replace.setColor(node.getColor());</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 待删结点的父亲不为空，则调整左右子 */</span></span><br><span class="line">            <span class="keyword">if</span> (node.getParent() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node.getParent().getLeft() == node) &#123;</span><br><span class="line">                    node.getParent().setLeft(replace);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    node.getParent().setRight(replace);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* 待删结点的父亲为空，则设置根结点 */</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.root = replace;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 删除黑色结点需要调整平衡，红色不需要 */</span></span><br><span class="line">            <span class="keyword">if</span> (color == RBTColor.black) &#123;</span><br><span class="line">                balanceDeletion(child, paren);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * case2: 待删结点没有左子和右子</span></span><br><span class="line"><span class="comment">         * solution2: 直接删除结点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((node.getLeft() == <span class="keyword">null</span>) &amp;&amp; (node.getRight() == <span class="keyword">null</span>)) &#123;</span><br><span class="line">            paren = node.getParent();</span><br><span class="line">            <span class="keyword">if</span> (node == paren.getLeft()) &#123;</span><br><span class="line">                paren.setLeft(node.getLeft());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                paren.setRight(node.getRight());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * case3: 待删结点只有左子或者右子</span></span><br><span class="line"><span class="comment">         * solution3: 待删节点的父亲指向存在的子嗣</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* 确定替代结点 */</span></span><br><span class="line">            <span class="keyword">if</span> (node.getLeft() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                replace = node.getLeft();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                replace = node.getRight();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 待删结点的父亲 */</span></span><br><span class="line">            paren = node.getParent();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 待删结点的父亲是否为空 */</span></span><br><span class="line">            <span class="keyword">if</span> (paren != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (paren.getLeft() == node) &#123;</span><br><span class="line">                    paren.setLeft(replace);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    paren.setRight(replace);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.root = replace;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 待删节点的父亲指向替代结点 */</span></span><br><span class="line">            replace.setParent(paren);</span><br><span class="line"></span><br><span class="line">            color = node.getColor();</span><br><span class="line">            child = replace;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 删除黑色结点需要调整平衡，红色不需要 */</span></span><br><span class="line">            <span class="keyword">if</span> (color == RBTColor.black) &#123;</span><br><span class="line">                balanceDeletion(child, paren);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 结点数量-1 */</span></span><br><span class="line">        count.decrementAndGet();</span><br><span class="line">        System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] key为&quot;</span> + node.getKey() + <span class="string">&quot;的结点删除成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;寻找继承的后裔&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RBTNode&lt;T, D&gt; <span class="title">descendants</span><span class="params">(RBTNode&lt;T, D&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 查询大于该节点的最小结点，即右子树的最左结点 */</span></span><br><span class="line">        <span class="keyword">if</span> (node.getRight() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            RBTNode&lt;T, D&gt; right = node.getRight();</span><br><span class="line">            <span class="keyword">if</span> (right.getLeft() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (right.getLeft() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                right = right.getLeft();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* @deprecated */</span></span><br><span class="line">        RBTNode&lt;T, D&gt; paren = node.getParent();</span><br><span class="line">        <span class="keyword">while</span> ((paren != <span class="keyword">null</span>) &amp;&amp; (paren.getRight() == node)) &#123;</span><br><span class="line">            node = paren;</span><br><span class="line">            paren = paren.getParent();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> paren;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;删除结点的自平衡操作&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * P-父亲、D-删除、B-兄弟、BR-兄弟右子、BL-兄弟左子。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * - D为左子</span></span><br><span class="line"><span class="comment">     *   - B为红色：左旋父亲，父亲染红，兄弟染黑，然后continue</span></span><br><span class="line"><span class="comment">     *   - B为黑色</span></span><br><span class="line"><span class="comment">     *     - BL为黑色且BR黑色：兄弟染红，父亲回溯</span></span><br><span class="line"><span class="comment">     *     - BL为红色且BR为黑色：右旋兄弟，兄弟染红，BL染黑</span></span><br><span class="line"><span class="comment">     *     - BR为红色：左旋父亲，父亲的颜色给兄弟，父亲黑化，BR黑化，然后break</span></span><br><span class="line"><span class="comment">     * - D为右子</span></span><br><span class="line"><span class="comment">     *   - B为红色：右旋父亲，父亲染红，兄弟染黑，然后continue</span></span><br><span class="line"><span class="comment">     *   - B为黑色：</span></span><br><span class="line"><span class="comment">     *     - BL为黑色且BR为黑色：兄弟染红，父亲回溯</span></span><br><span class="line"><span class="comment">     *     - BL为红色且BR为黑色：左旋兄弟，父亲染红，BR染黑</span></span><br><span class="line"><span class="comment">     *     - BL为红色：右旋父亲，父亲的颜色给兄弟，父亲黑化，BL黑化，然后break</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> paren</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     *     入参情况:</span></span><br><span class="line"><span class="comment">     *     1. node=替换节点 paren=替换节点的父亲节点</span></span><br><span class="line"><span class="comment">     *     2. node=替换节点的孩子节点 paren=替换节点</span></span><br><span class="line"><span class="comment">     *     3. node=替换节点的孩子节点 parent=替换节点的父节点</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">balanceDeletion</span><span class="params">(RBTNode&lt;T, D&gt; node, RBTNode&lt;T, D&gt; paren)</span> </span>&#123;</span><br><span class="line">        RBTNode&lt;T, D&gt; broth;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (isBlack(node) &amp;&amp; node != <span class="keyword">this</span>.root) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (paren.getLeft() == node) &#123;</span><br><span class="line">                broth = paren.getRight();</span><br><span class="line"></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * case1: D为左子。B为红色</span></span><br><span class="line"><span class="comment">                 * solution1: 左旋父亲，父亲染红，兄弟染黑，然后continue</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span> (isRed(broth)) &#123;</span><br><span class="line">                    leftRotate(paren);</span><br><span class="line">                    paren.setColor(RBTColor.red);</span><br><span class="line">                    broth.setColor(RBTColor.black);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * case2: D为左子。B为黑色，BL为黑色且BR为黑色</span></span><br><span class="line"><span class="comment">                     * solution2: 兄弟染红，父亲回溯</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">if</span> (isBlack(broth.getLeft()) &amp;&amp; isBlack(broth.getRight())) &#123;</span><br><span class="line">                        broth.setColor(RBTColor.red);</span><br><span class="line">                        node = paren;</span><br><span class="line">                        paren = paren.getParent();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * case3: D为左子。B为黑色，BL为红色且BR为黑色</span></span><br><span class="line"><span class="comment">                     * solution3: 右旋兄弟，兄弟染红，BL染黑</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (isRed(broth.getLeft()) &amp;&amp; isBlack(broth.getRight())) &#123;</span><br><span class="line">                        rightRotate(broth);</span><br><span class="line">                        broth.setColor(RBTColor.red);</span><br><span class="line">                        broth.getLeft().setColor(RBTColor.black);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * case4: D为左子，B为黑色，BR为红色</span></span><br><span class="line"><span class="comment">                     * solution4: 左旋父亲，父亲的颜色给兄弟，父亲黑化，BR黑化，然后break</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (isRed(broth.getRight())) &#123;</span><br><span class="line">                        leftRotate(paren);</span><br><span class="line">                        broth.setColor(paren.getColor());</span><br><span class="line">                        paren.setColor(RBTColor.black);</span><br><span class="line">                        broth.getRight().setColor(RBTColor.black);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                broth = paren.getLeft();</span><br><span class="line"></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * case5: D为右子。B为红色</span></span><br><span class="line"><span class="comment">                 * solution5: 右旋父亲，父亲染红，兄弟染黑，然后continue</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span> (isRed(broth)) &#123;</span><br><span class="line">                    rightRotate(paren);</span><br><span class="line">                    paren.setColor(RBTColor.red);</span><br><span class="line">                    broth.setColor(RBTColor.black);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * case6: D为右子。B为黑色，BL为黑色且BR为黑色</span></span><br><span class="line"><span class="comment">                     * solution6: 兄弟染红，父亲回溯</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">if</span> (isBlack(broth.getLeft()) &amp;&amp; isBlack(broth.getRight())) &#123;</span><br><span class="line">                        broth.setColor(RBTColor.red);</span><br><span class="line">                        node = paren;</span><br><span class="line">                        paren = paren.getParent();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * case7: D为右子。B为黑色，BL为红色且BR为黑色</span></span><br><span class="line"><span class="comment">                     * solution7: 左旋兄弟，父亲染红，BR染黑</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (isRed(broth.getLeft()) &amp;&amp; isBlack(broth.getRight())) &#123;</span><br><span class="line">                        leftRotate(broth);</span><br><span class="line">                        paren.setColor(RBTColor.red);</span><br><span class="line">                        broth.getRight().setColor(RBTColor.black);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * case8: D为右子，B为黑色，BR为红色</span></span><br><span class="line"><span class="comment">                     * solution8: 右旋父亲，父亲的颜色给兄弟，父亲黑化，BL黑化，然后break</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (isRed(broth.getRight())) &#123;</span><br><span class="line">                        rightRotate(paren);</span><br><span class="line">                        broth.setColor(paren.getColor());</span><br><span class="line">                        paren.setColor(RBTColor.black);</span><br><span class="line">                        broth.getRight().setColor(RBTColor.black);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* node染成被删结点的颜色 */</span></span><br><span class="line">        node.setColor(RBTColor.black);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;层次遍历&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;List&lt;RBTNode&lt;T, D&gt;&gt;&gt; levelList = levelOrder(<span class="keyword">this</span>.root);</span><br><span class="line">        <span class="keyword">for</span> (List&lt;RBTNode&lt;T, D&gt;&gt; list:levelList) &#123;</span><br><span class="line">            <span class="keyword">for</span> (RBTNode node : list) &#123;</span><br><span class="line">                System.out.print(node.getKey() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;层次遍历&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;List&lt;RBTNode&lt;T, D&gt;&gt;&gt; levelOrder(RBTNode&lt;T, D&gt; node) &#123;</span><br><span class="line">        List&lt;List&lt;RBTNode&lt;T, D&gt;&gt;&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        Queue&lt;RBTNode&lt;T, D&gt;&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.add(node);</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> count = queue.size();</span><br><span class="line">            List&lt;RBTNode&lt;T, D&gt;&gt; cur = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span> (count != <span class="number">0</span>) &#123;</span><br><span class="line">                RBTNode&lt;T, D&gt; temp = queue.poll();</span><br><span class="line">                cur.add(temp);</span><br><span class="line">                <span class="keyword">if</span> (temp.getLeft() != <span class="keyword">null</span>) queue.add(temp.getLeft());</span><br><span class="line">                <span class="keyword">if</span> (temp.getRight() != <span class="keyword">null</span>) queue.add(temp.getRight());</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;输出红黑树的层级结构&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printRBTreeLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] 开始打印红黑树的层级结构&quot;</span>);</span><br><span class="line">        ConcurrentHashMap&lt;Integer, List&lt;RBTNode&gt;&gt; map = showTree();</span><br><span class="line">        <span class="keyword">int</span> size = map.size();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; map.size(); i++) &#123;</span><br><span class="line">            System.out.println();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; map.get(i).size(); j++) &#123;</span><br><span class="line">                System.out.print( makeSpace(size, i) +</span><br><span class="line">                        (map.get(i).get(j).getKey() == <span class="keyword">null</span> ? <span class="string">&quot; &quot;</span> : (map.get(i).get(j).getKey()) + (map.get(i).get(j).getColor() == RBTColor.black ? <span class="string">&quot;(黑)&quot;</span> : <span class="string">&quot;(红)&quot;</span>)) + makeSpace(size, i));</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] 红黑树的层级结构打印完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;输出整棵树的Graphviz结构&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printGraphviz</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] 开始打印树的Graphviz结构&quot;</span>);</span><br><span class="line">        ConcurrentHashMap&lt;Integer, List&lt;RBTNode&gt;&gt; map = showTree();</span><br><span class="line">        <span class="keyword">int</span> size = map.size();</span><br><span class="line">        System.out.println(<span class="string">&quot;digraph &#123;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; map.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; map.get(i).size(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(map.get(i).get(j).getKey() != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    System.out.println(map.get(i).get(j).getKey() + <span class="string">&quot; [color=&quot;</span>  + (map.get(i).get(j).getColor()) + <span class="string">&quot;] &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; map.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; map.get(i).size(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(map.get(i).get(j).getKey() != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(map.get(i).get(j).getLeft() != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        System.out.println(map.get(i).get(j).getKey() + <span class="string">&quot;-&gt;&quot;</span> + map.get(i).get(j).getLeft().getKey() + <span class="string">&quot;[label=left]&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(map.get(i).get(j).getRight() != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        System.out.println(map.get(i).get(j).getKey() + <span class="string">&quot;-&gt;&quot;</span> + map.get(i).get(j).getRight().getKey() + <span class="string">&quot;[label=right]&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] 树的Graphviz结构打印完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">makeSpace</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; (size - index); i++) &#123;</span><br><span class="line">            builder.append(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ConcurrentHashMap&lt;Integer, List&lt;RBTNode&gt;&gt; showTree()&#123;</span><br><span class="line">        ConcurrentHashMap&lt;Integer, List&lt;RBTNode&gt;&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">        showTree(root, <span class="number">0</span>, map);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showTree</span><span class="params">(RBTNode root, <span class="keyword">int</span> count, ConcurrentHashMap&lt;Integer, List&lt;RBTNode&gt;&gt; map)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map.get(count) == <span class="keyword">null</span>)&#123;</span><br><span class="line">            map.put(count, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        map.get(count).add(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root.getLeft() != <span class="keyword">null</span>)&#123;</span><br><span class="line">            showTree(root.getLeft(), count+<span class="number">1</span> , map);</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.get(count+<span class="number">1</span>) == <span class="keyword">null</span>)&#123;</span><br><span class="line">                map.put(count+<span class="number">1</span>, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            map.get(count+<span class="number">1</span>).add(<span class="keyword">new</span> RBTNode(RBTColor.red, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.getRight() != <span class="keyword">null</span>)&#123;</span><br><span class="line">            showTree(root.getRight(), count+<span class="number">1</span> , map);</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.get(count+<span class="number">1</span>) == <span class="keyword">null</span>)&#123;</span><br><span class="line">                map.put(count+<span class="number">1</span>, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            map.get(count+<span class="number">1</span>).add(<span class="keyword">new</span> RBTNode(RBTColor.red, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;菜单&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RBT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RedBlackTree KTree = <span class="keyword">new</span> RedBlackTree();</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println((<span class="string">&quot;┏━━━━━━━━━ ▶ ▶ ▶ ▶ ▶ RED ❤ BLACK ◀ ◀ ◀ ◀ ◀ ━━━━━━━━━━┓&quot;</span>));</span><br><span class="line">            System.out.println((<span class="string">&quot;   ✪━━━━━━━━━━━━━━━━━━━ 1. 插入节点 ━━━━━━━━━━━━━━━━━━━✪&quot;</span>));</span><br><span class="line">            System.out.println((<span class="string">&quot;   ✪━━━━━━━━━━━━━━━━━━━ 2. 查询节点 ━━━━━━━━━━━━━━━━━━━✪&quot;</span>));</span><br><span class="line">            System.out.println((<span class="string">&quot;   ✪━━━━━━━━━━━━━━━━━━━ 3. 删除结点 ━━━━━━━━━━━━━━━━━━━✪&quot;</span>));</span><br><span class="line">            System.out.println((<span class="string">&quot;   ✪━━━━━━━━━━━━━━━━━━━ 4. 查询数量 ━━━━━━━━━━━━━━━━━━━✪&quot;</span>));</span><br><span class="line">            System.out.println((<span class="string">&quot;   ✪━━━━━━━━━━━━━━━━━━━ 5. 层次结构 ━━━━━━━━━━━━━━━━━━━✪&quot;</span>));</span><br><span class="line">            System.out.println((<span class="string">&quot;   ✪━━━━━━━━━━━━━━━━━━━ 6. Graphviz ━━━━━━━━━━━━━━━━━━✪&quot;</span>));</span><br><span class="line">            System.out.println((<span class="string">&quot;   ✪━━━━━━━━━━━━━━━━━━━ 7. 退出系统 ━━━━━━━━━━━━━━━━━━━✪&quot;</span>));</span><br><span class="line">            System.out.println((<span class="string">&quot;┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛&quot;</span>));</span><br><span class="line"></span><br><span class="line">            System.out.print(getCurrentTime() + <span class="string">&quot; [input] 输入选择：&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> choice = scanner.nextInt();</span><br><span class="line">            <span class="keyword">int</span> key;</span><br><span class="line">            String value;</span><br><span class="line">            <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    System.out.print(getCurrentTime() + <span class="string">&quot; [INPUT] 输入键值：&quot;</span>);</span><br><span class="line">                    key = scanner.nextInt();</span><br><span class="line">                    System.out.print(getCurrentTime() + <span class="string">&quot; [INPUT] 输入数据：&quot;</span>);</span><br><span class="line">                    value = scanner.next();</span><br><span class="line">                    KTree.add(key, value);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    System.out.print(getCurrentTime() + <span class="string">&quot; [INPUT] 输入键值：&quot;</span>);</span><br><span class="line">                    key = scanner.nextInt();</span><br><span class="line">                    System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] 查询结果 value = &quot;</span> + KTree.get(key));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    System.out.print(getCurrentTime() + <span class="string">&quot; [INPUT] 输入键值：&quot;</span>);</span><br><span class="line">                    key = scanner.nextInt();</span><br><span class="line">                    KTree.del(key);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] 查询结果 size = &quot;</span> + KTree.size());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                    KTree.printRBTreeLevel();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                    KTree.printGraphviz();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                    System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] 退出成功&quot;</span>);</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(getCurrentTime() + <span class="string">&quot; [ERROR] 输入错误&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RedBlackTree redBlackTree = <span class="keyword">new</span> RedBlackTree();</span><br><span class="line">        redBlackTree.RBT();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>RedBlackTree</tag>
      </tags>
  </entry>
  <entry>
    <title>叶惠美</title>
    <url>/posts/f8cdfd0a/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/f8cdfd0a/MyCD.jpg" class="" title="MyCD">


        <div id="aplayer-pnvNQATb" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;"></div>
			  <script>
				  var options = {"narrow":false,"autoplay":false,"showlrc":1,"mode":"oredr","mutex":true,"theme":"#e6d0b2","preload":"metadata","listmaxheight":"513px","music":[{"title":"以父之名","author":"周杰伦","url":"/posts/f8cdfd0a/以父之名.ogg","pic":"/posts/f8cdfd0a/YHM.jpg","lrc":"以父之名.txt"},{"title":"懦夫","author":"周杰伦","url":"/posts/f8cdfd0a/懦夫.ogg","pic":"/posts/f8cdfd0a/YHM.jpg","lrc":"懦夫.txt"},{"title":"晴天","author":"周杰伦","url":"/posts/f8cdfd0a/晴天.flac","pic":"/posts/f8cdfd0a/YHM.jpg","lrc":"晴天.txt"},{"title":"三年二班","author":"周杰伦","url":"/posts/f8cdfd0a/三年二班.ogg","pic":"/posts/f8cdfd0a/YHM.jpg","lrc":"三年二班.txt"},{"title":"东风破","author":"周杰伦","url":"/posts/f8cdfd0a/东风破.ogg","pic":"/posts/f8cdfd0a/YHM.jpg","lrc":"东风破.txt"},{"title":"你听得到","author":"周杰伦","url":"/posts/f8cdfd0a/你听得到.ogg","pic":"/posts/f8cdfd0a/YHM.jpg","lrc":"你听得到.txt"},{"title":"同一种调调","author":"周杰伦","url":"/posts/f8cdfd0a/同一种调调.ogg","pic":"/posts/f8cdfd0a/YHM.jpg","lrc":"同一种调调.txt"},{"title":"她的睫毛","author":"周杰伦","url":"/posts/f8cdfd0a/她的睫毛.ogg","pic":"/posts/f8cdfd0a/YHM.jpg","lrc":"她的睫毛.txt"},{"title":"爱情悬崖","author":"周杰伦","url":"/posts/f8cdfd0a/爱情悬崖.ogg","pic":"/posts/f8cdfd0a/YHM.jpg","lrc":"爱情悬崖.txt"},{"title":"梯田","author":"周杰伦","url":"/posts/f8cdfd0a/梯田.ogg","pic":"/posts/f8cdfd0a/YHM.jpg","lrc":"梯田.txt"},{"title":"双刀","author":"周杰伦","url":"/posts/f8cdfd0a/双刀.ogg","pic":"/posts/f8cdfd0a/YHM.jpg","lrc":"双刀.txt"}]};
				  options.element = document.getElementById("aplayer-pnvNQATb");
				  var ap = new APlayer(options);
			    window.aplayers || (window.aplayers = []);
				  window.aplayers.push(ap);
			  </script>



<a id="more"></a>



<center>
<p>听妈妈的话，你比从前快乐；</p>
<p>听爸爸的话，爸，我回来了。</p>
<p>我把爷爷泡的茶，送给天台的外婆；</p>
<p>她加了点麦芽糖，味道变得甜甜的。</p>
<p>枫林夜曲诉琴伤，梯田花海七里香。</p>
<p>大笨钟迷魂曲在我的地盘，合奏止战之殇。</p>
<p>稻香中窃爱当梦想启动，你却说了再见，</p>
<p>不爱我就拉倒我要夏天，填满手写的从前，</p>
<p>发如雪的娘子用断了的弦弹奏东风破，</p>
<p>在红尘客栈写兰亭序，送天涯过客，</p>
<p>烟花易冷天下无双的英雄也会落寞。</p>
<p>身披黄金甲的将军，在菊花台四面楚歌，</p>
<p>大侠霍元甲在上海1943复活，</p>
<p>用龙拳双截棍击败了拿双刀的忍者，</p>
<p>龙战骑士以父之名发动最后的战役，</p>
<p>困兽之斗半兽人在蓝色风暴中战栗，</p>
<p>流浪诗人送可爱女人一件黑色毛衣，</p>
<p>阳光宅男与超跑女神在阳明山漂移，</p>
<p>牛仔很忙却与米兰的小铁匠跳起蛇舞，</p>
<p>魔术先生劝乔克叔叔不要当懦夫。</p>
<p>安静离开爱情悬崖，我落泪情绪零碎，</p>
<p>一路向北的后退，哦对不起是我不配，</p>
<p>就像水手怕水，就像超人不会飞，</p>
<p>这表白的话我无法一口气全念对，</p>
<p>你明明就喜欢她，却为何开不了口，</p>
<p>你算什么男人，总是转身说走就走，</p>
<p>不该找借口退后，Mojito来一点点，</p>
<p>自导自演对她说你好吗？好久不见。</p>
<p>拨动反方向的钟，想回到过去说好不哭，</p>
<p>爱就像是龙卷风，夹杂心雨何时停住，</p>
<p>跟免费教学录音带学手语怎么了，</p>
<p>我不想当爱情废柴，说好的幸福呢？</p>
<p>园游会中我牵着告白气球在傻笑，</p>
<p>晴天的彩虹下你听得到我的暗号，</p>
<p>坐四季列车去千里之外的伊斯坦堡，</p>
<p>爱你没差你我用同一种调调。</p>
<p>坐在三年二班门口看白色风车，</p>
<p>雨下一整晚了，我在等你下课，</p>
<p>在秘密花园里送你半岛铁盒，</p>
<p>给我一首歌的时间，简单爱要对你说，</p>
<p>为你弹乌克丽丽，陪你看最长的电影，</p>
<p>沿着时光机的轨迹，写爱的飞行日记，</p>
<p>遵从你的完美主义，守护不能说的秘密，</p>
<p>Now you see me，哪里都是你的公主病。</p>
<p>与你吃土耳其冰淇淋听见下雨的声音，</p>
<p>在布拉格广场一起听比较大的大提琴。</p>
<p>床边故事夜的第七章讲着爱在西元前，</p>
<p>前世情人逆鳞美人鱼搁浅在珊瑚海边，</p>
<p>嘻哈空姐放下浪漫手机吃疗伤烧肉粽，</p>
<p>波爷翻开本草纲目治好了公公偏头痛，</p>
<p>印第安老斑鸠在威廉古堡看蜗牛斗牛，</p>
<p>青花瓷旁周大侠看皮影戏里乱舞春秋。</p>
<p>我是如此相信有天你还会出新歌，</p>
<p>世界末日、世界未末日都会等着。</p>
</center>




]]></content>
      <categories>
        <category>Music</category>
      </categories>
      <tags>
        <tag>叶惠美</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/posts/bae4ff13/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-📩NoSQL概述"><a href="#1-📩NoSQL概述" class="headerlink" title="1. 📩NoSQL概述"></a>1. 📩NoSQL概述</h2><h3 id="1-1-📃简介"><a href="#1-1-📃简介" class="headerlink" title="1.1 📃简介"></a>1.1 📃简介</h3><blockquote>
<p>⚡ NoSQL</p>
</blockquote>
<p>NoSQL != 非SQL </p>
<p>NoSQL == Not Only SQL</p>
<p>不仅仅是SQL！</p>
<p>泛指非关系型的数据库。克服大并发。</p>
<p>很多的数据类型，用户的个人信息、社交网络和地理位置，这些数据类型的存储不需要一个固定的格式，不需要多元的操作就可以横向扩展。</p>
<a id="more"></a>



<h3 id="1-2-🌀特点"><a href="#1-2-🌀特点" class="headerlink" title="1.2 🌀特点"></a>1.2 🌀特点</h3><ul>
<li><p>方便扩展（数据之间没有关系，很好扩展）</p>
</li>
<li><p>大数据量高性能（细粒度缓存，性能高）</p>
</li>
<li><p>数据类型多样（不需要设计数据库，随取随用）</p>
</li>
<li><p>RDBMS和NoSQL的区别: </p>
<ul>
<li>RDBMS<ul>
<li>结构化组织</li>
<li>SQL</li>
<li>数据和关系都存在单独的表中</li>
<li>严格的一致性</li>
<li>基础的事务</li>
<li>···</li>
</ul>
</li>
<li>NoSQL<ul>
<li>不仅仅是数据</li>
<li>没有固定的查询语言</li>
<li>键值对存储，列存储，文档存储，图形存储</li>
<li>最终一致性</li>
<li>CAP和BASE</li>
<li>三高：高性能、高可用、高可扩展</li>
<li>···</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="1-3-🚀3V-3H"><a href="#1-3-🚀3V-3H" class="headerlink" title="1.3 🚀3V+3H"></a>1.3 🚀3V+3H</h3><ul>
<li>大数据时代的3V<ul>
<li>海量 Volume</li>
<li>多样 Variety</li>
<li>实时 Velocity</li>
</ul>
</li>
<li>互联网需求的3H<ul>
<li>高并发 High concurrency</li>
<li>高可拓 High scalable</li>
<li>高性能 High performance</li>
</ul>
</li>
</ul>
<h3 id="1-4-📚分类"><a href="#1-4-📚分类" class="headerlink" title="1.4 📚分类"></a>1.4 📚分类</h3><blockquote>
<p>😭呜呜呜，我好菜，我啥都不会🍼</p>
</blockquote>
<table>
<thead>
<tr>
<th>分类</th>
<th>举例</th>
<th>典型应用场景</th>
<th>数据模型</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td>键值对</td>
<td>Tokyo Cabinet/Tyrant，Redis，Voldemort，Oracle BDB</td>
<td>内容UAN，主要用于处理大量数据的高访问负载，也用于一些日志系统等等</td>
<td>Key指向value的键值对，通常用hash table来实现</td>
<td>查找速度快</td>
<td>数据无结构化，通常只被当做字符串或者二进制数据</td>
</tr>
<tr>
<td>列存储数据库</td>
<td>Cassandra，HBase，Riak</td>
<td>分布式的文件系统</td>
<td>以列簇式存储，将同一列数据存在一起</td>
<td>查找速度快，可扩展性强，更容易进行分布式扩展</td>
<td>功能相对局限</td>
</tr>
<tr>
<td>文档型数据库</td>
<td>CouchDB，MongoDB</td>
<td>Web应用</td>
<td>Key-Value对应的键值对，Value为结构化数据</td>
<td>数据结构要求不严格，表结构可变，不需要像关系型数据库一样需要预先定义表结构</td>
<td>查询性能不高，而且缺乏统一的查询语言</td>
</tr>
<tr>
<td>图形数据库</td>
<td>Neo4J，InfoGrid，Infinite Graph</td>
<td>社交网络、推荐系统等等，专注于构建关系图谱</td>
<td>图结构</td>
<td>利用图结构相关算法。比如最短路径寻址，N度关系查找等</td>
<td>很多时候需要对整个图做计算才能得出需要的信息，而且这种结构不太好做分布式的集群方案</td>
</tr>
</tbody></table>
<h3 id="1-5-📈阿里巴技术演进"><a href="#1-5-📈阿里巴技术演进" class="headerlink" title="1.5 📈阿里巴技术演进"></a>1.5 📈阿里巴技术演进</h3><blockquote>
<p>✡技术并无高低之分，就看你如何使用</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201009144812661.png" class="" title="image-20201009144812661.png">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201009145619674.png" class="" title="image-20201009145619674.png">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201009153115683.png" class="" title="image-20201009153115683.png">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201009153346176.png" class="" title="image-20201009153346176.png">





<h2 id="2-📩Redis入门"><a href="#2-📩Redis入门" class="headerlink" title="2. 📩Redis入门"></a>2. 📩Redis入门</h2><blockquote>
<p> 🌐 official website</p>
</blockquote>
<ul>
<li><p>英文官网：<a href="https://www.redis.io/">redis</a></p>
</li>
<li><p>中文官网：<del><a href="https://www.redis.cn/">redis</a></del></p>
</li>
<li><p>中文官网：<a href="https://www.redis.net.cn/">redis</a></p>
</li>
</ul>
<h3 id="2-1-📑简介"><a href="#2-1-📑简介" class="headerlink" title="2.1 📑简介"></a>2.1 📑简介</h3><blockquote>
<p>💡 Redis = Remote Dictionary Server</p>
</blockquote>
<p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 <a href="http://redis.cn/topics/data-types-intro.html#strings">字符串（strings）</a>， <a href="http://redis.cn/topics/data-types-intro.html#hashes">散列（hashes）</a>， <a href="http://redis.cn/topics/data-types-intro.html#lists">列表（lists）</a>， <a href="http://redis.cn/topics/data-types-intro.html#sets">集合（sets）</a>， <a href="http://redis.cn/topics/data-types-intro.html#sorted-sets">有序集合（sorted sets）</a> 与范围查询， <a href="http://redis.cn/topics/data-types-intro.html#bitmaps">bitmaps</a>， <a href="http://redis.cn/topics/data-types-intro.html#hyperloglogs">hyperloglogs</a> 和 <a href="http://redis.cn/commands/geoadd.html">地理空间（geospatial）</a> 索引半径查询。 Redis 内置了 <a href="http://redis.cn/topics/replication.html">复制（replication）</a>，<a href="http://redis.cn/commands/eval.html">LUA脚本（Lua scripting）</a>， <a href="http://redis.cn/topics/lru-cache.html">LRU驱动事件（LRU eviction）</a>，<a href="http://redis.cn/topics/transactions.html">事务（transactions）</a> 和不同级别的 <a href="http://redis.cn/topics/persistence.html">磁盘持久化（persistence）</a>， 并通过 <a href="http://redis.cn/topics/sentinel.html">Redis哨兵（Sentinel）</a>和自动 <a href="http://redis.cn/topics/cluster-tutorial.html">分区（Cluster）</a>提供高可用性（high availability）^(来自官方文档)^。</p>
<h3 id="2-2-🌠特性"><a href="#2-2-🌠特性" class="headerlink" title="2.2 🌠特性"></a>2.2 🌠特性</h3><ul>
<li><input checked="" disabled="" type="checkbox"> 性能优秀，数据在内存中，读写速度非常快，支持10w并发QPS</li>
<li><input checked="" disabled="" type="checkbox"> 单进程单线程，是线程安全的，采用IO多路复用机制</li>
<li><input checked="" disabled="" type="checkbox"> 丰富的数据类型，支持String、Hash、List、Set、Sorted Set</li>
<li><input checked="" disabled="" type="checkbox"> 支持数据持久化，可以将内存中数据保存在磁盘中，重启时加载</li>
<li><input checked="" disabled="" type="checkbox"> 主从复制，哨兵模式，高可用</li>
<li><input checked="" disabled="" type="checkbox"> 可以用作分布式锁</li>
<li><input checked="" disabled="" type="checkbox"> 可以进行地图信息分析</li>
<li><input checked="" disabled="" type="checkbox"> 可以作为消息中间件使用，支持发布订阅</li>
<li><input checked="" disabled="" type="checkbox"> 可以作为计数器使用，记录网页或者小程序等的浏览量</li>
<li><input checked="" disabled="" type="checkbox"> ······</li>
</ul>
<h3 id="2-3-🔰拓展"><a href="#2-3-🔰拓展" class="headerlink" title="2.3 🔰拓展"></a>2.3 🔰拓展</h3><blockquote>
<p>Redis 🆚 Memcache</p>
</blockquote>
<ol>
<li>存储方式上：memcache会把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小。redis有部分数据存在硬盘上，这样能保证数据的持久性</li>
<li>数据支持类型上：memcache对数据类型的支持简单，只支持简单的key-value，而redis支持五大数据类型和三大特殊数据类型</li>
<li>底层模型上：它们之间底层实现方式以及与客户端之间的应用协议不一样。redis直接构建了VM机制，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求</li>
<li>value的大小：redis可以达到1GB，而memcache只有1MB</li>
</ol>
<h2 id="3-📩Redis安装"><a href="#3-📩Redis安装" class="headerlink" title="3. 📩Redis安装"></a>3. 📩Redis安装</h2><blockquote>
<p>⚠️ notice</p>
</blockquote>
<ul>
<li><p>Github上redis的windows版本已经很久不再更新，对于最新的3.2.100版本，个人使用过，redis-cli.exe使用起来偶尔会出问题，命令写出来那一行会变成黑色，兼容性不太好，由于3.0不支持GEO等操作，我还是选择使用3.2.100版本。</p>
</li>
<li><p>Redis这种高性能服务器本身与CentOS的体质就很般配，个人推荐在Linux上安装，尤其是后期搭建redis集群环境。CentOS7本身自带的yum镜像中带的gcc安装包只有4.8.5版本，不支持高版本redis的编译，所以推荐下载5.0.8版本。</p>
</li>
<li><p>以上，不管是Windows还是Linux，都推荐使用Xshell开启Redis服务器和客户端。</p>
</li>
</ul>
<blockquote>
<p>🔽Xshell</p>
</blockquote>
<ul>
<li>网盘链接：<a href="https://pan.baidu.com/s/1qWtPzJgF3N24yIlUfTtq9w">https://pan.baidu.com/s/1qWtPzJgF3N24yIlUfTtq9w</a></li>
<li>提取码：kkkk</li>
</ul>
<h3 id="3-1-💻Windows10-安装"><a href="#3-1-💻Windows10-安装" class="headerlink" title="3.1 💻Windows10 安装"></a>3.1 💻Windows10 安装</h3><blockquote>
<p>下载: <a href="https://github.com/MSOpenTech/redis/releases">redis</a></p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201008213905860.png" class="" title="image-20201008213905860">

<blockquote>
<p>解压</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201008214011620.png" class="" title="image-20201008214011620">

<blockquote>
<p>启动</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201008214053586.png" class="" title="image-20201008214053586">



<h3 id="3-2-💻CentOS7-安装"><a href="#3-2-💻CentOS7-安装" class="headerlink" title="3.2 💻CentOS7 安装"></a>3.2 💻CentOS7 安装</h3><blockquote>
<p>安装gcc: <code>yum install gcc-c++ tcl</code></p>
<p>注意安装 version&gt;6 的redis需要 version&gt;5 的gcc: </p>
<p><code>sudo yum install centos-release-scl</code><br><code>sudo yum install devtoolset-7-gcc*</code><br><code>scl enable devtoolset-7 bash</code></p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201008224757570.png" class="" title="image-20201008224757570">

<blockquote>
<p>下载压缩包: <code>wget http://download.redis.io/releases/redis-5.0.8.tar.gz</code></p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201008223909191.png" class="" title="image-20201008223909191">

<blockquote>
<p>解压压缩包: <code>tar xzf redis-5.0.8.tar.gz</code></p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201008224102401.png" class="" title="image-20201008224102401">

<blockquote>
<p>跳转目录: <code>cd redis-5.0.8</code>    </p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201008215145306.png" class="" title="image-20201008215145306">

<blockquote>
<p>编译安装: <code>make</code></p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201008215335902.png" class="" title="image-20201008215335902">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201008224230979.png" class="" title="image-20201008224230979">

<blockquote>
<p>再次编译: <code>make</code></p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201008224450296.png" class="" title="image-20201008224450296">

<blockquote>
<p>最后安装: </p>
<p><code>cd src/</code></p>
<p><code>make install</code></p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201008230537427.png" class="" title="image-20201008230537427">

<blockquote>
<p>查看结果: <code>ll /usr/local/bin/</code></p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201008230723447.png" class="" title="image-20201008230723447">

<blockquote>
<p>更改配置:</p>
<p>新建配置文件目录: <code>mkdir kconfig</code>   </p>
<p>将原生Redis配置文件复制进来: <code>cp /home/parak/Redis/redis-5.0.8/redis.conf </code></p>
<p>修改配置文件: <code>gedit redis.conf</code> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">daemonize yes</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>测试启动: <code>redis-server kconfig/redis.conf</code></p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201009105138976.png" class="" title="image-20201009105138976">

<blockquote>
<p>查看redis进程: <code>ps -ef | grep redis</code></p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201009105424943.png" class="" title="image-20201009105424943">

<blockquote>
<p>关闭redis服务: <code>shutdown</code></p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201009105552015.png" class="" title="image-20201009105552015">



<h2 id="4-📩Redis配置"><a href="#4-📩Redis配置" class="headerlink" title="4. 📩Redis配置"></a>4. 📩Redis配置</h2><h3 id="4-1-🚩命令"><a href="#4-1-🚩命令" class="headerlink" title="4.1 🚩命令"></a>4.1 🚩命令</h3><blockquote>
<p>👀查看所有配置项</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">config get *</span><br></pre></td></tr></table></figure>

<blockquote>
<p>✏命令行编辑配置</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">config set &lt;option&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>



<h3 id="4-2-📝redis-conf-配置项说明"><a href="#4-2-📝redis-conf-配置项说明" class="headerlink" title="4.2 📝redis.conf 配置项说明"></a>4.2 📝redis.conf 配置项说明</h3><table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">配置项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left"><code>daemonize no</code></td>
<td align="left">Redis 默认不是以守护进程的方式运行，可以通过该配置项修改，使用 yes 启用守护进程（Windows 不支持守护线程的配置为 no ）</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left"><code>pidfile /var/run/redis.pid</code></td>
<td align="left">当 Redis 以守护进程方式运行时，Redis 默认会把 pid 写入 /var/run/redis.pid 文件，可以通过 pidfile 指定</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left"><code>port 6379</code></td>
<td align="left">指定 Redis 监听端口，默认端口为 6379</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left"><code>bind 127.0.0.1</code></td>
<td align="left">绑定的主机地址</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left"><code>timeout 300</code></td>
<td align="left">当客户端闲置多长秒后关闭连接，如果指定为 0 ，表示关闭该功能</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left"><code>loglevel notice</code></td>
<td align="left">指定日志记录级别，Redis 总共支持四个级别：debug、verbose、notice、warning，默认为 notice</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left"><code>logfile stdout</code></td>
<td align="left">日志记录方式，默认为标准输出，如果配置 Redis 为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给 /dev/null</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left"><code>databases 16</code></td>
<td align="left">设置数据库的数量，默认数据库为0，可以使用SELECT 命令在连接上指定数据库id</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left"><code>save  </code>Redis 默认配置文件中提供了三个条件：<strong>save 900 1</strong>、<strong>save 300 10</strong> 、<strong>save 60 10000</strong>分别表示 900 秒（15 分钟）内有 1 个更改，300 秒（5 分钟）内有 10 个更改以及 60 秒内有 10000 个更改。</td>
<td align="left">指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</td>
</tr>
<tr>
<td align="left">10</td>
<td align="left"><code>rdbcompression yes</code></td>
<td align="left">指定存储至本地数据库时是否压缩数据，默认为 yes，Redis 采用 LZF 压缩，如果为了节省 CPU 时间，可以关闭该选项，但会导致数据库文件变的巨大</td>
</tr>
<tr>
<td align="left">11</td>
<td align="left"><code>dbfilename dump.rdb</code></td>
<td align="left">指定本地数据库文件名，默认值为 dump.rdb</td>
</tr>
<tr>
<td align="left">12</td>
<td align="left"><code>dir ./</code></td>
<td align="left">指定本地数据库存放目录</td>
</tr>
<tr>
<td align="left">13</td>
<td align="left"><code>slaveof  </code></td>
<td align="left">设置当本机为 slave 服务时，设置 master 服务的 IP 地址及端口，在 Redis 启动时，它会自动从 master 进行数据同步</td>
</tr>
<tr>
<td align="left">14</td>
<td align="left"><code>masterauth </code></td>
<td align="left">当 master 服务设置了密码保护时，slav 服务连接 master 的密码</td>
</tr>
<tr>
<td align="left">15</td>
<td align="left"><code>requirepass foobared</code></td>
<td align="left">设置 Redis 连接密码，如果配置了连接密码，客户端在连接 Redis 时需要通过 AUTH <password> 命令提供密码，默认关闭</td>
</tr>
<tr>
<td align="left">16</td>
<td align="left"><code> maxclients 128</code></td>
<td align="left">设置同一时间最大客户端连接数，默认无限制，Redis 可以同时打开的客户端连接数为 Redis 进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis 会关闭新的连接并向客户端返回 max number of clients reached 错误信息</td>
</tr>
<tr>
<td align="left">17</td>
<td align="left"><code>maxmemory </code></td>
<td align="left">指定 Redis 最大内存限制，Redis 在启动时会把数据加载到内存中，达到最大内存后，Redis 会先尝试清除已到期或即将到期的 Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis 新的 vm 机制，会把 Key 存放内存，Value 会存放在 swap 区</td>
</tr>
<tr>
<td align="left">18</td>
<td align="left"><code>appendonly no</code></td>
<td align="left">指定是否在每次更新操作后进行日志记录，Redis 在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis 本身同步数据文件是按上面 save 条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为 no</td>
</tr>
<tr>
<td align="left">19</td>
<td align="left"><code>appendfilename appendonly.aof</code></td>
<td align="left">指定更新日志文件名，默认为 appendonly.aof</td>
</tr>
<tr>
<td align="left">20</td>
<td align="left"><code>appendfsync everysec</code></td>
<td align="left">指定更新日志条件，共有 3 个可选值：<strong>no</strong>：表示等操作系统进行数据缓存同步到磁盘（快）<strong>always</strong>：表示每次更新操作后手动调用 fsync() 将数据写到磁盘（慢，安全）<strong>everysec</strong>：表示每秒同步一次（折中，默认值）</td>
</tr>
<tr>
<td align="left">21</td>
<td align="left"><code>vm-enabled no</code></td>
<td align="left">指定是否启用虚拟内存机制，默认值为 no，简单的介绍一下，VM 机制将数据分页存放，由 Redis 将访问量较少的页即冷数据 swap 到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析 Redis 的 VM 机制）</td>
</tr>
<tr>
<td align="left">22</td>
<td align="left"><code>vm-swap-file /tmp/redis.swap</code></td>
<td align="left">虚拟内存文件路径，默认值为 /tmp/redis.swap，不可多个 Redis 实例共享</td>
</tr>
<tr>
<td align="left">23</td>
<td align="left"><code>vm-max-memory 0</code></td>
<td align="left">将所有大于 vm-max-memory 的数据存入虚拟内存，无论 vm-max-memory 设置多小，所有索引数据都是内存存储的(Redis 的索引数据 就是 keys)，也就是说，当 vm-max-memory 设置为 0 的时候，其实是所有 value 都存在于磁盘。默认值为 0</td>
</tr>
<tr>
<td align="left">24</td>
<td align="left"><code>vm-page-size 32</code></td>
<td align="left">Redis swap 文件分成了很多的 page，一个对象可以保存在多个 page 上面，但一个 page 上不能被多个对象共享，vm-page-size 是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page 大小最好设置为 32 或者 64bytes；如果存储很大大对象，则可以使用更大的 page，如果不确定，就使用默认值</td>
</tr>
<tr>
<td align="left">25</td>
<td align="left"><code>vm-pages 134217728</code></td>
<td align="left">设置 swap 文件中的 page 数量，由于页表（一种表示页面空闲或使用的 bitmap）是在放在内存中的，，在磁盘上每 8 个 pages 将消耗 1byte 的内存。</td>
</tr>
<tr>
<td align="left">26</td>
<td align="left"><code>vm-max-threads 4</code></td>
<td align="left">设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4</td>
</tr>
<tr>
<td align="left">27</td>
<td align="left"><code>glueoutputbuf yes</code></td>
<td align="left">设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启</td>
</tr>
<tr>
<td align="left">28</td>
<td align="left"><code>hash-max-zipmap-entries 64 hash-max-zipmap-value 512</code></td>
<td align="left">指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</td>
</tr>
<tr>
<td align="left">29</td>
<td align="left"><code>activerehashing yes</code></td>
<td align="left">指定是否激活重置哈希，默认为开启（后面在介绍 Redis 的哈希算法时具体介绍）</td>
</tr>
<tr>
<td align="left">30</td>
<td align="left"><code>include /path/to/local.conf</code></td>
<td align="left">指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</td>
</tr>
</tbody></table>
<h3 id="4-3-🔍-重点详解"><a href="#4-3-🔍-重点详解" class="headerlink" title="4.3 🔍 重点详解"></a>4.3 🔍 重点详解</h3><ol>
<li><p>UNIT: redis对大小写不敏感</p>
</li>
<li><p>INCLUEDS[模块]: 可以包含多个配置文件</p>
</li>
<li><p>MOUDLES[模块]: 启动时加载模块</p>
</li>
<li><p>NETWORK[网络]: </p>
<ul>
<li>bind: 绑定IP</li>
<li>protected-mode: 保护模式</li>
<li>post: 端口设置</li>
</ul>
</li>
<li><p>GENERAL[通用]: </p>
<ul>
<li>daemonize: 是否以守护进程的方式运行[^1]</li>
<li>pidfile /var/run/redis_6379.pid: 如果以后台的方式运行，就需要指定一个pid的配置文件</li>
<li>loglevel: 日志级别</li>
<li>logfile: 日志的文件位置</li>
<li>database: 数据库的数量</li>
<li>always-show-logo: 是否开启服务的时候显示logo</li>
</ul>
</li>
<li><p>SNAPSHOTTING[快照]:</p>
<ul>
<li>save 900 1: 如果在900s内，至少有1个key进行了修改，就进行持久化操作</li>
<li>save 300 10: 如果在300s内，至少有10个key进行了修改，就进行持久化操作</li>
<li>save 60 10000: 如果在60s内，至少有10000个key进行了修改，就进行持久化操作</li>
<li>stop-writes-on-bgsave-error: 持久化出现错误，是否让redis继续工作</li>
<li>rdbcompression: 是否压缩rdb文件，需要消耗一些CPU资源</li>
<li>rdbchecksum: 保存rdb的文件的时候，是否进行错误校验</li>
<li>dir: 文件保存的目录</li>
</ul>
</li>
<li><p>REPLICATION[复制]:</p>
<ul>
<li>见主从复制</li>
</ul>
</li>
<li><p>SECURITY[安全]:</p>
<ul>
<li><p>requirepass: 设置密码</p>
</li>
<li><pre><code class="shell"># 设置密码
&gt; config set requirepass &lt;password&gt;
# 登录输入
&gt; auth &lt;password&gt;
# 获取密码
&gt; config get requirepass
# 取消设置
&gt; config set requirepass &#39;&#39;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">9. CLIENTS[客户端]:</span><br><span class="line"></span><br><span class="line">   - maxclients: 设置可连接redis的最大客户端数量</span><br><span class="line">   - maxmemory: 配置redis的最大内存容量</span><br><span class="line">   - maxmemory-policy: 内存到达上限的处理策略</span><br><span class="line">     - volatile-lru：只对设置了过期时间的key进行LRU（默认值） </span><br><span class="line">     - allkeys-lru ： 删除lru算法的key  </span><br><span class="line">     - volatile-random：随机删除即将过期key  </span><br><span class="line">     - allkeys-random：随机删除  </span><br><span class="line">     - volatile-ttl ： 删除即将过期的  </span><br><span class="line">     - noeviction ： 永不过期，返回错误</span><br><span class="line"></span><br><span class="line">10. APPEND ONLY MODE[AOF]:</span><br><span class="line"></span><br><span class="line">    - appendonly: 默认不开启AOF模式</span><br><span class="line">    - appendfilename: AOF持久化的文件名称</span><br><span class="line">    - appendfsync always: 每次修改都会同步，消耗性能</span><br><span class="line">    - appendfsync everysec: 每秒执行一次同步，可能会丢失这1s的数据</span><br><span class="line">    - appendfsync no: 不执行同步，操作系统自己同步数据，速度最快</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[^1]: 守护进程</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 5. 📩Redis测试</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 5.1🔬测试方法</span><br><span class="line"></span><br><span class="line">&gt; redis的性能测试命令</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;shell</span><br><span class="line">redis-benchmark [option] [option value]</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ol>
<p>🔔<strong>注意: 这个命令是在redis目录下执行，而非redis客户端的内部命令</strong></p>
<h3 id="5-2-📝redis性能测试工具可选参数"><a href="#5-2-📝redis性能测试工具可选参数" class="headerlink" title="5.2 📝redis性能测试工具可选参数"></a>5.2 📝redis性能测试工具可选参数</h3><table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">选项</th>
<th align="left">描述</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left"><strong>-h</strong></td>
<td align="left">指定服务器主机名</td>
<td align="left">127.0.0.1</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left"><strong>-p</strong></td>
<td align="left">指定服务器端口</td>
<td align="left">6379</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left"><strong>-s</strong></td>
<td align="left">指定服务器 socket</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">4</td>
<td align="left"><strong>-c</strong></td>
<td align="left">指定并发连接数</td>
<td align="left">50</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left"><strong>-n</strong></td>
<td align="left">指定请求数</td>
<td align="left">10000</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left"><strong>-d</strong></td>
<td align="left">以字节的形式指定 SET/GET 值的数据大小</td>
<td align="left">3</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left"><strong>-k</strong></td>
<td align="left">1=keep alive 0=reconnect</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left"><strong>-r</strong></td>
<td align="left">SET/GET/INCR 使用随机 key, SADD 使用随机值</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">9</td>
<td align="left"><strong>-P</strong></td>
<td align="left">通过管道传输 <numreq> 请求</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">10</td>
<td align="left"><strong>-q</strong></td>
<td align="left">强制退出 redis。仅显示 query/sec 值</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">11</td>
<td align="left"><strong>–csv</strong></td>
<td align="left">以 CSV 格式输出</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">12</td>
<td align="left"><strong>-l</strong></td>
<td align="left">生成循环，永久执行测试</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">13</td>
<td align="left"><strong>-t</strong></td>
<td align="left">仅运行以逗号分隔的测试命令列表。</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">14</td>
<td align="left"><strong>-I</strong></td>
<td align="left">Idle 模式。仅打开 N 个 idle 连接并等待。</td>
<td align="left"></td>
</tr>
</tbody></table>
<h3 id="5-3-📊测试结果分析"><a href="#5-3-📊测试结果分析" class="headerlink" title="5.3 📊测试结果分析"></a>5.3 📊测试结果分析</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-benchmark -h 127.0.0.1 -p 6379 -c 100 -n 100000 </span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201009193727448.png" class="" title="image-20201009193727448">

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-benchmark -h 127.0.0.1 -p 6379 -c 1 -n 100000 -q</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201009194004617.png" class="" title="image-20201009194004617">

<p>这个是对所有操作测试性能，每秒处理的请求数量。</p>
<h2 id="6-📩Redis基础"><a href="#6-📩Redis基础" class="headerlink" title="6. 📩Redis基础"></a>6. 📩Redis基础</h2><h3 id="6-1-💠Redis数据库"><a href="#6-1-💠Redis数据库" class="headerlink" title="6.1 💠Redis数据库"></a>6.1 💠Redis数据库</h3><p><strong>redis有16个数据库，默认使用第0个</strong></p>
<blockquote>
<p>测试连接</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping</span><br></pre></td></tr></table></figure>

<blockquote>
<p>关闭连接</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">quit</span><br></pre></td></tr></table></figure>

<blockquote>
<p>返回消息</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &lt;str&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>切换数据库</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select &lt;num of database&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取当前数据库的大小</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dbsize</span><br></pre></td></tr></table></figure>

<blockquote>
<p>清空当前数据库</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flushdb</span><br></pre></td></tr></table></figure>

<blockquote>
<p>清空所有数据库</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flushall</span><br></pre></td></tr></table></figure>

<blockquote>
<p>交换数据库</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">swap &lt;n1&gt; &lt;n2&gt;</span><br></pre></td></tr></table></figure>



<h3 id="6-2-🌏6379的故事"><a href="#6-2-🌏6379的故事" class="headerlink" title="6.2 🌏6379的故事"></a>6.2 🌏6379的故事</h3><p><strong>redis默认端口号为6379</strong></p>
<blockquote>
<p>作者在自己的一篇博文中解释了为什么选用 6379 作为默认端口，因为 6379 在手机按键上 MERZ 对应的号码，而 MERZ 取自意大利歌女 Alessia Merz 的名字。MERZ长期以来被Redis作者antirez及其朋友当作愚蠢的代名词，后来作者在开发Redis就选用了这个端口。</p>
</blockquote>
<h3 id="6-3-⚡Redis蜜汁速度"><a href="#6-3-⚡Redis蜜汁速度" class="headerlink" title="6.3 ⚡Redis蜜汁速度"></a>6.3 ⚡Redis蜜汁速度</h3><p><strong>redis是单线程的。</strong></p>
<p>redis基于内存操作，CPU不是redis的性能瓶颈，Redis的瓶颈很可能是机器内存或者网路带宽。</p>
<p>既然单线程容易实现，而且CPU不会成为瓶颈，那就顺理成章的采用单线程实现。</p>
<blockquote>
<p>💉理解Redis蜜汁速度需要跨过两个误区</p>
</blockquote>
<ul>
<li><p>误区1：高性能的服务器一定是多线程的？</p>
</li>
<li><p>误区2：多线程的效率一定比单线程高？</p>
</li>
</ul>
<blockquote>
<p>💊Redis采用单线程依然快的原因</p>
</blockquote>
<ol>
<li>Redis完全基于内存，读写全部在一个CPU上，绝大部分请求是纯粹的内存操作，非常迅速，数据存在于内存中，类似于HashMap，HashMap的优势就是查询和操作的时间复杂度时O(1)</li>
<li>数据结构简单，对数据操作也简单</li>
<li>采用单线程，避免了不必要的上下文切换和竞争条件，不存在多线程导致的CPU切换，不用取考虑各种锁的问题，不存在加锁放锁操作，没有死锁问题导致的性能消耗</li>
<li>使用多路复用IO模型，非阻塞IO</li>
</ol>
<h2 id="7-📩Redis数据类型"><a href="#7-📩Redis数据类型" class="headerlink" title="7. 📩Redis数据类型"></a>7. 📩Redis数据类型</h2><blockquote>
<p>🌞说明</p>
</blockquote>
<p>所有命令可查看中文官方文档: <a href="http://redis.cn/commands.html#">http://redis.cn/commands.html#</a></p>
<h3 id="7-1-🏆五大数据类型"><a href="#7-1-🏆五大数据类型" class="headerlink" title="7.1 🏆五大数据类型"></a>7.1 🏆五大数据类型</h3><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">简介</th>
<th align="center">特性</th>
<th align="center">场景</th>
</tr>
</thead>
<tbody><tr>
<td align="center">String(字符串)</td>
<td align="center">二进制安全</td>
<td align="center">可以包含任何数据，比如jpg图片或者序列化对象</td>
<td align="center">—</td>
</tr>
<tr>
<td align="center">Hash(字典)</td>
<td align="center">键值对集合</td>
<td align="center">适合存储对象，并且可以像数据库中的update一个属性一样值修改某一项属性值</td>
<td align="center">存储、读取、修改用户属性</td>
</tr>
<tr>
<td align="center">List(列表)</td>
<td align="center">双向链表</td>
<td align="center">增删快，提供了操作某一元素的api</td>
<td align="center">最新消息排行；消息队列</td>
</tr>
<tr>
<td align="center">Set(集合)</td>
<td align="center">hash表实现，元素不重复</td>
<td align="center">增删查快，提供了求交集、并集和差集的操作</td>
<td align="center">共同好友:  利用唯一性，统计网站UV</td>
</tr>
<tr>
<td align="center">Sorted Set(有序集合)</td>
<td align="center">将set中的元素增加一个权重score，元素按照score有序排列</td>
<td align="center">数据插入集合时，已经进行了天然排序</td>
<td align="center">排行榜；带权重的消息队列</td>
</tr>
</tbody></table>
<p><strong>🎲Key</strong></p>
<blockquote>
<p>查看所有的key</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keys *</span><br></pre></td></tr></table></figure>

<blockquote>
<p>创建键值对</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">get &lt;key&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>移除键值对</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">move &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>判断key是否存在</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exists &lt;key&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看key的类型</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">type &lt;key&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>设置key的过期时间/秒</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">expire &lt;key&gt; &lt;seconds&gt; </span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的有效时间/秒</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ttl &lt;key&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的有效时间/毫秒</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pttl &lt;key&gt;</span><br></pre></td></tr></table></figure>



<h4 id="7-1-1-⚽String"><a href="#7-1-1-⚽String" class="headerlink" title="7.1.1 ⚽String"></a>7.1.1 ⚽String</h4><blockquote>
<p>向key上追加字符串</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">append &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的长度</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">strlen &lt;key&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Integer操作</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 加1</span></span><br><span class="line">incr &lt;key&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 加n</span></span><br><span class="line">incrby &lt;key&gt; n</span><br><span class="line"><span class="meta">#</span><span class="bash"> 减1</span></span><br><span class="line">decr &lt;key&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 减n</span></span><br><span class="line">decrby &lt;key&gt; n</span><br></pre></td></tr></table></figure>

<blockquote>
<p>subString(start, end)操作</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 截取整个字符串</span></span><br><span class="line">getrange &lt;key&gt; 0 -1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 截取部分字符串</span></span><br><span class="line">getrange &lt;key&gt; start end</span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">set</span> s <span class="string">&quot;Khighness&quot;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> getrange s 0 -1 <span class="comment"># &quot;Khighness&quot;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> getrange s 1 4  <span class="comment"># &quot;high&quot;</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>replace(start, end)操作</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 把字符串从n位开始之后的字符替换为新的字符串newStr</span></span><br><span class="line">setrange &lt;key&gt; n newStr</span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">set</span> s <span class="string">&quot;Khighness&quot;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> setrange s 0 X </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> get s <span class="comment"># &quot;Xhighness&quot;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> setrange s 5 <span class="string">&quot;XXXXX&quot;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> get s <span class="comment"># &quot;XhighXXXXX&quot;</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>setex (set with expire) 创建键值对的同时设置过期时间</p>
<p>setnx (set if not exist)  如果key不存在则创建键值对，防止覆盖原有键值对 (分布式锁中经常使用)</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置键值对，设置过期时间</span></span><br><span class="line">setex &lt;key&gt; &lt;seconds&gt; &lt;value&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> key不存在，则创建键值对</span></span><br><span class="line">setnx &lt;key&gt; &lt;value&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line">127.0.0.1:6379&gt; setex k1 10 parak</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) -2</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">(nil)</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; setnx k2 parak</span><br><span class="line">(integer) 1 # 1代表设置成功</span><br><span class="line">127.0.0.1:6379&gt; setnx k2 flowerk</span><br><span class="line">(integer) 0 # 0代表设置失败</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">&quot;parak&quot;     </span><br><span class="line">127.0.0.1:6379&gt; setnx k2 FlowerK</span><br><span class="line">(integer) 0 </span><br><span class="line">127.0.0.1:6379&gt; set k2 FlowerK</span><br><span class="line">OK          # 强制设置value</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">&quot;FlowerK&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>多个键值对操作</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 一次性创建多个键值对</span></span><br><span class="line">mset &lt;key&gt; &lt;value&gt; [key value ...]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取多个key的值</span></span><br><span class="line">meget &lt;key&gt; [key ...]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 不存在则创建多个键值对</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 原子性操作，只要其中有一个key已存在，就会全部创建失败</span></span><br><span class="line">msetnx &lt;key&gt; &lt;value&gt; [key value ...]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line">127.0.0.1:6379&gt; mset k1 v1 k2 v2 k3 v3</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget k1 k2 k3</span><br><span class="line">1) &quot;v1&quot;</span><br><span class="line">2) &quot;v2&quot;</span><br><span class="line">3) &quot;v3&quot;</span><br><span class="line">127.0.0.1:6379&gt; msetnx k2 v2 k4 v4 k5 v5</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;k2&quot;</span><br><span class="line">2) &quot;k3&quot;</span><br><span class="line">3) &quot;k1&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 巧妙设计key  object:&#123;id&#125;:&#123;field&#125;</span></span><br><span class="line">127.0.0.1:6379&gt; mset user:1:name Khighness user:1:age 18</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget user:1:name user:1:age</span><br><span class="line">1) &quot;Khighness&quot;</span><br><span class="line">2) &quot;18&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>组合操作</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先获取值，再设置新的值</span></span><br><span class="line">getset k v</span><br></pre></td></tr></table></figure>



<h4 id="7-1-2-⚾List"><a href="#7-1-2-⚾List" class="headerlink" title="7.1.2 ⚾List"></a>7.1.2 ⚾List</h4><p>redis里面，list可以当成栈、队列、队列。</p>
<blockquote>
<p>向list的头部添加值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lpush &lt;key&gt; value [value ...]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>向list的尾部添加值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpush &lt;key&gt; value [value ...]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>判断list是否存在</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exists &lt;key&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>移除列表的第一个元素</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lpop &lt;key&gt; </span><br></pre></td></tr></table></figure>

<blockquote>
<p>移除列表的最后一个元素</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpop &lt;key&gt; </span><br></pre></td></tr></table></figure>

<blockquote>
<p>移除指定的值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lrem &lt;key&gt; &lt;count&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>更新list</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 根据index更新值</span></span><br><span class="line">lset &lt;key&gt; &lt;index&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>根据下标获取值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lindex &lt;key&gt; &lt;index&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取list的长度</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">llen &lt;key&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取list指定范围的值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取整个list的值</span></span><br><span class="line">lrange &lt;key&gt; 0 -1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取指定范围的值</span></span><br><span class="line">lrange &lt;key&gt; start end</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line">127.0.0.1:6379&gt; lpush list1 1 2 3 4 5 </span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="line">1) &quot;5&quot;</span><br><span class="line">2) &quot;4&quot;</span><br><span class="line">3) &quot;3&quot;</span><br><span class="line">4) &quot;2&quot;</span><br><span class="line">5) &quot;1&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 1</span><br><span class="line">1) &quot;5&quot;</span><br><span class="line">2) &quot;4&quot;</span><br><span class="line">127.0.0.1:6379&gt; rpush list2 1 2 3 4 5</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; lrange list2 0 -1</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;3&quot;</span><br><span class="line">4) &quot;4&quot;</span><br><span class="line">5) &quot;5&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange list2 0 1</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;2&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>截取list中指定范围的值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 保留下标[start, end]的值</span></span><br><span class="line">ltrim &lt;key&gt; start end</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line">127.0.0.1:6379&gt; rpush list parak1 parak2 parak3 parak4 parak5</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; ltrim list 0 2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;parak1&quot;</span><br><span class="line">2) &quot;parak2&quot;</span><br><span class="line">3) &quot;parak3&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>组合操作</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 移除<span class="built_in">source</span>的尾部的值插入到destination的头部</span></span><br><span class="line">rpoplpush &lt;source&gt; &lt;destination&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line">127.0.0.1:6379&gt; rpush list 1 2 3 4 5</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; rpoplpush list newlist</span><br><span class="line">&quot;5&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange newlist 0 -1</span><br><span class="line">1) &quot;5&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在list中插入值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在list中的某个值之前插入</span></span><br><span class="line">linsert &lt;key&gt; before &lt;priot&gt; &lt;value&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在list中的某个值之后插入</span></span><br><span class="line">linsert &lt;key&gt; after &lt;priot&gt; &lt;value&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line">127.0.0.1:6379&gt; rpush list 1 2 3 4 5</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; linsert list before 3 6</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;6&quot;</span><br><span class="line">4) &quot;3&quot;</span><br><span class="line">5) &quot;4&quot;</span><br><span class="line">6) &quot;5&quot;</span><br><span class="line">127.0.0.1:6379&gt; linsert list after 5 7</span><br><span class="line">(integer) 7</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;6&quot;</span><br><span class="line">4) &quot;3&quot;</span><br><span class="line">5) &quot;4&quot;</span><br><span class="line">6) &quot;5&quot;</span><br><span class="line">7) &quot;7&quot;</span><br></pre></td></tr></table></figure>



<h4 id="7-1-3-🏀Set"><a href="#7-1-3-🏀Set" class="headerlink" title="7.1.3 🏀Set"></a>7.1.3 🏀Set</h4><p>set 无序不重复集合</p>
<ul>
<li>set通过哈希表实现，所有增删查的时间复杂度是O(1)</li>
</ul>
<blockquote>
<p>向set中国添加值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sadd &lt;key&gt; &lt;value&gt; [value ...]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看set中的所有值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">smembers &lt;key&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看set中是否包含值value</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sismember &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取set中的元素个数</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scard &lt;key&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>移除set中的值value</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">srem &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取set中的随机值(可以做抽奖功能)</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">srandmember &lt;key&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>随机移除set中的元素</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">spop &lt;key&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将一个set集合中指定的值移动到另一个set集合</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将<span class="built_in">source</span>中的value移动到destination</span></span><br><span class="line">smove &lt;source&gt; &lt;destination&gt; &lt;value&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line">127.0.0.1:6379&gt; sadd set k1 k2 k3 k4 k5 k6 k7</span><br><span class="line">(integer) 7</span><br><span class="line">127.0.0.1:6379&gt; sadd newset k1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; smove set newset k3</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers newset</span><br><span class="line">1) &quot;k3&quot;</span><br><span class="line">2) &quot;k1&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>集合运算</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 集合s1和s2的并集</span></span><br><span class="line">sunion &lt;s1&gt; &lt;s&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 集合s1和s2的交集 (实现共同好友、共同关注)</span></span><br><span class="line">sinter &lt;s1&gt; &lt;s2&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 集合s1中独有的元素</span></span><br><span class="line">sdiff &lt;s1&gt; &lt;s2&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line">127.0.0.1:6379&gt; sadd s1 k1 k2 k3 k4 k5 k6</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; sadd s2 k5 k6 k7 k8 k9 k10</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; sunion s1 s2</span><br><span class="line"> 1) &quot;k5&quot;</span><br><span class="line"> 2) &quot;k6&quot;</span><br><span class="line"> 3) &quot;k8&quot;</span><br><span class="line"> 4) &quot;k2&quot;</span><br><span class="line"> 5) &quot;k3&quot;</span><br><span class="line"> 6) &quot;k1&quot;</span><br><span class="line"> 7) &quot;k4&quot;</span><br><span class="line"> 8) &quot;k7&quot;</span><br><span class="line"> 9) &quot;k10&quot;</span><br><span class="line">10) &quot;k9&quot;</span><br><span class="line">127.0.0.1:6379&gt; sinter s1 s2</span><br><span class="line">1) &quot;k5&quot;</span><br><span class="line">2) &quot;k6&quot;</span><br><span class="line">127.0.0.1:6379&gt; sdiff s1 s2</span><br><span class="line">1) &quot;k2&quot;</span><br><span class="line">2) &quot;k1&quot;</span><br><span class="line">3) &quot;k3&quot;</span><br><span class="line">4) &quot;k4&quot;</span><br></pre></td></tr></table></figure>



<h4 id="7-1-4-🏈Hash"><a href="#7-1-4-🏈Hash" class="headerlink" title="7.1.4 🏈Hash"></a>7.1.4 🏈Hash</h4><p>相当于key-HashMap，value为一个map集合，更适合于对象的存储，多用于存储变更数据、</p>
<blockquote>
<p>设置key指定的哈希集中指定字段的值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hset &lt;key&gt; &lt;field&gt; &lt;value&gt; </span><br></pre></td></tr></table></figure>

<blockquote>
<p>key指定的哈希集中不存在指定字段时，设置字段的值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hsetnx &lt;key&gt; &lt;field&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>删除key指定的哈希集中指定字段</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdel &lt;key&gt; &lt;field&gt; [field ...]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>判断key指定哈希集中指定字段是否存在</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexists &lt;key&gt; &lt;field&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对key指定的哈希集中指定字段的值加上增量(Integer型，可正可负，字段不存在则在操作执行前把该字段的值设置为0)</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hincrby &lt;key&gt; &lt;field&gt; &lt;integer&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对key指定的哈希集中指定字段的值加上增量(float型，可正可负，字段不存在则在操作执行前把该字段的值设置为0)</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hincrbyfloat &lt;key&gt; &lt;field&gt; &lt;float&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key指定的哈希集中字段数量</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hlen &lt;key&gt; </span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key指定的哈希集中指定字段的值的字符串长度</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hstrlen hash &lt;key&gt; &lt;value&gt; </span><br></pre></td></tr></table></figure>

<blockquote>
<p>key指定的哈希集操作</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置key指定的哈希集中指定字段的值</span></span><br><span class="line">hmset &lt;key&gt; &lt;field&gt; &lt;value&gt; [field value ...]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取key指定的哈希集中指定字段所关联的值</span></span><br><span class="line">hmget &lt;key&gt; &lt;field&gt; [field ...]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取key指定的哈希集中所有字段的名字</span></span><br><span class="line">hkeys</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取key指定哈希集中所有字段的值</span></span><br><span class="line">hvals</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取key指定的哈希集中所有的字段和值</span></span><br><span class="line">hgetall</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line">127.0.0.1:6379&gt; hmset hash field1 hello field2 world</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hmget hash field1 field2</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;world&quot;</span><br><span class="line">127.0.0.1:6379&gt; hkeys hash</span><br><span class="line">1) &quot;field1&quot;</span><br><span class="line">2) &quot;field2&quot;</span><br><span class="line">127.0.0.1:6379&gt; hvals hash</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;world&quot;</span><br><span class="line">127.0.0.1:6379&gt; hgetall hash</span><br><span class="line">1) &quot;field1&quot;</span><br><span class="line">2) &quot;hello&quot;</span><br><span class="line">3) &quot;field2&quot;</span><br><span class="line">4) &quot;world&quot;</span><br></pre></td></tr></table></figure>



<h4 id="7-1-5-🏉Sorted-Set"><a href="#7-1-5-🏉Sorted-Set" class="headerlink" title="7.1.5 🏉Sorted Set"></a>7.1.5 🏉Sorted Set</h4><p>有序集合sorted set，集合中每个元素都会关联一个double类型的分数。</p>
<ul>
<li><p>redis通过分数对集合中的成员进行排序。</p>
</li>
<li><p>有序集合中成员是唯一的，分数可以重复。</p>
</li>
<li><p>集合是通过哈希表实现的，所以增删查的事件复杂度都是O(1)。</p>
</li>
<li><p>集合中最大的成员数量为2^32^-1(4294967295)， 每个集合可存储40多亿个成员。</p>
</li>
</ul>
<blockquote>
<p>向key的有序集合中添加序号为number的value</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zadd &lt;key&gt; &lt;number&gt; &lt;value&gt; [number value ...]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的有序集合中的所有值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrange &lt;key&gt; 0 -1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的有序集合中的成员数量</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zcard &lt;key&gt; </span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的有序集合中指定下标区间的成员</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrange &lt;key&gt; start end</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的有序集合中指定成员member的索引</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrank &lt;key&gt; member</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对key的有序集合中指定成员member的分数加上增量</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zincrby &lt;key&gt; &lt;Integer&gt; member</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的有序集合中指定成员member的分数值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zscore &lt;key&gt; member</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的有序集合中指定成员member的排名(从小到大)</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrank &lt;key&gt; member</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的有序集合中指定成员member的排名(从大到小)</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrevrank &lt;key&gt; member</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的有序集合中分数在指定区间[min,max]的成员数量</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zcount &lt;key&gt; min max</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过字典区间获取key的有序集合中的成员数量</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zlexcount &lt;key&gt; min max</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过字典区间获取key的有序集合中的成员</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrangebylex &lt;key&gt; min max [limit offset count]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的有序集合中分数在指定区间[min,max]的成员</p>
<blockquote>
<p>参数说明</p>
<ul>
<li>min max<ul>
<li>默认情况下为闭区间，即[min ,max]</li>
<li>也可以是使用开区间，即(min, max)，写法为<code> (min  (max</code></li>
</ul>
</li>
<li>withscores<ul>
<li>返回成员的同时会返回分数</li>
</ul>
</li>
<li>limit offset count<ul>
<li>offset：起始位置，count：从起始位置开始的记录数量</li>
<li>实现分页查询</li>
<li>参数: 页数pagenum，页面大小pagesize</li>
<li>那么实际的offset = (pagenum - 1) * pagesize，count = pagesize</li>
<li>即查询语句为<code>zrangebyscore salary min max withscores limit (pagenum - 1) * pagesize pagesize  </code></li>
</ul>
</li>
</ul>
</blockquote>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrangebyscore &lt;key&gt; min max [withscores] [limit offset count]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>例如</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd salary -10000 W -20000 F -30000 S</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; zadd salary 10000 K 20000 A 30000 G</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary -20000 20000</span><br><span class="line">1) &quot;F&quot;</span><br><span class="line">2) &quot;W&quot;</span><br><span class="line">3) &quot;K&quot;</span><br><span class="line">4) &quot;A&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary -inf inf </span><br><span class="line">1) &quot;S&quot;</span><br><span class="line">2) &quot;F&quot;</span><br><span class="line">3) &quot;W&quot;</span><br><span class="line">4) &quot;K&quot;</span><br><span class="line">5) &quot;A&quot;</span><br><span class="line">6) &quot;G&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary -inf inf withscores</span><br><span class="line"> 1) &quot;S&quot;</span><br><span class="line"> 2) &quot;-30000&quot;</span><br><span class="line"> 3) &quot;F&quot;</span><br><span class="line"> 4) &quot;-20000&quot;</span><br><span class="line"> 5) &quot;W&quot;</span><br><span class="line"> 6) &quot;-10000&quot;</span><br><span class="line"> 7) &quot;K&quot;</span><br><span class="line"> 8) &quot;10000&quot;</span><br><span class="line"> 9) &quot;A&quot;</span><br><span class="line">10) &quot;20000&quot;</span><br><span class="line">11) &quot;G&quot;</span><br><span class="line">12) &quot;30000&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary -inf inf withscores limit 4 2</span><br><span class="line">1) &quot;G&quot;</span><br><span class="line">2) &quot;30000&quot;</span><br><span class="line">3) &quot;K&quot;</span><br><span class="line">4) &quot;60000&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>删除key的有序集合中的一个或多个成员</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrem &lt;key&gt; member [member ...]</span><br></pre></td></tr></table></figure>



<h3 id="7-2-🌌三种特殊类型"><a href="#7-2-🌌三种特殊类型" class="headerlink" title="7.2 🌌三种特殊类型"></a>7.2 🌌三种特殊类型</h3><h4 id="7-2-1-🔮Geospatial"><a href="#7-2-1-🔮Geospatial" class="headerlink" title="7.2.1 🔮Geospatial"></a>7.2.1 🔮Geospatial</h4><p>Geospatial，地理空间，简称GEO，主要用于存储地理位置信息，并对存储的信息进行操作。</p>
<blockquote>
<p>操作方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">geoadd</td>
<td align="center">添加地理位置的坐标</td>
</tr>
<tr>
<td align="center">geopos</td>
<td align="center">获取地理位置的坐标</td>
</tr>
<tr>
<td align="center">geodist</td>
<td align="center">计算两个位置之间的距离</td>
</tr>
<tr>
<td align="center">georadius</td>
<td align="center">根据用户给定的经纬度坐标来获取指定范围内的地理位置集合</td>
</tr>
<tr>
<td align="center">georadiusbymember</td>
<td align="center">根据储存在位置集合里面的某个地点获取指定范围内的地理位置集合</td>
</tr>
<tr>
<td align="center">geohash</td>
<td align="center">返回一个或者多个位置对象的geohash值</td>
</tr>
</tbody></table>
<p>查询地理数据：<a href="http://www.jsons.cn/lngcode/">城市经纬度查询</a></p>
<blockquote>
<p>测试数据</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">地方</th>
<th align="center">经度</th>
<th align="center">纬度</th>
</tr>
</thead>
<tbody><tr>
<td align="center">黄冈市黄梅县</td>
<td align="center">115.94427</td>
<td align="center">30.07033</td>
</tr>
<tr>
<td align="center">武汉市武昌区</td>
<td align="center">114.31589</td>
<td align="center">30.55389</td>
</tr>
<tr>
<td align="center">北京市丰台区</td>
<td align="center">116.28625</td>
<td align="center">39.8585</td>
</tr>
<tr>
<td align="center">上海市黄浦区</td>
<td align="center">121.49295</td>
<td align="center">31.22337</td>
</tr>
<tr>
<td align="center">合肥市蜀山区</td>
<td align="center">117.26104</td>
<td align="center">31.85117</td>
</tr>
<tr>
<td align="center">深圳市南山区</td>
<td align="center">113.93029</td>
<td align="center">22.53291</td>
</tr>
<tr>
<td align="center">大连市中山区</td>
<td align="center">121.64465</td>
<td align="center">38.91859</td>
</tr>
<tr>
<td align="center">广州市天河区</td>
<td align="center">113.36112</td>
<td align="center">23.12467</td>
</tr>
</tbody></table>
<p>1️⃣<strong>geoadd</strong></p>
<blockquote>
<p>描述</p>
</blockquote>
<p>geoadd用于存储指定的地理位置空间，可以将一个或多个经度(longitude)、纬度(latitude)、位置名称(member)添加到指定的key中。</p>
<blockquote>
<p>语法</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">geoadd &lt;key&gt; longitude latitude member [longtitude latitude member ...]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>规则</p>
</blockquote>
<ul>
<li>两级无法直接添加</li>
<li>有效经度：-180 - 180</li>
<li>有效纬度：-85.05112878 - 85.05112878</li>
</ul>
<blockquote>
<p>实例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geoadd china:city 115.94427 30.07033 huanggang</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 114.31589 30.55389 wuhan</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 116.28625 39.8585 beijing</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 121.49295 31.22337 shanghai</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 117.26104 31.85117 hefei</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 113.93029 22.53291 shenzhen</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 121.64465 38.91859 dalian</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 113.36112 23.12467 guangzhou</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure>

<p>实际应用中，一般会把城市地理数据写在文件中，直接通过java程序一次性导入。</p>
<p>2️⃣<strong>geopos</strong></p>
<blockquote>
<p>描述</p>
</blockquote>
<p>geopos用于从给定的key里返回所有指定名称(member)的位置(经度和纬度)，不存在的返回nil。</p>
<blockquote>
<p>语法</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">geopos &lt;key&gt; member [member ...]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>实例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geopos china:city huanggang shenzhen shanghai </span><br><span class="line">1) 1) &quot;115.94427019357681274&quot;</span><br><span class="line">   2) &quot;30.07033115798519418&quot;</span><br><span class="line">2) 1) &quot;113.93029063940048218&quot;</span><br><span class="line">   2) &quot;22.53290942281488896&quot;</span><br><span class="line">3) 1) &quot;121.49295061826705933&quot;</span><br><span class="line">   2) &quot;31.22337074392616074&quot;</span><br></pre></td></tr></table></figure>



<p>3️⃣<strong>geodist</strong></p>
<blockquote>
<p>描述</p>
</blockquote>
<p>geodist用于计算两个给定位置之间的距离。</p>
<blockquote>
<p>语法</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">geodist &lt;key&gt; member1 member2 [m|km|ft|mi]</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>member1和member2为两个地理位置</li>
<li>m：米，默认位置</li>
<li>km：千米</li>
<li>mi：英里</li>
<li>ft：英尺</li>
</ul>
<blockquote>
<p>实例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geodist china:city huanggang shenzhen</span><br><span class="line">&quot;862016.4959&quot;</span><br><span class="line">127.0.0.1:6379&gt; geodist china:city huanggang hefei km</span><br><span class="line">&quot;234.5308&quot;</span><br><span class="line">127.0.0.1:6379&gt; geodist china:city shanghai dalian mi</span><br><span class="line">&quot;531.9085&quot;</span><br></pre></td></tr></table></figure>



<p>4️⃣<strong>georadius</strong></p>
<blockquote>
<p>描述</p>
</blockquote>
<p>给定一个中心的地理位置(经度和纬度)，给定一个最大距离，返回给定的key包含的位置元素中，与中心的距离不超过最大距离的所有位置元素。</p>
<blockquote>
<p>语法</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">georadius &lt;key&gt; longitude latitude radius m|km|ft|mi [withcoord] [withdist] [withhash] [count] [asc|desc] [store key] [storedist key]</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li><p>longitude：给定中心的经度</p>
</li>
<li><p>latitude：给定中心的纬度</p>
</li>
<li><p>radius：给定的最大距离</p>
</li>
<li><p>withcoord：返回+(位置元素的经度和纬度)</p>
</li>
<li><p>withdist：返回+(位置元素与中心之间的距离)</p>
</li>
<li><p>withhash：以 52 位有符号整数的形式， 返回位置元素经过原始 geohash 编码的有序集合分值。 这个选项主要用于底层应用或者调试， 实际中的作用并不大。</p>
</li>
<li><p>count：限定返回的记录数量</p>
</li>
<li><p>asc：查找结果根据距离从小到大排序</p>
</li>
<li><p>desc：查找结果根据距离从大到小排序</p>
</li>
</ul>
<blockquote>
<p>实例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看距离广州不大于1000km的城市</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 113.36112 23.12467 1000 km asc</span><br><span class="line">1) &quot;guangzhou&quot;</span><br><span class="line">2) &quot;shenzhen&quot;</span><br><span class="line">3) &quot;huanggang&quot;</span><br><span class="line">4) &quot;wuhan&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看距离武汉不大于1000km的城市，从大到小，限制5个，并且显示距离和城市经纬度</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 114.31589 30.55389 1000 km withcoord withdist count 5 desc </span><br><span class="line">1) 1) &quot;shenzhen&quot;</span><br><span class="line">   2) &quot;892.9663&quot;</span><br><span class="line">   3) 1) &quot;113.93029063940048218&quot;</span><br><span class="line">      2) &quot;22.53290942281488896&quot;</span><br><span class="line">2) 1) &quot;guangzhou&quot;</span><br><span class="line">   2) &quot;831.7263&quot;</span><br><span class="line">   3) 1) &quot;113.36112052202224731&quot;</span><br><span class="line">      2) &quot;23.12467049411647935&quot;</span><br><span class="line">3) 1) &quot;shanghai&quot;</span><br><span class="line">   2) &quot;688.9652&quot;</span><br><span class="line">   3) 1) &quot;121.49295061826705933&quot;</span><br><span class="line">      2) &quot;31.22337074392616074&quot;</span><br><span class="line">4) 1) &quot;hefei&quot;</span><br><span class="line">   2) &quot;315.1437&quot;</span><br><span class="line">   3) 1) &quot;117.26104170083999634&quot;</span><br><span class="line">      2) &quot;31.85117048067123591&quot;</span><br><span class="line">5) 1) &quot;huanggang&quot;</span><br><span class="line">   2) &quot;165.3475&quot;</span><br><span class="line">   3) 1) &quot;115.94427019357681274&quot;</span><br><span class="line">      2) &quot;30.07033115798519418&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看距离北京不大于1500km的城市</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 116.28625 39.8585 1500 km withdist asc</span><br><span class="line">1) 1) &quot;beijing&quot;</span><br><span class="line">   2) &quot;0.0002&quot;</span><br><span class="line">2) 1) &quot;dalian&quot;</span><br><span class="line">   2) &quot;472.2545&quot;</span><br><span class="line">3) 1) &quot;hefei&quot;</span><br><span class="line">   2) &quot;894.9324&quot;</span><br><span class="line">4) 1) &quot;wuhan&quot;</span><br><span class="line">   2) &quot;1050.2106&quot;</span><br><span class="line">5) 1) &quot;shanghai&quot;</span><br><span class="line">   2) &quot;1069.3051&quot;</span><br><span class="line">6) 1) &quot;huanggang&quot;</span><br><span class="line">   2) &quot;1089.1453&quot;</span><br></pre></td></tr></table></figure>



<p>5️⃣<strong>georadiusbymember</strong></p>
<blockquote>
<p>描述</p>
</blockquote>
<p>georadiusbymember 和 georadius命令一样， 都可以找出位于指定范围内的元素， 但是 georadiusbymember 的中心点是只能从key中的位置元素选。</p>
<blockquote>
<p>语法</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">georadiusbymember &lt;key&gt; member radius m|km|ft|mi [withcoord] [withdist] [withhash] [count] [asc|desc] [store key] [storedist key]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>实例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看距离黄冈不大于900km的城市</span></span><br><span class="line">127.0.0.1:6379&gt; georadiusbymember china:city huanggang 900 km withdist asc</span><br><span class="line">1) 1) &quot;huanggang&quot;</span><br><span class="line">   2) &quot;0.0000&quot;</span><br><span class="line">2) 1) &quot;wuhan&quot;</span><br><span class="line">   2) &quot;165.3475&quot;</span><br><span class="line">3) 1) &quot;hefei&quot;</span><br><span class="line">   2) &quot;234.5308&quot;</span><br><span class="line">4) 1) &quot;shanghai&quot;</span><br><span class="line">   2) &quot;546.1566&quot;</span><br><span class="line">5) 1) &quot;guangzhou&quot;</span><br><span class="line">   2) &quot;814.0494&quot;</span><br><span class="line">6) 1) &quot;shenzhen&quot;</span><br><span class="line">   2) &quot;862.0165&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看距离深圳不大于2000km的城市</span></span><br><span class="line">127.0.0.1:6379&gt; georadiusbymember china:city shenzhen 2000 km withdist desc</span><br><span class="line">1) 1) &quot;dalian&quot;</span><br><span class="line">   2) &quot;1964.1097&quot;</span><br><span class="line">2) 1) &quot;beijing&quot;</span><br><span class="line">   2) &quot;1939.8454&quot;</span><br><span class="line">3) 1) &quot;shanghai&quot;</span><br><span class="line">   2) &quot;1222.7809&quot;</span><br><span class="line">4) 1) &quot;hefei&quot;</span><br><span class="line">   2) &quot;1087.3585&quot;</span><br><span class="line">5) 1) &quot;wuhan&quot;</span><br><span class="line">   2) &quot;892.9663&quot;</span><br><span class="line">6) 1) &quot;huanggang&quot;</span><br><span class="line">   2) &quot;862.0165&quot;</span><br><span class="line">7) 1) &quot;guangzhou&quot;</span><br><span class="line">   2) &quot;87.9580&quot;</span><br><span class="line">8) 1) &quot;shenzhen&quot;</span><br><span class="line">   2) &quot;0.0000&quot;</span><br></pre></td></tr></table></figure>



<p>6️⃣<strong>geohash</strong></p>
<blockquote>
<p>描述</p>
</blockquote>
<p>geohash用于获取一个或多个位置元素的geohash值。</p>
<blockquote>
<p>实质</p>
</blockquote>
<p><strong>降维打击</strong>：将二维的经纬度转换为一维的字符串</p>
<p>如果两个字符串越接近，那么距离越近。</p>
<blockquote>
<p>语法</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">geohash &lt;key&gt; member [member ...]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>实例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geohash china:city huanggang beijing hefei</span><br><span class="line">1) &quot;wt67n6hh3k0&quot;</span><br><span class="line">2) &quot;wx4dy0j0d40&quot;</span><br><span class="line">3) &quot;wtemhq6fs20&quot;</span><br></pre></td></tr></table></figure>



<p>7️⃣<strong>Other</strong></p>
<blockquote>
<p>GEO</p>
</blockquote>
<p>GEO的底层原理就是Sorted Set，因此我们可以使用Sorted Set命令来操作GEO。</p>
<blockquote>
<p>实例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看地图中全部元素</span></span><br><span class="line">127.0.0.1:6379&gt; zrange china:city 0 -1</span><br><span class="line">1) &quot;shenzhen&quot;</span><br><span class="line">2) &quot;guangzhou&quot;</span><br><span class="line">3) &quot;wuhan&quot;</span><br><span class="line">4) &quot;huanggang&quot;</span><br><span class="line">5) &quot;hefei&quot;</span><br><span class="line">6) &quot;shanghai&quot;</span><br><span class="line">7) &quot;beijing&quot;</span><br><span class="line">8) &quot;dalian&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 移除大连这个城市</span></span><br><span class="line">127.0.0.1:6379&gt; zrem china:city dalian</span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 按照分数给城市排名</span></span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore china:city -inf inf withscores</span><br><span class="line"> 1) &quot;shenzhen&quot;</span><br><span class="line"> 2) &quot;4046431599170567&quot;</span><br><span class="line"> 3) &quot;guangzhou&quot;</span><br><span class="line"> 4) &quot;4046534293000673&quot;</span><br><span class="line"> 5) &quot;wuhan&quot;</span><br><span class="line"> 6) &quot;4051938129491420&quot;</span><br><span class="line"> 7) &quot;huanggang&quot;</span><br><span class="line"> 8) &quot;4052334404505800&quot;</span><br><span class="line"> 9) &quot;hefei&quot;</span><br><span class="line">10) &quot;4052764524670284&quot;</span><br><span class="line">11) &quot;shanghai&quot;</span><br><span class="line">12) &quot;4054757680623470&quot;</span><br><span class="line">13) &quot;beijing&quot;</span><br><span class="line">14) &quot;4069146323276357&quot;</span><br></pre></td></tr></table></figure>



<h4 id="7-2-2-📄HyperLogLog"><a href="#7-2-2-📄HyperLogLog" class="headerlink" title="7.2.2 📄HyperLogLog"></a>7.2.2 📄HyperLogLog</h4><p>HyperLogLog，Redis中基数统计的算法。</p>
<blockquote>
<p>优点</p>
</blockquote>
<p>占用内存固定且较小。每个HyperLogLog键占用12KB内存，可以计算2^64^个不同元素的基数。</p>
<blockquote>
<p>基数</p>
</blockquote>
<p>一个数据集中不重复元素的数量</p>
<blockquote>
<p>应用场景</p>
</blockquote>
<p>统计网站UV</p>
<p>传统方式：使用set保存用户id，set的元素数量可作为标准判断。</p>
<p>这个方式如果保存大量的用户id，就会比较麻烦，目的是计数，而非保存用户id。</p>
<p>使用HyperLogLog会有**0.81%**的错误率，这个在统计UV任务中是可以接受的。</p>
<blockquote>
<p>操作方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">pfadd &lt;key&gt; element [element …]</td>
<td align="center">添加指定元素到HyperLogLog中</td>
</tr>
<tr>
<td align="center">pfcount &lt;key&gt;</td>
<td align="center">返回给定HyperLogLog的基数估算值</td>
</tr>
<tr>
<td align="center">pfmerge &lt;destkey&gt; &lt;key&gt; [key…]</td>
<td align="center">将多个HyperLogLog合并为一个HyperLogLog</td>
</tr>
</tbody></table>
<blockquote>
<p>实例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建第一组元素</span></span><br><span class="line">127.0.0.1:6379&gt; pfadd hyper K H I G H N E S S </span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 统计第一组元素基数</span></span><br><span class="line">127.0.0.1:6379&gt; pfcount hyper</span><br><span class="line">(integer) 7</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建第二组元素</span></span><br><span class="line">127.0.0.1:6379&gt; pfadd hyper2 P A R A K</span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 统计第二组元素基数</span></span><br><span class="line">127.0.0.1:6379&gt; pfcount hyper2</span><br><span class="line">(integer) 4</span><br><span class="line"><span class="meta">#</span><span class="bash"> 合并两组元素</span></span><br><span class="line">127.0.0.1:6379&gt; pfmerge hyper hyper hyper2</span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span><span class="bash"> 统计所有元素基数</span></span><br><span class="line">127.0.0.1:6379&gt; pfcount hyper</span><br><span class="line">(integer) 10</span><br></pre></td></tr></table></figure>





<h4 id="7-1-3-🔳Bitmaps"><a href="#7-1-3-🔳Bitmaps" class="headerlink" title="7.1.3 🔳Bitmaps"></a>7.1.3 🔳Bitmaps</h4><p>Bitmaps，位图，操作二进制位来进行记录，只有0和1两个状态。</p>
<blockquote>
<p>应用场景</p>
</blockquote>
<p>统计用户活跃度，打卡，两个状态的都可以使用Bitmaps。</p>
<blockquote>
<p>操作方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">setbit &lt;key&gt; offset value</td>
<td align="center">设置值</td>
</tr>
<tr>
<td align="center">getbit &lt;key&gt;  offset</td>
<td align="center">获取值</td>
</tr>
<tr>
<td align="center">bitcount &lt;key&gt; start end</td>
<td align="center">获取Bitmaps指定范围值为1的个数</td>
</tr>
<tr>
<td align="center">bitop and|or|not|xor &lt;destkey&gt; key [key …]</td>
<td align="center">Bitmaps的集合运算</td>
</tr>
</tbody></table>
<blockquote>
<p>实例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打卡 0-6:周一-周日</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2020年第一周打卡</span></span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:1 0 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:1 1 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:1 2 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:1 3 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:1 4 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:1 5 0</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:1 6 0</span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2020年第二周打卡</span></span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:2 0 0</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:2 1 0</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:2 2 0</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:2 3 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:2 4 0</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:2 5 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:2 6 1</span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查打卡</span></span><br><span class="line">127.0.0.1:6379&gt; getbit 2020:week:1 3</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; getbit 2020:week:2 1</span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 统计打卡</span></span><br><span class="line">127.0.0.1:6379&gt; bitcount 2020:week:1</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; bitcount 2020:week:2</span><br><span class="line">(integer) 3</span><br><span class="line"><span class="meta">#</span><span class="bash"> 对两周打卡结果取并集</span></span><br><span class="line">127.0.0.1:6379&gt; bitop and andres 2020:week:1 2020:week:2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; bitcount andres</span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 对两周打卡结果取交集</span></span><br><span class="line">127.0.0.1:6379&gt; bitop or orres 2020:week:1 2020:week:2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; bitcount orres</span><br><span class="line">(integer) 7</span><br></pre></td></tr></table></figure>



<h2 id="8-📩Redis事务"><a href="#8-📩Redis事务" class="headerlink" title="8. 📩Redis事务"></a>8. 📩Redis事务</h2><blockquote>
<p> 💡 说明</p>
</blockquote>
<p>Redis单条命令执行具有原子性，但是事务不保证原子性。</p>
<h3 id="8-1📖定义"><a href="#8-1📖定义" class="headerlink" title="8. 1📖定义"></a>8. 1📖定义</h3><p>一组命令的队列</p>
<h3 id="8-2-🌠特征"><a href="#8-2-🌠特征" class="headerlink" title="8.2 🌠特征"></a>8.2 🌠特征</h3><ul>
<li>一次性</li>
<li>顺序性</li>
<li>排他性</li>
</ul>
<h3 id="8-3-⏳三个阶段"><a href="#8-3-⏳三个阶段" class="headerlink" title="8.3 ⏳三个阶段"></a>8.3 ⏳三个阶段</h3><ul>
<li>开始事务 (multi)</li>
<li>命令入队 (…)</li>
<li>执行事务 (exec)</li>
</ul>
<h3 id="8-4-📝操作方法"><a href="#8-4-📝操作方法" class="headerlink" title="8.4 📝操作方法"></a>8.4 📝操作方法</h3><table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">discard</td>
<td align="center">取消事务，放弃执行事务块内的所有命令</td>
</tr>
<tr>
<td align="center">exec</td>
<td align="center">执行事务块内的所有命令</td>
</tr>
<tr>
<td align="center">multi</td>
<td align="center">标记一个事务的开始</td>
</tr>
<tr>
<td align="center">unwatch</td>
<td align="center">取消watch命令对所有key的监视</td>
</tr>
<tr>
<td align="center">watch</td>
<td align="center">监视一个或多个key，如果在事务执行之前这个或这些key被其他命令锁改动，那么事务将被打断</td>
</tr>
</tbody></table>
<h3 id="8-5-🕵️实例"><a href="#8-5-🕵️实例" class="headerlink" title="8.5 🕵️实例"></a>8.5 🕵️实例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 开启事务</span></span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令入队</span></span><br><span class="line">127.0.0.1:6379&gt; set k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 v2 </span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; mget k1 k2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; getset k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">QUEUED</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行事务</span></span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) 1) &quot;v1&quot;</span><br><span class="line">   2) &quot;v2&quot;</span><br><span class="line">4) &quot;v3&quot;</span><br><span class="line">5) &quot;v3&quot;</span><br></pre></td></tr></table></figure>



<h3 id="8-6-⭕异常"><a href="#8-6-⭕异常" class="headerlink" title="8.6 ⭕异常"></a>8.6 ⭕异常</h3><ul>
<li>命令异常：命令存在错误，所有命令都不会被执行</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; getset k3 # 错误命令</span><br><span class="line">(error) ERR wrong number of arguments for &#x27;getset&#x27; command</span><br><span class="line">127.0.0.1:6379&gt; set k4 v4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec # 执行事务报错</span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class="line">127.0.0.1:6379&gt; get k1 # 所有命令都未被执行</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>

<ul>
<li>运行异常：错误操作的命令抛出异常，其他命令正常执行</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incr k1 # 错误操作</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec # 执行事务仅错误操作执行失败，其他命令执行成功</span><br><span class="line">1) OK</span><br><span class="line">2) (error) ERR value is not an integer or out of range</span><br><span class="line">3) OK</span><br><span class="line">127.0.0.1:6379&gt; mget k1 k2</span><br><span class="line">1) &quot;v1&quot;</span><br><span class="line">2) &quot;v2&quot;</span><br></pre></td></tr></table></figure>



<h3 id="9-7-🔭监控"><a href="#9-7-🔭监控" class="headerlink" title="9.7 🔭监控"></a>9.7 🔭监控</h3><ul>
<li>悲观锁：很悲观，认为什么时候都会出问题，无论做什么都会加锁。</li>
<li>乐观锁：很乐观，认为什么时候都不会出问题，所以不会上锁。更新数据的时候会比较version，判断数据是否更新过。</li>
<li>watch的本质：select version，一旦发现监视的数据version改变，事务将被打断。</li>
</ul>
<blockquote>
<p>实例1-watch的监控测试</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 个人财务</span></span><br><span class="line">127.0.0.1:6379&gt; set money 100</span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span><span class="bash"> 个人支出</span></span><br><span class="line">127.0.0.1:6379&gt; set out 0</span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span><span class="bash"> 监控财务</span></span><br><span class="line">127.0.0.1:6379&gt; watch money </span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启事务</span></span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span><span class="bash"> 消费10元</span></span><br><span class="line">127.0.0.1:6379&gt; decrby money 30</span><br><span class="line">QUEUED</span><br><span class="line"><span class="meta">#</span><span class="bash"> 支出增加</span></span><br><span class="line">127.0.0.1:6379&gt; incrby out 30</span><br><span class="line">QUEUED</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行事务</span></span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">1) (integer) 70</span><br><span class="line">2) (integer) 30</span><br></pre></td></tr></table></figure>

<blockquote>
<p>实例2-watch的多线程测试，watch可以当做redis的乐观锁操作</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 线程1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 监控财务</span></span><br><span class="line">127.0.0.1:6379&gt; watch money</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span><span class="bash"> 消费10元</span></span><br><span class="line">127.0.0.1:6379&gt; decrby money 10</span><br><span class="line">QUEUED</span><br><span class="line"><span class="meta">#</span><span class="bash"> 支出增加</span></span><br><span class="line">127.0.0.1:6379&gt; incrby out 10</span><br><span class="line">QUEUED</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行之前线程2修改了财务，这个时候就会导致事务执行失败</span></span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">(nil)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 线程2 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行在线程1的事务<span class="built_in">exec</span>之前</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询财务</span></span><br><span class="line">127.0.0.1:6379&gt; get money</span><br><span class="line">&quot;70&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 充值1000</span></span><br><span class="line">127.0.0.1:6379&gt; incrby money 1000</span><br><span class="line">(integer) 1070</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 线程1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行在线程1的事务<span class="built_in">exec</span>之后</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1、如果发现事务执行失败，就先解锁</span></span><br><span class="line">127.0.0.1:6379&gt; unwatch </span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、获取最新的值，再次监视</span></span><br><span class="line">127.0.0.1:6379&gt; watch money</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; decrby money 50</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby out 50</span><br><span class="line">QUEUED</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、对比监视的值是否发生了变化</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果没有变化，那么可以执行成功，否则执行失败</span></span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">1) (integer) 1020</span><br><span class="line">2) (integer) 80</span><br></pre></td></tr></table></figure>



<h2 id="9-📩Jedis"><a href="#9-📩Jedis" class="headerlink" title="9. 📩Jedis"></a>9. 📩Jedis</h2><blockquote>
<p>📢 说明</p>
</blockquote>
<p>Jedis是Redis官方推荐的Java连接开发工具。</p>
<p>Jedis中的所有api就对应Redis中的所有命令。</p>
<h3 id="9-1-➕导入依赖"><a href="#9-1-➕导入依赖" class="headerlink" title="9.1 ➕导入依赖"></a>9.1 ➕导入依赖</h3><blockquote>
<p>pom.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.parak<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>KHighness<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span>&gt;</span>parakovo@gmail.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fastjson.version</span>&gt;</span>1.2.68<span class="tag">&lt;/<span class="name">fastjson.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jackson.version</span>&gt;</span>2.11.0<span class="tag">&lt;/<span class="name">jackson.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jedis.version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">jedis.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Springboot-Web  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Test --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Springboot-Aop  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Springboot-Redis  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- SpringCloud-Context --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Fastjson --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;fastjson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Jackson --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Lombok --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Jedis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jedis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="9-2-⌨️编码测试"><a href="#9-2-⌨️编码测试" class="headerlink" title="9.2 ⌨️编码测试"></a>9.2 ⌨️编码测试</h3><h4 id="9-2-1-🅿Ping测试"><a href="#9-2-1-🅿Ping测试" class="headerlink" title="9.2.1 🅿Ping测试"></a>9.2.1 🅿Ping测试</h4><blockquote>
<p>Ping.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j2;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/11 17:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: 测试链接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ping</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        log.info(jedis.ping());</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">17:52:31.303 [main] INFO top.parak.jedis.Ping - PONG</span><br></pre></td></tr></table></figure>



<h4 id="9-2-1-⚪GEO-api测试"><a href="#9-2-1-⚪GEO-api测试" class="headerlink" title="9.2.1 ⚪GEO-api测试"></a>9.2.1 ⚪GEO-api测试</h4><blockquote>
<p>city.txt</p>
</blockquote>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">huanggang    115.94427    30.07033</span><br><span class="line">wuhan        114.31589    30.55389</span><br><span class="line">beijing      116.28625    39.8585</span><br><span class="line">shanghai     121.49295    31.22337</span><br><span class="line">hefei        117.26104    31.85117</span><br><span class="line">shenzhen     113.93029    22.53291</span><br><span class="line">dalian       121.64465    38.91859</span><br><span class="line">guangzhou    113.36112    23.12467</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Geo.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j2;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.ResourceUtils;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.GeoCoordinate;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.GeoUnit;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.params.GeoRadiusParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/11 17:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: 测试Geospatial</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Geo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取文件将地理数据写进redis</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readAndWriteIntoRedis</span><span class="params">(String path, Jedis jedis)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">        FileChannel channel = fileInputStream.getChannel();</span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">512</span>);</span><br><span class="line">        channel.read(byteBuffer);</span><br><span class="line">        String[] res = <span class="keyword">new</span> String(byteBuffer.array()).split(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        Map&lt;String, GeoCoordinate&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Arrays.stream(res).forEach(s -&gt; &#123;</span><br><span class="line">            <span class="comment">// 使用正则\s+匹配多个空格，分割字符串</span></span><br><span class="line">            String[] ss = s.split(<span class="string">&quot;\\s+&quot;</span>);</span><br><span class="line">            map.put(ss[<span class="number">0</span>], <span class="keyword">new</span> GeoCoordinate(Double.valueOf(ss[<span class="number">1</span>]), Double.valueOf(ss[<span class="number">2</span>])));</span><br><span class="line">        &#125;);</span><br><span class="line">        jedis.geoadd(<span class="string">&quot;china:city&quot;</span>, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        readAndWriteIntoRedis(ResourceUtils.getFile(<span class="string">&quot;src/main/resources/city.txt&quot;</span>).getAbsolutePath(), jedis);</span><br><span class="line">        log.info(<span class="string">&quot;==========地图中的所有城市==========&quot;</span>);</span><br><span class="line">        jedis.zrange(<span class="string">&quot;china:city&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>).stream().forEach(s -&gt; &#123; log.info(s + <span class="string">&quot; &quot;</span>); &#125;);</span><br><span class="line">        log.info(<span class="string">&quot;==========查询黄冈的经纬度==========&quot;</span>);</span><br><span class="line">        log.info(jedis.geopos(<span class="string">&quot;china:city&quot;</span>, <span class="string">&quot;huanggang&quot;</span>));</span><br><span class="line">        log.info(<span class="string">&quot;==========查询距离杭州不超过1000km的城市==========&quot;</span>);</span><br><span class="line">        GeoRadiusParam geoRadiusParam = <span class="keyword">new</span> GeoRadiusParam();</span><br><span class="line">        geoRadiusParam.withCoord().withDist().sortAscending();</span><br><span class="line">        jedis.georadius(<span class="string">&quot;china:city&quot;</span>, <span class="number">120.153576</span>, <span class="number">30.287459</span>, <span class="number">1000</span>, GeoUnit.KM, geoRadiusParam).forEach( c -&gt; &#123;</span><br><span class="line">            log.info(<span class="string">&quot;城市名称：&#123;&#125;, 经纬度：&#123;&#125;，距离：&#123;&#125;KM&quot;</span>, c.getMemberByString(), c.getCoordinate(), c.getDistance());</span><br><span class="line">        &#125;);</span><br><span class="line">        log.info(<span class="string">&quot;==========查询距离武汉不超过1000KM的城市==========&quot;</span>);</span><br><span class="line">        jedis.georadiusByMember(<span class="string">&quot;china:city&quot;</span>, <span class="string">&quot;wuhan&quot;</span>, <span class="number">1000</span>, GeoUnit.KM, geoRadiusParam).forEach( c -&gt; &#123;</span><br><span class="line">            log.info(<span class="string">&quot;城市名称：&#123;&#125;, 经纬度：&#123;&#125;，距离：&#123;&#125;KM&quot;</span>, c.getMemberByString(), c.getCoordinate(), c.getDistance());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">20:21:02.671 [main] INFO top.parak.jedis.Geo - ==========地图中的所有城市==========</span><br><span class="line">20:21:02.718 [main] INFO top.parak.jedis.Geo - shenzhen </span><br><span class="line">20:21:02.718 [main] INFO top.parak.jedis.Geo - guangzhou </span><br><span class="line">20:21:02.718 [main] INFO top.parak.jedis.Geo - wuhan </span><br><span class="line">20:21:02.718 [main] INFO top.parak.jedis.Geo - huanggang </span><br><span class="line">20:21:02.718 [main] INFO top.parak.jedis.Geo - hefei </span><br><span class="line">20:21:02.718 [main] INFO top.parak.jedis.Geo - shanghai </span><br><span class="line">20:21:02.718 [main] INFO top.parak.jedis.Geo - beijing </span><br><span class="line">20:21:02.718 [main] INFO top.parak.jedis.Geo - dalian </span><br><span class="line">20:21:02.718 [main] INFO top.parak.jedis.Geo - ==========查询黄冈的经纬度==========</span><br><span class="line">20:21:02.720 [main] INFO top.parak.jedis.Geo - [(115.94427019357681,30.070331157985194)]</span><br><span class="line">20:21:02.721 [main] INFO top.parak.jedis.Geo - ==========查询距离杭州不超过1000km的城市==========</span><br><span class="line">20:21:02.724 [main] INFO top.parak.jedis.Geo - 城市名称：shanghai, 经纬度：(121.49295061826706,31.22337074392616)，距离：165.0KM</span><br><span class="line">20:21:02.724 [main] INFO top.parak.jedis.Geo - 城市名称：hefei, 经纬度：(117.26104170084,31.851170480671236)，距离：325.8468KM</span><br><span class="line">20:21:02.725 [main] INFO top.parak.jedis.Geo - 城市名称：huanggang, 经纬度：(115.94427019357681,30.070331157985194)，距离：405.4241KM</span><br><span class="line">20:21:02.725 [main] INFO top.parak.jedis.Geo - 城市名称：wuhan, 经纬度：(114.31589037179947,30.55389005243692)，距离：560.6357KM</span><br><span class="line">20:21:02.725 [main] INFO top.parak.jedis.Geo - 城市名称：dalian, 经纬度：(121.64465099573135,38.91858901014995)，距离：969.6213KM</span><br><span class="line">20:21:02.725 [main] INFO top.parak.jedis.Geo - ==========查询距离武汉不超过1000KM的城市==========</span><br><span class="line">20:21:02.725 [main] INFO top.parak.jedis.Geo - 城市名称：wuhan, 经纬度：(114.31589037179947,30.55389005243692)，距离：0.0KM</span><br><span class="line">20:21:02.725 [main] INFO top.parak.jedis.Geo - 城市名称：huanggang, 经纬度：(115.94427019357681,30.070331157985194)，距离：165.3475KM</span><br><span class="line">20:21:02.726 [main] INFO top.parak.jedis.Geo - 城市名称：hefei, 经纬度：(117.26104170084,31.851170480671236)，距离：315.1437KM</span><br><span class="line">20:21:02.726 [main] INFO top.parak.jedis.Geo - 城市名称：shanghai, 经纬度：(121.49295061826706,31.22337074392616)，距离：688.9652KM</span><br><span class="line">20:21:02.726 [main] INFO top.parak.jedis.Geo - 城市名称：guangzhou, 经纬度：(113.36112052202225,23.12467049411648)，距离：831.7263KM</span><br><span class="line">20:21:02.726 [main] INFO top.parak.jedis.Geo - 城市名称：shenzhen, 经纬度：(113.93029063940048,22.53290942281489)，距离：892.9663KM</span><br></pre></td></tr></table></figure>



<h4 id="9-2-2-⚫Hyper-api测试"><a href="#9-2-2-⚫Hyper-api测试" class="headerlink" title="9.2.2 ⚫Hyper-api测试"></a>9.2.2 ⚫Hyper-api测试</h4><blockquote>
<p>Hyper.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j2;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/11 20:26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: 测试hyper</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hyper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        jedis.pfadd(<span class="string">&quot;hyper1&quot;</span>, <span class="string">&quot;K&quot;</span>, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;I&quot;</span>, <span class="string">&quot;G&quot;</span>, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;N&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;S&quot;</span>, <span class="string">&quot;S&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;hyper1中的元素基数：&#123;&#125;&quot;</span>, jedis.pfcount(<span class="string">&quot;hyper1&quot;</span>));</span><br><span class="line">        jedis.pfadd(<span class="string">&quot;hyper2&quot;</span>, <span class="string">&quot;P&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;K&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;hyper2中的元素基数：&#123;&#125;&quot;</span>, jedis.pfcount(<span class="string">&quot;hyper2&quot;</span>));</span><br><span class="line">        jedis.pfmerge(<span class="string">&quot;hyper&quot;</span>, <span class="string">&quot;hyper1&quot;</span>, <span class="string">&quot;hyper2&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;hyper1和hyper2合并后的元素基数：&#123;&#125;&quot;</span>, jedis.pfcount(<span class="string">&quot;hyper&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">20:36:20.386 [main] INFO top.parak.jedis.Hyper - hyper1中的元素基数：7</span><br><span class="line">20:36:20.390 [main] INFO top.parak.jedis.Hyper - hyper2中的元素基数：4</span><br><span class="line">20:36:20.390 [main] INFO top.parak.jedis.Hyper - hyper1和hyper2合并后的元素基数：10</span><br></pre></td></tr></table></figure>



<h4 id="9-2-3-🔴Bitmaps-api测试"><a href="#9-2-3-🔴Bitmaps-api测试" class="headerlink" title="9.2.3 🔴Bitmaps-api测试"></a>9.2.3 🔴Bitmaps-api测试</h4><blockquote>
<p>Bit.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j2;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.BitOP;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/11 20:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: 测试Bitmaps</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getChineseExpression</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">return</span> <span class="string">&quot;星期一&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> <span class="string">&quot;星期二&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">return</span> <span class="string">&quot;星期三&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">return</span> <span class="string">&quot;星期四&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>: <span class="keyword">return</span> <span class="string">&quot;星期五&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>: <span class="keyword">return</span> <span class="string">&quot;星期六&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>: <span class="keyword">return</span> <span class="string">&quot;星期日&quot;</span>;</span><br><span class="line">            <span class="keyword">default</span>: <span class="keyword">return</span> <span class="string">&quot;Error&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">// 模拟两周的打卡情况</span></span><br><span class="line">        <span class="keyword">boolean</span>[] bool1 = <span class="keyword">new</span> <span class="keyword">boolean</span>[]&#123;<span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>&#125;;</span><br><span class="line">        <span class="keyword">boolean</span>[] bool2 = <span class="keyword">new</span> <span class="keyword">boolean</span>[]&#123;<span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">false</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bool1.length; i++) &#123; jedis.setbit(<span class="string">&quot;2020:week:1&quot;</span>, i, bool1[i]); &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bool2.length; i++) &#123; jedis.setbit(<span class="string">&quot;2020:week:2&quot;</span>, i, bool2[i]); &#125;</span><br><span class="line">        log.info(<span class="string">&quot;2020年第一周的打卡天数：&#123;&#125;&quot;</span>, jedis.bitcount(<span class="string">&quot;2020:week:1&quot;</span>));</span><br><span class="line">        log.info(<span class="string">&quot;2020年第一周具体打卡情况&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bool1.length; i++) &#123; log.info(getChineseExpression(i) + <span class="string">&quot;: &quot;</span> + (jedis.getbit(<span class="string">&quot;2020:week:1&quot;</span>, i) ? <span class="string">&quot;已打卡&quot;</span> : <span class="string">&quot;未打卡&quot;</span>)); &#125;</span><br><span class="line">        log.info(<span class="string">&quot;2020年第二周的打卡天数：&#123;&#125;&quot;</span>, jedis.bitcount(<span class="string">&quot;2020:week:2&quot;</span>));</span><br><span class="line">        log.info(<span class="string">&quot;2020年第二周具体打卡情况&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bool2.length; i++) &#123; log.info(getChineseExpression(i) + <span class="string">&quot;: &quot;</span> + (jedis.getbit(<span class="string">&quot;2020:week:2&quot;</span>, i) ? <span class="string">&quot;已打卡&quot;</span> : <span class="string">&quot;未打卡&quot;</span>)); &#125;</span><br><span class="line">        jedis.bitop(BitOP.AND, <span class="string">&quot;2020:week:1and2&quot;</span>, <span class="string">&quot;2020:week:1&quot;</span>, <span class="string">&quot;2020:week:2&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;2020年第一周和第二周两天都打卡的天数：&#123;&#125;&quot;</span>, jedis.bitcount(<span class="string">&quot;2020:week:1and2&quot;</span>));</span><br><span class="line">        jedis.bitop(BitOP.OR, <span class="string">&quot;2020:week:1or2&quot;</span>, <span class="string">&quot;2020:week:1&quot;</span>, <span class="string">&quot;2020:week:2&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;2020年第一周和第二周至少有一天打卡的天数：&#123;&#125;&quot;</span>, jedis.bitcount(<span class="string">&quot;2020:week:1or2&quot;</span>));</span><br><span class="line">        jedis.bitop(BitOP.XOR,<span class="string">&quot;2020:week:1xor2&quot;</span>, <span class="string">&quot;2020:week:1&quot;</span>, <span class="string">&quot;2020:week:2&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;2020年第一周和第二周仅有一天打卡的天数：&#123;&#125;&quot;</span>, jedis.bitcount(<span class="string">&quot;2020:week:1xor2&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">21:07:40.042 [main] INFO top.parak.jedis.Bit - 2020年第一周的打卡天数：5</span><br><span class="line">21:07:40.046 [main] INFO top.parak.jedis.Bit - 2020年第一周具体打卡情况</span><br><span class="line">21:07:40.046 [main] INFO top.parak.jedis.Bit - 星期一: 已打卡</span><br><span class="line">21:07:40.046 [main] INFO top.parak.jedis.Bit - 星期二: 已打卡</span><br><span class="line">21:07:40.046 [main] INFO top.parak.jedis.Bit - 星期三: 已打卡</span><br><span class="line">21:07:40.046 [main] INFO top.parak.jedis.Bit - 星期四: 已打卡</span><br><span class="line">21:07:40.046 [main] INFO top.parak.jedis.Bit - 星期五: 已打卡</span><br><span class="line">21:07:40.046 [main] INFO top.parak.jedis.Bit - 星期六: 未打卡</span><br><span class="line">21:07:40.047 [main] INFO top.parak.jedis.Bit - 星期日: 未打卡</span><br><span class="line">21:07:40.047 [main] INFO top.parak.jedis.Bit - 2020年第二周的打卡天数：3</span><br><span class="line">21:07:40.047 [main] INFO top.parak.jedis.Bit - 2020年第二周具体打卡情况</span><br><span class="line">21:07:40.047 [main] INFO top.parak.jedis.Bit - 星期一: 未打卡</span><br><span class="line">21:07:40.047 [main] INFO top.parak.jedis.Bit - 星期二: 未打卡</span><br><span class="line">21:07:40.047 [main] INFO top.parak.jedis.Bit - 星期三: 未打卡</span><br><span class="line">21:07:40.047 [main] INFO top.parak.jedis.Bit - 星期四: 已打卡</span><br><span class="line">21:07:40.047 [main] INFO top.parak.jedis.Bit - 星期五: 已打卡</span><br><span class="line">21:07:40.047 [main] INFO top.parak.jedis.Bit - 星期六: 已打卡</span><br><span class="line">21:07:40.047 [main] INFO top.parak.jedis.Bit - 星期日: 未打卡</span><br><span class="line">21:07:40.048 [main] INFO top.parak.jedis.Bit - 2020年第一周和第二周两天都打卡的天数：2</span><br><span class="line">21:07:40.048 [main] INFO top.parak.jedis.Bit - 2020年第一周和第二周至少有一天打卡的天数：6</span><br><span class="line">21:07:40.048 [main] INFO top.parak.jedis.Bit - 2020年第一周和第二周仅有一天打卡的天数：4</span><br></pre></td></tr></table></figure>



<h4 id="9-2-4-🔵事务测试"><a href="#9-2-4-🔵事务测试" class="headerlink" title="9.2.4 🔵事务测试"></a>9.2.4 🔵事务测试</h4><blockquote>
<p>Affair.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j2;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/11 21:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: 测试事务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Affair</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建json数据</span></span><br><span class="line">        JSONObject jsonObject1 = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        jsonObject1.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;KHighness&quot;</span>);</span><br><span class="line">        jsonObject1.put(<span class="string">&quot;age&quot;</span>, <span class="number">19</span>);</span><br><span class="line">        jsonObject1.put(<span class="string">&quot;constellation&quot;</span>, <span class="string">&quot;Virgo&quot;</span>);</span><br><span class="line">        jsonObject1.put(<span class="string">&quot;Hobby&quot;</span>, <span class="string">&quot;Jay&quot;</span>);</span><br><span class="line">        String json1 = jsonObject1.toJSONString();</span><br><span class="line">        JSONObject jsonObject2 = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        jsonObject2.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;BingYao&quot;</span>);</span><br><span class="line">        jsonObject2.put(<span class="string">&quot;age&quot;</span>, <span class="number">16</span>);</span><br><span class="line">        jsonObject2.put(<span class="string">&quot;constellation&quot;</span>, <span class="string">&quot;Taurus&quot;</span>);</span><br><span class="line">        jsonObject2.put(<span class="string">&quot;Hobby&quot;</span>, <span class="string">&quot;Czk&quot;</span>);</span><br><span class="line">        String json2 = jsonObject2.toJSONString();</span><br><span class="line">        jedis.set(<span class="string">&quot;user1&quot;</span>, json1);</span><br><span class="line">        jedis.set(<span class="string">&quot;user2&quot;</span>, json2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加入乐观锁</span></span><br><span class="line">        jedis.watch(<span class="string">&quot;user1&quot;</span>, <span class="string">&quot;user2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启事务</span></span><br><span class="line">        Transaction multi = jedis.multi();</span><br><span class="line">        <span class="keyword">new</span> Thread( () -&gt; &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">               multi.set(<span class="string">&quot;user1&quot;</span>, json1);</span><br><span class="line">               multi.set(<span class="string">&quot;user2&quot;</span>, json2);</span><br><span class="line">               <span class="comment">// 执行事务</span></span><br><span class="line">               multi.exec();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               <span class="comment">// 发生异常</span></span><br><span class="line">               <span class="comment">// 放弃事务</span></span><br><span class="line">               multi.discard();</span><br><span class="line">               log.info(e.getMessage());</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               <span class="comment">// 输出数据</span></span><br><span class="line">               log.info(<span class="string">&quot;user1: [&#123;&#125;]&quot;</span>, jedis.get(<span class="string">&quot;user1&quot;</span>));</span><br><span class="line">               log.info(<span class="string">&quot;user2: [&#123;&#125;]&quot;</span>, jedis.get(<span class="string">&quot;user2&quot;</span>));</span><br><span class="line">               jedis.close();</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;Multi&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 另一线程</span></span><br><span class="line">        <span class="comment">// 开启在事务之前</span></span><br><span class="line">        <span class="keyword">new</span> Thread( () -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">new</span> Affair().resetInfo1(jedis);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                log.info(e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;Other&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resetInfo1</span><span class="params">(Jedis jedis)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        JSONObject jsonObject1 = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        jsonObject1.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;KHighness&quot;</span>);</span><br><span class="line">        jsonObject1.put(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        jsonObject1.put(<span class="string">&quot;constellation&quot;</span>, <span class="string">&quot;Leo&quot;</span>);</span><br><span class="line">        jsonObject1.put(<span class="string">&quot;Hobby&quot;</span>, <span class="string">&quot;BingYao&quot;</span>);</span><br><span class="line">        String json1 = jsonObject1.toJSONString();</span><br><span class="line">        jedis.set(<span class="string">&quot;user1&quot;</span>, json1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;Other&quot; redis.clients.jedis.exceptions.JedisDataException: Cannot use Jedis when in Multi. Please use Transaction or reset jedis state.</span><br><span class="line">	at redis.clients.jedis.BinaryJedis.checkIsInMultiOrPipeline(BinaryJedis.java:1895)</span><br><span class="line">	at redis.clients.jedis.Jedis.set(Jedis.java:152)</span><br><span class="line">	at top.parak.jedis.Affair.resetInfo1(Affair.java:82)</span><br><span class="line">	at top.parak.jedis.Affair.lambda$main$1(Affair.java:66)</span><br><span class="line">	at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">22:05:18.651 [Multi] INFO top.parak.jedis.Affair - user1: [&#123;&quot;constellation&quot;:&quot;Virgo&quot;,&quot;name&quot;:&quot;KHighness&quot;,&quot;Hobby&quot;:&quot;Jay&quot;,&quot;age&quot;:19&#125;]</span><br><span class="line">22:05:18.654 [Multi] INFO top.parak.jedis.Affair - user2: [&#123;&quot;constellation&quot;:&quot;Taurus&quot;,&quot;name&quot;:&quot;BingYao&quot;,&quot;Hobby&quot;:&quot;Czk&quot;,&quot;age&quot;:16&#125;]</span><br></pre></td></tr></table></figure>



<h2 id="10-📩Springboot整合"><a href="#10-📩Springboot整合" class="headerlink" title="10. 📩Springboot整合"></a>10. 📩Springboot整合</h2><blockquote>
<p>⚠️notice</p>
</blockquote>
<p>在SpringBoot2.X之后，原来使用的jedis被替换为了lettuce，在windows下lettuce连接池仅支持3.2.100版本的Redis</p>
<ul>
<li><p>jedis：采用的直连，多个线程操作的话，是不安全的，如果想要避免不安全，需要使用jedis pool连接池，更像BIO模式</p>
</li>
<li><p>lettuce：底层整合Netty，实例可以在多个线程中共享，不存在线程不安全的情况，可以减少线程数据，更像NIO模式</p>
</li>
</ul>
<h3 id="10-1-🔎源码分析"><a href="#10-1-🔎源码分析" class="headerlink" title="10.1 🔎源码分析"></a>10.1 🔎源码分析</h3><blockquote>
<p>自动配置类：RedisAutoConfiguration.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(</span></span><br><span class="line"><span class="meta">    proxyBeanMethods = false</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;RedisOperations.class&#125;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;RedisProperties.class&#125;)</span></span><br><span class="line"><span class="meta">@Import(&#123;LettuceConnectionConfiguration.class, JedisConnectionConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisAutoConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(name = &#123;&quot;redisTemplate&quot;&#125;)</span> </span><br><span class="line">    <span class="comment">// ==&gt; 这个注解说明，不存在我们自定义名为redisTemplate的Bean的情况下，这个Bean才生效</span></span><br><span class="line">    <span class="comment">// ==&gt; 因此我们可以使用自定义的RedisTemplate，SpringBoot会优先使用自定义RedisTemplate</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        <span class="comment">// 默认的RedisTemplate没有过多的配置，Redis对象都需要序列化和反序列化</span></span><br><span class="line">        <span class="comment">// 两个泛型都是 Object, Obeject 的类型，我们以后使用需要强制转换成 String, Object</span></span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> RedisTemplate();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="comment">// 由于String是Redis中最常使用的类型，所以单独一个StringRedisTemplate</span></span><br><span class="line">    <span class="comment">// 所以操作String类型，直接使用StringRedisTemplate即可</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="10-2-🔑整合使用"><a href="#10-2-🔑整合使用" class="headerlink" title="10.2 🔑整合使用"></a>10.2 🔑整合使用</h3><blockquote>
<p>导入依赖：pom.xml(见上jedis)</p>
</blockquote>
<blockquote>
<p>配置环境：application.properties</p>
</blockquote>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Redis数据库索引（默认为0）</span></span><br><span class="line"><span class="meta">spring.redis.database</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"># Redis服务器地址</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="comment"># Redis服务器连接端口</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="comment"># Redis服务器连接密码（默认为空）</span></span><br><span class="line"><span class="meta">spring.redis.password</span>=<span class="string"></span></span><br><span class="line"><span class="comment"># 连接超时时间（毫秒）</span></span><br><span class="line"><span class="meta">spring.redis.timeout</span>=<span class="string">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Spring 2.X以后，使用lettuce连接池</span></span><br><span class="line"><span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.max-active</span>=<span class="string">100</span></span><br><span class="line"><span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.max-idle</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 连接池中的最小空闲连接</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.min-idle</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"># 连接超时时间</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.shutdown-timeout</span>=<span class="string">100ms</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>⌨️自定义RedisTemplate：RedisConfig.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/7 20:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: 自定义RedisTemplate</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;自定义redisTemplate&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisConnectionFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;redisTemplate&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 创建redisTemplate */</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        <span class="comment">/* 关联redisConnectionFactory */</span></span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="comment">/* Jackson2JsonRedisSerializer：Json序列化器 */</span></span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        redisTemplate.setKeySerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        objectMapper.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line">        <span class="comment">/* StringRedisSerializer：String序列化器 */</span></span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        <span class="comment">/* 设置key的序列化方式：String */</span></span><br><span class="line">        redisTemplate.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">/* 设置value的序列化方式：Json */</span></span><br><span class="line">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">/* 设置hash的key的序列化方式：Json */</span></span><br><span class="line">        redisTemplate.setHashKeySerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">/* 设置hash的value的序列化方式：Json */</span></span><br><span class="line">        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        redisTemplate.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>⌨️Redis工具类：RedisUtil.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j2;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/7 21:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: Redis操作工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*==================================================================</span></span><br><span class="line"><span class="comment">    //                            common                              //</span></span><br><span class="line"><span class="comment">    ==================================================================*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功，false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(String key, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回0代表永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getExpire</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*==================================================================</span></span><br><span class="line"><span class="comment">    //                            String                              //</span></span><br><span class="line"><span class="comment">    ==================================================================*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在，false 不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 可以传一个或多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(String... key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="keyword">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.length == <span class="number">1</span>) &#123;</span><br><span class="line">                redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                redisTemplate.delete(CollectionUtils.arrayToList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key == <span class="keyword">null</span> ? <span class="keyword">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功，false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功，false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 增量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 递增后的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">incr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;增量必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 减量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 递减后的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">decr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;减量必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().decrement(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*==================================================================</span></span><br><span class="line"><span class="comment">    //                              map                               //</span></span><br><span class="line"><span class="comment">    ==================================================================*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为NULL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为NULL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hget</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title">hmget</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应的多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功，false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功，false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据，如果不存在则创建</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功，false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据，并设置时间，如果不存在则创建</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) 如果已存在的hash表有时间，这里会更新原值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功，false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash表中的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为NULL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 可以使多个 不能为NULL</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hdel</span><span class="params">(String key, Object... item)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为NULL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为NULL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在，false 不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hHasKey</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递增 如果不存在，就会创建一个，并把递增后的值返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   增量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 递增后的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hincr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   减量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 递减后的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hdecr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*==================================================================</span></span><br><span class="line"><span class="comment">    //                              set                               //</span></span><br><span class="line"><span class="comment">    ==================================================================*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> set中的所有值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">sGet</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据value从一个set中查询是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在，false 不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sHasKey</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSet</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将set数据放入缓存，并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time   时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSetAndTime</span><span class="params">(String key, <span class="keyword">long</span> time, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().add(key, values);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> set的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sGetSetSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*==================================================================</span></span><br><span class="line"><span class="comment">    //                             list                               //</span></span><br><span class="line"><span class="comment">    ==================================================================*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> list的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lGetListSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引获取list中的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引 index &gt;= 0时，0 表头，1 第二个元素，依次类推；index &lt; 0时，-1 表尾，-2 倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">lGetIndex</span><span class="params">(String key, <span class="keyword">long</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功，false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存，并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功，false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lUpdateIndex</span><span class="params">(String key, <span class="keyword">long</span> index, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除N个值为value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 移除数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lRemove</span><span class="params">(String key, <span class="keyword">long</span> count ,Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long remove = redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="10-3-💨api测试"><a href="#10-3-💨api测试" class="headerlink" title="10.3 💨api测试"></a>10.3 💨api测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> top.parak.common.RedisUtil;</span><br><span class="line"><span class="keyword">import</span> top.parak.entity.User;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j2;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringbootRedisApplicationTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;K殿下&quot;</span>);</span><br><span class="line">        log.info(redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(<span class="string">&quot;Knum&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">        log.info(stringRedisTemplate.opsForValue().increment(<span class="string">&quot;Knum&quot;</span>, <span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;KHighness&quot;</span>, <span class="number">19</span>);</span><br><span class="line">        String jsonUser = <span class="keyword">new</span> ObjectMapper().writeValueAsString(user);</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">        log.info(redisTemplate.opsForValue().get(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HashMap hashMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;name1&quot;</span>, <span class="string">&quot;KHighness&quot;</span>);</span><br><span class="line">        hashMap.put(<span class="string">&quot;name2&quot;</span>, <span class="string">&quot;ParaK&quot;</span>);</span><br><span class="line">        hashMap.put(<span class="string">&quot;name3&quot;</span>, <span class="string">&quot;FlowerK&quot;</span>);</span><br><span class="line">        redisUtil.hmset(<span class="string">&quot;K&quot;</span>, hashMap);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry k : redisUtil.hmget(<span class="string">&quot;K&quot;</span>).entrySet()) &#123;</span><br><span class="line">            log.info(k.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">                        __ __ __    _       __</span><br><span class="line">                       / <span class="comment">//_// /_  (_)___ _/ /_  ____  ___  __________</span></span><br><span class="line">                      / ,&lt;  / __ \/ / __ `/ __ \/ __ \/ _ \/ ___/ ___/</span><br><span class="line">                     / /| |/ / / / / /_/ / / / / / / /  __(__  |__  )</span><br><span class="line">                    /_/ |_/_/ /_/_/\__, /_/ /_/_/ /_/\___/____/____/</span><br><span class="line">                                  /____/</span><br><span class="line"></span><br><span class="line">                     Copyright © <span class="number">2020</span> KHighness. All Rights Reserved</span><br><span class="line"></span><br><span class="line"><span class="number">2020</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">13</span>:<span class="number">36</span>:<span class="number">35.073</span>  INFO <span class="number">18840</span> --- [           main] t.parak.SpringbootRedisApplicationTest   : No active profile set, falling back to <span class="keyword">default</span> profiles: <span class="keyword">default</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">13</span>:<span class="number">36</span>:<span class="number">35.417</span>  INFO <span class="number">18840</span> --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!</span><br><span class="line"><span class="number">2020</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">13</span>:<span class="number">36</span>:<span class="number">35.420</span>  INFO <span class="number">18840</span> --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.</span><br><span class="line"><span class="number">2020</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">13</span>:<span class="number">36</span>:<span class="number">35.445</span>  INFO <span class="number">18840</span> --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in <span class="number">10</span>ms. Found <span class="number">0</span> Redis repository interfaces.</span><br><span class="line"><span class="number">2020</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">13</span>:<span class="number">36</span>:<span class="number">35.534</span>  INFO <span class="number">18840</span> --- [           main] o.s.cloud.context.scope.GenericScope     : BeanFactory id=<span class="number">8d</span>774ca9-<span class="number">71</span>ca-<span class="number">37</span>a9-<span class="number">91e1</span>-<span class="number">35</span>cd9af79e44</span><br><span class="line"><span class="number">2020</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">13</span>:<span class="number">36</span>:<span class="number">35.699</span>  INFO <span class="number">18840</span> --- [           main] trationDelegate$BeanPostProcessorChecker : Bean <span class="string">&#x27;org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration&#x27;</span> of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$<span class="number">67</span>ea5b63] <span class="function">is not eligible <span class="keyword">for</span> getting processed by all <span class="title">BeanPostProcessors</span> <span class="params">(<span class="keyword">for</span> example: not eligible <span class="keyword">for</span> auto-proxying)</span></span></span><br><span class="line"><span class="function">2020-10-12 13:36:36.483  INFO 18840 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService &#x27;applicationTaskExecutor&#x27;</span></span><br><span class="line"><span class="function">2020-10-12 13:36:36.818  INFO 18840 --- [           main] t.parak.SpringbootRedisApplicationTest   : Started SpringbootRedisApplicationTest in 2.287 <span class="title">seconds</span> <span class="params">(JVM running <span class="keyword">for</span> <span class="number">3.29</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2020-10-12 13:36:37.191  INFO 18840 --- [           main] io.lettuce.core.EpollProvider            : Starting without optional epoll library</span></span><br><span class="line"><span class="function">2020-10-12 13:36:37.192  INFO 18840 --- [           main] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library</span></span><br><span class="line"><span class="function">2020-10-12 13:36:37.740  INFO 18840 --- [           main] t.parak.SpringbootRedisApplicationTest   : K殿下</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2020-10-12 13:36:37.762  INFO 18840 --- [           main] t.parak.SpringbootRedisApplicationTest   : 6</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2020-10-12 13:36:37.802  INFO 18840 --- [           main] t.parak.SpringbootRedisApplicationTest   : <span class="title">User</span><span class="params">(name=KHighness, age=<span class="number">19</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2020-10-12 13:36:37.836  INFO 18840 --- [           main] t.parak.SpringbootRedisApplicationTest   : name3</span>=FlowerK</span><br><span class="line"><span class="number">2020</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">13</span>:<span class="number">36</span>:<span class="number">37.836</span>  INFO <span class="number">18840</span> --- [           main] t.parak.SpringbootRedisApplicationTest   : name2=ParaK</span><br><span class="line"><span class="number">2020</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">13</span>:<span class="number">36</span>:<span class="number">37.836</span>  INFO <span class="number">18840</span> --- [           main] t.parak.SpringbootRedisApplicationTest   : name1=KHighness</span><br></pre></td></tr></table></figure>



<h2 id="11-📩Redis持久化"><a href="#11-📩Redis持久化" class="headerlink" title="11. 📩Redis持久化"></a>11. 📩Redis持久化</h2><blockquote>
<p>📌tip</p>
</blockquote>
<p>Redis是内存数据库，如果不将内存中的数据库状态保存在磁盘，那么一旦服务器进程退出，服务器中的数据库状态也会消失。所以Redis提供了持久化功能。</p>
<ul>
<li><p>Redis默认是按照快照RDB的持久化方式</p>
</li>
<li><p>Redis重启的时候会优先使用AOF文件还原数据库状态</p>
</li>
</ul>
<h3 id="11-1-📁RDB"><a href="#11-1-📁RDB" class="headerlink" title="11.1 📁RDB"></a>11.1 📁RDB</h3><blockquote>
<p>🔔RDB = Redis Database</p>
</blockquote>
<p>将内存中的数据以快照”RDB”的形式将数据持久化到磁盘的一个二进制文件dump.rdb，定时保存。</p>
<blockquote>
<p>🔨配置</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">save 900 1    # 15分钟备份一次</span><br><span class="line">save 300 10   # 如果在300s内，至少有10个key进行了修改，就进行持久化操作</span><br><span class="line">save 60 10000 # 如果在60s内，至少有10000个key进行了修改，就进行持久化操作</span><br></pre></td></tr></table></figure>

<p>可以在24小时内，每小时备份一次，并且在每个月的每一天也备份一个RDB文件。</p>
<p>这样的话，即使遇上问题，也可以随时将数据集恢复到不同的版本。</p>
<blockquote>
<p>🔍工作机制</p>
</blockquote>
<p>Redis会单独创建(fork)一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何I/O操作的。这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加高效。RDB的<strong>缺点是最后一次持久化后的数据可能丢失</strong>。我们默认的就是RDB，一般情况下不需要修改这个配置。</p>
<blockquote>
<p>💣触发机制</p>
</blockquote>
<ul>
<li>save的规则满足的情况下，会自动触发rdb规则</li>
<li>执行flushall命令，也会触发rdb规则</li>
<li>退出redis，也会产生rdb文件</li>
</ul>
<blockquote>
<p>💟恢复rdb</p>
</blockquote>
<ul>
<li><p>将rdb文件放在redis启动目录，redis服务器启动的时候就会自动检查dump.rdb，恢复其中的数据</p>
</li>
<li><p>查看需要存在的位置</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config get dir</span><br><span class="line">1) &quot;dir&quot;</span><br><span class="line">2) &quot;/usr/local/bin&quot; # 如果在这个目录下存在dump.rdb文件，启动就会自动恢复其中的数据</span><br></pre></td></tr></table></figure>



<blockquote>
<p>🌠优点缺点</p>
</blockquote>
<p>优点：</p>
<ul>
<li><p>适合大规模的数据恢复(适合文件备份)</p>
</li>
<li><p>对数据的完整性要求不高</p>
</li>
</ul>
<p>缺点：</p>
<ul>
<li><p>Redis服务器宕机时会丢失数据</p>
</li>
<li><p>fork进程会占用一定的内容空间</p>
</li>
</ul>
<h3 id="11-2-📁AOF"><a href="#11-2-📁AOF" class="headerlink" title="11.2 📁AOF"></a>11.2 📁AOF</h3><blockquote>
<p>🔔AOF = Append Only Mode</p>
</blockquote>
<p>把所有的对Redis的服务器进行修改的命令都存到一个文件(默认为appendonly.aof)里，命令的集合。</p>
<blockquote>
<p>🔔配置</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">appendonly yes # 开启AOF</span><br><span class="line">appendfsync yes # 默认开启同步</span><br><span class="line">appendfsync always # 每次数据修改发生时候都会写入AOF文件</span><br><span class="line">appendfsync everysec # 每秒钟同步一次，这个死AOF的缺省策略</span><br></pre></td></tr></table></figure>



<blockquote>
<p>📝AOF重写</p>
</blockquote>
<ul>
<li>AOF文件的大小随着时间的流逝一定越来越大，影响包括但不限于：对于Redis服务器计算机的存储压力；AOF还原数据库状态的时间增加</li>
<li>为了解决AOF文件体积膨胀的问题，Redis提供了AOF重写功能：Redis服务器可以创建一个新的AOF文件来替代现有的AOF文件，新旧两个文件所保存的数据库状态是相同的，但是新的AOF 文件不会包含任何浪费空间的冗余命令，通常会较旧AOF文件小很多</li>
</ul>
<p>Redis会在最近一次重写后记住AOF文件的大小，将次基本大小与当前大小进行比较，如果当前大小大于指定的百分比，则触发重写。</p>
<p>指定零百分比可以禁用重写功能。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">auto-aof-rewrite-percentage 100 </span><br><span class="line">auto-aof-rewrite-min-size 64mb # 触发重写的AOF文件的最小大小</span><br></pre></td></tr></table></figure>



<blockquote>
<p>💢产生问题</p>
</blockquote>
<p>每次重启Redis的时候，会优先使用AOF文件还原数据。</p>
<p>如果AOF文件以外产生错位，或者人工意外改写，可以通过<code>redis-check-aof --fix appendonly.aof</code>修复文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master bin]# redis-check-aof --fix appendonly.aof </span><br><span class="line">&#x27;x              3f: Expected prefix &#x27;*&#x27;, got: &#x27;</span><br><span class="line">AOF analyzed: size=114, ok_up_to=63, diff=51</span><br><span class="line">This will shrink the AOF from 114 bytes, with 51 bytes, to 63 bytes</span><br><span class="line">Continue? [y/N]: y</span><br><span class="line">Successfully truncated AOF</span><br></pre></td></tr></table></figure>



<blockquote>
<p>🌠优点缺点</p>
</blockquote>
<p>优点：</p>
<ul>
<li>AOF会让redis变得非常耐久，AOF的默认策略是每秒同步一次，在这种配置下，就算Redis服务器宕机，也最多丢失一秒钟的数据</li>
</ul>
<p>缺点：</p>
<ul>
<li>对于相同的数据集来说，AOF的文件体积要大于RDB的文件体积，数据恢复的速度更慢</li>
<li>根据所使用的sync策略，AOF的速度可能慢于RDB</li>
</ul>
<h2 id="12-📩Redis发布订阅"><a href="#12-📩Redis发布订阅" class="headerlink" title="12. 📩Redis发布订阅"></a>12. 📩Redis发布订阅</h2><h3 id="12-1-💬说明"><a href="#12-1-💬说明" class="headerlink" title="12.1 💬说明"></a>12.1 💬说明</h3><p>Redis 发布订阅 (pub/sub) 是一种消息通信模式：发送者(pub) 发送方消息，订阅者(sub)接收消息。</p>
<p>Redis客户端可以订阅任意数量的频道。</p>
<h3 id="12-2-📷模型"><a href="#12-2-📷模型" class="headerlink" title="12.2 📷模型"></a>12.2 📷模型</h3><blockquote>
<p>🗼订阅模型</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201125132811770.png" class="" title="image-20201125132811770">

<blockquote>
<p>🗽消息模型</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201125132839908.png" class="" title="image-20201125132839908">



<blockquote>
<p>📜发布订阅命令</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">psubscribe pattern [pattern …]</td>
<td align="center">订阅一个或多个符合给定模式的频道</td>
</tr>
<tr>
<td align="center">pubsub subcommand [argument [argument …]]</td>
<td align="center">查看订阅与发布系统状态</td>
</tr>
<tr>
<td align="center">publish channel message</td>
<td align="center">将消息发送到指定的频道</td>
</tr>
<tr>
<td align="center">punsubscribe channel [channel …]</td>
<td align="center">退订所有给定模式的频道</td>
</tr>
<tr>
<td align="center">subscribe channel [channel …]</td>
<td align="center">订阅给定的一个或多个频道的信息</td>
</tr>
<tr>
<td align="center">unsubscribe [channel [channel …]]</td>
<td align="center">退订给定的频道</td>
</tr>
</tbody></table>
<blockquote>
<p>🎏演示</p>
</blockquote>
<p>开启三个redis-cli</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 第一个客户端，订阅频道：Khighness</span></span><br><span class="line">127.0.0.1:6379&gt; subscribe Khighness</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;Khighness&quot;</span><br><span class="line">3) (integer) 1</span><br><span class="line">1) &quot;message&quot;</span><br><span class="line">2) &quot;Khighness&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二个客户端，在频道Khighness发布消息</span></span><br><span class="line">127.0.0.1:6379&gt; publish Khighness &quot;Client1: Hello, Khighness&quot;</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第三个客户端，在频道Khighness发布消息</span></span><br><span class="line">127.0.0.1:6379&gt; publish Khighness &quot;Client3: Hello, Khighness&quot;</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 订阅频道的第一个客户端就能收到消息</span></span><br><span class="line">1) &quot;message&quot;</span><br><span class="line">2) &quot;Khighness&quot;</span><br><span class="line">3) &quot;Client2: Hello, Khighness&quot;</span><br><span class="line">1) &quot;message&quot;</span><br><span class="line">2) &quot;Khighness&quot;</span><br><span class="line">3) &quot;Client3: Hello, Khighness&quot;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>🕵️原理</p>
</blockquote>
<p>Redis是C语言编写的，通过分析Redis源代码里面的pubsub.c文件，了解发布和订阅机制的底层实现。</p>
<p>通过subscribe命令订阅某频道后，redis-server里维护了一个字典，字典的键就是一个个频道channel，而字典的值则是一个个链表，链表中保存了所有订阅这个频道的客户端client。subscribe命令的关键，就是将client添加到给定channel的订阅链中。</p>
<p>通过publish命令向订阅者发送消息，redis-server会使用给定的频道作为键，在它所维护的channel字典查找记录了订阅这个频道的所有客户端的链表，遍历这个链表，将消息发布给所有订阅者。</p>
<p>在Redis中，可以设定对某一个key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到响应的消息。这一功能最明显的用法就是用作实时消息系统，普通的即时聊天和群聊功能。</p>
<h2 id="13-📩Redis主从复制"><a href="#13-📩Redis主从复制" class="headerlink" title="13. 📩Redis主从复制"></a>13. 📩Redis主从复制</h2><h3 id="13-1-📖概念"><a href="#13-1-📖概念" class="headerlink" title="13.1 📖概念"></a>13.1 📖概念</h3><p>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主结点(master)，后者称为从结点(slave)；数据的复制是单向的，只能由主节点到从结点。master以写为主，salve以读为主。</p>
<p>默认情况下，每台Redis服务器都是主结点；且一个主结点可以有多个从结点(或没有从结点)，但一个从结点只能有一个主节点。</p>
<h3 id="13-2-🔧作用"><a href="#13-2-🔧作用" class="headerlink" title="13.2 🔧作用"></a>13.2 🔧作用</h3><ol>
<li>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式</li>
<li>故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复，实际上是一种服务的冗余</li>
<li>负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供读服务，分担服务器负载；尤其是在写少读多的场景下，通过多个从结点分担读负载，可以大大提高Redis服务器的并发量</li>
<li>高可用基石：主从复制是哨兵和集群可实施的基础，因此说主从复制是Redis高可用的基础</li>
</ol>
<h3 id="13-3-🔍复制原理"><a href="#13-3-🔍复制原理" class="headerlink" title="13.3 🔍复制原理"></a>13.3 🔍复制原理</h3><p>slave启动成功连接到master后会发送一个sync同步命令。</p>
<p>master接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave，并完成一次完全同步。</p>
<p><strong>全量复制</strong>：slave服务在接收到数据库文件后，将其存盘并加载到内存中。</p>
<p><strong>增量复制</strong>：master继续将新的所有收集到的修改命令依次传给slave，完成同步。</p>
<p>但是只要是重新连接master，一次完全同步(全量复制)将被自动执行。</p>
<h2 id="14-📩Redis集群搭建"><a href="#14-📩Redis集群搭建" class="headerlink" title="14. 📩Redis集群搭建"></a>14. 📩Redis集群搭建</h2><h3 id="14-1-🔱方法"><a href="#14-1-🔱方法" class="headerlink" title="14.1 🔱方法"></a>14.1 🔱方法</h3><p>==搭建临时伪集群，命令操作即可==</p>
<p>主要操作：<strong>操作从机，认老大。</strong></p>
<p>查看redis服务器信息：<code>info replication</code></p>
<p>在从机上认老大master：<code>slaveof &lt;master-ip&gt; &lt;master-port&gt;</code></p>
<p>==搭建永久集群，修改配置文件==</p>
<p>主要操作：修改redis-conf文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">replicaof &lt;masterip&gt; &lt;masterport&gt;  # 配置master的ip和端口号</span><br><span class="line">masterauth &lt;master-passwordd&gt;      # 如果master有密码则配置密码</span><br></pre></td></tr></table></figure>



<p>==master关机解决——谋权篡位==</p>
<p>通过<code>slaveof no one</code>让slave自己变成master</p>
<h3 id="14-2-🔪操作"><a href="#14-2-🔪操作" class="headerlink" title="14.2 🔪操作"></a>14.2 🔪操作</h3><ol>
<li>复制三份redis.conf文件，修改信息<ul>
<li>port</li>
<li>logfile</li>
<li>pidfile</li>
<li>dbfilename</li>
</ul>
</li>
<li>分别在三个配置文件下启动redis服务</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master bin]# ps -ef | grep redis</span><br><span class="line">root      18914      1  0 00:54 ?        00:01:38 redis-server 127.0.0.1:6379</span><br><span class="line">root      31612      1  0 11:51 ?        00:00:00 redis-server 127.0.0.1:6380</span><br><span class="line">root      31623      1  0 11:51 ?        00:00:00 redis-server 127.0.0.1:6381</span><br><span class="line">root      31634  31340  0 11:51 pts/2    00:00:00 grep --color=auto redis</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>开启三个终端开启三个redis客户端分别连接三个redis服务器</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Terminal1</span></span><br><span class="line">[parak@master bin]$ redis-cli -p 6379</span><br><span class="line"><span class="meta">#</span><span class="bash"> Terminal2</span></span><br><span class="line">[parak@master bin]$ redis-cli -p 6380</span><br><span class="line"><span class="meta">#</span><span class="bash"> Terminal3</span></span><br><span class="line">[parak@master bin]$ redis-cli -p 6381</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>将6379端口的服务的配置成master，另外两个配置成slave</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 6380</span></span><br><span class="line">127.0.0.1:6380&gt; slaveof 127.0.0.1 6379</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6380&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:3</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:14</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:9c3e61afce386f90c00db9ee4e9a2e7b4b265297</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:14</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:14</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6381</span></span><br><span class="line">127.0.0.1:6381&gt; slaveof 127.0.0.1 6379</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6381&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:8</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:42</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:9c3e61afce386f90c00db9ee4e9a2e7b4b265297</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:42</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:43</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6379</span></span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=127.0.0.1,port=6380,state=online,offset=2087,lag=0</span><br><span class="line">slave1:ip=127.0.0.1,port=6381,state=online,offset=2087,lag=0</span><br><span class="line">master_replid:9c3e61afce386f90c00db9ee4e9a2e7b4b265297</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:2087</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:2087</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>在master上写入值，在slave上读取值</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 6379</span></span><br><span class="line">127.0.0.1:6379&gt; hmset student:1 name Khighness gender male age 19</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hmset student:2 name bingyao gender female age 16</span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span><span class="bash"> 6380</span></span><br><span class="line">127.0.0.1:6380&gt; hmget student:1 name gender age</span><br><span class="line">1) &quot;Khighness&quot;</span><br><span class="line">2) &quot;male&quot;</span><br><span class="line">3) &quot;19&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 6381</span></span><br><span class="line">127.0.0.1:6381&gt; hmget student:2 name gender age</span><br><span class="line">1) &quot;bingyao&quot;</span><br><span class="line">2) &quot;female&quot;</span><br><span class="line">3) &quot;16&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> slave只能读取，不能写入</span></span><br><span class="line">127.0.0.1:6380&gt; set K2 V2</span><br><span class="line">(error) READONLY You can&#x27;t write against a read only replica</span><br></pre></td></tr></table></figure>



<h2 id="15-📩Redis哨兵模式"><a href="#15-📩Redis哨兵模式" class="headerlink" title="15. 📩Redis哨兵模式"></a>15. 📩Redis哨兵模式</h2><p><del>驾校手动挡=&gt;上路自动挡</del></p>
<h3 id="15-1-📙概述"><a href="#15-1-📙概述" class="headerlink" title="15.1 📙概述"></a>15.1 📙概述</h3><p>主从切换技术的方法：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑哨兵模式。Redis从2.8开始正式提供了Sentinel(哨兵)架构来解决这个问题。</p>
<p>简单来说，哨兵模式就是谋权篡位的自动版，能够后台监控主机是否故障，如果发生故障则根据投票数自动将库转换为主库。</p>
<p>哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。</p>
<p>原理：哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例。</p>
<div class="mermaid">
graph TD;
	A((哨兵))
	B(主Redis服务器)
	C(从Redis服务器1)
	D(从Redis服务器2)
	S[以独立的进程监控3台服务器Redis是否正常运行] 
	S --&gt; A
	A --&gt; C
	A --&gt; B
	A --&gt; D
	B --&gt; C
	B --&gt; D</div>




<p>这里的哨兵有两个作用：</p>
<ul>
<li>通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器</li>
<li>当哨兵监测到master宕机，会自动将slave切换为master，然后通过发布订阅模式通知其他的从服务器，修改配置文件，让它们切换主机</li>
</ul>
<p>一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控，各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/sentinel.jpg" class="" title="sentinel">



<p>假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行failover过程，仅仅是哨兵1主管的认为主服务器不可用，仅仅是哨兵1主观的认为主服务器不可用，这个现象称为主观下线，当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover[故障转移]操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为客观下线。</p>
<h3 id="15-2-🎏测试"><a href="#15-2-🎏测试" class="headerlink" title="15.2 🎏测试"></a>15.2 🎏测试</h3><p>准备三个redis服务，6379-master、6380-slave、6381-slave</p>
<p>修改配置文件sentinel.conf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sentinel monitor mymaster 127.0.0.1 6379 1</span><br></pre></td></tr></table></figure>

<p>启动哨兵</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">34055:X 20 Oct 2020 14:39:15.404 * Increased maximum number of open files to 10032 (it was originally set to 1024).</span><br><span class="line">                _._                                                  </span><br><span class="line">           _.-``__ &#x27;&#x27;-._                                             </span><br><span class="line">      _.-``    `.  `_.  &#x27;&#x27;-._           Redis 5.0.8 (00000000/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ &#x27;&#x27;-._                                   </span><br><span class="line"> (    &#x27;      ,       .-`  | `,    )     Running in sentinel mode</span><br><span class="line"> |`-._`-...-` __...-.``-._|&#x27;` _.-&#x27;|     Port: 26379</span><br><span class="line"> |    `-._   `._    /     _.-&#x27;    |     PID: 34055</span><br><span class="line">  `-._    `-._  `-./  _.-&#x27;    _.-&#x27;                                   </span><br><span class="line"> |`-._`-._    `-.__.-&#x27;    _.-&#x27;_.-&#x27;|                                  </span><br><span class="line"> |    `-._`-._        _.-&#x27;_.-&#x27;    |           http://redis.io        </span><br><span class="line">  `-._    `-._`-.__.-&#x27;_.-&#x27;    _.-&#x27;                                   </span><br><span class="line"> |`-._`-._    `-.__.-&#x27;    _.-&#x27;_.-&#x27;|                                  </span><br><span class="line"> |    `-._`-._        _.-&#x27;_.-&#x27;    |                                  </span><br><span class="line">  `-._    `-._`-.__.-&#x27;_.-&#x27;    _.-&#x27;                                   </span><br><span class="line">      `-._    `-.__.-&#x27;    _.-&#x27;                                       </span><br><span class="line">          `-._        _.-&#x27;                                           </span><br><span class="line">              `-.__.-&#x27;                                               </span><br><span class="line"></span><br><span class="line">34055:X 20 Oct 2020 14:39:15.407 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span><br><span class="line">34055:X 20 Oct 2020 14:39:15.408 # Sentinel ID is dbfb304470e8ed2bb81b4be42f847e21ff5d9519</span><br><span class="line">34055:X 20 Oct 2020 14:39:15.408 # +monitor master mymaster 127.0.0.1 6379 quorum 1</span><br><span class="line">34055:X 20 Oct 2020 14:40:15.646 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:40:25.731 * +slave slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br></pre></td></tr></table></figure>

<p>关闭master服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 6379: master -&gt; shutdown</span></span><br><span class="line">127.0.0.1:6379&gt; SHUTDOWN</span><br><span class="line">not connected&gt; exit</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> sentinel</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 监控到master宕机</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选出6380为master</span></span><br><span class="line">34055:X 20 Oct 2020 14:43:47.509 # +sdown master mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:47.509 # +odown master mymaster 127.0.0.1 6379 #quorum 1/1</span><br><span class="line">34055:X 20 Oct 2020 14:43:47.509 # +new-epoch 1</span><br><span class="line">34055:X 20 Oct 2020 14:43:47.509 # +try-failover master mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:47.510 # +vote-for-leader dbfb304470e8ed2bb81b4be42f847e21ff5d9519 1</span><br><span class="line">34055:X 20 Oct 2020 14:43:47.510 # +elected-leader master mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:47.510 # +failover-state-select-slave master mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:47.594 # +selected-slave slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:47.594 * +failover-state-send-slaveof-noone slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:47.678 * +failover-state-wait-promotion slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:48.296 # +promoted-slave slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:48.296 # +failover-state-reconf-slaves master mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:48.371 * +slave-reconf-sent slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:49.310 * +slave-reconf-inprog slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:49.310 * +slave-reconf-done slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:49.362 # +failover-end master mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:49.362 # +switch-master mymaster 127.0.0.1 6379 127.0.0.1 6380</span><br><span class="line">34055:X 20 Oct 2020 14:43:49.362 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6380</span><br><span class="line">34055:X 20 Oct 2020 14:43:49.362 * +slave slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6380</span><br><span class="line">34055:X 20 Oct 2020 14:44:19.365 # +sdown slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6380</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6380: 新王登基</span></span><br><span class="line">127.0.0.1:6380&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:1</span><br><span class="line">slave0:ip=127.0.0.1,port=6381,state=online,offset=42337,lag=1</span><br><span class="line">master_replid:12a540accf0c9347d3e45fad83ccddea86f3b3c3</span><br><span class="line">master_replid2:b80e4fbbe06a83ac070f38e89267bd81b26ec5ca</span><br><span class="line">master_repl_offset:42351</span><br><span class="line">second_repl_offset:20188</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:8342</span><br><span class="line">repl_backlog_histlen:34010</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6381: 参拜新王</span></span><br><span class="line">127.0.0.1:6381&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6380</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:0</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:63969</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:12a540accf0c9347d3e45fad83ccddea86f3b3c3</span><br><span class="line">master_replid2:b80e4fbbe06a83ac070f38e89267bd81b26ec5ca</span><br><span class="line">master_repl_offset:63969</span><br><span class="line">second_repl_offset:20188</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:8053</span><br><span class="line">repl_backlog_histlen:55917</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启6379的服务</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启之后俯首称臣</span></span><br><span class="line">[root@master bin]# redis-server kconfig/redis6379.conf </span><br><span class="line">[root@master bin]# redis-cli -p 6379</span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; info relplication</span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6380</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:2</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:50522</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:12a540accf0c9347d3e45fad83ccddea86f3b3c3</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:50522</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:48596</span><br><span class="line">repl_backlog_histlen:1927</span><br></pre></td></tr></table></figure>



<h3 id="15-3-🌠优点"><a href="#15-3-🌠优点" class="headerlink" title="15.3 🌠优点"></a>15.3 🌠优点</h3><ul>
<li>哨兵集群，基于主从复制模式，继承了主从的所有优点</li>
<li>主从可以切换，故障可以转移，增强系统的可用性</li>
<li>哨兵模式是主从模式的升级版，手动到自动，更加健壮</li>
</ul>
<h3 id="15-4-📰配置详解"><a href="#15-4-📰配置详解" class="headerlink" title="15.4 📰配置详解"></a>15.4 📰配置详解</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> sentinel.conf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 哨兵sentinel实例运行的端口，默认26379</span></span><br><span class="line">port 26379</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 守护进程 </span></span><br><span class="line">daemonize no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进程文件</span></span><br><span class="line">pidfile &quot;/var/run/redis-sentinel.pid&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进程文件</span></span><br><span class="line">logfile &quot;&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 工作目录</span></span><br><span class="line">dir &quot;/tmp&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 哨兵sentinel监控的master的IP和Port</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> quorum配置多少个哨兵统一认为master失联。那么这时客观上认为主结点失联</span></span><br><span class="line">sentinel monitor &lt;master-name&gt; &lt;master-ip&gt; &lt;redis-ip&gt; &lt;quorum&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在redis实例中开启了授权密码</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置哨兵senti的连接密码</span></span><br><span class="line">sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置指定在发生failover主从切换时最多可以有多少个slave同时对新的master同步</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> numreplicas越小，完成failover的事件就越长</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> numreplicas越大，就意味着越多的slave因为replication(复制)而不可用</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> numreplicas设置为1，保证每次只有slave处于不能处理命令请求的状态</span></span><br><span class="line">sentinel parallel-syncs &lt;master-name&gt; &lt;numreplicas&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置指定多milliseconds毫秒之后，master没有响应sentinel</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 此时，哨兵主观上认为master下线，默认30秒</span></span><br><span class="line">sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置故障转移的超时时间，默认2分钟</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以用于以下方面</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1. 同一sentinel对同一个master两次failo ver的间隔时间</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 当一个slave从一个错误的master那里同步数据开始计算时间，直至slave被纠正为向正确的master那里同步数据</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. 当想要取消一个正在进行的failover需要的时间</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4. 当进行failover时，配置所有slaves指向新的master所需的最大时间</span></span><br><span class="line">sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通知脚本</span></span><br><span class="line">sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端重新配置主节点参数脚本</span></span><br><span class="line">sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</span><br></pre></td></tr></table></figure>



<h2 id="16-📩Redis穿透、击穿和雪崩"><a href="#16-📩Redis穿透、击穿和雪崩" class="headerlink" title="16. 📩Redis穿透、击穿和雪崩"></a>16. 📩Redis穿透、击穿和雪崩</h2><h3 id="16-1-🔥缓存穿透"><a href="#16-1-🔥缓存穿透" class="headerlink" title="16.1 🔥缓存穿透"></a>16.1 🔥缓存穿透</h3><blockquote>
<p>💭问题说明</p>
</blockquote>
<p>查询的key对应的数据不在redis缓存中，即缓存没有命中，于是向持久层数据库查询，数据库也没有，当请求量过大的时候，可能压垮数据库。</p>
<p>即大面积的缓存失效，大并发请求打崩DB。</p>
<blockquote>
<p>💖解决方法</p>
</blockquote>
<p>1️⃣<strong>参数校验</strong></p>
<p>在接口层增加校验，不合法的参数直接return，比如id&lt;0直接拦截。</p>
<p>2️⃣<strong>布隆过滤器</strong></p>
<p>利用高效的数据结构和算法快速判断出你这个Key是否在数据库中存在，不存在你return就好了，存在你就去查DB刷新KV再return。</p>
<p>3️⃣<strong>缓存空对象</strong></p>
<p>当存储层不命中后，即使返回的空对象也将其缓存起来，同时会设置一个过期时间，之后再访问这个数据将会从缓存中获取，保护数据库。</p>
<h3 id="16-2-💧缓存击穿"><a href="#16-2-💧缓存击穿" class="headerlink" title="16.2 💧缓存击穿"></a>16.2 💧缓存击穿</h3><blockquote>
<p>💭问题说明</p>
</blockquote>
<p>查询的一个key非常热点，在不停地扛着大量的请求，大并发集中对这一个点进行访问，当这个key在失效的瞬间，持续的大并发直接落到了数据库上，就在这个Key的点上击穿了缓存。</p>
<p>即单个key的缓存失效，大并发请求击穿redis直落DB。</p>
<blockquote>
<p>💙解决方法</p>
</blockquote>
<p>设置热点数据永不过期，或者加上互斥锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getData</span><span class="params">(String key)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//从Redis查询数据</span></span><br><span class="line">        String result = getDataByKV(key);</span><br><span class="line">        <span class="comment">//参数校验</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(result)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//获得锁</span></span><br><span class="line">                <span class="keyword">if</span> (reenLock.tryLock()) &#123;</span><br><span class="line">                    <span class="comment">//去数据库查询</span></span><br><span class="line">                    result = getDataByDB(key);</span><br><span class="line">                    <span class="comment">//校验</span></span><br><span class="line">                    <span class="keyword">if</span> (StringUtils.isNotBlank(result)) &#123;</span><br><span class="line">                        <span class="comment">//插进缓存</span></span><br><span class="line">                        setDataToKV(key, result);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//睡一会再拿</span></span><br><span class="line">                    Thread.sleep(<span class="number">100L</span>);</span><br><span class="line">                    result = getData(key);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//释放锁</span></span><br><span class="line">                reenLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="16-3-🌊缓存雪崩"><a href="#16-3-🌊缓存雪崩" class="headerlink" title="16.3 🌊缓存雪崩"></a>16.3 🌊缓存雪崩</h3><blockquote>
<p>💭问题说明</p>
</blockquote>
<p>当redis服务器重启或则大量缓存集中在某一个时间段失效，瞬间Redis跟没有一样，那这个数量级别的请求直接打到数据库几乎是灾难性的</p>
<blockquote>
<p>💚解决方法</p>
</blockquote>
<p>1️⃣<strong>redis高可用</strong></p>
<p>搭建集群，异地多活</p>
<p>2️⃣<strong>限流降级</strong></p>
<p>在缓存失效后，通过加锁或者队列哎控制读数据库写缓存的线程数量</p>
<p>3️⃣<strong>数据预热</strong></p>
<p>在正式部署之前，先把可能的数据预先访问一遍，让可能的数据加载到缓存中。</p>
<p>在即将发生大并发访问写入key的时候，设置不同的缓存时间，让缓存失效的时间点尽量均匀。</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>NoSQL</tag>
        <tag>Cache</tag>
      </tags>
  </entry>
  <entry>
    <title>Regex</title>
    <url>/posts/83c5d7ce/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>正则表达式，Regular Expression，一种字符串匹配的模式。</p>
<p>用途：文本的复杂处理，大部分编程语言、数据库、文本编辑器、开发环境都支持正则表达式。</p>
<blockquote>
<p>开发中使用</p>
</blockquote>
<ul>
<li>分析所要匹配的数据，写出测试用的典型数据</li>
<li>在工具软件中进行匹配测试</li>
<li>在程序中调用测试的正则表达式</li>
</ul>
<h2 id="2-语法"><a href="#2-语法" class="headerlink" title="2. 语法"></a>2. 语法</h2><h3 id="2-1-标准字符集合"><a href="#2-1-标准字符集合" class="headerlink" title="2.1 标准字符集合"></a>2.1 标准字符集合</h3><ul>
<li>能够与”多种字符”匹配的表达式</li>
<li>注意区分大小写，大写是相反的意思</li>
</ul>
<table>
<thead>
<tr>
<th align="center">字符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\d</td>
<td align="center">任意一个数字，0-9中的任意一个</td>
</tr>
<tr>
<td align="center">\w</td>
<td align="center">任意一个字母或数字或下划线，也就是A-Z、a-z、0-9、_中任意一个</td>
</tr>
<tr>
<td align="center">\s</td>
<td align="center">包括空格、制表符、换行符等空白字符的其中一个</td>
</tr>
<tr>
<td align="center">.</td>
<td align="center">小数点可以匹配任意一个字符(除了换行符)， 如果要匹配包括”\n”在内的所有字符，一般用<code>[\s\S]</code></td>
</tr>
</tbody></table>
<p>如果要匹配真正的’.’、’+’、’-‘、’\&#39; ， 就要转义，用<code>\.</code>、<code>\+</code>、<code>\-</code>、<code>\\</code></p>
<h3 id="2-2-自定义字符集合"><a href="#2-2-自定义字符集合" class="headerlink" title="2.2 自定义字符集合"></a>2.2 自定义字符集合</h3><ul>
<li>[]方括号匹配方式，能够匹配方括号中任意一个字符</li>
<li>正则表达式的特殊符号，被包含到中括号中，则失去了特殊意义，除了^、-之外</li>
<li>标准字符集合，除小数点外，如果被包含于中括号，自定义字符集合被包含该集合<ul>
<li>[\d.-+]将匹配：数字、小数点、+、-</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">例如</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">[ab5@]</td>
<td align="center">匹配”a”或”b”或”5”或”@”</td>
</tr>
<tr>
<td align="center">[^abc]</td>
<td align="center">匹配”a”、”b”、”c”之外的任意一个字符</td>
</tr>
<tr>
<td align="center">[f-k]</td>
<td align="center">匹配”f”-“k”之间的任意一个字母</td>
</tr>
<tr>
<td align="center">[^A-F0-3]</td>
<td align="center">匹配”A”-“F”、”0”-“3”之外的任意一个字符</td>
</tr>
</tbody></table>
<h3 id="2-3-量词"><a href="#2-3-量词" class="headerlink" title="2.3 量词"></a>2.3 量词</h3><ul>
<li>修饰匹配次数的特殊符号</li>
<li>匹配次数中的贪婪模式(匹配字符越多越好，默认)</li>
<li>匹配次数中的非贪婪模式(匹配字符越少越好，在修饰匹配次数的特殊符号后再加上一个”?”号)</li>
</ul>
<table>
<thead>
<tr>
<th align="center">量词</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">{n}</td>
<td align="center">表达式重复n次</td>
</tr>
<tr>
<td align="center">{m,n}</td>
<td align="center">表达式至少重复m次，最多重复n次</td>
</tr>
<tr>
<td align="center">{m,}</td>
<td align="center">表达式至少重复m次</td>
</tr>
<tr>
<td align="center">?</td>
<td align="center">表达式匹配0次或1次，相当于{0,1}</td>
</tr>
<tr>
<td align="center">+</td>
<td align="center">表达式至少出现1次，相当于{1,}</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">表达式不出现或出现任意次，相当于{0,}</td>
</tr>
</tbody></table>
<p>例如：</p>
<ul>
<li><code>[A-Za-z]+</code>可以匹配单词</li>
</ul>
<p>例如文本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6、7、8、9、</span><br><span class="line">1、2、3、4、5、6、7、8、9、</span><br><span class="line">ab a1b a12b a123b a1234b a12345b </span><br></pre></td></tr></table></figure>

<p><code>(\d、)&#123;1,3&#125;</code>的匹配结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6、7、8、</span><br><span class="line">9、</span><br><span class="line">1、2、3、</span><br><span class="line">4、5、6、</span><br><span class="line">7、8、9、</span><br></pre></td></tr></table></figure>

<p><code>(\d、)&#123;1,3&#125;?</code>的匹配结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6、</span><br><span class="line">7、</span><br><span class="line">8、</span><br><span class="line">9、</span><br><span class="line">1、</span><br><span class="line">2、</span><br><span class="line">3、</span><br><span class="line">4、</span><br><span class="line">5、</span><br><span class="line">6、</span><br><span class="line">7、</span><br><span class="line">8、</span><br><span class="line">9、</span><br></pre></td></tr></table></figure>

<p><code>a\d?b</code>的匹配结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ab</span><br><span class="line">a1b</span><br></pre></td></tr></table></figure>

<p><code>a\d+b</code>的匹配结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a1b</span><br><span class="line">a12b</span><br><span class="line">a123b</span><br><span class="line">a1234b</span><br><span class="line">a12345b</span><br></pre></td></tr></table></figure>

<p><code>a\d-b</code>的匹配结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ab</span><br><span class="line">a1b</span><br><span class="line">a12b</span><br><span class="line">a123b</span><br><span class="line">a1234b</span><br><span class="line">a12345b</span><br></pre></td></tr></table></figure>



<h3 id="2-4-字符边界"><a href="#2-4-字符边界" class="headerlink" title="2.4 字符边界"></a>2.4 字符边界</h3><table>
<thead>
<tr>
<th align="center">字符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">^</td>
<td align="center">与字符串开始的地方匹配</td>
</tr>
<tr>
<td align="center">$</td>
<td align="center">与字符串结束的地方匹配</td>
</tr>
<tr>
<td align="center">\b</td>
<td align="center">匹配一个单词边界</td>
</tr>
</tbody></table>
<p><code>\b</code>匹配这样一个位置：前面的字符和后面的字符不全是\w。</p>
<p>例如文本:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Khighness </span><br><span class="line">Khighness1 Khighness2</span><br><span class="line">3Khighness </span><br><span class="line">4Khighness </span><br><span class="line">Khighness5 Khighness6</span><br><span class="line">7Khighness </span><br><span class="line">8Khighness</span><br></pre></td></tr></table></figure>

<p><code>^K</code>匹配最初的”K”，<code>s$</code>匹配最后的”s”；</p>
<p><code>Khighness\b</code>匹配第1、3、4、6、7行的”Khighness”；</p>
<p><code>\bKhighness</code>匹配第1、2、5行的”Khighness”；</p>
<p><code>\bKhighness\b</code>匹配第1行的”Khighness”。</p>
<h3 id="2-5-匹配模式"><a href="#2-5-匹配模式" class="headerlink" title="2.5 匹配模式"></a>2.5 匹配模式</h3><ul>
<li>IGNORECASE-忽略大小写模式<ul>
<li>匹配时忽略大小写</li>
<li>默认情况下，正则表达式是要区分大小写的</li>
</ul>
</li>
<li>SINGLELINE-单行模式<ul>
<li>整个文本看做一个字符串，只有一个开头，一个结尾</li>
<li>使小数点”.”可以匹配包含换行符(\n)在内的任意字符</li>
</ul>
</li>
<li>MULTILINE-多行模式<ul>
<li>每行都是一个字符串，都有开头和结尾</li>
<li>在指定了MULTILINE之后，如果需要仅匹配字符串开始和结束为止，可以使用<code>\A</code>和<code>\Z</code></li>
</ul>
</li>
</ul>
<h3 id="2-7-选择符和分组"><a href="#2-7-选择符和分组" class="headerlink" title="2.7 选择符和分组"></a>2.7 选择符和分组</h3><table>
<thead>
<tr>
<th align="center">表达式</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">分支结构: |</td>
<td align="center">左右两边表达式之间“或”关系，匹配左边或者右边</td>
</tr>
<tr>
<td align="center">捕获组: ()</td>
<td align="center">(1) 在被修饰匹配次数的时候，括号中的表达式可以作为整体被修饰; (2) 取匹配结果的时候，括号中的表达式匹配到的内容可以被单独得到; (3) 每一对括号会分配一个编号，使用()的捕获根据左括号的顺序从1开始自动编号。捕获元素编号为零的第一个捕获是由整个正则表达式模式匹配的文本</td>
</tr>
<tr>
<td align="center">非捕获组: (?:Exception)</td>
<td align="center">一些表达式中，不得不使用()，但又不需要保存()中子表达式匹配的内容，这时可以用非捕获组来抵消使用()带来的副作用</td>
</tr>
</tbody></table>
<p>反向引用(\num)：每一对()会分配一个编号，使用()的捕获模式</p>
<p>例如<code>([a-z]&#123;2&#125;)\1</code>可以匹配类似”abab”、”gogo”、”toto”的字符串。</p>
<h3 id="2-8-预搜索-零宽断言"><a href="#2-8-预搜索-零宽断言" class="headerlink" title="2.8 预搜索(零宽断言)"></a>2.8 预搜索(零宽断言)</h3><ul>
<li>只进行子表达式的匹配，匹配内容不计入最终的匹配结果，是零宽度</li>
<li>这个位置应该符合某个条件。判断当前位置的前后字符，是否符合指定的条件，但不匹配前后的字符。是对位置的匹配</li>
<li>正则表达式匹配过程中，如果子表达式匹配到的是字符内容，而非位置，并被保存到最终的匹配结果中，那么久认为这个子表达式是占有字符的；如果子表达式匹配的仅仅是位置，或者匹配的内容并不保存到最终的匹配结果中，那么就认为这个子表达式是零宽度的。占有字符还是零宽度，是针对匹配的内容屎否保存到最终的匹配结果中而言的。</li>
</ul>
<table>
<thead>
<tr>
<th align="center">表达式</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">(?=exp)</td>
<td align="center">断言自身出现的位置的后面能匹配表达式exp</td>
</tr>
<tr>
<td align="center">(?&lt;=exp)</td>
<td align="center">断言自身出现的位置的前面能匹配表达式exp</td>
</tr>
<tr>
<td align="center">(?!exp)</td>
<td align="center">断言此位置的后面不能匹配表达式exp</td>
</tr>
<tr>
<td align="center">(?&lt;exp)</td>
<td align="center">断言此位置的前面不能匹配表达式exp</td>
</tr>
</tbody></table>
<p>例如：</p>
<ul>
<li><p><code>[A-Za-z]+(?=ing)</code>可以匹配所有以”ing”结尾的单词(匹配结果不包含”ing”，<code>[A-Za-z]+ing</code>的匹配结果包含”ing”)</p>
</li>
<li><p><code>(?&lt;=in)[A-Za-z]+</code>可以匹配所有以”in”为前缀的单词(匹配结果不包含”in”，<code>in[A-Za-z]+</code>的匹配结果包含”in”)</p>
</li>
</ul>
<h2 id="3-验证"><a href="#3-验证" class="headerlink" title="3. 验证"></a>3. 验证</h2><h3 id="3-1-电话号码验证"><a href="#3-1-电话号码验证" class="headerlink" title="3.1 电话号码验证"></a>3.1 电话号码验证</h3><blockquote>
<p>要求</p>
</blockquote>
<ul>
<li>固定电话号码由数字和”-“构成，电话号码为7到8位</li>
<li>如果固定电话号码中包含有区号，那么区号为三位或四位，首位是0，区号用”-“和其他部分隔开</li>
<li>移动电话号码为11位，第一位和第二位为”13”、”14”、15”、”17”、18”、”19”</li>
</ul>
<blockquote>
<p>分析：</p>
</blockquote>
<ul>
<li>固定电话号码：<code>0\d&#123;2,3&#125;-\d&#123;7,9&#125;</code></li>
<li>移动电话号码: <code>1[3|4|5|7|8|9]\d&#123;9&#125;</code></li>
<li>合起来就是：<code>^0\d&#123;2,3&#125;-\d&#123;7,9&#125;|1[3|4|5|7|8|9]\d&#123;9&#125;$</code></li>
</ul>
<h3 id="3-3-电子邮箱验证"><a href="#3-3-电子邮箱验证" class="headerlink" title="3.3 电子邮箱验证"></a>3.3 电子邮箱验证</h3><blockquote>
<p>要求</p>
</blockquote>
<ul>
<li>电子邮箱格式：名称@域名</li>
<li>邮箱名称部分：允许汉字、字母、数字、中划线和下划线</li>
<li>邮箱域名部分：允许字母、数字、英语句号</li>
</ul>
<blockquote>
<p>分析</p>
</blockquote>
<ul>
<li>邮箱名称表达式：<ul>
<li>汉字<code>[\u4e00-\u9fa5]</code></li>
<li>字母<code>[A-Za-z]</code></li>
<li>数字<code>[0-9]</code></li>
<li>中划线和下划线<code>[-_]</code></li>
<li>综上得到名称表达式<code>[\u4e00-\u9fa5A-Za-z0-9-_]+</code></li>
</ul>
</li>
<li>邮箱域名表达式：<ul>
<li>域名的一般规律为[N级域名].[三级域名].[二级域名].[一级域名]，格式类似为<code>**.**.**.**</code></li>
<li>一级域名只包含字母(如com、top、cn等)，长度为2-4位</li>
<li><code>**</code>部分可以表示为<code>[A-Za-z0-9-_]+</code></li>
<li><code>.**</code>部分可以表示为<code>\.[A-Za-z0-9-_]+</code></li>
<li>零或多个<code>&quot;.**&quot;</code>可以表示为 <code> (\.[A-Za-z0-9-_]+)*</code></li>
<li>一级域名部分<code>.**</code>可以表示为.<code>\.[a-z]&#123;2,4&#125;</code></li>
<li>综上得到域名表达式<code>[A-Za-z0-9-_]+(\.[A-Za-z0-9-_]+)*\.[a-z]&#123;2,4&#125;</code></li>
</ul>
</li>
<li>邮箱最终表达式：<ul>
<li>使用<code>^</code>匹配邮箱最开始的部分，使用<code>$</code>匹配邮箱结束部分以保证邮箱前后不能有其他字符</li>
<li>由”名称@域名”得到最终表达式：<code>[\u4e00-\u9fa5A-Za-z0-9-_]+@[A-Za-z0-9-_]+(\.[A-Za-z0-9-_]+)*\.[a-z]&#123;2,4&#125;</code></li>
<li>简写即为：<code>^[\u4e00-\u9fa5-\w]+@[-\w]+(\.[-\w]+)*\.[a-z]&#123;2,4&#125;$</code></li>
</ul>
</li>
</ul>
<br>

<h2 id="4-使用"><a href="#4-使用" class="headerlink" title="4. 使用"></a>4. 使用</h2><p>Java程序中使用正则表达式，相关类位于<code>java.util.regex</code>包下面</p>
<ul>
<li>类<code>Pattern</code>:<ul>
<li>正则表达四的编译表示形式</li>
<li>建立正则表达式，并启用相应模式：<code>Pattern pattern = Pattern.compile(Regular Expression);</code></li>
</ul>
</li>
<li>类<code>Matcher</code>:<ul>
<li>通过解释<code>Pattern</code>对<code>character squence</code>执行匹配操作的引擎</li>
<li>匹配str字符串：<code>Matcher matcher = pattern.matcher(str);</code></li>
<li>将整个字符串序列与该模式匹配：<code>boolean res1 = matcher.matches();</code></li>
<li>扫描字符串序列，查找与该模式匹配的下一个子序列：<code>boolean res2 = matcher.find();</code></li>
</ul>
</li>
</ul>
<h3 id="4-1-基本操作"><a href="#4-1-基本操作" class="headerlink" title="4.1 基本操作"></a>4.1 基本操作</h3><blockquote>
<p>代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/7 15:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: 基本操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 正则匹配模式</span></span><br><span class="line">        Pattern pattern = Pattern.compile(<span class="string">&quot;\\w+&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 匹配操作引擎</span></span><br><span class="line">        Matcher matcher = pattern.matcher(<span class="string">&quot;KHighness||ParaK||FlowerK||18236763&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 完整匹配</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------完整匹配----------&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> res = matcher.matches();</span><br><span class="line">        System.out.println(<span class="string">&quot;匹配结果：&quot;</span> + res + <span class="string">&quot;，匹配字符串：&quot;</span> + (res ? matcher.group() : <span class="string">&quot;NULL&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每次操作完引擎中的字符串都会到达末尾，需要重新写</span></span><br><span class="line">        matcher = pattern.matcher(<span class="string">&quot;KHighness||ParaK||FlowerK||18236763&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 子串匹配</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------子串匹配----------&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> res1 = matcher.find();</span><br><span class="line">        System.out.println(<span class="string">&quot;匹配结果：&quot;</span> + res1 + <span class="string">&quot;，匹配字符串：&quot;</span> + (res1 ? matcher.group() : <span class="string">&quot;NULL&quot;</span>));</span><br><span class="line">        <span class="keyword">boolean</span> res2 = matcher.find();</span><br><span class="line">        System.out.println(<span class="string">&quot;匹配结果：&quot;</span> + res2 + <span class="string">&quot;，匹配字符串：&quot;</span> + (res2 ? matcher.group() : <span class="string">&quot;NULL&quot;</span>));</span><br><span class="line">        <span class="keyword">boolean</span> res3 = matcher.find();</span><br><span class="line">        System.out.println(<span class="string">&quot;匹配结果：&quot;</span> + res3 + <span class="string">&quot;，匹配字符串：&quot;</span> + (res3 ? matcher.group() : <span class="string">&quot;NULL&quot;</span>));</span><br><span class="line">        <span class="keyword">boolean</span> res4 = matcher.find();</span><br><span class="line">        System.out.println(<span class="string">&quot;匹配结果：&quot;</span> + res4 + <span class="string">&quot;，匹配字符串：&quot;</span> + (res4 ? matcher.group() : <span class="string">&quot;NULL&quot;</span>));</span><br><span class="line">        <span class="keyword">boolean</span> res5 = matcher.find();</span><br><span class="line">        System.out.println(<span class="string">&quot;匹配结果：&quot;</span> + res5 + <span class="string">&quot;，匹配字符串：&quot;</span> + (res5 ? matcher.group() : <span class="string">&quot;NULL&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环查找</span></span><br><span class="line">        matcher = pattern.matcher(<span class="string">&quot;KHighness||ParaK||FlowerK||18236763&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------循环匹配----------&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(matcher.group());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">----------完整匹配----------</span><br><span class="line">匹配结果：false，匹配字符串：NULL</span><br><span class="line">----------子串匹配----------</span><br><span class="line">匹配结果：true，匹配字符串：KHighness</span><br><span class="line">匹配结果：true，匹配字符串：ParaK</span><br><span class="line">匹配结果：true，匹配字符串：FlowerK</span><br><span class="line">匹配结果：true，匹配字符串：<span class="number">18236763</span></span><br><span class="line">匹配结果：false，匹配字符串：NULL</span><br><span class="line">----------循环匹配----------</span><br><span class="line">KHighness</span><br><span class="line">ParaK</span><br><span class="line">FlowerK</span><br><span class="line"><span class="number">18236763</span></span><br></pre></td></tr></table></figure>



<h3 id="4-2-分组操作"><a href="#4-2-分组操作" class="headerlink" title="4.2 分组操作"></a>4.2 分组操作</h3><blockquote>
<p>代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/7 15:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: 分组操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 正则匹配模式</span></span><br><span class="line">        <span class="comment">// 分组两组匹配：字母和数字</span></span><br><span class="line">        Pattern pattern = Pattern.compile(<span class="string">&quot;([A-Za-z]+)([0-9]+)&quot;</span>);</span><br><span class="line">        <span class="comment">// 匹配操作引擎</span></span><br><span class="line">        Matcher matcher = pattern.matcher(<span class="string">&quot;KHighness18||ParaK23||FlowerK67||KAG63||KAG72&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;-----第%d组-----\n&quot;</span>, index++);</span><br><span class="line">            System.out.println(<span class="string">&quot;group[0]: &quot;</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;group[1]: &quot;</span> + matcher.group(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">-----第<span class="number">1</span>组-----</span><br><span class="line"><span class="built_in">group</span>[<span class="number">0</span>]: KHighness18</span><br><span class="line"><span class="built_in">group</span>[<span class="number">1</span>]: KHighness</span><br><span class="line">-----第<span class="number">2</span>组-----</span><br><span class="line"><span class="built_in">group</span>[<span class="number">0</span>]: ParaK23</span><br><span class="line"><span class="built_in">group</span>[<span class="number">1</span>]: ParaK</span><br><span class="line">-----第<span class="number">3</span>组-----</span><br><span class="line"><span class="built_in">group</span>[<span class="number">0</span>]: FlowerK67</span><br><span class="line"><span class="built_in">group</span>[<span class="number">1</span>]: FlowerK</span><br><span class="line">-----第<span class="number">4</span>组-----</span><br><span class="line"><span class="built_in">group</span>[<span class="number">0</span>]: KAG63</span><br><span class="line"><span class="built_in">group</span>[<span class="number">1</span>]: KAG</span><br><span class="line">-----第<span class="number">5</span>组-----</span><br><span class="line"><span class="built_in">group</span>[<span class="number">0</span>]: KAG72</span><br><span class="line"><span class="built_in">group</span>[<span class="number">1</span>]: KAG</span><br></pre></td></tr></table></figure>



<h3 id="4-3-替换操作"><a href="#4-3-替换操作" class="headerlink" title="4.3 替换操作"></a>4.3 替换操作</h3><blockquote>
<p>代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/7 16:09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: 替换操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 正则匹配模式</span></span><br><span class="line">        Pattern pattern = Pattern.compile(<span class="string">&quot;[0-9]&quot;</span>);</span><br><span class="line">        <span class="comment">// 匹配操作引擎</span></span><br><span class="line">        Matcher matcher = pattern.matcher(<span class="string">&quot;KHighness18||ParaK23||FlowerK67||KAG63||KAG72&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数字全部替换为##</span></span><br><span class="line">        String newStr = matcher.replaceAll(<span class="string">&quot;#&quot;</span>);</span><br><span class="line">        System.out.println(newStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">KHighness<span class="comment">##||ParaK##||FlowerK##||KAG##||KAG##</span></span><br></pre></td></tr></table></figure>



<h3 id="4-4-分割操作"><a href="#4-4-分割操作" class="headerlink" title="4.4 分割操作"></a>4.4 分割操作</h3><blockquote>
<p>代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/7 16:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: 分割操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;K18H23I67G63H72N18E23S67S6372&quot;</span>;</span><br><span class="line">        String[] arr = str.split(<span class="string">&quot;\\d+&quot;</span>); <span class="comment">// 以数字为边界进行切割</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">K</span>, <span class="type">H</span>, <span class="type">I</span>, <span class="type">G</span>, <span class="type">H</span>, <span class="type">N</span>, <span class="type">E</span>, <span class="type">S</span>, <span class="type">S</span>]</span><br></pre></td></tr></table></figure>



<h3 id="4-5-爬取腾讯官网所有的超链接"><a href="#4-5-爬取腾讯官网所有的超链接" class="headerlink" title="4.5 爬取腾讯官网所有的超链接"></a>4.5 爬取腾讯官网所有的超链接</h3><blockquote>
<p>代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/7 16:24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: 爬取腾讯官网的所有超链接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSpider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过URL获取html</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> urlStr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getURLContent</span><span class="params">(String urlStr)</span> </span>&#123;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(urlStr);</span><br><span class="line">            BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(url.openStream(), Charset.forName(<span class="string">&quot;UTF-8&quot;</span>)));</span><br><span class="line">            String temp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">while</span> ((temp = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stringBuilder.append(temp + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将匹配结果装进list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destStr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> regex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getMatcherSubs</span><span class="params">(String destStr, String regex)</span> </span>&#123;</span><br><span class="line">        Pattern pattern = Pattern.compile(regex);</span><br><span class="line">        Matcher matcher = pattern.matcher(destStr);</span><br><span class="line">        List&lt;String&gt; result = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            result.add(matcher.group(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;https://www.tencent.com/zh-cn&quot;</span>;</span><br><span class="line">        WebSpider spider = <span class="keyword">new</span> WebSpider();</span><br><span class="line">        <span class="comment">// 获取超链接标签a的内容 &lt;a\s\S]+?&lt;/a&gt;</span></span><br><span class="line">        <span class="comment">// 获取href的内容 href=\&quot;(.+?)\&quot;</span></span><br><span class="line">        spider.getMatcherSubs(spider.getURLContent(url), <span class="string">&quot;href=\\\&quot;([\\w\\s./:]+?)\\\&quot;&quot;</span>).stream().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/css/base.css</span><br><span class="line">/css/index.css</span><br><span class="line">https://weibo.com/tencent</span><br><span class="line">https://twitter.com/TencentGlobal</span><br><span class="line">https://www.linkedin.com/company/tencent/</span><br><span class="line">https://careers.tencent.com/</span><br><span class="line">https://join.qq.com/</span><br><span class="line">https://spd.tencent.com/portal</span><br><span class="line">https://ipr.tencent.com/</span><br><span class="line">http://beian.miit.gov.cn/</span><br><span class="line">http://beian.miit.gov.cn/</span><br><span class="line">http://beian.miit.gov.cn/</span><br><span class="line">/css/rem.css</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Regex</tag>
      </tags>
  </entry>
  <entry>
    <title>博弈论</title>
    <url>/posts/12bcd26e/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><center>
    <font face="Kristen ITC" color="#555555" size=3>Khighness、寻找必败态</font><br>
</center>



<h2 id="1-巴什博弈"><a href="#1-巴什博弈" class="headerlink" title="1. 巴什博弈"></a>1. 巴什博弈</h2><br>

<h3 id="1-1-问题"><a href="#1-1-问题" class="headerlink" title="1.1 问题"></a>1.1 问题</h3><blockquote>
<p>两个顶尖聪明的人在玩游戏，有 n 个石子，每个人每次拿 1~m 个石头，拿掉最后一块石头的人就是获胜者。请问先手与后手谁必胜？</p>
</blockquote>
<br>

<h3 id="1-2-分析"><a href="#1-2-分析" class="headerlink" title="1.2 分析"></a>1.2 分析</h3><blockquote>
<p>分类讨论: </p>
<p>（1）当n ≤ m时，这时先手的人可以一次取走所有的；</p>
<p>（2）当n = m+1时，这时先手无论取走多少个，后手的人都能取走剩下所有的；</p>
<p>（3）当n = k ∗ ( m + 1)时，对于每(m + 1)个石子，先手取i个，后手一定能将剩下的(m + 1 − i)个都取走，因此后手必胜；</p>
<p>（4）当n = k ∗ ( m + 1)  + x ( 0&lt; x&lt; m + 1)时，先手可以先取 x 个，之后的局势就回到了上一种情况，无论后手取多少个，先手都能取走m+1个中剩下的，因此先手必胜。</p>
</blockquote>
<br>

<h3 id="1-3-结论"><a href="#1-3-结论" class="headerlink" title="1.3 结论"></a>1.3 结论</h3><blockquote>
<p><strong>当n % m + 1) == 0时，后手必胜，否则先手必胜。</strong></p>
</blockquote>
<br>

<h3 id="1-4-代码"><a href="#1-4-代码" class="headerlink" title="1.4 代码"></a>1.4 代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BashGame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((n % (m + <span class="number">1</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;后手获胜&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;先手获胜&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="2-尼姆博弈"><a href="#2-尼姆博弈" class="headerlink" title="2. 尼姆博弈"></a>2. 尼姆博弈</h2><br>

<h3 id="2-1-问题"><a href="#2-1-问题" class="headerlink" title="2.1 问题"></a>2.1 问题</h3><blockquote>
<p>两个顶尖聪明的人在玩游戏，有 n 堆石子，第 i 堆有 ai 每个人每次能从一堆石子中取任意多个石子但不能不取，不能取的人输。请问先手与后手谁必胜？</p>
</blockquote>
<br>

<h3 id="2-2-分析"><a href="#2-2-分析" class="headerlink" title="2.2 分析"></a>2.2 分析</h3><blockquote>
<p>（1）当n = 1时，显然先手取走这一堆就能获胜；</p>
<p>（2）当n = 2且a1 != a2时，我们假设a1 &gt; a2，先手可以先在第一堆取走a1-a2个，下一次无论后手取走多少个，先手都可以在另一堆取走相同的个数，因此先手必胜；</p>
<p>（3）当n = 2且a1 == a2时，先手无论取多少个，后手都可以在另一堆取相同的个数，因此后手必胜；</p>
<p>（4）当n &gt;= 3时，问题变得繁琐起来，先找出规律性的结论。</p>
</blockquote>
<br>

<h3 id="2-3-结论"><a href="#2-3-结论" class="headerlink" title="2.3 结论"></a>2.3 结论</h3><blockquote>
<p><strong>当 a1 ^ a2 ^ ··· ^ an =  0 时，后手必胜，否则先手必胜。</strong></p>
<p><strong>证明：</strong></p>
<p>假设当前：a1 ^ a2 ^ ··· ^ an =  0，</p>
<p>先手回合：取走若干个后，</p>
<p>局势变成：a1 ^ a2 ^ ··· ^ an =  K，</p>
<p>即：a1 ^ a2 ^ ··· ^ an ^ K = 0。</p>
<p>假设 K 的最高位1在第 x 位，</p>
<p>那么必然存在 aj (1 &lt; = j &lt;= n) 的 第 x 位为1，</p>
<p>后手回合：只要把 aj 变成 aj ^ K，</p>
<p>就能使得：a1 ^ a2 ^ ··· ^ an =  0。</p>
<p>由于 aj ^ K 使得第 x 位 为0，无论低位是什么，</p>
<p>第 x 位变为0后，aj 整个数一定会变小，即：aj ^ K &lt; aj，</p>
<p>所以后手只需在第 j 堆取走(aj - aj ^ K)个石子即可。</p>
<p>先手每次取完，后手每次取(aj - aj ^ K)，</p>
<p>最后的局势一定是：a1 = a2 = ··· = an = 0，</p>
<p>此时先手无法取了，后手必胜。</p>
<p>反之，当a1 ^ a2 ^ ··· ^ an = K 时，</p>
<p>局势反转，先手每次取(aj - aj ^ K)个即可，先手必胜。</p>
</blockquote>
<br>

<h3 id="2-4-代码"><a href="#2-4-代码" class="headerlink" title="2.4 代码"></a>2.4 代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NimGame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : a) &#123;</span><br><span class="line">            res ^= i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;后手获胜&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;先手获胜&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="3-尼姆Plus博弈"><a href="#3-尼姆Plus博弈" class="headerlink" title="3. 尼姆Plus博弈"></a>3. 尼姆Plus博弈</h2><br>

<h3 id="3-1-问题"><a href="#3-1-问题" class="headerlink" title="3.1 问题"></a>3.1 问题</h3><blockquote>
<p>两个顶尖聪明的人在玩游戏，有 n 堆石子，第 i 堆有 ai 个石子，每个人每次能从 1~d 堆石子中取任意多个石子但不能不取，不能取的人输。请问先手与后手谁必胜？</p>
</blockquote>
<br>

<h3 id="3-2-分析"><a href="#3-2-分析" class="headerlink" title="3.2 分析"></a>3.2 分析</h3><blockquote>
<p>特么太难了啊，呜呜呜我好菜</p>
</blockquote>
<br>

<h3 id="3-3-结论"><a href="#3-3-结论" class="headerlink" title="3.3 结论"></a>3.3 结论</h3><blockquote>
<p><strong>将每堆石子数量用二进制表示，对于二进制的任意一位，如果这一位为1的石子堆数量%(d+1)==0，那么后手必胜，否则先手必胜。</strong></p>
</blockquote>
<br>

<h3 id="3-4-证明"><a href="#3-4-证明" class="headerlink" title="3.4 证明"></a>3.4 证明</h3><blockquote>
<p>只需要证明三点：</p>
<ol>
<li><p>终止局面为先手必败（显然）</p>
</li>
<li><p>任意先手必胜的局面都能转变成先手必败的局面</p>
</li>
<li><p>任意先手必败的局面都不能转变成先手必胜的局面</p>
</li>
</ol>
<p><strong>证明</strong></p>
<p>证明2:</p>
<p>假设最高位%(d+1) != 0有m堆，那么将这些堆的这一位变成0；</p>
<p>假设下一位%(d+1) != 0的位有n个，之前m堆中这一位有a个1和b个0。</p>
<p>（1）如果n &lt;= a，显然将这a中的n个变成0即可；</p>
<p>（2）如果(d+1) - n &lt;= b，那么只要将b个中的(d+1) - n个变成1即可；</p>
<p>因为之前最高位是将1变成0，所以这一位即使由0变1，这堆石子也是减少的；</p>
<p>（3）如果两个都不满足，即a &gt; n &amp;&amp; b &lt; (d + 1 - n)，那么只要将这a堆和m堆之外的(n - a)堆的这一位变成0，</p>
<p>那么总改变堆数为 a + b + (n - a) = b + n &lt; (d + 1) - n + n = d + 1，</p>
<p>即将这一位变成%(d+1) = 0需要改变的总堆数要小于(d+1)，</p>
<p>即可以一次操作完成，然后以此类推就能使每一位都变为%(d+1)=0。</p>
<p>证明3:</p>
<p>因为一次最多操作d堆石子，因此不能将(d+1)堆某一位是1的石子堆的这一位都变为0。</p>
</blockquote>
<br>

<h2 id="4-威佐夫博弈"><a href="#4-威佐夫博弈" class="headerlink" title="4. 威佐夫博弈"></a>4. 威佐夫博弈</h2><br>

<h3 id="4-1-问题"><a href="#4-1-问题" class="headerlink" title="4.1 问题"></a>4.1 问题</h3><blockquote>
<p>两个顶尖聪明的人在玩游戏，有 2 堆石子，每个人每次可以从任意一堆石子中取任意多的石子或者从两堆石子中取同样多的石子，不能取的人输。请问先手与后手谁必胜？</p>
</blockquote>
<br>

<h3 id="4-2-分析"><a href="#4-2-分析" class="headerlink" title="4.2 分析"></a>4.2 分析</h3><blockquote>
<p>威佐夫博弈不同于巴什博弈和尼姆博弈，它的特殊之处在于不能将两堆石子分开分析。</p>
<p><em>下面分析不想看的直接跳过记住结论即可</em></p>
<p>定义先手必输的局势为奇异局势，前几个奇异局势为: (0, 0), (1, 2), (3, 5), (4, 7), (6,10)……</p>
<p>假设 (x, y) 为第 k 个奇异局势</p>
<p>性质：</p>
<ul>
<li>x为前 1···k 个奇异局势中没有出现过的最小正整数，y = x + k (打表找规律)</li>
<li>任何一个自然数都包含在一个且仅有一个奇异局势中</li>
<li>任何操作都会将奇异局势变为非奇异局势</li>
<li>非奇异局势可以通过适当操作变为奇异局势</li>
</ul>
<p>证明这个结论，只需证明：</p>
<ol>
<li>任意自然数都出现过</li>
<li>任意自然数仅出现一次</li>
</ol>
<p>反证法易证。</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/12bcd26e/%E5%A8%81%E4%BD%90%E5%A4%AB%E5%8D%9A%E5%BC%88.jpg" class="" title="XY">

<blockquote>
<p>我们可以将两堆石子看成是棋盘上一个点的纵横坐标，那么游戏切换：</p>
<p>棋盘上有一个点，每次每个人只能将棋子往左或者往下移动任意个格子，不能移动的人输。</p>
<p>将能一步到达(0, 0)的点都染色，那么这些点就是必胜态，再找到横纵坐标之和最小的没被染色的点，</p>
<p>这个点就是下一个必败态，由此画出上图。</p>
</blockquote>
<br>

<h3 id="4-3-结论"><a href="#4-3-结论" class="headerlink" title="4.3 结论"></a>4.3 结论</h3><blockquote>
<p><strong>根据<a href="https://baike.baidu.com/item/%E8%B4%9D%E8%92%82%E5%AE%9A%E7%90%86/2677437?fr=aladdin">Betty定理</a>，第K个局势就是(⌊(1+√5)/2 *k⌋, ⌊(3+√5)/2 *k⌋)，其中(1+√5)/2=1.618是黄金分割系数。</strong></p>
<p><strong>因此，局势(x, y)满足(y - x)*(1+√5)/2)=x时，先手必败，否则先手必胜。</strong></p>
</blockquote>
<br>

<h3 id="4-4-代码"><a href="#4-4-代码" class="headerlink" title="4.4 代码"></a>4.4 代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WizovGame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 保证 a &lt;= b</span></span><br><span class="line">        <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = b;</span><br><span class="line">            b = a;</span><br><span class="line">            a = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断 a == (b - a) * 黄金分割系数 (向上取整)</span></span><br><span class="line">        <span class="keyword">if</span> ( a == (<span class="keyword">int</span>) Math.ceil( (b - a) * (<span class="number">1</span> + Math.sqrt(<span class="number">5.0</span>)) / <span class="number">2</span>) ) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;后手获胜&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;先手获胜&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="5-斐波那契博弈"><a href="#5-斐波那契博弈" class="headerlink" title="5. 斐波那契博弈"></a>5. 斐波那契博弈</h2><br>

<h3 id="5-1-问题"><a href="#5-1-问题" class="headerlink" title="5.1 问题"></a>5.1 问题</h3><blockquote>
<p>两个顶尖聪明的人在玩游戏，有一堆石子，数量为n，两个人轮流取石子，规则如下：</p>
<p>（1）先手不能在第一次把所有的石子取完，至少取一颗；</p>
<p>（2）之后每次可以取的石子数至少为1，至多为对手刚取的石子数的2倍；</p>
<p>不能取的人输。请问先手与后手谁必胜？</p>
</blockquote>
<br>

<h3 id="5-2-结论"><a href="#5-2-结论" class="headerlink" title="5.2 结论"></a>5.2 结论</h3><blockquote>
<p><strong>当n为Fibonacci数的时候，后手必胜，否则先手必胜。</strong></p>
</blockquote>
<br>

<h3 id="5-3-证明"><a href="#5-3-证明" class="headerlink" title="5.3 证明"></a>5.3 证明</h3><blockquote>
<p>数学归纳法：</p>
<p>假设石子数量n = F[i]（斐波那契数列中的第i项{1, 1, 2, 3, 5······}）</p>
<p>（1）当 i = 2 时，n = 2，显然先手取一个，后手必胜</p>
<p>（2）当 i &gt; 2 时，假设当 i &lt;= k 时结论成立。</p>
<p>当i = k + 1时，F[i] = F[k] + F[k-1]，将石子分成两部分来看。</p>
<p>假设先手第一次取 x 个，后手第一次取 y 个。</p>
<p>1）如果 x &lt; F[k-1] / 3，因为 n = F[k-1] 时已经证明后手一定能取到 F[k-1] 个中的最后一个，</p>
<p>所以问题转化成了有 F[k] 个中的最后一个，这个也已经证明后手一定能取到F[k]中的最后一个。</p>
<p>所以后手必胜。</p>
<p>2）如果 F[k-1] / 3 &lt;= x &lt;= F[k]时，则F[k-1]中剩余数量小于2x，后手可以直接取完，</p>
<p>（如果不选择一次性取完，慢慢磨最终也会是所证明的F[k-1]的情况，后手最后取完）</p>
<p>即后手取了F[k-1]-x个，即y &lt;= 2/3 * F[k-1]。比较 2/3 * F[k-1] 与 1/2 * F[k] 的大小，</p>
<p>即比较4 * [k-1] 与 3 * F[k] 的大小：</p>
<p>由于 F[k] 函数递增 且 F[k] = F[k-1] + F[k-2]易知：2 * F[k-2] &lt; F[k] &lt; 2 * F[k-1]，</p>
<p>因而 3 * F[k] = 3 * F[k-1] + 3 * F[k-2] &gt; 3 * F[k-1] + 3 / 2 * F[k-1] &gt; 4 * F[k-1]。</p>
<p>也就是说，在后手取完F[k-1]那一堆石子之后，先手不能一次性取完F[k]那一堆石子，</p>
<p>于是问题最终演变成了F[k]的状况，后手最后取完。</p>
<p>3）如果 x &gt; F[k-1]，因为F[k] &lt; 2 * F[k-1]，后手可以一次性取完。</p>
<p>综上三种情况，当 i &lt;= k 时结论成立，那么当 n = k+1 时结论也成立。</p>
</blockquote>
<br>

<h3 id="5-4-代码"><a href="#5-4-代码" class="headerlink" title="5.4 代码"></a>5.4 代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FibonacciGame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fibnacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 递归计算，慢</span></span><br><span class="line"><span class="comment">//        if (n == 1 || n == 2)</span></span><br><span class="line"><span class="comment">//            return 1;</span></span><br><span class="line"><span class="comment">//        else</span></span><br><span class="line"><span class="comment">//            return fibnacci(n - 1) + fibnacci(n - 2);</span></span><br><span class="line">        <span class="comment">// 公式计算，快</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) Math.floor( ( Math.pow((<span class="number">1</span> + Math.sqrt(<span class="number">5</span>)) / <span class="number">2</span>, n)  - Math.pow((<span class="number">1</span> - Math.sqrt(<span class="number">5</span>)) / <span class="number">2</span>, n) ) / Math.sqrt(<span class="number">5</span>) );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; fibnacci(i) &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fibnacci(i+<span class="number">1</span>) == n) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;后手获胜&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;先手获胜&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Game</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据</title>
    <url>/posts/ec060e02/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-安装CentOS7"><a href="#1-安装CentOS7" class="headerlink" title="1. 安装CentOS7"></a>1. 安装CentOS7</h2><h3 id="1-下载镜像"><a href="#1-下载镜像" class="headerlink" title="1. 下载镜像"></a>1. 下载镜像</h3><blockquote>
<p>ISO: <a href="https://www.centos.org/download/">CentOS7 X86_64</a></p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915192222693.png" class="" title="image-20200915192222693">



<a id="more"></a>



<h3 id="2-安装系统"><a href="#2-安装系统" class="headerlink" title="2. 安装系统"></a>2. 安装系统</h3><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914201854650.png" class="" title="image-20200914201854650">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914201950325.png" class="" title="image-20200914201950325">



<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914202216056.png" class="" title="image-20200914202216056">



<h3 id="3-虚拟机完成"><a href="#3-虚拟机完成" class="headerlink" title="3. 虚拟机完成"></a>3. 虚拟机完成</h3><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914204312121.png" class="" title="image-20200914204312121">



<h3 id="4-安装Docker"><a href="#4-安装Docker" class="headerlink" title="4. 安装Docker"></a>4. 安装Docker</h3><blockquote>
<p>Docker要求CentOS系统的内核版本高于 3.10，查看CentOS版本是否支持 Docker</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200922202458823.png" class="" title="image-20200922202458823">

<blockquote>
<p>确保yum包更新到最新</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200922202118583.png" class="" title="image-20200922202118583">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200922202544937.png" class="" title="image-20200922202544937">

<blockquote>
<p>安装过Docker则卸载旧版本</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker  docker-common docker-selinux docker-engine</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200922204747806.png" class="" title="image-20200922204747806">

<blockquote>
<p>安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200922203530629.png" class="" title="image-20200922203530629">

<blockquote>
<p>设置yum源（使用阿里云地址）</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200922203620500.png" class="" title="image-20200922203620500">

<blockquote>
<p>可以查看所有仓库中所有的docker版本，并选择特定版本安装</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum list docker-ce --showduplicates | sort -r</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200922203726104.png" class="" title="image-20200922203726104">

<blockquote>
<p>安装最新版本的 Docker Engine-Community 和 containerd</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200922204125206.png" class="" title="image-20200922204125206">

<blockquote>
<p>验证是否安装成功</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200922204248819.png" class="" title="image-20200922204248819">

<blockquote>
<p>启动Docker</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200922204613291.png" class="" title="image-20200922204613291">

<blockquote>
<p>运行Hello World</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200922204637363.png" class="" title="image-20200922204637363">



<h2 id="2-搭建Hadoop集群"><a href="#2-搭建Hadoop集群" class="headerlink" title="2. 搭建Hadoop集群"></a>2. 搭建Hadoop集群</h2><h3 id="1-下载并配置JDK"><a href="#1-下载并配置JDK" class="headerlink" title="1. 下载并配置JDK"></a>1. 下载并配置JDK</h3><blockquote>
<p>下载 jdk</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install java-1.8.0-openjdk* -y</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914205909499.png" class="" title="image-20200914205909499">

<blockquote>
<p>获取JAVA_HOME</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dirname $(readlink $(readlink $(which java))) </span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置环境变量</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el7_8.x86_64</span><br><span class="line">export JRE_HOME=$JAVA_HOME/jre</span><br><span class="line">export CLASSPATH=$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914210707353.png" class="" title="image-20200914210707353">

<blockquote>
<p>查看JAVA_HOME</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br><span class="line">echo $JAVA_HOME</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200930135506971.png" class="" title="image-20200930135506971">

<blockquote>
<p>测试</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200930135637993.png" class="" title="image-20200930135637993">



<h3 id="2-配置Hosts列表"><a href="#2-配置Hosts列表" class="headerlink" title="2. 配置Hosts列表"></a>2. 配置Hosts列表</h3><p>由于两台虚拟机是同一台虚拟机复制而来，所以必须先重新生成Mac地址</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200930135951474.png" class="" title="image-20200930135951474">

<blockquote>
<p>master 和 slave 禁用防火墙</p>
</blockquote>
<p>停止防火墙 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure>

<p>禁用防火墙</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200913225928453.png" class="" title="image-20200913225928453">

<blockquote>
<p>master 和 slave 修改主机名</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;sysconfig&#x2F;network</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200913230804529.png" class="" title="image-20200913230804529">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200913230917724.png" class="" title="image-20200913230917724">

<blockquote>
<p>确认修改</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200913231003539.png" class="" title="image-20200913231003539">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200913231047961.png" class="" title="image-20200913231047961">

<blockquote>
<p>master 和 slave 执行 ifconfig 查询 IP</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914215339951.png" class="" title="image-20200914215339951">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914215731073.png" class="" title="image-20200914215731073">

<blockquote>
<p> master 和 slave 将IP地址和主机名分别添加至/etc/hosts中</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914215942690.png" class="" title="image-20200914215942690">

<blockquote>
<p>master 和 slave 之间互ping</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914220102245.png" class="" title="image-20200914220102245">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914220213547.png" class="" title="image-20200914220213547">



<h3 id="3-集群ssh免密登录"><a href="#3-集群ssh免密登录" class="headerlink" title="3. 集群ssh免密登录"></a>3. 集群ssh免密登录</h3><p>对master操作：</p>
<blockquote>
<p>master 生成公钥</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914220829338.png" class="" title="image-20200914220829338">

<blockquote>
<p>将公钥追加到授权列表</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914221008829.png" class="" title="image-20200914221008829">

<blockquote>
<p>修改authorized_keys文件的权限</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 600 ~/.ssh/authorized_keys </span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914221036706.png" class="" title="image-20200914221036706">

<blockquote>
<p>将authorized_keys文件复制到slave节点</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp ~/.ssh/authorized_keys parak@slave:~/.ssh</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914221427275.png" class="" title="image-20200914221427275">

<blockquote>
<p>查看slave的.ssh的目录</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914221514758.png" class="" title="image-20200914221514758">

<blockquote>
<p>修改master和slave的SSH配置</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su root</span><br><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914221856072.png" class="" title="image-20200914221856072">

<blockquote>
<p>使用ssh-add指令将私钥加入并重启sshd服务</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br><span class="line">service sshd restart</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试免密登录</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914223950719.png" class="" title="image-20200914223950719">

<p>ssh登录依然需要密码，我们可以去看一下master的日志文件</p>
<blockquote>
<p>cat  var/log/secure </p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200916160625256.png" class="" title="image-20200916160625256">

<blockquote>
<p><strong>原因</strong></p>
<p>sshd为了安全，对属主的目录和文件权限有所要求。</p>
<p>如果权限不对，则ssh的免密码登陆不生效。</p>
</blockquote>
<blockquote>
<p><strong>解决</strong></p>
<p>将.ssh目录的权限改为755</p>
<p>id_rsa.pub和authorized_keys权限改为644</p>
<p>id_rsa权限必须为600</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 755 .ssh</span><br><span class="line">cd .ssh</span><br><span class="line">chmod 644 id_rsa.pub authorized_keys</span><br><span class="line">chmod 600 id_rsa</span><br></pre></td></tr></table></figure>

<blockquote>
<p>再次测试免密登录</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914224837430.png" class="" title="image-20200914224837430">



<h3 id="4-下载并配置Hadoop"><a href="#4-下载并配置Hadoop" class="headerlink" title="4. 下载并配置Hadoop"></a>4. 下载并配置Hadoop</h3><blockquote>
<p>下载：<a href="https://www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-3.3.0/hadoop-3.3.0.tar.gz">hadoop-2.9.2</a>    选择bsfu的北京外国语学院的镜像, 速度流批</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914211714263.png" class="" title="image-20200914211714263">

<blockquote>
<p>解压下载的压缩包</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf hadoop-2.3.2.tar.gz</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914211633182.png" class="" title="image-20200914211633182">

<blockquote>
<p>修改文件权限</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 777 hadoop-env.sh core-site.xml hdfs-site.xml yarn-site.xml mapred-site.xml slaves</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914212318855.png" class="" title="image-20200914212318855">

<blockquote>
<p>配置环境变量</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gedit /home/parak/hadoop/hadoop-2.9.2/etc/hadoop/hadoop-env.sh</span><br><span class="line"></span><br><span class="line">添加</span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el7_8.x86_64</span><br><span class="line">export HADOOP_HOME=/home/parak/hadoop/hadoop-2.9.2</span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$&#123;HADOOP_HOME&#125;/bin:$&#123;HADOOP_HOME&#125;/sbin:$PATH</span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置核心组件  <strong><em>core-site.xml</em></strong></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/parak/hadoopdata<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914213003704.png" class="" title="image-20200914213003704">

<blockquote>
<p>配置文件系统  <strong><em>hdfs.site.xml</em></strong></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914213047280.png" class="" title="image-20200914213047280">

<blockquote>
<p>配置文件系统  <strong><em>yarn-site.xml</em></strong></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18040<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18030<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.resource-tracker.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18025<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.admin.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18141<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18088<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914213215770.png" class="" title="image-20200914213215770">

<blockquote>
<p>配置计算框架  <strong><em>mapred-site.xml</em></strong></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line"><span class="meta">--&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>



<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914213254714.png" class="" title="image-20200914213254714">

<blockquote>
<p>在master节点配置slaves文件 </p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914225547865.png" class="" title="image-20200914225547865">



<h3 id="5-启动Hadoo集群"><a href="#5-启动Hadoo集群" class="headerlink" title="5. 启动Hadoo集群"></a>5. 启动Hadoo集群</h3><blockquote>
<p>切换用户  <strong><em>parak</em></strong></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su parak</span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置Hadoop启动的系统环境变量</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd</span><br><span class="line">gedit ~/.bash_profile</span><br><span class="line"></span><br><span class="line">添加：</span><br><span class="line"><span class="meta">#</span><span class="bash">HADOOP</span></span><br><span class="line">export HADOOP_HOME=/home/parak/hadoop/hadoop-2.9.2</span><br><span class="line">export PATH=$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$PATH</span><br><span class="line"></span><br><span class="line">执行：</span><br><span class="line">source ~/.bash_profile</span><br><span class="line"></span><br><span class="line">验证：</span><br><span class="line">echo $&#123;HADOOP_HOME&#125;</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914213558226.png" class="" title="image-20200914213558226">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914230053210.png" class="" title="image-20200914230053210">

<blockquote>
<p>创建数据目录  <strong><em>hadoopdata</em></strong></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /home/parak/hadoopdata</span><br><span class="line">chmod 777 hadoopdata/</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914225858363.png" class="" title="image-20200914225858363">

<blockquote>
<p>格式化文件系统</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914230347627.png" class="" title="image-20200914230347627">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914230450.png" class="" title="image-20200914230450">

<blockquote>
<p>启动Hadoop</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sbin/start-all.sh</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914232331519.png" class="" title="image-20200914232331519">

<blockquote>
<p>查看进程</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jps</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914232056642.png" class="" title="image-20200914232056642">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914232211741.png" class="" title="image-20200914232211741">



<blockquote>
<p>进入 <strong>FireFox</strong> 输入：<a href="http://master:50070/">http://master:50070/</a>   </p>
<p>检查 <strong>namenode</strong> 和 <strong>datanode</strong> 是否正常</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914232603284.png" class="" title="image-20200914232603284">



<blockquote>
<p>进入 <strong>FireFox</strong> 输入：<a href="http://master:18088/">http://master:18088/</a></p>
<p>检查 <strong>Yarn</strong> 是否正常</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914232824073.png" class="" title="image-20200914232824073">



<blockquote>
<p>运行PI实例检查Hadoop集群是否搭建成功</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/hadoop/hadoop-2.9.2/share/hadoop/mapreduce/</span><br><span class="line">hadoop jar hadoop-mapreduce-examples-2.9.2.jar pi 10 10</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915083538083.png" class="" title="image-20200915083538083">

<blockquote>
<p> <strong>报错</strong>：未找到主机路由</p>
<p><strong>分析</strong>：slave的防火墙没有关闭</p>
</blockquote>
<blockquote>
<p>检查slave的防火墙</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915084136061.png" class="" title="image-20200915084136061">

<blockquote>
<p>关闭且禁用防火墙</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915084354244.png" class="" title="image-20200915084354244">

<blockquote>
<p>再次运行PI实例</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915084909905.png" class="" title="image-20200915084909905">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915084933355.png" class="" title="image-20200915084933355">

<p>可以看到运行结果：PI = 3.20000000000000000000</p>
<p><strong>综上，集群正常启动</strong></p>
<blockquote>
<p>关闭Hadoop集群</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915085606053.png" class="" title="image-20200915085606053">





<h2 id="3-分布式文件系统HDFS上的操作"><a href="#3-分布式文件系统HDFS上的操作" class="headerlink" title="3. 分布式文件系统HDFS上的操作"></a>3. 分布式文件系统HDFS上的操作</h2><h3 id="1-利用Shell命令与HDFS进行交互"><a href="#1-利用Shell命令与HDFS进行交互" class="headerlink" title="1. 利用Shell命令与HDFS进行交互"></a>1. 利用Shell命令与HDFS进行交互</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs    //适用于任何不同的文件系统，比如本地文件系统和HDFS文件系统</span><br><span class="line">hadoop dfa   //只能适用于HDFS文件系统</span><br><span class="line">hdfs dfs     //跟hadoop dfs的命令作用一样，也只能适用于HDFS文件系统</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915091307833.png" class="" title="image-20200915091307833">

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -help put</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915091423474.png" class="" title="image-20200915091423474">



<h4 id="1-目录操作"><a href="#1-目录操作" class="headerlink" title="(1) 目录操作"></a>(1) 目录操作</h4><blockquote>
<p>在HDFS中为parak用户创建一个用户目录，命令如下：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -mkdir -p /user/parak</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以使用如下命令显示HDFS中/user目录下的内容：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -ls /user</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915091936795.png" class="" title="image-20200915091936795">

<blockquote>
<p>创建/user/parak/input目录</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -mkdir -p /user/parak/input</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看/user/parak/input目录是否创建成功</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -ls /user/parak</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915094202790.png" class="" title="image-20200915094202790">

<blockquote>
<p>创建/input目录</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -mkdir -p /input</span><br></pre></td></tr></table></figure>

<blockquote>
<p>删除/input目录</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -rm -r /input</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看/input目录是否删除成功</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -ls /</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915094415033.png" class="" title="image-20200915094415033">



<h4 id="2-文件操作"><a href="#2-文件操作" class="headerlink" title="(2) 文件操作"></a>(2) 文件操作</h4><p>​       在实际应用中，经常需要从本地文件系统向HDFS中上传文件，或者把HDFS中的文件下载到本地文件系统中。</p>
<blockquote>
<p>首先，使用vim编辑器，在本地Linux文件系统的“/home/parak/”目录下创建一个文件myLocalFile.txt，里面输入：</p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Hadoop</span><br><span class="line">MapReduce</span><br><span class="line">Spark</span><br><span class="line">Khighness</span><br></pre></td></tr></table></figure>

<blockquote>
<p>然后，把本地文件系统的“/home/parak/myLocalFile.txt”上传到HDFS中的当前用户目录的input目录下，也就是上传到HDFS的“/user/parak/input/”目录下：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -put /home/parak/myLocalFile.txt /user/parak/input</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看一下文件是否成功上传到HDFS中：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -ls /user/parak/input</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看HDFS中的myLocalFile.txt这个文件的内容</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -cat /user/parak/input/myLocalFile.txt</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915094905208.png" class="" title="image-20200915094905208">

<blockquote>
<p>把HDFS中的myLocalFile.txt文件下载到本地文件系统中的“/home/parak/下载/”这个目录下</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -get /user/parak/input/myLocalFile.txt /home/parak/下载</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在本地查看下载下来的文件myLocalFile.txt</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd 下载</span><br><span class="line">ll</span><br><span class="line">cat myLocalFile.txt</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915100241999.png" class="" title="image-20200915100241999">

<blockquote>
<p>把HDFS的“/user/parak/input/myLocalFile.txt”文件，拷贝到HDFS的另外一个目录“/input”中</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -mkdir /input</span><br><span class="line">hadoop fs -cp /user/parak/input/myLocalFile.txt /input</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915100148440.png" class="" title="image-20200915100148440">



<h3 id="2-利用Web界面管理HDFS"><a href="#2-利用Web界面管理HDFS" class="headerlink" title="2. 利用Web界面管理HDFS"></a>2. 利用Web界面管理HDFS</h3><blockquote>
<p>在本机Chorme输入 <a href="http://192.168.117.141:50070/">http://192.168.117.141:50070</a> , 即可看到HDFS的Web管理界面</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915093904228.png" class="" title="image-20200915093904228">





<h2 id="4-分布式文件系统HDFS上的编程实践"><a href="#4-分布式文件系统HDFS上的编程实践" class="headerlink" title="4. 分布式文件系统HDFS上的编程实践"></a>4. 分布式文件系统HDFS上的编程实践</h2><h3 id="1-安装Eclipse"><a href="#1-安装Eclipse" class="headerlink" title="1. 安装Eclipse"></a>1. 安装Eclipse</h3><h4 id="1-官网下载安装包"><a href="#1-官网下载安装包" class="headerlink" title="(1) 官网下载安装包"></a>(1) 官网下载安装包</h4><blockquote>
<p>进入FireFox打开下载: <a href="http://www.eclipse.org/downloads/packages/release/neon/1a/eclipse-ide-java-ee-developers">eclipe</a></p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915190751901.png" class="" title="image-20200915190751901">

<blockquote>
<p>或者</p>
<p>百度网盘下载</p>
<p>链接: <a href="https://pan.baidu.com/s/1P4vDgBEj_eOSakabM93rew">https://pan.baidu.com/s/1P4vDgBEj_eOSakabM93rew</a></p>
<p>密码: eujp</p>
</blockquote>
<h4 id="2-解压安装包"><a href="#2-解压安装包" class="headerlink" title="(2) 解压安装包"></a>(2) 解压安装包</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar xzvf eclipse-inst-linux64.tar.gz </span><br><span class="line">cd eclipse-installer/</span><br><span class="line">ll</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915191250751.png" class="" title="image-20200915191250751">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915191446018.png" class="" title="image-20200915191446018">

<h4 id="3-安装Eclipse-For-JavaEE"><a href="#3-安装Eclipse-For-JavaEE" class="headerlink" title="(3) 安装Eclipse For JavaEE"></a>(3) 安装Eclipse For JavaEE</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">eclipse-inst.ini</span><br></pre></td></tr></table></figure>




<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915191721107.png" class="" title="image-20200915191721107.png">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915191841247.png" class="" title="image-20200915191841247.png">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915192946961.png" class="" title="image-20200915192946961.png">



<h4 id="4-创建桌面快捷方式"><a href="#4-创建桌面快捷方式" class="headerlink" title="(4) 创建桌面快捷方式"></a>(4) 创建桌面快捷方式</h4><blockquote>
<p>1、切换root身份：su root</p>
<p>2、进入usr/share/applications目录：cd /usr/share/applications</p>
<p>3、创建eclipase.desktop文件：touch eclipase.desktop</p>
<p>4、输入以下内容后保存：vi eclipase.desktop</p>
<p>5、最后将快捷方式复制到桌面，并添加信任即可</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name&#x3D;Eclipse</span><br><span class="line">Exec&#x3D;&#x2F;home&#x2F;parak&#x2F;eclipse&#x2F;eclipse-j2e&#x2F;eclipse&#x2F;eclipse</span><br><span class="line">Type&#x3D;Application</span><br><span class="line">Icon&#x3D;&#x2F;home&#x2F;parak&#x2F;eclipse&#x2F;eclipse-j2e&#x2F;eclipse&#x2F;icon.xpm</span><br><span class="line">Terminal&#x3D;false</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915195019210.png" class="" title="image-20200915195019210">



<h3 id="2-创建eclipse工程"><a href="#2-创建eclipse工程" class="headerlink" title="2. 创建eclipse工程"></a>2. 创建eclipse工程</h3><blockquote>
<p>双击eclipse桌面快捷方式</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915195625107.png" class="" title="image-20200915195625107">

<blockquote>
<p>进入eclipseIDE</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915195720416.png" class="" title="image-20200915195720416">

<blockquote>
<p>点击：File —&gt; Project —&gt; Java Project</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915200231455.png" class="" title="image-20200915200231455">

<blockquote>
<p>设置JRE</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915200448059.png" class="" title="image-20200915200448059">

<blockquote>
<p>添加JAR</p>
</blockquote>
<ul>
<li><strong>/home/parak/hadoop/hadoop-2.9.2/share/hadoop/common/</strong>:  <strong>hadoop-common-2.9.2.jar</strong>和<strong>hadoop-nfs-2.9.2.jar</strong></li>
<li><strong>/home/parak/hadoop/hadoop-2.9.2/share/hadoop/common/</strong>:  <strong>lib</strong>目录下的所有jar包</li>
<li><strong>/home/parak/hadoop/hadoop-2.9.2/share/hadoop/hdfs/</strong>:  <strong>hadoop-hdfs-2.9.2.jar</strong>和<strong>hadoop-hdfs-nfs-2.9.2.jar</strong></li>
<li><strong>/home/parak/hadoop/hadoop-2.9.2/share/hadoop/hdfs/</strong>:  <strong>lib</strong>目录下的所有jar包</li>
</ul>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915202106984.png" class="" title="image-20200915202106984">

<blockquote>
<p>点击Finish，点击Open Perspective，并且勾选Remember my decision</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915202239806.png" class="" title="image-20200915202239806">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915202452808.png" class="" title="image-20200915202452808">



<h3 id="3-编写一个Java应用程序检测HDFS中是否存在一个文件"><a href="#3-编写一个Java应用程序检测HDFS中是否存在一个文件" class="headerlink" title="3. 编写一个Java应用程序检测HDFS中是否存在一个文件"></a>3. 编写一个Java应用程序检测HDFS中是否存在一个文件</h3><h4 id="1-编写Java程序"><a href="#1-编写Java程序" class="headerlink" title="(1) 编写Java程序"></a>(1) 编写Java程序</h4><blockquote>
<p>右击HDFSExample —&gt; New —&gt; Class</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915203644447.png" class="" title="image-20200915203644447">

<blockquote>
<p>Name = HDFSFileIfExist，然后Finish</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915203811679.png" class="" title="image-20200915203811679">

<blockquote>
<p>编写代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> parak</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>   2020-9-15 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HDFSFileIfExist</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            String fileName = <span class="string">&quot;/user/parak/input/myLocalFile.txt&quot;</span>;</span><br><span class="line">            Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">            conf.set(<span class="string">&quot;fs.defaultFS&quot;</span>, <span class="string">&quot;hdfs://master:9000&quot;</span>);</span><br><span class="line">            conf.set(<span class="string">&quot;fs.hdfs.impl&quot;</span>, <span class="string">&quot;org.apache.hadoop.hdfs.DistributedFileSystem&quot;</span>);</span><br><span class="line">            FileSystem fs = FileSystem.get(conf);</span><br><span class="line">            <span class="keyword">if</span>(fs.exists(<span class="keyword">new</span> Path(fileName)))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;文件存在&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-运行程序"><a href="#2-运行程序" class="headerlink" title="(2) 运行程序"></a>(2) 运行程序</h4><blockquote>
<p>启动Hadoop集群</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915204824967.png" class="" title="image-20200915204824967">

<blockquote>
<p>运行程序</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915205051079.png" class="" title="image-20200915205051079">

<blockquote>
<p>运行结果</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915205218013.png" class="" title="image-20200915205218013">

<h4 id="3-部署到Hadoop平台上运行"><a href="#3-部署到Hadoop平台上运行" class="headerlink" title="(3) 部署到Hadoop平台上运行"></a>(3) 部署到Hadoop平台上运行</h4><blockquote>
<p>在hadoop安装目录下新建myapp目录，存放Hadoop应用程序</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir ~/hadoop/hadoop-2.9.2/myapp</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915205811634.png" class="" title="image-20200915205811634">

<blockquote>
<p>右击HDFSExample —&gt; Export —&gt; Java —&gt; Runnable JAR file —&gt; Next</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915210022617.png" class="" title="image-20200915210022617">

<blockquote>
<p>Lauch configuration: HDFSFileIfExist -HDFSExsmple</p>
<p>Export destination: /home/parak/hadoop/hadoop-2.9.2/myapp/HDFSExample.jar</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915210640358.png" class="" title="image-20200915210640358">

<blockquote>
<p>出现警告，选择OK</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915210911473.png" class="" title="image-20200915210911473">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915211215820.png" class="" title="image-20200915211215820">

<blockquote>
<p>查看myapp中生成的HDFSExample.jar文件</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915211618901.png" class="" title="image-20200915211618901">

<blockquote>
<p>运行程序</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar ~/hadoop/hadoop-2.9.2/myapp/HDFSExample.jar </span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915211802010.png" class="" title="image-20200915211802010">



<h3 id="4-编写一个Java应用程序读-写HDFS文件"><a href="#4-编写一个Java应用程序读-写HDFS文件" class="headerlink" title="4. 编写一个Java应用程序读/写HDFS文件"></a>4. 编写一个Java应用程序读/写HDFS文件</h3><h4 id="1-读取HDFS文件程序"><a href="#1-读取HDFS文件程序" class="headerlink" title="(1) 读取HDFS文件程序"></a>(1) 读取HDFS文件程序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataInputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> parak</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-9-15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HDFSReadFile</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">			conf.set(<span class="string">&quot;fs.defaultFS&quot;</span>, <span class="string">&quot;hdfs://master:9000&quot;</span>);</span><br><span class="line">			conf.set(<span class="string">&quot;fs.hdfs.impl&quot;</span>,</span><br><span class="line">					<span class="string">&quot;org.apache.hadoop.hdfs.DistributedFileSystem&quot;</span>);</span><br><span class="line">			FileSystem fs = FileSystem.get(conf);</span><br><span class="line">			Path file = <span class="keyword">new</span> Path(<span class="string">&quot;/user/parak/input/myLocalFile.txt&quot;</span>);</span><br><span class="line">			FSDataInputStream getIt = fs.open(file);</span><br><span class="line">			BufferedReader d = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(getIt));</span><br><span class="line">			String content = <span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">while</span>((content = d.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">				System.out.println(content);</span><br><span class="line">			&#125;</span><br><span class="line">			d.close(); <span class="comment">// 关闭文件</span></span><br><span class="line">			fs.close(); <span class="comment">// 关闭hdfs</span></span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915213406899.png" class="" title="image-20200915213406899">

<h4 id="2-写HDFS文件程序"><a href="#2-写HDFS文件程序" class="headerlink" title="(2) 写HDFS文件程序"></a>(2) 写HDFS文件程序</h4> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataOutputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> parak</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-9-15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HDFSWriteFile</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">			conf.set(<span class="string">&quot;fs.defaultFS&quot;</span>, <span class="string">&quot;hdfs://master:9000&quot;</span>);</span><br><span class="line">			conf.set(<span class="string">&quot;fs.hdfs.impl&quot;</span>,</span><br><span class="line">					<span class="string">&quot;org.apache.hadoop.hdfs.DistributedFileSystem&quot;</span>);</span><br><span class="line">			FileSystem fs = FileSystem.get(conf);</span><br><span class="line">			<span class="keyword">byte</span>[] buff = <span class="string">&quot;Hello, Khighness&quot;</span>.getBytes(); <span class="comment">// 要写入的内容</span></span><br><span class="line">			String filename = <span class="string">&quot;/user/parak/test.txt&quot;</span>; <span class="comment">// 要写入的文件名</span></span><br><span class="line">			FSDataOutputStream os = fs.create(<span class="keyword">new</span> Path(filename));</span><br><span class="line">			os.write(buff, <span class="number">0</span>, buff.length);</span><br><span class="line">			System.out.println(<span class="string">&quot;Create:&quot;</span> + filename);</span><br><span class="line">			os.close();</span><br><span class="line">			fs.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915213012019.png" class="" title="image-20200915213012019">



<h2 id="5-Eclipse上的HDFS操作"><a href="#5-Eclipse上的HDFS操作" class="headerlink" title="5. Eclipse上的HDFS操作"></a>5. Eclipse上的HDFS操作</h2><h3 id="1-安装Hadoop-Eclipse-Plugin"><a href="#1-安装Hadoop-Eclipse-Plugin" class="headerlink" title="1. 安装Hadoop-Eclipse-Plugin"></a>1. 安装Hadoop-Eclipse-Plugin</h3><p>(1) 下载相关插件：<a href="https://github.com/winghc/hadoop2x-eclipse-plugin">hadoop-eclipse-plugin</a></p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200922203150692.png" class="" title="image-20200922203150692">

<p>我是vpn下载下来的，分享一下：</p>
<blockquote>
<p>完整包</p>
<p>网盘链接：<a href="https://pan.baidu.com/s/1Q72HyCSUnh-Q0JRQK03Jjg">https://pan.baidu.com/s/1Q72HyCSUnh-Q0JRQK03Jjg</a></p>
<p>提取码：kkkk</p>
<p>插件包</p>
<p>网盘链接：<a href="https://pan.baidu.com/s/1dfBm7JB4ZXTR3bwF7PSaKA">https://pan.baidu.com/s/1dfBm7JB4ZXTR3bwF7PSaKA</a></p>
<p>提取码：kkkk</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200922222447098.png" class="" title="image-20200922222447098">



<p>(2) 下载后将release中的<code>hadoop-eclipse-plugin-2.6.0.jar</code>复制到 Eclipse 安装目录的 plugins 文件夹中</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200922223813270.png" class="" title="image-20200922223813270">

<p>(3) 运行 <code>eclipse-clean</code> 重启 Eclipse</p>
<h3 id="2-配置Hadoop-Eclipse-Plugin"><a href="#2-配置Hadoop-Eclipse-Plugin" class="headerlink" title="2. 配置Hadoop-Eclipse-Plugin"></a>2. 配置Hadoop-Eclipse-Plugin</h3><p>配置前开启Hadoop</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928131439434.png" class="" title="image-20200928131439434">

<p>(1) 切换到“Map/Reduce”开发视图</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928131546990.png" class="" title="image-20200928131546990">



<p>(2) 建立与Hadoop集群的连接</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928131720837.png" class="" title="image-20200928131720837">

<p>(3) 填写Hadoop连接配置</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928131907971.png" class="" title="image-20200928131907971">



<h3 id="3-在Eclipse中操作HDFS中的文件"><a href="#3-在Eclipse中操作HDFS中的文件" class="headerlink" title="3. 在Eclipse中操作HDFS中的文件"></a>3. 在Eclipse中操作HDFS中的文件</h3><p>点击左侧DFS Locations即可查看HDFS的文件列表</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928132219334.png" class="" title="image-20200928132219334">



<h2 id="6-在Eclipse中运行”Wold-Count”MapReduce程序"><a href="#6-在Eclipse中运行”Wold-Count”MapReduce程序" class="headerlink" title="6. 在Eclipse中运行”Wold Count”MapReduce程序"></a>6. 在Eclipse中运行”Wold Count”MapReduce程序</h2><h3 id="1-在Eclipse中创建”WordCount”MapReduce项目"><a href="#1-在Eclipse中创建”WordCount”MapReduce项目" class="headerlink" title="1. 在Eclipse中创建”WordCount”MapReduce项目"></a>1. 在Eclipse中创建”WordCount”MapReduce项目</h3><blockquote>
<p>选择File -&gt; New -&gt; Project -&gt; Map/Reduce Project</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928133415156.png" class="" title="image-20200928133415156">

<blockquote>
<p>项目名称=MyWordCount，然后Configure Hadoop install directory -&gt; Finish</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928133508525.png" class="" title="image-20200928133508525">

<blockquote>
<p>新建Java文件，name = WordCountTest</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928134118935.png" class="" title="image-20200928134118935">

<blockquote>
<p>代码如下</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.GenericOptionsParser;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> parak</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>   2020-9-28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WordCountTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        String[] otherArgs = (<span class="keyword">new</span> GenericOptionsParser(conf, args)).getRemainingArgs();</span><br><span class="line">        <span class="keyword">if</span>(otherArgs.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;Usage: wordcount &lt;in&gt; [&lt;in&gt;...] &lt;out&gt;&quot;</span>);</span><br><span class="line">            System.exit(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        Job job = Job.getInstance(conf, <span class="string">&quot;word count test&quot;</span>);</span><br><span class="line">        job.setJarByClass(WordCountTest.class);</span><br><span class="line">        job.setMapperClass(WordCountTest.TokenizerMapper.class);</span><br><span class="line">        job.setCombinerClass(WordCountTest.IntSumReducer.class);</span><br><span class="line">        job.setReducerClass(WordCountTest.IntSumReducer.class);</span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; otherArgs.length - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            FileInputFormat.addInputPath(job, <span class="keyword">new</span> Path(otherArgs[i]));</span><br><span class="line"> </span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(otherArgs[otherArgs.length - <span class="number">1</span>]));</span><br><span class="line">        System.exit(job.waitForCompletion(<span class="keyword">true</span>)?<span class="number">0</span>:<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntSumReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> IntWritable result = <span class="keyword">new</span> IntWritable();</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">IntSumReducer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Reducer&lt;Text, IntWritable, Text, IntWritable&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">            IntWritable val;</span><br><span class="line">            <span class="keyword">for</span>(Iterator itr = values.iterator(); itr.hasNext(); sum += val.get()) &#123;</span><br><span class="line">                val = (IntWritable)itr.next();</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">this</span>.result.set(sum);</span><br><span class="line">            context.write(key, <span class="keyword">this</span>.result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenizerMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Object</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> IntWritable one = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">private</span> Text word = <span class="keyword">new</span> Text();</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TokenizerMapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Object key, Text value, Mapper&lt;Object, Text, Text, IntWritable&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            StringTokenizer itr = <span class="keyword">new</span> StringTokenizer(value.toString());</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">while</span>(itr.hasMoreTokens()) &#123;</span><br><span class="line">                <span class="keyword">this</span>.word.set(itr.nextToken());</span><br><span class="line">                context.write(<span class="keyword">this</span>.word, one);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-添加log4j-properties配置文件到src目录下"><a href="#2-添加log4j-properties配置文件到src目录下" class="headerlink" title="2. 添加log4j.properties配置文件到src目录下"></a>2. 添加log4j.properties配置文件到src目录下</h3><blockquote>
<p>新建文件</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928205438905.png" class="" title="image-20200928205438905">

<blockquote>
<p>内容如下</p>
</blockquote>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span> = <span class="string">INFO,KAG,CONSOLE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.KAG.Threshold</span>=<span class="string">INFO</span></span><br><span class="line"><span class="meta">log4j.appender.KAG.encoding</span>=<span class="string">UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.KAG</span> = <span class="string">org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.KAG.File</span>=<span class="string">log/sHadoop.log</span></span><br><span class="line"><span class="meta">log4j.appender.KAG.ImmediateFlush</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.KAG.DatePattern</span>=<span class="string">&#x27;_&#x27;yyyy-MM-dd</span></span><br><span class="line"><span class="meta">log4j.appender.KAG.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.KAG.layout.ConversionPattern</span>=<span class="string">%-d&#123;yyyy-MM-dd HH:mm:ss&#125; KAG %-5p [%c] - %m%n</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.CONSOLE</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.Threshold</span>=<span class="string">INFO</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.CONSOLE.Target</span>=<span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.CONSOLE.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.CONSOLE.layout.ConversionPattern</span>=<span class="string">%-d&#123;yyyy-MM-dd HH:mm:ss&#125; KAG %-5p [%c] - %m%n</span></span><br></pre></td></tr></table></figure>



<h3 id="3-通过Eclipse运行“MyWordCount”-MapReduce项目"><a href="#3-通过Eclipse运行“MyWordCount”-MapReduce项目" class="headerlink" title="3. 通过Eclipse运行“MyWordCount” MapReduce项目"></a>3. 通过Eclipse运行“MyWordCount” MapReduce项目</h3><blockquote>
<p>更改运行配置</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928183606296.png" class="" title="image-20200928183606296"> 

<blockquote>
<p>运行结果</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928184930876.png" class="" title="image-20200928184930876">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928184947160.png" class="" title="image-20200928184947160">

<blockquote>
<p>查看/user/parak/output目录，和目录下的文件</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928185257730.png" class="" title="image-20200928185257730">

<blockquote>
<p>重启Eclipse，在Eclipse中查看HDFS文件系统，/user/parak/output</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928185548345.png" class="" title="image-20200928185548345">



<h3 id="4-在Hadoop平台上部署WordCount程序"><a href="#4-在Hadoop平台上部署WordCount程序" class="headerlink" title="4. 在Hadoop平台上部署WordCount程序"></a>4. 在Hadoop平台上部署WordCount程序</h3><blockquote>
<p>右键 WordCountTest —&gt; Export</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928205719777.png" class="" title="image-20200928205719777">

<blockquote>
<p>选择 Java —&gt; Runnable JAR File —&gt; Next</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928205756522.png" class="" title="image-20200928205756522">

<blockquote>
<p>填入内容：</p>
<p>Lauch configuration: WordCountTest - MyWordCount</p>
<p>Export destination: /home/parak/hadoop/hadoop-2.9.2/myapp/WordCount.jar</p>
<p>然后Finish即可</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928210235072.png" class="" title="image-20200928210235072">

<blockquote>
<p>运行程序</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -jar /home/parak/hadoop/hadoop-<span class="number">2.9</span>.<span class="number">2</span>/myapp/WordCount.jar</span><br></pre></td></tr></table></figure>



<h2 id="7-统计某电商网站买家收藏商品数量"><a href="#7-统计某电商网站买家收藏商品数量" class="headerlink" title="7. 统计某电商网站买家收藏商品数量"></a>7. 统计某电商网站买家收藏商品数量</h2><p><strong>要求</strong></p>
<p>现有某电商网站用户对商品的收藏数据，记录了用户收藏的商品id以及收藏日期，名为buyer_favorite1。buyer_favorite1包含：买家id，商品id，收藏日期这三个字段，数据以“\t”分割，样本数据及格式如下：</p>
<ol>
<li><p>买家id  商品id  收藏日期 </p>
</li>
<li><p>10181  1000481  2010-04-04 16:54:31 </p>
</li>
<li><p>20001  1001597  2010-04-07 15:07:52 </p>
</li>
<li><p>20001  1001560  2010-04-07 15:08:27 </p>
</li>
<li><p>20042  1001368  2010-04-08 08:20:30 </p>
</li>
<li><p>20067  1002061  2010-04-08 16:45:33 </p>
</li>
<li><p>20056  1003289  2010-04-12 10:50:55 </p>
</li>
<li><p>20056  1003290  2010-04-12 11:57:35 </p>
</li>
<li><p>20056  1003292  2010-04-12 12:05:29 </p>
</li>
<li><p>20054  1002420  2010-04-14 15:24:12 </p>
</li>
<li><p>20055  1001679  2010-04-14 19:46:04 </p>
</li>
<li><p>20054  1010675  2010-04-14 15:23:53 </p>
</li>
<li><p>20054  1002429  2010-04-14 17:52:45 </p>
</li>
<li><p>20076  1002427  2010-04-14 19:35:39 </p>
</li>
<li><p>20054  1003326  2010-04-20 12:54:44 </p>
</li>
<li><p>20056  1002420  2010-04-15 11:24:49 </p>
</li>
<li><p>20064  1002422  2010-04-15 11:35:54 </p>
</li>
<li><p>20056  1003066  2010-04-15 11:43:01 </p>
</li>
<li><p>20056  1003055  2010-04-15 11:43:06 </p>
</li>
<li><p>20056  1010183  2010-04-15 11:45:24 </p>
</li>
<li><p>20056  1002422  2010-04-15 11:45:49 </p>
</li>
<li><p>20056  1003100  2010-04-15 11:45:54 </p>
</li>
<li><p>20056  1003094  2010-04-15 11:45:57 </p>
</li>
<li><p>20056  1003064  2010-04-15 11:46:04 </p>
</li>
<li><p>20056  1010178  2010-04-15 16:15:20 </p>
</li>
<li><p>20076  1003101  2010-04-15 16:37:27 </p>
</li>
<li><p>20076  1003103  2010-04-15 16:37:05 </p>
</li>
<li><p>20076  1003100  2010-04-15 16:37:18 </p>
</li>
<li><p>20076  1003066  2010-04-15 16:37:31 </p>
</li>
<li><p>20054  1003103  2010-04-15 16:40:14 </p>
</li>
<li><p>20054  1003100  2010-04-15 16:40:16 </p>
</li>
</ol>
<p>要求编写MapReduce程序，统计每个买家收藏商品数量。</p>
<h3 id="1-在文档下新建文件buyer-favourite9"><a href="#1-在文档下新建文件buyer-favourite9" class="headerlink" title="1. 在文档下新建文件buyer_favourite9"></a>1. 在文档下新建文件buyer_favourite9</h3><blockquote>
<p>写入数据</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10181   1000481   2010-04-04添加到日历 16:54:31</span><br><span class="line">20001   1001597   2010-04-07 15:07:52</span><br><span class="line">20001   1001560   2010-04-07 15:08:27</span><br><span class="line">20042   1001368   2010-04-08 08:20:30</span><br><span class="line">20067   1002061   2010-04-08 16:45:33</span><br><span class="line">20056   1003289   2010-04-12 10:50:55</span><br><span class="line">20056   1003290   2010-04-12 11:57:35</span><br><span class="line">20056   1003292   2010-04-12 12:05:29</span><br><span class="line">20054   1002420   2010-04-14 15:24:12</span><br><span class="line">20055   1001679   2010-04-14 19:46:04</span><br><span class="line">20054   1010675   2010-04-14 15:23:53</span><br><span class="line">20054   1002429   2010-04-14 17:52:45</span><br><span class="line">20076   1002427   2010-04-14 19:35:39</span><br><span class="line">20054   1003326   2010-04-20 12:54:44</span><br><span class="line">20056   1002420   2010-04-15 11:24:49</span><br><span class="line">20064   1002422   2010-04-15 11:35:54</span><br><span class="line">20056   1003066   2010-04-15 11:43:01</span><br><span class="line">20056   1003055   2010-04-15 11:43:06</span><br><span class="line">20056   1010183   2010-04-15 11:45:24</span><br><span class="line">20056   1002422   2010-04-15 11:45:49</span><br><span class="line">20056   1003100   2010-04-15 11:45:54</span><br><span class="line">20056   1003094   2010-04-15 11:45:57</span><br><span class="line">20056   1003064   2010-04-15 11:46:04</span><br><span class="line">20056   1010178   2010-04-15 16:15:20</span><br><span class="line">20076   1003101   2010-04-15 16:37:27</span><br><span class="line">20076   1003103   2010-04-15 16:37:05</span><br><span class="line">20076   1003100   2010-04-15 16:37:18</span><br><span class="line">20076   1003066   2010-04-15 16:37:31</span><br><span class="line">20054   1003103   2010-04-15 16:40:14</span><br><span class="line">20054   1003100   2010-04-15 16:40:16 </span><br></pre></td></tr></table></figure>



<h3 id="2-将buyer-favourite9上传到HDFS文件系统"><a href="#2-将buyer-favourite9上传到HDFS文件系统" class="headerlink" title="2. 将buyer_favourite9上传到HDFS文件系统"></a>2. 将buyer_favourite9上传到HDFS文件系统</h3><blockquote>
<p>右键input —&gt; Upload files to DFS</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928222920023.png" class="" title="image-20200928222920023">

<blockquote>
<p>选择buyer_favourite1后确定</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928225427432.png" class="" title="image-20200928225427432">



<h3 id="3-新建java文件ProductNumber"><a href="#3-新建java文件ProductNumber" class="headerlink" title="3. 新建java文件ProductNumber"></a>3. 新建java文件ProductNumber</h3><blockquote>
<p>代码如下</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;  </span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;  </span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;  </span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;  </span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;  </span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;  </span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat; </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> parak</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-9-28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductNumber</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">		Job job = Job.getInstance();</span><br><span class="line">		job.setJobName(<span class="string">&quot;ProductNumber&quot;</span>);</span><br><span class="line">		job.setJarByClass(ProductNumber.class);</span><br><span class="line">		job.setMapperClass(MapperHandler.class);  </span><br><span class="line">		job.setReducerClass(ReducerHandler.class);  </span><br><span class="line">		job.setOutputKeyClass(Text.class);  </span><br><span class="line">		job.setOutputValueClass(IntWritable.class);  </span><br><span class="line">		Path inputPath = <span class="keyword">new</span> Path(<span class="string">&quot;hdfs://master:9000/user/parak/input/buyer_favourite1&quot;</span>);</span><br><span class="line">		Path outputPath = <span class="keyword">new</span> Path(<span class="string">&quot;hdfs://master:9000/user/parak/output/buyer_favourite1_analysis_result&quot;</span>);</span><br><span class="line">		FileInputFormat.addInputPath(job, inputPath);</span><br><span class="line">		FileOutputFormat.setOutputPath(job, outputPath);</span><br><span class="line">		<span class="keyword">boolean</span> flag = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">		Logger log = Logger.getLogger(ProductNumber.class);</span><br><span class="line">		log.info(<span class="string">&quot;Falg = &quot;</span> + flag);</span><br><span class="line">		System.exit(flag ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperHandler</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Object</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> IntWritable intWritable = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">static</span> Text word = <span class="keyword">new</span> Text();</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Object key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">			StringTokenizer tokenizer = <span class="keyword">new</span> StringTokenizer(value.toString(), <span class="string">&quot;   &quot;</span>);</span><br><span class="line">			word.set(tokenizer.nextToken());</span><br><span class="line">			context.write(word, intWritable);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ReducerHandler</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">		<span class="keyword">private</span> IntWritable intWritable = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">			<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line">				sum += value.get();</span><br><span class="line">			&#125;</span><br><span class="line">			intWritable.set(sum);</span><br><span class="line">			context.write(key, intWritable);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928223752502.png" class="" title="image-20200928223752502">

<blockquote>
<p>运行后的HDFS文件系统</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928225133967.png" class="" title="image-20200928225133967">



<blockquote>
<p>part-r-00000文件内容即为统计结果</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928225154667.png" class="" title="image-20200928225154667">





<h2 id="8-安装部署HBase"><a href="#8-安装部署HBase" class="headerlink" title="8. 安装部署HBase"></a>8. 安装部署HBase</h2><p>HBase与Hadoop版本支持关系</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20201002211137852.png" class="" title="image-20201002211137852">





<h3 id="1-下载安装HBase-1-6-0"><a href="#1-下载安装HBase-1-6-0" class="headerlink" title="1. 下载安装HBase-1.6.0"></a>1. 下载安装HBase-1.6.0</h3><blockquote>
<p>使用镜像：<a href="https://mirrors.bfsu.edu.cn/apache/hbase/">https://mirrors.bfsu.edu.cn/apache/hbase/</a></p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929100114445.png" class="" title="image-20200929100114445">

<blockquote>
<p>选择1.6.0，下载tar.gz压缩包</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929100159559.png" class="" title="image-20200929100159559">

<blockquote>
<p>解压</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xzvf hbase-1.6.0-bin.tar.gz </span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929102107183.png" class="" title="image-20200929102107183">

<blockquote>
<p>查看</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929102212291.png" class="" title="image-20200929102212291">



<h3 id="2-配置Hbase"><a href="#2-配置Hbase" class="headerlink" title="2. 配置Hbase"></a>2. 配置Hbase</h3><blockquote>
<p>进入HBase安装主目录的conf目录，然后修改配置文件</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd conf/</span><br></pre></td></tr></table></figure>



<h4 id="1-修改配置文件hbase-env-sh"><a href="#1-修改配置文件hbase-env-sh" class="headerlink" title="(1) 修改配置文件hbase-env.sh"></a>(1) 修改配置文件hbase-env.sh</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gedit hbase-env.sh</span><br><span class="line"></span><br><span class="line">修改JAVA_HOME:</span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el7_8.x86_64</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929103119874.png" class="" title="image-20200929103119874">

<h4 id="2-修改配置文件hbase-site-xml"><a href="#2-修改配置文件hbase-site-xml" class="headerlink" title="(2) 修改配置文件hbase-site.xml"></a>(2) 修改配置文件hbase-site.xml</h4><blockquote>
<p>将hbase-site.xml修改为‘</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment"> * or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment"> * distributed with this work for additional information</span></span><br><span class="line"><span class="comment"> * regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment"> * to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment"> * &quot;License&quot;); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment"> * with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:9000/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>master<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.master.info.port<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>60010<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929103343424.png" class="" title="image-20200929103343424">

<h4 id="3-设置-regionservers"><a href="#3-设置-regionservers" class="headerlink" title="(3) 设置 regionservers"></a>(3) 设置 regionservers</h4><blockquote>
<p>将regionservers中的localhost修改为: slave</p>
</blockquote>
<h4 id="4-设置环境变量"><a href="#4-设置环境变量" class="headerlink" title="(4) 设置环境变量"></a>(4) 设置环境变量</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gedit ~/.bash_profile</span><br><span class="line"></span><br><span class="line">将下面代码添加到文件末尾：</span><br><span class="line"><span class="meta">#</span><span class="bash">HBase</span></span><br><span class="line">export HBASE_HOME=/home/parak/HBase/hbase-1.6.0</span><br><span class="line">export PATH=$HBASE_HOME/bin:$PATH</span><br><span class="line">export HADOOP_CLASSPATH=$HBASE_HOME/lib/*</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929104148521.png" class="" title="image-20200929104148521">

<h4 id="5-将HBase复制到Slave结点"><a href="#5-将HBase复制到Slave结点" class="headerlink" title="(5) 将HBase复制到Slave结点"></a>(5) 将HBase复制到Slave结点</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -r /home/parak/HBase/hbase-1.6.0 slave:/home/parak/HBase/</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929104703378.png" class="" title="image-20200929104703378">

<blockquote>
<p>查看slave结点的HBase文件夹</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929104827983.png" class="" title="image-20200929104827983">



<h3 id="3-验证并启动HBase"><a href="#3-验证并启动HBase" class="headerlink" title="3. 验证并启动HBase"></a>3. 验证并启动HBase</h3><blockquote>
<p>先启动Hadoop: start-all.sh</p>
<p>再启动Hbase: start-hbase.sh</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929105006101.png" class="" title="image-20200929105006101">

<blockquote>
<p>启动HBase出现错误</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929110647176.png" class="" title="image-20200929110647176">

<p>我意识到是Hadoop-2.9.2与HBase-1.6.0的版本匹配问题，于是我下载HBase-2.2.6。</p>
<h3 id="4-重新下载配置HBase-2-2-6"><a href="#4-重新下载配置HBase-2-2-6" class="headerlink" title="4. 重新下载配置HBase-2.2.6"></a>4. 重新下载配置HBase-2.2.6</h3><blockquote>
<p>下载</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929110514041.png" class="" title="image-20200929110514041">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929110553845.png" class="" title="image-20200929110553845">

<blockquote>
<p>解压: tar xzvf hbase-2.2.6-bin.tar.gz</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929110818266.png" class="" title="image-20200929110818266">

<blockquote>
<p>修改配置文件hbase-env.sh</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929111024747.png" class="" title="image-20200929111024747">

<blockquote>
<p>修改配置文件hbase-site.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment"> * or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment"> * distributed with this work for additional information</span></span><br><span class="line"><span class="comment"> * regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment"> * to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment"> * &quot;License&quot;); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment"> * with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    The following properties are set for running HBase as a single process on a</span></span><br><span class="line"><span class="comment">    developer workstation. With this configuration, HBase is running in</span></span><br><span class="line"><span class="comment">    &quot;stand-alone&quot; mode and without a distributed file system. In this mode, and</span></span><br><span class="line"><span class="comment">    without further configuration, HBase and ZooKeeper data are stored on the</span></span><br><span class="line"><span class="comment">    local filesystem, in a path under the value configured for `hbase.tmp.dir`.</span></span><br><span class="line"><span class="comment">    This value is overridden from its default value of `/tmp` because many</span></span><br><span class="line"><span class="comment">    systems clean `/tmp` on a regular basis. Instead, it points to a path within</span></span><br><span class="line"><span class="comment">    this HBase installation directory.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Running against the `LocalFileSystem`, as opposed to a distributed</span></span><br><span class="line"><span class="comment">    filesystem, runs the risk of data integrity issues and data loss. Normally</span></span><br><span class="line"><span class="comment">    HBase will refuse to run in such an environment. Setting</span></span><br><span class="line"><span class="comment">    `hbase.unsafe.stream.capability.enforce` to `false` overrides this behavior,</span></span><br><span class="line"><span class="comment">    permitting operation. This configuration is for the developer workstation</span></span><br><span class="line"><span class="comment">    only and __should not be used in production!__</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    See also https://hbase.apache.org/book.html#standalone_dist</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>./tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.unsafe.stream.capability.enforce<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:9000/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>master<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.master.info.port<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>60010<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929111344171.png" class="" title="image-20200929111344171">

<blockquote>
<p>修改regionservers文件</p>
</blockquote>
<p><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="Hadoop%5Cimage-20200929113716160.png" alt="image-20200929113716160"></p>
<blockquote>
<p>将HBase复制到Slave节点</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -r /home/parak/HBase/hbase-2.2.6 slave:/home/parak/HBase</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929112324004.png" class="" title="image-20200929112324004">

<blockquote>
<p>再次启动Hbase</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929113827901.png" class="" title="image-20200929113827901">

<blockquote>
<p>打开FireFox，进入<a href="http://master:60010/">http://master:60010</a></p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929113959833.png" class="" title="image-20200929113959833">

<p>说明HBase启动成功</p>
<h3 id="4-关闭HBase"><a href="#4-关闭HBase" class="headerlink" title="4. 关闭HBase"></a>4. 关闭HBase</h3><blockquote>
<p>先关闭HBase: stop-hbase.sh</p>
<p>再关闭Hadoop: stop-all.sh</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929114148065.png" class="" title="image-20200929114148065">



<h2 id="9-HBase-Shell命令操作"><a href="#9-HBase-Shell命令操作" class="headerlink" title="9. HBase Shell命令操作"></a>9. HBase Shell命令操作</h2><h3 id="1-启动HBase-Shell"><a href="#1-启动HBase-Shell" class="headerlink" title="1. 启动HBase Shell"></a>1. 启动HBase Shell</h3><h4 id="1-启动HBase-Shell界面"><a href="#1-启动HBase-Shell界面" class="headerlink" title="(1) 启动HBase Shell界面"></a>(1) 启动HBase Shell界面</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hbase shell</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929191351747.png" class="" title="image-20200929191351747">

<h4 id="2-HBase-Shell的help命令"><a href="#2-HBase-Shell的help命令" class="headerlink" title="(2) HBase Shell的help命令"></a>(2) HBase Shell的help命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">help</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929191531507.png" class="" title="image-20200929191531507">

<blockquote>
<p>查看HBase建表命令create的用法</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">help &quot;create&quot;</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929191618099.png" class="" title="image-20200929191618099">



<h3 id="2-创建HBase数据表"><a href="#2-创建HBase数据表" class="headerlink" title="2. 创建HBase数据表"></a>2. 创建HBase数据表</h3><blockquote>
<p>HBase中用create命令创建表</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;Sname&#x27;</span>, <span class="string">&#x27;Ssex&#x27;</span>, <span class="string">&#x27;Sage&#x27;</span>, <span class="string">&#x27;Sdept&#x27;</span>, <span class="string">&#x27;course&#x27;</span></span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929191856923.png" class="" title="image-20200929191856923">

<blockquote>
<p>查看’student’表的属性</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">describe &#x27;student&#x27;</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929191953519.png" class="" title="image-20200929191953519">



<h3 id="3-HBase数据库基本操作"><a href="#3-HBase数据库基本操作" class="headerlink" title="3. HBase数据库基本操作"></a>3. HBase数据库基本操作</h3><h4 id="1-添加数据"><a href="#1-添加数据" class="headerlink" title="(1) 添加数据"></a>(1) 添加数据</h4><blockquote>
<p>put命令添加数据，一次只能为一个表的一行数据的一个列添加一个数据</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">put &#x27;student&#x27;, &#x27;95001&#x27;, &#x27;Sname&#x27;, &#x27;Li Ying&#x27;</span><br><span class="line">put &#x27;student&#x27;, &#x27;95001&#x27;, &#x27;Sdept&#x27;, &#x27;CS&#x27;</span><br><span class="line">put &#x27;student&#x27;, &#x27;95001&#x27;, &#x27;course:math&#x27;, &#x27;81&#x27;</span><br><span class="line">put &#x27;student&#x27;, &#x27;95001&#x27;, &#x27;course:english&#x27;, &#x27;85&#x27;</span><br><span class="line">put &#x27;student&#x27;, &#x27;95002&#x27;, &#x27;course:math&#x27;, &#x27;83&#x27;</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929193655517.png" class="" title="image-20200929193655517">



<h4 id="2-查看数据"><a href="#2-查看数据" class="headerlink" title="(2) 查看数据"></a>(2) 查看数据</h4><blockquote>
<p>查看表某一行的数据</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">get &#x27;student&#x27;, &#x27;95001&#x27;</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929194017359.png" class="" title="image-20200929194017359">

<blockquote>
<p>查看表的全部数据</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scan &#x27;student&#x27;</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929194135877.png" class="" title="image-20200929194135877">



<h4 id="3-删除数据"><a href="#3-删除数据" class="headerlink" title="(3) 删除数据"></a>(3) 删除数据</h4><blockquote>
<p>delete命令删除某一项数据</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">delete &#x27;student&#x27;, &#x27;95001&#x27;, &#x27;Ssex&#x27;</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929194514884.png" class="" title="image-20200929194514884">

<blockquote>
<p>delete命令删除某行的全部数据</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">delete &#x27;student&#x27;,&#x27;95001&#x27;</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929194626605.png" class="" title="image-20200929194626605">



<h4 id="4-删除表"><a href="#4-删除表" class="headerlink" title="(4) 删除表"></a>(4) 删除表</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">disable &#x27;student&#x27;</span><br><span class="line">drop &#x27;student&#x27;</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929193442627.png" class="" title="image-20200929193442627">



<h3 id="4-查询HBase数据表的历史数据"><a href="#4-查询HBase数据表的历史数据" class="headerlink" title="4. 查询HBase数据表的历史数据"></a>4. 查询HBase数据表的历史数据</h3><blockquote>
<p>在创建表的时候，指定保存的版本数</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create &#x27;teacher&#x27;, &#123;NAME=&gt;&#x27;username&#x27;, VERSIONS=&gt;5&#125;</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929203801474.png" class="" title="image-20200929203801474">

<blockquote>
<p>插入数据然后更新数据，使其产生历史版本数据</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">put &#x27;teacher&#x27;, &#x27;91001&#x27;, &#x27;username&#x27;, &#x27;Mary&#x27;</span><br><span class="line">put &#x27;teacher&#x27;, &#x27;91001&#x27;, &#x27;username&#x27;, &#x27;Mary1&#x27;</span><br><span class="line">put &#x27;teacher&#x27;, &#x27;91001&#x27;, &#x27;username&#x27;, &#x27;Mary2&#x27;</span><br><span class="line">put &#x27;teacher&#x27;, &#x27;91001&#x27;, &#x27;username&#x27;, &#x27;Mary3&#x27;</span><br><span class="line">put &#x27;teacher&#x27;, &#x27;91001&#x27;, &#x27;username&#x27;, &#x27;Mary4&#x27;</span><br><span class="line">put &#x27;teacher&#x27;, &#x27;91001&#x27;, &#x27;username&#x27;, &#x27;Mary5&#x27;</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929204220031.png" class="" title="image-20200929204220031">

<blockquote>
<p>查询时，指定查询的历史版本书（默认会查询出最新的数据）</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">get &#x27;teacher&#x27;, &#x27;91001&#x27;, &#123;COLUMN=&gt;&#x27;username&#x27;, VERSIONS=&gt;5&#125;</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929204245861.png" class="" title="image-20200929204245861">



<h3 id="5-退出HBase-Shell"><a href="#5-退出HBase-Shell" class="headerlink" title="5. 退出HBase Shell"></a>5. 退出HBase Shell</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Cloud</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty</title>
    <url>/posts/1c6ba3e2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-IO"><a href="#1-IO" class="headerlink" title="1. IO"></a>1. IO</h2><h3 id="1-1-BIO"><a href="#1-1-BIO" class="headerlink" title="1.1 BIO"></a>1.1 BIO</h3><h4 id="1-1-1-介绍"><a href="#1-1-1-介绍" class="headerlink" title="1.1.1 介绍"></a>1.1.1 介绍</h4><ul>
<li>Java BIO就是传统的Java IO编程，相关API都在java.io</li>
<li>BIO (<strong>blocking I/O</strong>)：<strong>同步并阻塞</strong>，服务器实现模式为一个连接一个线程，即有连接请求时服务器就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销</li>
<li>BIO方式适用于连接数目较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择</li>
</ul>
<a id="more"></a>



<h4 id="1-1-2-实例"><a href="#1-1-2-实例" class="headerlink" title="1.1.2 实例"></a>1.1.2 实例</h4><blockquote>
<p>BIO服务器</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.bio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/9/13 11:07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: BIO服务器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BIOServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = Logger.getLogger(BIOServer.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  启动服务器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 线程池机制</span></span><br><span class="line"><span class="comment">         * 思路</span></span><br><span class="line"><span class="comment">         * 1、创建一个线程池</span></span><br><span class="line"><span class="comment">         * 2、如果有多个线程池联机呃，就创建一个线程，与之通讯</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        ExecutorService newCachedThreadPool = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建ServerSocket</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;NIO 服务器启动 &quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 监听，等待客户端接受</span></span><br><span class="line">            <span class="keyword">final</span> Socket socket = serverSocket.accept();</span><br><span class="line">            logger.info(<span class="string">&quot;新增一个客户端连接&quot;</span>);</span><br><span class="line">            <span class="comment">// 创建一个线程，与之通讯</span></span><br><span class="line">            newCachedThreadPool.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    handler(socket);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * handler，和客户端通讯</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> socket</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handler</span><span class="params">(Socket socket)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="comment">// 通过socket获取输入流</span></span><br><span class="line">            InputStream inputStream = socket.getInputStream();</span><br><span class="line">            <span class="comment">// 循环读取客户端发送的数据</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 输出线程信息</span></span><br><span class="line">                logger.info(<span class="string">&quot;线程信息：&#123; PID = &quot;</span> + Thread.currentThread().getId()</span><br><span class="line">                        + <span class="string">&quot;, Name = &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; &#125;&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> read = inputStream.read(bytes);</span><br><span class="line">                <span class="keyword">if</span> (read != -<span class="number">1</span>) &#123;</span><br><span class="line">                    logger.info(<span class="string">&quot;[客户端：&quot;</span> + <span class="keyword">new</span> String(bytes, <span class="number">0</span>, read) + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.info(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;关闭与客户端的连接&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> BIOServer().start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="1-1-3-配置"><a href="#1-1-3-配置" class="headerlink" title="1.1.3 配置"></a>1.1.3 配置</h4><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/1c6ba3e2/image-20200913115739418.png" class="" title="image-20200913115739418">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/1c6ba3e2/image-20200913115851769.png" class="" title="image-20200913115851769">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/1c6ba3e2/image-20200913115947574.png" class="" title="image-20200913115947574">



<h4 id="1-1-4-运行"><a href="#1-1-4-运行" class="headerlink" title="1.1.4 运行"></a>1.1.4 运行</h4><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/1c6ba3e2/image-20200913120322526.png" class="" title="image-20200913120322526">



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">telnet 127.0.0.1 6666</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/1c6ba3e2/image-20200913120406689.png" class="" title="image-20200913120406689">



<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/1c6ba3e2/image-20200913121954652.png" class="" title="image-20200913121954652">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/1c6ba3e2/image-20200913122028056.png" class="" title="image-20200913122028056">



<h4 id="1-1-5-不足"><a href="#1-1-5-不足" class="headerlink" title="1.1.5 不足"></a>1.1.5 不足</h4><p>1）每个请求都需要创建独立的线程，与对应的客户端进行数据Read，业务处理，数据Write</p>
<p>2）当并发数较大时，需要创建大量线程来处理连接，系统资源占用较大</p>
<p>3）连接建立后，如果当当前线程暂存没有数据可读，则线程就阻塞在Read上，造成线程资源浪费</p>
<h3 id="1-2-NIO"><a href="#1-2-NIO" class="headerlink" title="1.2 NIO"></a>1.2 NIO</h3><h4 id="1-2-1-介绍"><a href="#1-2-1-介绍" class="headerlink" title="1.2.1 介绍"></a>1.2.1 介绍</h4><ul>
<li>Java NIO 全称 <strong>java non-blocking IO</strong>，是指JDK提供的心API，是<strong>同步非阻塞</strong>的。</li>
<li>NIO 相关类都被放在 java.nio包及子包下，并且对原 java.io包中的很多类进行改写</li>
<li>NIO 三大核心部分：<u>Channel</u>(通道)、<u>Buffer</u>(缓冲区)、<u>Selector</u>(选择器)</li>
<li>NIO 是面向缓冲区或者面向块编程的。数据读取到一个它稍后处理的缓冲区，需要时可在缓冲区前后移动，这就增加处理过程中的灵活性，使用它可以提供非阻塞的高伸缩性网络</li>
</ul>
<h4 id="1-2-2-比较"><a href="#1-2-2-比较" class="headerlink" title="1.2.2 比较"></a>1.2.2 比较</h4><blockquote>
<p><code>BIO</code> VS <code>NIO</code></p>
</blockquote>
<ul>
<li><p>BIO以流的方式处理数据，而NIO以块的方式处理数据，块I/O的效率比流I/O高很多</p>
</li>
<li><p>BIO是阻塞的，NIO则是非阻塞的</p>
</li>
<li><p>BIO基于字节流和字符流进行操作，而NIO基于<code>Channel</code>(通道)和<code>Buffer</code>(缓冲区)进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区写入到同道中人。<code>Selectors</code>(选择器)用于监听多个通道的事件（比如：连接请求、数据到达等），因此使用单个线程就可以监听多个客户端通道</p>
</li>
</ul>
<h4 id="1-2-3-组件"><a href="#1-2-3-组件" class="headerlink" title="1.2.3 组件"></a>1.2.3 组件</h4><p>三大组件：<code>Selector</code>、<code>Channe</code>和<code>Buffer</code></p>
<blockquote>
<p>关系图</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/1c6ba3e2/image-20200913164017187.png" class="" title="image-20200913164017187">

<blockquote>
<p>说明</p>
</blockquote>
<ul>
<li>每个<code>channel</code>都会对应一个<code>Buffer</code></li>
<li><code>Selector</code>对应一个线程，一个线程对应多个<code>channel</code></li>
<li>该图反应有三个<code>channel</code>注册到了该<code>Selector</code>程序</li>
<li>程序切换到哪个<code>channel</code>是有事件决定的，<code>Event</code>就是一个重要的概念</li>
<li><code>Selector</code>会根据不同的事件，在各个通道上切换</li>
<li><code>Buffer</code>就是一个内存块，底层是有一个数组</li>
<li>数据的读取写入都通过<code>Buffer</code>，这个和BIO不同。BIO要么是输入流，要么是输出流，不能双向，但是NIO的<code>buffer</code>是可以读也可以写，需要<code>flip</code>方法切换</li>
<li><code>channel</code>是双向的，可以返回底层操作系统的情况，比如<code>Linux</code>，底层的操作系统通道就是双向的</li>
</ul>
<h5 id="1-2-3-1-Buffer"><a href="#1-2-3-1-Buffer" class="headerlink" title="1.2.3.1 Buffer"></a>1.2.3.1 Buffer</h5><blockquote>
<p>说明</p>
</blockquote>
<p>缓冲区：缓冲区本质上是一个可以读写数据的内存块</p>
<blockquote>
<p>常用Buffer子类：</p>
</blockquote>
<ul>
<li>ByteBuffer</li>
<li>ShortBuffer</li>
<li>CharBuffer</li>
<li>IntBuffer</li>
<li>LongBuffer</li>
<li>DoubleBuffer</li>
<li>FloatBuffer</li>
</ul>
<blockquote>
<p>Buffer类定义了所有的缓冲区都具有的四个属性来提供关于其所包含的数据元素</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Capacity</td>
<td align="center">容量，即可以容纳的最大数据量；在缓冲区创建时被设定且不能改变</td>
</tr>
<tr>
<td align="center">Limit</td>
<td align="center">表示缓冲区的当前重点，不能对缓冲区超过极限的位置进行读写操作，且极限是可以修改的</td>
</tr>
<tr>
<td align="center">Position</td>
<td align="center">位置，下一个要被读或写的元素的索引，每次读写缓冲区数据时都会改变的值，为下次读写作准备</td>
</tr>
<tr>
<td align="center">Mark</td>
<td align="center">标记</td>
</tr>
</tbody></table>
<p>mark &lt;= position &lt;= limit &lt;= capacity</p>
<h5 id="1-2-3-2-Channel"><a href="#1-2-3-2-Channel" class="headerlink" title="1.2.3.2 Channel"></a>1.2.3.2 Channel</h5><blockquote>
<p>说明</p>
</blockquote>
<p>通道：NIO的通道类似于流，但有些区别</p>
<ul>
<li>通道可以同时进行读写，而流只能读或者只能写</li>
<li>通道可以实现异步读写数据</li>
<li>通道可以从缓冲读数据，也可以写数据到缓冲</li>
</ul>
<blockquote>
<p> 常用的Channel类：</p>
</blockquote>
<ul>
<li>FileChannel                      ━━━━━▶          文件的数据读写</li>
<li>DatagramChannel            ━━━━━▶          UDP的数据读写</li>
<li>ServerSocketChannel      ━━━━━▶          TCP的数据读写</li>
<li>SocketChannel                 ━━━━━▶          TCP的数据读写</li>
</ul>
<blockquote>
<p>FileChannel的主要IO操作</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">public int read(ByteBuffer dst)</td>
<td align="center">从通道读取数据并放到缓冲区中</td>
</tr>
<tr>
<td align="center">public int write(ByteBuffer src)</td>
<td align="center">把缓冲区的数据写到通道中</td>
</tr>
<tr>
<td align="center">public long transferFrom(ReadableByteChannel src, long position, long count)</td>
<td align="center">从目标通道中复制数据到当前通道</td>
</tr>
<tr>
<td align="center">public long transferTo(long position, long count, WritableByteChannel target)</td>
<td align="center">把数据从当前通道复制给目标通道</td>
</tr>
</tbody></table>
<h5 id="1-2-3-3-Selector"><a href="#1-2-3-3-Selector" class="headerlink" title="1.2.3.3 Selector"></a>1.2.3.3 Selector</h5><blockquote>
<p>说明</p>
</blockquote>
<p>选择器：</p>
<ul>
<li>Java的NIO，用非阻塞的IO方式，可以用一个线程，处理多个的客户端连接，就会使用到<code>Selector</code></li>
<li><code>Selector</code>能够检测多个注册的通道上是否有事件发生（多个<code>Channel</code>以事件的方式可以注册到同一个<code>Selector</code>），如果有事件发生，便获取事件然后针对每个事件进行相应的处理。这样就可以只用一个单线程去管理多个通道，也就是管理多个连接和请求</li>
<li>只有在连接真正有读写事件发生时，才会进行读写，就大大地减少了系统开销，并且不必为每个连接都创建一个线程</li>
<li>避免了多线程之间的上下文切换导致的开销</li>
</ul>
<blockquote>
<p>类及相关方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Class | Method</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">public abstract class Selector implements Closeable</td>
<td align="center">抽象类</td>
</tr>
<tr>
<td align="center">public static Selector open()</td>
<td align="center">得到一个选择器对象</td>
</tr>
<tr>
<td align="center">public int select(long timeout)</td>
<td align="center">监控所有注册的通道，参数用来设置超时时间</td>
</tr>
<tr>
<td align="center">public Set<SelectionKey> selectedKeys()</td>
<td align="center">从内部集合中得到所有的SelectionKe’y</td>
</tr>
</tbody></table>
<blockquote>
<p>说明</p>
</blockquote>
<ul>
<li>当客户端连接时，会通过<code>ServerSocketChannel</code>得到<code>SocketChannel</code></li>
<li>将<code>SocketChannel</code>注册到<code>Selector</code>上，注册后返回一个<code>SelectionKey</code></li>
<li><code>Selector</code>进行监听<code>select</code>方法，返回有事件发生的通道的个数</li>
<li>进一步得到各个<code>SelectionKey</code></li>
<li>在通道<code>SelectionKey</code>反向获取<code>SocketChannel</code>，方法<code>channel()</code></li>
<li>可以得到所有的<code>channel</code>，完成业务处理</li>
</ul>
<h4 id="1-2-3-编程"><a href="#1-2-3-编程" class="headerlink" title="1.2.3 编程"></a>1.2.3 编程</h4><blockquote>
<p>将数据写入到本地文件</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建输出流 ——&gt; channel</span></span><br><span class="line">    FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:\\Java\\Test\\K1.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 fileOutputStream 获取 对应的 FileChannel</span></span><br><span class="line">    <span class="comment">// 这个 fileChannel 真实类型是  FileChannelImpl</span></span><br><span class="line">    FileChannel fileChannel = fileOutputStream.getChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个缓冲区 ByteBuffer</span></span><br><span class="line">    ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 s 放入 byteBuffer</span></span><br><span class="line">    byteBuffer.put(s.getBytes());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对 byteBuffer 进行flip</span></span><br><span class="line">    byteBuffer.flip();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 byteBuffer 数据写入到 fileChannel</span></span><br><span class="line">    fileChannel.write(byteBuffer);</span><br><span class="line">    fileOutputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>从本地文件读取数据</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建文件的输入流</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(path);</span><br><span class="line">    FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 fileInputStream 获取对应的 FileChannel ——&gt;  实际类型 FileChannelImpl</span></span><br><span class="line">    FileChannel fileChannel = fileInputStream.getChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个缓冲区ByteBuffer</span></span><br><span class="line">    ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 通道的数据 读入到 Buffer</span></span><br><span class="line">    fileChannel.read(byteBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将byteBuffer的字节数据转成字符串</span></span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(byteBuffer.array()));</span><br><span class="line">    fileInputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>拷贝文件</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(String source, String destination)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(source);</span><br><span class="line">    FileChannel fileChannel1 = fileInputStream.getChannel();</span><br><span class="line"></span><br><span class="line">    FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(destination);</span><br><span class="line">    FileChannel fileChannel2 = fileOutputStream.getChannel();</span><br><span class="line"></span><br><span class="line">    ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 复位，重置标志位</span></span><br><span class="line">        byteBuffer.clear();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> read = fileChannel1.read(byteBuffer);</span><br><span class="line">        <span class="keyword">if</span> (read == -<span class="number">1</span>) &#123;<span class="comment">// 表示读完</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将buffer中的数据写入到fileChannel02 -- K2.txt</span></span><br><span class="line">        byteBuffer.flip();</span><br><span class="line">        fileChannel2.write(byteBuffer);</span><br><span class="line">    &#125;</span><br><span class="line">    fileOutputStream.close();</span><br><span class="line">    fileInputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用transferFrom完成拷贝</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyImage</span><span class="params">(String fromPath, String toPath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建相关流</span></span><br><span class="line">    FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(fromPath);</span><br><span class="line">    FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(toPath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取Channel</span></span><br><span class="line">    FileChannel sourceChannel = fileInputStream.getChannel();</span><br><span class="line">    FileChannel destinChannel = fileOutputStream.getChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用transferFrom完成拷贝</span></span><br><span class="line">    destinChannel.transferFrom(sourceChannel, <span class="number">0</span>, sourceChannel.size());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭相关流</span></span><br><span class="line">    sourceChannel.close();</span><br><span class="line">    destinChannel.close();</span><br><span class="line">    fileInputStream.close();</span><br><span class="line">    fileOutputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>buffer数组完成读写操作</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Scattering: 将数据写入到buffer时，可以采用buffer数组，依次写入[分散]</span></span><br><span class="line"><span class="comment">// Gathering: 从buffer读取数据时，可以采用buffer数组，依次读取[聚集]</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScatteringAndGatheringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 使用ServerSocketChannel 和 SocketChannel 网络</span></span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        InetSocketAddress inetSocketAddress = <span class="keyword">new</span> InetSocketAddress(<span class="number">7000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绑定端口到Socket，并启动</span></span><br><span class="line">        serverSocketChannel.socket().bind(inetSocketAddress);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建buffer数组</span></span><br><span class="line">        ByteBuffer[] byteBuffers = <span class="keyword">new</span> ByteBuffer[<span class="number">2</span>];</span><br><span class="line">        byteBuffers[<span class="number">0</span>] = ByteBuffer.allocate(<span class="number">5</span>);</span><br><span class="line">        byteBuffers[<span class="number">1</span>] = ByteBuffer.allocate(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等客户端连接</span></span><br><span class="line">        SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">        <span class="keyword">int</span> messageLength = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环的读取</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> byteRead = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (byteRead &lt; messageLength) &#123;</span><br><span class="line">                <span class="keyword">long</span> l = socketChannel.read(byteBuffers);</span><br><span class="line">                byteRead  += l;</span><br><span class="line">                System.out.println(<span class="string">&quot;byteRead = &quot;</span> + byteRead);</span><br><span class="line">                Arrays.asList(byteBuffers)</span><br><span class="line">                        .stream()</span><br><span class="line">                        .map(buffer -&gt; <span class="string">&quot;position = &quot;</span></span><br><span class="line">                                + buffer.position()</span><br><span class="line">                                + <span class="string">&quot;, limit = &quot;</span></span><br><span class="line">                                + buffer.limit())</span><br><span class="line">                        .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将所有的buffer反转</span></span><br><span class="line">                Arrays.asList(byteBuffers).forEach(buffer -&gt; buffer.flip());</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将数据读出显示到客户端</span></span><br><span class="line">                <span class="keyword">long</span> byteWrite = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (byteWrite &lt; messageLength) &#123;</span><br><span class="line">                    socketChannel.write(byteBuffers);</span><br><span class="line">                    byteWrite += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将所欲的buffer进行clear</span></span><br><span class="line">                Arrays.asList(byteBuffers).forEach(buffer -&gt; &#123;</span><br><span class="line">                    buffer.clear();</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                System.out.println(</span><br><span class="line">                                <span class="string">&quot;byteRead = &quot;</span> + byteRead</span><br><span class="line">                                + <span class="string">&quot;, byteWrite = &quot;</span> + byteWrite</span><br><span class="line">                                + <span class="string">&quot;, messageLength = &quot;</span> + messageLength);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-2-4-实例"><a href="#1-2-4-实例" class="headerlink" title="1.2.4 实例"></a>1.2.4 实例</h4><p><strong>群聊系统Demo</strong></p>
<p>编码步骤：</p>
<ol>
<li>当客户端连接时，会通过<code>ServerSocketChannel</code> 得到 SocketChannel</li>
<li>Selector 进行监听 select 方法, 返回有事件发生的通道的个数.</li>
<li>将socketChannel注册到Selector上, register(Selector sel, int ops), 一个selector上可以注册多个SocketChannel</li>
<li>注册后返回一个 SelectionKey, 会和该Selector 关联(集合)</li>
<li>进一步得到各个 SelectionKey (有事件发生)</li>
<li>在通过 SelectionKey 反向获取 SocketChannel , 方法 channel()</li>
<li>判断该Channel的事件类型，对不同事件进行不同的业务处理</li>
</ol>
<blockquote>
<p>NIOServer</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.nio.groupchat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/9/19 22:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(GroupChatServer.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServerSocketChannel listenChannel;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">3333</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GroupChatServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1、获取选择器</span></span><br><span class="line">            selector = Selector.open();</span><br><span class="line">            <span class="comment">// 2、获取通道</span></span><br><span class="line">            listenChannel = ServerSocketChannel.open();</span><br><span class="line">            <span class="comment">// 3、绑定端口</span></span><br><span class="line">            listenChannel.socket().bind(<span class="keyword">new</span> InetSocketAddress(PORT));</span><br><span class="line">            <span class="comment">// 4、设置非阻塞</span></span><br><span class="line">            listenChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">// 5、将通道注册到选择器，注册操作：“接收”</span></span><br><span class="line">            listenChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.info(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 6、采用轮询的方式，查询获取“准备就绪”的注册过的操作</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> count = selector.select();</span><br><span class="line">                <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 7、获取当前选择器中所有注册的选择键</span></span><br><span class="line">                    Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class="line">                    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                        <span class="comment">// 8、获取“准备就绪”的时间</span></span><br><span class="line">                        SelectionKey selectionKey = iterator.next();</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 9、判断selectionKey是具体的什么事件</span></span><br><span class="line">                        <span class="comment">// 监听到accept事件</span></span><br><span class="line">                        <span class="keyword">if</span> (selectionKey.isAcceptable()) &#123;</span><br><span class="line">                            <span class="comment">// 10、若接受的事件是“接收就绪”操作，就获取客户端连接</span></span><br><span class="line">                            SocketChannel socketChannel = listenChannel.accept();</span><br><span class="line">                            <span class="comment">// 11、切换为非阻塞模式</span></span><br><span class="line">                            socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">                            <span class="comment">// 将该通道注册到选择器上</span></span><br><span class="line">                            socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">                            log.info(<span class="string">&quot;[&quot;</span> + socketChannel.getRemoteAddress().toString().substring(<span class="number">1</span>) + <span class="string">&quot;]上线&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 监听到read事件</span></span><br><span class="line">                        <span class="keyword">if</span> (selectionKey.isReadable()) &#123;</span><br><span class="line">                            <span class="comment">// 处理读 (专门方法)</span></span><br><span class="line">                            readMessage(selectionKey);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// end：移除选择键，防止重复操作</span></span><br><span class="line">                        iterator.remove();</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;等待····&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取客户端消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readMessage</span><span class="params">(SelectionKey selectionKey)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义一个 SocketChannel</span></span><br><span class="line">        SocketChannel socketChannel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 13、获取该选择器上的“读就绪”状态的通道</span></span><br><span class="line">            socketChannel = (SocketChannel) selectionKey.channel();</span><br><span class="line">            <span class="comment">// 14、读取数据</span></span><br><span class="line">            ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> count = socketChannel.read(buffer);</span><br><span class="line">            <span class="comment">// 根据count的h值做处理</span></span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 把缓存区的数据转成字符串</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(buffer.array());</span><br><span class="line">                <span class="comment">// 输出该消息</span></span><br><span class="line">                log.info(<span class="string">&quot;客户端-&quot;</span> + msg);</span><br><span class="line">                <span class="comment">// 向其他客户端转发消息(排除自己)，专门写一个方法来处理</span></span><br><span class="line">                sendMessageToOtherClients(msg, socketChannel);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;[&quot;</span> + socketChannel.getRemoteAddress().toString().substring(<span class="number">1</span>) + <span class="string">&quot;]离线&quot;</span>);</span><br><span class="line">                <span class="comment">// 取消注册</span></span><br><span class="line">                selectionKey.cancel();</span><br><span class="line">                <span class="comment">// 关闭通道</span></span><br><span class="line">                socketChannel.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioException) &#123;</span><br><span class="line">                log.error(e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转发消息给其他客户</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMessageToOtherClients</span><span class="params">(String msg, SocketChannel self)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;服务器转发消息&quot;</span>);</span><br><span class="line">        <span class="comment">// 遍历所有注册到 selector 上的SocketChannel，并排除self</span></span><br><span class="line">        <span class="keyword">for</span> (SelectionKey key : selector.keys()) &#123;</span><br><span class="line">            <span class="comment">// 通过 key 取出 对应的 SocketChannel</span></span><br><span class="line">            Channel targetChannel = key.channel();</span><br><span class="line">            <span class="comment">// 排除自己</span></span><br><span class="line">            <span class="keyword">if</span> (targetChannel <span class="keyword">instanceof</span> SocketChannel &amp;&amp; targetChannel != self) &#123;</span><br><span class="line">                <span class="comment">// 转型</span></span><br><span class="line">                SocketChannel dest = (SocketChannel) targetChannel;</span><br><span class="line">                <span class="comment">// 将msg存储到buffer</span></span><br><span class="line">                ByteBuffer byteBuffer = ByteBuffer.wrap(msg.getBytes());</span><br><span class="line">                <span class="comment">// 将buffer的数据写入通道</span></span><br><span class="line">                dest.write(byteBuffer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建服务器对象</span></span><br><span class="line">        GroupChatServer groupChatServer = <span class="keyword">new</span> GroupChatServer();</span><br><span class="line">        groupChatServer.listen();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>NIOClient</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.nio.groupchat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/9/20 0:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(GroupChatClient.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String HOST = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>    PORT = <span class="number">3333</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SocketChannel socketChannel;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GroupChatClient</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        selector = Selector.open();</span><br><span class="line">        <span class="comment">// 连接服务器</span></span><br><span class="line">        socketChannel = socketChannel.open(<span class="keyword">new</span> InetSocketAddress(HOST, PORT));</span><br><span class="line">        <span class="comment">// 设置非阻塞</span></span><br><span class="line">        socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 将socketChannel注册到selector</span></span><br><span class="line">        socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">        <span class="comment">// 得到username</span></span><br><span class="line">        username = socketChannel.getLocalAddress().toString().substring(<span class="number">1</span>);</span><br><span class="line">        log.info(<span class="string">&quot;[&quot;</span> + username + <span class="string">&quot;]已就绪···&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向服务器发送消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        msg = username + <span class="string">&quot;: &quot;</span> + msg;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socketChannel.write(ByteBuffer.wrap(msg.getBytes()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从服务器回复的消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> readChannels = selector.select();</span><br><span class="line">            <span class="keyword">if</span> (readChannels &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class="line">                <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                    SelectionKey key = iterator.next();</span><br><span class="line">                    <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">                        <span class="comment">// 得到相关的通道</span></span><br><span class="line">                        SocketChannel socketChannel = (SocketChannel) key.channel();</span><br><span class="line">                        <span class="comment">// 得到一个buffer</span></span><br><span class="line">                        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                        <span class="comment">// 读取</span></span><br><span class="line">                        socketChannel.read(buffer);</span><br><span class="line">                        <span class="comment">// 把读到的缓冲区的数据转成字符串</span></span><br><span class="line">                        String msg = <span class="keyword">new</span> String(buffer.array());</span><br><span class="line">                        log.info(msg);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 删除当前 SelectionKey</span></span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//log.error(&quot;无可用的通道···&quot;);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 启动客户端</span></span><br><span class="line">        GroupChatClient chatClient = <span class="keyword">new</span> GroupChatClient();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动一个线程，每隔3秒，读取从服务器</span></span><br><span class="line">        <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    chatClient.readMessage();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.currentThread().sleep(<span class="number">3000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        System.err.println(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送数据给服务器</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">            String s = scanner.nextLine();</span><br><span class="line">            chatClient.sendMessage(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="1-2-5-零拷贝"><a href="#1-2-5-零拷贝" class="headerlink" title="1.2.5 零拷贝"></a>1.2.5 零拷贝</h4><blockquote>
<p>说明</p>
</blockquote>
<ul>
<li><p>零拷贝，是从OS(操作系统)的角度来说的。因为内核缓冲区之间，没有数据是重复的</p>
</li>
<li><p>零拷贝不仅仅带来更少的数据复制，还能带来其他的性能优势，更少的CPU缓存伪共享以及无CPU校验和计算</p>
</li>
</ul>
<blockquote>
<p>mmap</p>
</blockquote>
<ul>
<li>mmap通过内存映射，将文件映射到内核缓冲区，同时，用户空间可以共享内核空间的数据。这样，在进行网络传输时，就可以减少内核空间到用户空间的拷贝次数</li>
</ul>
<blockquote>
<p>mmap和sendFile的区别</p>
</blockquote>
<ul>
<li>mmp适合小数据量读写，sendFile适合大文件传输</li>
<li>mmap需要4次上下文切换，3次数据拷贝；sendFile需要3次上下文切换，最少2次数据拷贝</li>
<li>sendFile可以利用DMA(direct memory access: 直接内存拷贝)方式，减少CPU拷贝，mmap则不能(必须从内核拷贝到Socket缓冲区)</li>
</ul>
<h2 id="2-概述"><a href="#2-概述" class="headerlink" title="2. 概述"></a>2. 概述</h2><p>官网: <a href="https://netty.io/">Netty.io</a></p>
<h3 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h3><p>Netty是一个异步事件驱动的网络应用程序框架，用于快速开发可维护的高性能协议服务器和客户端。</p>
<h3 id="1-2-设计"><a href="#1-2-设计" class="headerlink" title="1.2 设计"></a>1.2 设计</h3><ul>
<li>适用于各种传输类型的统一API-阻塞和非阻塞套接字</li>
<li>基于灵活且可扩展的事件模型，可将关注点明确分离</li>
<li>高度可定制的线程模型-单线程，一个或多个线程池，例如SEDA</li>
<li>真正的无连接数据报套接字支持（从3.1开始）</li>
</ul>
<h3 id="1-3-性能"><a href="#1-3-性能" class="headerlink" title="1.3 性能"></a>1.3 性能</h3><ul>
<li>更高的吞吐量，更低的延迟</li>
<li>减少资源消耗</li>
<li>减少不必要的内存复制</li>
</ul>
<h3 id="1-4-架构"><a href="#1-4-架构" class="headerlink" title="1.4 架构"></a>1.4 架构</h3><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/1c6ba3e2/image-20200921092848809.png" class="" title="image-20200921092848809">



<h2 id="3-Reactor"><a href="#3-Reactor" class="headerlink" title="3. Reactor"></a>3. Reactor</h2><h3 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h3><blockquote>
<p>反应器模式  |  分发者模式  |  通知者模式</p>
</blockquote>
<ul>
<li>基于I/O复用模型: 多个连接共用一个阻塞对象，应用程序只需要再一个阻塞对象等待，无需阻塞等待所有连接。当某个连接有新的数据可以处理时，操作系统通知应用程序，线程从阻塞状态返回，开始进行业务处理</li>
<li>基于线程池复用线程资源: 不必再为每个连接创建线程，键连接完成后的业务处理热舞分配给线程进行处理，一个线程可以处理多个连接的业务</li>
</ul>
<h3 id="2-2-组成"><a href="#2-2-组成" class="headerlink" title="2.2 组成"></a>2.2 组成</h3><ul>
<li>Reactor: Reactor在一个单独的线程中运行，负责监听和分发事件，分发给适当的处理程序来对IO事件做出反应。</li>
<li>Handlers: 处理程序执行I/O事件要完成的实际事件。Reactor通过调度适当的处理程序来响应I/O事件，处理程序执行非阻塞操作。</li>
</ul>
<h3 id="2-3-分类"><a href="#2-3-分类" class="headerlink" title="2.3 分类"></a>2.3 分类</h3><ul>
<li>单Reactor单线程        ━━━━━▶    前台接待员和服务员是同一个人，全程为顾客服务</li>
<li>单Reactor多线程        ━━━━━▶    1个前台接待员，多个服务员，接待员只负责接待</li>
<li>主从Reactor多线程    ━━━━━▶    多个前台接待员，多个服务生</li>
</ul>
<h4 id="2-2-1-单Reactor单线程"><a href="#2-2-1-单Reactor单线程" class="headerlink" title="2.2.1 单Reactor单线程"></a>2.2.1 单Reactor单线程</h4><blockquote>
<p>图示</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/1c6ba3e2/image-20200921181936951.png" class="" title="image-20200921181936951">

<blockquote>
<p>分析</p>
</blockquote>
<ol>
<li>优点：模型简单，没有多线程、进程通信、竞争的问题，全部都在一个线程中完成</li>
<li>缺点：性能问题，只有一个线程，无法发挥多核CPU的性能。<code>Handler</code>在处理某个连接上的业务时，整个进程无法处理其他连接事件，很容易导致性能瓶颈</li>
<li>缺点：可靠性问题，线程意外终止，或者进入死循环，会导致整个系统通信模块不可用，不能接收和处理外部消息，造成节点故障</li>
<li>使用场景：客户端的数量有限，业务处理非常快速</li>
</ol>
<h4 id="2-2-2-单Reactor多线程"><a href="#2-2-2-单Reactor多线程" class="headerlink" title="2.2.2 单Reactor多线程"></a>2.2.2 单Reactor多线程</h4><blockquote>
<p>图示</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/1c6ba3e2/image-20200921182914960.png" class="" title="image-20200921182914960">

<blockquote>
<p>方案说明</p>
</blockquote>
<ol>
<li><code>Reactor</code>对象通过<code>select</code>监控客户端请求事件，收到事件后，通过<code>dispatch</code>进行分发</li>
<li>如果建立连接请求，则由<code>Acceptor</code>通过<code>accept</code>处理连接请求，然后从黄健一个Handler对象处理完成连接后的各种事件</li>
<li>如果不是连接请求，则由<code>Reactor</code>分发调用连接对应的<code>handler</code>读取数据后，会分发给后面的<code>Worker</code>线程池的某个线程处理业务</li>
<li><code>Handler</code>只负责响应事件，不做具体的业务处理，通过<code>read</code>读取数据后，会分发给后面的<code>worker</code>线程池的某个线程处理业务</li>
<li><code>Worker</code>线程池会分配独立线程完成真正的业务，并将结果返回给<code>Handler</code></li>
<li><code>Handler</code>收到响应后，通过<code>send</code>将结果返回给<code>Client</code></li>
</ol>
<blockquote>
<p>分析</p>
</blockquote>
<ol>
<li>优点：可以充分的利用多核<code>CPU</code>的处理能力</li>
<li>缺点：多线程数据共享和访问比较复杂，<code>Reactor</code>处理所有的事件的监听和响应，在单线程运行，在高并发场景容易成为性能瓶颈</li>
</ol>
<h4 id="2-2-3-主从Reactor多线程"><a href="#2-2-3-主从Reactor多线程" class="headerlink" title="2.2.3 主从Reactor多线程"></a>2.2.3 主从Reactor多线程</h4><blockquote>
<p>图示</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/1c6ba3e2/image-20200921191731035.png" class="" title="image-20200921191731035">

<blockquote>
<p>方案说明</p>
</blockquote>
<ol>
<li><code>Reactor</code>主线程<code>MainReactor</code>对象通过<code>select</code>监听连接事件，收到事件后，通过<code>Acceptor</code>处理连接事件</li>
<li>当<code>Acceptor</code>处理连接事件后，<code>MainReactor</code>将连接分配给<code>SubReactor</code></li>
<li><code>SubReactor</code>将连接加入到连接队列进行监听，并创建<code>Handler</code>进行各种事件处理</li>
<li>当有新事件发生时，<code>SubReactor</code>就会调用对应的Handler处理</li>
<li><code>Worker</code>线程池分配独立的<code>Worker</code>线程进行业务处理，并返回结果</li>
<li><code>Handler</code>收到响应的结果后，再通过<code>send</code>将结果返回给<code>Client</code></li>
<li><code>Reactor</code>主线程可以对于多个<code>Reactor</code>子线程，即<code>MainReactor</code>，可以关联多个<code>SubReactor</code></li>
</ol>
<blockquote>
<p>分析</p>
</blockquote>
<ol>
<li><p>优点：父线程与子线程的职责明确，父线程只需要接收新连接，子线程完成后续的业务处理</p>
</li>
<li><p>优点：父线程与子线程的数据交互简单，<code>Reactor</code>主线程只需要把新连接传给子线程，子线程无需返回数据</p>
</li>
<li><p>缺点：编程复杂度较高</p>
</li>
</ol>
<h3 id="2-4-优点"><a href="#2-4-优点" class="headerlink" title="2.4 优点"></a>2.4 优点</h3><ul>
<li>响应快，不必为单个同步时间所阻塞，虽然<code>Reactor</code>本身依然是同步的</li>
<li>可以最大程度的比曼复杂的多线程及同步问题，并且避免了多线程/进程的切换开销</li>
<li>扩展性好，可以方便的通过增加<code>Reactor</code>实例个数来充分利用CPU资源</li>
<li>复用性好，<code>Reactor</code>模型本身与具体事件处理逻辑无关，具有很高的复用性</li>
</ul>
<h2 id="4-架构"><a href="#4-架构" class="headerlink" title="4. 架构"></a>4. 架构</h2><h3 id="3-1-图示"><a href="#3-1-图示" class="headerlink" title="3.1 图示"></a>3.1 图示</h3><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/1c6ba3e2/image-20200921204851799.png" class="" title="image-20200921204851799">

<h3 id="3-2-说明"><a href="#3-2-说明" class="headerlink" title="3.2 说明"></a>3.2 说明</h3><ol>
<li><code>Netty</code>抽象出两组线程池<code>BossGroup</code>专门负责接收客户端的连接，<code>WorkerGroup</code>专门负责网络的读写</li>
<li><code>BossGroup</code>和<code>WorkerGroup</code>类型的本质都是<code>NioEventLoopGroup</code></li>
<li><code>NioEventLoopGroup</code>相当于一个事件循环组，这个组中含有多个事件循环，每一个事件循环是<code>NioEventLoop</code></li>
<li><code>NioEventLoop</code>表示一个不断循环的执行处理任务的线程，每个<code>NioEventLoop</code>都有一个<code>selector</code>，用于监听绑定在其上的socket的网络通讯</li>
<li><code>NioEventLoopGroup</code>可以有多个线程，即可以含有多个<code>NioEventLoop</code></li>
<li>每个<code>Boss NioEventLoop</code>循环执行的步骤有三步:<ol>
<li>轮询<code>accept</code>事件</li>
<li>处理<code>accept</code>事件，与<code>client</code>建立连接，生成<code>NioSocketChannel</code>，并将其注册到某个<code>Worker NioEventLoop</code>上的<code>selector</code></li>
<li>处理任务队列的任务，即<code>runAllTasks</code></li>
</ol>
</li>
<li>每个<code>Worker NIOEventLoop</code>循环执行的步骤<ol>
<li>轮询<code>read</code>、<code>write</code>事件</li>
<li>处理i/o事件，即<code>read</code>、<code>write</code>事件，在对应<code>NioSocketChannel</code>处理</li>
<li>处理任务队列的任务，即<code>runAllTasks</code></li>
</ol>
</li>
</ol>
<h3 id="3-3-代码示例"><a href="#3-3-代码示例" class="headerlink" title="3.3 代码示例"></a>3.3 代码示例</h3><blockquote>
<p>NettyServer.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.*;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/9/21 21:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 创建BossGroup 和 WorkerGroup</span></span><br><span class="line"><span class="comment">         * 说明：</span></span><br><span class="line"><span class="comment">         * 1、创建两个线程组：bossGroup 和 workerGroup</span></span><br><span class="line"><span class="comment">         * 2、bossGroup处理连接请求</span></span><br><span class="line"><span class="comment">         * 3、workerGroup处理和客户端的业务</span></span><br><span class="line"><span class="comment">         * 4、两个都是无限循环</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        NioEventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建服务器端的启动对象，配置参数</span></span><br><span class="line">            ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用链式编程来进行设置</span></span><br><span class="line">            bootstrap.group(workerGroup, workerGroup)                         <span class="comment">// 设置两个线程组</span></span><br><span class="line">                    .channel(NioServerSocketChannel.class)                    <span class="comment">// 使用NioSocketChannel作为服务器的通道实现</span></span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>)              <span class="comment">// 设置线程队列得到连接个数</span></span><br><span class="line">                    .childOption(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>)      <span class="comment">// 设置保持活动连接状态</span></span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;   <span class="comment">// 创建一个通道测试对象</span></span><br><span class="line">                        <span class="comment">// 给Pipeline设置处理器</span></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            socketChannel.pipeline().addLast(<span class="keyword">new</span> NettyServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);  <span class="comment">// 给workerGroup的EventLoop对应的管道设置处理器</span></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;服务器已就绪···&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 绑定一个端口并且同步</span></span><br><span class="line">            <span class="comment">// 绑定端口并启动服务器</span></span><br><span class="line">            ChannelFuture channelFuture = bootstrap.bind(<span class="number">3333</span>).sync();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 对关闭通道进行监听</span></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>NettyHandler.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/9/21 22:20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：</span></span><br><span class="line"><span class="comment"> * 自定义一个Handler需要继承Netty规定好的某个HandlerAdapter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取数据事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx 上下文对象，含有管道pipline[处理数据]，通道channel[传输数据]，地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 客户端发送的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;server ctx = &quot;</span> + ctx);</span><br><span class="line">        <span class="comment">// 将msg转成ByteBuffer</span></span><br><span class="line">        ByteBuf byteBuf = (ByteBuf) msg;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端发送消息：&quot;</span> + byteBuf.toString(CharsetUtil.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端地址：&quot;</span> + ctx.channel().remoteAddress());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据读取完毕</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 将数据写入到缓存，并刷新</span></span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;Hello, 客户端~&quot;</span>, CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(cause.getMessage());</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>NettyClient.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/9/21 22:20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：</span></span><br><span class="line"><span class="comment"> * 自定义一个Handler需要继承Netty规定好的某个HandlerAdapter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取数据事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx 上下文对象，含有管道pipline[处理数据]，通道channel[传输数据]，地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 客户端发送的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;server ctx = &quot;</span> + ctx);</span><br><span class="line">        <span class="comment">// 将msg转成ByteBuffer</span></span><br><span class="line">        ByteBuf byteBuf = (ByteBuf) msg;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端发送消息：&quot;</span> + byteBuf.toString(CharsetUtil.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端地址：&quot;</span> + ctx.channel().remoteAddress());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据读取完毕</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 将数据写入到缓存，并刷新</span></span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;Hello, 客户端~&quot;</span>, CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(cause.getMessage());</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>NettyClientHandler.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/9/22 19:09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通道就绪-&gt;触发</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;client &quot;</span> +  ctx);</span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;Hello, server~喵&quot;</span>, CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有读取事件时-&gt;触发</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteBuf byteBuf = (ByteBuf) msg;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器回复消息：&quot;</span> + byteBuf.toString(CharsetUtil.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器的地址：&quot;</span> + ctx.channel().remoteAddress());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(cause.getMessage());</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-4-任务队列"><a href="#3-4-任务队列" class="headerlink" title="3.4 任务队列"></a>3.4 任务队列</h3><p>任务队列中的<code>Task</code>有三种典型使用场景</p>
<ul>
<li>用户程序自定义的普通任务</li>
<li>用户自定义定时任务</li>
<li>非当前<code>Reactor</code>线程调用<code>Channel</code>的各种方法</li>
</ul>
<h3 id="3-5-异步模型"><a href="#3-5-异步模型" class="headerlink" title="3.5 异步模型"></a>3.5 异步模型</h3><h4 id="3-5-1-基本介绍"><a href="#3-5-1-基本介绍" class="headerlink" title="3.5.1 基本介绍"></a>3.5.1 基本介绍</h4><ol>
<li>异步的概念和同步相对。当一个异步过程调用发出后，调用者不能立刻得到结果。实际处理这个调用的组件在完成后，通过状态、通知和回调来通知调用者</li>
<li><code>Netty</code>中的I/O操作是异步的，包括<code>Bind</code>、<code>Write</code>、<code>Connect</code>等操作会简单的返回一个<code>ChannelFuture</code></li>
<li>调用者并不能理科获得结果，而是通过Future-Listener机制，用户可以方便的主动获取或者通过通知机制获得IO操作结果</li>
<li><code>Netty</code>的异步模型是建立在<code>future</code>和<code>callback</code>之上的。<code>callback</code>就是回调。重点是<code>future</code>，它的核心思想是：结社一个方法<code>fun</code>，计算过程可能非常耗时，等待<code>fun</code>返回显然不合适。那么可以在调用<code>fun</code>的时候立马返回一个<code>future</code>，后续可以通过<code>future</code>去监控方法<code>fun</code>的处理过程</li>
</ol>
<h4 id="3-5-2-Future说明"><a href="#3-5-2-Future说明" class="headerlink" title="3.5.2 Future说明"></a>3.5.2 Future说明</h4><ol>
<li><p>表示异步的执行结果，可以通过它提供的方法来检测执行是否完成</p>
</li>
<li><p><code>ChannelFuture</code>是一个接口: public interface ChannelFuture extends Future<Void></p>
<p>我们可以添加监听器，当监听的事件发生时，就会通知到监听器</p>
</li>
</ol>
<h4 id="3-5-3-Future-Listener机制"><a href="#3-5-3-Future-Listener机制" class="headerlink" title="3.5.3 Future-Listener机制"></a>3.5.3 Future-Listener机制</h4><ol>
<li><p>当<code>future</code>对象刚刚创建时，处于非完成状态，调用者可以通过返回的<code>ChannelFuture</code>来获取操作执行的状态，注册监听函数来执行完成后的操作</p>
</li>
<li><p>常见操作：</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">isDone()</td>
<td align="center">判断当前操作是否完成</td>
</tr>
<tr>
<td align="center">isSuccess()</td>
<td align="center">判断已完成的当前操作是否成功</td>
</tr>
<tr>
<td align="center">getCause()</td>
<td align="center">获取已完成的当前操作失败的原因</td>
</tr>
<tr>
<td align="center">isCancelled()</td>
<td align="center">判断已完成的当前操作是否被取消</td>
</tr>
<tr>
<td align="center">addListener()</td>
<td align="center">注册监听器，当操作已完成(isDone返回完成)，将会通知指定的监听器；如果Future对象已完成，则通知指定的监听器</td>
</tr>
</tbody></table>
</li>
</ol>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 绑定一个端口并且同步</span></span><br><span class="line"><span class="comment">// 绑定端口并启动服务器</span></span><br><span class="line">ChannelFuture CF = bootstrap.bind(<span class="number">3333</span>).sync();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给CF注册监听器</span></span><br><span class="line">CF.addListener(<span class="keyword">new</span> ChannelFutureListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(ChannelFuture channelFuture)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CF.isSuccess()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;服务器监听端口[3333]成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;服务器监听端口[3333]失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="3-6-Http服务"><a href="#3-6-Http服务" class="headerlink" title="3.6 Http服务"></a>3.6 Http服务</h3><blockquote>
<p>TestServer.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/9/26 10:34</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            serverBootstrap.group(bossGroup, workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> TestServerInitializer());</span><br><span class="line"></span><br><span class="line">            ChannelFuture CF = serverBootstrap.bind(<span class="number">3333</span>).sync();</span><br><span class="line"></span><br><span class="line">            CF.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>TestServerInitializer.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelPipeline;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.http.HttpServerCodec;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/9/26 10:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServerInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 向管道加入处理器</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到管道</span></span><br><span class="line">        ChannelPipeline pipeline = socketChannel.pipeline();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加入一个Netty提供的HttpServerCodeC codec =&gt; [coder - decoder]</span></span><br><span class="line">        <span class="comment">// 1、HttpServerCodeC: 处理http的编&amp;解码器</span></span><br><span class="line">        pipeline.addLast(<span class="string">&quot;MyHttpServerCodec&quot;</span>, <span class="keyword">new</span> HttpServerCodec());</span><br><span class="line">        <span class="comment">// 2、增加一个自定义handler</span></span><br><span class="line">        pipeline.addLast(<span class="string">&quot;MyTestServerHandler&quot;</span>, <span class="keyword">new</span> TestHttpServerHandler());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>TestHttpServerHandler.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelPipeline;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.http.HttpServerCodec;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/9/26 10:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServerInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 向管道加入处理器</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到管道</span></span><br><span class="line">        ChannelPipeline pipeline = socketChannel.pipeline();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加入一个Netty提供的HttpServerCodeC codec =&gt; [coder - decoder]</span></span><br><span class="line">        <span class="comment">// 1、HttpServerCodeC: 处理http的编&amp;解码器</span></span><br><span class="line">        pipeline.addLast(<span class="string">&quot;MyHttpServerCodec&quot;</span>, <span class="keyword">new</span> HttpServerCodec());</span><br><span class="line">        <span class="comment">// 2、增加一个自定义handler</span></span><br><span class="line">        pipeline.addLast(<span class="string">&quot;MyTestServerHandler&quot;</span>, <span class="keyword">new</span> TestHttpServerHandler());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="5-核心"><a href="#5-核心" class="headerlink" title="5. 核心"></a>5. 核心</h2><h3 id="4-1-BootStrap、ServerBootStrap"><a href="#4-1-BootStrap、ServerBootStrap" class="headerlink" title="4.1 BootStrap、ServerBootStrap"></a>4.1 BootStrap、ServerBootStrap</h3><blockquote>
<p>说明</p>
</blockquote>
<p><code>BootStrap</code>意思是引导程序，一个<code>Netty</code>应用通常由一个<code>BootStrap</code>开始，主要作用是配置整个<code>Netty</code>程序，串联各个组件，<code>Netty</code>中<code>BootStrap</code>类是客户端程序的启动引导类，<code>ServerBootStrap</code>是服务器端启动引导类</p>
<blockquote>
<p>常用方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法名称</th>
<th align="center">方法介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">public ServerBootStrap group(EventLoopGroup parentGroup, EventLoopGroup childGroup)</td>
<td align="center">该方法用于服务器端，用来设置两个EventLoop</td>
</tr>
<tr>
<td align="center">public B group(EventLoopGroup group)</td>
<td align="center">该方法用于客户端，用来设置一个EventLoop</td>
</tr>
<tr>
<td align="center">public B channel(Class&lt;? extends C&gt; channelClass)</td>
<td align="center">该方法用来设置一个服务器端的通道实现</td>
</tr>
<tr>
<td align="center">public <T> B option(ChannelOption<T> option, T value)</td>
<td align="center">用来给ServerChannel添加配置</td>
</tr>
<tr>
<td align="center">public  ServerBootstrap childOption(ChannelOption childOption, T value)</td>
<td align="center">用来给接收到的通道添加配置</td>
</tr>
<tr>
<td align="center">public ServerBootstrap childHandler(ChannelHandler childHandler)</td>
<td align="center">该方法用来设置业务处理类(自定义的handler)</td>
</tr>
<tr>
<td align="center">public ChannelFuture bind(int inetPort)</td>
<td align="center">该方法用于服务器端，用来设置占用的端口号</td>
</tr>
<tr>
<td align="center">public ChannelFuture connect(String inetHost, int inetPort)</td>
<td align="center">该方法用于客户端，用来连接服务器</td>
</tr>
</tbody></table>
<h3 id="4-2-Future、ChannelFuture"><a href="#4-2-Future、ChannelFuture" class="headerlink" title="4.2 Future、ChannelFuture"></a>4.2 Future、ChannelFuture</h3><blockquote>
<p>说明</p>
</blockquote>
<p><code>Netty</code>中所有的IO操作都是异步的，不能立刻得知消息是否被正确处理。但是可以过一会等它执行完或者直接注册一个监听，具体的实现就是通过<code>Future</code>和<code>ChannelFuture</code>，它们可以注册一个监听，当操作执行成功或失败时监听会自动触发注册的监听事件</p>
<blockquote>
<p>常用方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法名称</th>
<th align="center">方法介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Channel channel()</td>
<td align="center">返回当前正在进行IO操作的通道</td>
</tr>
<tr>
<td align="center">ChannelFuture sync()</td>
<td align="center">等待异步操作执行完毕，相当于将阻塞在当前</td>
</tr>
</tbody></table>
<h3 id="4-3-Channel"><a href="#4-3-Channel" class="headerlink" title="4.3 Channel"></a>4.3 Channel</h3><blockquote>
<p>说明</p>
</blockquote>
<ul>
<li><code>Netty</code>网络通信的组件，能够用于执行网络I/O操作</li>
<li>通过<code>Channel</code>可获得当前网络连接的通道的状态</li>
<li>通过<code>Channel</code>可获得网络连接的配置参数</li>
<li><code>Channel</code>通过异步的网络I/O操作(比如：建立连接、读写和绑定端口)，异步调用意味着任何I/O调用都将立即返回，并且不保证在调用结束时所请求的I/O操作已完成</li>
<li>调用立即返回一个<code>ChannelFuture</code>实例，通过注册器到<code>ChannelFuture</code>上，可以I/O操作成功、失败或取消时回调通知调用方 </li>
<li>支持关联I/O操作与对应的处理程序</li>
<li>不同协议、不同的阻塞类型的连接都有不同的<code>Channel</code>类型与之对应</li>
</ul>
<blockquote>
<p>常见Channel类型</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">NioSocketChannel</td>
<td align="center">异步的客户端TCP Socket连接</td>
</tr>
<tr>
<td align="center">NioServerSocketChannel</td>
<td align="center">异步的服务器端TCP Socket连接</td>
</tr>
<tr>
<td align="center">NioDatagramChannel</td>
<td align="center">异步的UDP连接</td>
</tr>
<tr>
<td align="center">NioSctpChannel</td>
<td align="center">异步的客户端Sctp连接</td>
</tr>
<tr>
<td align="center">NioSctpServerChannel</td>
<td align="center">异步的Sctp服务器端连接，这些通道涵盖了UDP和TCP网络I/O以及文件I/O</td>
</tr>
</tbody></table>
<h3 id="4-4-Selector"><a href="#4-4-Selector" class="headerlink" title="4.4 Selector"></a>4.4 Selector</h3><blockquote>
<p>说明</p>
</blockquote>
<ul>
<li><code>Netty</code>基于<code>Selector</code>对象实现I/O多路复用，通过<code>Selector</code>一个线程可以监听多个连接的<code>Channel</code>事件</li>
<li>当向一个<code>Selector</code>中注册<code>Channel</code>后，<code>Selector</code>内部的机制就可以自动不断地查询(<code>Select</code>)这些注册的<code>Channel</code>是否有已就绪的I/O事件(比如：可读、可写、网络连接完成等)，这样程序就可以很简单地使用一个线程高效地管理多个<code>Channel</code></li>
<li>同时，<code>Netty</code>中对<code>Selector</code>中的<code>selectedKey</code>集合进行了替换，它替换成了一个它自己实现的一个<code>set</code>集合，这样效率更高</li>
</ul>
<h3 id="4-5-ChannelHandler及其实现类"><a href="#4-5-ChannelHandler及其实现类" class="headerlink" title="4.5 ChannelHandler及其实现类"></a>4.5 ChannelHandler及其实现类</h3><blockquote>
<p>说明</p>
</blockquote>
<ul>
<li><p><code>ChannelHandler</code>是一个接口，处理I/O事件或拦截I/O操作，并将其转发到<code>ChannelPipeline</code>(业务处理链)中的下一个处理程序</p>
</li>
<li><p><code>ChannelHandler</code>本身并没有提供很多方法，因为这个接口有许多的方法需要实现，方便使用期间，可以继承它的子类</p>
</li>
<li><p>我们经常需要自定义一个<code>Handler</code>类取继承<code>ChannelInboundHandlerAdapter</code>，然后通过重写相应方法实现业务逻辑</p>
<p>一般需要重写的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChannelInboundHandlerAdapter</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> <span class="keyword">implements</span> <span class="title">ChannelInboundHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通道注册事件</span></span><br><span class="line">    <span class="meta">@Skip</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRegistered</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.fireChannelRegistered();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通道取消注册事件</span></span><br><span class="line">    <span class="meta">@Skip</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelUnregistered</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.fireChannelUnregistered();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通道就绪事件</span></span><br><span class="line">    <span class="meta">@Skip</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.fireChannelActive();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通道断联事件</span></span><br><span class="line">    <span class="meta">@Skip</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.fireChannelInactive();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通道读取数据事件</span></span><br><span class="line">    <span class="meta">@Skip</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.fireChannelRead(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通道数据读取完毕事件</span></span><br><span class="line">    <span class="meta">@Skip</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.fireChannelReadComplete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用法事件触发</span></span><br><span class="line">    <span class="meta">@Skip</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.fireUserEventTriggered(evt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通道可写性更改事件</span></span><br><span class="line">    <span class="meta">@Skip</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelWritabilityChanged</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.fireChannelWritabilityChanged();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通道发生异常事件</span></span><br><span class="line">    <span class="meta">@Skip</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;deprecation&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.fireExceptionCaught(cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>ChannelInboundHandler</code>  用于处理入站I/O事件</li>
<li><code>ChannelOutboundHandler</code>  用于处理出战I/O事件</li>
</ul>
<blockquote>
<p>适配器</p>
</blockquote>
</li>
<li><p><code>ChannelInboundHandlerAdapter</code> 用于处理入站 I/O 事件</p>
</li>
<li><p><code>ChannelOutboundHandlerAdapter</code> 用于处理出站 I/O 操作</p>
</li>
<li><p><code>ChannelDuplexHandler</code> 用于处理入站和出站事件</p>
</li>
</ul>
<h3 id="4-6-Pipeline、Channel"><a href="#4-6-Pipeline、Channel" class="headerlink" title="4.6 Pipeline、Channel"></a>4.6 Pipeline、Channel</h3><blockquote>
<p>说明</p>
</blockquote>
<ul>
<li><p><code>ChannelPipeline</code>是一个Handler的集合，它负责处理和拦截<code>inbound</code>和<code>outbound</code>的事件和操作，相当于一个贯穿<code>Netty</code>的链（通俗的讲：<code>ChannelPipeline</code>是保存<code>ChannelHandler</code>的<code>list</code>，用于处理或拦截<code>Channel</code>的入站事件和出战操作）</p>
</li>
<li><p><code>ChanenelPipline</code>实现了一种高级形式的拦截过滤器模式，使用户可以完全控制事件的处理方式，以及<code>Channel</code>中各个的<code>ChannelHandler</code>如何相互交互</p>
</li>
<li><p>在<code>Netty</code>中每个<code>Channel</code>都有且仅有一个<code>ChannelPipeline</code>与之对应，他们的组成关系如下</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/1c6ba3e2/image-20201002192427279.png" class="" title="image-20201002192427279">
</li>
<li><p>一个<code>Channel</code>包含一个<code>ChannelPipeline</code>，而<code>ChannelPipeline</code>中又维护了一个由<code>ChannelHandlerContext</code>组成的双向链表，并且每个<code>ChannelHandlerContext</code>中又关联着一个<code>ChannelHandler</code></p>
</li>
<li><p>入站事件和出战事件在一个双向链表中，入站事件会从链表<code>head</code>往后传递到最后一个入站的handler，出站事件会从链表<code>tail</code>往前传递到最前一个出站的<code>handler</code>，两种类型的<code>handler</code>互不干扰</p>
</li>
</ul>
<blockquote>
<p>常用方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法名称</th>
<th align="center">方法介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ChannelPipeline addFirst(ChannelHandler… handlers)</td>
<td align="center">把一个业务处理类（handler）添加到链中的第一个位置</td>
</tr>
<tr>
<td align="center">ChannelPipeline addLast(ChannelHandler… handlers)</td>
<td align="center">把一个业务处理类（handler）添加到链中的最后一个位置</td>
</tr>
</tbody></table>
<h3 id="4-7-ChannelHandlerContext"><a href="#4-7-ChannelHandlerContext" class="headerlink" title="4.7 ChannelHandlerContext"></a>4.7 ChannelHandlerContext</h3><blockquote>
<p>说明</p>
</blockquote>
<ul>
<li>保存<code>Channel</code>相关的所有上下文信息，同时关联一个ChannelHandler对象</li>
<li>即<code>ChannelHandlerContext</code>中包含一个具体的事件处理器<code>ChannelHandler</code>，同时<code>ChannelHandlerContext</code>中也绑定了对应的<code>Pipeline</code>和<code>Channel</code>的信息，方便对<code>ChannelHandler</code>进行调用</li>
</ul>
<blockquote>
<p>常见方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法名称</th>
<th align="center">方法介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ChannelFuture close()</td>
<td align="center">关闭通道</td>
</tr>
<tr>
<td align="center">ChannelOutboundInvoker flush()</td>
<td align="center">刷新</td>
</tr>
<tr>
<td align="center">ChannelFuture writeAndFlush(Object msg)</td>
<td align="center">将数据写到ChannelPipeline中当前ChannelHandler的下一个ChannelHandler开始处理</td>
</tr>
</tbody></table>
<h3 id="4-8-ChannelOption"><a href="#4-8-ChannelOption" class="headerlink" title="4.8 ChannelOption"></a>4.8 ChannelOption</h3><blockquote>
<p>说明</p>
</blockquote>
<p><code>Netty</code>在创建<code>Channel</code>实例后，一般都需要设置<code>ChannelOption</code>参数</p>
<blockquote>
<p>参数如下：</p>
</blockquote>
<ul>
<li>ChannelOption.SO_BACKLOG:<ul>
<li>对应TCP/IP协议listen函数中的backlog参数，用来初始化服务器可连接队列大小</li>
<li>服务端处理客户端连接请求是顺序处理的，所以同一时间只能处理一个客户端连接。多个客户端来的时候，服务端将不能处理的客户端连接请求放在队列中等待处理，backlog参数指定了队列的大小</li>
</ul>
</li>
<li>ChannelOption.SO_KEEPALIVE:<ul>
<li>一直保持连接活动状态</li>
</ul>
</li>
</ul>
<h3 id="4-9-EventLoopGroup和其实现类NioEventLoopGroup"><a href="#4-9-EventLoopGroup和其实现类NioEventLoopGroup" class="headerlink" title="4.9 EventLoopGroup和其实现类NioEventLoopGroup"></a>4.9 EventLoopGroup和其实现类NioEventLoopGroup</h3><blockquote>
<p>说明</p>
</blockquote>
<ul>
<li><code>EventLoopGroup</code>是一组<code>EventLoop</code>的抽象，<code>Netty</code>为了更好的利用多核CPU资源，一般会有多个<code>EventLoop</code>同时工作，每个<code>EventLoop</code>维护者一个Selector实例。</li>
<li><code>EventLoopGroup</code>提供next接口，可以从组里面按照一定规则获取其中一个<code>EventLoop</code>来处理任务。在Netty服务器端编程中，我们一般都需要提供两个<code>EventLoopGroup</code>，<code>BossGroup</code>和<code>WorkerGroup</code></li>
<li>通常一个服务端口即一个<code>ServerSocketChannel</code>对应一个<code>Selector</code>和一个<code>EventLoop</code>线程。<code>BossEventLoop</code>负责接收客户端的连接并将<code>SocketChannel</code>交给<code>WorkerEventLoopGroup</code>来进行IO处理</li>
<li><code>BossEventLoopGroup</code>通常是一个单线程的<code>EventLoop</code>，<code>EventLoop</code>维护着一个注册了<code>ServerSocketChannel</code>的<code>Selector</code>实例<code>BossEventLoop</code>不断轮询<code>Selector</code>将连接事件分离出来</li>
<li>通常是OP_ACCEPT事件，然后将接收到的<code>SocketChannel</code>交给<code>WorkerEventLoopGroup</code></li>
<li><code>WorkerEventLoopGroup</code>会由<code>next</code>选择其中一个<code>EventLoop</code>来将这个<code>SocketChannel</code>注册到其维护的<code>Selector</code>并对其后续的IO事件进行处理</li>
</ul>
<blockquote>
<p>常用方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法名称</th>
<th align="center">方法介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">public NioEventLoopGroup()</td>
<td align="center">构造方法</td>
</tr>
<tr>
<td align="center">public Future&lt;?&gt; shutdownGracefully()</td>
<td align="center">断开连接，关闭线程</td>
</tr>
</tbody></table>
<h3 id="4-10-Unpooled"><a href="#4-10-Unpooled" class="headerlink" title="4.10 Unpooled"></a>4.10 Unpooled</h3><blockquote>
<p>说明</p>
</blockquote>
<p><code>Netty</code>提供一个专门用来操作缓冲区（即<code>Netty</code>的数据容器）的工具类</p>
<blockquote>
<p>常用方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法名称</th>
<th align="center">方法介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">public static ByteBuf copiedBuffer(CharSequence string, Charset charset)</td>
<td align="center">通过给定的数据和字符编码返回一个 ByteBuf 对象（类似于 NIO 中的 ByteBuffer 但有区别）</td>
</tr>
</tbody></table>
<h3 id="4-11-群聊系统"><a href="#4-11-群聊系统" class="headerlink" title="4.11 群聊系统"></a>4.11 群聊系统</h3><blockquote>
<p>要求</p>
</blockquote>
<ul>
<li>编写一个 Netty 群聊系统，实现服务器端和客户端之间的数据简单通讯（非阻塞）</li>
<li>实现多人群聊</li>
<li>服务器：可以监测用户上线，离线，并实现消息转发功能</li>
<li>客户端：通过channel 可以无阻塞发送消息给其它所有用户，同时可以接受其它用户发送的消息(由服务器转发得到)</li>
</ul>
<blockquote>
<p>GroupChatServer.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.groupChat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kag.nio.groupchat.GroupChatClient;</span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.*;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringEncoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/2 8:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GroupChatServer</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建两个线程组</span></span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line"></span><br><span class="line">        serverBootstrap.group(workerGroup, workerGroup)</span><br><span class="line">                .channel(NioServerSocketChannel.class)</span><br><span class="line">                .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>)</span><br><span class="line">                .childOption(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>)</span><br><span class="line">                .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="comment">// 获取pipeline</span></span><br><span class="line">                        ChannelPipeline pipeline = channel.pipeline();;</span><br><span class="line">                        <span class="comment">// 向pipeline加入解码器</span></span><br><span class="line">                        pipeline.addLast(<span class="string">&quot;decoder&quot;</span>, <span class="keyword">new</span> StringDecoder());</span><br><span class="line">                        <span class="comment">// 向pipeline加入编码器</span></span><br><span class="line">                        pipeline.addLast(<span class="string">&quot;encoder&quot;</span>, <span class="keyword">new</span> StringEncoder());</span><br><span class="line">                        <span class="comment">// 加入自己的业务处理handler</span></span><br><span class="line">                        pipeline.addLast(<span class="keyword">new</span> GroupChatServerHandler());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;▶-----Netty服务器启动-----◀&quot;</span>);</span><br><span class="line">            ChannelFuture channelFuture = serverBootstrap.bind(port).sync();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 监听关闭</span></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> GroupChatServer(<span class="number">3333</span>).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>GroupChatServerHandler.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.groupChat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.Channel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.group.ChannelGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.group.DefaultChannelGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.concurrent.EventExecutor;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.concurrent.GlobalEventExecutor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/2 8:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个channel组，管理所有的channel</span></span><br><span class="line">    <span class="comment">// GlobalEventExecutor.INSTANCE 是全局的时间执行器，是一个单例</span></span><br><span class="line">    EventExecutor executor;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ChannelGroup channelGroup = <span class="keyword">new</span> DefaultChannelGroup(GlobalEventExecutor.INSTANCE);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">now</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> simpleDateFormat.format(<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HandlerAdded</span></span><br><span class="line"><span class="comment">     * 表示连接建立，一旦连接，第一个被执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerAdded</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Channel channel = ctx.channel();</span><br><span class="line">        <span class="comment">// 将该客户加入聊天的信息推送给其他在线的客户</span></span><br><span class="line">        <span class="comment">// 该方法会将channelGroup中的所有channel遍历，并发送消息</span></span><br><span class="line">        channelGroup.writeAndFlush(now() + <span class="string">&quot; [客户端]&quot;</span> + channel.remoteAddress() + <span class="string">&quot;加入聊天\n&quot;</span>);</span><br><span class="line">        channelGroup.add(channel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HandlerRemoved</span></span><br><span class="line"><span class="comment">     * 表示断开连接，将XX客户离线信息推送给当前在线客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerRemoved</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Channel channel = ctx.channel();</span><br><span class="line">        channelGroup.writeAndFlush(now() + <span class="string">&quot; [客户端]&quot;</span> + channel.remoteAddress() + <span class="string">&quot;离开聊天\n&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Channel Group Size = &quot;</span> + channelGroup.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * channelActive</span></span><br><span class="line"><span class="comment">     * 表示channel处于活动状态，提示XX上线</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(now() + <span class="string">&quot; &quot;</span> + ctx.channel().remoteAddress() + <span class="string">&quot;上线&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * channelInactive</span></span><br><span class="line"><span class="comment">     * 表示channel处于非活动状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(now() + <span class="string">&quot; &quot;</span> + ctx.channel().remoteAddress() + <span class="string">&quot;离线&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ChannelRead0</span></span><br><span class="line"><span class="comment">     * 转发消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channelHandlerContext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext channelHandlerContext, String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Channel channel = channelHandlerContext.channel();</span><br><span class="line">        <span class="comment">// 遍历ChannelGroup</span></span><br><span class="line">        channelGroup.forEach(ch -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel != ch) <span class="comment">// 不是当前channel，直接转发</span></span><br><span class="line">                ch.writeAndFlush(now() + <span class="string">&quot; [客户]&quot;</span> + channel.remoteAddress() + <span class="string">&quot;：&quot;</span> + s + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="comment">// 当前channel是自己</span></span><br><span class="line">                ch.writeAndFlush(now() + <span class="string">&quot; [自己]: &quot;</span> + s + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.exceptionCaught(ctx, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>GroupChatClient.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.groupChat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.*;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.SocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/2 9:22</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String host;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GroupChatClient</span><span class="params">(String host, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap()</span><br><span class="line">                .group(group)</span><br><span class="line">                .channel(NioSocketChannel.class)</span><br><span class="line">                .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="comment">// 得到pipeline</span></span><br><span class="line">                        ChannelPipeline pipeline = channel.pipeline();</span><br><span class="line">                        <span class="comment">// 加入相关handler</span></span><br><span class="line">                        pipeline.addLast(<span class="string">&quot;decoder&quot;</span>, <span class="keyword">new</span> StringDecoder());</span><br><span class="line">                        pipeline.addLast(<span class="string">&quot;encoder&quot;</span>, <span class="keyword">new</span> StringEncoder());</span><br><span class="line">                        <span class="comment">// 加入自定义的handler</span></span><br><span class="line">                        pipeline.addLast(<span class="keyword">new</span> GroupChatClientHandler());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ChannelFuture channelFuture = bootstrap.connect(host, port).sync();</span><br><span class="line">            Channel channel = channelFuture.channel();</span><br><span class="line">            System.out.println(<span class="string">&quot;▶-----&quot;</span> + channel.localAddress().toString().substring(<span class="number">1</span>) + <span class="string">&quot;-----◀&quot;</span>);</span><br><span class="line">            <span class="comment">// 输入信息</span></span><br><span class="line">            Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">                String msg = scanner.nextLine();</span><br><span class="line">                <span class="comment">// 通过channel发送到服务器端</span></span><br><span class="line">                channel.writeAndFlush(msg + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            group.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">new</span> GroupChatClient(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">3333</span>).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>GroupChatClientHandler.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.groupChat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/2 10:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatClientHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext channelHandlerContext, String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(s.trim());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-12-心跳检测"><a href="#4-12-心跳检测" class="headerlink" title="4.12 心跳检测"></a>4.12 心跳检测</h3><blockquote>
<p>要求</p>
</blockquote>
<ul>
<li>当服务器超过3秒没有读操作时，就提示读空闲</li>
<li>当服务器超过5秒没有写操作时，就提示写空闲</li>
<li>当服务器超过7秒没有读或写时，就提示读写空闲</li>
</ul>
<blockquote>
<p>MyServer.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.heartbeat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelPipeline;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.logging.LogLevel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.logging.LoggingHandler;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.timeout.IdleStateHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/2 10:25</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        NioEventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        NioEventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            serverBootstrap.group(bossGroup, workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))  <span class="comment">//为BossGroup中的请求添加日志处理Handler</span></span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">                            <span class="comment">/**</span></span><br><span class="line"><span class="comment">                             * 加入一个 netty 提供的 IdleStateHandler</span></span><br><span class="line"><span class="comment">                             * 说明</span></span><br><span class="line"><span class="comment">                             * 1、IdleStateHandler 是 netty 提供的检测空闲状态的处理器</span></span><br><span class="line"><span class="comment">                             * 2、long readerIdleTime：表示多长时间没有读，就会发送一个心跳检测包检测是否还是连接的状态</span></span><br><span class="line"><span class="comment">                             * 3、long writerIdleTime：表示多长时间没有写，就会发送一个心跳检测包检测是否还是连接的状态</span></span><br><span class="line"><span class="comment">                             * 4、long allIdleTime：表示多长时间没有读写，就会发送一个心跳检测包检测是否还是连接的状态</span></span><br><span class="line"><span class="comment">                             * 5、当 IdleStateEvent 触发后，就会传递给管道的下一个 Handler，通过调用（触发）下一个Handler的 userEventTriggered，在该方法区处理这个事件。</span></span><br><span class="line"><span class="comment">                             */</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> IdleStateHandler(<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">                            <span class="comment">//加入一个对空闲检测进一步处理的Handler（自定义）</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> MyServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            <span class="comment">//启动服务器，设置为同步模式</span></span><br><span class="line">            ChannelFuture channelFuture = serverBootstrap.bind(<span class="number">3333</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>MyServerHandler.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.heartbeat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.timeout.IdleStateEvent;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/2 10:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx 上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> evt 事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (evt <span class="keyword">instanceof</span> IdleStateEvent) &#123;</span><br><span class="line">            <span class="comment">// 将evt向下转型</span></span><br><span class="line">            IdleStateEvent event = (IdleStateEvent) evt;</span><br><span class="line">            String eventType = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">switch</span> (event.state()) &#123;</span><br><span class="line">                <span class="keyword">case</span> READER_IDLE:</span><br><span class="line">                    eventType = <span class="string">&quot;读空闲&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> WRITER_IDLE:</span><br><span class="line">                    eventType = <span class="string">&quot;写空闲&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> ALL_IDLE:</span><br><span class="line">                    eventType = <span class="string">&quot;读写空闲&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(ctx.channel().remoteAddress() + <span class="string">&quot;——&gt;超时：&quot;</span> + eventType);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果发生空闲，直接关闭通道</span></span><br><span class="line"><span class="comment">//            ctx.channel().close();</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;服务器关闭通道···&quot;);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-13-简单总结"><a href="#4-13-简单总结" class="headerlink" title="4.13 简单总结"></a>4.13 简单总结</h3><blockquote>
<p>服务器</p>
</blockquote>
<ol>
<li>创建两个线程组，<code>bossGroup</code>和<code>workerGroup</code></li>
<li>创建服务器启动对象<code>ServerBootStrap</code></li>
<li>链式编程配置<code>ServerBootStrap</code>的参数<ol>
<li><code>group</code>：设置线程组<code>bossGroup</code>和<code>workerGroup</code></li>
<li><code>channel</code>：设置通道实现，一般选择<code>NioServerSocketChannel</code></li>
<li><code>option</code>：设置可连接线程队列以及大小，一般选择<code>SO_BACKLOG</code></li>
<li><code>childOption</code>：设置保持活动连接状态，选择<code>SO_KEEPALIVE</code></li>
<li><code>handler</code>：给<code>bossGroup</code>设置<code>Handler</code></li>
<li><code>childHandler</code>：给<code>workerGroup</code>设置<code>Hadnler</code></li>
</ol>
</li>
<li><code>ServerBootStrap</code>绑定端口，设置同步，并且监听通道关闭事件</li>
</ol>
<blockquote>
<p>客户端</p>
</blockquote>
<ol>
<li>创建一个线程组<code>group</code></li>
<li>创建客户端启动对象<code>BootStrap</code></li>
<li>链式编程配置<code>BootStrap</code>的参数<ol>
<li><code>group</code>：设置线程组<code>group</code></li>
<li><code>channel</code>：设置通道实现，一般选择<code>NioSocketChannel</code></li>
<li><code>handler</code>：设置<code>Handler</code></li>
</ol>
</li>
<li><code>BootStrap</code>绑定端口，设置同步，并且监听通道关闭事件</li>
</ol>
<blockquote>
<p>常见Handler</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Handler</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">SimpleChannelInboundHandler</td>
<td align="center">处理通信(服务器最常用)</td>
</tr>
<tr>
<td align="center">IdleStateHandler</td>
<td align="center">检测空闲状态(心跳检测)</td>
</tr>
<tr>
<td align="center">WebSocketServerProtocolHandler</td>
<td align="center">将http协议升级ws协议，保持长连接</td>
</tr>
</tbody></table>
<blockquote>
<p>Handler常用方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Method</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">handlerAdded(ChannelHandlerContext ctx)</td>
<td align="center">连接建立，一旦建立连接，第一个被执行的方法</td>
</tr>
<tr>
<td align="center">handlerRemoved(ChannelHandlerContext ctx)</td>
<td align="center">连接断开，将XX客户离线信息推送给当前在线客户</td>
</tr>
<tr>
<td align="center">channelActive(ChannelHandlerContext ctx)</td>
<td align="center">表示channel处于活动状态，提示XX上线</td>
</tr>
<tr>
<td align="center">channelInactive(ChannelHandlerContext ctx)</td>
<td align="center">表示channel处于非活动状态，提示XX离线</td>
</tr>
<tr>
<td align="center">channelRead0(ChannelHandlerContext channelHandlerContext, String s)</td>
<td align="center">读取数据，并进行消息转发</td>
</tr>
<tr>
<td align="center">exceptionCaught(ChannelHandlerContext ctx, Throwable cause)</td>
<td align="center">异常处理</td>
</tr>
<tr>
<td align="center">userEventTriggered(ChannelHandlerContext ctx, Object evt)</td>
<td align="center">事件触发器。在<code>IdleStateHandler</code>后面加上一个触发器，可以检测心跳。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Server</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8-Stream</title>
    <url>/posts/3e51ba23/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>​       Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。</p>
<p>特点：</p>
<ul>
<li><p>不是数据结构，不会保存数据。</p>
</li>
<li><p>不会修改原来的数据源，它会将操作后的数据保存到另外一个对象中。（保留意见：毕竟peek方法可以修改流中元素）</p>
</li>
<li><p>惰性求值，流在中间处理过程中，只是对操作进行了记录，并不会立即执行，需要等到执行终止操作的时候才会进行实际的计算。</p>
</li>
</ul>
<h2 id="2-分类"><a href="#2-分类" class="headerlink" title="2. 分类"></a>2. 分类</h2><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">状态</th>
<th align="center">API</th>
</tr>
</thead>
<tbody><tr>
<td align="center">中间操作</td>
<td align="center">有状态</td>
<td align="center">unordered() filter() map() mapToInt() mapToDouble() flatMap() flatMapToInt() flatMapToLong() flatMapToDouble() peek()</td>
</tr>
<tr>
<td align="center">中间操作</td>
<td align="center">无状态</td>
<td align="center">distinct() sorted() limit() skip()</td>
</tr>
<tr>
<td align="center">结束操作</td>
<td align="center">非短路操作</td>
<td align="center">foreach() forEachOrdered() toArray() reduce() collect() max() min() count()</td>
</tr>
<tr>
<td align="center">结束操作</td>
<td align="center">短路操作</td>
<td align="center">anyMatch() allMatch() noneMatch() findFirst() findAny()</td>
</tr>
</tbody></table>
<p>注释：</p>
<ul>
<li><p>无状态：指元素的处理不受之前元素的影响；</p>
</li>
<li><p>有状态：指该操作只有拿到所有元素之后才能继续下去。</p>
</li>
<li><p>非短路操作：指必须处理所有元素才能得到最终结果；</p>
</li>
<li><p>短路操作：指遇到某些符合条件的元素就可以得到最终结果，如 A || B，只要A为true，则无需判断B的结果。</p>
</li>
</ul>
<h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h2><h3 id="3-1-流的常用创建方法"><a href="#3-1-流的常用创建方法" class="headerlink" title="3.1 流的常用创建方法"></a>3.1 流的常用创建方法</h3><h4 id="3-1-1使用Collection下的-stream-和-parallelStream-方法"><a href="#3-1-1使用Collection下的-stream-和-parallelStream-方法" class="headerlink" title="3.1.1使用Collection下的 stream() 和 parallelStream() 方法"></a>3.1.1使用Collection下的 <code>stream()</code> 和 <code>parallelStream()</code> 方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------method1----------&quot;</span>);</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    list.add(<span class="number">1</span>);</span><br><span class="line">    list.add(<span class="number">3</span>);</span><br><span class="line">    list.add(<span class="number">5</span>);</span><br><span class="line">    list.add(<span class="number">7</span>);</span><br><span class="line">    list.add(<span class="number">9</span>);</span><br><span class="line">    Stream&lt;Integer&gt; stream = list.stream();</span><br><span class="line">    Stream&lt;Integer&gt; parallelStream = list.parallelStream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-1-2-使用Arrays中的-stream-方法，将数组转成流"><a href="#3-1-2-使用Arrays中的-stream-方法，将数组转成流" class="headerlink" title="3.1.2 使用Arrays中的 stream() 方法，将数组转成流"></a>3.1.2 使用Arrays中的 <code>stream()</code> 方法，将数组转成流</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------method2----------&quot;</span>);</span><br><span class="line">    Double[] nums = <span class="keyword">new</span> Double[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        nums[i] = random();</span><br><span class="line">    &#125;</span><br><span class="line">    Stream&lt;Double&gt; stream = Arrays.stream(nums);</span><br><span class="line">    stream.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-1-3-使用Stream中的静态方法-of-、iterate-、generate"><a href="#3-1-3-使用Stream中的静态方法-of-、iterate-、generate" class="headerlink" title="3.1.3 使用Stream中的静态方法: of()、iterate()、generate()"></a>3.1.3 使用Stream中的静态方法: <code>of()</code>、<code>iterate()</code>、<code>generate()</code></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------method3----------&quot;</span>);</span><br><span class="line">    Stream&lt;Integer&gt; stream1 = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">    stream1.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    Stream&lt;Integer&gt; stream2 = Stream.iterate(<span class="number">0</span>, (x) -&gt; x + <span class="number">1</span>).limit(<span class="number">6</span>);</span><br><span class="line">    stream2.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    Stream&lt;Double&gt; stream3 = Stream.generate(Math::random).limit(<span class="number">6</span>);</span><br><span class="line">    stream3.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-1-4-使用-BufferedReader-lines-方法，将每行内容转成流"><a href="#3-1-4-使用-BufferedReader-lines-方法，将每行内容转成流" class="headerlink" title="3.1.4 使用 BufferedReader.lines() 方法，将每行内容转成流"></a>3.1.4 使用 <code>BufferedReader.lines()</code> 方法，将每行内容转成流</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------method4----------&quot;</span>);</span><br><span class="line">    BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;D:/Java/Test/K1.txt&quot;</span>));</span><br><span class="line">    Stream&lt;String&gt; lines = reader.lines();</span><br><span class="line">    lines.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-1-5-使用-Pattern-splitAsStream-方法，将字符串分隔成流"><a href="#3-1-5-使用-Pattern-splitAsStream-方法，将字符串分隔成流" class="headerlink" title="3.1.5 使用 Pattern.splitAsStream() 方法，将字符串分隔成流"></a>3.1.5 使用 <code>Pattern.splitAsStream()</code> 方法，将字符串分隔成流</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------method5----------&quot;</span>);</span><br><span class="line">    Pattern pattern = Pattern.compile(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">    Stream&lt;String&gt; stringStream = pattern.splitAsStream(<span class="string">&quot;K,H,I,G,H,N,E,S,S&quot;</span>);</span><br><span class="line">    stringStream.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-2-流的中间操作"><a href="#3-2-流的中间操作" class="headerlink" title="3.2 流的中间操作"></a>3.2 流的中间操作</h3><h4 id="3-2-1-筛选与切片"><a href="#3-2-1-筛选与切片" class="headerlink" title="3.2.1 筛选与切片"></a>3.2.1 筛选与切片</h4><ul>
<li><code>filter()</code>：过滤流中的某些元素</li>
<li><code>limit()</code>：获取前n个元素</li>
<li><code>skip()</code>：跳过前n个元素</li>
<li><code>limit + skip</code>：可以实现分页<code>skip(PageNumber * PageSize).limit(PageSize)</code></li>
<li><code>distinct()</code>：通过流中元素的<code>hashCode()</code>和<code>equals()</code>去除重复元素</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------method1----------&quot;</span>);</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList( <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                       <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>,</span><br><span class="line">                                       <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>,</span><br><span class="line">                                       <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>,</span><br><span class="line">                                       <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>,</span><br><span class="line">                                       <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>,</span><br><span class="line">                                       <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>,</span><br><span class="line">                                       <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>,</span><br><span class="line">                                       <span class="number">9</span>, <span class="number">9</span>, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;----------过滤大于5的元素----------&quot;</span>);</span><br><span class="line">    Stream&lt;Integer&gt; stream1 = list.stream().filter(x -&gt; x &lt;= <span class="number">5</span>);</span><br><span class="line">    stream1.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;----------分页查询/5/3----------&quot;</span>);</span><br><span class="line">    Stream&lt;Integer&gt; stream2 = list.stream().skip(<span class="number">5</span> * <span class="number">3</span>).limit(<span class="number">3</span>);</span><br><span class="line">    stream2.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;----------去掉重复元素----------&quot;</span>);</span><br><span class="line">    Stream stream3 = list.stream().distinct();</span><br><span class="line">    stream3.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-2-2-映射"><a href="#3-2-2-映射" class="headerlink" title="3.2.2 映射"></a>3.2.2 映射</h4><ul>
<li><code>map()</code>：接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素</li>
<li><code>flatMap()</code>：接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------method2----------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;A,B,C&quot;</span>, <span class="string">&quot;1,2,3&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Stream&lt;String&gt; stringStream1 = list.stream().map( x -&gt; x.replaceAll(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;|&quot;</span>));</span><br><span class="line">    stringStream1.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    Stream&lt;String&gt; stringStream2 = list.stream().flatMap( x -&gt;&#123;</span><br><span class="line">        String[] split = x.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        Stream&lt;String&gt; stringStream = Arrays.stream(split);</span><br><span class="line">        <span class="keyword">return</span> stringStream;</span><br><span class="line">    &#125;);</span><br><span class="line">    stringStream2.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="3-2-3-排序"><a href="#3-2-3-排序" class="headerlink" title="3.2.3 排序"></a>3.2.3 排序</h4><ul>
<li><code>sorted()</code>: 自然排序，流中元素需要实现Comparable接口</li>
<li><code>sorted(Comparator c)</code>: 自定义排序，自定义Comparator排序器<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------method3----------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">2</span>);</span><br><span class="line">    integers.stream().sorted().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;K&quot;</span>, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;I&quot;</span>, <span class="string">&quot;G&quot;</span>, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;N&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;S&quot;</span>, <span class="string">&quot;S&quot;</span>);</span><br><span class="line">    strings.stream().sorted(</span><br><span class="line">        (s1, s2) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> s1.compareTo(s2);</span><br><span class="line">        &#125;</span><br><span class="line">    ).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">        String name;</span><br><span class="line">        <span class="keyword">int</span> score; </span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Student&gt; students = Arrays.asList( <span class="keyword">new</span> Student(<span class="string">&quot;K&quot;</span>, <span class="number">100</span>),</span><br><span class="line">                                           <span class="keyword">new</span> Student(<span class="string">&quot;H&quot;</span>, <span class="number">91</span>),</span><br><span class="line">                                           <span class="keyword">new</span> Student(<span class="string">&quot;I&quot;</span>, <span class="number">95</span>),</span><br><span class="line">                                           <span class="keyword">new</span> Student(<span class="string">&quot;G&quot;</span>, <span class="number">98</span>),</span><br><span class="line">                                           <span class="keyword">new</span> Student(<span class="string">&quot;N&quot;</span>, <span class="number">88</span>));</span><br><span class="line">    students.stream().sorted(</span><br><span class="line">        (s1, s2) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> s1.score - s2.score;</span><br><span class="line">        &#125;</span><br><span class="line">    ).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="3-2-4-消费"><a href="#3-2-4-消费" class="headerlink" title="3.2.4 消费"></a>3.2.4 消费</h4><ul>
<li><code>peek()</code>：接收<code>Consumer</code>表达式，无返回值<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------method4----------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">        String name;</span><br><span class="line">        <span class="keyword">int</span> score;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Student&gt; students = Arrays.asList( <span class="keyword">new</span> Student(<span class="string">&quot;K&quot;</span>, <span class="number">100</span>),</span><br><span class="line">                                           <span class="keyword">new</span> Student(<span class="string">&quot;H&quot;</span>, <span class="number">91</span>),</span><br><span class="line">                                           <span class="keyword">new</span> Student(<span class="string">&quot;I&quot;</span>, <span class="number">95</span>),</span><br><span class="line">                                           <span class="keyword">new</span> Student(<span class="string">&quot;G&quot;</span>, <span class="number">98</span>),</span><br><span class="line">                                           <span class="keyword">new</span> Student(<span class="string">&quot;N&quot;</span>, <span class="number">88</span>));</span><br><span class="line">    students.stream().peek(</span><br><span class="line">        s -&gt; &#123;</span><br><span class="line">            s.setScore(<span class="number">99</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    ).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="4-流的终止操作"><a href="#4-流的终止操作" class="headerlink" title="4. 流的终止操作"></a>4. 流的终止操作</h3><h4 id="4-1-匹配、聚合操作"><a href="#4-1-匹配、聚合操作" class="headerlink" title="4.1 匹配、聚合操作"></a>4.1 匹配、聚合操作</h4><ul>
<li><code>allMatch()</code>：接收一个<code>Predicate</code>函数，当流中每个元素都符合该断言时才返回true，否则返回false</li>
<li><code>noneMatch()</code>：接收一个<code>Predicate</code>函数，当流中每个元素都不符合该断言时才返回true，否则返回false</li>
<li><code>anyMatch()</code>：接收一个<code>Predicate</code>函数，只要流中有一个元素满足该断言则返回true，否则返回false</li>
<li><code>findFIrst()</code>：返回流中第一个元素</li>
<li><code>findAny()</code>：返回流中的任意元素</li>
<li><code>count()</code>：返回流中元素总个数</li>
<li><code>max()</code>：返回流中元素的最大值</li>
<li><code>min()</code>：返回流中元素的最小值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------method1----------&quot;</span>);</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> allMatch = list.stream().anyMatch(e -&gt; e &gt; <span class="number">10</span>);    <span class="comment">// false</span></span><br><span class="line">    <span class="keyword">boolean</span> noneMatch = list.stream().noneMatch(e -&gt; e &gt; <span class="number">10</span>);  <span class="comment">// true</span></span><br><span class="line">    <span class="keyword">boolean</span> anyMatch = list.stream().anyMatch(e -&gt; e &gt; <span class="number">4</span>);     <span class="comment">// true</span></span><br><span class="line">    System.out.println(allMatch + <span class="string">&quot; &quot;</span> + noneMatch + <span class="string">&quot; &quot;</span> + anyMatch);</span><br><span class="line"></span><br><span class="line">    Integer findFirst = list.stream().findFirst().get();</span><br><span class="line">    Integer findAny = list.stream().findAny().get();</span><br><span class="line">    System.out.println(<span class="string">&quot;first = &quot;</span> + findFirst + <span class="string">&quot;, any = &quot;</span> + findAny);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> count = list.stream().count();</span><br><span class="line">    Integer max = list.stream().max(Integer::compareTo).get();</span><br><span class="line">    Integer min = list.stream().min(Integer::compareTo).get();</span><br><span class="line">    System.out.println(<span class="string">&quot;count = &quot;</span> + count + <span class="string">&quot;, max = &quot;</span> + max + <span class="string">&quot;, min = &quot;</span> + min);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="4-2-规约操作"><a href="#4-2-规约操作" class="headerlink" title="4.2 规约操作"></a>4.2 规约操作</h4><ul>
<li><code>Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator)</code>：第一次执行时，<code>accumulator</code>函数的第一个参数为流中的第一个元素，第二个参数为流中元素的第二个元素；第二次执行时，第一个参数为第一次函数执行的结果，第二个参数为流中的第三个元素；依次类推。</li>
<li><code>T reduce(T identity, BinaryOperator&lt;T&gt; accumulator)</code>：流程跟上面一样，只是第一次执行时，<code>accumulator</code>函数的第一个参数为<code>identity</code>，而第二个参数为流中的第一个元素。</li>
<li><code>&lt;U&gt; U reduce(U identity,BiFunction&lt;U, ? super T, U&gt; accumulator,BinaryOperator&lt;U&gt; combiner)</code>：在串行流(stream)中，该方法跟第二个方法一样，即第三个参数<code>combiner</code>不会起作用。在并行流(parallelStream)中，我们知道流被fork join出多个线程进行执行，此时每个线程的执行流程就跟第二个方法<code>reduce(identity, accumulator)</code>一样，而第三个参数<code>combiner</code>函数，则是将每个线程的执行结果当成一个新的流，然后使用第一个方法<code>reduce(accumulator)</code>流程进行规约。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------method2----------&quot;</span>);</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 求和</span></span><br><span class="line">    Integer v = list.stream().reduce(<span class="number">0</span>, (x1, x2) -&gt; x1 + x2);</span><br><span class="line">    System.out.println(<span class="string">&quot;sum = &quot;</span>  + v);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 10 + 和</span></span><br><span class="line">    Integer v1 = list.stream().reduce(<span class="number">10</span>, (x1, x2) -&gt; x1 + x2);</span><br><span class="line">    System.out.println(<span class="string">&quot;10 + sum = &quot;</span> + v1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 求-和</span></span><br><span class="line">    Integer v2 = list.stream().reduce(<span class="number">0</span>,</span><br><span class="line">                                      (x1, x2) -&gt; &#123;</span><br><span class="line">                                          System.out.println(<span class="string">&quot;stream accumulator: x1: &quot;</span> + x1 + <span class="string">&quot; x2: &quot;</span> + x2);</span><br><span class="line">                                          <span class="keyword">return</span> x1 - x2;</span><br><span class="line">                                      &#125;</span><br><span class="line">                                     );</span><br><span class="line">    System.out.println(v2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 求累积</span></span><br><span class="line">    Integer v3 = list.stream().reduce(<span class="number">1</span>,</span><br><span class="line">                                      (x1, x2) -&gt; &#123;</span><br><span class="line">                                          System.out.println(<span class="string">&quot;stream combiner: x1:&quot;</span> + x1 + <span class="string">&quot;  x2:&quot;</span> + x2);</span><br><span class="line">                                          <span class="keyword">return</span> x1 * x2;</span><br><span class="line">                                      &#125;</span><br><span class="line">                                     );</span><br><span class="line">    System.out.println(v3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字符串拼接</span></span><br><span class="line">    List&lt;String&gt; list1 = Arrays.asList(<span class="string">&quot;K&quot;</span>, <span class="string">&quot;Highness&quot;</span>, <span class="string">&quot;. Nice &quot;</span>, <span class="string">&quot;to &quot;</span>, <span class="string">&quot;meet &quot;</span>, <span class="string">&quot;you&quot;</span>);</span><br><span class="line">    String res = list1.stream().reduce(<span class="string">&quot;Hello &quot;</span>, (c1, c2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> c1 + c2;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="4-3-收集操作"><a href="#4-3-收集操作" class="headerlink" title="4.3 收集操作"></a>4.3 收集操作</h4><p><code>collect()</code>：接收一个Collector实例，将流中元素收集成另外一个数据结构。</p>
<p><code>Collector&lt;T, A, R&gt;</code> 是一个接口，有以下5个抽象方法：</p>
<ul>
<li><code>Supplier&lt;A&gt; supplier()</code>：创建一个结果容器A。</li>
<li><code>BiConsumer&lt;A, T&gt; accumulator()</code>：消费型接口，第一个参数为容器A，第二个参数为流中元素T。</li>
<li><code>BinaryOperator&lt;A&gt; combiner()</code>：函数接口，该参数的作用跟上一个方法(reduce)中的combiner参数一样，将并行流中各个子进程的运行结果(accumulator函数操作后的容器A)进行合并。</li>
<li><code>Function&lt;A, R&gt; finisher()</code>：函数式接口，参数为容器A，返回类型为collect方法最终想要的结果R。</li>
<li><code>Set&lt;Characteristics&gt; characteristics()</code>：返回一个不可变的Set集合，用来表明该Collector的特征。</li>
</ul>
<p>有以下三个特征：</p>
<ul>
<li><code>CONCURRENT</code>：表示此收集器支持并发。</li>
<li><code>UNORDERED</code>：表示该收集操作不会保留流中元素原有的顺序。</li>
<li><code>IDENTITY_FINISH</code>：表示finisher参数只是标识而已，可忽略。</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java8</tag>
      </tags>
  </entry>
  <entry>
    <title>Http状态码</title>
    <url>/posts/140645a5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info flat"><p>五种状态</p>
</div>


<table>
<thead>
<tr>
<th align="center">分类</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1**</td>
<td align="center">信息，服务器收到请求，需要请求者继续执行操作</td>
</tr>
<tr>
<td align="center">2**</td>
<td align="center">成功，操作被成功接收并处理</td>
</tr>
<tr>
<td align="center">3**</td>
<td align="center">重定向，需要进一步的操作以完成请求</td>
</tr>
<tr>
<td align="center">4**</td>
<td align="center">客户端错误，请求白蛤语法错误或无分发完成请求</td>
</tr>
<tr>
<td align="center">5**</td>
<td align="center">服务器错误，服务器才处理请求的过程中发生了错误</td>
</tr>
</tbody></table>
<h2 id="1xx-消息"><a href="#1xx-消息" class="headerlink" title="1xx-消息"></a>1xx-消息</h2><p>这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于HTTP/1.0协议中没有定义任何1xx状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送1xx响应。 这些状态码代表的响应都是信息性的，标示客户应该采取的其他行动。</p>
<ul>
<li><p>100 Continue<br>服务器已经接收到请求头，并且客户端应继续发送请求主体（在需要发送身体的请求的情况下：例如，POST请求），或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。要使服务器检查请求的头部，客户端必须在其初始请求中发送Expect: 100-continue作为头部，并在发送正文之前接收100 Continue状态代码。响应代码417期望失败表示请求不应继续。</p>
</li>
<li><p>101 Switching Protocols<br>服务器已经理解了客户端的请求，并将通过Upgrade消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade消息头中定义的那些协议。<br>只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的HTTP版本（如HTTP/2）比旧版本更有优势，或者切换到一个实时且同步的协议（如WebSocket）以传送利用此类特性的资源。</p>
</li>
<li><p>102 Processing（WebDAV；RFC 2518）<br>WebDAV请求可能包含许多涉及文件操作的子请求，需要很长时间才能完成请求。该代码表示服务器已经收到并正在处理请求，但无响应可用。[6]这样可以防止客户端超时，并假设请求丢失。</p>
</li>
</ul>
<br>

<h2 id="2xx-成功"><a href="#2xx-成功" class="headerlink" title="2xx-成功"></a>2xx-成功</h2><p>这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。</p>
<ul>
<li><p>200 OK<br>请求已成功，请求所希望的响应头或数据体将随此响应返回。实际的响应将取决于所使用的请求方法。在GET请求中，响应将包含与请求的资源相对应的实体。在POST请求中，响应将包含描述或操作结果的实体。</p>
</li>
<li><p>201 Created<br>请求已经被实现，而且有一个新的资源已经依据请求的需要而创建，且其URI已经随Location头信息返回。假如需要的资源无法及时创建的话，应当返回’202 Accepted’。</p>
</li>
<li><p>202 Accepted<br>服务器已接受请求，但尚未处理。最终该请求可能会也可能不会被执行，并且可能在处理发生时被禁止。</p>
</li>
<li><p>203 Non-Authoritative Information（自HTTP / 1.1起）<br>服务器是一个转换代理服务器（transforming proxy，例如网络加速器），以200 OK状态码为起源，但回应了原始响应的修改版本。</p>
</li>
<li><p>204 No Content<br>服务器成功处理了请求，没有返回任何内容。</p>
</li>
<li><p>205 Reset Content<br>服务器成功处理了请求，但没有返回任何内容。与204响应不同，此响应要求请求者重置文档视图。</p>
</li>
<li><p>206 Partial Content<br>服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。</p>
</li>
<li><p>207 Multi-Status（WebDAV；RFC 4918）<br>代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。</p>
</li>
<li><p>208 Already Reported （WebDAV；RFC 5842）<br>DAV绑定的成员已经在（多状态）响应之前的部分被列举，且未被再次包含。</p>
</li>
<li><p>226 IM Used （RFC 3229）<br>服务器已经满足了对资源的请求，对实体请求的一个或多个实体操作的结果表示。</p>
</li>
</ul>
<br>

<h2 id="3xx-重定向"><a href="#3xx-重定向" class="headerlink" title="3xx-重定向"></a>3xx-重定向</h2><p>这类状态码代表需要客户端采取进一步的操作才能完成请求。通常，这些状态码用来重定向，后续的请求地址（重定向目标）在本次响应的Location域中指明。</p>
<p>当且仅当后续的请求所使用的方法是GET或者HEAD时，用户浏览器才可以在没有用户介入的情况下自动提交所需要的后续请求。客户端应当自动监测无限循环重定向（例如：A→B→C→……→A或A→A），因为这会导致服务器和客户端大量不必要的资源消耗。按照HTTP/1.0版规范的建议，浏览器不应自动访问超过5次的重定向。</p>
<ul>
<li><p>300 Multiple Choices<br>被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。<br>除非这是一个HEAD请求，否则该响应应当包括一个资源特性及地址的列表的实体，以便用户或浏览器从中选择最合适的重定向地址。这个实体的格式由Content-Type定义的格式所决定。浏览器可能根据响应的格式以及浏览器自身能力，自动作出最合适的选择。当然，RFC 2616规范并没有规定这样的自动选择该如何进行。<br>如果服务器本身已经有了首选的回馈选择，那么在Location中应当指明这个回馈的URI；浏览器可能会将这个Location值作为自动重定向的地址。此外，除非额外指定，否则这个响应也是可缓存的。</p>
</li>
<li><p>301 Moved Permanently<br>被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。<br>新的永久性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。<br>如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。<br>注意：对于某些使用HTTP/1.0协议的浏览器，当它们发送的POST请求得到了一个301响应的话，接下来的重定向请求将会变成GET方式。</p>
</li>
<li><p>302 Found<br>要求客户端执行临时重定向（原始描述短语为“Moved Temporarily”）。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。<br>新的临时性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。<br>如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。<br>注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用GET方式访问在Location中规定的URI，而无视原先请求的方法。因此状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。</p>
</li>
<li><p>303 See Other<br>对应当前请求的响应可以在另一个URI上被找到，当响应于POST（或PUT / DELETE）接收到响应时，客户端应该假定服务器已经收到数据，并且应该使用单独的GET消息发出重定向。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的URI不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。<br>新的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。<br>注意：许多HTTP/1.1版以前的浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。</p>
</li>
<li><p>304 Not Modified<br>表示资源未被修改，因为请求头指定的版本If-Modified-Since或If-None-Match。在这种情况下，由于客户端仍然具有以前下载的副本，因此不需要重新传输资源。</p>
</li>
<li><p>305 Use Proxy<br>被请求的资源必须通过指定的代理才能被访问。Location域中将给出指定的代理所在的URI信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能创建305响应。许多HTTP客户端（像是Mozilla和Internet Explorer）都没有正确处理这种状态代码的响应，主要是出于安全考虑。<br>注意：RFC 2068中没有明确305响应是为了重定向一个单独的请求，而且只能被原始服务器建立。忽视这些限制可能导致严重的安全后果。</p>
</li>
<li><p>306 Switch Proxy<br>在最新版的规范中，306状态码已经不再被使用。最初是指“后续请求应使用指定的代理”。</p>
</li>
<li><p>307 Temporary Redirect<br>在这种情况下，请求应该与另一个URI重复，但后续的请求应仍使用原始的URI。 与302相反，当重新发出原始请求时，不允许更改请求方法。 例如，应该使用另一个POST请求来重复POST请求。</p>
</li>
<li><p>308 Permanent Redirect (RFC 7538)<br>请求和所有将来的请求应该使用另一个URI重复。 307和308重复302和301的行为，但不允许HTTP方法更改。 例如，将表单提交给永久重定向的资源可能会顺利进行。</p>
</li>
</ul>
<br>

<h2 id="4xx-客户端错误"><a href="#4xx-客户端错误" class="headerlink" title="4xx-客户端错误"></a>4xx-客户端错误</h2><p>这类的状态码代表了客户端看起来可能发生了错误，妨碍了服务器的处理。除非响应的是一个HEAD请求，否则服务器就应该返回一个解释当前错误状况的实体，以及这是临时的还是永久性的状况。这些状态码适用于任何请求方法。浏览器应当向用户显示任何包含在此类错误响应中的实体内容。</p>
<p>如果错误发生时客户端正在传送数据，那么使用TCP的服务器实现应当仔细确保在关闭客户端与服务器之间的连接之前，客户端已经收到了包含错误信息的数据包。如果客户端在收到错误信息后继续向服务器发送数据，服务器的TCP栈将向客户端发送一个重置数据包，以清除该客户端所有还未识别的输入缓冲，以免这些数据被服务器上的应用程序读取并干扰后者。</p>
<ul>
<li><p>400 Bad Request<br>由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求。</p>
</li>
<li><p>401 Unauthorized（RFC 7235）<br>参见：HTTP基本认证、HTTP摘要认证<br>类似于403 Forbidden，401语义即“未认证”，即用户没有必要的凭据。该状态码表示当前请求需要用户验证。该响应必须包含一个适用于被请求资源的WWW-Authenticate信息头用以询问用户信息。客户端可以重复提交一个包含恰当的Authorization头信息的请求。[33]如果当前请求已经包含了Authorization证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。<br>注意：当网站（通常是网站域名）禁止IP地址时，有些网站状态码显示的401，表示该特定地址被拒绝访问网站。</p>
</li>
<li><p>402 Payment Required<br>该状态码是为了将来可能的需求而预留的。该状态码最初的意图可能被用作某种形式的数字现金或在线支付方案的一部分，但几乎没有哪家服务商使用，而且这个状态码通常不被使用。如果特定开发人员已超过请求的每日限制，Google Developers API会使用此状态码。</p>
</li>
<li><p>403 Forbidden<br>主条目：HTTP 403<br>服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个HEAD请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。</p>
</li>
<li><p>404 Not Found<br>主条目：HTTP 404<br>请求失败，请求所希望得到的资源未被在服务器上发现，但允许用户的后续请求。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。</p>
</li>
<li><p>405 Method Not Allowed<br>请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow头信息用以表示出当前资源能够接受的请求方法的列表。例如，需要通过POST呈现数据的表单上的GET请求，或只读资源上的PUT请求。<br>鉴于PUT，DELETE方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。</p>
</li>
<li><p>406 Not Acceptable<br>参见：内容协商<br>请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体，该请求不可接受。<br>除非这是一个HEAD请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址列表的实体。实体的格式由Content-Type头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准。</p>
</li>
<li><p>407 Proxy Authentication Required（RFC 2617）<br>与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个Proxy-Authenticate用以进行身份询问。客户端可以返回一个Proxy-Authorization信息头用以验证。</p>
</li>
<li><p>408 Request Timeout<br>请求超时。根据HTTP规范，客户端没有在服务器预备等待的时间内完成一个请求的发送，客户端可以随时再次提交这一请求而无需进行任何更改。</p>
</li>
<li><p>409 Conflict<br>表示因为请求存在冲突无法处理该请求，例如多个同步更新之间的编辑冲突。</p>
</li>
<li><p>410 Gone<br>表示所请求的资源不再可用，将不再可用。当资源被有意地删除并且资源应被清除时，应该使用这个。在收到410状态码后，用户应停止再次请求资源。但大多数服务端不会使用此状态码，而是直接使用404状态码。</p>
</li>
<li><p>411 Length Required<br>服务器拒绝在没有定义Content-Length头的情况下接受请求。在添加了表明请求消息体长度的有效Content-Length头之后，客户端可以再次提交该请求。</p>
</li>
<li><p>412 Precondition Failed（RFC 7232）<br>服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。</p>
</li>
<li><p>413 Request Entity Too Large（RFC 7231）<br>前称“Request Entity Too Large”，表示服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。<br>如果这个状况是临时的，服务器应当返回一个Retry-After的响应头，以告知客户端可以在多少时间以后重新尝试。</p>
</li>
<li><p>414 Request-URI Too Long（RFC 7231）<br>前称“Request-URI Too Long”，表示请求的URI长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。通常将太多数据的结果编码为GET请求的查询字符串，在这种情况下，应将其转换为POST请求。这比较少见，通常的情况包括：<br>本应使用POST方法的表单提交变成了GET方法，导致查询字符串过长。<br>重定向URI“黑洞”，例如每次重定向把旧的URI作为新的URI的一部分，导致在若干次重定向后URI超长。<br>客户端正在尝试利用某些服务器中存在的安全漏洞攻击服务器。这类服务器使用固定长度的缓冲读取或操作请求的URI，当GET后的参数超过某个数值后，可能会产生缓冲区溢出，导致任意代码被执行。没有此类漏洞的服务器，应当返回414状态码。</p>
</li>
<li><p>415 Unsupported Media Type<br>对于当前请求的方法和所请求的资源，请求中提交的互联网媒体类型并不是服务器中所支持的格式，因此请求被拒绝。例如，客户端将图像上传格式为svg，但服务器要求图像使用上传格式为jpg。</p>
</li>
<li><p>416 Requested Range Not Satisfiable（RFC 7233）<br>前称“Requested Range Not Satisfiable”。客户端已经要求文件的一部分（Byte serving），但服务器不能提供该部分。例如，如果客户端要求文件的一部分超出文件尾端。</p>
</li>
<li><p>417 Expectation Failed<br>在请求头Expect中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服显的证据证明在当前路由的下一个节点上，Expect的内容无法被满足。</p>
</li>
<li><p>418 I’m a teapot（RFC 2324）<br>本操作码是在1998年作为IETF的传统愚人节笑话, 在RFC 2324超文本咖啡壶控制协议’中定义的，并不需要在真实的HTTP服务器中定义。当一个控制茶壶的HTCPCP收到BREW或POST指令要求其煮咖啡时应当回传此错误。这个HTTP状态码在某些网站（包括Google.com）与项目（如Node.js、ASP.NET和Go语言）中用作彩蛋。</p>
</li>
<li><p>420 Enhance Your Caim<br>Twitter Search与Trends API在客户端被限速的情况下返回。</p>
</li>
<li><p>421 Misdirected Request （RFC 7540）<br>该请求针对的是无法产生响应的服务器（例如因为连接重用）。</p>
</li>
<li><p>422 Unprocessable Entity（WebDAV；RFC 4918 ）<br>请求格式正确，但是由于含有语义错误，无法响应。</p>
</li>
<li><p>423 Locked（WebDAV；RFC 4918）<br>当前资源被锁定。</p>
</li>
<li><p>424 Failed Dependency（WebDAV；RFC 4918）<br>由于之前的某个请求发生的错误，导致当前请求失败，例如PROPPATCH。</p>
</li>
<li><p>425 Unordered Collection<br>在WebDAV Advanced Collections Protocol中定义，但Web Distributed Authoring and Versioning (WebDAV) Ordered Collections Protocol中并不存在。</p>
</li>
<li><p>426 Upgrade Required（RFC 2817）<br>客户端应当切换到TLS/1.0，并在HTTP/1.1 Upgrade header中给出。</p>
</li>
<li><p>428 Precondition Required (RFC 6585)<br>原服务器要求该请求满足一定条件。这是为了防止“‘未更新’问题，即客户端读取（GET）一个资源的状态，更改它，并将它写（PUT）回服务器，但这期间第三方已经在服务器上更改了该资源的状态，因此导致了冲突。”</p>
</li>
<li><p>429 Too Many Requests （RFC 6585）<br>用户在给定的时间内发送了太多的请求。旨在用于网络限速。</p>
</li>
<li><p>431 Request Header Fields Too Large （RFC 6585）<br>服务器不愿处理请求，因为一个或多个头字段过大。</p>
</li>
<li><p>444 No Response<br>Nginx上HTTP服务器扩展。服务器不向客户端返回任何信息，并关闭连接（有助于阻止恶意软件）。</p>
</li>
<li><p>450 Blocked by Windows Parental Controls<br>这是一个由Windows家庭控制（Microsoft）HTTP阻止的450状态代码的示例，用于信息和测试。</p>
</li>
<li><p>451 Unavailable For Legal Reasons<br>该访问因法律的要求而被拒绝，由IETF在2015核准后新增加。</p>
</li>
<li><p>494 Request Header Too Large<br>在错误代码431提出之前Nginx上使用的扩展HTTP代码。</p>
</li>
</ul>
<br>

<h2 id="5xx-服务器错误"><a href="#5xx-服务器错误" class="headerlink" title="5xx-服务器错误"></a>5xx-服务器错误</h2><p>表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。除非这是一个HEAD请求，否则服务器应当包含一个解释当前错误状态以及这个状况是临时的还是永久的解释信息实体。浏览器应当向用户展示任何在当前响应中被包含的实体。这些状态码适用于任何响应方法。</p>
<ul>
<li><p>500 Internal Server Error<br>通用错误消息，服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。没有给出具体错误信息。</p>
</li>
<li><p>501 Not Implemented<br>服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。（例如，网络服务API的新功能）</p>
</li>
<li><p>502 Bad Gateway<br>作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。</p>
</li>
<li><p>503 Service Unavailable<br>由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是暂时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个Retry-After头用以标明这个延迟时间。如果没有给出这个Retry-After信息，那么客户端应当以处理500响应的方式处理它。</p>
</li>
<li><p>504 Gateway Timeout<br>作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。<br>注意：某些代理服务器在DNS查询超时时会返回400或者500错误。</p>
</li>
<li><p>505 HTTP Version Not Supported<br>服务器不支持，或者拒绝支持在请求中使用的HTTP版本。[63]这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体。</p>
</li>
<li><p>506 Variant Also Negotiates（RFC 2295）<br>由《透明内容协商协议》（RFC 2295）扩展，代表服务器存在内部配置错误，被请求的协商变元资源被配置为在透明内容协商中使用自己，因此在一个协商处理中不是一个合适的重点。</p>
</li>
<li><p>507 Insufficient Storage（WebDAV；RFC 4918）<br>服务器无法存储完成请求所必须的内容。这个状况被认为是临时的。</p>
</li>
<li><p>508 Loop Detected （WebDAV；RFC 5842）<br>服务器在处理请求时陷入死循环。 （可代替 208状态码）</p>
</li>
<li><p>510 Not Extended（RFC 2774）<br>获取资源所需要的策略并没有被满足。</p>
</li>
<li><p>511 Network Authentication Required （RFC 6585）<br>客户端需要进行身份验证才能获得网络访问权限，旨在限制用户群访问特定网络。（例如连接WiFi热点时的强制网络门户）</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Http</category>
      </categories>
      <tags>
        <tag>HttpCode</tag>
      </tags>
  </entry>
</search>
