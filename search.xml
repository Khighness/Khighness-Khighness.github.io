<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Chartjs</title>
    <url>/posts/50163/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Chartjs初试"><a href="#Chartjs初试" class="headerlink" title="Chartjs初试"></a>Chartjs初试</h1><blockquote>
<p>前言</p>
</blockquote>
<p>四月了，水一篇博客吧，关于<code>hexo-tag-chart</code>插件的使用，文档只有一个案例，官方文档只给出<code>js</code>用法，至于怎么使用以及用到何种程度，就看自己的造化吧。</p>
<p>示例：<a href="https://shen-yu.gitee.io/2020/chartjs">沈宇大佬博客</a></p>
<p>文档：<a href="https://chartjs.bootcss.com/">中文官方文档</a></p>
<h3 id="每月明细"><a href="#每月明细" class="headerlink" title="每月明细"></a>每月明细</h3><div style="width: 80%;margin: 0 auto">
    <canvas id="chart1843" style="height: 120px"></canvas>
</div>
<script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script>
<script type="text/javascript">
    var ctx = document.getElementById('chart1843').getContext('2d');
    var options = {
    type: 'line',
    data: {
        labels: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],
        datasets: [{
        	label: '2020',
            borderColor: 'orange',
            backgroundColor: 'yellow',
			data: [0, 0, 0, 0, 0, 1, 0, 0, 1, 6, 5, 1], 
		},{
			label: '2021',
            borderColor: 'blue',
            backgroundColor: 'lightBlue',
			data: [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
		}]
    },
    options: {
        responsive: true,
        title: {
            display: true,
            text: '每月明细'
        }
    }
};;
    new Chart(ctx, options);
</script>



<a id="more"></a>




<h3 id="年度统计"><a href="#年度统计" class="headerlink" title="年度统计"></a>年度统计</h3><div style="width: 100%;margin: 0 auto">
    <canvas id="chart5029" style="height: 100px"></canvas>
</div>
<script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script>
<script type="text/javascript">
    var ctx = document.getElementById('chart5029').getContext('2d');
    var options = {
    type: 'polarArea',
    data: {
        labels: ['2020', '2021'],
        datasets: [{
            backgroundColor: ['orange', 'blue'],
			data: [14, 1], 
		}]
    },
    options: {
        responsive: true,
        title: {
            display: true,
            text: '博客统计'
        }
    }
};;
    new Chart(ctx, options);
</script>



<h3 id="能力雷达"><a href="#能力雷达" class="headerlink" title="能力雷达"></a>能力雷达</h3><div style="width: 100%;margin: 0 auto">
    <canvas id="chart4053" style="height: 100px"></canvas>
</div>
<script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script>
<script type="text/javascript">
    var ctx = document.getElementById('chart4053').getContext('2d');
    var options = {
    type: 'radar',
    data: {
        labels: ['Java', 'MySQL', 'Redis', 'Spring', 'SpringBoot', 'SpringCloud Alibaba', 'Vue', 'TCP/IP', 'OS'],
        datasets: [{
            label: '2020',
            fill: true,
            borderColor: 'rgb(253, 100, 131)',
			pointHoverBackgroundColor: 'red',
			data: [0.5, 0.4, 0.4, 0.1, 0.5, 0.2, 0.2, 0.5, 0.3]
		},
		{
			label: '2021',
			fill: true,
			borderColor: 'rgb(100, 147, 208)',
			pointHoverBackgroundColor: 'blue', 
			data: [0.7, 0.7, 0.5, 0.5, 0.7, 0.5, 0.1, 0.6, 0.2]
        }]
    },
    options: {
        responsive: true,
        title: {
            display: true,
            text: '能力雷达'
        }
    }
};;
    new Chart(ctx, options);
</script>

]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>Chartjs</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/posts/c24675b4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><center>
    <font face="Kristen ITC" color="#555555" size=3>💤 Khighness 💤</font><br>
</center>



<h2 id="MySQL概述"><a href="#MySQL概述" class="headerlink" title="MySQL概述"></a>MySQL概述</h2><h3 id="CentOS7安装"><a href="#CentOS7安装" class="headerlink" title="CentOS7安装"></a>CentOS7安装</h3><blockquote>
<p>下载RPM安装包</p>
</blockquote>
<p>下载: <a href="https://downloads.mysql.com/archives/community/">mysql download</a></p>
<p>将四个包下载后移动到opt文件夹下</p>
<img src="/posts/c24675b4/image-20210314104200636.png" class="" title="s">



<a id="more"></a>



<blockquote>
<p>检查是否已安装MySQL</p>
</blockquote>
<p>如果没有信息显示则表示未安装MySQL</p>
<pre class="line-numbers language-shell"><code class="language-shell">$ rpm -qa | grep -i mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>安装MySQL</p>
</blockquote>
<p><code>-i</code>：显示套件的文件列表</p>
<p><code>-v</code>：显示指令执行过程</p>
<p><code>-h</code>：套件安装时列出标记</p>
<pre class="line-numbers language-shell"><code class="language-shell">$ rpm -ivh <包名><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>安装顺序：</p>
<ol>
<li>common</li>
<li>libs</li>
<li>client</li>
<li>server</li>
</ol>
<p>依赖冲突：</p>
<p>直接卸载mariadb</p>
<p>详情如下：</p>
<pre class="line-numbers language-shell"><code class="language-shell">[root@parak opt]# rpm -ivh mysql-community-common-8.0.20-1.el7.x86_64.rpm 
警告：mysql-community-common-8.0.20-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY
准备中...                          ################################# [100%]
正在升级/安装...
   1:mysql-community-common-8.0.20-1.e################################# [100%]
[root@parak opt]# rpm -ivh mysql-community-libs-8.0.20-1.el7.x86_64.rpm 
警告：mysql-community-libs-8.0.20-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY
错误：依赖检测失败：
    mariadb-libs 被 mysql-community-libs-8.0.20-1.el7.x86_64 取代
[root@parak opt]# rpm -qa | grep mariadb
mariadb-libs-5.5.68-1.el7.x86_64
[root@parak opt]# rpm -e mariadb-libs-5.5.68-1.el7.x86_64
错误：依赖检测失败：
    libmysqlclient.so.18()(64bit) 被 (已安裝) postfix-2:2.10.1-9.el7.x86_64 需要
    libmysqlclient.so.18(libmysqlclient_18)(64bit) 被 (已安裝) postfix-2:2.10.1-9.el7.x86_64 需要
[root@parak opt]# rpm -e --nodeps mariadb-libs-5.5.68-1.el7.x86_64
[root@parak opt]# rpm -ivh mysql-community-libs-8.0.20-1.el7.x86_64.rpm 
警告：mysql-community-libs-8.0.20-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY
准备中...                          ################################# [100%]
正在升级/安装...
   1:mysql-community-libs-8.0.20-1.el7################################# [100%]
[root@parak opt]# rpm -ivh mysql-community-client-8.0.20-1.el7.x86_64.rpm 
警告：mysql-community-client-8.0.20-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY
准备中...                          ################################# [100%]
正在升级/安装...
   1:mysql-community-client-8.0.20-1.e################################# [100%]
[root@parak opt]# rpm -ivh mysql-community-server-8.0.20-1.el7.x86_64.rpm 
警告：mysql-community-server-8.0.20-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY
准备中...                          ################################# [100%]
正在升级/安装...
   1:mysql-community-server-8.0.20-1.e################################# [100%]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>查看是否安装成功</p>
</blockquote>
<ul>
<li>方式一：查看mysql版本号<code>mysqladmin --version</code></li>
<li>方式二：查看是否创建了mysql用户(组)<code>cat /etc/passwd | grep mysql</code></li>
</ul>
<pre class="line-numbers language-shell"><code class="language-shell">[root@parak opt]# mysqladmin --version
mysqladmin  Ver 8.0.20 for Linux on x86_64 (MySQL Community Server - GPL)
[root@parak opt]# cat /etc/passwd | grep mysql
mysql:x:27:27:MySQL Server:/var/lib/mysql:/bin/false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>启动MySQL服务</p>
</blockquote>
<ul>
<li>启动MySQL：<code>systemctl start mysqld</code></li>
<li>停止MySQL：<code>systemctl stop mysqld</code></li>
</ul>
<blockquote>
<p>登录MySQL</p>
</blockquote>
<p>两种方式：</p>
<ul>
<li>方式一：查看MySQL初始密码<code> cat /var/log/mysqld.log | grep password</code></li>
<li>方式二：修改<code>my.cnf</code>配置文件用于跳过密码，在<code>[mysqld]</code>下添加<code> skip-grant-tables</code></li>
</ul>
<p>推荐使用第一种，因为在MySQL8在跳过登录的状态下是不允许修改登录密码的。</p>
<pre class="line-numbers language-shell"><code class="language-shell"># 登录mysql
$ mysql -uroot -p
Enter password:
# 修改校验密码策略等级
$ mysql> set global validate_password.policy=LOW;
# 设置密码最小长度
$ mysql> set global validate_password.length=1;
# 最后设置密码
$ ALTER USER 'root'@'localhost' IDENTIFIED BY <password>;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>Navicat连接产生问题</p>
</blockquote>
<p>（1）HOST <IP> is not allowed to connect to this mysql server</p>
<p>解决：关闭防火墙，更新可连接IP</p>
<pre class="line-numbers language-shell"><code class="language-shell"># 查看防火墙状态
$ systemctl status firewalld.service
# 关闭防火墙
$ systemctl stop firewalld.service
# 禁止自启动
$ systemctl disable firewalld.service
# 让所有IP都可以连接MySQL
$ mysql> update user set host='%' where user='root';
# 刷新权限
$ mysql> flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>（2）Client does not support authentication protocol requested by server</p>
<p>解决：更改加密规则，更新用户密码</p>
<pre class="line-numbers language-shell"><code class="language-shell"># #更改加密方式
$ mysql> ALTER USER 'root'@'localhost' IDENTIFIED BY 'password' PASSWORD EXPIRE NEVER; 
# 更新用户密码
$ mysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '<password>';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>设置开机自启动</p>
</blockquote>
<p>按照以上安装方式mysql服务是默认开机自启动的，可以通过<code>systemctl list-unit-files </code>查看开机启动项</p>
<pre class="line-numbers language-shell"><code class="language-shell">[root@parak mysql]# systemctl list-unit-files | grep mysql
mysqld.service                                enabled 
mysqld@.service                               disabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>如果不是开机自启动，可以通过<code>ntsysv</code>启用服务，<code>[]</code>中设置<code>*</code>即可使其开机自启动：</p>
<ul>
<li>上下键：可以在中间的方框当中，在各个服务之间移动</li>
<li>空格键：可以用来选择你所需要的服务，[*]表示开起启动</li>
<li>tab键：可以在方框、OK、Cancel之间移动</li>
<li>F1键：可以显示该服务的说明</li>
</ul>
<img src="/posts/c24675b4/image-20210314131906998.png" class="" title="image-20210314131906998">



<h3 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h3><blockquote>
<p>拉取镜像</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">$ docker pull mysql:8.0.20<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>创建挂载的数据和配置文件夹</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">$ mkdir -p /home/mysql/data /home/mysql/conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>先启动MySQL容器</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">$ docker run --name mysql -d -p 3306:3306 \
-e MYSQL_ROOT_PASSWORD=<password> mysql:8.0.20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>进入容器查看配置文件位置</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">$ docker exec -it mysql bash
$ mysql --help | grep my.cnf
                      order of preference, my.cnf, $MYSQL_TCP_PORT,
/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf 
$ exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>将配置文件复制到挂载配置文件夹</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">$ docker cp mysql:/etc/mysql/my.cnf /home/mysql/conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>在配置文件中添加</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell"># 表名称大小写不敏感
lower_case_table_names=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>先停止并删除容器</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">$ docker stop mysql && docker rm mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>重新运行MySQL容器</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">$ docker run --name mysql \
-d -p 3306:3306  \
-e MYSQL_ROOT_PASSWORD=<password> \
--mount type=bind,src=/home/mysql/conf/my.cnf,dst=/etc/mysql/my.cnf \
--mount type=bind,src=/home/mysql/data,dst=/var/lib/mysql \
--restart=on-failure:3 \
 mysql:8.0.20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>Navicat无法连接</p>
</blockquote>
<pre class="line-numbers language-sh"><code class="language-sh">$ docker exec -it mysql bash
$ mysql -u root -p<password>
$ ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '<password>';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><blockquote>
<p>安装目录</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">路径</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">/var/lib/mysql/</td>
<td align="center">数据库文件的存放位置</td>
</tr>
<tr>
<td align="center">/usr/share/mysql-8.0/</td>
<td align="center">配置文件目录</td>
</tr>
<tr>
<td align="center">/usr/bin/</td>
<td align="center">相关命令目录</td>
</tr>
</tbody></table>
<blockquote>
<p>查看编码</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">mysql> show variables like 'character%';
+--------------------------+--------------------------------+
| Variable_name            | Value                          |
+--------------------------+--------------------------------+
| character_set_client     | utf8mb4                        |
| character_set_connection | utf8mb4                        |
| character_set_database   | utf8mb4                        |
| character_set_filesystem | binary                         |
| character_set_results    | utf8mb4                        |
| character_set_server     | utf8mb4                        |
| character_set_system     | utf8                           |
| character_sets_dir       | /usr/share/mysql-8.0/charsets/ |
+--------------------------+--------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，MySQL 8的默认编码格式除了文件系统是二进制编码以外，已经全部改为utf8和utf8mb4(拥有比utf8更好的兼容性)，因此我们不需要再修改。</p>
<p>注意：使用Navicat连接MySQL时编码应设置为自动，切勿设置为utf8，否则会中文乱码。</p>
<h3 id="逻辑架构"><a href="#逻辑架构" class="headerlink" title="逻辑架构"></a>逻辑架构</h3><blockquote>
<p>优势</p>
</blockquote>
<p>和其他数据库相比，MySQL有点与众不同，它的架构可以在多种不同场景中应用并发挥良好作用和。主要体现在存储引擎的架构上，插件式的存储引擎架构将查询处理和其他的系统任务以及数据的存储提取相分离。这种架构可以根据业务的需求和实际需要选择合适的存储引擎。</p>
<blockquote>
<p>图示</p>
</blockquote>
<img src="/posts/c24675b4/image-20210324110838854.png" class="" title="image-20210324110838854">



<blockquote>
<p>详解</p>
</blockquote>
<ul>
<li>连接层：最上层是一些客户端和连接服务，包含本地sock通信和大多数基于客户端/服务端工具实现的类似于TCP/IP通信。主要完成一些类似于连接处理、授权认证及相关的安全方案。在该层上引入了线程池的概念，未通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全连接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。</li>
<li>服务层：第二层架构主要完成大多数的核心功能，如SQL接口，并完成缓存的查询，SQL的分析和优化及部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如过程、函数等。在该层，服务器会解析查询并创建相应的内部解析树，并对其完成相应的优化如确定查询表的顺序，是否利用索引等，最后生成相应的执行操作。如果是select语句，服务器还会查询内部的缓存。如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。</li>
<li>引擎层：存储引擎层，存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API与存储引擎进行通信。不同的存储引擎具有的功能不同，这样我们可以根据自己的实际需要进行选取。</li>
<li>存储层：数据存储层，主要是将数据存储在运行于裸设备的文件系统之上，并完成与存储引擎的交互。</li>
</ul>
<h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><blockquote>
<p>查看存储引擎</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">$ mysql>show engines;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/c24675b4/image-20210314164337734.png" class="" title="image-20210314164337734">



<blockquote>
<p>MyISAM和InnoDB</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">对比项</th>
<th align="center">MyISAM</th>
<th align="center">InnoDB</th>
</tr>
</thead>
<tbody><tr>
<td align="center">主外键</td>
<td align="center">不支持</td>
<td align="center">支持</td>
</tr>
<tr>
<td align="center">事务</td>
<td align="center">不支持</td>
<td align="center">支持</td>
</tr>
<tr>
<td align="center">行表锁</td>
<td align="center">表锁，即使操作一条记录也会锁住整个表，不合适高并发的操作</td>
<td align="center">行锁，操作时只锁住某一行，不对其他行有影响，适合高并发的操作</td>
</tr>
<tr>
<td align="center">缓存</td>
<td align="center">只缓存索引，不缓存真实数据</td>
<td align="center">不仅缓存索引还要缓存真实数据，对内存要求较高，而且内存大小对性能有决定性的影响。</td>
</tr>
<tr>
<td align="center">表空间</td>
<td align="center">小</td>
<td align="center">大</td>
</tr>
<tr>
<td align="center">关注点</td>
<td align="center">性能</td>
<td align="center">事务</td>
</tr>
<tr>
<td align="center">默认安装</td>
<td align="center">Y</td>
<td align="center">Y</td>
</tr>
</tbody></table>
<blockquote>
<p>说明</p>
</blockquote>
<p>MySQL 8.0：不再支持查询缓存。</p>
<p>MySQL团队博客：<a href="https://mysqlserverteam.com/mysql-8-0-retiring-support-for-the-query-cache/">https://mysqlserverteam.com/mysql-8-0-retiring-support-for-the-query-cache/</a></p>
<pre><code>尽管MySQL Query Cache旨在提高性能，但它存在严重的可伸缩性问题，并且很容易成为严重的瓶颈。

自MySQL 5.6（2013）以来，默认情况下已禁用查询缓存，因为众所周知，它不能与多核计算机上在高吞吐量工作负载情况下进行扩展。

我们考虑了可以对查询缓存进行哪些改进，以及我们可以进行的优化，这些优化可以改善所有工作负载。

虽然这些选择本身是正交的，但工程资源是有限的。也就是说，我们正在转变战略，投资于更普遍适用于所有工作负载的改进。

建议把缓存放到客户端。</code></pre>
<blockquote>
<p>Alibaba选择</p>
</blockquote>
<ul>
<li>Percona为MySQL数据库服务进行了改进，在功能和性能上较MySQL有着很显著的提升。该版本提升了在高负载情况下的InnoDB的性能、为DBA提供了一些非常有用的性能诊断工具；另外有更多的参数和命令来控制服务器行为。</li>
<li>阿里巴巴大部分MySQL数据库其实使用的时percona的原型加以修改。阿里新建了一款存储引擎叫xtradb完全可以替代innodb，并且在性能和并发上做得更好。</li>
</ul>
<h2 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h2><h3 id="索引简介"><a href="#索引简介" class="headerlink" title="索引简介"></a>索引简介</h3><blockquote>
<p>定义</p>
</blockquote>
<p>MySQL官方对索引的定义为：索引是帮助MySQL高效获取数据的数据结构。</p>
<p>可以得到索引的本质：索引是数据结构。</p>
<p>简单理解：排好序的快速查找数据结构。</p>
<p>一般来说索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储在磁盘上。</p>
<p>我们平常所说的索引，如果没有特别指明，都是指B树（多路搜索树，不一定是二叉树）结构的索引。</p>
<p>其中聚集索引，次要索引，复合索引，前缀索引，唯一索引默认都是使用B+树索引，统称索引。除了B+树这种类型的索引之外，还有哈希索引等。</p>
<blockquote>
<p>优势</p>
</blockquote>
<p>类似于大学图书馆建数目索引，提高数据检索的效率，降低数据库的IO成本。</p>
<p>通过索引列队数据进行排序，降低数据排序的成本，降低了CPU的消耗。</p>
<blockquote>
<p>劣势</p>
</blockquote>
<p>虽然索引大大提高了查询速度，同时会降低表的更新速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段，都会调整因为更新所带来的键值变化后的索引信息。</p>
<p>索引只是提高效率的一个因素，如果你的MySQL有大数据量的表，就需要花时间研究建立最优秀的索引，或优化查询。</p>
<h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><blockquote>
<p>单值索引</p>
</blockquote>
<p>一个索引列只包含单个列，一个表可以有多个索引。</p>
<blockquote>
<p>唯一索引</p>
</blockquote>
<p>索引列的值必须唯一，但允许有空值。</p>
<blockquote>
<p>复合索引</p>
</blockquote>
<p>一个索引包含多个列。</p>
<blockquote>
<p>覆盖索引</p>
</blockquote>
<p>SQL只需要通过索引就可以返回查询所需要的数据，而不必通过二级索引查到主键之后再去查询数据，即查询字段为索引字段。</p>
<blockquote>
<p>基本语法</p>
</blockquote>
<ul>
<li>创建</li>
</ul>
<pre class="line-numbers language-mysql"><code class="language-mysql">CREATE [UNIQUE] INDEX <index_name> ON <table_name>(<column_name>(length));
ALTER <table_name> ADD [UNIQUE] INDEX <index_name> ON (<column_name>(length));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>删除</li>
</ul>
<pre class="line-numbers language-mysql"><code class="language-mysql">DROP INDEX <index_name> ON <table_name>;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>查看</li>
</ul>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">INDEX</span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>table_name<span class="token operator">></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>ALTER</li>
</ul>
<pre class="line-numbers language-mysql"><code class="language-mysql">-- 添加主键，即唯一索引
ALTER TABLE <table_name> PRIMARY KEY (column_list);
-- 创建唯一索引
ALTER TABLE <table_name> UNIQUE <index_name>(column_list);
-- 添加普通索引
ALTER TABLE <table_name> INDEX <index_name>(column_list);
-- 指定全文索引
ALTER TABLE <table_name> FULLTEXT index_name>(column_list);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h3><blockquote>
<p>索引</p>
</blockquote>
<ul>
<li>BTREE </li>
<li>HASH</li>
<li>FULL-TEXT</li>
<li>R-TREE</li>
</ul>
<blockquote>
<p>需要建立索引的情况</p>
</blockquote>
<ul>
<li>主键自动建立唯一索引</li>
<li>频繁作为查询条件的字段应该创建索引</li>
<li>查询中与其它表关联的字段，外键关系建立索引</li>
<li>频繁更新的字段不适合创建索引</li>
<li>Where条件里用不到的字段不创建索引</li>
<li>单值/组合索引的选择，在高并发下倾向创建组合索引</li>
<li>查询中排序的字段，排序字段若通过索引去访问将大大提高排序速度</li>
<li>查询中统计或者分组字段</li>
</ul>
<blockquote>
<p>不需要建立索引的情况</p>
</blockquote>
<ul>
<li>表记录太少  [原因：低于百万数的表MySQL还是扛得住的。]</li>
<li>经常增删改的表  [原因：提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。]</li>
<li>数据重复且分布均匀的表字段，因此应该只为最经常查询和最经常排序的数据列建立索引。注意，如果某个数据列包含许多重复的内容，为它建立索引就没有太大的实际效果  [例如：性别等字段。]</li>
</ul>
<h3 id="Join查询"><a href="#Join查询" class="headerlink" title="Join查询"></a>Join查询</h3><blockquote>
<p>join说明</p>
</blockquote>
<ul>
<li>LEFT JOIN：返回左表中的所有记录和右表中联结字段相等的记录。<ul>
<li>格式：<code>SELECT ... table1 LEFT JOIN table2 ON ...</code></li>
<li>说明：会取得table1全部记录，即使table2没有匹配记录</li>
</ul>
</li>
<li>RIGHT JOIN：返回右表中的所有记录和左表中联结字段相等的记录。<ul>
<li>格式：<code>SELECT ... table1 RIGHT JOIN table2 ON ...</code></li>
<li>说明：会取得table2全部记录，即使table1没有匹配记录</li>
</ul>
</li>
<li>INNER JOIN：只返回两个表中联结字段相等的记录。<ul>
<li>格式：<code>SELECT ... table1 INNER JOIN table2 ON ...</code></li>
<li>说明：会取得table1table2联结字段相等的记录</li>
</ul>
</li>
</ul>
<blockquote>
<p>join图示</p>
</blockquote>
<pre class="line-numbers language-mysql"><code class="language-mysql">  SELECT <select_list> from table_a a LEFT JOIN table_b b ON a.key = b.key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/c24675b4/image-20210314221223407.png" class="" title="image-20210314221223407">

<pre class="line-numbers language-mysql"><code class="language-mysql">  SELECT <select_list> from table_a a LEFT JOIN table_b ON a.key == b.key and b.key is NULL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/c24675b4/image-20210314222433261.png" class="" title="image-20210314222433261">

<pre class="line-numbers language-mysql"><code class="language-mysql">  SELECT <select_list> from table_a a INNER JOIN table_b b ON a.key = b.key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/c24675b4/image-20210314221536479.png" class="" title="image-20210314221536479">

<pre class="line-numbers language-mysql"><code class="language-mysql">  SELECT <select_list> from table_a a RIGHT JOIN table_b b ON a.key = b.key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/c24675b4/image-20210314221440655.png" class="" title="image-20210314221440655">

<pre class="line-numbers language-mysql"><code class="language-mysql">  SELECT <select_list> from table_a a RIGHT JOIN table_b ON a.key = b.key and a.key is NULL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/c24675b4/image-20210314222235183.png" class="" title="image-20210314222235183">

<pre class="line-numbers language-mysql"><code class="language-mysql">  # Oracle支持 FULL OUTER JOIN，但是MySQL不支持
  # Oracle
  SELECT <select_list> FROM table_a a FULL OUTER JOIN table_b b ON a.key = b.key
  # MySQL
  SELECT <select_list> from table_a a LEFT JOIN table_b b ON a.key = b.key
  union
  SELECT <select_list> from table_a a RIGHT JOIN table_b b ON a.key = b.key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="/posts/c24675b4/image-20210314222826674.png" class="" title="image-20210314222826674">

<pre class="line-numbers language-mysql"><code class="language-mysql">  # Oracle
  SELECT <select_list> FROM table_a a FULL OUTER JOIN table_b b ON a.key = b.key WHERE a.key is NULL or b.key is NULL
  # MySQL
  SELECT <select_list> from table_a a LEFT JOIN table_b b ON a.key = b.key where b.id is null
  union
  SELECT <select_list> from table_a a RIGHT JOIN table_b b ON a.key = b.key where a.id is null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="/posts/c24675b4/image-20210314222858303.png" class="" title="image-20210314222858303">





<blockquote>
<p>SQL执行顺序</p>
</blockquote>
<ul>
<li>手写</li>
</ul>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span>
    <span class="token operator">&lt;</span>select_list<span class="token operator">></span>
<span class="token keyword">FROM</span>
    <span class="token operator">&lt;</span>left_table<span class="token operator">></span> <span class="token operator">&lt;</span>join_table<span class="token operator">></span>
<span class="token keyword">JOIN</span> <span class="token operator">&lt;</span>right_table<span class="token operator">></span> <span class="token keyword">ON</span> <span class="token operator">&lt;</span>join_condetion<span class="token operator">></span>
<span class="token keyword">WHERE</span>
    <span class="token operator">&lt;</span>where_condition<span class="token operator">></span>
<span class="token keyword">GROUP</span> <span class="token keyword">BY</span>
    <span class="token operator">&lt;</span>group_by_list<span class="token operator">></span>
<span class="token keyword">HAVING</span>
    <span class="token operator">&lt;</span>having_condition<span class="token operator">></span>
<span class="token keyword">ORDER</span> <span class="token keyword">BY</span>
    <span class="token operator">&lt;</span>order_by_condition<span class="token operator">></span>
<span class="token keyword">LIMIT</span> <span class="token operator">&lt;</span>limit_number<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>机读</li>
</ul>
<img src="/posts/c24675b4/image-20210314215216629.png" class="" title="image-20210314215216629">





<h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><blockquote>
<p>MySQL Query Optimizer</p>
</blockquote>
<p>MySQL中有专门负责优化SELECT语句的优化器模块，主要功能：通过计算分析系统中收集到的统计信息，为客户端请求的Query提供他认为最优的执行计划(它认为最优的数据检索方式，但不见得是DBA认为是最优的，这部分最耗费时间)<br>当客户端向MySQL请求一条Query，命令解析器模块完成请求分类，区别出是SELECT并转发给MySQL Query Optimizer时，MySQL Query Optimizer 首先会对整条Query进行优化，处理掉一些常量表达式的预算，直接换算成常量值。并对Query 中的查询条件进行简化和转换，如去掉一些无用或显而易见的条件、结构调整等。然后分析Query 中的Hint 信息(如果有)，看显示Hint信息是否可以完全确定该Query的执行计划。如果没有Hint或Hint信息还不足以完全确定执行计划，则会读取所涉及对象的统计信息，根据Query进行写相应的计算分析，然后再得出最后的执行计划。</p>
<blockquote>
<p>MySQL性能瓶颈</p>
</blockquote>
<p>CPU: CPU在饱和的时候一般发生在数据装入内存或从磁盘上读取数据的时候</p>
<p>IO: 磁盘I/O瓶颈发生在装入数据远大于内存容量的时候</p>
<p>服务器硬件的性能瓶颈：<code>top</code>、<code>free</code>、<code>iostat</code>、<code>vmstat</code>来查看系统的性能状态</p>
<blockquote>
<p>Explain</p>
</blockquote>
<p>官网介绍：<a href="https://dev.mysql.com/doc/refman/8.0/en/explain-output.html">https://dev.mysql.com/doc/refman/8.0/en/explain-output.html</a></p>
<p>使用目的：</p>
<ul>
<li>表的读取顺序</li>
<li>数据读取操作的操作类型</li>
<li>可以使用的索引</li>
<li>实际使用的索引</li>
<li>表之间的引用</li>
<li>每张表被优化器查询的行数</li>
</ul>
<p>使用方法：<code>explain + sql语句</code></p>
<blockquote>
<p>字段解释</p>
</blockquote>
<p>（1）id</p>
<p>解释：</p>
<p>select查询的序列号，包含一组数字，表示查询中执行的select子句或操作表的顺序。</p>
<p>说明：</p>
<ul>
<li>id相同，执行顺序由上至下；</li>
<li>id不同，如果是子查询，id递增，id值越大优先级越高，越先被执行；</li>
<li>id相同不同，同时存在，id如果相同，可以认为是一组，从上往下顺序执行，在所有组中，id值越大，优先级越高。</li>
</ul>
<p>（2）select_type</p>
<p>解释：</p>
<p>查询的类型：SIMPLE、PRIMARY、SUBQUERY、DERIVED、UNION、UNION RESULT。查询的类型，主要是用于区别普通查询、联合查询、子查询等的复杂查询。</p>
<p>说明：</p>
<ul>
<li>SIMPLE：简单的select查询，查询中不包含子查询或者UNION；</li>
<li>PRIMARY：查询中若包含任何复杂的子部分，最外层查询责则被标记为PRIMARY；</li>
<li>SUBQUERY：在SELECT或WHERE列表中包含了子查询；</li>
<li>DERIVED：在FROM列表中包含的子查询被标记为DERIVED(衍生)，MySQL会递归执行这些子查询，把结果放在临时表里；</li>
<li>UNION：若第二个SELECT出现在UNION之后，则被标记为UNION；若UNION包含在FROM子句的子查询中，外层SELECT将被被标记为：DERIVED；</li>
<li>UNION RESULT：从UNION表获取结果的SELECT。</li>
</ul>
<p>（3）table</p>
<p>解释：显示这一行数据是关于哪一张表的。</p>
<p>（4）type</p>
<p>解释：显示查询了何种类型。</p>
<p>说明：</p>
<p>从最好到最差依次是：<code>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</code>。</p>
<p>常见的是：<code>system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL</code>。</p>
<p>一般来说，得保证查询至少达到range级别，最好能到ref。</p>
<ul>
<li>system：表只有一行记录（等于系统表），这是const类型的特例，平时不会出现，这个也可以忽略不计。</li>
<li>const：表示通过索引一次就找到了，const用于比较primary key或者unique索引。因为只匹配一行数据，所以很快。如将主键置于where列表中，MySQL就能将该查询转换为一个常量。</li>
<li>eq_ref：唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配。常见于主键或唯一索引扫描。</li>
<li>ref：非唯一性索引扫描，返回匹配某个单独值的所有行。本质上也是一种索引访问，它返回所有匹配某个单独值的行，然而，它可能会找到多个符合条件的行，所以他应该属于查找和扫描的混合体。</li>
<li>range：只检索给定范围的行，使用一个索引来选择行。key列显示使用了哪个索引，一般就是在你的where语句中出现了between、&lt;、&gt;、in等的查询这种范围扫描索引会比全表扫描要好，因为它只需要开始于索引的某一点，而结束于另一点，不用扫描全部索引。</li>
<li>index：Full Index Scan，index与ALL区别为index类型只遍历索引树。这通常比ALL快，因为索引文件通常比数据文件小。（也就是说虽然ALL和index都是全表，但index是从索引出发的，而ALL是从硬盘读取的。）</li>
<li>ALL：Full Table Scan，将扫描全表以找到匹配的行。</li>
</ul>
<p>（5）possible_keys</p>
<p>解释：</p>
<p>显示可能应用在这张表中的索引，一个或多个。</p>
<p>查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询实际使用。</p>
<p>（6）key</p>
<p>解释：实际使用的索引。如果为NULL，则没有使用索引。查询中若使用了覆盖索引，则该索引仅出现在key列表中。</p>
<p>（7）key_len</p>
<p>解释：表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。在不损失精确性的情况下，长度越短越好。key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len时根据表定义计算而得，不是通过表内检索出的。</p>
<p>计算：</p>
<ul>
<li>字符串 <ul>
<li>char(n)：n字节长度</li>
<li>varchar(n)：2字节存储字符串长度，如果是utf-8，则长度 3n + 2</li>
</ul>
</li>
<li>数值类型 <ul>
<li>tinyint：1字节</li>
<li>smallint：2字节</li>
<li>int：4字节</li>
<li>bigint：8字节　　</li>
</ul>
</li>
<li>时间类型　 <ul>
<li>date：3字节</li>
<li>timestamp：4字节</li>
<li>datetime：8字节</li>
</ul>
</li>
<li>如果字段允许为 NULL，需要1字节记录是否为 NULL</li>
</ul>
<p>索引最大长度是768字节，当字符串过长时，mysql会做一个类似左前缀索引的处理，将前半部分的字符提取出来做索引。</p>
<p>（8）ref</p>
<p>解释：</p>
<p>显示索引的哪一列被使用了，如果可能的话，是一个常数。哪些列或常量被用于查找索引列上的值。</p>
<p>（9）rows</p>
<p>解释：</p>
<p>这一列是mysql估计要读取并检测的行数，注意这个不是结果集里的行数。</p>
<p>（10）extra</p>
<p>解释：</p>
<p>包含不适合在其他列中显示但十分重要的额外信息。</p>
<p>说明：</p>
<ul>
<li><code>using index</code>：这发生在对表的请求列都是同一索引的部分的时候，返回的列数据只使用了索引中的信息，而没有再去访问表中的行记录，是性能高的表现。如果同时出现using where，表明索引被用来执行索引键值的查找；如果没有同时出现using where，表明索引用来读取数据而非执行查找动作。</li>
<li><code>using filesort</code>：MySQL会对结果使用一个外部索引排序，而不是按索引次序从表里读取行。此时MySQL会根据联接类型浏览所有符合条件的记录，并保存排序关键字和行指针，然后排序关键字并按顺序检索行信息。这种情况一般是很危险的，九死一生。</li>
<li><code>using temporary</code>：MySQL需要创建一张临时表来处理查询，对于查询结果排序时使用临时表，常见于排序order by和分组查询group by。常见于这种情况就更加危险了，十死无生。</li>
<li><code>using where</code>：使用where过滤。</li>
<li><code>using join buffer</code>：使用连接缓存。</li>
<li><code>impossible where</code>：where子句总是false，不能用来获取任何元组。</li>
<li><code>select tables optimized away</code>：在没有GROUP BY子句的情况下，基于索引优化MIN/MAX或者对于MyISAM存储引擎优化COUNT(*)操作，不必等到执行阶段再进行计算，查询执行计划生成的阶段即完成优化。</li>
<li><code>distinct</code>：一旦MySQL找到了与行相联合匹配的行，就停止搜索。</li>
</ul>
<h3 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h3><blockquote>
<p>案例1</p>
</blockquote>
<p>建表：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">CREATE TABLE `tb2_article` (
  `id` int NOT NULL AUTO_INCREMENT,
  `author_id` int NOT NULL,
  `category_id` int NOT NULL,
  `views` int NOT NULL,
  `comments` int NOT NULL,
  `title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `content` text NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

INSERT INTO `tb2_article` VALUES (1, 1, 1, 1, 1, '1', '1');
INSERT INTO `tb2_article` VALUES (2, 2, 2, 2, 2, '2', '2');
INSERT INTO `tb2_article` VALUES (3, 3, 3, 3, 3, '3', '3');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>第一次explain：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">EXPLAIN SELECT id, author_id FROM tb2_article WHERE category_id = 1 AND comments > 1 order by views desc limit 1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>结果：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">+----+-------------+-------------+------------+------+---------------+------+---------+------+------+----------+-----------------------------+
| id | select_type | table       | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                       |
+----+-------------+-------------+------------+------+---------------+------+---------+------+------+----------+-----------------------------+
|  1 | SIMPLE      | tb2_article | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    2 |    50.00 | Using where; Using filesort |
+----+-------------+-------------+------------+------+---------------+------+---------+------+------+----------+-----------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>建立索引：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">CREATE INDEX idx_article_ccv on tb2_article(category_id,comments, views);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>第二次explain：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">EXPLAIN SELECT id, author_id FROM tb2_article WHERE category_id = 1 AND comments > 1 order by views desc limit 1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>结果：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">+----+-------------+-------------+------------+-------+-----------------+-----------------+---------+------+------+----------+---------------------------------------+
| id | select_type | table       | partitions | type  | possible_keys   | key             | key_len | ref  | rows | filtered | Extra                                 |
+----+-------------+-------------+------------+-------+-----------------+-----------------+---------+------+------+----------+---------------------------------------+
|  1 | SIMPLE      | tb2_article | NULL       | range | idx_article_ccv | idx_article_ccv | 8       | NULL |    1 |   100.00 | Using index condition; Using filesort |
+----+-------------+-------------+------------+-------+-----------------+-----------------+---------+------+------+----------+---------------------------------------+
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>发现key中已经显示了刚刚建立的索引，但是依然使用了文件排序。</p>
<p>第三次explain：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">EXPLAIN SELECT id, author_id FROM tb2_article WHERE category_id = 1 AND comments = 1 order by views desc limit 1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>结果：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">+----+-------------+-------------+------------+------+-----------------+-----------------+---------+-------------+------+----------+---------------------+
| id | select_type | table       | partitions | type | possible_keys   | key             | key_len | ref         | rows | filtered | Extra               |
+----+-------------+-------------+------------+------+-----------------+-----------------+---------+-------------+------+----------+---------------------+
|  1 | SIMPLE      | tb2_article | NULL       | ref  | idx_article_ccv | idx_article_ccv | 8       | const,const |    1 |   100.00 | Backward index scan |
+----+-------------+-------------+------------+------+-----------------+-----------------+---------+-------------+------+----------+---------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当把查询条件修改为等于时，发现ref中出现两个常量，即两个查询常量，并且没有使用文件排序。说明当查询条件为大于号时，索引失效。</p>
<p>浅析第二次加了索引之后explain依然使用<code>filesort</code>：</p>
<p>按照BTree的工作原理，先排序<code>category_id</code>，如果遇到相同的<code>category_id</code>则再排序<code>comments</code>，如果遇到相同的<code>commnents</code>则再排序<code>views</code>。当<code>comments</code>字段在联合索引里处于中间位置时，因<code>comments &gt; 1</code>条件是一个范围值(range)，MySQL无法利用索引再对后面的views部分进行检索，即range类型查询字段后面的索引无效。</p>
<p>删除索引：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">DROP INDEX idx_article_ccv ON tb2_article;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>新建索引：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">CREATE INDEX idx_article_cv ON  tb2_article(category_id, views);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>再次explain：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">EXPLAIN SELECT id, author_id FROM tb2_article WHERE category_id = 1 AND comments > 1 order by views desc limit 1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>结果：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">+----+-------------+-------------+------------+------+----------------+----------------+---------+-------+------+----------+----------------------------------+
| id | select_type | table       | partitions | type | possible_keys  | key            | key_len | ref   | rows | filtered | Extra                            |
+----+-------------+-------------+------------+------+----------------+----------------+---------+-------+------+----------+----------------------------------+
|  1 | SIMPLE      | tb2_article | NULL       | ref  | idx_article_cv | idx_article_cv | 4       | const |    1 |    50.00 | Using where; Backward index scan |
+----+-------------+-------------+------------+------+----------------+----------------+---------+-------+------+----------+----------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到type变成了<code>ref</code>，Extra中的<code>using filesort</code>也消失了，结果非常理想。</p>
<p>结论：建立复合索引的时候最好不要带上含有范围查询的字段。</p>
<blockquote>
<p>案例2</p>
</blockquote>
<p>继续建表：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">CREATE TABLE `tb2_class` (
  `id` int NOT NULL AUTO_INCREMENT,
  `card` int NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

CREATE TABLE `tb2_book` (
  `bookid` int NOT NULL AUTO_INCREMENT,
  `card` int NOT NULL,
  PRIMARY KEY (`bookid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

INSERT INTO tb2_class(card) VALUES(FLOOR(1 + RAND() * 20));
INSERT INTO tb2_book(card) VALUES(FLOOR(1 + RAND() * 20));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>第一次explain：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">EXPLAIN SELECT * FROM tb2_class LEFT JOIN tb2_book on tb2_class.card = tb2_book.card;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>结果：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+
| id | select_type | table     | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                      |
+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+
|  1 | SIMPLE      | tb2_class | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    9 |   100.00 | NULL                                       |
|  1 | SIMPLE      | tb2_book  | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    9 |   100.00 | Using where; Using join buffer (hash join) |
+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到type都为ALL。</p>
<p>建立右表tb2_book索引：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">ALTER TABLE tb2_book ADD INDEX(card);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>第二次explain：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">EXPLAIN SELECT * FROM tb2_class LEFT JOIN tb2_book on tb2_class.card = tb2_book.card;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>结果：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">+----+-------------+-----------+------------+------+---------------+------+---------+----------------------------+------+----------+-------------+
| id | select_type | table     | partitions | type | possible_keys | key  | key_len | ref                        | rows | filtered | Extra       |
+----+-------------+-----------+------------+------+---------------+------+---------+----------------------------+------+----------+-------------+
|  1 | SIMPLE      | tb2_class | NULL       | ALL  | NULL          | NULL | NULL    | NULL                       |    9 |   100.00 | NULL        |
|  1 | SIMPLE      | tb2_book  | NULL       | ref  | card          | card | 4       | mysql_learn.tb2_class.card |    1 |   100.00 | Using index |
+----+-------------+-----------+------------+------+---------------+------+---------+----------------------------+------+----------+-------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到tb2_class的type依然是ALL，tb2_book的type优化为ref。</p>
<p>删除tb2_book的索引：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">DROP INDEX card ON tb2_book;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>建立左表tb2_class索引：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">ALTER TABLE tb2_class ADD INDEX(card);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>第三次explain：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">EXPLAIN SELECT * FROM tb2_class LEFT JOIN tb2_book on tb2_class.card = tb2_book.card;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>结果：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">+----+-------------+-----------+------------+-------+---------------+------+---------+------+------+----------+--------------------------------------------+
| id | select_type | table     | partitions | type  | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                      |
+----+-------------+-----------+------------+-------+---------------+------+---------+------+------+----------+--------------------------------------------+
|  1 | SIMPLE      | tb2_class | NULL       | index | NULL          | card | 4       | NULL |    9 |   100.00 | Using index                                |
|  1 | SIMPLE      | tb2_book  | NULL       | ALL   | NULL          | NULL | NULL    | NULL |    9 |   100.00 | Using where; Using join buffer (hash join) |
+----+-------------+-----------+------------+-------+---------------+------+---------+------+------+----------+--------------------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到tb2_class的type为index，tb2_book的type下降为ALL。</p>
<p>最后再次建立tb2_book的索引：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">ALTER TABLE tb2_book ADD INDEX(card);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>第四次explain：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">EXPLAIN SELECT * FROM tb2_class LEFT JOIN tb2_book on tb2_class.card = tb2_book.card;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>结果：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">+----+-------------+-----------+------------+-------+---------------+------+---------+----------------------------+------+----------+-------------+
| id | select_type | table     | partitions | type  | possible_keys | key  | key_len | ref                        | rows | filtered | Extra       |
+----+-------------+-----------+------------+-------+---------------+------+---------+----------------------------+------+----------+-------------+
|  1 | SIMPLE      | tb2_class | NULL       | index | NULL          | card | 4       | NULL                       |    9 |   100.00 | Using index |
|  1 | SIMPLE      | tb2_book  | NULL       | ref   | card          | card | 4       | mysql_learn.tb2_class.card |    1 |   100.00 | Using index |
+----+-------------+-----------+------------+-------+---------------+------+---------+----------------------------+------+----------+-------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>发现type都提升了，index和ref，结果很理想。</p>
<p>结论：对于JOIN连接查询的两张表最好都在联结字段建立单值索引。</p>
<blockquote>
<p>案例3</p>
</blockquote>
<p>继续建表：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">CREATE TABLE `tb2_phone` (
  `phoneid` int NOT NULL AUTO_INCREMENT,
  `card` int DEFAULT NULL,
  PRIMARY KEY (`phoneid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

INSERT INTO tb2_phone(card) VALUES(FLOOR(1 + (RAND()*20)));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>第一次explain：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">EXPLAIN SELECT * FROM tb2_class LEFT JOIN tb2_book ON tb2_class.card = tb2_book.card LEFT JOIN tb2_phone ON tb2_book.card = tb2_phone.card ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>结果：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+
| id | select_type | table     | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                      |
+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+
|  1 | SIMPLE      | tb2_class | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    9 |   100.00 | NULL                                       |
|  1 | SIMPLE      | tb2_book  | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    9 |   100.00 | Using where; Using join buffer (hash join) |
|  1 | SIMPLE      | tb2_phone | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    9 |   100.00 | Using where; Using join buffer (hash join) |
+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>发现三张表的type都是ALL。</p>
<p>建立tb2_phone和tb2_book的索引：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">ALTER TABLE tb2_phone INDEX(card);
ALTER TABLE tb2_book ADD INDEX(card);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>第二次explain：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">EXPLAIN SELECT * FROM tb2_class LEFT JOIN tb2_book ON tb2_class.card = tb2_book.card LEFT JOIN tb2_phone ON tb2_book.card = tb2_phone.card ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>结果：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">+----+-------------+-----------+------------+------+---------------+------+---------+----------------------------+------+----------+-------------+
| id | select_type | table     | partitions | type | possible_keys | key  | key_len | ref                        | rows | filtered | Extra       |
+----+-------------+-----------+------------+------+---------------+------+---------+----------------------------+------+----------+-------------+
|  1 | SIMPLE      | tb2_class | NULL       | ALL  | NULL          | NULL | NULL    | NULL                       |    9 |   100.00 | NULL        |
|  1 | SIMPLE      | tb2_book  | NULL       | ref  | card          | card | 4       | mysql_learn.tb2_class.card |    1 |   100.00 | Using index |
|  1 | SIMPLE      | tb2_phone | NULL       | ref  | card          | card | 5       | mysql_learn.tb2_book.card  |    1 |   100.00 | Using index |
+----+-------------+-----------+------------+------+---------------+------+---------+----------------------------+------+----------+-------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>发现tb2_phone和tb2_book的type被优化为ref，并且rows也优化的很好。</p>
<p>结论：</p>
<ul>
<li><strong>永远用小结果集驱动大结果集</strong></li>
<li>尽可能减少Join语句中的NestedLoop的循环总次数</li>
<li>优先优化NestedLoop的内存循环</li>
<li>保证Join语句中被驱动表上Join条件字段已经被索引</li>
<li>当无法保证被驱动表的Join条件字段被索引且内存资源充足的前提下，不要太吝啬JoinBuffer的设置</li>
</ul>
<h3 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h3><blockquote>
<p>SQL脚本</p>
</blockquote>
<pre class="line-numbers language-mysql"><code class="language-mysql">CREATE TABLE `tb3_staff` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(20) DEFAULT NULL,
  `age` int DEFAULT NULL,
  `pos` varchar(20) DEFAULT NULL,
  `add_time` timestamp NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

INSERT INTO tb3_staff(name, age, pos, add_time) VALUES ( 'KHighness', 19, 'manager', NOW());
INSERT INTO tb3_staff(name, age, pos, add_time) VALUES ( 'FlowerK', 18, 'dev', NOW());
INSERT INTO tb3_staff(name, age, pos, add_time) VALUES ( 'UnknownK', 17, 'dev', NOW());

ALTER TABLE tb3_staff ADD INDEX id_staff_nameagepos(name, age, pos);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>生效场景</p>
</blockquote>
<ul>
<li><code>EXPLAIN SELECT * FROM tb3_staff WHERE name = &#39;KHighness&#39;;</code></li>
<li><code>EXPLAIN SELECT * FROM tb3_staff WHERE name = &#39;KHighness&#39; and age = 19;</code></li>
<li><code>EXPLAIN SELECT * FROM tb3_staff WHERE name = &#39;KHighness&#39; and age = 19 and pos = &quot;dev&quot;;</code></li>
</ul>
<blockquote>
<p>失效场景</p>
</blockquote>
<ul>
<li><code>EXPLAIN SELECT * FROM tb3_staff WHERE age = 19 and pos = &quot;dev&quot;;</code></li>
<li> <code>EXPLAIN SELECT * FROM tb3_staff WHERE  pos = &quot;dev&quot;;</code></li>
</ul>
<blockquote>
<p>部分失效</p>
</blockquote>
<ul>
<li><code>EXPLAIN SELECT * FROM tb3_staff WHERE name = &#39;KHighness&#39; and pos = &quot;dev&quot;;</code></li>
</ul>
<blockquote>
<p>总结</p>
</blockquote>
<p>1、最理想的情况就是查询字段与索引字段相同</p>
<p>2、最佳左前缀法则</p>
<p>3、不在索引列上做任何操作（计算、函数、（自动or手动）类型转换），会导致索引失效而转向全表扫描</p>
<p>4、存储引擎不能使用索引中范围条件右边的列</p>
<p>5、尽量使用覆盖索引（只访问索引的查询（索引列和查询列一致）），减少select *</p>
<p>6、使用不等于(!= 或者 &lt;&gt;)的时候索引失效会导致range（MySQL5中是ALL）</p>
<p>7、使用is null或者is not null的时候索引失效会导致range（MySQL5中是ALL）</p>
<p>8、like以通配符开头索引失效会导致ALL，建立覆盖索引可以防止</p>
<p>9、MySQL5中字符串不加单引号索引失效会导致ALL，MySQL8中直接报错</p>
<p>10、使用or连接索引失效会导致ALL</p>
<h3 id="索引面试"><a href="#索引面试" class="headerlink" title="索引面试"></a>索引面试</h3><blockquote>
<p>SQL语句</p>
</blockquote>
<pre class="line-numbers language-mysql"><code class="language-mysql">CREATE TABLE `tb4_test` (
  `id` int NOT NULL AUTO_INCREMENT,
  `c1` char(10) DEFAULT NULL,
  `c2` char(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `c3` char(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `c4` char(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `c5` char(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

CREATE INDEX idx_tb4_test_c1234 ON tb4_test(c1, c2, c3, c4);

INSERT INTO `mysql_learn`.`tb4_test`(`id`, `c1`, `c2`, `c3`, `c4`, `c5`) VALUES (1, 'a1', 'a2', 'a3', 'a4', 'a5');
INSERT INTO `mysql_learn`.`tb4_test`(`id`, `c1`, `c2`, `c3`, `c4`, `c5`) VALUES (2, 'b1', 'b2', 'b3', 'b4', 'b5');
INSERT INTO `mysql_learn`.`tb4_test`(`id`, `c1`, `c2`, `c3`, `c4`, `c5`) VALUES (3, 'c1', 'c2', 'c3', 'c4', 'c5');
INSERT INTO `mysql_learn`.`tb4_test`(`id`, `c1`, `c2`, `c3`, `c4`, `c5`) VALUES (4, 'd1', 'd2', 'd3', 'd4', 'd5');
INSERT INTO `mysql_learn`.`tb4_test`(`id`, `c1`, `c2`, `c3`, `c4`, `c5`) VALUES (5, 'e1', 'e2', 'e3', 'e4', 'e5');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>EXPLAIN测试</p>
</blockquote>
<pre class="line-numbers language-mysql"><code class="language-mysql">/* 最好索引怎么创建的，就怎么用，按照顺序使用，避免让MySQL再自己去翻译一次 */

/* 1.全值匹配 用到索引c1 c2 c3 c4全字段 */
EXPLAIN SELECT * FROM `test03` WHERE `c1` = 'a1' AND `c2` = 'a2' AND `c3` = 'a3' AND `c4` = 'a4';

/* 2.用到索引c1 c2 c3 c4全字段 MySQL的查询优化器会优化SQL语句的顺序*/
EXPLAIN SELECT * FROM `test03` WHERE `c1` = 'a1' AND `c2` = 'a2' AND `c4` = 'a4' AND `c3` = 'a3';

/* 3.用到索引c1 c2 c3 c4全字段 MySQL的查询优化器会优化SQL语句的顺序*/
EXPLAIN SELECT * FROM `test03` WHERE `c4` = 'a4' AND `c3` = 'a3' AND `c2` = 'a2' AND `c1` = 'a1';

/* 4.用到索引c1 c2 c3字段，c4字段失效，范围之后全失效 */
EXPLAIN SELECT * FROM `test03` WHERE `c1` = 'a1' AND `c2` = 'a2' AND `c3` > 'a3' AND `c4` = 'a4';

/* 5.用到索引c1 c2 c3 c4全字段 MySQL的查询优化器会优化SQL语句的顺序*/
EXPLAIN SELECT * FROM `test03` WHERE `c1` = 'a1' AND `c2` = 'a2' AND `c4` > 'a4' AND `c3` = 'a3';

/* 
   6.用到了索引c1 c2 c3三个字段, c1和c2两个字段用于查找,  c3字段用于排序了但是没有统计到key_len中，c4字段失效
*/
EXPLAIN SELECT * FROM `test03` WHERE `c1` = 'a1' AND `c2` = 'a2' AND `c4` = 'a4' ORDER BY `c3`;

/* 7.用到了索引c1 c2 c3三个字段，c1和c2两个字段用于查找, c3字段用于排序了但是没有统计到key_len中*/
EXPLAIN SELECT * FROM `test03` WHERE `c1` = 'a1' AND `c2` = 'a2' ORDER BY `c3`;

/* 
   8.用到了索引c1 c2两个字段，c4失效，c1和c2两个字段用于查找，c4字段排序产生了Using filesort说明排序没有用到c4字段 
*/
EXPLAIN SELECT * FROM `test03` WHERE `c1` = 'a1' AND `c2` = 'a2' ORDER BY `c4`;

/* 9.用到了索引c1 c2 c3三个字段，c1用于查找，c2和c3用于排序 */
EXPLAIN SELECT * FROM `test03` WHERE `c1` = 'a1' AND `c5` = 'a5' ORDER BY `c2`, `c3`;

/* 10.用到了c1一个字段，c1用于查找，c3和c2两个字段索引失效，产生了Using filesort */
EXPLAIN SELECT * FROM `test03` WHERE `c1` = 'a1' AND `c5` = 'a5' ORDER BY `c3`, `c2`;

/* 11.用到了c1 c2 c3三个字段，c1 c2用于查找，c2 c3用于排序 */
EXPLAIN SELECT * FROM `test03` WHERE `c1` = 'a1' AND  `c2` = 'a2' ORDER BY c2, c3;

/* 12.用到了c1 c2 c3三个字段，c1 c2用于查找，c2 c3用于排序 */
EXPLAIN SELECT * FROM `test03` WHERE `c1` = 'a1' AND  `c2` = 'a2' AND `c5` = 'a5' ORDER BY c2, c3;

/* 
   13.用到了c1 c2 c3三个字段，c1 c2用于查找，c2 c3用于排序 没有产生Using filesort 
      因为之前c2这个字段已经确定了是'a2'了，这是一个常量，再去ORDER BY c3,c2 这时候c2已经不用排序了！
      所以没有产生Using filesort 和(10)进行对比学习！
*/
EXPLAIN SELECT * FROM `test03` WHERE `c1` = 'a1' AND `c2` = 'a2' AND `c5` = 'a5' ORDER BY c3, c2;

/* GROUP BY 表面上是叫做分组，但是分组之前必定排序。 */

/* 14.用到c1 c2 c3三个字段，c1用于查找，c2 c3用于排序，c4失效 */
EXPLAIN SELECT * FROM `test03` WHERE `c1` = 'a1' AND `c4` = 'a4' GROUP BY `c2`,`c3`;

/* 15.用到c1这一个字段，c4失效，c2和c3排序失效产生了Using filesort */
EXPLAIN SELECT * FROM `test03` WHERE `c1` = 'a1' AND `c4` = 'a4' GROUP BY `c3`,`c2`;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>总结</p>
</blockquote>
<ul>
<li>定值、范围还是排序，一般order by是给个范围。</li>
<li>group by基本上都需要进行排序，会有临时表产生。</li>
<li>like匹配%在字符串最右边会使用使用，%在字符串最左边不会使用。</li>
</ul>
<blockquote>
<p>一般性建议</p>
</blockquote>
<ul>
<li><p>对于单键索引，尽量选择针对当前query过滤性更好的索引。</p>
</li>
<li><p>在选择组合索引的时候，当前query中过滤性最好的字段在索引字段顺序中，位置越靠前越好。</p>
</li>
<li><p>在选择组合索引的时候，尽量选择可以能够包含当前query中的where子句中更多字段的索引。</p>
</li>
<li><p>尽可能通过分析统计信息和调整query的写法来达到选择合适索引的目的。</p>
</li>
</ul>
<blockquote>
<p>优化口诀</p>
</blockquote>
<p>带头大哥不能死，中间兄弟不能断；</p>
<p>覆盖索引不写星，索引列上少计算；</p>
<p>不等有时会失效，范围之后全失效；</p>
<p>LIKE百分写最右，一般SQL少用OR。</p>
<h2 id="查询截取"><a href="#查询截取" class="headerlink" title="查询截取"></a>查询截取</h2><h3 id="查询优化-1"><a href="#查询优化-1" class="headerlink" title="查询优化-1"></a>查询优化-1</h3><blockquote>
<p>优化策略</p>
</blockquote>
<p>永远小表驱动大表。</p>
<blockquote>
<p>IN</p>
</blockquote>
<pre class="line-numbers language-mysql"><code class="language-mysql">SELECT * FROM A WHERE id IN (SELECT id FROM B)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>等价于：</p>
<pre><code>for select id from B
    for select * from A where A.id = B.id</code></pre>
<p>当A表的数据集大于B表的数据集时，用in优先exists。</p>
<blockquote>
<p>EXISTS</p>
</blockquote>
<pre class="line-numbers language-mysql"><code class="language-mysql">SELECT * FROM A WHERE EXISTS (SELECT 1 FROM B WHERE B.id = A.id)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>等价于</p>
<pre><code>for select id from A
    for select * from B = B.id = A.id</code></pre>
<p>当A表的数据集小于B表的数据集时，用exists优先in。</p>
<h3 id="查询优化-2"><a href="#查询优化-2" class="headerlink" title="查询优化-2"></a>查询优化-2</h3><blockquote>
<p>优化策略</p>
</blockquote>
<p>Order By关键字优化：</p>
<p>Order By子句，尽量使用Index方式排序，避免使用FileSort方式排序。</p>
<p>尽可能在索引列上完成排序操作，遵照索引建的最佳左前缀。</p>
<p>如果不在索引列上，FileSort有两种算法：MySQL就要启动双路排序和单路排序。</p>
<blockquote>
<p>案例</p>
</blockquote>
<p>SQL脚本：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">CREATE TABLE `tb5_a` (
  `age` int NOT NULL,
  `birth` timestamp NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

INSERT INTO tb5_a(age, birth) VALUES(17, NOW());
INSERT INTO tb5_a(age, birth) VALUES(18, NOW());
INSERT INTO tb5_a(age, birth) VALUES(19, NOW());

CREATE INDEX idx_a_agebirth ON tb5_a(age, birth);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>八个case：</p>
<ul>
<li><code>EXPLAIN SELECT * FROM tb5_a WHERE age &gt; 20 ORDER BY age;</code> =&gt; 正常</li>
<li><code>EXPLAIN SELECT * FROM tb5_a WHERE age &gt; 20 ORDER BY birth;</code> =&gt; using filesort</li>
<li><code>EXPLAIN SELECT * FROM tb5_a WHERE age &gt; 20 ORDER BY age, birth;</code> =&gt; 正常</li>
<li><code> EXPLAIN SELECT * FROM tb5_a WHERE age &gt; 20 ORDER BY birth，age;</code> =&gt; using filesprt</li>
<li><code>EXPLAIN SELECT * FROM tb5_a WHERE birth &gt; &#39;2020-3:23 00:00:00&#39; ORDER BY age;</code> =&gt; 正常</li>
<li><code>EXPLAIN SELECT * FROM tb5_a WHERE birth &gt; &#39;2020-3:23 00:00:00&#39; ORDER BY birth;</code> =&gt; using filesort</li>
<li><code>EXPLAIN SELECT * FROM tb5_a WHERE birth &gt; &#39;2020-3:23 00:00:00&#39; ORDER BY age,birth;</code> =&gt; 正常</li>
<li><code>EXPLAIN SELECT * FROM tb5_a WHERE birth &gt; &#39;2020-3:23 00:00:00&#39; ORDER BY birth,age;</code> =&gt; using filesort</li>
<li><code>EXPLAIN SELECT * FROM tb5_a ORDER BY age ASC,birth ASC;</code> =&gt; 正常</li>
<li><code>EXPLAIN SELECT * FROM tb5_a ORDER BY age DESC,birth DESC;</code> =&gt; 正常</li>
<li><code>EXPLAIN SELECT * FROM tb5_a ORDER BY age ASC,birth DESC;</code> =&gt; using filesort</li>
<li><code>EXPLAIN SELECT * FROM tb5_a ORDER BY age DESC,birth ASC;</code> =&gt; using filesort</li>
</ul>
<blockquote>
<p>总结</p>
</blockquote>
<p>总结：Order By满足两种情况，会使用Index方式排序：</p>
<ul>
<li>Order By语句使用索引最左前列</li>
<li>使用Where子句与Order By子句条件列组合满足索引最左前列</li>
</ul>
<p>注意：如果不在索引列上，filesort有两种算法：</p>
<ul>
<li>双路排序：两次扫描磁盘获取数据，读取行指针和order by列，对它们进行排序，然后扫描已经排序号的列表，按照列表中的值重新从列表中读取对应的数据输出。</li>
<li>单路排序：从磁盘读取查询需要的所有列，按照order by列在buffer对它们进行排序，然后扫描排序后的列表进行输出，它的效率更快一些，避免了第二次读取数据。并且把随机IO变成了顺序IO，但是它会使用更多的空间，因为它把每一行都保存在内存中了。</li>
<li>单路问题：在单路排序中，要占用很多空间，因为需要把所有字段都取出，所以有可能取出的数据的总大小超出了sort_buffer的容量，导致每次只能取sort_buffer容量大小的数据，进行排序（创建tmp文件，多路合并），排完再取sort_buffer容量大小，再排，从而导致多次I/O。</li>
<li>优化策略：SQL服务器参数调优，增大sort_buffer_size参数的设置，增大max_length_for_sort_data参数的设置。</li>
</ul>
<p>提高Order By的速度：</p>
<p>（1）Order By时select *是一个大忌，只查询需要字段，这点非常重要。</p>
<p>（2）尝试提高sort_buffer_size。</p>
<p>（3）尝试提高max_length_for_sort_data。</p>
<blockquote>
<p>排序案例</p>
</blockquote>
<pre class="line-numbers language-mysql"><code class="language-mysql">index a_b_c(a, b, c);

-- 使用索引最左前缀
ORDER BY a
ORDER BY a, b
ORDER BY a, b, c
ORDER BY a DESC, b DESC, c DESC

-- WHERE使用索引的最左前缀定义为常量
WHERE a = const ORDER BY b, c
WHERE a = const AND b = const ORDER BY c
WHERE a = const ORDER BY b, c
WHERE a = count AND b > const ORDER BY b, c

-- 不能使用户索引进行排序
ORDER BY a ASC, b DESC, c DESC  -- 排序不一致
WHERE g = const ORDER BY b, c   -- 丢失a索引
WHERE a = const ORDER BY  c     -- 丢失b索引
WHERE a = const ORDER BY a, d   -- d不是索引的一部分
WHERE a IN (...) ORDER BY b, c  -- 对于排序来说，多个相等条件也是范围查询<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="查询优化-3"><a href="#查询优化-3" class="headerlink" title="查询优化-3"></a>查询优化-3</h3><blockquote>
<p>优化策略</p>
</blockquote>
<p>Group By关键字优化：</p>
<p>优化策略与Order By相似。</p>
<p>Group By实质是先排序后进行分组，遵照索引建的最佳左前缀。</p>
<p>当无法使用索引列，增大max_length_for_sort_data参数设置，增大sort_buffer_size参数的设置。</p>
<p>where高于having，能卸载where限定的条件就不要去having限定了。</p>
<h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><blockquote>
<p>简介</p>
</blockquote>
<ul>
<li><p>MySQL的慢查询日志是MySQL提供的一种日志记录，它用来记录在MySQL中响应时间超过阈值的语句，具体指运行时间超过long_query_time值的SQL，则会被记录到慢查询日志中。</p>
</li>
<li><p>具体指运行时间超过long_query_time值的SQL，则会被记录到慢查询日志中。long_query_time的默认值为10，意思是运行10秒以上的语句。</p>
</li>
<li><p>默认情况下，MySQL数据库没有开启慢查询日志，需要我们手动来设置这个参数。</p>
</li>
<li><p>当然，如果不是调优需要的话，一般不建议启动该参数，因为开启漫长哈讯日志会或多或少带来一定的性能影响。慢查询日志支持将日志记录写入文件。</p>
</li>
</ul>
<blockquote>
<p>配置</p>
</blockquote>
<p>查看是否开启慢查询日志和文件位置：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">mysql> SHOW VARIABLES LIKE '%SLOW_QUERY_LOG%';
+---------------------+-------------------------------+
| Variable_name       | Value                         |
+---------------------+-------------------------------+
| slow_query_log      | OFF                           |
| slow_query_log_file | /var/lib/mysql/parak-slow.log |
+---------------------+-------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>开启慢查询日志（只对本次生效，重启后失效）：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">SET global slow_query_log = 1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>查看慢查询阈值（默认为10s）：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">mysql> SHOW VARIABLES LIKE 'long_query_time%';
+-----------------+-----------+
| Variable_name   | Value     |
+-----------------+-----------+
| long_query_time | 10.000000 |
+-----------------+-----------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>设置慢查询阈值（3s）：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">SET global long_query_time = 3;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>查看慢查询记录数量：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">SHOW global STATUS LIKE '%SLOW_QUERIES%';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>永久生效需要修改配置文件/etc/my.cnf，需要在[mysqld]下增加或修改参数：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">slow_query_log = 1
slow_query_log_file = /var/lib/mysql/<hostname>-slow.log
long_query_time  = <time><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>mysqldumpslow</p>
</blockquote>
<p>参数：</p>
<ul>
<li>s：表示按照何种方式排序</li>
<li>c：访问次数</li>
<li>l：锁定时间</li>
<li>r：返回记录</li>
<li>t：查询时间</li>
<li>al：平均锁定时间</li>
<li>ar：平均返回记录数量</li>
<li>at：平均查询时间</li>
<li>t：返回数据数量</li>
<li>g：正则匹配，大小写不敏感</li>
</ul>
<p>得到返回记录最多的10个SQL：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">mysqldumpslow -s r -t 10 /var/lib/mysql/parak-slow.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>得到访问次数最多的10个SQL：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">mysqldumpslow -s c -t 10 /var/lib/mysql/parak-slow.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>得到按照时间排序的前10条里面含有左连接的查询语句：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">mysqldumpslow -s t -t 10 -g "left join" /var/lib/mysql/parak-slow.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>建议在使用这些命令时结合 | 和 more使用，防止爆屏。</p>
<h3 id="批量数据脚本"><a href="#批量数据脚本" class="headerlink" title="批量数据脚本"></a>批量数据脚本</h3><blockquote>
<p>配置</p>
</blockquote>
<p>变量<code>log_bin_trust_function_creators</code>：控制是否可以信任存储函数创建者，不会创建写入二进制日志引起不安全事件的存储函数。</p>
<p>查看是否开启：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">mysql> SHOW VARIABLES LIKE 'log_bin_trust_function_creators';
+---------------------------------+-------+
| Variable_name                   | Value |
+---------------------------------+-------+
| log_bin_trust_function_creators | OFF   |
+---------------------------------+-------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>开启（暂时性开启，永久性依然是修改my.cnf）：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql"> SET global log_bin_trust_function_creators = 1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>数据准备</p>
</blockquote>
<pre class="line-numbers language-mysql"><code class="language-mysql">CREATE TABLE `tb6_dept` (
  `id` int NOT NULL AUTO_INCREMENT,
  `deptno` mediumint NOT NULL DEFAULT '0',
  `dname` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `loc` varchar(13) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

CREATE TABLE `tb6_emp` (
  `id` int NOT NULL AUTO_INCREMENT,
  `empno` mediumint NOT NULL DEFAULT '0',
  `ename` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `job` varchar(9) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `mgr` mediumint NOT NULL DEFAULT '0',
  `hiredate` date NOT NULL,
  `sal` decimal(7,2) NOT NULL,
  `comm` decimal(7,2) DEFAULT NULL,
  `deptno` mediumint NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>创建函数</p>
</blockquote>
<pre class="line-numbers language-mysql"><code class="language-mysql"># 随机产生字符串
DELIMITER $$
CREATE FUNCTION rand_string(n INT) RETURNS VARCHAR(255)
BEGIN
    DECLARE chars_str VARCHAR(100) DEFAULT 'abcdefghijklmnopqrstuvwsyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    DECLARE return_str VARCHAR(255) DEFAULT '';
    DECLARE i INT DEFAULT 0;
    WHILE i < n DO
    SET return_str = CONCAT(return_str,SUBSTRING(chars_str,FLOOR(1+RAND()*52),1));
    SET i = i + 1;
    END WHILE;
    RETURN return_str;
END $$

# 随机产生部门编号
DELIMITER $$
CREATE FUNCTION rand_num() RETURNS INT(5)
BEGIN
    DECLARE i INT DEFAULT 0;
    SET i = FLOOR(100 + RAND() * 10);
    RETURN i;
END $$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>创建存储过程</p>
</blockquote>
<pre class="line-numbers language-mysql"><code class="language-mysql"># 向tb6_dept表批量插入
DELIMITER $$
CREATE PROCEDURE insert_dept(IN START INT(10),IN max_num INT(10))
BEGIN
DECLARE i INT DEFAULT 0;
    SET autocommit = 0;
    REPEAT
    SET i = i + 1;
    INSERT INTO dept(deptno,dname,loc) VALUES((START + i),rand_string(10),rand_string(8));
    UNTIL i = max_num
    END REPEAT;
    COMMIT;
END $$

# 向tb6_emp表批量插入
DELIMITER $$
CREATE PROCEDURE insert_emp(IN START INT(10),IN max_num INT(10))
BEGIN
DECLARE i INT DEFAULT 0;
    SET autocommit = 0;
    REPEAT
    SET i = i + 1;
    INSERT INTO emp(empno,ename,job,mgr,hiredata,sal,comm,deptno) VALUES((START + i),rand_string(6),'SALESMAN',0001,CURDATE(),2000,400,rand_num());
    UNTIL i = max_num
    END REPEAT;
    COMMIT;
END $$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>批量插入数据</p>
</blockquote>
<pre class="line-numbers language-mysql"><code class="language-mysql"># 向tb6_dept中插入10条数据
DELIMITER ;
CALL insert_dept(100, 10);

# 向tb6_emp中插入50万条数据
DELIMITER ;
CALL insert_emp(100001, 500000);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Show-Profile"><a href="#Show-Profile" class="headerlink" title="Show Profile"></a>Show Profile</h3><blockquote>
<p>概述</p>
</blockquote>
<p>MySQL提供的可以用来分析当前会话中语句执行的资源消耗情况，可以用于SQL调优的测量。</p>
<p>官网：<a href="https://dev.mysql.com/doc/refman/8.0/en/show-profile.html">https://dev.mysql.com/doc/refman/8.0/en/show-profile.html</a></p>
<p>默认情况下，参数处于关闭状态，并保存最近15次的运行结果。</p>
<blockquote>
<p>配置</p>
</blockquote>
<p>查看开启状态：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">mysql> SHOW VARIABLES LIKE 'profiling';
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| profiling     | OFF   |
+---------------+-------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>开启：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">SET global profiling = 1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>MySQL8需要关闭依赖检测，即从sql_mode中移除<code>ONLY_FULL_GROUP_BY</code>：</p>
<p>查看sql_mode：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">mysql> SELECT @@global.sql_mode;
+-----------------------------------------------------------------------------------------------------------------------+
| @@global.sql_mode                                                                                                     |
+-----------------------------------------------------------------------------------------------------------------------+
| ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION |
+-----------------------------------------------------------------------------------------------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>移除<code>ONLY_FULL_GROUP_BY</code>：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">SET global @@sql_mode = `STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION`;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>相关命令</p>
</blockquote>
<p>查看SQL：<code>SHOW PROFILES</code></p>
<p>诊断SQL：<code>SHOW PROFILE &lt;type ...&gt; FOR QUERY &lt;Query_ID&gt;</code></p>
<p>可选参数如下：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">| ALL                -- 显示所有的开销信息
| BLOCK IO           -- 显示块IO相关开销
| CONTEXT SWITCHES   -- 上下文切换相关开销
| CPU                -- 显示CPU相关开销信息
| IPC                -- 显示内存相关开销信息
| MEMORY             -- 显示内存相关开销信息
| PAGE FAULTS        -- 显示页面错误相关开销信息
| SOURCE             -- 显示和Source_function, Source_file, Source_line相关的开销信息
| SWAPS              -- 显示交换次数相关开销的信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>日常开发需要注意</p>
</blockquote>
<ul>
<li>converting HEAP to MyISAM 查询结果太大，内存都不够用了王磁盘上搬了</li>
<li>Creating tmp table 拷贝数据到临时表，用完再删除</li>
<li>Copying to tmp table on disk 吧内存中临时表复制到磁盘，危险</li>
<li>locked 死锁</li>
</ul>
<h3 id="全局查询日志"><a href="#全局查询日志" class="headerlink" title="全局查询日志"></a>全局查询日志</h3><blockquote>
<p>永久启用</p>
</blockquote>
<p>修改my.cnf，设置如下：</p>
<pre class="line-numbers language-mysql"><code class="language-mysql"># 开启
general_log = 1
# 记录日志文件的路径
general_log_file = /<path>/<name>
# 输出格式
log_output = <.extension><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>临时启用</p>
</blockquote>
<pre class="line-numbers language-mysql"><code class="language-mysql">set global general_log = 1;
set global log_output = 'TABLE';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>注意</p>
</blockquote>
<p>永远不要在生产环境开启这个功能。</p>
<h2 id="锁机制"><a href="#锁机制" class="headerlink" title="锁机制"></a>锁机制</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>前言</p>
</blockquote>
<p>锁是计算机协调多个进程或线程并发访问某一资源的机制。</p>
<p>在数据库中，除传统的计算资源（如CPU、RAM、I/O等）的争用，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。</p>
<blockquote>
<p>分类</p>
</blockquote>
<p>从对数据操作的类型分：</p>
<ul>
<li>读锁（共享锁）：针对同一份数据，多个读操作可以同时进行而不会相互影响。</li>
<li>写锁（排他锁）：当前写操作没有完成之前，它会阻断其他写锁和读锁。</li>
</ul>
<p>从对数据操作的粒度分：</p>
<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><blockquote>
<p>概述</p>
</blockquote>
<p>事务是由一组SQL语句组成的逻辑处理单元，事务具有以下4个属性，通常简称为事务的ACID属性。</p>
<ul>
<li><p>A(atomicity/原子性)：事务是一个原子操作单元，其对数据的修改，要么全都执行，要么全都不执行。</p>
</li>
<li><p>C(consistency/一致性)：在事务开始和完成时，数据都必须保持一致状态。这意味着所有相关的数据规则都必须应用于事务的修改，以保持数据的完整性；事务结束时，所有的内部数据结构（如B树索引或双向链表）也都必须是正确的。</p>
</li>
<li><p>I(isolation/隔离性)：数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的“独立”环境执行。这意味着事务处理过程中的中间状态对外部是不可见的，反之亦然。</p>
</li>
<li><p>D(durability/持久性)：事务完成之后，它对于数据的修改是永久性的，即时出现系统故障也能够保持。</p>
</li>
</ul>
<blockquote>
<p>并发事务处理带来的问题</p>
</blockquote>
<p><strong>更新丢失（Lost Update）</strong></p>
<p>当两个或多个事务选择同一行，然后基于最初选定的值更新该行时，由于每个事务都不知道其他事务的存在，就会发生丢失更新问题——最后的更新覆盖了由其他事务所做的更新。</p>
<p>例如，两个程序员修改同一Java文件。每程序员独立地更改其副本，然后保存更改的副本后，这样就覆盖了原始文档。最后保存其更改副本的编辑人员覆盖前一个程序员所做的更改。</p>
<p>如果一个在一个程序员完成并提交事务之前，另一个程序员不能访问同一文件，则可避免此问题。</p>
<p><strong>脏读（Dirty Reads）</strong></p>
<p>一个事务正在对一条记录做修改，在这个事务完成并提交前，这条记录的数据就处于不一致状态；这时，另一个事务也来读取同一条记录，如果不加控制，第二个事务读取了这些“脏”数据，并据此做进一步的处理，就会产生未提交的数据依赖关系。这种现象被形象地叫做“脏读”。</p>
<p>事务A读取到事务B已修改但未提交的数据，还在这个数据基础上做了操作。此时，如果B事务回滚，A读取的数据无效，不符合一致性要求。</p>
<p><strong>不可重复读（Non-Repeatable Reads）</strong></p>
<p>一个事务在服务某些数据后的某个时间，再次读取以前读过的数据，却发现其读出的数据已经发生了改变、或某些记录已经被删除，这种现象就叫做不可重复读。</p>
<p>事务A读取到了事务B已经提交的修改数据，不符合隔离性。</p>
<p><strong>幻读（Phantom Reads）</strong></p>
<p>一个事务按相同的查询条件重新读取以前检索过的数据，却发现其他事务插入了满足其查询条件的新数据，这种现象就称为“幻读”。</p>
<p>事务A读取到事务B提交的新增数据，不符合隔离性。</p>
<blockquote>
<p>事务隔离级别</p>
</blockquote>
<p>“脏读”、“不可重复读”和“幻读”，其实都是数据库读一致性问题，必须由数据库提供一定的书屋隔离级别来解决。</p>
<p>数据库实现事务隔离的方式，基本上可分为以下两种：</p>
<ul>
<li>一种是在读取数据前，对其加锁，阻止其他事物对数据修改。</li>
<li>另一种是不用加任何锁，通过一定机制生成一个数据请求时间点的一致性数据快照（Snapshot），并用这个快照来提供一定级别（语句级或事务级）的一致性读取。同用户的角度来看，好像是数据库可以提供统一数据的多个版本，因此，这种技术叫数据多版本并发控制（MultiVersion Concurrency Control，简称MVCC或MCC），也经常称为多版本数据库。</li>
</ul>
<p>为了解决“隔离”与“并发”的矛盾，ISO/ANSI SQL92定义了4个事务隔离级别，每个级别的隔离程度不同，允许出现的副作用也不同，允许出现的副作用也不同，应用可以根据自己的业务逻辑需求，通过选择不同的隔离级别来平衡“隔离”与“并发”的矛盾。</p>
<table>
<thead>
<tr>
<th>读数据一致性及允许的并发副作用隔离级别</th>
<th>读数据一致性</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>未提交读（Read uncommitted）</td>
<td>最低级别，只能保证不读取物理上损坏的数据</td>
<td>是</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>已提交读（Read committed）</td>
<td>语句级</td>
<td>否</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>可重复读（Repeatable read）</td>
<td>事务级</td>
<td>否</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>可序列化（Serializable）</td>
<td>最高级别，事务级</td>
<td>否</td>
<td>否</td>
<td>否</td>
</tr>
</tbody></table>
<p>数据库的事务隔离越严格，并发副作用越小，但付出的代价也玖越大，因为事务隔离实质上就是使事务在一定程度上“串行化”进行，这显然与“并发”是矛盾的。同时，不同的应用对读一致性和事务隔离程度的要求也是不同的，比如许多应用对“不可重复读”和“幻读”并不敏感，可能更关心数据并发访问的能力。</p>
<blockquote>
<p>配置</p>
</blockquote>
<p>查看的事务隔离级别（默认为可重复读）：<code>SELECT @@transaction_isolation;</code>  </p>
<pre class="line-numbers language-mysql"><code class="language-mysql">mysql> SELECT @@transaction_isolation;
+-------------------------+
| @@transaction_isolation |
+-------------------------+
| REPEATABLE-READ         |
+-------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>设置读未提交: <code>SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</code></p>
<p>设置读已提交：<code>SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;</code></p>
<p>设置可重复读：<code>SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;</code></p>
<p>设置可序列化：<code> SET SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE;</code></p>
<blockquote>
<p>SQL命令</p>
</blockquote>
<p>事务开始：<code>BEGIN</code> 或者 <code>START TRANSACTION</code></p>
<p>事务结束：<code>COMMIT</code>或者<code>COMMIT WORK</code></p>
<p>事务回滚：<code>ROLLBACK</code>或者<code>ROLLBACK WORK</code></p>
<h3 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h3><blockquote>
<p>特点</p>
</blockquote>
<p>表锁（偏读）：偏向MyISAM存储引擎，开销小，加锁快；无死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。</p>
<blockquote>
<p>操作</p>
</blockquote>
<p>手动增加表锁：<code>LOCK TABLE &lt;tablename_1&gt; read(write),&lt;tablename_1&gt; read(write) ... </code></p>
<p>查看表上的锁：<code>SHOW OPEN TABLES;</code></p>
<p>解锁：<code>UNLOCK TABLES;</code></p>
<blockquote>
<p>分析</p>
</blockquote>
<p>分析表锁定：<code>SHOW STATUS LIKE &#39;table%&#39;;</code></p>
<p>有两个状态变量记录MySQL内部表级锁定的情况，两个变量说下：</p>
<p><code>Table_locs_immediate</code>：产生表级锁定的次数，表示可以立即获取锁的查询次数，每立即获取锁值+1;</p>
<p><code>Table_locks_waited</code>：出现表级锁定争用而发生等待的次数（不能立即获取锁的次数，每等待一次锁值+1），此值高则说明存在着比较严重的表级锁争用情况。</p>
<p>此外，MyISAM的读写锁调度是写优先，这也是MyISAM不适合做写为主表的引擎，因为写锁后，其他线程不能做任何操作，大量的更新会使查询很难得到锁，从而造成永远阻塞。</p>
<blockquote>
<p>总结</p>
</blockquote>
<p>当前线程给一个表加上读锁时，当前线程和其他线程都可以读这个表，但是当前线程线程读其他表时会报错，当前线程写该表时会报错，其他线程写该表时会阻塞。</p>
<p>当前线程给一个表加上写锁时，当前线程可以对该表进行读和写操作，但是当前线程对其他表进行读和写操作时会报错，其他线程对该表进行读和写时会阻塞。</p>
<p>读锁阻塞写，写锁都阻塞。</p>
<h3 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h3><blockquote>
<p>特点</p>
</blockquote>
<p>行锁（偏写）：偏向InnoDB存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。</p>
<p>InnoDB与MyISAM的最大不同有两点：一是支持事务；二是采用了行级锁。</p>
<blockquote>
<p>InnoDB行锁实现方式</p>
</blockquote>
<p>InnoDB行锁是通过索引上的索引项加锁来实现的，这一点MySQL与Oracle不同，后者是通过在数据块中对相应数据行加锁来实现的。InnoDB这种行锁实现特点意味着：只有通过索引条件来检索数据，InnoDB才使用行级锁，否则InnoDB将使用表锁。</p>
<blockquote>
<p>总结</p>
</blockquote>
<p>当前线程<code>begin</code>以后对一张表进行写操作，其他线程对该表进行写操作时会阻塞。当前线程写操作完毕后仅当前线程可见，其他线程只能读更新之前的数据，只有当前线程<code>commit;</code>之后其他线程才可读更新数据。</p>
<blockquote>
<p>间隙锁</p>
</blockquote>
<p>当我们用范围条件而不是相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据记录的索引项加锁；对于键值在条件范围内但并不存在的记录，叫做间隙。</p>
<p>InnoDB也会对这个间隙加锁，这种锁机制就是所谓的间隙锁。</p>
<p>危害：因为Query执行过程中通过范围查找的话，它会锁定整个范围内的所有索引键值，即使这个键值并不存在。间隙所有一个比较致命的弱点，就是当锁定一个范围键值之后，即时某些不存在的键值也会被无辜的锁定，而造成在锁定的时候无法插入锁定键值范围内的任何数据。在某些场景下这可能会对性能造成很大的危害。</p>
<blockquote>
<p>如何锁定一行</p>
</blockquote>
<p><code>SELECT .....FOR UPDATE</code>在锁定某一行后，其他写操作会被阻塞，直到锁定的行被<code>COMMIT</code>。</p>
<p>结论：</p>
<p>InnoDB存储引擎由于实现了行级锁定，虽然在锁定机制的实现方面所带来的性能损耗可能比表级锁定会要更高一些，但是在整体并发处理能力方面要远远优于MyISAM的表级锁定的。当系统并发量较高的时候，InnoDB的整体性能和MyISAM相比就会有比较明显的优势了。</p>
<p>但是，InnoDB的行级锁定同样有其脆弱的一面，当我们使用不当的时候，可能会让InnoDB的整体性能表现不仅不能比MyISAM高，甚至可能更差。</p>
<blockquote>
<p>分析行锁定</p>
</blockquote>
<p>通过检查InnoDB_row_lock状态变量来分析系统上的行锁的争夺情况：<code>SHOW STATUS LIKE &#39;innodb_row_lock;&#39;</code></p>
<pre class="line-numbers language-mysql"><code class="language-mysql">mysql> SHOW STATUS LIKE 'innodb_row_lock%';
+-------------------------------+-------+
| Variable_name                 | Value |
+-------------------------------+-------+
| Innodb_row_lock_current_waits | 0     |
| Innodb_row_lock_time          | 38921 |
| Innodb_row_lock_time_avg      | 9730  |
| Innodb_row_lock_time_max      | 14962 |
| Innodb_row_lock_waits         | 4     |
+-------------------------------+-------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对各个状态量的说明如下：</p>
<ul>
<li><code>Innodb_row_lock_current_waits</code>：当前正在等待锁定的数量</li>
<li><code>Innodb_row_lock_time</code>：从系统启动到现在锁定总时间长度</li>
<li><code>Innodb_row_lock_time_avg</code>：每次等待所花平均时间</li>
<li><code>Innodb_row_lock_time_max</code>：从系统启动到现在等待最长的一次所花的时间</li>
<li><code>Innodb_row_lock_waits</code>：系统启动后到现在总共等待的次数</li>
</ul>
<p>注意waits金额time_avg比较高的，就要分析系统并制定优化方案。</p>
<blockquote>
<p>优化建议</p>
</blockquote>
<ul>
<li>尽可能让所有数据检索都通过索引来完成，避免无索引行锁升级为表锁</li>
<li>合理设计索引，尽量缩小锁的范围</li>
<li>尽可能减少检索条件，避免间隙锁</li>
<li>尽量控制事务大小，减少锁定资源量和时间长度</li>
<li>尽可能低级别事务隔离</li>
</ul>
<h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><h3 id="复制的基本原则"><a href="#复制的基本原则" class="headerlink" title="复制的基本原则"></a>复制的基本原则</h3><p>MySQL复制过程分为三步：</p>
<ul>
<li>Master将改变记录到二进制日志(Binary Log)。这些记录过程叫做二进制日志事件，<code>Binary Log Events</code>；</li>
<li>Slave将Master的<code>Binary Log Events</code>拷贝到它的中继日志(Replay Log);</li>
<li>Slave重做中继日志中的事件，将改变应用到自己的数据库中。MySQL复制是异步且串行化的。</li>
</ul>
<h3 id="复制的最大问题"><a href="#复制的最大问题" class="headerlink" title="复制的最大问题"></a>复制的最大问题</h3><ul>
<li>每个Slave只有一个Master。</li>
<li>每个Slave只能有一个唯一的服务器ID。</li>
<li>每个Master可以有多个Salve。</li>
</ul>
<h3 id="一主一从配置"><a href="#一主一从配置" class="headerlink" title="一主一从配置"></a>一主一从配置</h3><blockquote>
<p>基本准备</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">[root@parak home]# mkdir -p mysql-3307/conf mysql-3307/data mysql-3308/conf mysql-3308/data
[root@parak home]# touch mysql-3307/conf/my.cnf mysql-3308/conf/my.cnf
# Master配置文件
[root@parak home]# vi mysql-3307/conf/my.cnf
[mysqld]
datadir = /var/lib/mysql
server-id = 1
log-bin = mysql-bin
sql_mode=STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION
# Slave配置文件
[root@parak home]# vi mysql-3308/conf/my.cnf
[mysqld]
datadir = /var/lib/mysql
server-id = 2
log-bin = mysql-bin
sql_mode=STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>Docker启动</p>
</blockquote>
<p>mysql-3307用作Master</p>
<pre class="line-numbers language-shell"><code class="language-shell">docker run -d \
-v /home/mysql-3307/conf/my.cnf:/etc/my.cnf \
-v /home/mysql-3307/data:/var/lib/mysql \
-p 3307:3306 \
-e MYSQL_ROOT_PASSWORD=KAG1823 \
--restart=always \
--name mysql-3307 \
mysql:8.0.20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>mysql-3308用作Slave</p>
<pre class="line-numbers language-shell"><code class="language-shell">docker run -d \
-v /home/mysql-3308/conf/my.cnf:/etc/my.cnf \
-v /home/mysql-3308/data:/var/lib/mysql \
-p 3308:3306 \
-e MYSQL_ROOT_PASSWORD=KAG1823 \
--restart=always \
--name mysql-3308 \
mysql:8.0.20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>查看网络</p>
</blockquote>
<p>查看bridge网络的所有容器：<code>docker inspect bridgr</code></p>
<p>根据容器ID或者容器名称查询：<code>docker inspect --format=&#39;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#39; 容器名称 | 容器id</code></p>
<pre class="line-numbers language-shell"><code class="language-shell">[root@parak ~]# docker inspect --format='&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;' mysql-3307
172.17.0.5
[root@parak ~]# docker inspect --format='&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;' mysql-3308
172.17.0.6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>mysql-3307的IP为：<code>172.17.0.5</code></p>
<p>mysql-3308的IP为：<code>172.17.0.6</code></p>
<blockquote>
<p>Master配置</p>
</blockquote>
<p>进入Master内部</p>
<pre class="line-numbers language-mysql"><code class="language-mysql"># 创建用户，用于Slave访问Master
mysql> CREATE USER 'Khighness'@'%' IDENTIFIED WITH mysql_native_password BY 'KAG1823';
Query OK, 0 rows affected (0.00 sec)

mysql> GRANT REPLICATION SLAVE ON *.* TO 'Khighness'@'%';
Query OK, 0 rows affected (0.00 sec)

mysql> FLUSH PRIVILEGES;
Query OK, 0 rows affected (0.00 sec)

# 记录File和Position
mysql> SHOW MASTER STATUS\G;
*************************** 1. row ***************************
             File: mysql-bin.000003
         Position: 4440
     Binlog_Do_DB:
 Binlog_Ignore_DB:
Executed_Gtid_Set:
1 row in set (0.00 sec)

ERROR:
No query specified<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>用户名：<code>slave</code></p>
<p>File：<code>mysql-bin.000003</code></p>
<p>Position：<code>4440</code></p>
<blockquote>
<p>Slave配置</p>
</blockquote>
<p>进入Slave内部</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">mysql> CHANGE MASTER TO
    -> MASTER_HOST='172.17.0.5',
    -> MASTER_PORT=3307,
    -> MASTER_USER='Khighness',
    -> MASTER_PASSWORD='KAG1823',
    -> MASTER_LOG_FILE='mysql-bin.000003',
    -> MASTER_LOG_POS=4440;
Query OK, 0 rows affected, 2 warnings (0.02 sec)

mysql> START SLAVE;
Query OK, 0 rows affected (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/posts/f5f9fa9b/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><center>
    <font face="Kristen ITC" color="#555555" size=3>💤 Khighness 💤</font><br>
</center>



<h2 id="📖概述"><a href="#📖概述" class="headerlink" title="📖概述"></a>📖概述</h2>

<blockquote>
<p>故事</p>
</blockquote>
<p>2010年，几个搞 IT 的年轻人，在美国旧金山成立了一家名叫 <code>dotCloud </code>的公司。<code>dotCloud </code>的平台即服务（Platform-as-a-Service）提供商。底层技术上，<code>dotCloud</code> 平台利用了<code>Linux</code>的 <code>LXC </code>容器技术。为了方便创建和管理这些容器，<code>dotCloud </code>基于 Google 公司推出的 <code>Go </code>语言开发了一套内部工具，之后被命名为 <code>Docker</code>。<code>Docker </code>就是这样诞生的。</p>
<p>2013年的后端技术领域已经太久没有出现让人振奋的东西了。当然<code>Docker</code>在发行之后也没用引起行业的关注。在开源之后才爆火。</p>
<p><code>Docker</code>定义容器技术标砖使得容器技术的落地变得十分简单，应用可以稳定便携的运行在容器中。</p>
<a id="more"></a>



<blockquote>
<p>特点</p>
</blockquote>
<ul>
<li><strong>更快速的应用交付和部署</strong></li>
<li><strong>更便捷的升级和扩缩容</strong></li>
<li><strong>更高效的计算资源利用</strong></li>
<li><strong>更简单的系统运维</strong></li>
</ul>
<blockquote>
<p>架构</p>
</blockquote>
<img src="/posts/f5f9fa9b/Docker%E6%9E%B6%E6%9E%84.jpg" class="" title="Docker">

<p><strong>镜像（image）：</strong> 相当于一个模板，可以通过这个模板来创建容器服务</p>
<p><strong>容器（container）：</strong> 独立运行一个或者一个组应用</p>
<p><strong>仓库（repository）：</strong> 存放镜像的地方</p>
<h2 id="🔨安装"><a href="#🔨安装" class="headerlink" title="🔨安装"></a>🔨安装</h2><blockquote>
<p>官方文档</p>
</blockquote>
<p>CentOS 7安装：<a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p>
<blockquote>
<p>卸载旧版本</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">$ sudo yum remove docker \
                  docker-client \
                  docker-client-latest \
                  docker-common \
                  docker-latest \
                  docker-latest-logrotate \
                  docker-logrotate \
                  docker-engine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>设置存储库</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">$ sudo yum install -y yum-utils<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>更换镜像源</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">$ sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>更新YUM包</p>
<p>更新YUM索引</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">$ sudo yum update
$ sudo yum makecache fast<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>安装docker引擎和容器</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">$ sudo yum install docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>启动Docker并测试hello-world</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">$ sudo systemctl start docker
$ sudo docker run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>卸载方式</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">$ sudo yum remove docker-ce docker-ce-cli containerd.io
$ sudo rm -rf /var/lib/docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>镜像加速</p>
</blockquote>
<p>1️⃣使用阿里镜像加速器</p>
<img src="/posts/f5f9fa9b/image-20201206122604398.png" class="" title="image-20201206122604398">

<p>2️⃣使用中科大或者网易镜像加速</p>
<pre class="line-numbers language-shell"><code class="language-shell"># 添加daemon.json
$ touch /etc/docker/daemon.json

# 写入内容并保存
# 科大源: https://docker.mirrors.ustc.edu.cn/
# 网易源：http://hub-mirror.c.163.com
&#123;
  "registry-mirrors": ["https://docker.mirrors.ustc.edu.cn/"]
&#125;

# 重启Dicker
$ sudo systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="🚀原理"><a href="#🚀原理" class="headerlink" title="🚀原理"></a>🚀原理</h2><blockquote>
<p>docker run的执行流程</p>
</blockquote>
<img src="Docker/image-20201203233730702.png" alt="image-20201203233730702" style="zoom:88%;" />

<blockquote>
<p>Docker的工作</p>
</blockquote>
<p>Docker是一个Client-Server结构的系统，Docker的守护进程运行在主机上。通过Socket从客户端访问。</p>
<p><strong>为什么Docker比VM快？</strong></p>
<img src="/posts/f5f9fa9b/image-20201204003500802.png" class="" title="image-20201204003500802">

<p>1、Docker有比虚拟机更少的抽象层。Docker不需要Hypervisor实现硬件资源虚拟化，运行在Docker容器上的程序直接使用的是实际物理机的硬件资源，因此在CPU、内存利用率上Docker将会在效率上有明显的优势。</p>
<p>2、Docker利用的是宿主机的内核，而不需要Guest OS。因此创建一个容器时，不需要和虚拟机一样重新加载一个操作系统内核。从而避免引寻、加载操作系统内核返回时耗时耗资源的过程，当新建一个虚拟机时，虚拟机软件需要加载Guest OS，返回新建过程是分钟级别的。而新建一个Docker容器只需要几秒钟。</p>
<p>3、Docker与VM相比：</p>
<ul>
<li>Docker灵活，VM笨重</li>
<li>Docker存储的镜像小，便于存储和传输，VM镜像庞大</li>
</ul>
<h2 id="🔰命令"><a href="#🔰命令" class="headerlink" title="🔰命令"></a>🔰命令</h2><blockquote>
<p>🌐官方文档</p>
</blockquote>
<p>Command-line reference：<a href="https://docs.docker.com/reference/">https://docs.docker.com/reference/</a></p>
<img src="/posts/f5f9fa9b/image-20201204225734966.png" class="" title="image-20201204225734966">



<h3 id="1️⃣帮助命令"><a href="#1️⃣帮助命令" class="headerlink" title="1️⃣帮助命令"></a>1️⃣帮助命令</h3><pre class="line-numbers language-shell"><code class="language-shell">$ docker version    # 显示Docker版本信息
$ docker info       # 显示Docker系统信息
$ docker --help     # Docker命令帮助信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="2️⃣镜像命令"><a href="#2️⃣镜像命令" class="headerlink" title="2️⃣镜像命令"></a>2️⃣镜像命令</h3><blockquote>
<p>查看镜像</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">$ docker images

# 可选项
-a, --all             # 列出所有镜像
    --digests         # 显示镜像的摘要信息
-q, --quiet           # 只显示镜像的ID

# 运行
[root@parak khighness]# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
hello-world         latest              bf756fb1ae65        11 months ago       13.3kB
# 解释
REPOSITORY  镜像的仓库源
TAG         镜像的标签
IMAGE ID    镜像的ID
CREATED     镜像的创建时间
SIZE        镜像的大小<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>搜索镜像</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">$ docker search <IMAGE>

# 可选项
--filter=STARS=1000 # 镜像的STARS大于1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>下载镜像</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">$ docker pull <IMAGE>
$ docker pull .io/library/mysql:latest

# 如果不写tag，默认就是最新的

# 指定版本下载
[root@parak khighness]# docker pull mysql:8.0.20
8.0.20: Pulling from library/mysql  # 分层下载
8559a31e96f4: Pull complete 
d51ce1c2e575: Pull complete 
c2344adc4858: Pull complete 
fcf3ceff18fc: Pull complete 
16da0c38dc5b: Pull complete 
b905d1797e97: Pull complete 
4b50d1c6b05c: Pull complete 
c75914a65ca2: Pull complete 
1ae8042bdd09: Pull complete 
453ac13c00a3: Pull complete 
9e680cd72f08: Pull complete 
a6b5dc864b6c: Pull complete 
Digest: sha256:8b7b328a7ff6de46ef96bcf83af048cb00a1c86282bfca0cb119c84568b4caf6
Status: Downloaded newer image for mysql:8.0.20
docker.io/library/mysql:8.0.20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>删除镜像</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell"># 通过镜像ID删除
$ docker rmi -f <IMAGE ID> ...
# 删除所有镜像
$ docker rmi -f $(docker images -aq)0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="3️⃣容器命令"><a href="#3️⃣容器命令" class="headerlink" title="3️⃣容器命令"></a>3️⃣容器命令</h3><blockquote>
<p>下载一个CentOS镜像来测试学(套)习(娃)</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">[root@parak khighness]# docker pull centos
Using default tag: latest
latest: Pulling from library/centos
3c72a8ed6814: Pull complete 
Digest: sha256:76d24f3ba3317fa945743bb3746fbaf3a0b752f10b10376960de01da70685fbd
Status: Downloaded newer image for centos:latest
docker.io/library/centos:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>新建容器并启动</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">$ docker run [可选参数] <IMAGE>

# 参数说明
--name="NAME"   容器名字，用于区分容器
-d              后台方式运行
-it             使用交互方式运行，进如容器查看内容
-p              指定容器端口  -p 8080:8080
    -p ip:主机端口:容器端口
    -p 主机端口:容器端口
    -p 容器端口

# 测试，启动并进入容器
[root@parak khighness]# docker run -it centos /bin/bash
[root@e4efa1c507b8 /]# ls
bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
# 从容器中退回主机
[root@e4efa1c507b8 /]# exit
exit
[root@parak khighness]# ls
公共  模板  视频  图片  文档  下载  音乐  桌面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>查看容器</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">$ docker ps  # 显示所有正在运行的容器
-a           # 显示所有正在运行的容器+历史运行过的容器
-n=?         # 显示最近创建的n个容器
-q           # 只显示容器的编号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>退出容器</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">$ exit        <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>删除容器</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">$ docker rm <Container ID/NAME>    # 删除指定的容器，不能删除只在运行的容器
$ docker rm -f $(docker ps -aq)    # 删除所有的容器
$ docker ps -a -q|xargs docker rm  # 删除所有的容器 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>容器操作</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">$ docker start   <Container ID/NAME>  # 启动容器 
$ docker restart <Container ID/NAME>  # 重启容器
$ docker stop    <Container ID/NAME>  # 停止当前正在运行的容器
$ docker kill    <Container ID/NAME>  # 强制停止当前容器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>查看日志</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">$ docker logs -tf --tail <n> <Container ID/NAME> # 显示指定行数的日志<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>查看容器中进程信息</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">$ docker top <Container ID/NAME><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>查看镜像的元数据</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">$ docker inspect<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>进入当前正在运行的容器</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">$ docker exec -it <Container ID> bashShell  
# 进入容器后开启一个新的终端，可以在里面操作；
# exec之后不会终结当前容器进程

$ docker attach <Container ID>              
# 进入容器中正在执行的终端，不会启动新的进程
# exec之后终结当前容器进程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>从容器拷贝新的东西到主机</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell"># 开启CentOS容器
[root@parak khighness]# docker start b9ace468ea7d
b9ace468ea7d
# 进入CentOS容器
[root@parak khighness]# docker attach b9ace468ea7d
# 创建文件夹和文件
[root@b9ace468ea7d /]# cd home/
[root@b9ace468ea7d home]# mkdir document 
[root@b9ace468ea7d home]# vi K1.java
# 退出容器
[root@b9ace468ea7d document]# exit
exit
# 将容器文件复制到主机上
[root@parak khighness]# docker cp b9ace468ea7d:/home/document/K1.java document/
[root@parak khighness]# cd document/
[root@parak document]# ll
总用量 4
-rw-r--r--. 1 root root 186 12月  5 11:33 K1.java<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="🔱练习"><a href="#🔱练习" class="headerlink" title="🔱练习"></a>🔱练习</h2><h3 id="🌠-安装Nginx"><a href="#🌠-安装Nginx" class="headerlink" title="🌠 安装Nginx"></a>🌠 安装Nginx</h3><pre class="line-numbers language-shell"><code class="language-shell"># 搜索镜像
[root@parak khighness]# docker search nginx
NAME                               DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED
nginx                              Official build of Nginx.                        14063               [OK]                
jwilder/nginx-proxy                Automated Nginx reverse proxy for docker con…   1912                                    [OK]
richarvey/nginx-php-fpm            Container running Nginx + PHP-FPM capable of…   795                                     [OK]
linuxserver/nginx                  An Nginx container, brought to you by LinuxS…   131                                     
jc21/nginx-proxy-manager           Docker container for managing Nginx proxy ho…   115                                     
tiangolo/nginx-rtmp                Docker image with Nginx using the nginx-rtmp…   105                                     [OK]
bitnami/nginx                      Bitnami nginx Docker Image                      90                                      [OK]
alfg/nginx-rtmp                    NGINX, nginx-rtmp-module and FFmpeg from sou…   80                                      [OK]
jlesage/nginx-proxy-manager        Docker container for Nginx Proxy Manager        72                                      [OK]
nginxdemos/hello                   NGINX webserver that serves a simple page co…   63                                      [OK]
nginx/nginx-ingress                NGINX Ingress Controller for Kubernetes         45                                      
privatebin/nginx-fpm-alpine        PrivateBin running on an Nginx, php-fpm & Al…   42                                      [OK]
nginxinc/nginx-unprivileged        Unprivileged NGINX Dockerfiles                  21                                      
schmunk42/nginx-redirect           A very simple container to redirect HTTP tra…   19                                      [OK]
nginx/nginx-prometheus-exporter    NGINX Prometheus Exporter                       15                                      
centos/nginx-112-centos7           Platform for running nginx 1.12 or building …   15                                      
staticfloat/nginx-certbot          Opinionated setup for automatic TLS certs lo…   14                                      [OK]
raulr/nginx-wordpress              Nginx front-end for the official wordpress:f…   13                                      [OK]
centos/nginx-18-centos7            Platform for running nginx 1.8 or building n…   13                                      
mailu/nginx                        Mailu nginx frontend                            8                                       [OK]
bitwarden/nginx                    The Bitwarden nginx web server acting as a r…   7                                       
flashspys/nginx-static             Super Lightweight Nginx Image                   7                                       [OK]
bitnami/nginx-ingress-controller   Bitnami Docker Image for NGINX Ingress Contr…   6                                       [OK]
wodby/nginx                        Generic nginx                                   1                                       [OK]
ansibleplaybookbundle/nginx-apb    An APB to deploy NGINX                          1                                       [OK]
# 下载镜像
[root@parak khighness]# docker pull nginx
Using default tag: latest
latest: Pulling from library/nginx
852e50cd189d: Pull complete 
571d7e852307: Pull complete 
addb10abd9cb: Pull complete 
d20aa7ccdb77: Pull complete 
8b03f1e11359: Pull complete 
Digest: sha256:6b1daa9462046581ac15be20277a7c75476283f969cb3a61c8725ec38d3b01c3
Status: Downloaded newer image for nginx:latest
docker.io/library/nginx:latest
# 查看镜像
[root@parak khighness]# docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
nginx               latest              bc9a0695f571        10 days ago         133MB
centos              latest              0d120b6ccaa8        3 months ago        215MB
mysql               8.0.20              be0dbf01a0f3        5 months ago        541MB
hello-world         latest              bf756fb1ae65        11 months ago       13.3kB
# 后台启动80端口nginx，对外开放3355端口
[root@parak khighness]# docker run -d --name nginx1 -p 3355:80 nginx 
b6072408f44cd78594f01c95bc63da6baf911f74d62bf232ec42c1cd8b08b4d0
[root@parak khighness]# docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES
b6072408f44c        nginx               "/docker-entrypoint.…"   6 seconds ago       Up 4 seconds        0.0.0.0:3355->80/tcp   nginx1
# 测试，可以用ip:3355在浏览器访问
[root@parak khighness]# curl localhost:3355
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
    body &#123;
        width: 35em;
        margin: 0 auto;
        font-family: Tahoma, Verdana, Arial, sans-serif;
    &#125;
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="🌠-安装Tomcat"><a href="#🌠-安装Tomcat" class="headerlink" title="🌠 安装Tomcat"></a>🌠 安装Tomcat</h3><pre class="line-numbers language-shell"><code class="language-shell">[root@parak khighness]# docker pull tomcat:9.0
9.0: Pulling from library/tomcat
756975cb9c7e: Pull complete 
d77915b4e630: Pull complete 
5f37a0a41b6b: Pull complete 
96b2c1e36db5: Pull complete 
27a2d52b526e: Pull complete 
a867dba77389: Pull complete 
0939c055fb79: Pull complete 
0b0694ce0ae2: Pull complete 
81a5f8099e05: Pull complete 
c3d7917d545e: Pull complete 
Digest: sha256:a319b10d8729817c7ce0bcc2343a6f97711c7870395019340d96b6aafd6ccbea
Status: Downloaded newer image for tomcat:9.0
docker.io/library/tomcat:9.0

[root@parak khighness]# docker run -d -p 3355:8080 --name tomcat1 tomcat
48c7de09007af158b13a9bef1f2d2b77bed0c4bc2f93a4887eac427911118a9b
[root@parak khighness]# docker exec -it tomcat1 /bin/bash
root@48c7de09007a:/usr/local/tomcat# ls -al
total 128
drwxr-xr-x. 1 root root    30 Nov 19 06:16 .
drwxr-xr-x. 1 root root    20 Nov 19 06:12 ..
-rw-r--r--. 1 root root 18982 Nov 12 15:41 BUILDING.txt
-rw-r--r--. 1 root root  5409 Nov 12 15:41 CONTRIBUTING.md
-rw-r--r--. 1 root root 57092 Nov 12 15:41 LICENSE
-rw-r--r--. 1 root root  2333 Nov 12 15:41 NOTICE
-rw-r--r--. 1 root root  3257 Nov 12 15:41 README.md
-rw-r--r--. 1 root root  6898 Nov 12 15:41 RELEASE-NOTES
-rw-r--r--. 1 root root 16507 Nov 12 15:41 RUNNING.txt
drwxr-xr-x. 2 root root  4096 Nov 19 06:16 bin
drwxr-xr-x. 1 root root    22 Dec  5 13:15 conf
drwxr-xr-x. 2 root root  4096 Nov 19 06:16 lib
drwxrwxrwx. 1 root root   177 Dec  5 13:15 logs
drwxr-xr-x. 2 root root   134 Nov 19 06:16 native-jni-lib
drwxrwxrwx. 2 root root    30 Nov 19 06:16 temp
drwxr-xr-x. 2 root root     6 Nov 19 06:16 webapps
drwxr-xr-x. 7 root root    81 Nov 12 15:38 webapps.dist
drwxrwxrwx. 2 root root     6 Nov 12 15:35 work
# 可以发现webapps目录为空
root@48c7de09007a:/usr/local/tomcat# cd webapps
root@48c7de09007a:/usr/local/tomcat/webapps# ls -l
total 0

# 将webapps.list目录下的内容拷贝到webapps下，再用浏览器测试访问
root@48c7de09007a:/usr/local/tomcat/webapps# cd ..
root@48c7de09007a:/usr/local/tomcat# cd webapps.dist/
root@48c7de09007a:/usr/local/tomcat/webapps.dist# ls
ROOT  docs  examples  host-manager  manager
root@48c7de09007a:/usr/local/tomcat/webapps.dist# cd ..
root@48c7de09007a:/usr/local/tomcat# cp -r webapps.dist/* webapps/
root@48c7de09007a:/usr/local/tomcat# cd webapps
root@48c7de09007a:/usr/local/tomcat/webapps# ls
ROOT  docs  examples  host-manager  manager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>测试访问 <a href="http://192.168.117.155:3355/">http://192.168.117.155:3355/</a></p>
</blockquote>
<img src="/posts/f5f9fa9b/image-20201205214537503.png" class="" title="image-20201205214537503">



<h3 id="🌠安装es-kibana"><a href="#🌠安装es-kibana" class="headerlink" title="🌠安装es + kibana"></a>🌠安装es + kibana</h3><pre class="line-numbers language-shell"><code class="language-shell"># --net somenetwork 网络配置
$ docker run -d --name es1 -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" elasticsearch:7.6.2
# 查看主机状态
$ doucker stats

# 下载并运行ES
[root@parak khighness]#  docker run -d --name es1 -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" elasticsearch:7.6.2
Unable to find image 'elasticsearch:7.6.2' locally
7.6.2: Pulling from library/elasticsearch
ab5ef0e58194: Pull complete 
c4d1ca5c8a25: Pull complete 
941a3cc8e7b8: Pull complete 
43ec483d9618: Pull complete 
c486fd200684: Pull complete 
1b960df074b2: Pull complete 
1719d48d6823: Pull complete 
Digest: sha256:1b09dbd93085a1e7bca34830e77d2981521a7210e11f11eda997add1c12711fa
Status: Downloaded newer image for elasticsearch:7.6.2
51441d9abfb966c4baa0402ceb99e702f58ec68cd427710a2b8c8043983412e9
# 查看主机状态
[root@parak khighness]# docker stats
CONTAINER ID    NAME   CPU %   MEM USAGE/LIMIT  MEM %     NET I/O    BLOCK I/O      PIDS
51441d9abfb9    es1   42.74%  495.6MiB/972.4MiB 50.97%    656B/0B   4.76GB/629MB     46

# 停止es1
$ docker stop es1
# 删除es1
$ docker rm es1

# 限制内存，启动ES
$ docker run -d --name es1 -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" -e ES_JAVA_OPTS="-Xms64m -Xmx512m" elasticsearch:7.6.2

# 重新启动es1
[root@parak khighness]# docker run -d --name es1 -p 9200:9200 -p 9300:9300 -e "discovery.type=single-node" -e ES_JAVA_OPTS="-Xms64m -Xmx512m" elasticsearch:7.6.2
ca4494f52e5642d5992c49816b636b1858f2e2f5c1aaf38621c76001262e8e4d
# 再次查看状态
[root@parak khighness]# docker stats
CONTAINER ID    NAME   CPU %   MEM USAGE/LIMIT   MEM %     NET I/O   BLOCK I/O       PIDS
ca4494f52e56    es1    0.68%   357.5MiB/972.4MiB 36.77%    737B/0B   476MB/1.78MB     45
# 测试访问
[root@parak khighness]# curl localhost:9200
&#123;
  "name" : "ca4494f52e56",
  "cluster_name" : "docker-cluster",
  "cluster_uuid" : "aDKZlZW_T7Ss3Dr0CXZQlQ",
  "version" : &#123;
    "number" : "7.6.2",
    "build_flavor" : "default",
    "build_type" : "docker",
    "build_hash" : "ef48eb35cf30adf4db14086e8aabd07ef6fb113f",
    "build_date" : "2020-03-26T06:34:37.794943Z",
    "build_snapshot" : false,
    "lucene_version" : "8.4.0",
    "minimum_wire_compatibility_version" : "6.8.0",
    "minimum_index_compatibility_version" : "6.0.0-beta1"
  &#125;,
  "tagline" : "You Know, for Search"
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="📈可视化"><a href="#📈可视化" class="headerlink" title="📈可视化"></a>📈可视化</h2><p>Y1S1可视化面板的前端写的真好看，我爱了。</p>
<pre class="line-numbers language-shell"><code class="language-shell"># 安装运行
$ docker run -d -p 8088:9000 --name=pt --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>访问测试 <a href="http://192.168.117.155:8088/">http://192.168.117.155:8088/</a></p>
</blockquote>
<img src="Docker/image-20201205232646075.png" alt="image-20201205232646075"  />

<img src="Docker/image-20201206105337297.png" alt="image-20201206105337297"  />





<h2 id="📑DockerFile"><a href="#📑DockerFile" class="headerlink" title="📑DockerFile"></a>📑DockerFile</h2><p>DockerFile就是用来构建docker镜像的构建文件-命令脚本。</p>
<blockquote>
<p>命令</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">描述</th>
<th align="center">理解</th>
</tr>
</thead>
<tbody><tr>
<td align="center">FROM</td>
<td align="center">指定基础镜像</td>
<td align="center">公司的父公司</td>
</tr>
<tr>
<td align="center">MAINTAINER</td>
<td align="center">指定维护者信息</td>
<td align="center">公司注册信息</td>
</tr>
<tr>
<td align="center">RUN</td>
<td align="center">把命令前面加上RUN即可</td>
<td align="center">公司注册流程</td>
</tr>
<tr>
<td align="center">ADD</td>
<td align="center">COPY文件，会自动解压</td>
<td align="center">公司注册资金</td>
</tr>
<tr>
<td align="center">WORKDIR</td>
<td align="center">设置当前工作目录</td>
<td align="center">公司大楼仓库</td>
</tr>
<tr>
<td align="center">VOLUMN</td>
<td align="center">挂载主机目录</td>
<td align="center">公司的主仓库</td>
</tr>
<tr>
<td align="center">EXPOSE</td>
<td align="center">指定对外端口</td>
<td align="center">公司开放大门</td>
</tr>
<tr>
<td align="center">RUN</td>
<td align="center">进程要一直运行下去</td>
<td align="center">公司永不倒闭</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CMD</td>
<td align="center">指定这容器启动的时候要运行的命令只有最后一个会生效，可被替代。</td>
</tr>
<tr>
<td align="center">ENTRYPOINT</td>
<td align="center">指定这个容器启动的时候要运行的命令，可以追加命令。</td>
</tr>
<tr>
<td align="center">ONBUILD</td>
<td align="center">当构建一个被继承DockerFile这就会运行ONBUILD指令。触发指令.</td>
</tr>
<tr>
<td align="center">COPY</td>
<td align="center">类似ADD，将文件拷贝到镜像中。</td>
</tr>
<tr>
<td align="center">ENV</td>
<td align="center">构建的时候设置环境变量。</td>
</tr>
</tbody></table>
<blockquote>
<p>实例1-测试</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">[root@parak home]# mkdir volume
[root@parak home]# cd volume/
[root@parak volume]# vim dockerfile1
[root@parak volume]# cat dockerfile1 
FROM centos
VOLUME ["volume01","volume02"]
CMD echo "---end---"
CMD /bin/bash
[root@parak volume]# docker build -f /home/volume/dockerfile1 -t khighness/centos:1.0 .
Sending build context to Docker daemon  2.048kB
Step 1/4 : FROM centos
 ---> 0d120b6ccaa8
Step 2/4 : VOLUME ["volume01","volume02"]
 ---> Running in 79dc7b449286
Removing intermediate container 79dc7b449286
 ---> 9a6608557c9a
Step 3/4 : CMD echo "---end---"
 ---> Running in 8b8c40056f99
Removing intermediate container 8b8c40056f99
 ---> 2158b18dedff
Step 4/4 : CMD /bin/bash
 ---> Running in 9d76c3598d69
Removing intermediate container 9d76c3598d69
 ---> 240a84cdfbef
Successfully built 240a84cdfbef
Successfully tagged khighness/centos:1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>实例2-构建自己的centos</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell"># 1、编写DockerFile文件
[root@parak dockerfile]# vim mydockerfile-centos
[root@parak dockerfile]# cat mydockerfile-centos 
FROM centos
MAINTAINER khighness<1823676372@qq.com>

ENV MYPATH /usr/local
WORKDIR $MYPATH 

RUN yum -y install vim
RUN yum -y install net-tools

EXPOSE 80

CMD echo $MYPATH
CMD echo "---end---"
CMD /bin/bash

# 2、通过DockerFile构建镜像
[root@parak dockerfile]# docker build -f mydockerfile-centos  -t mycentos:1.0 .
Sending build context to Docker daemon  2.048kB
Step 1/10 : FROM centos
 ---> 0d120b6ccaa8
Step 2/10 : MAINTAINER khighness<1823676372@qq.com>
 ---> Running in 024da1b1d4cc
Removing intermediate container 024da1b1d4cc
 ---> 6c9b636504d2
Step 3/10 : ENV MYPATH /usr/local
 ---> Running in 4046d4e257ac
Removing intermediate container 4046d4e257ac
 ---> a5710fdc760e
Step 4/10 : WORKDIR $MYPATH
 ---> Running in 252416d49e94
Removing intermediate container 252416d49e94
 ---> fdbae7da4ca4
Step 5/10 : RUN yum -y install vim
 ---> Running in 9eb786294022
CentOS-8 - AppStream                            288 kB/s | 6.2 MB     00:22    
CentOS-8 - Base                                 703 kB/s | 2.3 MB     00:03    
CentOS-8 - Extras                               1.3 kB/s | 8.1 kB     00:06    
Dependencies resolved.
================================================================================
 Package             Arch        Version                   Repository      Size
================================================================================
Installing:
 vim-enhanced        x86_64      2:8.0.1763-15.el8         AppStream      1.4 M
Installing dependencies:
 gpm-libs            x86_64      1.20.7-15.el8             AppStream       39 k
 vim-common          x86_64      2:8.0.1763-15.el8         AppStream      6.3 M
 vim-filesystem      noarch      2:8.0.1763-15.el8         AppStream       48 k
 which               x86_64      2.21-12.el8               BaseOS          49 k

Transaction Summary
================================================================================
Install  5 Packages

Total download size: 7.8 M
Installed size: 30 M
Downloading Packages:
(1/5): gpm-libs-1.20.7-15.el8.x86_64.rpm        340 kB/s |  39 kB     00:00    
(2/5): vim-filesystem-8.0.1763-15.el8.noarch.rp 664 kB/s |  48 kB     00:00    
(3/5): which-2.21-12.el8.x86_64.rpm             315 kB/s |  49 kB     00:00    
(4/5): vim-enhanced-8.0.1763-15.el8.x86_64.rpm  543 kB/s | 1.4 MB     00:02    
(5/5): vim-common-8.0.1763-15.el8.x86_64.rpm    387 kB/s | 6.3 MB     00:16    
--------------------------------------------------------------------------------
Total                                           448 kB/s | 7.8 MB     00:17     
warning: /var/cache/dnf/AppStream-02e86d1c976ab532/packages/gpm-libs-1.20.7-15.el8.x86_64.rpm: Header V3 RSA/SHA256 Signature, key ID 8483c65d: NOKEY
CentOS-8 - AppStream                            1.6 MB/s | 1.6 kB     00:00    
Importing GPG key 0x8483C65D:
 Userid     : "CentOS (CentOS Official Signing Key) <security@centos.org>"
 Fingerprint: 99DB 70FA E1D7 CE22 7FB6 4882 05B5 55B3 8483 C65D
 From       : /etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial
Key imported successfully
Running transaction check
Transaction check succeeded.
Running transaction test
Transaction test succeeded.
Running transaction
  Preparing        :                                                        1/1 
  Installing       : which-2.21-12.el8.x86_64                               1/5 
  Installing       : vim-filesystem-2:8.0.1763-15.el8.noarch                2/5 
  Installing       : vim-common-2:8.0.1763-15.el8.x86_64                    3/5 
  Installing       : gpm-libs-1.20.7-15.el8.x86_64                          4/5 
  Running scriptlet: gpm-libs-1.20.7-15.el8.x86_64                          4/5 
  Installing       : vim-enhanced-2:8.0.1763-15.el8.x86_64                  5/5 
  Running scriptlet: vim-enhanced-2:8.0.1763-15.el8.x86_64                  5/5 
  Running scriptlet: vim-common-2:8.0.1763-15.el8.x86_64                    5/5 
  Verifying        : gpm-libs-1.20.7-15.el8.x86_64                          1/5 
  Verifying        : vim-common-2:8.0.1763-15.el8.x86_64                    2/5 
  Verifying        : vim-enhanced-2:8.0.1763-15.el8.x86_64                  3/5 
  Verifying        : vim-filesystem-2:8.0.1763-15.el8.noarch                4/5 
  Verifying        : which-2.21-12.el8.x86_64                               5/5 

Installed:
  gpm-libs-1.20.7-15.el8.x86_64         vim-common-2:8.0.1763-15.el8.x86_64    
  vim-enhanced-2:8.0.1763-15.el8.x86_64 vim-filesystem-2:8.0.1763-15.el8.noarch
  which-2.21-12.el8.x86_64             

Complete!
Removing intermediate container 9eb786294022
 ---> 491907dac3e2
Step 6/10 : RUN yum -y install net-tools
 ---> Running in 3a13d71952e5
Last metadata expiration check: 0:00:24 ago on Mon Dec  7 11:45:38 2020.
Dependencies resolved.
================================================================================
 Package         Architecture Version                        Repository    Size
================================================================================
Installing:
 net-tools       x86_64       2.0-0.52.20160912git.el8       BaseOS       322 k

Transaction Summary
================================================================================
Install  1 Package

Total download size: 322 k
Installed size: 942 k
Downloading Packages:
net-tools-2.0-0.52.20160912git.el8.x86_64.rpm   1.0 MB/s | 322 kB     00:00    
--------------------------------------------------------------------------------
Total                                           141 kB/s | 322 kB     00:02     
Running transaction check
Transaction check succeeded.
Running transaction test
Transaction test succeeded.
Running transaction
  Preparing        :                                                        1/1 
  Installing       : net-tools-2.0-0.52.20160912git.el8.x86_64              1/1 
  Running scriptlet: net-tools-2.0-0.52.20160912git.el8.x86_64              1/1 
  Verifying        : net-tools-2.0-0.52.20160912git.el8.x86_64              1/1 

Installed:
  net-tools-2.0-0.52.20160912git.el8.x86_64                                     

Complete!
Removing intermediate container 3a13d71952e5
 ---> 0d095f331d4a
Step 7/10 : EXPOSE 80
 ---> Running in 66d8aceea20c
Removing intermediate container 66d8aceea20c
 ---> a86402c5f9b7
Step 8/10 : CMD echo $MYPATH
 ---> Running in b6af3ea8ff6a
Removing intermediate container b6af3ea8ff6a
 ---> 17533352607f
Step 9/10 : CMD echo "---end---"
 ---> Running in f015d24c9277
Removing intermediate container f015d24c9277
 ---> cf7d78851a04
Step 10/10 : CMD /bin/bash
 ---> Running in d0f70eaa39ec
Removing intermediate container d0f70eaa39ec
 ---> d59930f07e43
Successfully built d59930f07e43
Successfully tagged mycentos:1.0


# 3、测试运行，官方的centos镜像中是没有网络命令和VIM命令的，而自己构建的centos中已经有
[root@parak dockerfile]# docker run -it --name=mycen mycentos:1.0 
[root@43b0b7eb76d8 local]# pwd
/usr/local
[root@43b0b7eb76d8 local]# vim test
[root@43b0b7eb76d8 local]# cat test 
Khighness
[root@43b0b7eb76d8 local]# ifconfig
eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 172.17.0.4  netmask 255.255.0.0  broadcast 172.17.255.255
        ether 02:42:ac:11:00:04  txqueuelen 0  (Ethernet)
        RX packets 8  bytes 656 (656.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0    
[root@43b0b7eb76d8 local]# exit
exit

# 4、查看镜像的变更历史
[root@parak dockerfile]# docker history mycentos:1.0 
IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT
d59930f07e43        23 minutes ago      /bin/sh -c #(nop)  CMD ["/bin/sh" "-c" "/bin…   0B          
cf7d78851a04        23 minutes ago      /bin/sh -c #(nop)  CMD ["/bin/sh" "-c" "echo…   0B               
17533352607f        23 minutes ago      /bin/sh -c #(nop)  CMD ["/bin/sh" "-c" "echo…   0B                  
a86402c5f9b7        23 minutes ago      /bin/sh -c #(nop)  EXPOSE 80                    0B                  
0d095f331d4a        23 minutes ago      /bin/sh -c yum -y install net-tools             23.2MB              
491907dac3e2        23 minutes ago      /bin/sh -c yum -y install vim                   57.7MB              
fdbae7da4ca4        24 minutes ago      /bin/sh -c #(nop) WORKDIR /usr/local            0B                  
a5710fdc760e        24 minutes ago      /bin/sh -c #(nop)  ENV MYPATH=/usr/local        0B                  
6c9b636504d2        24 minutes ago      /bin/sh -c #(nop)  MAINTAINER khighness<1823…   0B                  
0d120b6ccaa8        3 months ago        /bin/sh -c #(nop)  CMD ["/bin/bash"]            0B                  
<missing>           3 months ago        /bin/sh -c #(nop)  LABEL org.label-schema.sc…   0B                  
<missing>           3 months ago        /bin/sh -c #(nop) ADD file:538afc0c5c964ce0d…   215MB         <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>CMD和ENTRYPOINT的区别</p>
</blockquote>
<p><strong>测试CMD</strong></p>
<pre class="line-numbers language-shell"><code class="language-shell"># 编写测试CMD的dockerfile
[root@parak dockerfile]# vim dockerfile-cmd-test1
# 内容就是一个CMD命令
[root@parak dockerfile]# cat dockerfile-cmd-test1 
FROM centos
CMD ["ls","-a"]
# 构建镜像
[root@parak dockerfile]# docker build -f dockerfile-cmd-test1 -t cmdtest .
Sending build context to Docker daemon  3.072kB
Step 1/2 : FROM centos
 ---> 0d120b6ccaa8
Step 2/2 : CMD ["ls","-a"]
 ---> Running in e4df49ad7ca4
Removing intermediate container e4df49ad7ca4
 ---> 4be395747805
Successfully built 4be395747805
Successfully tagged cmdtest:latest
# 运行镜像就相当于运行CMD命令：ls -a
[root@parak dockerfile]# docker run cmdtest
.
..
.dockerenv
bin
dev
etc
home
lib
lib64
lost+found
media
mnt
opt
proc
root
run
sbin
srv
sys
tmp
usr
var
# 追加命令-l，即ls -al
[root@parak dockerfile]# docker run cmdtest -l
docker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused "exec: \"-l\": executable file not found in $PATH": unknown.

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>测试ENTRYPOINT</strong></p>
<pre class="line-numbers language-shell"><code class="language-shell"># 编写测试ENTRYPOINT的dockerfile
[root@parak dockerfile]# vim dockerfile-entrypoint-test1
# 内容就是一个ENTRYPOINT命令
[root@parak dockerfile]# cat dockerfile-entrypoint-test1 
FROM centos
ENTRYPOINT ["ls", "-a"]
# 构建镜像
[root@parak dockerfile]# docker build -f dockerfile-entrypoint-test1 -t entrypointtest .
Sending build context to Docker daemon  4.096kB
Step 1/2 : FROM centos
 ---> 0d120b6ccaa8
Step 2/2 : ENTRYPOINT ["ls", "-a"]
 ---> Running in 0aa9b4c97293
Removing intermediate container 0aa9b4c97293
 ---> 472d86e826d8
Successfully built 472d86e826d8
Successfully tagged entrypointtest:latest
# 运行镜像
[root@parak dockerfile]# docker run entrypointtest
.
..
.dockerenv
bin
dev
etc
home
lib
lib64
lost+found
media
mnt
opt
proc
root
run
sbin
srv
sys
tmp
usr
var
# 追击命令-l，即ls -al
[root@parak dockerfile]# docker run entrypointtest -l
total 0
drwxr-xr-x.   1 root root   6 Dec  7 12:27 .
drwxr-xr-x.   1 root root   6 Dec  7 12:27 ..
-rwxr-xr-x.   1 root root   0 Dec  7 12:27 .dockerenv
lrwxrwxrwx.   1 root root   7 May 11  2019 bin -> usr/bin
drwxr-xr-x.   5 root root 340 Dec  7 12:27 dev
drwxr-xr-x.   1 root root  66 Dec  7 12:27 etc
drwxr-xr-x.   2 root root   6 May 11  2019 home
lrwxrwxrwx.   1 root root   7 May 11  2019 lib -> usr/lib
lrwxrwxrwx.   1 root root   9 May 11  2019 lib64 -> usr/lib64
drwx------.   2 root root   6 Aug  9 21:40 lost+found
drwxr-xr-x.   2 root root   6 May 11  2019 media
drwxr-xr-x.   2 root root   6 May 11  2019 mnt
drwxr-xr-x.   2 root root   6 May 11  2019 opt
dr-xr-xr-x. 259 root root   0 Dec  7 12:27 proc
dr-xr-x---.   2 root root 162 Aug  9 21:40 root
drwxr-xr-x.  11 root root 163 Aug  9 21:40 run
lrwxrwxrwx.   1 root root   8 May 11  2019 sbin -> usr/sbin
drwxr-xr-x.   2 root root   6 May 11  2019 srv
dr-xr-xr-x.  13 root root   0 Dec  6 08:24 sys
drwxrwxrwt.   7 root root 145 Aug  9 21:40 tmp
drwxr-xr-x.  12 root root 144 Aug  9 21:40 usr
drwxr-xr-x.  20 root root 262 Aug  9 21:40 var<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>实例3-构建自己的tomcat</p>
</blockquote>
<h2 id="🔍镜像"><a href="#🔍镜像" class="headerlink" title="🔍镜像"></a>🔍镜像</h2><blockquote>
<p>概念</p>
</blockquote>
<p>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p>
<blockquote>
<p>UnionFS(联合文件系统)</p>
</blockquote>
<p>UnionFS: 联合文件系统是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(Unite several directions into a single virtual file system)。Union文件系统是Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像(没有父镜像)，可以制作各种具体的应用镜像。</p>
<p>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p>
<blockquote>
<p>Docker镜像加载原理</p>
</blockquote>
<p>Docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。</p>
<p>bootfs(boot file system)主要包含bootloader和kernel，bootloader主要是引导加载kernel，Linux刚启动时会在家bootfs文件系统，在Docker镜像的最底层是bootfs。这一层与我们典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存和使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</p>
<p>rootfs(root file system)，在bootfs之后。包含的就是典型Linux系统/dev，/proc，/bin，/etc等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu、CentOS等等。</p>
<blockquote>
<p>commit镜像</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">$ docker commit -m="<messahe>" -a="<author>" <Container ID/NAME> <Target>:<Tag>

# 例如，改装tomcat:9.0的镜像打包成自己的镜像k-tom:1.0
[root@parak khighness]# docker commit -a="Khighness" -m="Add web application" tom1 k-tom:1.0
sha256:fa4617c8771c81b890dc2a87c7be1d2b851c6ba92b053d0d1d8730b2006550c5
[root@parak khighness]# docker images
REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE
k-tom                 1.0                 fa4617c8771c        26 seconds ago      654MB
nginx                 latest              bc9a0695f571        11 days ago         133MB
tomcat                9.0                 e0bd8b34b4ea        2 weeks ago         649MB
redis                 latest              74d107221092        2 weeks ago         104MB
portainer/portainer   latest              62771b0b9b09        4 months ago        79.1MB
elasticsearch         7.6.2               f29a1ee41030        8 months ago        791MB
hello-world           latest              bf756fb1ae65        11 months ago       13.3kB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="🌀容器数据卷"><a href="#🌀容器数据卷" class="headerlink" title="🌀容器数据卷"></a>🌀容器数据卷</h2><blockquote>
<p>概念</p>
</blockquote>
<p>目录挂载，将容器内的目录挂载在CentOS上</p>
<ul>
<li>Docker容器产生的数据同步到宿主机</li>
<li>数据卷可以在容器之间共享或重用数据</li>
</ul>
<blockquote>
<p>命令行挂载</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">$ docker run -it -v -p <主机目录>:<容器目录> 

# 例如，将docker的centos容器目录/home/test与宿主centos的/home/test挂载起来
[root@parak khighness]# docker run -it --name=cen -v /home/test:/home/test centos  /bin/bash
Unable to find image 'centos:latest' locally
latest: Pulling from library/centos
3c72a8ed6814: Pull complete 
Digest: sha256:76d24f3ba3317fa945743bb3746fbaf3a0b752f10b10376960de01da70685fbd
Status: Downloaded newer image for centos:latest
[root@4410a5c86528 /]# ls
bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
[root@4410a5c86528 /]# cd home/
[root@4410a5c86528 home]# ls
test
[khighness@parak ~]$ cd /home/
[khighness@parak home]$ ls
khighness  test
[root@parak home]# docker inspect cen
# 如下是挂载信息
        "Mounts": [
            &#123;
                "Type": "bind",              # 类型：绑定
                "Source": "/home/test",      # 容器目录
                "Destination": "/home/test", # 主机目录
                "Mode": "",
                "RW": true,
                "Propagation": "rprivate"
            &#125;
        ]
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在容器的挂载目录下新建K1.java，在宿主机的挂载目录中可以直接看到</p>
<img src="/posts/f5f9fa9b/image-20201206183841366.png" class="" title="image-20201206183841366">



<blockquote>
<p>安装MySQL</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell"># 下载8.0.20版本的mysql镜像
$ docker pull mysql:8.0.20
# 启动mysql服务
# -d 后台运行
# -v 挂载配置和数据
# -e MYSQL_ROOT)PASSWORD 设置密码
$ docker run --name ksql -d -p 3306:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=KAG1823 mysql:8.0.20

# 解决windows的navicat无法连接的问题
# 进入mysql客户端
$ docker exec -it ksql  bash
# 登录mysql
$ mysql -u root -pKAG1823
# 重置密码
$ ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'KAG1823';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="🌐Docker网络"><a href="#🌐Docker网络" class="headerlink" title="🌐Docker网络"></a>🌐Docker网络</h2><blockquote>
<p>实现原理</p>
</blockquote>
<p>Docker使用Linux桥接，在宿主机虚拟一个Docker容器网桥(Docker0)，Docker启动一个容器时会根据Docker网桥的网段分配给容器一个IP地址，称为Container-IP，同时Docker网桥是每个容器的默认网关。因为在同一宿主机内的容器都接入同一网桥。这样容器之间就能够通过容器的Contain-IP直接通信。</p>
<p>Docker网桥是宿主机虚拟出来的，并不是真实存在的网络设备，外部设备是无法寻址到的，这也意味着外部设备无法通过直接Container-IP访问到容器。如果容器希望外部访问到，可以通过映射容器端口到宿主主机（端口映射），即docker run创建容器时候通过-p或者-P参数来启动，访问容器的时候就通过[宿主机IP]:[容器端口]访问容器。</p>
<blockquote>
<p>网络模式</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">模式</th>
<th align="center">配置</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Bridge模式</td>
<td align="center">-net=bridge</td>
<td align="center">默认模式</td>
</tr>
<tr>
<td align="center">Host模式</td>
<td align="center">-net=host</td>
<td align="center">容器和宿主机共享Network NameSpace</td>
</tr>
<tr>
<td align="center">Container模式</td>
<td align="center">-net=container : NAME OR ID</td>
<td align="center">容器和另外一个容器共享Network NameSpace</td>
</tr>
<tr>
<td align="center">None模式</td>
<td align="center">-net=none</td>
<td align="center">容器有独立的Network NameSpace，但并没有对其进行任何网络设置，如分配veth pair 和网桥连接，配置IP等</td>
</tr>
</tbody></table>
<h3 id="1️⃣host模式"><a href="#1️⃣host模式" class="headerlink" title="1️⃣host模式"></a>1️⃣host模式</h3><p>如果启动容器的时候使用host模式，那么这个容器将不会获得一个独立的Network NameSpace，而是和宿主机共用一个Network NameSpace。容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口。但是，容器的其他方面，如文件系统、进程列表等还是和宿主机隔离的。</p>
<p>使用host模式的容器可以直接使用宿主机的IP地址与外界通信，容器内部的服务端口也可以使用宿主机的端口，不需要进行NAT，host最大的优势就是网络性能比较好，但是docker host上已经使用的端口就不能再用了，网络的隔离性不好。</p>
<h3 id="2️⃣container模式"><a href="#2️⃣container模式" class="headerlink" title="2️⃣container模式"></a>2️⃣container模式</h3><p>这个模式指定新创建的容器和已经存在的一个容器共享一个 Network NameSpace，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过 lo 网卡设备通信。</p>
<h3 id="3️⃣none模式"><a href="#3️⃣none模式" class="headerlink" title="3️⃣none模式"></a>3️⃣none模式</h3><p>使用none模式，Docker容器拥有自己的Network NameSpace，但是，并不为Docker容器进行任何网络配置。也就是说，这个Docker容器没有网卡、IP、路由等信息。需要我们自己为Docker容器添加网卡、配置IP等。</p>
<p>这种网络模式下容器只有lo回环网络，没有其他网卡。none模式可以在容器创建时通过–network=none来指定。这种类型的网络没有办法联网，封闭的网络能很好的保证容器的安全性。</p>
<h3 id="4️⃣bridge模式"><a href="#4️⃣bridge模式" class="headerlink" title="4️⃣bridge模式"></a>4️⃣bridge模式</h3><p>当Docker进程启动时，会在主机上创建一个名为docker0的虚拟网桥，此主机上启动的Docker容器会连接到这个虚拟网桥上。虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。</p>
<p>从docker0子网中分配一个IP给容器使用，并设置docker0的IP地址为容器的默认网关。在主机上创建一对虚拟网卡veth pair设备，Docker将veth pair设备的一端放在新创建的容器中，并命名为eth0（容器的网卡），另一端放在主机中，以vethxxx这样类似的名字命名，并将这个网络设备加入到docker0网桥中。可以通过brctl show命令查看。</p>
<p>bridge模式是docker的默认网络模式，不写–net参数，就是bridge模式。使用docker run -p时，docker实际是在iptables做了DNAT规则，实现端口转发功能。可以使用iptables -t nat -vnL查看。</p>
<blockquote>
<p>–link探究</p>
</blockquote>
<p>官方已经不推荐使用，我们可以了解一下。</p>
<p>2个容器之间互相访问通信：<code>docker run &lt;container1-id/name&gt; --link &lt;container2-id/name&gt; &lt;image&gt;</code></p>
<p>使用这个命令启动容器2的时候，容器便可以ping通容器1，但是反向ping不通。</p>
<pre class="line-numbers language-shell"><code class="language-shell"># 创建容器tom1
[root@parak khighness]# docker run -d -p 3356:8080 --name tom1 tomcat:9.0 
dd615d6d2ccb9467aad8ba008ece995588680d849b9f61945b10de5c3475f671
# 使用--link创建容器2
[root@parak khighness]# docker run -d -p 3357:8081 --name tom2 --link tom1  tomcat:9.0 
b2c17969a2cb4407bb1a61a53703a38998a11db01ce516feb70e397b42af6ad3
# tom1不能ping通tom2
[root@parak khighness]# docker exec -it tom1 ping tom2
ping: tom2: Name or service not known
# tom2可以ping通tom1
[root@parak khighness]# docker exec -it tom2 ping tom1
PING tom1 (172.17.0.4) 56(84) bytes of data.
64 bytes from tom1 (172.17.0.4): icmp_seq=1 ttl=64 time=0.161 ms
64 bytes from tom1 (172.17.0.4): icmp_seq=2 ttl=64 time=0.108 ms
64 bytes from tom1 (172.17.0.4): icmp_seq=3 ttl=64 time=0.122 ms
^C
--- tom1 ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 4ms
rtt min/avg/max/mdev = 0.108/0.130/0.161/0.024 ms
# 查看tom2内部的hosts文件
[root@parak khighness]# docker exec -it tom2 cat /etc/hosts
127.0.0.1    localhost
::1    localhost ip6-localhost ip6-loopback
fe00::0    ip6-localnet
ff00::0    ip6-mcastprefix
ff02::1    ip6-allnodes
ff02::2    ip6-allrouters
172.17.0.4    tom1 dd615d6d2ccb # ==> 根源：本质就是tom2就是在本地配置了tom1的域名IP解析。
172.17.0.5    b2c17969a2cb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>自定义网络</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell"># 创建网络
[root@parak khighness]# docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet
abaebdc493149a140ee77965274885adea3882bf117c4f8e61e4034730c3b890
# 查看网络
[root@parak khighness]# docker network ls
NETWORK ID          NAME                DRIVER              SCOPE
4399361ba4a9        bridge              bridge              local
65f0ec2bfb42        host                host                local
abaebdc49314        mynet               bridge              local
feab1dfce431        none                null                local
# 详细信息
[root@parak khighness]# docker network inspect mynet 
[
    &#123;
        "Name": "mynet",
        "Id": "abaebdc493149a140ee77965274885adea3882bf117c4f8e61e4034730c3b890",
        "Created": "2020-12-10T16:12:08.563828418+08:00",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": &#123;
            "Driver": "default",
            "Options": &#123;&#125;,
            "Config": [
                &#123;
                    "Subnet": "192.168.0.0/16",
                    "Gateway": "192.168.0.1"
                &#125;
            ]
        &#125;,
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": &#123;
            "Network": ""
        &#125;,
        "ConfigOnly": false,
        "Containers": &#123;&#125;,
        "Options": &#123;&#125;,
        "Labels": &#123;&#125;
    &#125;
]
# 在mynet下启动tomcat1
[root@parak khighness]# docker run -d -it -p 8080:3355 --net mynet --name mynet-tom1 tomcat:9.0 
4d799757f01f560af7fd44d610b7fdabd1e0f66ef528bf1259f09242bddbb636
# 在mynet下启动tomcat2
[root@parak khighness]# docker run -d -it -p 8081:3356 --net mynet --name mynet-tom2 tomcat:9.0 
15c045f96d5b7b2ee2e470cb69e5b1f86511929f7ed05ed8f20db26ef4b975af
# 使用mynet-tom2 ping mynet-tom1
[root@parak khighness]# docker exec -it mynet-tom2 ping mynet-tom1
PING mynet-tom1 (192.168.0.2) 56(84) bytes of data.
64 bytes from mynet-tom1.mynet (192.168.0.2): icmp_seq=1 ttl=64 time=0.068 ms
64 bytes from mynet-tom1.mynet (192.168.0.2): icmp_seq=2 ttl=64 time=0.042 ms
64 bytes from mynet-tom1.mynet (192.168.0.2): icmp_seq=3 ttl=64 time=0.055 ms
--- mynet-tom1 ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 4ms
rtt min/avg/max/mdev = 0.042/0.055/0.068/0.010 ms
# 使用mynet-tom1 ping mynet-tom2
[root@parak khighness]# docker exec -it mynet-tom1 ping mynet-tom2
PING mynet-tom2 (192.168.0.3) 56(84) bytes of data.
64 bytes from mynet-tom2.mynet (192.168.0.3): icmp_seq=1 ttl=64 time=0.036 ms
64 bytes from mynet-tom2.mynet (192.168.0.3): icmp_seq=2 ttl=64 time=0.048 ms
64 bytes from mynet-tom2.mynet (192.168.0.3): icmp_seq=3 ttl=64 time=0.058 ms
--- mynet-tom2 ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 2ms
rtt min/avg/max/mdev = 0.036/0.047/0.058/0.010 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>自定义网络自动维护好容器的网络关系！</p>
<blockquote>
<p>网络连通</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell"># 在Docker0网络启动tomcat
[root@parak khighness]# docker run -d -it -p 8082:3357 --name tom1 tomcat:9.0 
0344f04baab2eaeaac0118dac7a93d8b2d77946636c76ed3bde804cbeda836be
# 测试tom1 ping mynet—tom1
[root@parak khighness]# docker exec tom1 ping mynet-tom1
ping: mynet-tom1: Name or service not known
# 连通mynet - tom1
[root@parak khighness]# docker network connect mynet tom1 
# 查看mynet1的详细信息
[root@parak khighness]# docker inspect mynet
[
    &#123;
        "Name": "mynet",
        "Id": "abaebdc493149a140ee77965274885adea3882bf117c4f8e61e4034730c3b890",
        "Created": "2020-12-10T16:12:08.563828418+08:00",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": &#123;
            "Driver": "default",
            "Options": &#123;&#125;,
            "Config": [
                &#123;
                    "Subnet": "192.168.0.0/16",
                    "Gateway": "192.168.0.1"
                &#125;
            ]
        &#125;,
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": &#123;
            "Network": ""
        &#125;,
        "ConfigOnly": false,
        "Containers": &#123;
            # 发现mynet将tom1放到了mynet网络下，即一个容器，两个IP
            "0344f04baab2eaeaac0118dac7a93d8b2d77946636c76ed3bde804cbeda836be": &#123;
                "Name": "tom1",
                "EndpointID": "8911ad05a9b0d7d0effbf50c82659f36b82d21e18f992359b09494073dddd969",
                "MacAddress": "02:42:c0:a8:00:04",
                "IPv4Address": "192.168.0.4/16",
                "IPv6Address": ""
            &#125;,
            "15c045f96d5b7b2ee2e470cb69e5b1f86511929f7ed05ed8f20db26ef4b975af": &#123;
                "Name": "mynet-tom2",
                "EndpointID": "907f16284e90be0d880a999b29210d1cd82adb2c79b4179eeb1d70d75130362a",
                "MacAddress": "02:42:c0:a8:00:03",
                "IPv4Address": "192.168.0.3/16",
                "IPv6Address": ""
            &#125;,
            "4d799757f01f560af7fd44d610b7fdabd1e0f66ef528bf1259f09242bddbb636": &#123;
                "Name": "mynet-tom1",
                "EndpointID": "6529ef4fc05dffe65fe875fdf15f2f4a61665c4d969767db94dd828baf88b323",
                "MacAddress": "02:42:c0:a8:00:02",
                "IPv4Address": "192.168.0.2/16",
                "IPv6Address": ""
            &#125;
        &#125;,
        "Options": &#123;&#125;,
        "Labels": &#123;&#125;
    &#125;
]
# 再次测试tom1 ping mynet—tom1
[root@parak khighness]# docker exec -it tom1 ping mynet-tom1
PING mynet-tom1 (192.168.0.2) 56(84) bytes of data.
64 bytes from mynet-tom1.mynet (192.168.0.2): icmp_seq=1 ttl=64 time=0.097 ms
64 bytes from mynet-tom1.mynet (192.168.0.2): icmp_seq=2 ttl=64 time=0.052 ms
64 bytes from mynet-tom1.mynet (192.168.0.2): icmp_seq=3 ttl=64 time=0.053 ms
--- mynet-tom1 ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 3ms
rtt min/avg/max/mdev = 0.052/0.067/0.097/0.022 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="💠Redis集群部署"><a href="#💠Redis集群部署" class="headerlink" title="💠Redis集群部署"></a>💠Redis集群部署</h2><blockquote>
<p>shell脚本</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell"># 创建网卡
docker network create redis --subnet 172.38.0.0/16

# 通过脚本创建六个redis配置
for port in $(seq 1 6); \
do \
mkdir -p /mydata/redis/node-$&#123;port&#125;/conf
touch /mydata/redis/node-$&#123;port&#125;/conf/redis.conf
cat << EOF >>/mydata/redis/node-$&#123;port&#125;/conf/redis.conf
port 6379
bind 0.0.0.0
cluster-enabled yes
cluster-config-file nodes.conf
cluster-node-timeout 5000
cluster-announce-ip 172.38.0.1$&#123;port&#125;
cluster-announce-port 6379
cluster-announce-bus-port 16379
appendonly yes
EOF
done

# 运行redis
for port in $(seq 1 6); \
do
docker run -p 637$&#123;port&#125;:6379 -p 1637$&#123;port&#125;:16379 --name redis-$&#123;port&#125; \
-v /mydata/redis/node-$&#123;port&#125;/data:/data \
-v /mydata/redis/node-$&#123;port&#125;/conf/redis.conf:/etc/redis/redis.conf \
-d --net redis --ip 172.38.0.1$&#123;port&#125; redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf
done

# 进入redis-1
docker exec -it redis-1 /bin/sh
# 搭建集群
redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 

# 停止集群
for port in $(seq 1 6); \
do
docker stop redis-$&#123;port&#125; 
done

# 启动集群
for port in $(seq 1 6); \
do 
docker start redis-$&#123;port&#125; 
done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="💨SpringBoot测试"><a href="#💨SpringBoot测试" class="headerlink" title="💨SpringBoot测试"></a>💨SpringBoot测试</h2><blockquote>
<p>步骤</p>
</blockquote>
<ul>
<li>构建SpringBoot项目</li>
<li>打包web应用</li>
<li>编写dockerfile</li>
<li>构建镜像</li>
<li>发布运行</li>
</ul>
<blockquote>
<p>编写Controller</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello/&amp;#123;name&amp;#125;"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"Hello, "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"\n\n"</span> <span class="token operator">+</span> <span class="token string">" -from KHighness"</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>通过maven的package打包</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">[INFO] Scanning for projects...
[INFO] 
[INFO] --------------------------< top.parak:hello >---------------------------
[INFO] Building hello 1.0-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] --- maven-resources-plugin:3.1.0:resources (default-resources) @ hello ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 0 resource
[INFO] Copying 0 resource
[INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ hello ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 2 source files to C:\Users\18236\Desktop\Recent\hello\target\classes
[INFO] --- maven-resources-plugin:3.1.0:testResources (default-testResources) @ hello ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory C:\Users\18236\Desktop\Recent\hello\src\test\resources
[INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ hello ---
[INFO] No sources to compile
[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ hello ---
[INFO] No tests to run.
[INFO] --- maven-jar-plugin:3.1.2:jar (default-jar) @ hello ---
[INFO] Building jar: C:\Users\18236\Desktop\Recent\hello\target\hello-1.0-SNAPSHOT.jar
[INFO] --- spring-boot-maven-plugin:2.2.5.RELEASE:repackage (repackage) @ hello ---
[INFO] Replacing main artifact with repackaged archive
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  5.534 s
[INFO] Finished at: 2020-12-10T17:54:11+08:00
[INFO] ------------------------------------------------------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>编写Dockerfile</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">FROM java:8

COPY *.jar /app.jar

CMD ["--server.port=8080"]

EXPOSE 8080

ENTRYPOINT ["java", "-jar", "/app.jar"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过Xftp将构建好的jar包和DockerFile发送到虚拟机</p>
<blockquote>
<p>构建镜像</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">[root@parak hello]# docker build -t hello .
Sending build context to Docker daemon   17.6MB
Step 1/5 : FROM java:8
 ---> d23bdf5b1b1b
Step 2/5 : COPY *.jar /app.jar
 ---> 34774df7a107
Step 3/5 : CMD ["--server.port=8080"]
 ---> [Warning] IPv4 forwarding is disabled. Networking will not work.
 ---> Running in 11d95474e047
Removing intermediate container 11d95474e047
 ---> e8b6fa21a3a0
Step 4/5 : EXPOSE 8080
 ---> [Warning] IPv4 forwarding is disabled. Networking will not work.
 ---> Running in 896cc7d50875
Removing intermediate container 896cc7d50875
 ---> b139242b232d
Step 5/5 : ENTRYPOINT ["java", "-jar", "/app.jar"]
 ---> [Warning] IPv4 forwarding is disabled. Networking will not work.
 ---> Running in 562f3bb605a0
Removing intermediate container 562f3bb605a0
 ---> 1d28463205d5
Successfully built 1d28463205d5
Successfully tagged hello:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>运行镜像</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">[root@parak hello]# docker run -d -it -p 8001:8080 hello
7e19b364789de18c736c51e5c84d611e7474d3a733f188220dfd7cc011e55729
[root@parak hello]# curl http://192.168.117.155:8001/hello/KKK
Hello, KKK

 -from KHighness<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="⭕相关问题"><a href="#⭕相关问题" class="headerlink" title="⭕相关问题"></a>⭕相关问题</h2><blockquote>
<p>解决问题1: WARNING: IPv4 forwarding is disabled. Networking will not work.</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">$ echo "net.ipv4.ip_forward=1" >>/usr/lib/sysctl.d/00-system.conf
$ systemctl restart network && systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>解决问题2: 使用阿里云服务器运行一个容器，外部IP不能访问</p>
</blockquote>
<p>需要在阿里云服务器配置防火墙相关端口对外开放。</p>
<p>比如跑一个开放端口为3333的springboot应用需要在阿里云服务器控制台的防火墙添加规则:</p>
<img src="/posts/f5f9fa9b/image-20201211233834182.png" class="" title="image-20201211233834182">



]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>负距离</title>
    <url>/posts/33422a09/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="负距离"><a href="#负距离" class="headerlink" title="负距离"></a>负距离</h1><img src="/posts/33422a09/bg.jpg" class="" title="bg">



<p>想是因为久了所以记不起了，想是因为空气湿了不是眼眶红了。</p>
<p>我看见凋零的枫，天空的颜色比油彩更凝重，大块白色的浮云掠过，那栋灰色的建筑闪烁香槟色的光芒，我从未怀疑过自己在梦里。</p>
<a id="more"></a>



<p>两年以来，自己是否成长，又是否改变？当初懵懂的选择，中间努力的迷茫，而今这已是一条不归路。</p>
<p>每个人的身体和意志，总有被环境的牢笼禁锢那一部分，想施展拳脚就各种Error。</p>
<p>或许人都应该做到张弛有度，速度不缓不急，自有安排妥当的节奏，该收敛的时候不逞强，该出击的时候不犹豫，该保留的时候不盲目，该竭力的时候不气短。</p>
<p>2020，惟愿信念使自己超越。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT</title>
    <url>/posts/1bb08f7a/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h1><center>
    <font face="Kristen ITC" color="#555555" size=3>💤 Khighness 💤</font><br>
</center>

<h2 id="📖官方文档"><a href="#📖官方文档" class="headerlink" title="📖官方文档"></a>📖官方文档</h2><blockquote>
<p>🌐官方文档</p>
</blockquote>
<p>👉<a href="https://jwt.io/introduction/">JWT</a></p>
<blockquote>
<p>💰JWT概述</p>
</blockquote>
<p><strong>JSON Web Token</strong>是一个开放标准（RFC 7519），它定义了一种紧凑且包含的方式，用于在各方之间安全地传输信息作为JSON对象。由于此信息是经过数字签名的，用于在各方面之间安全地传输信息作为JSON对象。由于此信息是经过数字签名地，因此可以被验证和信任。可以使用秘密（或者<strong>HMAC</strong>算法）或使用<strong>RSA</strong>或<strong>ECDSA</strong>的公钥/私钥对对JWT进行签名。</p>
<p>尽管可以对JWT进行加密以提供双方之间的保密性，但我们将重点关注已签名的令牌。签名的令牌可以验证其中包含的声明的完整性，而加密的令牌则将这些声明隐藏在其他方的面前。当使用公钥/私钥对对令牌进行签名时，签名还证明只有持有私钥的一方才是对其进行签名的一方。</p>
<a id="more"></a>



<blockquote>
<p>🔱应用场景</p>
</blockquote>
<ul>
<li>授权认证：使用JWT的最常见方案。一旦用户登录，每个后续请求将包括令牌，从而允许用户访问该令牌允许的路由、服务和资源。单点登录是当今广泛使用JWT的一项功能，因为它的开销很小并且可以在不同的域中轻松使用。</li>
<li>信息交换：JWT是在各方之间安全地传输信息的一种好方法。因为可以对JWT进行签名，例如使用公钥/私钥对。此外。由于签名是使用标头和有效负载计算的，因此还可以验证内容是否遭到篡改。</li>
</ul>
<h2 id="🚀认证流程"><a href="#🚀认证流程" class="headerlink" title="🚀认证流程"></a>🚀认证流程</h2><blockquote>
<p>⛔️session认证</p>
</blockquote>
<p>传统方式：用户第一次请求登录时候设置session，此后每次访问携带cookie。</p>
<p>问题：</p>
<ul>
<li>每个用户经过我们的应用认证之后，我们的应用都要在服务端做一次记录，以方便用户下次请求的鉴别，通常而言session都是保存在内存中，而随着用户的增多，服务端的开销会明显增大。</li>
<li>用户认证之后，服务端做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须要请求在这台服务器上，这样才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡器的能力，这也意味着限制了应用的扩展能力。</li>
<li>因为是基于cookie来进行用户识别的，cookie如何被截获，用户很容易受到跨站请求伪造的攻击。</li>
</ul>
<blockquote>
<p>🔰JWT认证</p>
</blockquote>
<img src="/posts/1bb08f7a/JWT%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B.png" class="" title="JWT认证">

<p>认证流程：</p>
<p>首先，前端通过web表单将自己的用户名和密码发送到后端的接口，这一过程一般是一个Http POST请求。</p>
<p>后端核对用户名和密码成功后，将用户的id等其他信息作为JWT payload(负载)，将其与头部分别进行Based64编码拼接后签名，形成一个JWT。形成的JWT就形同xxx.yyy.zzz的字符串。</p>
<p>后端将JWT字符串作为登陆成功的返回结果返回给前端，前端可以将返回的结果保存在localStorage上，退出登录时前端删除保存的JWT即可。</p>
<p>前端在每次请求时将JWT放入HTTP Header的Authorization位。（解决XSS和XSRF问题）</p>
<p>后端检查是否存在，如存在验证JWT的有效性。（签名是否正确，Token是否过期等）</p>
<p>验证通过后后端使用JWT中包含的用户信息进行其他逻辑操作，并返回相应结果。</p>
<p>优势：</p>
<ul>
<li>简洁，可以通过URL，POST参数或者在HTTP Header发送，因为数据量小，传输速度也很快</li>
<li>自包含：负载中包含了所有用户所需要的信息，避免了多次查询数据库</li>
<li>因为Token是JSON加密的形式保存在客户端的，所以JWT是跨语言的，原则上任何web形式都支持</li>
<li>不需要再服务端保存会话信息，特别适合用于分布式微服务</li>
</ul>
<blockquote>
<p>⛓令牌结构</p>
</blockquote>
<p>JSON Web Token以紧凑的形式由三部分组成，三部分由<code>.</code>分隔，即<code>xxxxx.yyyyy.zzzzz</code></p>
<ul>
<li><p>标头(Header)  : Base64编码，由令牌类型和签名算法组成</p>
<pre class="line-numbers language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token property">"alg"</span><span class="token operator">:</span> <span class="token string">"HS256"</span><span class="token punctuation">,</span>
    <span class="token property">"typ"</span><span class="token operator">:</span> <span class="token string">"JWT"</span>
&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>负载(Payload) : Base64编码，用于放置携带信息，不能放敏感信息</p>
<pre class="line-numbers language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"Khighness"</span>
    <span class="token property">"admin"</span><span class="token operator">:</span><span class="token boolean">true</span>
    <span class="token property">"gender"</span><span class="token operator">:</span><span class="token string">"male"</span>
&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>签名(Signature) : 对标头和负载进行签名，防止内容被篡改</p>
<pre class="line-numbers language-json"><code class="language-json">HMACSHA256(baseUrlEncode(header<span class="token punctuation">)</span><span class="token punctuation">)</span> + <span class="token string">"."</span> + base64UrlEncode(payload<span class="token punctuation">)</span>.secret<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
<h2 id="💻JWT-Demo"><a href="#💻JWT-Demo" class="headerlink" title="💻JWT-Demo"></a>💻JWT-Demo</h2><blockquote>
<p>➕添加依赖</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!-- JWT --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.auth0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>java-jwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>jwt.version<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>📑Java代码</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">generateToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Calendar calendar <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        calendar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>SECOND<span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        String token <span class="token operator">=</span> JWT<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withHeader</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span>                                     <span class="token comment" spellcheck="true">// Header</span>
                <span class="token punctuation">.</span><span class="token function">withClaim</span><span class="token punctuation">(</span><span class="token string">"userID"</span><span class="token punctuation">,</span> <span class="token number">1011</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">// Payload</span>
                <span class="token punctuation">.</span><span class="token function">withClaim</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> <span class="token string">"KHighness"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withExpiresAt</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true">// 指定令牌过期时间: 60S</span>
                <span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>Algorithm<span class="token punctuation">.</span><span class="token function">HMAC256</span><span class="token punctuation">(</span><span class="token string">"PARAK"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// Signature，设置密钥PARAK</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>验证令牌&lt;/p>
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">verifyToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        JWTVerifier jwtVerifier <span class="token operator">=</span> JWT<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span>Algorithm<span class="token punctuation">.</span><span class="token function">HMAC512</span><span class="token punctuation">(</span><span class="token string">"PARAK"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String token <span class="token operator">=</span> <span class="token string">"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MDU5NDU0ODQsInVzZXJJRCI6MTAxMSwidXNlcm5hbWUiOiJLSGlnaG5lc3MifQ.Gvwa3vu_LYogcEPFxKOgFgaH6WnTKoo-UDW977W1GAw"</span><span class="token punctuation">;</span>
        DecodedJWT verify <span class="token operator">=</span> jwtVerifier<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>verify<span class="token punctuation">.</span><span class="token function">getClaim</span><span class="token punctuation">(</span><span class="token string">"userID"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>verify<span class="token punctuation">.</span><span class="token function">getClaim</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>❗️ 常见异常</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">异常</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">TokenExpiredException</td>
<td align="center">令牌过期异常</td>
</tr>
<tr>
<td align="center">SignatureVerificationException</td>
<td align="center">签名不一致异常</td>
</tr>
<tr>
<td align="center">AlgorithmMismatchException</td>
<td align="center">加密算法不匹配异常</td>
</tr>
<tr>
<td align="center">InvalidClaimException</td>
<td align="center">失效的负载异常</td>
</tr>
</tbody></table>
<h2 id="🍃整合Springboot"><a href="#🍃整合Springboot" class="headerlink" title="🍃整合Springboot"></a>🍃整合Springboot</h2><blockquote>
<p>💬说明</p>
</blockquote>
<p>用户在第一次登陆的时候，后台生成token返回给前端存储在sessionStorage中，此后每次前端需要调用后端需要认证的接口时都把token取出来携带在http header中。后台设置拦截器，设置需要认证才能访问的接口，每次处理请求时，先从request的http header中取出token进行认证，通过后才进行相关接口处理。</p>
<blockquote>
<p>🔧封装工具类</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>JWT<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>JWTCreator<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>algorithms<span class="token punctuation">.</span>Algorithm<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>interfaces<span class="token punctuation">.</span>DecodedJWT<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Calendar<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> Project: Springboot-JWT &lt;/P>
 * &lt;p> Package: top.parak.common &lt;/p>
 * &lt;p> FileName: KKJWTUtil &lt;p>
 * &lt;p> Description: JWT工具类 &lt;p>
 * &lt;p> Created By IntelliJ IDEA &lt;/p>
 *
 * @author KHighness
 * @since 2020/11/22
 */</span>

<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KKJWTUtil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>签名的密钥[@NAME]&lt;/p>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String secret <span class="token operator">=</span> <span class="token string">"@KHIGHNESS"</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>签名的过期时间[A Week]&lt;/p>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> accessTokenExpireTime <span class="token operator">=</span> <span class="token number">604800</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>令牌颁布者身份标识[DOMAIN]&lt;/p>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String issuer <span class="token operator">=</span> <span class="token string">"parak.top"</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>生成Token&lt;/p>
     * @param chaims
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">generateToken</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> chaims<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        JWTCreator<span class="token punctuation">.</span>Builder builder <span class="token operator">=</span> JWT<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 添加负载 */</span>
        chaims<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            builder<span class="token punctuation">.</span><span class="token function">withClaim</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 设置过期时间 */</span>
        Calendar calendar <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        calendar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>SECOND<span class="token punctuation">,</span> accessTokenExpireTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">withExpiresAt</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 设置颁发者身份 */</span>
        builder<span class="token punctuation">.</span><span class="token function">withIssuer</span><span class="token punctuation">(</span>issuer<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 设置加密算法以及密钥 */</span>
        String token <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>Algorithm<span class="token punctuation">.</span><span class="token function">HMAC256</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> token<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>


    <span class="token comment" spellcheck="true">/**
     * &lt;p>解析token&lt;/p>
     * @param token
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> DecodedJWT <span class="token function">verifyToken</span><span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> JWT<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span>Algorithm<span class="token punctuation">.</span><span class="token function">HMAC256</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>用户控制器</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSON<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSONObject<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>interfaces<span class="token punctuation">.</span>DecodedJWT<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ObjectUtils<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>common<span class="token punctuation">.</span>KKCondition<span class="token punctuation">;</span>
<span class="token keyword">import</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>common<span class="token punctuation">.</span>KKDataResponse<span class="token punctuation">;</span>
<span class="token keyword">import</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>common<span class="token punctuation">.</span>KKJWTUtil<span class="token punctuation">;</span>
<span class="token keyword">import</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>User<span class="token punctuation">;</span>
<span class="token keyword">import</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>service<span class="token punctuation">.</span>UserService<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>Valid<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     用户控制层
 * &lt;/p>
 *
 * @author KHighness
 * @since 2020-11-19
 */</span>

<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@CrossOrigin</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/user"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>用户注册&lt;/p>
     * @param user
     * @return
     */</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/register"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> KKDataResponse <span class="token function">register</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        String username <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String password <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"用户注册 => [&amp;#123;&amp;#125;]"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>
        KKCondition condition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KKCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        condition<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>userService<span class="token punctuation">.</span><span class="token function">queryUserInCondition</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"用户名&amp;#123;&amp;#125;已被注册，不可重复注册"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> KKDataResponse<span class="token punctuation">.</span><span class="token function">errorResponse</span><span class="token punctuation">(</span><span class="token string">"该用户名已被注册，不可重复注册"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">saveUser</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> KKDataResponse<span class="token punctuation">.</span><span class="token function">successResponse</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">:</span> KKDataResponse<span class="token punctuation">.</span><span class="token function">errorResponse</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>用户登录&lt;/p>
     * @param loginDataJson
     * @return
     */</span>
    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> KKDataResponse <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> String loginDataJson<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        JSONObject loginData <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>loginDataJson<span class="token punctuation">)</span><span class="token punctuation">;</span>
        String username <span class="token operator">=</span> loginData<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String password <span class="token operator">=</span> loginData<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"用户登录 => [&amp;#123;&amp;#125;]"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>userService<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            response<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginState"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">/* 生成令牌 */</span>
            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> payload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            payload<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>
            String token <span class="token operator">=</span> KKJWTUtil<span class="token punctuation">.</span><span class="token function">generateToken</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
            response<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"kktoken"</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> KKDataResponse<span class="token punctuation">.</span><span class="token function">successResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            response<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginState"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            response<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"kktoken"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> KKDataResponse<span class="token punctuation">.</span><span class="token function">errorResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> KKDataResponse <span class="token function">test</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        String kktoken <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        DecodedJWT verify <span class="token operator">=</span> KKJWTUtil<span class="token punctuation">.</span><span class="token function">verifyToken</span><span class="token punctuation">(</span>kktoken<span class="token punctuation">)</span><span class="token punctuation">;</span>
        String username <span class="token operator">=</span> verify<span class="token punctuation">.</span><span class="token function">getClaim</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"请求用户 => [&amp;#123;&amp;#125;]"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> KKDataResponse<span class="token punctuation">.</span><span class="token function">successResponse</span><span class="token punctuation">(</span><span class="token string">"请求成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>设置拦截器</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java">
<span class="token keyword">import</span> com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>AlgorithmMismatchException<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>InvalidClaimException<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>SignatureVerificationException<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>TokenExpiredException<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>interfaces<span class="token punctuation">.</span>DecodedJWT<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>HandlerInterceptor<span class="token punctuation">;</span>
<span class="token keyword">import</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>common<span class="token punctuation">.</span>JwtTokenUtil<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> Project: Springboot-JWT &lt;/P>
 * &lt;p> Package: top.parak.interceptor &lt;/p>
 * &lt;p> FileName: JWTInterceptor &lt;p>
 * &lt;p> Description: 令牌拦截器 &lt;p>
 * &lt;p> Created By IntelliJ IDEA &lt;/p>
 *
 * @author KHighness
 * @since 2020/11/22
 */</span>

<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JWTInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        String kktoken <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"请求令牌 => [&amp;#123;&amp;#125;]"</span><span class="token punctuation">,</span> kktoken<span class="token punctuation">)</span><span class="token punctuation">;</span>
            DecodedJWT decodedJWT <span class="token operator">=</span> KKJWTUtil<span class="token punctuation">.</span><span class="token function">verifyToken</span><span class="token punctuation">(</span>kktoken<span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"验证结果 => [&amp;#123;&amp;#125;]"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TokenExpiredException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"发成异常 => [&amp;#123;&amp;#125;]"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"令牌过期"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SignatureVerificationException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"发成异常 => [&amp;#123;&amp;#125;]"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"签名错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AlgorithmMismatchException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"发成异常 => [&amp;#123;&amp;#125;]"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"加密算法不匹配"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvalidClaimException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"发成异常 => [&amp;#123;&amp;#125;]"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"失效负载"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"发成异常 => [&amp;#123;&amp;#125;]"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"令牌为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"发成异常 => [&amp;#123;&amp;#125;]"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"验证结果 => [&amp;#123;&amp;#125;]"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* map转json */</span>
        String json <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        PrintWriter writer <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>拦截器配置</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>InterceptorRegistry<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebMvcConfigurer<span class="token punctuation">;</span>
<span class="token keyword">import</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>intercepter<span class="token punctuation">.</span>JWTIntercepter<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> Project: Springboot-JWT &lt;/P>
 * &lt;p> Package: top.parak.config &lt;/p>
 * &lt;p> FileName: IntercepterConfig &lt;p>
 * &lt;p> Description: &lt;p>
 * &lt;p> Created By IntelliJ IDEA &lt;/p>
 *
 * @author KHighness
 * @since 2020/11/22
 */</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterceptorConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JWTInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/api/**/**"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/api/user/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>JWT</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis-plus</title>
    <url>/posts/fd1960c6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Mybatis-Plus"><a href="#Mybatis-Plus" class="headerlink" title="Mybatis-Plus"></a>Mybatis-Plus</h1><center>
    <font face="Kristen ITC" color="#555555" size=3>💌 Khighness 💌</font><br>
</center>



<h2 id="📖-官方文档"><a href="#📖-官方文档" class="headerlink" title="📖 官方文档"></a>📖 官方文档</h2><blockquote>
<p>🌐文档</p>
</blockquote>
<p>👉 <a href="https://mybatis.plus/">mybatis-plus</a></p>
<blockquote>
<p>☄️特性</p>
</blockquote>
<ul>
<li>润物无声：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑。</li>
<li>效率至上：只需简单配置，即可快速进行单表 CRUD 操作，从而节省大量时间。</li>
<li>丰富功能：代码生成、物理分页、性能分析等功能一应俱全。</li>
</ul>
<blockquote>
<p>⛓结构</p>
</blockquote>
<img src="/posts/fd1960c6/mybatis-plus-framework.jpg" class="" title="mybatis-plus-framework">



<a id="more"></a>



<h2 id="➕-添加依赖"><a href="#➕-添加依赖" class="headerlink" title="➕ 添加依赖"></a>➕ 添加依赖</h2><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">&lt;?xml</span> <span class="token attr-value">version="1.0" encoding="UTF-8"?></span>
<span class="token attr-name">&lt;project</span> <span class="token attr-value">xmlns="http://maven.apache.org/POM/4.0.0"</span>
<span class="token attr-name">         xmlns</span><span class="token punctuation">:</span><span class="token attr-value">xsi="http://www.w3.org/2001/XMLSchema-instance"</span>
<span class="token attr-name">         xsi</span><span class="token punctuation">:</span><span class="token attr-value">schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"></span>
    &lt;modelVersion>4.0.0&lt;/modelVersion>

    &lt;groupId>top.parak&lt;/groupId>
    &lt;artifactId>Mybatis-plus&lt;/artifactId>
<span class="token attr-name">    &lt;description>Mybatis-plus</span> <span class="token attr-value">Learning&lt;/description></span>
    &lt;version>1.0-SNAPSHOT&lt;/version>

    &lt;developers>
        &lt;developer>
            &lt;name>KHighness&lt;/name>
            &lt;email>parakovo@gmail.com&lt;/email>
        &lt;/developer>
    &lt;/developers>

    &lt;parent>
        &lt;groupId>org.springframework.boot&lt;/groupId>
        &lt;artifactId>spring-boot-starter-parent&lt;/artifactId>
        &lt;version>2.2.5.RELEASE&lt;/version>
    &lt;/parent>

    &lt;properties>
        &lt;mysql.version>8.0.20&lt;/mysql.version>
        &lt;fastjson.version>1.2.58&lt;/fastjson.version>
        &lt;gson.version>2.8.6&lt;/gson.version>
        &lt;mybatis-plus.version>3.4.0&lt;/mybatis-plus.version>
        &lt;common-io.version>2.6&lt;/common-io.version>
        &lt;common-fileupload.version>1.4&lt;/common-fileupload.version>
        &lt;mybatis-plus-generate.version>2.3.3&lt;/mybatis-plus-generate.version>
    &lt;/properties>

    &lt;dependencies>

<span class="token attr-name">        &lt;!--</span> <span class="token attr-value">Spring Web --></span>
        &lt;dependency>
            &lt;groupId>org.springframework.boot&lt;/groupId>
            &lt;artifactId>spring-boot-starter-web&lt;/artifactId>
        &lt;/dependency>

<span class="token attr-name">        &lt;!--</span> <span class="token attr-value">Spring Aop --></span>
        &lt;dependency>
            &lt;groupId>org.springframework.boot&lt;/groupId>
            &lt;artifactId>spring-boot-starter-aop&lt;/artifactId>
        &lt;/dependency>

<span class="token attr-name">        &lt;!--</span> <span class="token attr-value">Spring Test --></span>
        &lt;dependency>
            &lt;groupId>org.springframework.boot&lt;/groupId>
            &lt;artifactId>spring-boot-starter-test&lt;/artifactId>
            &lt;scope>test&lt;/scope>
            &lt;exclusions>
                &lt;exclusion>
                    &lt;groupId>org.junit.vintage&lt;/groupId>
                    &lt;artifactId>junit-vintage-engine&lt;/artifactId>
                &lt;/exclusion>
            &lt;/exclusions>
        &lt;/dependency>

<span class="token attr-name">        &lt;!--</span> <span class="token attr-value">Spring Configuration --></span>
        &lt;dependency>
            &lt;groupId>org.springframework.boot&lt;/groupId>
            &lt;artifactId>spring-boot-configuration-processor&lt;/artifactId>
            &lt;optional>true&lt;/optional>
        &lt;/dependency>

<span class="token attr-name">        &lt;!--</span> <span class="token attr-value">Spring Websocket --></span>
        &lt;dependency>
            &lt;groupId>org.springframework.boot&lt;/groupId>
            &lt;artifactId>spring-boot-starter-websocket&lt;/artifactId>
        &lt;/dependency>

<span class="token attr-name">        &lt;!--</span> <span class="token attr-value">Mybatis-plus --></span>
        &lt;dependency>
            &lt;groupId>com.baomidou&lt;/groupId>
            &lt;artifactId>mybatis-plus-boot-starter&lt;/artifactId>
            &lt;version>$&amp;#123;mybatis-plus.version&amp;#125;&lt;/version>
        &lt;/dependency>

<span class="token attr-name">        &lt;!--</span> <span class="token attr-value">mybatis-plus-generator --></span>
        &lt;dependency>
            &lt;groupId>com.baomidou&lt;/groupId>
            &lt;artifactId>mybatis-plus-generate&lt;/artifactId>
            &lt;version>$&amp;#123;mybatis-plus-generate.version&amp;#125;&lt;/version>
        &lt;/dependency>

<span class="token attr-name">        &lt;!--</span> <span class="token attr-value">Mysql --></span>
        &lt;dependency>
            &lt;groupId>mysql&lt;/groupId>
            &lt;artifactId>mysql-connector-java&lt;/artifactId>
            &lt;version>$&amp;#123;mysql.version&amp;#125;&lt;/version>
        &lt;/dependency>

<span class="token attr-name">        &lt;!--</span> <span class="token attr-value">Unit Test --></span>
        &lt;dependency>
            &lt;groupId>junit&lt;/groupId>
            &lt;artifactId>junit&lt;/artifactId>
            &lt;scope>test&lt;/scope>
        &lt;/dependency>

<span class="token attr-name">        &lt;!--</span> <span class="token attr-value">Lombok --></span>
        &lt;dependency>
            &lt;groupId>org.projectlombok&lt;/groupId>
            &lt;artifactId>lombok&lt;/artifactId>
            &lt;scope>provided&lt;/scope>
        &lt;/dependency>

<span class="token attr-name">        &lt;!--</span> <span class="token attr-value">FastJSON --></span>
        &lt;dependency>
            &lt;groupId>com.alibaba&lt;/groupId>
            &lt;artifactId>fastjson&lt;/artifactId>
            &lt;version>$&amp;#123;fastjson.version&amp;#125;&lt;/version>
        &lt;/dependency>

<span class="token attr-name">        &lt;!--</span> <span class="token attr-value">Gson --></span>
        &lt;dependency>
            &lt;groupId>com.google.code.gson&lt;/groupId>
            &lt;artifactId>gson&lt;/artifactId>
            &lt;version>$&amp;#123;gson.version&amp;#125;&lt;/version>
        &lt;/dependency>

<span class="token attr-name">        &lt;!--</span> <span class="token attr-value">File --></span>
        &lt;dependency>
            &lt;groupId>commons-fileupload&lt;/groupId>
            &lt;artifactId>commons-fileupload&lt;/artifactId>
            &lt;version>$&amp;#123;common-fileupload.version&amp;#125;&lt;/version>
        &lt;/dependency>

<span class="token attr-name">        &lt;!--</span> <span class="token attr-value">IO --></span>
        &lt;dependency>
            &lt;groupId>commons-io&lt;/groupId>
            &lt;artifactId>commons-io&lt;/artifactId>
            &lt;version>$&amp;#123;common-io.version&amp;#125;&lt;/version>
        &lt;/dependency>

    &lt;/dependencies>

    &lt;build>
        &lt;plugins>
            &lt;plugin>
                &lt;groupId>org.springframework.boot&lt;/groupId>
                &lt;artifactId>spring-boot-maven-plugin&lt;/artifactId>
                &lt;configuration>
                    &lt;mainClass>top.parak.KHighnessApplication&lt;/mainClass>
                &lt;/configuration>
            &lt;/plugin>
        &lt;/plugins>
    &lt;/build>

&lt;/project><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="💥配置日志"><a href="#💥配置日志" class="headerlink" title="💥配置日志"></a>💥配置日志</h2><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># Server</span>
<span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">3333</span>
<span class="token attr-name">server.tomcat.uri-encoding</span><span class="token punctuation">=</span><span class="token attr-value">UTF-8</span>

<span class="token comment" spellcheck="true"># Database</span>
<span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span>
<span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/test?serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;allowMultiQueries=true</span>
<span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span>
<span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">KAG1823</span>

<span class="token comment" spellcheck="true"># Mybatis-plus</span>
<span class="token attr-name">mybatis-plus.mapper-locations</span><span class="token punctuation">=</span><span class="token attr-value">classpath*:/mapper/**/*.xml</span>
<span class="token attr-name">mybatis-plus.type-aliases-package</span><span class="token punctuation">=</span><span class="token attr-value">top.parak.entity</span>
<span class="token attr-name">mybatis-plus.configuration.map-underscore-to-camel-case</span><span class="token punctuation">=</span><span class="token attr-value">true</span>
<span class="token attr-name">mybatis-plus.global-config.banner</span><span class="token punctuation">=</span><span class="token attr-value">false</span>
<span class="token attr-name">mybatis-plus.configuration.log-impl</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.ibatis.logging.stdout.StdOutImpl</span>
<span class="token comment" spellcheck="true"># Logic-Delete</span>
<span class="token attr-name">mybatis-plus.global-config.db-config.logic-delete-value</span><span class="token punctuation">=</span><span class="token attr-value">1</span>
<span class="token attr-name">mybatis-plus.global-config.db-config.logic-not-delete-value</span><span class="token punctuation">=</span><span class="token attr-value">0</span>

<span class="token comment" spellcheck="true"># Log</span>
<span class="token attr-name">logging.level.top.parak.mapper</span><span class="token punctuation">=</span><span class="token attr-value">debug</span>
<span class="token attr-name">logging.level.top.parak.controller</span><span class="token punctuation">=</span><span class="token attr-value">debug</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="🌀主键生成策略"><a href="#🌀主键生成策略" class="headerlink" title="🌀主键生成策略"></a>🌀主键生成策略</h2><blockquote>
<p>❄️Snowflake</p>
</blockquote>
<p><code>SnowFlake</code>是<code>Twitter</code>开源的分布式<code>ID</code>生成算法。</p>
<blockquote>
<p>🆔ID结构</p>
</blockquote>
<p><code>SnowFlake</code>生成<code>ID</code>固定是一个<code>long</code>型的数字，一个<code>long</code>型占8个字节，也就是64个<code>bit</code>，分配如下：</p>
<img src="/posts/fd1960c6/SnowFlakeID.jpg" class="" title="SnowFlake">

<ol>
<li>第一个bit是标识位部分，在<code>Java</code>中由于<code>long</code>的最高位是符号位，正数是<code>0</code>，负数是<code>1</code>，一般生成的<code>ID</code>为正数，所以固定为<code>0</code>。</li>
<li>时间戳部分占<code>41bit</code>，这个是毫秒级的时间，一般实现上不会存储当前的时间戳，而是时间戳的差值(当前时间-固定的开始时间)，这样可以使产生的<code>ID</code>从更小值开始。<code>41</code>位的时间戳可以使用<code>69</code>年。</li>
<li>工作机器<code>ID</code>占<code>10bit</code>，这里比较灵活，比如，可以使用前<code>5</code>位作为数据中心机房标识，后<code>5</code>位作为单机房机器标识，可以部署<code>1024</code>个节点。</li>
<li>序列号部分占<code>12bit</code>，支持同一毫秒内同一个节点可以生成2^12^=<code>4096</code>个<code>ID</code>。</li>
</ol>
<blockquote>
<p>🌠 优点和缺点</p>
</blockquote>
<p>优点：</p>
<ul>
<li>毫秒数在高位，自增序列在低位，<code>ID</code>趋势递增。</li>
<li>以服务方式部署，可以做高可用。</li>
<li>根据业务分配<code>bit</code>位，灵活。</li>
</ul>
<p>缺点：</p>
<ul>
<li>每台机器的时钟不同，当时钟回拨可能会发生重复ID。</li>
<li>当数据量大时，需要对<code>ID</code>取模分库分表，在跨毫秒时，序列号总是归<code>0</code>，会发生取模后分布不均衡。</li>
</ul>
<blockquote>
<p>💻 Java实现</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>common<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>ParseException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> Project: Mybatis-plus &lt;/P>
 * &lt;p> Package: top.parak.common &lt;/p>
 * &lt;p> FileName: SnowShakeUntil &lt;p>
 * &lt;p> Description: 雪花算法 &lt;p>
 * &lt;p> Created By IntelliJ IDEA &lt;/p>
 *
 * @author KHighness
 * @since 2020/11/8
 */</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SnowFlakeUntil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>开始时间戳&lt;/p>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> START_STMP<span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        String startDateTime <span class="token operator">=</span> <span class="token string">"2001-09-11 00:00:00"</span><span class="token punctuation">;</span>
        SimpleDateFormat simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">/* 13位时间戳 */</span>
            START_STMP <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>startDateTime<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>序列号占用的位数&lt;/p>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> SEQUENCE_BIT <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>数据中心标识占用的位数&lt;/p>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> MACHINE_BIT <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>机器标识占用的位数&lt;/p>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> DATACENTER_BIT <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/* 每一部分的最大值：先进行左移运算，再同-1进行异或运算 */</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>用位运算计算出最大支持的数据中心数量：31&lt;/p>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> MAX_DATACENTER_NUM <span class="token operator">=</span> <span class="token operator">-</span>1L <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span>1L <span class="token operator">&lt;&lt;</span> DATACENTER_BIT<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>用位运算计算出最大支持的机器数量&lt;/p>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> MAX_MACHINE_NUM <span class="token operator">=</span> <span class="token operator">-</span>1L <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span>1L <span class="token operator">&lt;&lt;</span> MACHINE_BIT<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>用位运算计算出最大支持的最大正整数4095&lt;/p>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> MAX_SEQUENCE <span class="token operator">=</span> <span class="token operator">-</span>1L <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">-</span>1L <span class="token operator">&lt;&lt;</span> SEQUENCE_BIT<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>机器标志较序列号的偏移量&lt;/p>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> MACHINE_LEFT <span class="token operator">=</span> SEQUENCE_BIT<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>数据中心较机器标志的偏移量&lt;/p>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> DATACENTER_LEFT <span class="token operator">=</span> SEQUENCE_BIT <span class="token operator">+</span> MACHINE_BIT<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>时间戳较数据中心的偏移量&lt;/p>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> TIMESTMP_LEFT <span class="token operator">=</span> DATACENTER_LEFT <span class="token operator">+</span> DATACENTER_BIT<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>数据中心&lt;/p>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> dataCenterId<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>机器标识&lt;/p>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> machineId<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>序列号&lt;/p>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> sequence <span class="token operator">=</span> 0L<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 4&lt;p>上一次时间戳&lt;/p>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">long</span> lastStmp <span class="token operator">=</span> <span class="token operator">-</span>1L<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>此处无参构造私有，同时没有给出有参构造，在于避免以下两点问题：&lt;/p>
     * &lt;li>1. 私有化避免了通过new的方式进行调用，主要是解决了在for循环中通过new的方式调用产生的id不一定唯一问题问题，因为用于记录上一次时间戳的lastStmp永远无法得到比对&lt;/li>
     * &lt;li>2. 没有给出有参构造在第一点的基础上考虑了一套分布式系统产生的唯一序列号应该是基于相同的参数&lt;/li>
     */</span>
    <span class="token keyword">private</span> <span class="token function">SnowFlakeUntil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>生成ID&lt;/p>
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">long</span> <span class="token function">nextID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* 获取当前时间戳*/</span>
        <span class="token keyword">long</span> currStmp <span class="token operator">=</span> <span class="token function">getNewStmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* 如果当前时间戳小于上次时间戳则抛出异常 */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>currStmp <span class="token operator">&lt;</span> lastStmp<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Clock moved backwards. Refusing to generate id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* 相同毫秒内，序列号自增 */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>currStmp <span class="token operator">==</span> lastStmp<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            sequence <span class="token operator">=</span> <span class="token punctuation">(</span>sequence <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> MAX_SEQUENCE<span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">/* 同一毫秒的序列数已经达到最大*/</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>sequence <span class="token operator">==</span> 0L<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                currStmp <span class="token operator">=</span> <span class="token function">getNextStmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* 不同毫秒内，序列号设为0 */</span>
        <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            sequence <span class="token operator">=</span> 0L<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 当前时间戳存档记录*/</span>
        lastStmp <span class="token operator">=</span> currStmp<span class="token punctuation">;</span>


        <span class="token keyword">return</span> <span class="token punctuation">(</span>currStmp <span class="token operator">-</span> START_STMP<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> TIMESTMP_LEFT  <span class="token comment" spellcheck="true">// 时间戳部分</span>
                <span class="token operator">|</span> dataCenterId <span class="token operator">&lt;&lt;</span> DATACENTER_LEFT        <span class="token comment" spellcheck="true">// 数据中心部分</span>
                <span class="token operator">|</span> machineId <span class="token operator">&lt;&lt;</span> MACHINE_LEFT              <span class="token comment" spellcheck="true">// 机器标识部分</span>
                <span class="token operator">|</span> sequence<span class="token punctuation">;</span>                              <span class="token comment" spellcheck="true">// 序列号部分</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>当前时间戳&lt;/p>
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">getNewStmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>下一时间的时间戳&lt;/p>
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">getNextStmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> mill <span class="token operator">=</span> <span class="token function">getNewStmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>mill <span class="token operator">&lt;=</span> lastStmp<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            mill <span class="token operator">=</span> <span class="token function">getNewStmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> mill<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>🔱在Mybatis-plus中自定义ID生成器</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomIdGenerator</span> <span class="token keyword">implements</span> <span class="token class-name">IdentifierGenerator</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Long <span class="token function">nextId</span><span class="token punctuation">(</span>Object entity<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
          <span class="token comment" spellcheck="true">// 可以将当前传入的class全类名来作为bizKey,或者提取参数来生成bizKey进行分布式Id调用生成.</span>
          String bizKey <span class="token operator">=</span> entity<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 根据bizKey调用分布式ID生成</span>
        <span class="token keyword">long</span> id <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
          <span class="token comment" spellcheck="true">// 返回生成的id值即可.</span>
        <span class="token keyword">return</span> id<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="🚀-CRUD拓展"><a href="#🚀-CRUD拓展" class="headerlink" title="🚀 CRUD拓展"></a>🚀 CRUD拓展</h2><p>建表</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span> <span class="token punctuation">(</span>
  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">bigint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_bin <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token keyword">tinyint</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token punctuation">`</span>email<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER SET</span> utf8 <span class="token keyword">COLLATE</span> utf8_bin <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">18</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8_bin<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>实体</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> IdType<span class="token punctuation">.</span>AUTO<span class="token punctuation">)</span>
    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>

    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Email</span>
    <span class="token keyword">private</span> String email<span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="🌌自动填充"><a href="#🌌自动填充" class="headerlink" title="🌌自动填充"></a>🌌自动填充</h3><p>对于普通字段</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> FieldFill <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* 默认不处理 */</span>
    DEFAULT<span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">/* 插入填充字段 */</span>
    INSERT<span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">/*更新填充字段 */</span>
    UPDATE<span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">/* 插入和更新填充字段 */</span>
    INSERT_UPDATE
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>所有的数据库表都应该包含创建时间gmt_create和修改时间gmt_modified，而且需要自动化。——《阿里巴巴开发手册》</p>
<blockquote>
<p>🛢数据库级别</p>
</blockquote>
<pre class="line-numbers language-sql"><code class="language-sql"> <span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span> <span class="token keyword">ADD</span> update_time <span class="token keyword">DATETIME</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">;</span>
 <span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span> <span class="token keyword">ADD</span> create_time <span class="token keyword">DATETIME</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>⌨️代码级别</p>
</blockquote>
<ul>
<li>数据表添加字段</li>
</ul>
<pre class="line-numbers language-sql"><code class="language-sql"> <span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span> <span class="token keyword">ADD</span> update_time <span class="token keyword">DATETIME</span><span class="token punctuation">;</span>
 <span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span> <span class="token keyword">ADD</span> create_time <span class="token keyword">DATETIME</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<ul>
<li>实体类添加字段和注解</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java">    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> FieldFill<span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span>
    <span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> FieldFill<span class="token punctuation">.</span>INSERT_UPDATE<span class="token punctuation">)</span>
    <span class="token keyword">private</span> Date updateTime<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>编写处理器处理注解</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>handler<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>MetaObjectHandler<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span>MetaObject<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> Project: Mybatis-plus &lt;/P>
 * &lt;p> Package: top.parak.handler &lt;/p>
 * &lt;p> FileName: DataObjectHandler &lt;p>
 * &lt;p> Description: 自动填充处理器 &lt;p>
 * &lt;p> Created By IntelliJ IDEA &lt;/p>
 *
 * @author KHighness
 * @since 2020/11/9
 */</span>

<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataObjectHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>插入时的填充策略&lt;/p>
     * @param metaObject
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"createTime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>更新时的填充策略&lt;/p>
     * @param metaObject
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span>MetaObject metaObject<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setFieldValByName</span><span class="token punctuation">(</span><span class="token string">"updateTime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> metaObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="🔏悲观锁"><a href="#🔏悲观锁" class="headerlink" title="🔏悲观锁"></a>🔏悲观锁</h3><blockquote>
<p>📖理解</p>
</blockquote>
<p>当要对数据库的一条数据进行修改的时候，为了避免同时被其他人修改，最好的办法就是直接对数据进行加锁防止并发。</p>
<p>这种借助数据库锁机制，在修改数据之前先锁定，再修改的方式被称为悲观并发控制(Pessimistic Concurrency Control，缩写PCC，又名悲观锁)。</p>
<blockquote>
<p>💠实现</p>
</blockquote>
<p>悲观锁的实现，往往依靠数据库提供的锁机制(只有数据库层提供的锁机制才能真正保证数据访问的排他性，否则，即使在本系统中实现了加锁机制，也无法保证外部系统不会修改数据)。悲观锁的实现：</p>
<ul>
<li>传统的关系型数据库使用这种锁机制，比如行锁、表锁、读锁、写锁等，都是在做操作之前先上锁</li>
<li>Java里面的同步<code>synchronized</code>关键字的实现</li>
<li><code>JUC</code>中的<code>lock</code>加锁</li>
</ul>
<blockquote>
<p>🔱分类 </p>
</blockquote>
<ul>
<li>共享锁：又称为读锁，简称S锁。顾名思义，共享锁就是多个事务对于同一个数九可以共享一把锁，都能访问到数据，但是只能读不能修改。</li>
<li>排他锁：又称为写锁，简称X锁。顾名思义，排他锁就是不能与其他锁并存，如果一个事务获取了一个数据行的排它锁，其他事务就不能再获取该行的其他锁，包括共享锁和排他锁，但是获取到排他锁的事务可以对数据进行读取和修改。</li>
</ul>
<blockquote>
<p>💬说明</p>
</blockquote>
<p>悲观并发控制实质上是<strong>先取锁再访问</strong>的保守策略，为数据处理的安全提供了保证。</p>
<p>但是在效率方面，处理加锁的机制会让数据库产生额外的开销，还有增加产生死锁的机会。</p>
<p>另外还会降低并行性，一个事务如果锁定了某行数据，其他事务就必须等待该事务处理完才可以处理那行数据。</p>
<h3 id="🔓乐观锁"><a href="#🔓乐观锁" class="headerlink" title="🔓乐观锁"></a>🔓乐观锁</h3><blockquote>
<p>📖理解</p>
</blockquote>
<p>乐观锁假设数据在一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则返回给用户错误的信息，让用户决定如何去做。乐观锁适用于读操作多的场景，这样可以提高程序的吞吐量。</p>
<blockquote>
<p>💠实现</p>
</blockquote>
<p>乐观锁不会可以使用数据库本身的锁机制，而是依据数据本身来保证数据的正确性。乐观锁的实现：</p>
<ul>
<li><p>CAS实现：<code>Java </code>中<code>java.concurrent.atomic</code>包下面的原子变量使用了乐观锁的一种 <code>CAS</code> 实现方式</p>
</li>
<li><p>版本号控制：一般是在数据表中添加一个数据版本号<code>version</code>字段，表示数据被修改的次数。当数据被修改时，<code>version</code>值会+1。当线程A更新数据值时，在读取数据的同时也会读取<code>version</code>值，在提交更新时，若刚才读取到<code>version</code>值与当前数据库中的<code>version</code>值相等时才更新，否则重试更新操作，直到更新成功。</p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 1 查询版本号</span>
<span class="token keyword">select</span> version <span class="token keyword">as</span> oldversion <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token comment" spellcheck="true">#&amp;#123;id&amp;#125;</span>
<span class="token comment" spellcheck="true">-- 2 更新操作</span>
<span class="token keyword">update</span> <span class="token keyword">set</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">,</span> version <span class="token operator">=</span> version  <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token comment" spellcheck="true">#&amp;#123;id&amp;#125;  and version = oldversion</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<blockquote>
<p>💬说明</p>
</blockquote>
<p>乐观并发控制相信事务之间的数据竞争概率是比较小的。因此尽可能直接做下去，直到提交的时候才去锁定，所以不会产生任何锁或死锁。</p>
<blockquote>
<p>🔧插件</p>
</blockquote>
<ul>
<li>数据表添加字段</li>
</ul>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span> <span class="token keyword">ADD</span> version <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">1</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>实体类添加属性和注解</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/* 乐观锁 */</span>
    <span class="token annotation punctuation">@Version</span>
    <span class="token keyword">private</span> Integer version<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>在mybatis-plus配置类中增加乐观锁拦截器</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> MybatisPlusInterceptor <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        MybatisPlusInterceptor mybatisPlusInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* 乐观锁插件 */</span>
        mybatisPlusInterceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> mybatisPlusInterceptor<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>乐观锁测试</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * &lt;p>乐观锁测试1&lt;/p>
     */</span>    
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">optimisticLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 查询信息</span>
        User user1 <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>10L<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 修改信息</span>
        user1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Khighness10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user1<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"khighness10@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 插队操作: 抢先更新，会更新版本号</span>
        User user2 <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>10L<span class="token punctuation">)</span><span class="token punctuation">;</span>
        user2<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 执行更新：更新失败，版本号不对</span>
        userMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre><code># 测试结果
JDBC Connection [HikariProxyConnection@597623166 wrapping com.mysql.cj.jdbc.ConnectionImpl@38cedb7d] will not be managed by Spring
==&gt;  Preparing: SELECT id,name,age,email,create_time,update_time,version FROM user WHERE id=? 
==&gt; Parameters: 10(Long)
&lt;==    Columns: id, name, age, email, create_time, update_time, version
&lt;==        Row: 10, Khighness10, 10, khighness10@qq.com, 2020-11-09 13:30:04, 2020-11-09 13:35:49, 2
&lt;==      Total: 1
Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@12a14b74]
Creating a new SqlSession
SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@6a9344f5] was not registered for synchronization because synchronization is not active
JDBC Connection [HikariProxyConnection@1434769862 wrapping com.mysql.cj.jdbc.ConnectionImpl@38cedb7d] will not be managed by Spring
==&gt;  Preparing: SELECT id,name,age,email,create_time,update_time,version FROM user WHERE id=? 
==&gt; Parameters: 10(Long)
&lt;==    Columns: id, name, age, email, create_time, update_time, version
&lt;==        Row: 10, Khighness10, 10, khighness10@qq.com, 2020-11-09 13:30:04, 2020-11-09 13:35:49, 2
&lt;==      Total: 1
Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@6a9344f5]
Creating a new SqlSession
SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@3234474] was not registered for synchronization because synchronization is not active
JDBC Connection [HikariProxyConnection@1137013089 wrapping com.mysql.cj.jdbc.ConnectionImpl@38cedb7d] will not be managed by Spring
==&gt;  Preparing: UPDATE user SET name=?, age=?, email=?, create_time=?, update_time=?, version=? WHERE id=? AND version=? 
==&gt; Parameters: Khighness10(String), 100(Integer), khighness10@qq.com(String), 2020-11-09 13:30:04.0(Timestamp), 2020-11-09 13:59:41.434(Timestamp), 3(Integer), 10(Long), 2(Integer)
&lt;==    Updates: 1   // 插队更新，影响行数为1=&gt;成功
Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@3234474]
Creating a new SqlSession
SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@58658f63] was not registered for synchronization because synchronization is not active
JDBC Connection [HikariProxyConnection@1424043852 wrapping com.mysql.cj.jdbc.ConnectionImpl@38cedb7d] will not be managed by Spring
==&gt;  Preparing: UPDATE user SET name=?, age=?, email=?, create_time=?, update_time=?, version=? WHERE id=? AND version=? 
==&gt; Parameters: Khighness10(String), 10(Integer), khighness10@qq.com(String), 2020-11-09 13:30:04.0(Timestamp), 2020-11-09 13:59:41.45(Timestamp), 3(Integer), 10(Long), 2(Integer)
&lt;==    Updates: 0   // 执行更新，影响行数为0=&gt;失败
Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@58658f63]</code></pre>
<h3 id="🔖分页查询"><a href="#🔖分页查询" class="headerlink" title="🔖分页查询"></a>🔖分页查询</h3><ul>
<li>mybatis-plus配置类中增加分页拦截器</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> MybatisPlusInterceptor <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        MybatisPlusInterceptor mybatisPlusInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* 分页插件 */</span>
        mybatisPlusInterceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span>DbType<span class="token punctuation">.</span>MYSQL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> mybatisPlusInterceptor<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>直接使用<code>Page</code>对象</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 分页查询，使用page
     * 构造函数Page(current, size)
     * current: 页号
     * size: 页面大小
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Page<span class="token operator">&lt;</span>User<span class="token operator">></span> userPage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userMapper<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span>userPage<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"总记录数量: &amp;#123;&amp;#125;"</span><span class="token punctuation">,</span> userPage<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"第3页结果如下"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userPage<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre><code># 测试结果
Creating a new SqlSession
SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@d5556bf] was not registered for synchronization because synchronization is not active
2020-11-09 15:44:02.969  INFO 6560 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-11-09 15:44:03.107  INFO 6560 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
JDBC Connection [HikariProxyConnection@2068279617 wrapping com.mysql.cj.jdbc.ConnectionImpl@784223e9] will not be managed by Spring
==&gt;  Preparing: SELECT COUNT(1) FROM user
==&gt; Parameters: 
&lt;==    Columns: COUNT(1)
&lt;==        Row: 12
&lt;==      Total: 1
==&gt;  Preparing: SELECT id,name,age,email,create_time,update_time,version FROM user LIMIT ?,?
==&gt; Parameters: 6(Long), 3(Long)
&lt;==    Columns: id, name, age, email, create_time, update_time, version
&lt;==        Row: 7, UnknownK, 3, unknownk@gmail.@32423.com, 2020-11-09 15:33:38, 2020-11-09 15:33:38, 1
&lt;==        Row: 8, UnknownK, 3, unknownk@gmail.@32423.com, 2020-11-09 15:33:38, 2020-11-09 15:33:38, 1
&lt;==        Row: 9, UnknownK, 3, unknownk@gmail.com, 2020-11-09 13:28:49, 2020-11-09 13:28:49, 1
&lt;==      Total: 3
Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@d5556bf]
2020-11-09 15:44:03.170  INFO 6560 --- [           main] top.parak.mapper.UserMapperTest          : 总记录数量: 12
2020-11-09 15:44:03.170  INFO 6560 --- [           main] top.parak.mapper.UserMapperTest          : 第3页结果如下
User(id=7, name=UnknownK, age=3, email=unknownk@gmail.@32423.com, createTime=Mon Nov 09 15:33:38 CST 2020, updateTime=Mon Nov 09 15:33:38 CST 2020, version=1)
User(id=8, name=UnknownK, age=3, email=unknownk@gmail.@32423.com, createTime=Mon Nov 09 15:33:38 CST 2020, updateTime=Mon Nov 09 15:33:38 CST 2020, version=1)
User(id=9, name=UnknownK, age=3, email=unknownk@gmail.com, createTime=Mon Nov 09 13:28:49 CST 2020, updateTime=Mon Nov 09 13:28:49 CST 2020, version=1)</code></pre>
<p>、</p>
<h3 id="📛逻辑删除"><a href="#📛逻辑删除" class="headerlink" title="📛逻辑删除"></a>📛逻辑删除</h3><blockquote>
<p>物理删除：从数据库中直接删除。</p>
<p>逻辑删除：不从数据库中移除，通过一个变量使其失效。实质上是更新，防止数据丢失。</p>
</blockquote>
<ul>
<li>数据库添加字段</li>
</ul>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span> <span class="token keyword">ADD</span> deleted <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>实体类添加属性和注解</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/* 逻辑删除 */</span>
    <span class="token annotation punctuation">@TableLogic</span>
    <span class="token keyword">private</span> Integer deleted<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>Application.properties中增加配置</li>
</ul>
<pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 逻辑删除</span>
<span class="token attr-name">mybatis-plus.global-config.db-config.logic-delete-value</span><span class="token punctuation">=</span><span class="token attr-value">1</span>
<span class="token attr-name">mybatis-plus.global-config.db-config.logic-not-delete-value</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="🔍性能分析"><a href="#🔍性能分析" class="headerlink" title="🔍性能分析"></a><del>🔍性能分析</del></h3><p>3.4.X版本中该插件已经移除。</p>
<h3 id="💤条件构造器"><a href="#💤条件构造器" class="headerlink" title="💤条件构造器"></a>💤条件构造器</h3><img src="/posts/fd1960c6/image-20201112160607792.png" class="" title="image-20201112160607792">

<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WrapperTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> UserMapper userMapper<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 姓名不为空</span>
        <span class="token comment" spellcheck="true">// 邮箱不为空</span>
        <span class="token comment" spellcheck="true">// 年龄大于等于18</span>
        wrapper
                <span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"RubbishK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 只能查询一个用户，结果多于1个会报错</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 查询年龄在13到19的用户数量</span>
        wrapper<span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userMapper<span class="token punctuation">.</span><span class="token function">selectCount</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 模糊查询</span>
        wrapper
                <span class="token punctuation">.</span><span class="token function">likeRight</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"K"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// K%</span>
                <span class="token punctuation">.</span><span class="token function">likeLeft</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">,</span> <span class="token string">"@gmail.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// %@gmail.com</span>
        userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 拼接sql语句</span>
        wrapper<span class="token punctuation">.</span><span class="token function">inSql</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"select id from user where id &lt; 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 通过ID降序排序</span>
        wrapper<span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="🔰代码生成器"><a href="#🔰代码生成器" class="headerlink" title="🔰代码生成器"></a>🔰代码生成器</h3><blockquote>
<p>自动生成 entity、mapper、service、controller层的代码</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>generator<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>DbType<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>FieldFill<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>IdType<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>TableField<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>AutoGenerator<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>InjectionConfig<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>DataSourceConfig<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>GlobalConfig<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>PackageConfig<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>StrategyConfig<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>po<span class="token punctuation">.</span>TableFill<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rules<span class="token punctuation">.</span>DateType<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rules<span class="token punctuation">.</span>NamingStrategy<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> Project: Mybatis-plus &lt;/P>
 * &lt;p> Package: top.parak.generator &lt;/p>
 * &lt;p> FileName: ParaKCode &lt;p>
 * &lt;p> Description: &lt;p>
 * &lt;p> Created By IntelliJ IDEA &lt;/p>
 *
 * @author KHighness
 * @since 2020/11/12
 */</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParaKCodeGenerator</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 代码生成器</span>
        AutoGenerator autoGenerator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutoGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 全局配置</span>
        GlobalConfig globalConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GlobalConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String projectPath <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        globalConfig<span class="token punctuation">.</span><span class="token function">setOutputDir</span><span class="token punctuation">(</span>projectPath <span class="token operator">+</span> <span class="token string">"/src/main/java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 设置作者名</span>
        globalConfig<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">"KHighness"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 操作完成是否打开资源管理器</span>
        globalConfig<span class="token punctuation">.</span><span class="token function">setOpen</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 是否覆盖原有文件</span>
        globalConfig<span class="token punctuation">.</span><span class="token function">setFileOverride</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 去Service的I前缀</span>
        globalConfig<span class="token punctuation">.</span><span class="token function">setServiceName</span><span class="token punctuation">(</span><span class="token string">"%sService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        globalConfig<span class="token punctuation">.</span><span class="token function">setIdType</span><span class="token punctuation">(</span>IdType<span class="token punctuation">.</span>ID_WORKER<span class="token punctuation">)</span><span class="token punctuation">;</span>
        globalConfig<span class="token punctuation">.</span><span class="token function">setDateType</span><span class="token punctuation">(</span>DateType<span class="token punctuation">.</span>ONLY_DATE<span class="token punctuation">)</span><span class="token punctuation">;</span>
        autoGenerator<span class="token punctuation">.</span><span class="token function">setGlobalConfig</span><span class="token punctuation">(</span>globalConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 数据源配置</span>
        DataSourceConfig dataSourceConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSourceConfig<span class="token punctuation">.</span><span class="token function">setDbType</span><span class="token punctuation">(</span>DbType<span class="token punctuation">.</span>MYSQL<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSourceConfig<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/test?serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSourceConfig<span class="token punctuation">.</span><span class="token function">setDriverName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSourceConfig<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSourceConfig<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"KAG1823"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        autoGenerator<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSourceConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 包配置</span>
        PackageConfig packageConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        packageConfig<span class="token punctuation">.</span><span class="token function">setModuleName</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        packageConfig<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span><span class="token string">"top.parak"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        packageConfig<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span><span class="token string">"entity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        packageConfig<span class="token punctuation">.</span><span class="token function">setMapper</span><span class="token punctuation">(</span><span class="token string">"mapper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        packageConfig<span class="token punctuation">.</span><span class="token function">setService</span><span class="token punctuation">(</span><span class="token string">"service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        packageConfig<span class="token punctuation">.</span><span class="token function">setController</span><span class="token punctuation">(</span><span class="token string">"controller"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        autoGenerator<span class="token punctuation">.</span><span class="token function">setPackageInfo</span><span class="token punctuation">(</span>packageConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 策略配置</span>
        StrategyConfig strategyConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrategyConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 映射表名</span>
        strategyConfig<span class="token punctuation">.</span><span class="token function">setInclude</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        strategyConfig<span class="token punctuation">.</span><span class="token function">setNaming</span><span class="token punctuation">(</span>NamingStrategy<span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        strategyConfig<span class="token punctuation">.</span><span class="token function">setColumnNaming</span><span class="token punctuation">(</span>NamingStrategy<span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// Lombok实体类</span>
        strategyConfig<span class="token punctuation">.</span><span class="token function">setEntityLombokModel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 驼峰命名</span>
        strategyConfig<span class="token punctuation">.</span><span class="token function">setRestControllerStyle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 逻辑删除</span>
        strategyConfig<span class="token punctuation">.</span><span class="token function">setLogicDeleteFieldName</span><span class="token punctuation">(</span><span class="token string">"deleted"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 创建时间</span>
        TableFill gmt_create <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TableFill</span><span class="token punctuation">(</span><span class="token string">"create_time"</span><span class="token punctuation">,</span> FieldFill<span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 更新时间</span>
        TableFill gmt_modify <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TableFill</span><span class="token punctuation">(</span><span class="token string">"update_time"</span><span class="token punctuation">,</span> FieldFill<span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>TableFill<span class="token operator">></span> tableFills <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tableFills<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>gmt_create<span class="token punctuation">)</span><span class="token punctuation">;</span>
        tableFills<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>gmt_modify<span class="token punctuation">)</span><span class="token punctuation">;</span>
        strategyConfig<span class="token punctuation">.</span><span class="token function">setTableFillList</span><span class="token punctuation">(</span>tableFills<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 乐观锁</span>
        strategyConfig<span class="token punctuation">.</span><span class="token function">setVersionFieldName</span><span class="token punctuation">(</span><span class="token string">"version"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        strategyConfig<span class="token punctuation">.</span><span class="token function">setControllerMappingHyphenStyle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        autoGenerator<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span>strategyConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 自定义配置</span>
        InjectionConfig injectionConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InjectionConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 执行生成</span>
        autoGenerator<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>生成结果</p>
</blockquote>
<img src="/posts/fd1960c6/image-20201112182336874.png" class="" title="image-20201112182336874">]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Mybatis-plus</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/posts/41682/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><center>
    <font face="Kristen ITC" color="#555555" size=3>💌 Khighness 💌</font><br>
</center>



<p>可扩展性的本质是找到系统的变化点，并隔离变化点。 </p>
<p>世间众多设计模式其实就是一种设计模式即隔离变化点的模式。</p>
<p>极致扩展性的标志，就是需求的新增，不会在原有代码交付物上进行任何形式的修改。</p>
<p>——《阿里巴巴Java开发手册》</p>
<h2 id="1-设计原则"><a href="#1-设计原则" class="headerlink" title="1. 设计原则"></a>1. 设计原则</h2><img src="/posts/41682/image-20210413121732627.png" class="" title="DesignPrinciple">



<a id="more"></a>



<h3 id="1-1-开闭原则"><a href="#1-1-开闭原则" class="headerlink" title="1.1 开闭原则"></a>1.1 开闭原则</h3><blockquote>
<p>定义</p>
</blockquote>
<p>软件实体应当对扩展开放，对修改关闭。</p>
<blockquote>
<p>实现</p>
</blockquote>
<p>可以通过“抽象约束、封装变化”来实现开闭原则，即通过接口或者抽象类为软件实体定义一个相对稳定的抽象层，而将相同的可变因素封装在相同的具体实现类中。</p>
<p>因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。而软件中易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类来扩展就可以了。</p>
<blockquote>
<p>作用</p>
</blockquote>
<p>开闭原则是面向对象程序设计的终极目标，它使软件实体拥有一定的适应性和灵活性的同时具备稳定性和延续性。具体来说，其作用如下。</p>
<ol>
<li>对软件测试的影响</li>
</ol>
<p>软件遵守开闭原则的话，软件测试时只需要对扩展的代码进行测试就可以了，因为原有的测试代码仍然能够正常运行。</p>
<ol start="2">
<li>可以提高代码的可复用性</li>
</ol>
<p>粒度越小，被复用的可能性就越大；在面向对象的程序设计中，根据原子和抽象编程可以提高代码的可复用性。</p>
<ol start="3">
<li>可以提高软件的可维护性</li>
</ol>
<p>遵守开闭原则的软件，其稳定性高和延续性强，从而易于扩展和维护。</p>
<h3 id="1-2-里式替换原则"><a href="#1-2-里式替换原则" class="headerlink" title="1.2 里式替换原则"></a>1.2 里式替换原则</h3><blockquote>
<p>定义</p>
</blockquote>
<p>继承必须确保超类所拥有的性质在子类中仍然成立</p>
<blockquote>
<p>实现</p>
</blockquote>
<p>子类可以扩展父类的功能，但不能改变父类原有的功能。也就是说：子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。</p>
<p>根据上述理解，对里氏替换原则的定义可以总结如下：</p>
<ul>
<li>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法</li>
<li>子类中可以增加自己特有的方法</li>
<li>当子类的方法重载父类的方法时，方法的前置条件（即方法的输入参数）要比父类的方法更宽松</li>
<li>当子类的方法实现父类的方法时（重写/重载或实现抽象方法），方法的后置条件（即方法的的输出/返回值）要比父类的方法更严格或相等</li>
</ul>
<blockquote>
<p>作用</p>
</blockquote>
<ul>
<li><p>里氏替换原则是实现开闭原则的重要方式之一。</p>
</li>
<li><p>它克服了继承中重写父类造成的可复用性变差的缺点。</p>
</li>
<li><p>它是动作正确性的保证。即类的扩展不会给已有的系统引入新的错误，降低了代码出错的可能性。</p>
</li>
<li><p>加强程序的健壮性，同时变更时可以做到非常好的兼容性，提高程序的维护性、可扩展性，降低需求变更时引入的风险。</p>
</li>
</ul>
<h3 id="1-3-依赖倒置原则"><a href="#1-3-依赖倒置原则" class="headerlink" title="1.3 依赖倒置原则"></a>1.3 依赖倒置原则</h3><blockquote>
<p>定义</p>
</blockquote>
<p>高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。</p>
<blockquote>
<p>实现</p>
</blockquote>
<ul>
<li><p>每个类尽量提供接口或抽象类，或者两者都具备。</p>
</li>
<li><p>变量的声明类型尽量是接口或者是抽象类。</p>
</li>
<li><p>任何类都不应该从具体类派生。</p>
</li>
<li><p>使用继承时尽量遵循里氏替换原则。</p>
</li>
</ul>
<blockquote>
<p>作用</p>
</blockquote>
<ul>
<li>依赖倒置原则可以降低类间的耦合性。</li>
<li>依赖倒置原则可以提高系统的稳定性。</li>
<li>依赖倒置原则可以减少并行开发引起的风险。</li>
<li>依赖倒置原则可以提高代码的可读性和可维护性。</li>
</ul>
<h3 id="1-4-单一职责原则"><a href="#1-4-单一职责原则" class="headerlink" title="1.4 单一职责原则"></a>1.4 单一职责原则</h3><blockquote>
<p>定义</p>
</blockquote>
<p>一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分</p>
<blockquote>
<p>实现</p>
</blockquote>
<p>单一职责原则是最简单但又最难运用的原则，需要设计人员发现类的不同职责并将其分离，再封装到不同的类或模块中。</p>
<blockquote>
<p>作用</p>
</blockquote>
<p>单一职责原则的核心就是控制类的粒度大小、将对象解耦、提高其内聚性。</p>
<ul>
<li>降低类的复杂度。一个类只负责一项职责，其逻辑肯定要比负责多项职责简单得多。</li>
<li>提高类的可读性。复杂性降低，自然其可读性会提高。</li>
<li>提高系统的可维护性。可读性提高，那自然更容易维护了。</li>
<li>变更引起的风险降低。变更是必然的，如果单一职责原则遵守得好，当修改一个功能时，可以显著降低对其他功能的影响。</li>
</ul>
<h3 id="1-5-接口隔离原则"><a href="#1-5-接口隔离原则" class="headerlink" title="1.5 接口隔离原则"></a>1.5 接口隔离原则</h3><blockquote>
<p>定义</p>
</blockquote>
<p>要为各个类建立它们需要的专用接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。</p>
<blockquote>
<p>实现</p>
</blockquote>
<p>在具体应用接口隔离原则时，应该根据以下几个规则来衡量。</p>
<ul>
<li>接口尽量小，但是要有限度。一个接口只服务于一个子模块或业务逻辑。</li>
<li>为依赖接口的类定制服务。只提供调用者需要的方法，屏蔽不需要的方法。</li>
<li>了解环境，拒绝盲从。每个项目或产品都有选定的环境因素，环境不同，接口拆分的标准就不同深入了解业务逻辑。</li>
<li>提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。</li>
</ul>
<blockquote>
<p>作用</p>
</blockquote>
<p>接口隔离原则是为了约束接口、降低类对接口的依赖性，遵循接口隔离原则有以下 5 个优点。</p>
<ul>
<li><p>将臃肿庞大的接口分解为多个粒度小的接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性。</p>
</li>
<li><p>接口隔离提高了系统的内聚性，减少了对外交互，降低了系统的耦合性。</p>
</li>
<li><p>如果接口的粒度大小定义合理，能够保证系统的稳定性；但是，如果定义过小，则会造成接口数量过多，使设计复杂化；如果定义太大，灵活性降低，无法提供定制服务，给整体项目带来无法预料的风险。</p>
</li>
<li><p>使用多个专门的接口还能够体现对象的层次，因为可以通过接口的继承，实现对总接口的定义。</p>
</li>
<li><p>能减少项目工程中的代码冗余。过大的大接口里面通常放置许多不用的方法，当实现这个接口的时候，被迫设计冗余的代码。</p>
</li>
</ul>
<h3 id="1-6-迪米特法则"><a href="#1-6-迪米特法则" class="headerlink" title="1.6 迪米特法则"></a>1.6 迪米特法则</h3><blockquote>
<p>定义</p>
</blockquote>
<p>如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。</p>
<blockquote>
<p>实现</p>
</blockquote>
<ul>
<li><p>从依赖者的角度来说，只依赖应该依赖的对象。</p>
</li>
<li><p>从被依赖者的角度说，只暴露应该暴露的方法。</p>
</li>
</ul>
<blockquote>
<p>作用</p>
</blockquote>
<p>迪米特法则要求限制软件实体之间通信的宽度和深度，正确使用迪米特法则将有以下两个优点。</p>
<ul>
<li><p>降低了类之间的耦合度，提高了模块的相对独立性。</p>
</li>
<li><p>由于亲合度降低，从而提高了类的可复用率和系统的扩展性。</p>
</li>
</ul>
<h2 id="2-设计模式"><a href="#2-设计模式" class="headerlink" title="2. 设计模式"></a>2. 设计模式</h2><img src="/posts/41682/image-20210413121858931.png" class="" title="DesignPrinciple">



<h3 id="2-1-单例模式-Singleton"><a href="#2-1-单例模式-Singleton" class="headerlink" title="2.1 单例模式-Singleton"></a>2.1 单例模式-Singleton</h3><blockquote>
<p>定义</p>
</blockquote>
<p>一个类只有一个实例，且该类能自行创建这个实例</p>
<blockquote>
<p>特点</p>
</blockquote>
<ol>
<li>单例类只有一个实例对象。</li>
<li>该单例对象必须由单例类自行创建。</li>
<li>单例类对外提供一个访问该单例的全局访问点。</li>
</ol>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>单例模式可以保证内存中只有一个实例，减少了内存的开销。</li>
<li>可以避免对资源的多重占用。</li>
<li>单例模式设置全局访问点，可以优化和共享资源的访问。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>单例模式一般没有接口，扩展困难，如果要扩展，则除了修改原来的代码，没有第二种途径，违背开闭原则。</li>
<li>在并发测试中，单例模式不利于代码调试。在调试过程中，如果单例中的代码没有执行完，也不能模拟生成一个新的对象。</li>
<li>单例模式的功能代码通常写在一个类中，如果功能设计不合理，则很容易违背单一职责原则。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>单例类</li>
<li>访问类</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<ul>
<li>懒汉式单例</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>pattern<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> Project: DesignPattern &lt;/p>
 * &lt;p> Package: top.parak.singeleton.pattern &lt;/p>
 * &lt;p> FileName: LazySingleton &lt;p>
 * &lt;p> Description: 懒汉式单例 &lt;p>
 * &lt;p> Created By IntelliJ IDEA &lt;/p>
 *
 * @author KHighness
 * @since 2020/10/16
 */</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> 特点：
 * 类加载时没有生成单例，只有第一次调用getInstance方法时才会创建这个单例
 * &lt;/p>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazySingleton</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/* volatile: 具有可见性、有序性，不具备原子性
    volatile声明变量的值可能随时会被其他线程修改，
    使用volatile修饰的变量会强制将修改的值立即写入主存，
    主存中值的更新会使缓存中的值失效。
    volatile不会让线程阻塞，响应速度比synchronized快 */</span>

    <span class="token comment" spellcheck="true">// volatile保证instance在所有线程中同步可见</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> LazySingleton instance <span class="token operator">=</span> null<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// private避免类在外部被实例化</span>
    <span class="token keyword">private</span> <span class="token function">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 加锁同步，保证getInstance()只能被一个线程调用</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> LazySingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>饿汉式单例</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>singleton<span class="token punctuation">.</span>pattern<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> Project: DesignPattern &lt;/p>
 * &lt;p> Package: top.parak.singeleton.pattern &lt;/p>
 * &lt;p> FileName: HungrySingleton &lt;p>
 * &lt;p> Description: 饿汉式单例 &lt;p>
 * &lt;p> Created By IntelliJ IDEA &lt;/p>
 *
 * @author KHighness
 * @since 2020/10/16
 */</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> 特点：
 * 类一旦加载就创建一个单例，保证在调用getInstance()之前单例就已经存在
 * &lt;/p>
 */</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HungrySingleton</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/* 在类加载时就创建一个静态对象供系统使用，以后不再改变，
    所以是线程安全的，可以直接用于多线程而不会出现问题 */</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> HungrySingleton instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HungrySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token function">HungrySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> HungrySingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-2-原型模式-Prototype"><a href="#2-2-原型模式-Prototype" class="headerlink" title="2.2 原型模式-Prototype"></a>2.2 原型模式-Prototype</h3><blockquote>
<p>定义</p>
</blockquote>
<p>用一个已经创建的实例，通过复制该原型对象来创建一个和原型相同或者相似的新对象</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>Java自带的原型模式基于内存二进制流的复制，在性能上比直接new一个对象更加优良。</li>
<li>可以使用深克隆方式保存对象的状态，使用原型模式将对象复制一份，并将其状态保存起来，简化了创建对象的过程，以便在需要的时候使用（例如恢复到历史某一状态），可复制实现撤销操作。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>需要为每一个类都配置一个clone方法。</li>
<li>clone方法位于类的内部，当对于已有类进行改造的时候，需要修改代码，违背了开闭原则。</li>
<li>当实现深克隆时，需要编写较为复杂的代码，而且当对象之间存在多重嵌套引用时，为了实现深克隆，每一层对象对应的类都必须支持深克隆，实现起来会比较麻烦。因此，浅克隆和深克隆需要需要运用得当。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象原型类：规定了具体原型对象必须实现的接口。</li>
<li>具体原型类：实现抽象原型类的clone()方法，它是可被复制的对象。</li>
<li>访问类：使用具体原型类中的clone()方法类复制新的对象。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>pattern<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> Project: DesignPattern &lt;/p>
 * &lt;p> Package: top.parak.prototype.pattern &lt;/p>
 * &lt;p> FileName: Prototype &lt;p>
 * &lt;p> Description: 原型模式浅克隆 &lt;p>
 * &lt;p> Created By IntelliJ IDEA &lt;/p>
 *
 * @author KHighness
 * @since 2020/10/16
 */</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> 特点：
 * 浅克隆：创建一个新对象，新对象的属性和原来对象完全相同，对于非基本类型属性，扔指向原有属性所指向的对象的内存地址
 * 深克隆：创建一个对象，属性中引用的对象也会被克隆，不再指向原有对象地址
 * &lt;/p>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Prototype</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Prototype<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        RealizeType realizeType1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealizeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        RealizeType realizeType2 <span class="token operator">=</span> <span class="token punctuation">(</span>RealizeType<span class="token punctuation">)</span> realizeType1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"realizeType1 == realizeType2 ? "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>realizeType1 <span class="token operator">==</span> realizeType2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">RealizeType</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>RealizeType<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">RealizeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"原型创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"原型复制"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-3-简单工厂模式-Simple-Factory"><a href="#2-3-简单工厂模式-Simple-Factory" class="headerlink" title="2.3 简单工厂模式-Simple Factory"></a>2.3 <del>简单工厂模式-Simple Factory</del></h3><blockquote>
<p>定义</p>
</blockquote>
<p>定义一个创建产品对象的工厂接口，将产品对象的实际创建工作推迟到具体子工厂类当中。</p>
<blockquote>
<p>按照业务场景划分，工厂模式有3种实现方式</p>
</blockquote>
<p><img src="../../../../Java/DesignPatternNote/DesignPattern/image-20201111164349538.png" alt="image-20201111164349538"></p>
<center>
    <font face="Kristen ITC" color="#555555" font-size=100px>三种实现方式</font><br>
</center>



<blockquote>
<p>说明</p>
</blockquote>
<p>简单工厂模式有一个具体的工厂类，可以生产多个不同的产品，属于创建型设计模式，但是简单工厂模式不在GOF23中设计模式之列。</p>
<p>在简单工厂模式中创建实例的方法通常为静态(static)方法，因此简单工厂模式(Simple Factory Pattern)又叫做静态工厂方法模式(Static Factory Method Pattern)。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>工厂类包含必要的逻辑判断，可以决定在什么时候创建哪一个产品的实例。客户端可以免除直接创建产品对象的职责，很方便的创建响应的产品。工厂和产品的职责区分明确。</li>
<li>客户端无需知道所创建具体产品的类名，只需知道参数即可。</li>
<li>也可以引入配置文件，在不修改客户端的代码的情况下更换和添加新的具体产品类。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>简单工厂模式的工厂类单一，负责所有产品的创建，职责过重，一旦异常，整个系统将受到影响。且工厂类代码会非常臃肿，违背高聚合原则。</li>
<li>使用简单工厂模式会增加系统中类的个数(引入新的工厂类)，增加系统的复杂度和理解难度。</li>
<li>系统拓展困难，一旦增加新产品不得不修改工厂逻辑，在产品类型较多时，可能造成逻辑过于复杂。</li>
</ul>
<blockquote>
<p>应用场景</p>
</blockquote>
<p>对于产品种类相对较少的情况，考虑使用简单工厂模式。使用简单工厂模式的客户端只需要传入工厂类的参数，不需要关心如何创建对象的逻辑，可以很方便地创建所需产品。</p>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>简单工厂(Simple Factory)：是简单工厂模式的核心，负责实现创建所有实例的内部逻辑。工厂类创建产品类的方法可以被外界直接调用，创建所需的产品对象。</li>
<li>抽象产品(Abstract Product)：是简单工厂创建的所有对象的父亲，负责描述所有实例共有的公共接口。</li>
<li>具体产品(Concrete Product)：是简单工厂模式的创建目标。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>simpleFactory<span class="token punctuation">.</span>pattern<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> Project: DesignPattern &lt;/p>
 * &lt;p> Package: top.parak.simpleactory.pattern &lt;/p>
 * &lt;p> FileName: Client &lt;p>
 * &lt;p> Description: 简单工厂模式 &lt;p>
 * &lt;p> Created By IntelliJ IDEA &lt;/p>
 *
 * @author KHighness
 * @since 2020/10/17
 */</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>测试类&lt;/p>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleFactoryDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>SimpleFactoryDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"输入产品型号："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> choice <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>choice<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"成功退出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> SimpleFactory<span class="token punctuation">.</span><span class="token function">makeProduct</span><span class="token punctuation">(</span>Constant<span class="token punctuation">.</span>PRODUCT_1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> SimpleFactory<span class="token punctuation">.</span><span class="token function">makeProduct</span><span class="token punctuation">(</span>Constant<span class="token punctuation">.</span>PRODUCT_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> SimpleFactory<span class="token punctuation">.</span><span class="token function">makeProduct</span><span class="token punctuation">(</span>Constant<span class="token punctuation">.</span>PRODUCT_3<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">default</span><span class="token operator">:</span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"该产品不存在，请重新输入！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     抽象产品
 * &lt;/p>
 */</span>
<span class="token keyword">interface</span> <span class="token class-name">product</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     枚举所有产品
 * &lt;/p>
 */</span>
<span class="token keyword">enum</span> Constant <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    PRODUCT_1<span class="token punctuation">,</span>
    PRODUCT_2<span class="token punctuation">,</span>
    PRODUCT_3<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体产品1
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteProduct1</span> <span class="token keyword">implements</span> <span class="token class-name">product</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ConcreteProduct1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"具体产品1显示..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体产品2
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteProduct2</span> <span class="token keyword">implements</span> <span class="token class-name">product</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ConcreteProduct2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"具体产品2显示..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体产品3
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteProduct3</span> <span class="token keyword">implements</span> <span class="token class-name">product</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ConcreteProduct3<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"具体产品3显示..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     简单工厂
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">SimpleFactory</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> product <span class="token function">makeProduct</span><span class="token punctuation">(</span>Constant c<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> PRODUCT_1<span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProduct1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> PRODUCT_2<span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProduct2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> PRODUCT_3<span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProduct3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-4-工厂方法模式-Factory-Method"><a href="#2-4-工厂方法模式-Factory-Method" class="headerlink" title="2.4 工厂方法模式-Factory Method"></a>2.4 工厂方法模式-Factory Method</h3><blockquote>
<p>说明</p>
</blockquote>
<p>工厂方法模式是对简单工厂模式的进一步抽象化，其好处是可以使系统在不修改原来代码的情况下引进新的产品，即满足开闭原则。</p>
<p>工厂方法模式考虑的是一种工厂负责一类产品的生产，畜牧场只养动物、电视机厂只生产电视机、计算机软件学院只培养计算机软件专业的学生等。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>用户只需要具体工厂的名称就可得到所要的产品，无需知道产品的具体创建过程。</li>
<li>灵活性增强，对于新产品的创建，只需多写一个相应的工厂类。</li>
<li>典型的解耦框架。高层模块只需要知道产品的抽象类，无需关系其他实现类，满足迪米特法则、依赖倒置原则和里式替换原则。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>类的个数容易过多，增加复杂度。</li>
<li>增加了系统的抽象性和理解难度。</li>
<li>一个工厂只能生产一种产品，此弊端可使用抽象工厂模式解决。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象工厂(Abstract Factory)：提供了创建产品的接口，调用者通过它访问具体工厂的工厂方法类创建产品。</li>
<li>具体工厂(Concrete Factory)：主要是实现抽象工厂中的抽象方法，完成具体产品的创建。</li>
<li>抽象产品(Abstract Product)：定义了产品的规范，描述了产品的主要特性和功能。</li>
<li>具体产品(Concrete Product)：实现了抽象产品角色定义的接口，由具体工厂来创建，它同具体工厂之间一一对应。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>factoryMethod<span class="token punctuation">.</span>pattern<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>Document<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>NodeList<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>sax<span class="token punctuation">.</span>SAXException<span class="token punctuation">;</span>

<span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span>DocumentBuilder<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span>DocumentBuilderFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span>ParserConfigurationException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> Project: DesignPattern &lt;/p>
 * &lt;p> Package: top.parak.factoryMethod.pattern &lt;/p>
 * &lt;p> FileName: FactoryMethod &lt;p>
 * &lt;p> Description: 工厂方法模式 &lt;p>
 * &lt;p> Created By IntelliJ IDEA &lt;/p>
 *
 * @author KHighness
 * @since 2020/10/17
 */</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>测试类&lt;/p>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FactoryMethodDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>FactoryMethodDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>
     * 读取XML配置文件，提取具体类名，返回实例对象集合
     * &lt;/p>
     * @return List&lt;Object>
     * @throws IOException
     * @throws SAXException
     * @throws ParserConfigurationException
     * @throws ClassNotFoundException
     * @throws IllegalAccessException
     * @throws InstantiationException
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">getObjects</span><span class="token punctuation">(</span>String filePath<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> SAXException<span class="token punctuation">,</span> ParserConfigurationException<span class="token punctuation">,</span>  ClassNotFoundException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> InstantiationException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        DocumentBuilderFactory documentBuilderFactory <span class="token operator">=</span> DocumentBuilderFactory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        DocumentBuilder documentBuilder <span class="token operator">=</span> documentBuilderFactory<span class="token punctuation">.</span><span class="token function">newDocumentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Document document <span class="token operator">=</span> documentBuilder<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        NodeList nodeList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"className"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>Object<span class="token operator">></span> objects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nodeList<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            String packageName <span class="token operator">=</span> FactoryMethodDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            String className <span class="token operator">=</span> nodeList<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTextContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>packageName <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>
            objects<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> objects<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            List<span class="token operator">&lt;</span>Object<span class="token operator">></span> objects <span class="token operator">=</span> <span class="token function">getObjects</span><span class="token punctuation">(</span><span class="token string">"src/main/java/top/parak/factoryMethod/pattern/config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            objects<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> o <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                AbstractFactory factory <span class="token operator">=</span> <span class="token punctuation">(</span>AbstractFactory<span class="token punctuation">)</span> o<span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    factory<span class="token punctuation">.</span><span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;P>
 *     抽象产品
 * &lt;/p>
 */</span>
<span class="token keyword">interface</span> <span class="token class-name">product</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体产品1
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteProduct1</span> <span class="token keyword">implements</span> <span class="token class-name">product</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ConcreteProduct1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"具体产品1展示..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体产品2
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteProduct2</span> <span class="token keyword">implements</span> <span class="token class-name">product</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ConcreteProduct2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"具体产品2展示..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体产品3
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteProduct3</span> <span class="token keyword">implements</span> <span class="token class-name">product</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ConcreteProduct3<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"具体产品3展示..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     抽象工厂
 * &lt;/p>
 */</span>
<span class="token keyword">interface</span> <span class="token class-name">AbstractFactory</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> product <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体工厂1
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteFactory1</span> <span class="token keyword">implements</span> <span class="token class-name">AbstractFactory</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ConcreteFactory1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> product <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"具体工厂1生产中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"===>产品1生产完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProduct1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体工厂2
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteFactory2</span> <span class="token keyword">implements</span> <span class="token class-name">AbstractFactory</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ConcreteFactory2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> product <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"具体工厂2生产中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"===>产品2生产完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProduct2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体工厂3
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteFactory3</span> <span class="token keyword">implements</span> <span class="token class-name">AbstractFactory</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ConcreteFactory3<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> product <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"具体工厂3生产中..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"===>产品3生产完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteProduct3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>config.xml</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>config</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>className</span><span class="token punctuation">></span></span>ConcreteFactory1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>className</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>className</span><span class="token punctuation">></span></span>ConcreteFactory2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>className</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>className</span><span class="token punctuation">></span></span>ConcreteFactory3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>className</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>config</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>运行结果</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">2020-10-17 11:25:34 PARAK INFO  [top.parak.factoryMethod.pattern.ConcreteFactory1] [thread: main] [FactoryMethod.java: 143] - 具体工厂1生产中...
2020-10-17 11:25:35 PARAK INFO  [top.parak.factoryMethod.pattern.ConcreteFactory1] [thread: main] [FactoryMethod.java: 149] - ===>产品1生产完成
2020-10-17 11:25:35 PARAK INFO  [top.parak.factoryMethod.pattern.ConcreteProduct1] [thread: main] [FactoryMethod.java: 98] - 具体产品1展示...
2020-10-17 11:25:35 PARAK INFO  [top.parak.factoryMethod.pattern.ConcreteFactory2] [thread: main] [FactoryMethod.java: 162] - 具体工厂2生产中...
2020-10-17 11:25:36 PARAK INFO  [top.parak.factoryMethod.pattern.ConcreteFactory2] [thread: main] [FactoryMethod.java: 168] - ===>产品2生产完成
2020-10-17 11:25:36 PARAK INFO  [top.parak.factoryMethod.pattern.ConcreteProduct2] [thread: main] [FactoryMethod.java: 110] - 具体产品2展示...
2020-10-17 11:25:36 PARAK INFO  [top.parak.factoryMethod.pattern.ConcreteFactory3] [thread: main] [FactoryMethod.java: 181] - 具体工厂3生产中...
2020-10-17 11:25:37 PARAK INFO  [top.parak.factoryMethod.pattern.ConcreteFactory3] [thread: main] [FactoryMethod.java: 187] - ===>产品3生产完成
2020-10-17 11:25:37 PARAK INFO  [top.parak.factoryMethod.pattern.ConcreteProduct3] [thread: main] [FactoryMethod.java: 122] - 具体产品3展示...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-5-抽象工厂模式-Abstract-Factory"><a href="#2-5-抽象工厂模式-Abstract-Factory" class="headerlink" title="2.5 抽象工厂模式-Abstract Factory"></a>2.5 抽象工厂模式-Abstract Factory</h3><blockquote>
<p>说明</p>
</blockquote>
<p>工厂方法模式：一个工厂只负责一类产品的生产，像小作坊，电器厂只生产电风扇。<br>抽象工厂模式：一个工厂负责多种相关产品的生产，像综合型工厂，电器厂生产电视机、空调和冰箱等。</p>
<p>抽象工厂模式是工厂方法模式的升级版本，工厂方法模式只生产一个等级的产品，抽象工厂模式可生产多个等级的产品。</p>
<blockquote>
<p>定义</p>
</blockquote>
<p>一种为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构。</p>
<blockquote>
<p>使用条件</p>
</blockquote>
<ul>
<li>系统中有多个产品族，每个具体工厂创建同一族但属于不同等级结构的产品。</li>
<li>系统一次只可能消费其中某一族产品，即同族的产品一起使用。</li>
</ul>
<blockquote>
<p>优点</p>
</blockquote>
<p>除了包含工厂方法模式的优点，还有如下优点：</p>
<ul>
<li>可以在类的内部对产品族中相关联的多等级产品共同管理，而不必专门引入多个新的类来进行管理。</li>
<li>当需要产品族时，抽象工厂可以保证客户端始终只使用同一个产品的产品族。</li>
<li>抽象工厂增强了程序的可扩展性，当增加一个新的产品族时，不需要修改原代码，满足开闭原则。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<p>当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改。增加了系统的抽象性和理解难度。</p>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象工厂(Abstract Factory)：提供了创建产品的接口，它包含多个创建产品的方法，可以创建多个不同等级的产品。</li>
<li>具体工厂(Concrete Factory)：主要是实现抽象工厂中的多个抽象方法，完成具体产品的创建。</li>
<li>抽象产品(Abstract Product)：定义了产品的规范，描述了产品的主要特性和功能，抽象工厂模式有多个抽象产品。</li>
<li>具体产品(Concrete Product)：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间是多对一的关系。</li>
</ul>
<blockquote>
<p>实例</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>abstractFactory<span class="token punctuation">.</span>example<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> Project: DesignPattern &lt;/p>
 * &lt;p> Package: top.parak.abstractFactory.example &lt;/p>
 * &lt;p> FileName: Farm &lt;p>
 * &lt;p> Description: 抽象工厂模式模拟农场 &lt;p>
 * &lt;p> Created By IntelliJ IDEA &lt;/p>
 *
 * @author KHighness
 * @since 2020/10/17
 */</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>border<span class="token punctuation">.</span>TitledBorder<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionEvent<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>ActionListener<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     农场测试类
 * &lt;/p>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FarmDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> JFrame frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"FarmDemo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> JDesktopPane desktopPane <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JDesktopPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> JPanel contentPane <span class="token operator">=</span> <span class="token punctuation">(</span>JPanel<span class="token punctuation">)</span> frame<span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> JPanel leftPanel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> ImageIcon backIcon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"img/Farm.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> JLabel rightLabel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span>backIcon<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> JLabel tipLabel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token string">"选择产品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> JButton produceButton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span><span class="token string">"开始生产"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> Font font <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"微软雅黑"</span><span class="token punctuation">,</span> Font<span class="token punctuation">.</span>PLAIN<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> JComboBox<span class="token operator">&lt;</span>String<span class="token operator">></span> productComboBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JComboBox</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> JTextArea textArea <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JTextArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> AbstractFarm baoXingFarm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaoXingFarm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> AbstractFarm zhouQiaoFarm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZhouQiaoFarm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">FarmDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        contentPane<span class="token punctuation">.</span><span class="token function">setOpaque</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        contentPane<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        rightLabel<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> backIcon<span class="token punctuation">.</span><span class="token function">getIconWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> backIcon<span class="token punctuation">.</span><span class="token function">getIconHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        desktopPane<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        desktopPane<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rightLabel<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        leftPanel<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>CYAN<span class="token punctuation">)</span><span class="token punctuation">;</span>
        leftPanel<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">420</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        desktopPane<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>leftPanel<span class="token punctuation">)</span><span class="token punctuation">;</span>

        leftPanel<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        tipLabel<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>
        tipLabel<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        leftPanel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tipLabel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        String<span class="token punctuation">[</span><span class="token punctuation">]</span> products <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"马"</span><span class="token punctuation">,</span> <span class="token string">"牛"</span><span class="token punctuation">,</span> <span class="token string">"青菜"</span><span class="token punctuation">,</span> <span class="token string">"白菜"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>String product <span class="token operator">:</span> products<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            productComboBox<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        productComboBox<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>
        produceButton<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>
        productComboBox<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        leftPanel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>productComboBox<span class="token punctuation">)</span><span class="token punctuation">;</span>
        produceButton<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        leftPanel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>produceButton<span class="token punctuation">)</span><span class="token punctuation">;</span>
        produceButton<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProductAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        textArea<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token string">"微软雅黑"</span><span class="token punctuation">,</span> Font<span class="token punctuation">.</span>PLAIN<span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        JScrollPane scrollPane <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JScrollPane</span><span class="token punctuation">(</span>textArea<span class="token punctuation">)</span><span class="token punctuation">;</span>
        scrollPane<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">280</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scrollPane<span class="token punctuation">.</span><span class="token function">setBorder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TitledBorder</span><span class="token punctuation">(</span><span class="token string">"生产日志"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scrollPane<span class="token punctuation">.</span><span class="token function">getViewport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setOpaque</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        leftPanel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>scrollPane<span class="token punctuation">)</span><span class="token punctuation">;</span>

        frame<span class="token punctuation">.</span><span class="token function">setContentPane</span><span class="token punctuation">(</span>desktopPane<span class="token punctuation">)</span><span class="token punctuation">;</span>
        frame<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">1500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>JFrame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">class</span> <span class="token class-name">ProductAction</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span>ActionEvent e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            JInternalFrame internalFrame <span class="token operator">=</span> null<span class="token punctuation">;</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>productComboBox<span class="token punctuation">.</span><span class="token function">getSelectedItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token string">"马"</span><span class="token operator">:</span>
                    internalFrame <span class="token operator">=</span> zhouQiaoFarm<span class="token punctuation">.</span><span class="token function">produceAnimalProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">showImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    textArea<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 周桥农场：新马出生\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token string">"牛"</span><span class="token operator">:</span>
                    internalFrame <span class="token operator">=</span> baoXingFarm<span class="token punctuation">.</span><span class="token function">produceAnimalProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">showImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    textArea<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 宝兴农场：新牛出生\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token string">"青菜"</span><span class="token operator">:</span>
                    internalFrame <span class="token operator">=</span> baoXingFarm<span class="token punctuation">.</span><span class="token function">producePlantProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">showImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    textArea<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 宝兴农场：青菜出生\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token string">"白菜"</span><span class="token operator">:</span>
                    internalFrame <span class="token operator">=</span> zhouQiaoFarm<span class="token punctuation">.</span><span class="token function">producePlantProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">showImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    textArea<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 周桥农场：白菜出生\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">default</span><span class="token operator">:</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            internalFrame<span class="token punctuation">.</span><span class="token function">setBounds</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            desktopPane<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>internalFrame<span class="token punctuation">)</span><span class="token punctuation">;</span>
            index <span class="token operator">=</span> <span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1200</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token keyword">private</span> String <span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">FarmDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     抽象产品：动物类
 * &lt;/p>
 */</span>
<span class="token keyword">interface</span> <span class="token class-name">AnimalProduct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> JInternalFrame <span class="token function">showImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     抽象产品：植物类
 * &lt;/p>
 */</span>
<span class="token keyword">interface</span> <span class="token class-name">PlantProduct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> JInternalFrame <span class="token function">showImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     动物产品展示窗口
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">AnimalFrame</span> <span class="token keyword">extends</span> <span class="token class-name">JInternalFrame</span> <span class="token keyword">implements</span> <span class="token class-name">AnimalProduct</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">AnimalFrame</span><span class="token punctuation">(</span>String animalName<span class="token punctuation">,</span> String imagePath<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Container contentPane <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        JPanel panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        panel<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        panel<span class="token punctuation">.</span><span class="token function">setBorder</span><span class="token punctuation">(</span>BorderFactory<span class="token punctuation">.</span><span class="token function">createTitledBorder</span><span class="token punctuation">(</span><span class="token string">"动物："</span> <span class="token operator">+</span> animalName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        JScrollPane scrollPane <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JScrollPane</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        contentPane<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>scrollPane<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>
        JLabel label <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span>imagePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setTitle</span><span class="token punctuation">(</span>animalName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setClosable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setIconifiable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setResizable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>DISPOSE_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> JInternalFrame <span class="token function">showImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     植物产品展示窗口
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">PlantFrame</span> <span class="token keyword">extends</span> <span class="token class-name">JInternalFrame</span> <span class="token keyword">implements</span> <span class="token class-name">PlantProduct</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">PlantFrame</span><span class="token punctuation">(</span>String plantName<span class="token punctuation">,</span> String imagePath<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Container contentPane <span class="token operator">=</span> <span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        JPanel panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        panel<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        panel<span class="token punctuation">.</span><span class="token function">setBorder</span><span class="token punctuation">(</span>BorderFactory<span class="token punctuation">.</span><span class="token function">createTitledBorder</span><span class="token punctuation">(</span><span class="token string">"植物："</span> <span class="token operator">+</span> plantName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        JScrollPane scrollPane <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JScrollPane</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>
        contentPane<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>scrollPane<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>
        JLabel label <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span>imagePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setTitle</span><span class="token punctuation">(</span>plantName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setClosable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setIconifiable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setResizable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>WindowConstants<span class="token punctuation">.</span>DISPOSE_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> JInternalFrame <span class="token function">showImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体动物产品：马类
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Horse</span> <span class="token keyword">extends</span> <span class="token class-name">AnimalFrame</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">Horse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"马-🐴"</span><span class="token punctuation">,</span> <span class="token string">"img/Horse.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体动物产品：牛类
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Cattle</span> <span class="token keyword">extends</span> <span class="token class-name">AnimalFrame</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">Cattle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"牛-🐮"</span><span class="token punctuation">,</span> <span class="token string">"img/Cattle.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体植物产品：青菜
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Vegetable</span> <span class="token keyword">extends</span> <span class="token class-name">PlantFrame</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">Vegetable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"青菜"</span><span class="token punctuation">,</span> <span class="token string">"img/Vegetable.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体植物产品：白菜
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Cabbage</span> <span class="token keyword">extends</span> <span class="token class-name">PlantFrame</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">Cabbage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"白菜"</span><span class="token punctuation">,</span> <span class="token string">"img/Cabbage.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     抽象工厂：农场类
 * &lt;/p>
 */</span>
<span class="token keyword">interface</span> <span class="token class-name">AbstractFarm</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> AnimalProduct <span class="token function">produceAnimalProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> PlantProduct <span class="token function">producePlantProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体工厂：宝兴农场
 *     生产产品：牛、青菜
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">BaoXingFarm</span> <span class="token keyword">implements</span> <span class="token class-name">AbstractFarm</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>BaoXingFarm<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> AnimalProduct <span class="token function">produceAnimalProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"宝兴农场===>新牛出生"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Cattle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> PlantProduct <span class="token function">producePlantProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"宝兴农场===>青菜长成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Vegetable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体农场：周桥农场
 *     生产产品：马、白菜
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ZhouQiaoFarm</span> <span class="token keyword">implements</span> <span class="token class-name">AbstractFarm</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ZhouQiaoFarm<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> AnimalProduct <span class="token function">produceAnimalProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"周桥农场===>新马出生"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Horse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> PlantProduct <span class="token function">producePlantProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"周桥农场===>白菜长成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Cabbage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>运行结果</p>
</blockquote>
<p><img src="../../../../Java/DesignPatternNote/DesignPattern/image-20201017185342528.png" alt="image-20201017185342528"></p>
<h3 id="2-6-建造者模式-Builder"><a href="#2-6-建造者模式-Builder" class="headerlink" title="2.6 建造者模式-Builder"></a>2.6 建造者模式-Builder</h3><blockquote>
<p>定义</p>
</blockquote>
<p>将一个复杂对象的构造与它的表示分离，使同样的构造过程可以创建不同的表示。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>封装性好，构建和表示分离。</li>
<li>扩展性好，各个具体的建造者相互独立，有利于系统的解耦。</li>
<li>客户端不必知道产品内部组成的细节，建造者可以对创建过程逐步细化，而不对其他模块产生任何影响，便于控制细节风险。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>产品的组成部分必须相同，这限制了其使用范围。</li>
<li>如果产品的内部变化复杂，如果产品内部发生变化，则建造者也要同步修改，后期维护成本较大。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li><p>产品角色(Product)：包含多个组件的复杂对象，由具体建造者来创建其各个零部件。</p>
</li>
<li><p>抽象建造者(Abstract Builder)：包含创建产品各个子部件的抽象方法的接口，通常还包含一个返回复杂产品的方法getResult()。</p>
</li>
<li><p>具体建造者(Concrete Builder)：实现抽象建造者的接口，完成复杂产品的各个部件的具体创建方法。</p>
</li>
<li><p>指挥者(Director)：它调用建造者对象中的部件构造与装配方法完成复杂对象的创建，在指挥者中不涉及具体产品的信息。</p>
</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>pattern<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> Project: DesignPattern &lt;/p>
 * &lt;p> Package: top.parak.builder.pattern &lt;/p>
 * &lt;p> FileName: Builder &lt;p>
 * &lt;p> Description: 建造者模式 &lt;p>
 * &lt;p> Created By IntelliJ IDEA &lt;/p>
 *
 * @author KHighness
 * @since 2020/10/17
 */</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>测试类&lt;/p>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BuilderDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>BuilderDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Builder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Director director <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Director</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Product product <span class="token operator">=</span> director<span class="token punctuation">.</span><span class="token function">construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>product<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     抽象产品类
 * &lt;/p>
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> String componentA<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String componentB<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String componentC<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     抽象建造者
 * &lt;/p>
 */</span>
<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> Product product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildComponentA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildComponentB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildComponentC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> Product <span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> product<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体建造者
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">Builder</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildComponentA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        product<span class="token punctuation">.</span><span class="token function">setComponentA</span><span class="token punctuation">(</span><span class="token string">"建造零件A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildComponentB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        product<span class="token punctuation">.</span><span class="token function">setComponentB</span><span class="token punctuation">(</span><span class="token string">"建造零件B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildComponentC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        product<span class="token punctuation">.</span><span class="token function">setComponentC</span><span class="token punctuation">(</span><span class="token string">"建造零件C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;P>
 *     指挥者
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Director</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Builder builder<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">Director</span><span class="token punctuation">(</span>Builder builder<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>builder <span class="token operator">=</span> builder<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> Product <span class="token function">construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">buildComponentA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">buildComponentB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        builder<span class="token punctuation">.</span><span class="token function">buildComponentC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-7-代理模式-Proxy"><a href="#2-7-代理模式-Proxy" class="headerlink" title="2.7 代理模式-Proxy"></a>2.7 代理模式-Proxy</h3><blockquote>
<p>定义</p>
</blockquote>
<p>由于某些原因需要给某对象提供一个代理以控制对该对象的访问。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>代理模式在客户端和目标对象之间起到一个中介作用和保护目标对象的作用。</li>
<li>代理对象可以扩展对象的功能。</li>
<li>代理模式能将客户端与目标对象分离，在一定程度上降低系统的耦合度，增加了系统的可扩展性。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>代理模式会造成系统设计中类的数量增加。</li>
<li>代理模式能将客户端与目标对象之间增加一个代理对象，会造成请求处理速度变慢。</li>
<li>增加了系统的复杂度。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象主题(Subject)：通过接口或抽象类声明真实主题和代理对象实现的业务方法。</li>
<li>真实主题(Real Subject)：实现了抽象主题中的具体业务，是代理对象锁代表的真实对象，是最终要引用的对象。</li>
<li>代理(Proxy)：提供了与真实主题相同的接口，其内部含有对真实主题的引用，它可以访问、控制或扩展真实主题的功能。</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>pattern<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> Project: DesignPattern &lt;/p>
 * &lt;p> Package: top.parak.proxy.pattern &lt;/p>
 * &lt;p> FileName: Proxy &lt;p>
 * &lt;p> Description: 代理模式 &lt;p>
 * &lt;p> Created By IntelliJ IDEA &lt;/p>
 *
 * @author KHighness
 * @since 2020/10/18
 */</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>测试类&lt;/p>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Proxy proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        proxy<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     抽象主题
 * &lt;/p>
 */</span>
<span class="token keyword">interface</span> <span class="token class-name">Subject</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     真实主题
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">RealSubject</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>RealSubject<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"访问真实主题..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     代理
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">Subject</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Proxy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> RealSubject realSubject<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>realSubject <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            realSubject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">preHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            realSubject<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">postHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"访问真实主题之前的预处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"访问真实主题之后的后续处理"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-8-适配器模式-Adapter"><a href="#2-8-适配器模式-Adapter" class="headerlink" title="2.8 适配器模式-Adapter"></a>2.8 适配器模式-Adapter</h3><blockquote>
<p>定义</p>
</blockquote>
<p>将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>客户端通过适配器可以透明地调用目标接口。</li>
<li>复用了现存的类，程序员不需要修改原有代码而复用现有的适配者类。</li>
<li>将目标类与适配者类解耦，解决了目标类和适配者类接口不一致的问题。</li>
<li>在很多业务场景中符合开闭原则。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>适配器编写过程需要结合业务场景全面考虑，可能会增加系统的复杂性。</li>
<li>增加代码阅读难度，过多使用适配器会使系统代码变得凌乱。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>目标接口(Target)：当前系统业务所期待的接口，可以是抽象类或者接口。</li>
<li>适配者类(Adaptee)：被访问和适配的现存组件库中的组件接口。</li>
<li>适配器类(Adapter)：转换器，通过继承或引用适配者的对象，把适配者接口转换目标接口，让客户端目标接口的格式访问适配者。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>adapter<span class="token punctuation">.</span>pattern<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> Project: DesignPattern &lt;/p>
 * &lt;p> Package: top.parak.adapter.pattern &lt;/p>
 * &lt;p> FileName: Adapter &lt;p>
 * &lt;p> Description: 适配器模式 &lt;p>
 * &lt;p> Created By IntelliJ IDEA &lt;/p>
 *
 * @author KHighness
 * @since 2020/10/18
 */</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;P>测试类&lt;/p>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdapterDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Target target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Adapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        target<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     目标接口
 * &lt;/p>
 */</span>
<span class="token keyword">interface</span> <span class="token class-name">Target</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     适配者接口
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Adaptee</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Adaptee<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">specificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"适配者中的业务代码被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     适配器类
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Adapter</span> <span class="token keyword">extends</span> <span class="token class-name">Adaptee</span> <span class="token keyword">implements</span> <span class="token class-name">Target</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token function">specificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-9-桥接模式-Bridge"><a href="#2-9-桥接模式-Bridge" class="headerlink" title="2.9 桥接模式-Bridge"></a>2.9 桥接模式-Bridge</h3><blockquote>
<p>定义</p>
</blockquote>
<p>将抽象与实现分离，使它们可以独立变化。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>抽象与实现分离，扩展能力强。</li>
<li>符合开闭原则。</li>
<li>符合合成复用原则。</li>
<li>其实现细节对客户透明。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>由于聚合关系建立在抽象层，要求开发者对抽象化进行设计与编程，能正确的识别出系统中两个独立变化的维度，这增加了系统的理解与设计难度。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象化角色(Abstraction)：定义抽象类，并包含一个对实现化对象的引用。</li>
<li>扩展抽象化角色(Refined Abstraction)：是抽象化角色的子类，实现父类中的业务方法，并通过组合关系调用实现化角色中的业务方法。</li>
<li>实现化角色(Implementor)：定义实现化角色的接口，供扩展抽象化角色调用。</li>
<li>具体实现化角色(Concrete Implementor)：给出实现化角色接口的具体实现。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>bridge<span class="token punctuation">.</span>pattern<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> Project: DesignPattern &lt;/p>
 * &lt;p> Package: top.parak.bridge.pattern &lt;/p>
 * &lt;p> FileName: Bridge &lt;p>
 * &lt;p> Description: 桥接模式 &lt;p>
 * &lt;p> Created By IntelliJ IDEA &lt;/p>
 *
 * @author KHighness
 * @since 2020/10/18
 */</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>测试类&lt;/p>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BridgeDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Implementor implementor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteImplementorA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Abstraction abstraction <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RefinedAbstraction</span><span class="token punctuation">(</span>implementor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        abstraction<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     实现化角色
 * &lt;/p>
 */</span>
<span class="token keyword">interface</span> <span class="token class-name">Implementor</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体实现化角色
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteImplementorA</span> <span class="token keyword">implements</span> <span class="token class-name">Implementor</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ConcreteImplementorA<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"具体实现化角色(Concrete Implementor)被访问"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     抽象化角色
 * &lt;/p>
 */</span>
<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Abstraction</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> Implementor implementor<span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token function">Abstraction</span><span class="token punctuation">(</span>Implementor implementor<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>implementor <span class="token operator">=</span> implementor<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     扩展抽象化角色
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">RefinedAbstraction</span> <span class="token keyword">extends</span> <span class="token class-name">Abstraction</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>RefinedAbstraction<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token function">RefinedAbstraction</span><span class="token punctuation">(</span>Implementor implementor<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>implementor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"扩展抽象化角色(Refined Abstraction)被访问"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        implementor<span class="token punctuation">.</span><span class="token function">operationImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-10-装饰模式-Decorator"><a href="#2-10-装饰模式-Decorator" class="headerlink" title="2.10 装饰模式-Decorator"></a>2.10 装饰模式-Decorator</h3><blockquote>
<p>定义</p>
</blockquote>
<p>在不改变现有对象结构的情况下，动态地给该对象增加一些职责的模式。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>装饰器是继承的有力补充，比继承灵活，在不改变原有对象的情况下，动态的给一个对象扩展功能，即插即用。</li>
<li>通过使用不用装饰类及这些装饰类的排列组合，可以实现不同效果。</li>
<li>装饰模式完全遵守开闭原则。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>装饰模式会增加许多子类，过度使用会增加程序的复杂性。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象构建角色(Component)：定义一个抽象接口以规范准备接附加责任的对象。</li>
<li>具体构建角色(Concrete Component)：实现抽象构件，通过装饰角色为其添加一些职责。</li>
<li>抽象装饰角色(Decorator)：继承抽象构件，并包含具体构件的实例，可以通过其子类扩展具体构件的功能。</li>
<li>具体装饰角色(Concrete Decorator)：实现抽象装饰的相关方法，并给具体构件对象添加附加的责任。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>decorator<span class="token punctuation">.</span>pattern<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> Project: DesignPattern &lt;/p>
 * &lt;p> Package: top.parak.decorator.pattern &lt;/p>
 * &lt;p> FileName: Decorator &lt;p>
 * &lt;p> Description: 装饰模式 &lt;p>
 * &lt;p> Created By IntelliJ IDEA &lt;/p>
 *
 * @author KHighness
 * @since 2020/10/18
 */</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>测试类&lt;/p>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DecoratorDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Component component1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        component1<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Component component2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteDecorator</span><span class="token punctuation">(</span>component1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        component2<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     抽象构件角色
 * &lt;/p>
 */</span>
<span class="token keyword">interface</span> <span class="token class-name">Component</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体构件角色
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteComponent</span> <span class="token keyword">implements</span> <span class="token class-name">Component</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ConcreteComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">ConcreteComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"创建具体构件角色"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"调用具体构件角色的方法operation()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     抽象装饰角色
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Decorator</span> <span class="token keyword">implements</span> <span class="token class-name">Component</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Component component<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Decorator</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>component <span class="token operator">=</span> component<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体装饰角色
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteDecorator</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ConcreteComponent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">ConcreteDecorator</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"为具体构件角色增加额外的功能function()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-11-外观模式-Facade"><a href="#2-11-外观模式-Facade" class="headerlink" title="2.11 外观模式-Facade"></a>2.11 外观模式-Facade</h3><blockquote>
<p>定义</p>
</blockquote>
<p>通过为多个复杂的子系统提供一个一致的接口，而使这些子系统更加容易被访问。外观模式对外有一个统一接口，外部应用程序不用关心内部子系统的具体细节，这样会大大降低应用程序的复杂度，提高了程序的可维护性。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>降低了子系统与客户端之间的耦合度，使得子系统高的变化不会影响调用它的客户类。</li>
<li>对客户屏蔽了子系统组件，减少了客户处理的对象数目，并使得子系统使用起来更加容易。</li>
<li>降低了大型软件系统中的编译依赖性，简化了系统在不同平台之间的移植过程，因为编译一个子系统不会影响其他的子系统，也不会影响外观对象。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>不能很好地限制客户使用子系统类，很容易带来未知风险。</li>
<li>增加新的子系统可能需要修改外观类或客户端的源代码，违背了开闭原则。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>外观角色(Facade)：为多个子系统对外提供一个共同的接口。</li>
<li>子系统角色(Sub System)：实现系统的部分功能，客户可以通过外观角色访问它。</li>
<li>客户角色(Client)：通过一个外观角色访问各个子系统的功能。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>facade<span class="token punctuation">.</span>pattern<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> Project: DesignPattern &lt;/P>
 * &lt;p> Package: top.parak.facade.pattern &lt;/p>
 * &lt;p> FileName: Facade &lt;p>
 * &lt;p> Description: 外观模式 &lt;p>
 * &lt;p> Created By IntelliJ IDEA &lt;/p>
 *
 * @author KHighness
 * @since 2020/10/19
 */</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>测试类&lt;/p>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FacadeDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Facade facade <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Facade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        facade<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Facade</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> SubSys1 subSys1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubSys1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> SubSys2 subSys2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubSys2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> SubSys3 subSys3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubSys3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        subSys1<span class="token punctuation">.</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        subSys2<span class="token punctuation">.</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        subSys3<span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">SubSys1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>SubSys1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"子系统1的method1被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">SubSys2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>SubSys2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"子系统2的method2被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>


<span class="token keyword">class</span> <span class="token class-name">SubSys3</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>SubSys3<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"子系统3的method3被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-12-享元模式-Flyweight"><a href="#2-12-享元模式-Flyweight" class="headerlink" title="2.12 享元模式-Flyweight"></a>2.12 享元模式-Flyweight</h3><blockquote>
<p>定义</p>
</blockquote>
<p>运用共享技术来有效地支持大量细粒度对象的复用。</p>
<blockquote>
<p>优势</p>
</blockquote>
<p>相同对象只保存一份，这降低了系统中对象的数量，从而降低了系统中细粒度对象给内存带来的压力。</p>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>为了使对象可以共享，需要将一些不能共享的状态外部化，这将增加程序的复杂性。</li>
<li>读取享元模式的外部状态会使得运行时间稍微变长。</li>
</ul>
<blockquote>
<p>状态</p>
</blockquote>
<ul>
<li>内部状态：不会随着环境的改变而改变的可共享部分。</li>
<li>外部状态：随着环境改变而改变的不可以共享的部分。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象享元角色(Flyweight)：所有的具体享元类的基类，为具体享元规范需要实现的公共接口，非享元的外部状态以参数的形式通过方法传入。</li>
<li>具体享元角色(Concrete Flyweight)：实现抽象享元角色中所规定的接口。</li>
<li>非享元角色(Unsharable Flyweight)：是不可以共享的外部状态，它以参数的形式注入具体享元的相关方法中。</li>
<li>享元工厂角色(Flyweight Factory)：负责创建和管理享元角色。当客户对象请求的时候，享元工厂检查系统中是否存在符合要求的享元对象，如果存在则提供给客户；如果不存在的话，则创建一个新的享元对象。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>flyweight<span class="token punctuation">.</span>pattern<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> Project: DesignPattern &lt;/p>
 * &lt;p> Package: top.parak.flyweight.pattern &lt;/p>
 * &lt;p> FileName: Flyweight &lt;p>
 * &lt;p> Description: 享元模式 &lt;p>
 * &lt;p> Created By IntelliJ IDEA &lt;/p>
 *
 * @author KHighness
 * @since 2020/10/19
 */</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>AllArgsConstructor<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Setter<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;P>测试类&lt;/p>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlyweightDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        FlyweightFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlyweightFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Flyweight f1 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getFlyweight</span><span class="token punctuation">(</span><span class="token string">"K"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Flyweight f2 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getFlyweight</span><span class="token punctuation">(</span><span class="token string">"H"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Flyweight f3 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getFlyweight</span><span class="token punctuation">(</span><span class="token string">"I"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Flyweight f4 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getFlyweight</span><span class="token punctuation">(</span><span class="token string">"G"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Flyweight f5 <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getFlyweight</span><span class="token punctuation">(</span><span class="token string">"H"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        f1<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UnsharedConcreteFlyweight</span><span class="token punctuation">(</span><span class="token string">"第一次调用K"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        f2<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UnsharedConcreteFlyweight</span><span class="token punctuation">(</span><span class="token string">"第一次调用H"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        f3<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UnsharedConcreteFlyweight</span><span class="token punctuation">(</span><span class="token string">"第一次调用I"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        f4<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UnsharedConcreteFlyweight</span><span class="token punctuation">(</span><span class="token string">"第一次调用G"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        f5<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UnsharedConcreteFlyweight</span><span class="token punctuation">(</span><span class="token string">"第二次调用H"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     非享元角色
 * &lt;/p>
 */</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@Setter</span>
<span class="token annotation punctuation">@Getter</span>
<span class="token keyword">class</span> <span class="token class-name">UnsharedConcreteFlyweight</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> String info<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     抽象享元角色
 * &lt;/p>
 */</span>
<span class="token keyword">interface</span> <span class="token class-name">Flyweight</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span>UnsharedConcreteFlyweight concreteFlyweight<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体享元角色
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteFlyweight</span> <span class="token keyword">implements</span> <span class="token class-name">Flyweight</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ConcreteFlyweight<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> String key<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">ConcreteFlyweight</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"具体享元"</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">"被创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span>UnsharedConcreteFlyweight concreteFlyweight<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"具体享元"</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">"被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"非享元信息是："</span> <span class="token operator">+</span> concreteFlyweight<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     享元工厂角色
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">FlyweightFactory</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>FlyweightFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Flyweight<span class="token operator">></span> flyweightMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Flyweight<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> Flyweight <span class="token function">getFlyweight</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Flyweight flyweight <span class="token operator">=</span> <span class="token punctuation">(</span>Flyweight<span class="token punctuation">)</span> flyweightMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>flyweight <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"具体享元"</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">"已经存在，被成功获取！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            flyweight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteFlyweight</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
            flyweightMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> flyweight<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> flyweight<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-13-组合模式-Composite"><a href="#2-13-组合模式-Composite" class="headerlink" title="2.13 组合模式-Composite"></a>2.13 组合模式-Composite</h3><blockquote>
<p>定义</p>
</blockquote>
<p>有时又叫做部分-整体模式，它是一种将对象组合成树状的层次结构的模式，用来表示”部分-整体”的关系，使用户对单个组合对象具有一致的访问性。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>组合模式使得客户端代码可以一致地处理单个对象和组合对象，无须关心自己处理的是单个对象，还是组合对象，这简化了客户端代码。</li>
<li>更容易在组合体内加入了新的对象，客户端不会因为加入了新的对象而更改源代码，满足开闭原则。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>设计较复杂，客户端需要花更多时间理清类之间的层次关系。</li>
<li>不容易限制容器中的构件。</li>
<li>不容易用继承的方法来增加构件的新功能。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象构件角色(Component)：它的主要作用是为树叶构件和树枝构件声明公共接口，并实现它们的默认行为，在透明式的组合模式中抽象插件还声明访问和管理子类的接口；在安全式的组合模式中不声明访问和管理子类的接口，管理工作由树枝构件完成。</li>
<li>树叶构件角色(Leaf)：是组合模式中的叶子结点，没有子结点，用于实现抽象构件角色中声明的公共接口。</li>
<li>树枝构件角色(Composite)：是组合模式中的分支结点对象，有子结点，它实现了抽象构件角色中声明的接口，主要作用是存储和管理子部件，通常包含add()、remove()、getChild()等方法。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>composite<span class="token punctuation">.</span>pattern<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> Project: DesignPattern &lt;/p>
 * &lt;p> Package: top.parak.composite.pattern &lt;/p>
 * &lt;p> FileName: Composite &lt;p>
 * &lt;p> Description: 组合模式 &lt;p>
 * &lt;p> Created By IntelliJ IDEA &lt;/p>
 *
 * @author KHighness
 * @since 2020/10/19
 */</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>测试类&lt;/p>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompositeDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Component component0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Component component1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Component component2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Component component3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Component component4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        component0<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>component2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        component0<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>component1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        component1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>component3<span class="token punctuation">)</span><span class="token punctuation">;</span>
        component1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>component4<span class="token punctuation">)</span><span class="token punctuation">;</span>
        component0<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     抽象构件
 * &lt;/p>
 */</span>
<span class="token keyword">interface</span> <span class="token class-name">Component</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Component c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>Component c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> Component <span class="token function">getChild</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     树叶构件
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Leaf</span> <span class="token keyword">implements</span> <span class="token class-name">Component</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Leaf<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Leaf</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Component c<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>Component c<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Component <span class="token function">getChild</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"树叶"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"被访问"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
     <span class="token operator">*</span><span class="token operator">*</span>
 <span class="token operator">*</span> <span class="token operator">&lt;</span>p<span class="token operator">></span>
 <span class="token operator">*</span>     树枝构件
 <span class="token operator">*</span> <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
 <span class="token operator">*</span><span class="token operator">/</span>
<span class="token keyword">class</span> <span class="token class-name">Composite</span> <span class="token keyword">implements</span> <span class="token class-name">Component</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Component<span class="token operator">></span> children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Component c<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        children<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>Component c<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        children<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Component <span class="token function">getChild</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> children<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object obj <span class="token operator">:</span> children<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span>Component<span class="token punctuation">)</span> obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-14-模板方法模式-Template-Method"><a href="#2-14-模板方法模式-Template-Method" class="headerlink" title="2.14 模板方法模式-Template Method"></a>2.14 模板方法模式-Template Method</h3><blockquote>
<p>定义</p>
</blockquote>
<p>定义一个操作中的算法骨架，而将算法中的一些步骤延迟到子类中，使得子类可以不改变算法结构的情况下重定义该算法的某些特定步骤。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>封装了不变部分，扩展可变部分。它把认为是不变部分的算法封装到父类实现中，而把可变部分算法由子类继承实现，便于子类继续扩展。</li>
<li>它在父类中提取了公共的部分代码，便于代码复用。</li>
<li>部分方法是子类实现的，因此子类可以通过扩展方式增加相应的功能，符合开闭原则。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>对每个不同的实现都需要定义一个子类，这会导致类的个数增加，系统更加庞大，设计也更加抽象。</li>
<li>父类中的抽象方法由子类实现，子类执行的结果会影响父类的结果，这导致一种反向的控制结构，它提高了代码阅读的难度。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象类(Abstract class)：负责给出一个算法的轮廓和骨架。它由一个模板方法和若干个基本方法构成<ul>
<li>模板方法：定义了算法的骨架，按某种顺序调用其包含的基本方法</li>
<li>基本方法：<ul>
<li>抽象方法：在抽象类中申明，由具体子类中可以继承或重写它。</li>
<li>具体方法：在抽象类中已经实现，在具体子类中可以继承或重写它。</li>
<li>钩子方法：在抽象类中已经实现，包括用于判断的逻辑方法和需要子类重写的孔方法两种。</li>
</ul>
</li>
</ul>
</li>
<li>具体子类(Concrete Class)：实现抽象类中所定义的抽象方法和钩子方法，它们是一个顶级逻辑的一个组成步骤。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>templateMethod<span class="token punctuation">.</span>pattern<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> Project: DesignPattern &lt;/p>
 * &lt;p> Package: top.parak.templateMethod.pattern &lt;/p>
 * &lt;p> FileName: TemplateMethodDemo &lt;p>
 * &lt;p> Description: &lt;p>
 * &lt;p> Created By IntelliJ IDEA &lt;/p>
 *
 * @author KHighness
 * @since 2020/11/7
 */</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>测试类&lt;/p>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TemplateMethodDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        AbstractClass abstractClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        abstractClass<span class="token punctuation">.</span><span class="token function">templateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;P>
 *     抽象类
 * &lt;/p>
 */</span>
<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractClass</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>AbstractClass<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/* 模板方法 */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">templateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token function">specificMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">abstractMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">abstractMethod2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/* 具体方法 */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">specificMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"具体方法被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/* 抽象方法1 */</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">abstractMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* 抽象方法2 */</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">abstractMethod2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">ConcreteClass</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractClass</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ConcreteClass<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">abstractMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"抽象方法1的实现被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">abstractMethod2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"抽象方法2的实现被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-15-策略模式-Strategy"><a href="#2-15-策略模式-Strategy" class="headerlink" title="2.15 策略模式-Strategy"></a>2.15 策略模式-Strategy</h3><blockquote>
<p>定义</p>
</blockquote>
<p>该模式定义了一系列算法，并将每个算法封装起来，使它们可以相互依赖，且算法的变化不会影响到使用算法的用户。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>多重条件语句不易维护，而使用策略模式可以避免使用多重条件语句。</li>
<li>策略模式提供了一系列的可供重用的算法族，恰当使用继承可以把算法族的公共代码转移到父类里面，从而避免重复的代码。</li>
<li>策略模式可以提供相同行为的不同实现，客户可以根据不同时间或空间要求选择不同的。</li>
<li>策略模式提供了对开闭原则的完美支持，可以在不修改原代码的情况下，灵活增加新算法。</li>
<li>策略模式把算法的使用放到环境类中，而算法的实现移到具体策略类中，实现了二者的分离。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>客户端必须理解所有策略算法的区别，以便适时选择恰当的算法类。</li>
<li>策略模式造成很多的策略类。</li>
</ul>
<blockquote>
<p> 结构</p>
</blockquote>
<ul>
<li>抽象策略类(Strategy)：定义了一个公共接口，各种不同的算法以不同的方式实现这个接口，环境角色使用这个接口调用不同的算法，一般使用接口或抽象类实现。</li>
<li>具体策略类(Concrete Strategy)：实现了抽象了策略定义的接口，环境角色使用这个接口调用不同的算法，一般使用接口或抽象类实现。</li>
<li>环境类(Context)：持有一个策略类的引用，最终给客户端调用。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>strategy<span class="token punctuation">.</span>pattern<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> Project: DesignPattern &lt;/p>
 * &lt;p> Package: top.parak.strategy.pattern &lt;/p>
 * &lt;p> FileName: StrategyDemo &lt;p>
 * &lt;p> Description: 策略模式 &lt;p>
 * &lt;p> Created By IntelliJ IDEA &lt;/p>
 *
 * @author KHighness
 * @since 2020/11/7
 */</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>测试类&lt;/p>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StrategyDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Context context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Strategy strategy1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteStrategyA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Strategy strategy2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteStrategyB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span>strategy1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">strategyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span>strategy2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">strategyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     抽象策略类
 * &lt;/p>
 */</span>
<span class="token keyword">interface</span> <span class="token class-name">Strategy</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">strategyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体策略类A
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteStrategyA</span> <span class="token keyword">implements</span> <span class="token class-name">Strategy</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ConcreteStrategyA<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">strategyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"具体策略A的策略方法被访问"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体策略类B
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteStrategyB</span> <span class="token keyword">implements</span> <span class="token class-name">Strategy</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ConcreteStrategyB<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">strategyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"具体策略B的策略方法被访问"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     环境类
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Strategy strategy<span class="token punctuation">;</span>
    <span class="token keyword">public</span> Strategy <span class="token function">getStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> strategy<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStrategy</span><span class="token punctuation">(</span>Strategy strategy<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>strategy <span class="token operator">=</span> strategy<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">strategyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        strategy<span class="token punctuation">.</span><span class="token function">strategyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-16-命令模式-Command"><a href="#2-16-命令模式-Command" class="headerlink" title="2.16 命令模式-Command"></a>2.16 命令模式-Command</h3><blockquote>
<p>定义</p>
</blockquote>
<p>将请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。这样两者之间通过命令对象进行沟通，这样方便将命令对象进行储存、传递、调用、增加与管理。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>降低系统的耦合度。命令模式能将调用操作的对象与实现该操作的对象解耦。</li>
<li>增加或删除命令非常方便。采用命令模式增加与删除命令不会影响其他类，它满足开闭原则，对拓展比较灵活。</li>
<li>可以实现宏命令。命令模式可以与组合模式结合，将多个命令装配成一个组合命令，即宏命令。</li>
<li>方便实现Undo和Redo操作。命令模式可以与备忘录模式结合，实现命令的撤销与恢复。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<p>可能产生大量具体命令类。因为对每一个具体操作都需要设计一个具体命令类，这将增加系统的复杂性。</p>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象命令类(Command)：声明执行命令的接口，拥有执行命令的抽象方法execute()。</li>
<li>具体命令角色(Concrete Command)：是抽象命令类的具体实现类，它拥有接收者对象，并通过调用接收者的功能来完成命令要执行的操作。</li>
<li>接收者(Receiver)：执行命令功能的相关操作，是具体命令对象业务的真正实现者。</li>
<li>请求者(Invoker)：请求的发送者，它通常拥有很多的命令对象，并通过访问命令对象类执行相关请求，它不张子杰访问接收者。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>command<span class="token punctuation">.</span>pattern<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> Project: DesignPattern &lt;/p>
 * &lt;p> Package: top.parak.command.pattern &lt;/p>
 * &lt;p> FileName: CommandDemo &lt;p>
 * &lt;p> Description: 命令模式 &lt;p>
 * &lt;p> Created By IntelliJ IDEA &lt;/p>
 *
 * @author KHighness
 * @since 2020/11/7
 */</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>测试类&lt;/p>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommandDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>CommandDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Command command <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Invoker invoker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Invoker</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"客户访问调用者的call方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        invoker<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     调用者
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Invoker</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Invoker<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Command command<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">Invoker</span><span class="token punctuation">(</span>Command command<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>command <span class="token operator">=</span> command<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCommand</span><span class="token punctuation">(</span>Command command<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>command <span class="token operator">=</span> command<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"调用者执行命令command"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     抽象命令
 * &lt;/p>
 */</span>
<span class="token keyword">interface</span> <span class="token class-name">Command</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>具体命令&lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Receiver receiver<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">ConcreteCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>receiver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Receiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        receiver<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>接收者&lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Receiver</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Receiver<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"接收者的action方法被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-17-责任链模式-Chain-of-Responsibility"><a href="#2-17-责任链模式-Chain-of-Responsibility" class="headerlink" title="2.17 责任链模式-Chain of Responsibility"></a>2.17 责任链模式-Chain of Responsibility</h3><blockquote>
<p>定义</p>
</blockquote>
<p>为了避免请求发送者与多个请求处理者耦合在一起，将所有请求的处理者通过前一对象记住其下一个对象的引用而连成一条链；当有请求发生时，可以将请求沿着这条链传递，直到有对象处理它为止。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>降低了对象之间的耦合度。该模式使得一个对象无须知道到底是哪一个对象处理其请求以及链的结构，发送者和接收者也无须拥有对方的明确信息。</li>
<li>增强了系统的可扩展性。可以根据需要增加新的请求处理类，满足开闭原则。</li>
<li>增强了给对象指派职责的灵活性。当工作流程发生变化，可以动态地改变链内的成员或者调动它们的次序，也可动态地新增或者删除责任。</li>
<li>责任链简化了对象之间的连接。每个对象只需保持一个指向其后继者的引用，不需保持其他所有处理者的引用，这避免了使用众多的if-else语句。</li>
<li>责任分担。每个类只需要处理自己该处理的工作，不该处理的传递给下一个对象完成，明确各类的责任范围，符合类的单一职责原则。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>不能保证每个请求一定被处理。由于一个请求没有明确的接收者，所以不能保证它一定会被处理，该请求可能一直传到链的末端都得不到处理。</li>
<li>对比较长的责任链，请求的处理可能涉及多个处理对象，系统性能将受到一个影响。</li>
<li>职责链的建立的合理性要靠客户端来保证，增加了客户端的复杂性，可能会由于责任链的错误设置而导致系统出错，如可能还会造成循环调用。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li><p>抽象处理者(Handler)：定义一个处理请求的接口，包含抽象处理方法和一个后继连接。</p>
</li>
<li><p>具体处理者(Concrete Handler)：实现抽象处理者的处理方法，判断能否本次请求，如果可以处理请求则处理，否则将给请求转给它的后继者。</p>
</li>
<li><p>客户类(Client)：创建处理链，并向链头的具体处理者对象提交请求，它不关心处理细节和请求的传递过程。</p>
</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>chainofResposibility<span class="token punctuation">.</span>example<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> Project: DesignPattern &lt;/p>
 * &lt;p> Package: top.parak.chainofResposibility.example &lt;/p>
 * &lt;p> FileName: Main &lt;p>
 * &lt;p> Description: 责任链Demo &lt;p>
 * &lt;p> Created By IntelliJ IDEA &lt;/p>
 *
 * @author KHighness
 * @since 2020/10/23
 */</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     测试类
 * &lt;/p>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Support RubbishK <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoSupport</span><span class="token punctuation">(</span><span class="token string">"RubbishK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Support FlowerK <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LimitSupport</span><span class="token punctuation">(</span><span class="token string">"FlowerK"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Support EyedropK <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LimitSupport</span><span class="token punctuation">(</span><span class="token string">"EyedropK"</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Support UnknownK <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpecialSupport</span><span class="token punctuation">(</span><span class="token string">"UnknownK"</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Support KHighness <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpecialSupport</span><span class="token punctuation">(</span><span class="token string">"KHighness"</span><span class="token punctuation">,</span> <span class="token number">330</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Support BrotherK <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OddSupport</span><span class="token punctuation">(</span><span class="token string">"BrotherK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 制造责任链</span>
        RubbishK<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>FlowerK<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>EyedropK<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>UnknownK<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>KHighness<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>BrotherK<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 制造问题</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            RubbishK<span class="token punctuation">.</span><span class="token function">support</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Trouble</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     发生的问题的类
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Trouble</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> number<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Trouble</span><span class="token punctuation">(</span><span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">=</span> number<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> number<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"[Trouble "</span> <span class="token operator">+</span>
                <span class="token string">"number="</span> <span class="token operator">+</span> number <span class="token operator">+</span>
                <span class="token string">']'</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     用来解决问的抽象类
 * &lt;/p>
 */</span>
<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Support</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Support<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Support next<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Support</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> Support <span class="token function">setNext</span><span class="token punctuation">(</span>Support next<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
        <span class="token keyword">return</span> next<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"["</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">support</span><span class="token punctuation">(</span>Trouble trouble<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">resolve</span><span class="token punctuation">(</span>trouble<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token function">done</span><span class="token punctuation">(</span>trouble<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            next<span class="token punctuation">.</span><span class="token function">support</span><span class="token punctuation">(</span>trouble<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token function">fail</span><span class="token punctuation">(</span>trouble<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">boolean</span> <span class="token function">resolve</span><span class="token punctuation">(</span>Trouble trouble<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">done</span><span class="token punctuation">(</span>Trouble trouble<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>trouble <span class="token operator">+</span> <span class="token string">" is resolved by "</span> <span class="token operator">+</span> <span class="token keyword">this</span> <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">fail</span><span class="token punctuation">(</span>Trouble trouble<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>trouble <span class="token operator">+</span> <span class="token string">" cannot be resolved."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     解决问题具体类：不能解决问题
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">NoSupport</span> <span class="token keyword">extends</span> <span class="token class-name">Support</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">NoSupport</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">resolve</span><span class="token punctuation">(</span>Trouble trouble<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     解决问题具体类：解决问题编号小于limit值得类
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">LimitSupport</span> <span class="token keyword">extends</span> <span class="token class-name">Support</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> limit<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">LimitSupport</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> limit<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">=</span> limit<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">resolve</span><span class="token punctuation">(</span>Trouble trouble<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>trouble<span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> limit<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     解决问题具体类：解决奇数编号得问题
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">OddSupport</span> <span class="token keyword">extends</span> <span class="token class-name">Support</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">OddSupport</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">resolve</span><span class="token punctuation">(</span>Trouble trouble<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>trouble<span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     解决问题具体类：只解决指定编号得问题
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">SpecialSupport</span> <span class="token keyword">extends</span> <span class="token class-name">Support</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> number<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">SpecialSupport</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> number<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">=</span> number<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">resolve</span><span class="token punctuation">(</span>Trouble trouble<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>trouble<span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>number<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-18-状态模式-State"><a href="#2-18-状态模式-State" class="headerlink" title="2.18 状态模式-State"></a>2.18 状态模式-State</h3><blockquote>
<p>定义</p>
</blockquote>
<p>对有状态的对象，把复杂的“判断逻辑”提取到不同的状态对象中，允许状态对象在其内部状态发生改变时改变其行为。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>状态模式与特定状态相关的行为局部化到一个状态中，并且将不同状态的行为分割开来，满足单一职责原则。</li>
<li>减少对象间的相互依赖。将不同的状态引入独立的对象中会使得状态变得更加明确，切减少对象间的相互依赖。</li>
<li>有利于程序的拓展。通过定义新的子类很容易德增加新的状态和转换。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>状态模式的使用必然会增加系统的类与对象的个数。</li>
<li>状态模式的结构和实现都较为复杂，如果使用不当会导致程序结构和代码的混乱。 </li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>环境类(Context)：也称为上下文，它定义了客户感兴趣的接口，维护一个当前状态，并将与状态相关的操作都委托给当前状态对象类处理。</li>
<li>抽象状态类(State)：定义一个接口，用以封装环境对象中特定状态所对应的行为。</li>
<li>具体状态类(Concrete State)：实现抽象状态所对应的行为。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java">'<span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>state<span class="token punctuation">.</span>pattern<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> Project: DesignPattern &lt;/p>
 * &lt;p> Package: top.parak.state.pattern &lt;/p>
 * &lt;p> FileName: StateDemo &lt;p>
 * &lt;p> Description: 状态模式 &lt;p>
 * &lt;p> Created By IntelliJ IDEA &lt;/p>
 *
 * @author KHighness
 * @since 2020/11/8
 */</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>测试类&lt;/p>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StateDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Context context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     环境类
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> State state<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* 初始状态 */</span>
    <span class="token keyword">public</span> <span class="token function">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteStateA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* 读取状态 */</span>
    <span class="token keyword">public</span> State <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> state<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* 设置状态 */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span>State state<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* 处理请求 */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        state<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     抽象状态类
 * &lt;/p>
 */</span>
<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">State</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体状态A类
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteStateA</span> <span class="token keyword">extends</span> <span class="token class-name">State</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ConcreteStateA<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前状态：A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcreteStateB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体状态B类
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteStateB</span> <span class="token keyword">extends</span> <span class="token class-name">State</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ConcreteStateB<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span>Context context<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前状态：B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        context<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcreteStateA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-19-观察者模式-Observer"><a href="#2-19-观察者模式-Observer" class="headerlink" title="2.19 观察者模式-Observer"></a>2.19 观察者模式-Observer</h3><blockquote>
<p>定义</p>
</blockquote>
<p>多个对象之间存在一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新，又叫做发布-订阅模式。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li><p>降低了目标与观察者之间的耦合关系，两者之间是抽象耦合关系。</p>
</li>
<li><p>目标与观察者之间建立了一套触发机制。</p>
</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>目标与观察者之间的依赖关系并没有完全解除，而且有可能出现循环引用。</li>
<li>当观察者对象很多时，通知的发布会花费很多时间，影响程序的效率。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象主题(Subject)：提供了一个用于保存观察者对象的聚集类和增加、增加观察者对象的方法，以及通知所有观察者的抽象方法。</li>
<li>具体主题(Concrete Subject)：实现抽象目标中的通知方法，当具体主题的内部状态发生改变时，通知所有注册过的观察者对象。</li>
<li>抽象观察者(Observer)：一个抽象类或者接口，包含了一个更新自己的抽象方法，当接到具体主题的更改通知时被调用。</li>
<li>具体观察者(Concrete Observer)：实现抽象观察者中定义的抽象方法，以便在得到目标的更改通知时更新自身的状态。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>observer<span class="token punctuation">.</span>pattern<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> Project: DesignPattern &lt;/p>
 * &lt;p> Package: top.parak.observer.pattern &lt;/p>
 * &lt;p> FileName: ObserverDemo &lt;p>
 * &lt;p> Description: 观察者模式 &lt;p>
 * &lt;p> Created By IntelliJ IDEA &lt;/p>
 *
 * @author KHighness
 * @since 2020/10/27
 */</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObserverDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Subject subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Observer<span class="token punctuation">[</span><span class="token punctuation">]</span> observers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Observer</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                observers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteObserver1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                observers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteObserver2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            subject<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        subject<span class="token punctuation">.</span><span class="token function">notifyObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     抽象目标
 * &lt;/p>
 */</span>
<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Subject</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> List<span class="token operator">&lt;</span>Observer<span class="token operator">></span> observers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Observer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* 增加观察者 */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        observers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* 删除观察者 */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        observers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* 通知观察者 */</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">notifyObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体目标
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteSubject</span> <span class="token keyword">extends</span> <span class="token class-name">Subject</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"具体目标发生改变"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"——————————————"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Observer observer <span class="token operator">:</span> observers<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            observer<span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     抽象观察者
 * &lt;/p>
 */</span>
<span class="token keyword">interface</span> <span class="token class-name">Observer</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* 作出反应 */</span>
    <span class="token keyword">void</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体观察者1
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteObserver1</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ConcreteObserver1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"具体观察者1作出反应"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;P>
 *     具体观察者2
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteObserver2</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ConcreteObserver2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"具体观察者2作出反应"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-20-中介者模式-Mediator"><a href="#2-20-中介者模式-Mediator" class="headerlink" title="2.20 中介者模式-Mediator"></a>2.20 中介者模式-Mediator</h3><blockquote>
<p>定义</p>
</blockquote>
<p>定义一个中介对象来封装一系列对象之间的交互，使原有对象直接的耦合松散，且可以独立地改变它们之间的交互。中介者模式又叫调停模式。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>降低了对象之间的耦合性，使得对象易于独立地被复用。</li>
<li>将对象之间的一对多关联转为一对一的关联，提高系统的灵活性，使得系统易于维护和拓展。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>当同事类太多时，中介者的职责职责将很大，它会变得复杂而庞大，以至于系统难以维护。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象中介者(Mediator)：它是中介者的接口，提供了同事对象注册与转发同事对象信息的抽象方法。</li>
<li>具体中介者(Concrete Mediator)：实现中介者接口，定义一个List来管理同事对象，协调各个同事角色之间的交互关系，因此它依赖于同事角色。</li>
<li>抽象同事类(Colleague)：定义同事类的接口，保存中介者对象，提供同事对象交互的抽象方法，实现所有相互影响的同事类的公共功能。</li>
<li>具体同事类(Concrete Colleague)：是抽象同事类的实现者，当需要与其他同事对象交互时，由中介者对象负责后续的交互。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>mediator<span class="token punctuation">.</span>pattern<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> Project: DesignPattern &lt;/p>
 * &lt;p> Package: top.parak.mediator.pattern &lt;/p>
 * &lt;p> FileName: MediatorDemo &lt;p>
 * &lt;p> Description: &lt;p>
 * &lt;p> Created By IntelliJ IDEA &lt;/p>
 *
 * @author KHighness
 * @since 2020/11/8
 */</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     中介者
 * &lt;/p>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MediatorDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Mediator mediator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteMediator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Colleague colleague1<span class="token punctuation">,</span> colleague2<span class="token punctuation">;</span>
        colleague1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteColleague1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        colleague2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteColleague2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mediator<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>colleague1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mediator<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>colleague2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        colleague1<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        colleague2<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     中介者
 * &lt;/p>
 */</span>
<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Mediator</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* 注册 */</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span>Colleague colleague<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* 转发 */</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">relay</span><span class="token punctuation">(</span>Colleague colleague<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体中介者
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteMediator</span> <span class="token keyword">extends</span> <span class="token class-name">Mediator</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Colleague<span class="token operator">></span> colleagues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span>Colleague colleague<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        colleagues<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>colleague<span class="token punctuation">)</span><span class="token punctuation">;</span>
        colleague<span class="token punctuation">.</span><span class="token function">setMediator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">relay</span><span class="token punctuation">(</span>Colleague colleague<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Colleague colleague1 <span class="token operator">:</span> colleagues<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>colleague1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>colleague<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                colleague1<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     抽象同事类
 * &lt;/p>
 */</span>
<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Colleague</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Colleague<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> Mediator mediator<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMediator</span><span class="token punctuation">(</span>Mediator mediator<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mediator <span class="token operator">=</span> mediator<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体同事类1
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteColleague1</span> <span class="token keyword">extends</span> <span class="token class-name">Colleague</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ConcreteColleague1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"具体同事类1收到请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"具体同事1发出请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mediator<span class="token punctuation">.</span><span class="token function">relay</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体同事类2
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteColleague2</span> <span class="token keyword">extends</span> <span class="token class-name">Colleague</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ConcreteColleague2<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"具体同事类2收到请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"具体同事2发出请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mediator<span class="token punctuation">.</span><span class="token function">relay</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-21迭代器模式-Iterator"><a href="#2-21迭代器模式-Iterator" class="headerlink" title="2.21迭代器模式-Iterator"></a>2.21迭代器模式-Iterator</h3><blockquote>
<p>定义</p>
</blockquote>
<p>提供一个对象来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>访问一个聚合对象的内容而无须暴露它的内部表示。</li>
<li>遍历任务交由迭代器完成，这简化了聚合类。</li>
<li>它支持以不同方式遍历一个聚合，甚至可以自定义迭代器的子类以支持新的遍历。</li>
<li>增加新的聚合类和迭代器都很方便，无须修改原有代码。</li>
<li>封装性良好，为遍历不同的聚合结构提供一个统一的接口。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>增加了类的个数，这在一定程度上增加了系统的复杂性。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象聚合角色(Aggregate)：定义存储、添加、删除聚合对象以及创建迭代器对象的接口。</li>
<li>具体聚合色(Concrete Aggregate)：实现抽象聚合类，返回一个具体迭代器的实例。</li>
<li>抽象迭代器角色(Iterator)：定义访问和遍历聚合元素的接口，通常包含hasNext()、first()、next()等方法。</li>
<li>具体迭代器角色(Concrete Iterator)：实现抽象迭代器接口中所定义的方法，完成对聚合对象的遍历，记录遍历的当前位置。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>iterator<span class="token punctuation">.</span>pattern<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> Project: DesignPattern &lt;/p>
 * &lt;p> Package: top.parak.iterator.pattern &lt;/p>
 * &lt;p> FileName: IteratorDemo &lt;p>
 * &lt;p> Description: 迭代器模式 &lt;p>
 * &lt;p> Created By IntelliJ IDEA &lt;/p>
 *
 * @author KHighness
 * @since 2020/10/27
 */</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IteratorDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>IteratorDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Aggregate aggregate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteAggregate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        aggregate<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"KHighness"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        aggregate<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ParaK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        aggregate<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"FlowerK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"聚合的内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Iterator iterator <span class="token operator">=</span> aggregate<span class="token punctuation">.</span><span class="token function">getIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     抽象聚合
 * &lt;/p>
 */</span>
<span class="token keyword">interface</span> <span class="token class-name">Aggregate</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> Iterator <span class="token function">getIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体聚合
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteAggregate</span> <span class="token keyword">implements</span> <span class="token class-name">Aggregate</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Iterator <span class="token function">getIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcreteIterator</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     抽象迭代器
 * &lt;/p>
 */</span>
<span class="token keyword">interface</span> <span class="token class-name">Iterator</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    Object <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Object <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体迭代器
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list <span class="token operator">=</span> null<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">ConcreteIterator</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Object<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Object <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        Object object <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> object<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Object <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Object object <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            object <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">++</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> object<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-22-访问者模式-Visitor"><a href="#2-22-访问者模式-Visitor" class="headerlink" title="2.22 访问者模式-Visitor"></a>2.22 访问者模式-Visitor</h3><blockquote>
<p>定义</p>
</blockquote>
<p>将作用于某种数据结构中的各元素的操作分离出来封装成独立的类，使其在不改变数据结构的前提下可以添加作用于这些元素的新的操作。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>扩展性好</li>
<li>复用性好</li>
<li>灵活性好</li>
<li>符合单一职责原则</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>增加新的元素很困难</li>
<li>破坏封装</li>
<li>违反了依赖倒置原则</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象访问者(Visitor)：定义一个访问具体元素的接口，为每个具体元素类对应一个访问操作visit()，该操作中的参数类型标识了被访问的具体元素。</li>
<li>具体访问者(Concrete Visitor)：实现抽象访问者角色声明的各个访问操作，确定访问者访问一个元素时该做什么。</li>
<li>抽象元素(Element)：声明一个包含接受操作accept()的接口，被接受的访问者对象作为accept()的参数。</li>
<li>具体元素(Concrete Element)：实现抽象元素角色提供的accept()操作。</li>
<li>对象结构(Object Structure)：包含元素角色的容器，提供让访问者对象遍历容器中的所有元素的方法。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>visitor<span class="token punctuation">.</span>pattern<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> Project: DesignPattern &lt;/p>
 * &lt;p> Package: top.parak.visitor.pattern &lt;/p>
 * &lt;p> FileName: VisitorDemo &lt;p>
 * &lt;p> Description: 访问者模式 &lt;p>
 * &lt;p> Created By IntelliJ IDEA &lt;/p>
 *
 * @author KHighness
 * @since 2020/11/8
 */</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>测试类&lt;/p>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VisitorDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        ObjectStructure structure <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectStructure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        structure<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcreteElementA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        structure<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcreteElementB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        structure<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcreteElementC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Visitor visitorA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteVisitorA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Visitor visitorB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteVisitorB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        structure<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>visitorA<span class="token punctuation">)</span><span class="token punctuation">;</span>
        structure<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>visitorB<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     抽象访问者
 * &lt;/p>
 */</span>
<span class="token keyword">interface</span> <span class="token class-name">Visitor</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>ConcreteElementA elementA<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>ConcreteElementB elementB<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>ConcreteElementC elementC<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体访问者A
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteVisitorA</span> <span class="token keyword">implements</span> <span class="token class-name">Visitor</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ConcreteVisitorA<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>ConcreteElementA elementA<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"具体访问者A访问=>具体元素A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        elementA<span class="token punctuation">.</span><span class="token function">operaA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>ConcreteElementB elementB<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"具体访问者A访问=>具体元素B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        elementB<span class="token punctuation">.</span><span class="token function">operaB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>ConcreteElementC elementC<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"具体访问者A访问=>具体元素C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        elementC<span class="token punctuation">.</span><span class="token function">operaC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体访问者B
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteVisitorB</span> <span class="token keyword">implements</span> <span class="token class-name">Visitor</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ConcreteVisitorB<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>ConcreteElementA elementA<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"具体访问者B访问=>具体元素A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        elementA<span class="token punctuation">.</span><span class="token function">operaA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>ConcreteElementB elementB<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"具体访问者B访问=>具体元素B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        elementB<span class="token punctuation">.</span><span class="token function">operaB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span>ConcreteElementC elementC<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"具体访问者B访问=>具体元素C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        elementC<span class="token punctuation">.</span><span class="token function">operaC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     抽象元素类
 * &lt;/p>
 */</span>
<span class="token keyword">interface</span> <span class="token class-name">Element</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Visitor visitor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体元素A
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteElementA</span> <span class="token keyword">implements</span> <span class="token class-name">Element</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ConcreteElementA<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Visitor visitor<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        visitor<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operaA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"具体元素A操作..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体元素B
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteElementB</span> <span class="token keyword">implements</span> <span class="token class-name">Element</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ConcreteElementB<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Visitor visitor<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        visitor<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operaB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"具体元素B操作..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     具体元素C
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ConcreteElementC</span> <span class="token keyword">implements</span> <span class="token class-name">Element</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ConcreteElementC<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Visitor visitor<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        visitor<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operaC</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"具体元素C操作..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     对象结构角色
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">ObjectStructure</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Element<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Element<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>Visitor visitor<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Iterator<span class="token operator">&lt;</span>Element<span class="token operator">></span> iterator <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>visitor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Element element<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>Element element<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-23-备忘录模式-Memento"><a href="#2-23-备忘录模式-Memento" class="headerlink" title="2.23 备忘录模式-Memento"></a>2.23 备忘录模式-Memento</h3><blockquote>
<p>定义</p>
</blockquote>
<p>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，以便以后当需要时能将该对象恢复到原先保存的状态。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>提供了一个可以恢复状态的机制</li>
<li>实现内部状态的封装</li>
<li>简化了发起人</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>资源消耗大</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>发起人(Originator)：记录当前时刻的内部状态信息，提供创建备忘录和恢复备忘录数据的功能，实现其他业务功能，它可以访问备忘录里的所有信息。</li>
<li>备忘录(Memento)：负责存储发起人的内部状态，在需要的时候提供这些内部状态给发起人。</li>
<li>管理者(Caretaker)：对备忘录进行管理，提供保存与获取备忘录的功能，但不能对备忘录进行访问与修改。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>memento<span class="token punctuation">.</span>pattern<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> Project: DesignPattern &lt;/p>
 * &lt;p> Package: top.parak.memento.pattern &lt;/p>
 * &lt;p> FileName: MementoDemo &lt;p>
 * &lt;p> Description: 备忘录模式 &lt;p>
 * &lt;p> Created By IntelliJ IDEA &lt;/p>
 *
 * @author KHighness
 * @since 2020/11/8
 */</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>测试类&lt;/p>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MementoDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>MementoDemo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Originator originator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Originator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Caretaker caretaker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Caretaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        originator<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">"State1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"初始状态："</span> <span class="token operator">+</span> originator<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 保存状态</span>
        caretaker<span class="token punctuation">.</span><span class="token function">setMemento</span><span class="token punctuation">(</span>originator<span class="token punctuation">.</span><span class="token function">createMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        originator<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">"State2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"新的状态："</span> <span class="token operator">+</span> originator<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 恢复状态</span>
        originator<span class="token punctuation">.</span><span class="token function">restoreMemento</span><span class="token punctuation">(</span>caretaker<span class="token punctuation">.</span><span class="token function">getMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"恢复状态："</span> <span class="token operator">+</span> originator<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     备忘录
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Memento</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> String state<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">Memento</span><span class="token punctuation">(</span>String state<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> String <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> state<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span>String state<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     发起人
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Originator</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> String state<span class="token punctuation">;</span>

    <span class="token keyword">public</span> String <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> state<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setState</span><span class="token punctuation">(</span>String state<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> Memento <span class="token function">createMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Memento</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">restoreMemento</span><span class="token punctuation">(</span>Memento memento<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>memento<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     管理者
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Caretaker</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Memento memento<span class="token punctuation">;</span>

    <span class="token keyword">public</span> Memento <span class="token function">getMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> memento<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMemento</span><span class="token punctuation">(</span>Memento memento<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>memento <span class="token operator">=</span> memento<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-24-解释器模式-Interpreter"><a href="#2-24-解释器模式-Interpreter" class="headerlink" title="2.24 解释器模式-Interpreter"></a>2.24 解释器模式-Interpreter</h3><blockquote>
<p>定义</p>
</blockquote>
<p>给分析对象定义一个语言，并定义该语言的文法表示，再设计一个解析器来解释其中的句子。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>扩展性好</li>
<li>容易实现</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>执行效率较低</li>
<li>会引起类膨胀</li>
<li>可应用的场景比较少</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象表达式(Abstract Expression)：定义解释器的接口，约定解释器的解释操作，主要包含解释方法interpret()。</li>
<li>终结符表达式(Terminal Expression)：抽象表达式的子类，用来实现文法中与终结符相关的操作，文法中的每条一个终结符都对应于一个非终结符表达式。</li>
<li>非终结符表达式(Terminal Expression)：抽象表达式的子类，用来实现文法中与非终结符相关的操作，文法中的每条规则都对应于一个非终结符表达式。</li>
<li>环境(Context)：通常包含各个解释器需要的数据或是公共的功能，一般用来传递被所有解释器共享的数据，后开你的解释器可以从这里获取这些值。</li>
<li>客户端(Client)：主要任务是将需要分析的句子或表达式转换成使用解释器对象描述的抽象语法树，然后调用解释器的解释方法，当然也可以通过环境角色间接访问解释器的解释方法。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>interpreter<span class="token punctuation">.</span>pattern<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> Project: DesignPattern &lt;/p>
 * &lt;p> Package: top.parak.interpreter.pattern &lt;/p>
 * &lt;p> FileName: InterpreterDemo &lt;p>
 * &lt;p> Description: 解释器模式 &lt;p>
 * &lt;p> Created By IntelliJ IDEA &lt;/p>
 *
 * @author KHighness
 * @since 2020/11/8
 */</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     测试类
 * &lt;/p>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterpreterDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     抽象表达式
 * &lt;/p>
 */</span>
<span class="token keyword">interface</span> <span class="token class-name">AbstractExpression</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    Object <span class="token function">interpret</span><span class="token punctuation">(</span>String info<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     终结符表达式类
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">TerminalExpression</span> <span class="token keyword">implements</span> <span class="token class-name">AbstractExpression</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Object <span class="token function">interpret</span><span class="token punctuation">(</span>String info<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* 对终结符表达式的处理 */</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     非终结符表达式类
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">NonTerminalExpression</span> <span class="token keyword">implements</span> <span class="token class-name">AbstractExpression</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> Object <span class="token function">interpret</span><span class="token punctuation">(</span>String info<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* 对非终结符表达式的处理 */</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p>
 *     环境类
 * &lt;/p>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> AbstractExpression abstractExpression<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* 数据初始化 */</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span>String info<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* 调用相关表达式的解释方法 */</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Software Engineering</category>
      </categories>
      <tags>
        <tag>-Design Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>红黑树</title>
    <url>/posts/f89cb603/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h1><center>
    <font face="Kristen ITC" color="#555555" size=3>💌 Khighness 💌</font><br>
</center>



<h2 id="📓-定义"><a href="#📓-定义" class="headerlink" title="📓 定义"></a>📓 定义</h2><p>红黑树是一种含有红黑节点并能自平衡的二叉查找树</p>
<blockquote>
<p>🌲二叉查找树</p>
<p>满足约束：左结点的值小于父结点，父结点的值小于右结点的值。</p>
<p>场景理解：假设二叉查找树建立在x-y笛卡尔坐标系中，则所有结点向x轴投影，值正好沿着x轴递增。</p>
</blockquote>
<a id="more"></a>



<h2 id="🔰-性质"><a href="#🔰-性质" class="headerlink" title="🔰 性质"></a>🔰 性质</h2><ul>
<li>每个结点要么是黑色，要么是红色</li>
<li>根节点是黑色</li>
<li>每个叶子结点(NIL)是黑色的(虚结点)</li>
<li>每个红色结点的两个子结点一定都是黑色</li>
<li>任意一结点到每个叶子结点的路径都包含数量相同的黑结点(黑色完美平衡)</li>
</ul>
<p>以上为最简性质，任何一条不可缺少，任意四条不能推出另外一条。</p>
<h2 id="🌗-平衡"><a href="#🌗-平衡" class="headerlink" title="🌗 平衡"></a>🌗 平衡</h2><p>红黑树是非完美平衡二叉查找树，是完美黑色平衡二叉查找树。</p>
<blockquote>
<p>⭕红黑树自平衡的最小单元</p>
</blockquote>
<p><img src="../../../../Java/AlgorithmNote/RBTree/image-20201106225159861.png" alt="image-20201106225159861"></p>
<p>红黑树的自平衡</p>
<p>插入只考虑G-{P, U}-C三代，删除只考虑P-{C, B}-{CL, CR, BL, BR}三代</p>
<blockquote>
<p>🔱红黑树自平衡的原子操作</p>
</blockquote>
<p>包括：变色、左旋、右旋</p>
<p>旋转要有圆心，有方向。</p>
<p>旋转结点是父结点围绕子节点旋转(子节点为圆心)。</p>
<p><img src="../../../../Java/AlgorithmNote/RBTree/image-20201103220142748.png" alt="image-20201103220142748"></p>
<center>
    <font face="Kristen ITC" color="#555555" font-size=100px>☬ 旋转结点 ☬</font><br>
</center>



<blockquote>
<p>🌐变色：P-Black=&gt;Red,CB-Red=&gt;Black</p>
</blockquote>
<p><img src="../../../../Java/AlgorithmNote/RBTree/image-20201103221816468.png" alt="image-20201103221816468"></p>
<center>
    <font face="Kristen ITC" color="#555555" font-size=100px>☬ 变色操作 ☬</font><br>
</center>

<blockquote>
<p>🌔左旋：旋转结点绕圆心逆时针方向旋转。基于最短路径来确定方向。</p>
</blockquote>
<p><img src="../../../../Java/AlgorithmNote/RBTree/image-20201103222025132.png" alt="image-20201103222025132"></p>
<center>
    <font face="Kristen ITC" color="#555555" font-size=100px>☬ 左旋操作 ☬</font><br>
</center>



<pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * &lt;p>左旋&lt;/p>
     * &lt;p>过程：父亲下沉，右子上升，右子的左子变为原父的右子&lt;/p>
     * &lt;p>
     *     左旋X结点
     *             P                                P
     *            /                                /
     *           X                                Y
     *         /  \        --(左旋)-->           / \
     *       lX    Y                           X  rY
     *            / \                        /  \
     *          lY   rY                     lX  lY
     * &lt;/p>
     * @param x
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">leftRotate</span><span class="token punctuation">(</span>RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* 右子结点 */</span>
        RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> y <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* 父亲结点 */</span>
        RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> p <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* Y的左子 变成 X的右子
        * 若X不Y的左子不为空
        * 则设置Y的左子的父亲为X */</span>
        x<span class="token punctuation">.</span><span class="token function">setRight</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            y<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 设置Y的父亲为P
        * 1. P为空，则根节点设置为Y
        * 2. X为P的左子， 则P的左子设置为Y
        * 3. X为P的右子，则P的右子设置为Y */</span>
        y<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> y<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                p<span class="token punctuation">.</span><span class="token function">setLeft</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                p<span class="token punctuation">.</span><span class="token function">setRight</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 将X的父亲设置为Y
        * 将Y的左子设置为X */</span>
        x<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        y<span class="token punctuation">.</span><span class="token function">setLeft</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>🌖右旋：旋转结点绕圆心顺时针方向旋转。基于最短路径确定方向。</p>
</blockquote>
<p><img src="../../../../Java/AlgorithmNote/RBTree/image-20201103223223997.png" alt="image-20201103223223997"></p>
<center>
    <font face="Kristen ITC" color="#555555" font-size=100px>☬ 右旋操作 ☬</font><br>
</center>



<pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * &lt;p>右旋&lt;/p>
     * &lt;p>过程：父亲下沉，左子上升，左子的右子变成原父的左子&lt;/p>
     * &lt;p>
     *     右旋X结点
     *             P                                P
     *            /                                /
     *           X                                Y
     *         /  \        --(右旋)-->           /  \
     *        Y   rX                           lY   X
     *       / \                                   / \
     *     lY  rY                                rY  rX
     * &lt;/p>
     * @param x
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rightRotate</span><span class="token punctuation">(</span>RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* 左子结点 */</span>
        RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> y <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* 父亲结点 */</span>
        RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> p <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* Y的右子 变成 X的左子
        * 若Y的右子不为空
        * 则设置Y的右子的父亲为X */</span>
        x<span class="token punctuation">.</span><span class="token function">setLeft</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            y<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 设置Y的父亲为P
         * 1. P为空，则根节点设置为Y
         * 2. X为P的左子， 则P的左子设置为Y
         * 3. X为P的右子，则P的右子设置为Y */</span>
        y<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> y<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                p<span class="token punctuation">.</span><span class="token function">setLeft</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                p<span class="token punctuation">.</span><span class="token function">setRight</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 将X的父亲设置为Y
        * 将Y的右子设置为X */</span>
        x<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        y<span class="token punctuation">.</span><span class="token function">setRight</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="🌀-增删"><a href="#🌀-增删" class="headerlink" title="🌀 增删"></a>🌀 增删</h2><blockquote>
<p>➕插入结点</p>
</blockquote>
<p>新增结点默认为红色，避免破坏黑色完美平衡。</p>
<p>首先寻找新结点的插入位置，即找到新结点的父亲，然后决定将新结点插入到父亲的左边还是右边。</p>
<pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * &lt;p>插入结点&lt;/p>
     * @param key
     * @param data
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertNode</span><span class="token punctuation">(</span>T key<span class="token punctuation">,</span> D data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> cmp<span class="token punctuation">;</span>
        RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> x <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>
        RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> y <span class="token operator">=</span> null<span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 寻找新结点的插入位置 */</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            y <span class="token operator">=</span> x<span class="token punctuation">;</span>
            cmp <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">/* key已存在，直接更新 */</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" [WARN] key已存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" [INFO] 更新value: "</span> <span class="token operator">+</span> <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" => "</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">/* key较大，继续向右查询 */</span>
                x <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">/* key较小，继续向左查询 */</span>
                x <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 生成一个新的结点 */</span>
        RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RBTNode</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>RBTColor<span class="token punctuation">.</span>red<span class="token punctuation">,</span> key<span class="token punctuation">,</span> data<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" [INFO] 新增结点 ("</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* 总结点数量+1 */</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* 设置新结点的父亲为Y */</span>
        node<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 再次比较决定新结点是y的左子还是右子*/</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> node<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            cmp <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                y<span class="token punctuation">.</span><span class="token function">setRight</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                y<span class="token punctuation">.</span><span class="token function">setLeft</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 最后进行自平衡 */</span>
        <span class="token function">balanceInsertion</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>💉插入修复</p>
</blockquote>
<p>插入结点为红色，因此只有当父亲结点为红色时才需要修复。</p>
<p>G-祖父、P-父亲、U-叔叔、C-插入。</p>
<p>我总结了五种情况以及解决口诀:</p>
<p>（1）叔叔为红</p>
<p>CASE 1</p>
<p>Description: 叔叔为红</p>
<p>Solution: GPU变色，若不满足红黑树约束则递归变色</p>
<p>（2）叔叔为黑</p>
<p>CASE 2</p>
<p>Description: 父为左子，GPC三点一线</p>
<p>Solution: 右旋祖父，GP变色</p>
<pre class="line-numbers language-java"><code class="language-java">         <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 右旋祖父结点
           黑祖                        红父
           <span class="token operator">/</span> \                         <span class="token operator">/</span> \
        红父  黑叔    <span class="token operator">--</span><span class="token punctuation">(</span>右旋<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">></span>    红插  黑祖
         <span class="token operator">/</span>                                 \
       红插                                黑叔
         <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 祖父和父亲变色
           红父                        黑父
           <span class="token operator">/</span> \                         <span class="token operator">/</span> \
        红插  黑祖    <span class="token operator">--</span><span class="token punctuation">(</span>变色<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">></span>    红插  红祖
              \                            \
              黑叔                         黑叔<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>CASE 3: </p>
<p>Description: 父为左子，GPC三角关系</p>
<p>Solution: 左旋父亲，交换PC，右旋祖父，GP变色</p>
<pre class="line-numbers language-java"><code class="language-java">         <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 左旋父亲结点，并且交换父子身份，此时GPC三点一线
          黑祖                        黑祖                        黑祖
          <span class="token operator">/</span> \                         <span class="token operator">/</span> \                        <span class="token operator">/</span> \
       红父  黑叔    <span class="token operator">--</span><span class="token punctuation">(</span>左旋<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">></span>    红插  黑叔    <span class="token operator">--</span><span class="token punctuation">(</span>交换<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">></span>    红父  黑叔
        \                          <span class="token operator">/</span>                           <span class="token operator">/</span>
        红插                     红父                         红插
        <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 右旋祖父结点
          黑祖                        红父
          <span class="token operator">/</span> \                         <span class="token operator">/</span> \
       红父  黑叔    <span class="token operator">--</span><span class="token punctuation">(</span>右旋<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">></span>    红插  黑祖
        <span class="token operator">/</span>                                 \
      红插                                黑叔
        <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 祖父和父亲变色
          红父                        黑父
          <span class="token operator">/</span> \                         <span class="token operator">/</span> \
       红插  黑祖    <span class="token operator">--</span><span class="token punctuation">(</span>变色<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">></span>    红插  红组
              \                           \
              黑叔                        黑叔<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>CASE 4</p>
<p>Description: 父为右子，GPC三点一线</p>
<p>Solution: 左旋祖父，GP变色</p>
<pre class="line-numbers language-java"><code class="language-java">         <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 左旋祖父结点
           黑祖                        红父
           <span class="token operator">/</span> \                         <span class="token operator">/</span> \
        黑叔  红父    <span class="token operator">--</span><span class="token punctuation">(</span>右旋<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">></span>    黑祖  红插
               \                     <span class="token operator">/</span>
               红插                黑叔
         <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 祖父和父亲变色
           红父                        黑父
           <span class="token operator">/</span> \                         <span class="token operator">/</span> \
        黑祖  红插    <span class="token operator">--</span><span class="token punctuation">(</span>变色<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">></span>    红祖  红插
         <span class="token operator">/</span>                           <span class="token operator">/</span>
       黑叔                        黑叔<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>CASE 5</p>
<p>Description: 父为右子，GPC三角关系</p>
<p>Solution: 右旋父亲，交换PC，左旋祖父，GP变色</p>
<pre class="line-numbers language-java"><code class="language-java">          <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 右旋父亲结点，并且交换父子身份，此时GPC三点一线
           黑祖                        黑祖                        黑祖
           <span class="token operator">/</span> \                         <span class="token operator">/</span> \                        <span class="token operator">/</span> \
        黑叔  红父    <span class="token operator">--</span><span class="token punctuation">(</span>右旋<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">></span>    黑祖  红插    <span class="token operator">--</span><span class="token punctuation">(</span>交换<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">></span>    黑祖  红父
              <span class="token operator">/</span>                            \                          \
            红插                           红父                        红插
          <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 左旋祖父
           黑祖                        红父
           <span class="token operator">/</span> \                         <span class="token operator">/</span> \
        黑叔  红父    <span class="token operator">--</span><span class="token punctuation">(</span>左旋<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">></span>    黑祖  红插
               \                    <span class="token operator">/</span>
               红插               黑叔
          <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 祖父和父亲变色
           红父                        黑父
           <span class="token operator">/</span> \                         <span class="token operator">/</span> \
        黑叔  红插    <span class="token operator">--</span><span class="token punctuation">(</span>变色<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">></span>    红祖  红插
         <span class="token operator">/</span>                         <span class="token operator">/</span>
       黑叔                      黑叔<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>➖删除结点</p>
</blockquote>
<p>三种情况，解决方案主要为寻找后裔顶替自己</p>
<p>CASE 1</p>
<p>Description: 待删结点左子和右子都存在:</p>
<p>Solution: 替代结点为右子树的最左孩子，然后调整关系</p>
<p>CASE 2:</p>
<p>Description: 待删结点没有左子和右子:</p>
<p>Solution: 直接删除，然后调整关系</p>
<p>CASE 3:</p>
<p>Description: 待删结点只有左子或者右子:</p>
<p>Solution: 替代结点为存在的孩子，然后调整关系</p>
<blockquote>
<p>💉删除修复</p>
</blockquote>
<p>仅删除黑色结点需要修复，删除红色不需要。</p>
<p>P-父亲、D-删除、B-兄弟、BR-兄弟右子、BL-兄弟左子。</p>
<ul>
<li>D为左子<ul>
<li>B为红色：左旋父亲，父亲染红，兄弟染黑，然后continue</li>
<li>B为黑色<ul>
<li>BL为黑色且BR黑色：兄弟染红，父亲回溯</li>
<li>BL为红色且BR为黑色：右旋兄弟，兄弟染红，BL染黑</li>
<li>BR为红色：左旋父亲，父亲的颜色给兄弟，父亲黑化，BR黑化，然后break</li>
</ul>
</li>
</ul>
</li>
<li>D为右子<ul>
<li>B为红色：右旋父亲，父亲染红，兄弟染黑，然后continue</li>
<li>B为黑色：<ul>
<li>BL为黑色且BR为黑色：兄弟染红，父亲回溯</li>
<li>BL为红色且BR为黑色：左旋兄弟，父亲染红，BR染黑</li>
<li>BL为红色：右旋父亲，父亲的颜色给兄弟，父亲黑化，BL黑化，然后break</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="📑-源码"><a href="#📑-源码" class="headerlink" title="📑 源码"></a>📑 源码</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>DataStructures<span class="token punctuation">.</span>RBTree<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ConcurrentHashMap<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicLong<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * &lt;p> Project: Algorithm &lt;/P>
 * &lt;p> Package: top.parak.DataStructures.RBTree &lt;/p>
 * &lt;p> FileName: RBTree &lt;p>
 * &lt;p> Description: 红黑树 &lt;p>
 * &lt;p> Created By IntelliJ IDEA &lt;/p>
 *
 * @author KHighness
 * @since 2020/11/5
 */</span>

<span class="token comment" spellcheck="true">/* 红黑颜色 */</span>
<span class="token keyword">enum</span> RBTColor <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    red<span class="token punctuation">,</span>
    black
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/* 红黑结点 */</span>
<span class="token keyword">class</span> <span class="token class-name">RBTNode</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">,</span> D<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/* 结点颜色 */</span>
    <span class="token keyword">private</span> RBTColor color<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* 结点键值 */</span>
    <span class="token keyword">private</span> T key<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* 结点数据 */</span>
    <span class="token keyword">private</span> D data<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* 父亲结点 */</span>
    <span class="token keyword">private</span> RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> parent<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* 左子结点 */</span>
    <span class="token keyword">private</span> RBTNode left<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/* 右子结点 */</span>
    <span class="token keyword">private</span> RBTNode right<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">RBTNode</span><span class="token punctuation">(</span>RBTColor color<span class="token punctuation">,</span> T key<span class="token punctuation">,</span> D data<span class="token punctuation">,</span> RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> parent<span class="token punctuation">,</span> RBTNode left<span class="token punctuation">,</span> RBTNode right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> RBTColor <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> color<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span>RBTColor color<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">==</span> RBTColor<span class="token punctuation">.</span>red<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> RBTColor<span class="token punctuation">.</span>black<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> RBTColor<span class="token punctuation">.</span>red<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> T <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> key<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setKey</span><span class="token punctuation">(</span>T key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> D <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> data<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span>D data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> <span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> parent<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setParent</span><span class="token punctuation">(</span>RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> parent<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> RBTNode <span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> left<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLeft</span><span class="token punctuation">(</span>RBTNode left<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> RBTNode <span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> right<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRight</span><span class="token punctuation">(</span>RBTNode right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">"RBTNode["</span> <span class="token operator">+</span>
                <span class="token string">"color="</span> <span class="token operator">+</span> color <span class="token operator">+</span>
                <span class="token string">", key="</span> <span class="token operator">+</span> key <span class="token operator">+</span>
                <span class="token string">", data="</span> <span class="token operator">+</span> data <span class="token operator">+</span>
                <span class="token string">']'</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/* 红黑树 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedBlackTree</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">,</span> D<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/* 时间格式 */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> SimpleDateFormat SDF <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/* 根节点 */</span>
    <span class="token keyword">private</span> RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> root<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/* 树结点数量 */</span>
    <span class="token keyword">private</span> AtomicLong count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token comment" spellcheck="true">/**
     * &lt;p>获取时间&lt;/p>
     * @return
     */</span>
    <span class="token keyword">private</span> String <span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> SDF<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>大小&lt;p/>
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>查询&lt;/p>
     * @param key
     * @return
     */</span>
    <span class="token keyword">public</span> D <span class="token function">get</span><span class="token punctuation">(</span>T key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> node <span class="token operator">=</span> <span class="token function">search</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> node <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> node<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>插入&lt;/p>
     * @param key
     * @param data
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>T key<span class="token punctuation">,</span> D data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token function">insertNode</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>删除&lt;/p>
     * @param key
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span>T key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> node <span class="token operator">=</span> <span class="token function">search</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token function">deleteNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" [ERROR] "</span> <span class="token operator">+</span> <span class="token string">"key为"</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">"的结点不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>root-getter&lt;/p>
     * @return
     */</span>
    <span class="token keyword">public</span> RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> <span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> root<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>判断结点是否为红色&lt;/p>
     * @param node
     * @return
     */</span>
    <span class="token keyword">public</span> Boolean <span class="token function">isRed</span><span class="token punctuation">(</span>RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> RBTColor<span class="token punctuation">.</span>red<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>判断结点是否为黑色&lt;/p>
     * @param node
     * @return
     */</span>
    <span class="token keyword">public</span> Boolean <span class="token function">isBlack</span><span class="token punctuation">(</span>RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> null <span class="token operator">||</span> node<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> RBTColor<span class="token punctuation">.</span>black<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>查询key值的结点&lt;/p>
     * &lt;p>递归查询: 比较key，相等直接返回，过大则继续向右，过小则继续向左&lt;/p>
     * @param key
     * @param node
     * @return
     */</span>
    <span class="token keyword">public</span> RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> <span class="token function">search</span><span class="token punctuation">(</span>T key<span class="token punctuation">,</span> RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> cmp <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> node<span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token function">search</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> node<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token function">search</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> node<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> null<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>左旋&lt;/p>
     * &lt;p>过程：父亲下沉，右子上升，右子的左子变为原父的右子&lt;/p>
     * &lt;p>
     *     左旋X结点
     *             P                                P
     *            /                                /
     *           X                                Y
     *         /  \        --(左旋)-->           / \
     *       lX    Y                           X  rY
     *            / \                        /  \
     *          lY   rY                     lX  lY
     * &lt;/p>
     * @param x
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">leftRotate</span><span class="token punctuation">(</span>RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* 右子结点 */</span>
        RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> y <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* 父亲结点 */</span>
        RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> p <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* Y的左子 变成 X的右子
        * 若X不Y的左子不为空
        * 则设置Y的左子的父亲为X */</span>
        x<span class="token punctuation">.</span><span class="token function">setRight</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            y<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 设置Y的父亲为P
        * 1. P为空，则根节点设置为Y
        * 2. X为P的左子， 则P的左子设置为Y
        * 3. X为P的右子，则P的右子设置为Y */</span>
        y<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> y<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                p<span class="token punctuation">.</span><span class="token function">setLeft</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                p<span class="token punctuation">.</span><span class="token function">setRight</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 将X的父亲设置为Y
        * 将Y的左子设置为X */</span>
        x<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        y<span class="token punctuation">.</span><span class="token function">setLeft</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>右旋&lt;/p>
     * &lt;p>过程：父亲下沉，左子上升，左子的右子变成原父的左子&lt;/p>
     * &lt;p>
     *     右旋X结点
     *             P                                P
     *            /                                /
     *           X                                Y
     *         /  \        --(右旋)-->           /  \
     *        Y   rX                           lY   X
     *       / \                                   / \
     *     lY  rY                                rY  rX
     * &lt;/p>
     * @param x
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rightRotate</span><span class="token punctuation">(</span>RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* 左子结点 */</span>
        RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> y <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* 父亲结点 */</span>
        RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> p <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* Y的右子 变成 X的左子
        * 若Y的右子不为空
        * 则设置Y的右子的父亲为X */</span>
        x<span class="token punctuation">.</span><span class="token function">setLeft</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            y<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 设置Y的父亲为P
         * 1. P为空，则根节点设置为Y
         * 2. X为P的左子， 则P的左子设置为Y
         * 3. X为P的右子，则P的右子设置为Y */</span>
        y<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> y<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                p<span class="token punctuation">.</span><span class="token function">setLeft</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                p<span class="token punctuation">.</span><span class="token function">setRight</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 将X的父亲设置为Y
        * 将Y的右子设置为X */</span>
        x<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
        y<span class="token punctuation">.</span><span class="token function">setRight</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>插入结点&lt;/p>
     * @param key
     * @param data
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">insertNode</span><span class="token punctuation">(</span>T key<span class="token punctuation">,</span> D data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> cmp<span class="token punctuation">;</span>
        RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> x <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">;</span>
        RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> y <span class="token operator">=</span> null<span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 寻找新结点的插入位置 */</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            y <span class="token operator">=</span> x<span class="token punctuation">;</span>
            cmp <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">/* key已存在，直接更新 */</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" [WARN] key已存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" [INFO] 更新value: "</span> <span class="token operator">+</span> <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" => "</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">/* key较大，继续向右查询 */</span>
                x <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">/* key较小，继续向左查询 */</span>
                x <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 生成一个新的结点 */</span>
        RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RBTNode</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>RBTColor<span class="token punctuation">.</span>red<span class="token punctuation">,</span> key<span class="token punctuation">,</span> data<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" [INFO] 新增结点 ("</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> data <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* 总结点数量+1 */</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* 设置新结点的父亲为Y */</span>
        node<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 再次比较决定新结点是y的左子还是右子*/</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> node<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            cmp <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                y<span class="token punctuation">.</span><span class="token function">setRight</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                y<span class="token punctuation">.</span><span class="token function">setLeft</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 最后进行自平衡 */</span>
        <span class="token function">balanceInsertion</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>插入结点的自平衡操作&lt;/p>
     * &lt;p>由于插入节点默认颜色为红色，所以只有父结点为红色时候才需要修复
     *   分三种情况讨论&lt;/p>
     * &lt;li>case1. 叔叔结点也为红色&lt;/li>
     * &lt;li>case2. 叔叔结点为空，且祖父子三点一线&lt;/li>
     * &lt;li>case3. 叔叔结点为空，且祖父子三角关系&lt;/li>
     * &lt;p>G-祖父、P-父亲、U-叔叔、C-插入&lt;/p>
     * @param node
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">balanceInsertion</span><span class="token punctuation">(</span>RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* 父亲 · 祖父 */</span>
        RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> paren<span class="token punctuation">,</span> grand<span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 当父亲节点为黑色时，结束修复 */</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>paren <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isRed</span><span class="token punctuation">(</span>paren<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            grand <span class="token operator">=</span> paren<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">/* 确定父亲和叔叔的左右关系 */</span>

            <span class="token comment" spellcheck="true">/* CASE: 父左叔右 */</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>grand<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> paren<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> uncle <span class="token operator">=</span> grand<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">/**
                 * case1: PU双红
                 * solution1: GPU变色
                 * 如果此时整棵树不满足约束，则递归进行GPU变色
                 */</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>uncle<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    grand<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>RBTColor<span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    paren<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>RBTColor<span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    uncle<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>RBTColor<span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    node <span class="token operator">=</span> grand<span class="token punctuation">;</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">/*
                 * case2: P红U黑，父为左子，GPC三点一线
                 * solution2: 右旋祖父，GP变色
                 *         (1) 右旋祖父结点
                 *           黑祖                        红父
                 *           / \                         / \
                 *        红父  黑叔    --(右旋)-->    红插  黑祖
                 *         /                                 \
                 *       红插                                黑叔
                 *         (2) 祖父和父亲变色
                 *           红父                        黑父
                 *           / \                         / \
                 *        红插  黑祖    --(变色)-->    红插  红祖
                 *              \                            \
                 *              黑叔                         黑叔
                 *
                 *
                * case3: P红U黑，父为左子，GPC三角关系
                * solution3: 左旋父亲，交换PC，右旋祖父，GP变色
                *         (1) 左旋父亲结点，并且交换父子身份，此时GPC三点一线
                *          黑祖                        黑祖                        黑祖
                *          / \                         / \                        / \
                *       红父  黑叔    --(左旋)-->    红插  黑叔    --(交换)-->    红父  黑叔
                *        \                          /                           /
                *        红插                     红父                         红插
                *        (2) 右旋祖父结点
                *          黑祖                        红父
                *          / \                         / \
                *       红父  黑叔    --(右旋)-->    红插  黑祖y
                *        /                                 \
                *      红插                                黑叔
                *        (3) 祖父和父亲变色
                *          红父                        黑
                *          / \                         / \
                *       红插  黑祖    --(变色)-->    红插  红组
                *              \                           \
                *              黑叔                        黑叔
                 *
                 * attention:
                 * 三角关系经过一步旋转即可转换成三点一线
                 * 因此case3先经过一步处理到case2，再进行case2的处理
                 */</span>
                <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>paren<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// case3</span>
                        <span class="token function">leftRotate</span><span class="token punctuation">(</span>paren<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> temp <span class="token operator">=</span> node<span class="token punctuation">;</span>
                        node <span class="token operator">=</span> paren<span class="token punctuation">;</span>
                        paren <span class="token operator">=</span> temp<span class="token punctuation">;</span>
                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// case2</span>
                    <span class="token function">rightRotate</span><span class="token punctuation">(</span>grand<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    grand<span class="token punctuation">.</span><span class="token function">updateColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    paren<span class="token punctuation">.</span><span class="token function">updateColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">/* CASE: 父右叔左 */</span>
            <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> uncle <span class="token operator">=</span> grand<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">/**
                 * case1: PU双红(父亲和叔叔都为红色)
                 * solution1: GPU变色(祖父变为红色，父亲和叔叔都变为黑色)
                 * 如果此时整棵树不满足约束，则递归进行GPU变色
                 */</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>uncle<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    grand<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>RBTColor<span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    paren<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>RBTColor<span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    uncle<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>RBTColor<span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    node <span class="token operator">=</span> grand<span class="token punctuation">;</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">/*
                 * case4: P红U黑，父为左子，GPC三点一线
                 * solution4: 左旋祖父，GP变色
                 *         (1) 左旋祖父结点
                 *           黑祖                        红父
                 *           / \                         / \
                 *        黑叔  红父    --(右旋)-->    黑祖  红插
                 *               \                     /
                 *               红插                黑叔
                 *          (2) 祖父和父亲变色
                 *           红父                        黑父
                 *           / \                         / \
                 *        黑祖  红插    --(变色)-->    红祖  红插
                 *         /                           /
                 *       黑叔                        黑叔
                 *
                 * case5: P红U黑，父为右子，GPC三角关系
                 * solution5: 右旋父亲，交换PC，左旋祖父，GP变色
                 *          (1) 右旋父亲结点，并且交换父子身份，此时GPC三点一线
                 *           黑祖                        黑祖                        黑祖
                 *           / \                         / \                        / \
                 *        黑叔  红父    --(右旋)-->    黑祖  红插    --(交换)-->    黑祖  红父
                 *              /                            \                          \
                 *            红插                           红父                        红插
                 *          (2) 左旋祖父
                 *           黑祖                        红父
                 *           / \                         / \
                 *        黑叔  红父    --(左旋)-->    黑祖  红插
                 *               \                    /
                 *               红插               黑叔
                 *          (3) 祖父和父亲变色
                 *           红父                        黑父
                 *           / \                         / \
                 *        黑叔  红插    --(变色)-->    红祖  红插
                 *         /                         /
                 *       黑叔                      黑叔
                 *
                 * attention:
                 * 三角关系经过一步旋转即可转换成三点一线
                 * 因此case3先经过一步处理到case2，再进行case2的处理
                 */</span>
                <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>paren<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// case3</span>
                        <span class="token function">rightRotate</span><span class="token punctuation">(</span>paren<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> temp <span class="token operator">=</span> node<span class="token punctuation">;</span>
                        node <span class="token operator">=</span> paren<span class="token punctuation">;</span>
                        paren <span class="token operator">=</span> temp<span class="token punctuation">;</span>
                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// case2</span>
                    <span class="token function">leftRotate</span><span class="token punctuation">(</span>grand<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    grand<span class="token punctuation">.</span><span class="token function">updateColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    paren<span class="token punctuation">.</span><span class="token function">updateColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 保证根节点为黑色 */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            node<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>RBTColor<span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>删除结点&lt;/p>
     * &lt;p>三种情况&lt;/p>
     * &lt;li>case1. 待删结点左子和右子都存在&lt;/li>
     * &lt;li>case2. 待删结点没有左子和右子&lt;/li>
     * &lt;li>case3. 待删结点只有左子或者右子&lt;/li>
     * @param node
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* 父亲 · 儿子 · 继承者 */</span>
        RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> paren<span class="token punctuation">,</span> child<span class="token punctuation">,</span> replace<span class="token punctuation">;</span>
        RBTColor color<span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/*
         * case1: 待删结点左子和右子都存在
         * solution1:
         * - 找到该结点的右子树中的最左子结点
         * - 把它的值和要删除的结点的值进行交换
         * - 然后删除这个结点即相当于删除所需删除结点
         */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">/*  获取其后继结点: 右子树中的最左子结点 */</span>
            replace <span class="token operator">=</span> <span class="token function">descendants</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            paren <span class="token operator">=</span> replace<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            child <span class="token operator">=</span> replace<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            color <span class="token operator">=</span> replace<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> replace<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">/**
                 * case:
                 *    node              replace
                 *      \                  \
                 *      replace    -->    child
                 *         \
                 *         child
                 */</span>
                paren <span class="token operator">=</span> replace<span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">/**
                 * case:
                 *     node                replace
                 *       \                   \
                 *        X                   X
                 *       / \                 / \
                 *  paren   X    -->    paren   X
                 *     /                  /
                 *  replace            child
                 *     \
                 *     child
                 *
                 */</span>
                <span class="token comment" spellcheck="true">/* 建立替代结点的父亲与替换结点的右子的父子关系，即爷孙変父子 */</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    child<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>replace<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
                replace<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLeft</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">/* 建立替代节点与待删节点的右子的父子关系 */</span>
                replace<span class="token punctuation">.</span><span class="token function">setRight</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                node<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>replace<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">/* 待删节点的父亲设置为替代结点的父亲 */</span>
            replace<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">/* 建立替换结点与待删节点左子的父子关系 */</span>
            replace<span class="token punctuation">.</span><span class="token function">setLeft</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            node<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>replace<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">/* 替代结点沿用待删节点的颜色 */</span>
            replace<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">/* 待删结点的父亲不为空，则调整左右子 */</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    node<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLeft</span><span class="token punctuation">(</span>replace<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    node<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setRight</span><span class="token punctuation">(</span>replace<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">/* 待删结点的父亲为空，则设置根结点 */</span>
            <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> replace<span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">/* 删除黑色结点需要调整平衡，红色不需要 */</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>color <span class="token operator">==</span> RBTColor<span class="token punctuation">.</span>black<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token function">balanceDeletion</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> paren<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/**
         * case2: 待删结点没有左子和右子
         * solution2: 直接删除结点
         */</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            paren <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> paren<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                paren<span class="token punctuation">.</span><span class="token function">setLeft</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                paren<span class="token punctuation">.</span><span class="token function">setRight</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/**
         * case3: 待删结点只有左子或者右子
         * solution3: 待删节点的父亲指向存在的子嗣
         */</span>
        <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">/* 确定替代结点 */</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                replace <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                replace <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">/* 待删结点的父亲 */</span>
            paren <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">/* 待删结点的父亲是否为空 */</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>paren <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>paren<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    paren<span class="token punctuation">.</span><span class="token function">setLeft</span><span class="token punctuation">(</span>replace<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    paren<span class="token punctuation">.</span><span class="token function">setRight</span><span class="token punctuation">(</span>replace<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> replace<span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">/* 待删节点的父亲指向替代结点 */</span>
            replace<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>paren<span class="token punctuation">)</span><span class="token punctuation">;</span>

            color <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            child <span class="token operator">=</span> replace<span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">/* 删除黑色结点需要调整平衡，红色不需要 */</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>color <span class="token operator">==</span> RBTColor<span class="token punctuation">.</span>black<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token function">balanceDeletion</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> paren<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* 结点数量-1 */</span>
        count<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" [INFO] key为"</span> <span class="token operator">+</span> node<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"的结点删除成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>寻找继承的后裔&lt;/p>
     * @param node
     * @return
     */</span>
    <span class="token keyword">public</span> RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> <span class="token function">descendants</span><span class="token punctuation">(</span>RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* 查询大于该节点的最小结点，即右子树的最左结点 */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> right <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>right<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> right<span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>right<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                right <span class="token operator">=</span> right<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> right<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* @deprecated */</span>
        RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> paren <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>paren <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>paren<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            node <span class="token operator">=</span> paren<span class="token punctuation">;</span>
            paren <span class="token operator">=</span> paren<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> paren<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>


    <span class="token comment" spellcheck="true">/**
     * &lt;p>删除结点的自平衡操作&lt;/p>
     * &lt;p>
     * P-父亲、D-删除、B-兄弟、BR-兄弟右子、BL-兄弟左子。
     *
     * - D为左子
     *   - B为红色：左旋父亲，父亲染红，兄弟染黑，然后continue
     *   - B为黑色
     *     - BL为黑色且BR黑色：兄弟染红，父亲回溯
     *     - BL为红色且BR为黑色：右旋兄弟，兄弟染红，BL染黑
     *     - BR为红色：左旋父亲，父亲的颜色给兄弟，父亲黑化，BR黑化，然后break
     * - D为右子
     *   - B为红色：右旋父亲，父亲染红，兄弟染黑，然后continue
     *   - B为黑色：
     *     - BL为黑色且BR为黑色：兄弟染红，父亲回溯
     *     - BL为红色且BR为黑色：左旋兄弟，父亲染红，BR染黑
     *     - BL为红色：右旋父亲，父亲的颜色给兄弟，父亲黑化，BL黑化，然后break
     * &lt;/p>
     *
     * @param node
     * @param paren
     * &lt;p>
     *     入参情况:
     *     1. node=替换节点 paren=替换节点的父亲节点
     *     2. node=替换节点的孩子节点 paren=替换节点
     *     3. node=替换节点的孩子节点 parent=替换节点的父节点
     * &lt;/p>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">balanceDeletion</span><span class="token punctuation">(</span>RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> node<span class="token punctuation">,</span> RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> paren<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> broth<span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isBlack</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> node <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>paren<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                broth <span class="token operator">=</span> paren<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">/**
                 * case1: D为左子。B为红色
                 * solution1: 左旋父亲，父亲染红，兄弟染黑，然后continue
                 */</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>broth<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    <span class="token function">leftRotate</span><span class="token punctuation">(</span>paren<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    paren<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>RBTColor<span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    broth<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>RBTColor<span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">/**
                     * case2: D为左子。B为黑色，BL为黑色且BR为黑色
                     * solution2: 兄弟染红，父亲回溯
                     */</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isBlack</span><span class="token punctuation">(</span>broth<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBlack</span><span class="token punctuation">(</span>broth<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                        broth<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>RBTColor<span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        node <span class="token operator">=</span> paren<span class="token punctuation">;</span>
                        paren <span class="token operator">=</span> paren<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">/**
                     * case3: D为左子。B为黑色，BL为红色且BR为黑色
                     * solution3: 右旋兄弟，兄弟染红，BL染黑
                     */</span>
                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>broth<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBlack</span><span class="token punctuation">(</span>broth<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                        <span class="token function">rightRotate</span><span class="token punctuation">(</span>broth<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        broth<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>RBTColor<span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        broth<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>RBTColor<span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">/**
                     * case4: D为左子，B为黑色，BR为红色
                     * solution4: 左旋父亲，父亲的颜色给兄弟，父亲黑化，BR黑化，然后break
                     */</span>
                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>broth<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                        <span class="token function">leftRotate</span><span class="token punctuation">(</span>paren<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        broth<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>paren<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        paren<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>RBTColor<span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        broth<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>RBTColor<span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                broth <span class="token operator">=</span> paren<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">/**
                 * case5: D为右子。B为红色
                 * solution5: 右旋父亲，父亲染红，兄弟染黑，然后continue
                 */</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>broth<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    <span class="token function">rightRotate</span><span class="token punctuation">(</span>paren<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    paren<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>RBTColor<span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    broth<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>RBTColor<span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">/**
                     * case6: D为右子。B为黑色，BL为黑色且BR为黑色
                     * solution6: 兄弟染红，父亲回溯
                     */</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isBlack</span><span class="token punctuation">(</span>broth<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBlack</span><span class="token punctuation">(</span>broth<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                        broth<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>RBTColor<span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        node <span class="token operator">=</span> paren<span class="token punctuation">;</span>
                        paren <span class="token operator">=</span> paren<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">/**
                     * case7: D为右子。B为黑色，BL为红色且BR为黑色
                     * solution7: 左旋兄弟，父亲染红，BR染黑
                     */</span>
                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>broth<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBlack</span><span class="token punctuation">(</span>broth<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                        <span class="token function">leftRotate</span><span class="token punctuation">(</span>broth<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        paren<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>RBTColor<span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        broth<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>RBTColor<span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">/**
                     * case8: D为右子，B为黑色，BR为红色
                     * solution8: 右旋父亲，父亲的颜色给兄弟，父亲黑化，BL黑化，然后break
                     */</span>
                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRed</span><span class="token punctuation">(</span>broth<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                        <span class="token function">rightRotate</span><span class="token punctuation">(</span>paren<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        broth<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>paren<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        paren<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>RBTColor<span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        broth<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>RBTColor<span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/* node染成被删结点的颜色 */</span>
        node<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>RBTColor<span class="token punctuation">.</span>black<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>层次遍历&lt;/p>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">>>></span> levelList <span class="token operator">=</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">>></span> list<span class="token operator">:</span>levelList<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>RBTNode node <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>层次遍历&lt;/p>
     * @param node
     * @return
     */</span>
    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">>>></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">>>></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Queue<span class="token operator">&lt;</span>RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">>></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> count <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            List<span class="token operator">&lt;</span>RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">>></span> cur <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                RBTNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> D<span class="token operator">></span> temp <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                cur<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                count<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>输出红黑树的层级结构&lt;/p>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printRBTreeLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" [INFO] 开始打印红黑树的层级结构"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ConcurrentHashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>RBTNode<span class="token operator">>></span> map <span class="token operator">=</span> <span class="token function">showTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> size <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span> <span class="token function">makeSpace</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">+</span>
                        <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token string">" "</span> <span class="token operator">:</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> RBTColor<span class="token punctuation">.</span>black <span class="token operator">?</span> <span class="token string">"(黑)"</span> <span class="token operator">:</span> <span class="token string">"(红)"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">makeSpace</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" [INFO] 红黑树的层级结构打印完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>输出整棵树的Graphviz结构&lt;/p>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printGraphviz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" [INFO] 开始打印树的Graphviz结构"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ConcurrentHashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>RBTNode<span class="token operator">>></span> map <span class="token operator">=</span> <span class="token function">showTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> size <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"digraph &amp;#123;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" [color="</span>  <span class="token operator">+</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"->"</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"[label=left]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"->"</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"[label=right]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&amp;#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" [INFO] 树的Graphviz结构打印完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> String <span class="token function">makeSpace</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        StringBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>size <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> ConcurrentHashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>RBTNode<span class="token operator">>></span> <span class="token function">showTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        ConcurrentHashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>RBTNode<span class="token operator">>></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">showTree</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> map<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showTree</span><span class="token punctuation">(</span>RBTNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> ConcurrentHashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>RBTNode<span class="token operator">>></span> map<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token function">showTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> count<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RBTNode</span><span class="token punctuation">(</span>RBTColor<span class="token punctuation">.</span>red<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token function">showTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> count<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RBTNode</span><span class="token punctuation">(</span>RBTColor<span class="token punctuation">.</span>red<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>


    <span class="token comment" spellcheck="true">/**
     * &lt;p>菜单&lt;/p>
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">RBT</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        RedBlackTree KTree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedBlackTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"┏━━━━━━━━━ ▶ ▶ ▶ ▶ ▶ RED ❤ BLACK ◀ ◀ ◀ ◀ ◀ ━━━━━━━━━━┓"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"   ✪━━━━━━━━━━━━━━━━━━━ 1. 插入节点 ━━━━━━━━━━━━━━━━━━━✪"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"   ✪━━━━━━━━━━━━━━━━━━━ 2. 查询节点 ━━━━━━━━━━━━━━━━━━━✪"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"   ✪━━━━━━━━━━━━━━━━━━━ 3. 删除结点 ━━━━━━━━━━━━━━━━━━━✪"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"   ✪━━━━━━━━━━━━━━━━━━━ 4. 查询数量 ━━━━━━━━━━━━━━━━━━━✪"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"   ✪━━━━━━━━━━━━━━━━━━━ 5. 层次结构 ━━━━━━━━━━━━━━━━━━━✪"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"   ✪━━━━━━━━━━━━━━━━━━━ 6. Graphviz ━━━━━━━━━━━━━━━━━━✪"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"   ✪━━━━━━━━━━━━━━━━━━━ 7. 退出系统 ━━━━━━━━━━━━━━━━━━━✪"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" [input] 输入选择："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> choice <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> key<span class="token punctuation">;</span>
            String value<span class="token punctuation">;</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>choice<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" [INPUT] 输入键值："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    key <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" [INPUT] 输入数据："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    value <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    KTree<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" [INPUT] 输入键值："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    key <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" [INFO] 查询结果 value = "</span> <span class="token operator">+</span> KTree<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" [INPUT] 输入键值："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    key <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    KTree<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" [INFO] 查询结果 size = "</span> <span class="token operator">+</span> KTree<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>
                    KTree<span class="token punctuation">.</span><span class="token function">printRBTreeLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>
                    KTree<span class="token punctuation">.</span><span class="token function">printGraphviz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" [INFO] 退出成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">default</span><span class="token operator">:</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" [ERROR] 输入错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        RedBlackTree redBlackTree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedBlackTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        redBlackTree<span class="token punctuation">.</span><span class="token function">RBT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>RedBlackTree</tag>
      </tags>
  </entry>
  <entry>
    <title>叶惠美</title>
    <url>/posts/f8cdfd0a/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <div id="aplayer-GvUkhCoh" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;"></div>
			  <script>
				  var options = {"narrow":false,"autoplay":false,"showlrc":1,"mode":"oredr","mutex":true,"theme":"#e6d0b2","preload":"metadata","listmaxheight":"513px","music":[{"title":"以父之名","author":"周杰伦","url":"/posts/f8cdfd0a/以父之名.ogg","pic":"/posts/f8cdfd0a/YHM.jpg","lrc":"以父之名.txt"},{"title":"懦夫","author":"周杰伦","url":"/posts/f8cdfd0a/懦夫.ogg","pic":"/posts/f8cdfd0a/YHM.jpg","lrc":"懦夫.txt"},{"title":"晴天","author":"周杰伦","url":"/posts/f8cdfd0a/晴天.flac","pic":"/posts/f8cdfd0a/YHM.jpg","lrc":"晴天.txt"},{"title":"三年二班","author":"周杰伦","url":"/posts/f8cdfd0a/三年二班.ogg","pic":"/posts/f8cdfd0a/YHM.jpg","lrc":"三年二班.txt"},{"title":"东风破","author":"周杰伦","url":"/posts/f8cdfd0a/东风破.ogg","pic":"/posts/f8cdfd0a/YHM.jpg","lrc":"东风破.txt"},{"title":"你听得到","author":"周杰伦","url":"/posts/f8cdfd0a/你听得到.ogg","pic":"/posts/f8cdfd0a/YHM.jpg","lrc":"你听得到.txt"},{"title":"同一种调调","author":"周杰伦","url":"/posts/f8cdfd0a/同一种调调.ogg","pic":"/posts/f8cdfd0a/YHM.jpg","lrc":"同一种调调.txt"},{"title":"她的睫毛","author":"周杰伦","url":"/posts/f8cdfd0a/她的睫毛.ogg","pic":"/posts/f8cdfd0a/YHM.jpg","lrc":"她的睫毛.txt"},{"title":"爱情悬崖","author":"周杰伦","url":"/posts/f8cdfd0a/爱情悬崖.ogg","pic":"/posts/f8cdfd0a/YHM.jpg","lrc":"爱情悬崖.txt"},{"title":"梯田","author":"周杰伦","url":"/posts/f8cdfd0a/梯田.ogg","pic":"/posts/f8cdfd0a/YHM.jpg","lrc":"梯田.txt"},{"title":"双刀","author":"周杰伦","url":"/posts/f8cdfd0a/双刀.ogg","pic":"/posts/f8cdfd0a/YHM.jpg","lrc":"双刀.txt"}]};
				  options.element = document.getElementById("aplayer-GvUkhCoh");
				  var ap = new APlayer(options);
			    window.aplayers || (window.aplayers = []);
				  window.aplayers.push(ap);
			  </script>



<a id="more"></a>



<center>
<p>听妈妈的话，你比从前快乐；</p>
<p>听爸爸的话，爸，我回来了。</p>
<p>我把爷爷泡的茶，送给天台的外婆；</p>
<p>她加了点麦芽糖，味道变得甜甜的。</p>
<p>枫林夜曲诉琴伤，梯田花海七里香。</p>
<p>大笨钟迷魂曲在我的地盘，合奏止战之殇。</p>
<p>稻香中窃爱当梦想启动，你却说了再见，</p>
<p>不爱我就拉倒我要夏天，填满手写的从前，</p>
<p>发如雪的娘子用断了的弦弹奏东风破，</p>
<p>在红尘客栈写兰亭序，送天涯过客，</p>
<p>烟花易冷天下无双的英雄也会落寞。</p>
<p>身披黄金甲的将军，在菊花台四面楚歌，</p>
<p>大侠霍元甲在上海1943复活，</p>
<p>用龙拳双截棍击败了拿双刀的忍者，</p>
<p>龙战骑士以父之名发动最后的战役，</p>
<p>困兽之斗半兽人在蓝色风暴中战栗，</p>
<p>流浪诗人送可爱女人一件黑色毛衣，</p>
<p>阳光宅男与超跑女神在阳明山漂移，</p>
<p>牛仔很忙却与米兰的小铁匠跳起蛇舞，</p>
<p>魔术先生劝乔克叔叔不要当懦夫。</p>
<p>安静离开爱情悬崖，我落泪情绪零碎，</p>
<p>一路向北的后退，哦对不起是我不配，</p>
<p>就像水手怕水，就像超人不会飞，</p>
<p>这表白的话我无法一口气全念对，</p>
<p>你明明就喜欢她，却为何开不了口，</p>
<p>你算什么男人，总是转身说走就走，</p>
<p>不该找借口退后，Mojito来一点点，</p>
<p>自导自演对她说你好吗？好久不见。</p>
<p>拨动反方向的钟，想回到过去说好不哭，</p>
<p>爱就像是龙卷风，夹杂心雨何时停住，</p>
<p>跟免费教学录音带学手语怎么了，</p>
<p>我不想当爱情废柴，说好的幸福呢？</p>
<p>园游会中我牵着告白气球在傻笑，</p>
<p>晴天的彩虹下你听得到我的暗号，</p>
<p>坐四季列车去千里之外的伊斯坦堡，</p>
<p>爱你没差你我用同一种调调。</p>
<p>坐在三年二班门口看白色风车，</p>
<p>雨下一整晚了，我在等你下课，</p>
<p>在秘密花园里送你半岛铁盒，</p>
<p>给我一首歌的时间，简单爱要对你说，</p>
<p>为你弹乌克丽丽，陪你看最长的电影，</p>
<p>沿着时光机的轨迹，写爱的飞行日记，</p>
<p>遵从你的完美主义，守护不能说的秘密，</p>
<p>Now you see me，哪里都是你的公主病。</p>
<p>与你吃土耳其冰淇淋听见下雨的声音，</p>
<p>在布拉格广场一起听比较大的大提琴。</p>
<p>床边故事夜的第七章讲着爱在西元前，</p>
<p>前世情人逆鳞美人鱼搁浅在珊瑚海边，</p>
<p>嘻哈空姐放下浪漫手机吃疗伤烧肉粽，</p>
<p>波爷翻开本草纲目治好了公公偏头痛，</p>
<p>印第安老斑鸠在威廉古堡看蜗牛斗牛，</p>
<p>青花瓷旁周大侠看皮影戏里乱舞春秋。</p>
<p>我是如此相信有天你还会出新歌，</p>
<p>世界末日、世界未末日都会等着。</p>
</center>





]]></content>
      <categories>
        <category>Music</category>
      </categories>
      <tags>
        <tag>叶惠美</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/posts/bae4ff13/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><center>
    <font face="Kristen ITC" color="#555555" size=3>💌 Khighness 💌</font><br>
</center>



<h2 id="1-📩NoSQL概述"><a href="#1-📩NoSQL概述" class="headerlink" title="1. 📩NoSQL概述"></a>1. 📩NoSQL概述</h2><h3 id="1-1-📃简介"><a href="#1-1-📃简介" class="headerlink" title="1.1 📃简介"></a>1.1 📃简介</h3><blockquote>
<p>⚡ NoSQL</p>
</blockquote>
<p>NoSQL != 非SQL </p>
<p>NoSQL == Not Only SQL</p>
<p>不仅仅是SQL！</p>
<p>泛指非关系型的数据库。克服大并发。</p>
<p>很多的数据类型，用户的个人信息、社交网络和地理位置，这些数据类型的存储不需要一个固定的格式，不需要多元的操作就可以横向扩展。</p>
<a id="more"></a>



<h3 id="1-2-🌀特点"><a href="#1-2-🌀特点" class="headerlink" title="1.2 🌀特点"></a>1.2 🌀特点</h3><ul>
<li><p>方便扩展（数据之间没有关系，很好扩展）</p>
</li>
<li><p>大数据量高性能（细粒度缓存，性能高）</p>
</li>
<li><p>数据类型多样（不需要设计数据库，随取随用）</p>
</li>
<li><p>RDBMS和NoSQL的区别: </p>
<ul>
<li>RDBMS<ul>
<li>结构化组织</li>
<li>SQL</li>
<li>数据和关系都存在单独的表中</li>
<li>严格的一致性</li>
<li>基础的事务</li>
<li>···</li>
</ul>
</li>
<li>NoSQL<ul>
<li>不仅仅是数据</li>
<li>没有固定的查询语言</li>
<li>键值对存储，列存储，文档存储，图形存储</li>
<li>最终一致性</li>
<li>CAP和BASE</li>
<li>三高：高性能、高可用、高可扩展</li>
<li>···</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="1-3-🚀3V-3H"><a href="#1-3-🚀3V-3H" class="headerlink" title="1.3 🚀3V+3H"></a>1.3 🚀3V+3H</h3><ul>
<li>大数据时代的3V<ul>
<li>海量 Volume</li>
<li>多样 Variety</li>
<li>实时 Velocity</li>
</ul>
</li>
<li>互联网需求的3H<ul>
<li>高并发 High concurrency</li>
<li>高可拓 High scalable</li>
<li>高性能 High performance</li>
</ul>
</li>
</ul>
<h3 id="1-4-📚分类"><a href="#1-4-📚分类" class="headerlink" title="1.4 📚分类"></a>1.4 📚分类</h3><blockquote>
<p>😭呜呜呜，我好菜，我啥都不会🍼</p>
</blockquote>
<table>
<thead>
<tr>
<th>分类</th>
<th>举例</th>
<th>典型应用场景</th>
<th>数据模型</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td>键值对</td>
<td>Tokyo Cabinet/Tyrant，Redis，Voldemort，Oracle BDB</td>
<td>内容UAN，主要用于处理大量数据的高访问负载，也用于一些日志系统等等</td>
<td>Key指向value的键值对，通常用hash table来实现</td>
<td>查找速度快</td>
<td>数据无结构化，通常只被当做字符串或者二进制数据</td>
</tr>
<tr>
<td>列存储数据库</td>
<td>Cassandra，HBase，Riak</td>
<td>分布式的文件系统</td>
<td>以列簇式存储，将同一列数据存在一起</td>
<td>查找速度快，可扩展性强，更容易进行分布式扩展</td>
<td>功能相对局限</td>
</tr>
<tr>
<td>文档型数据库</td>
<td>CouchDB，MongoDB</td>
<td>Web应用</td>
<td>Key-Value对应的键值对，Value为结构化数据</td>
<td>数据结构要求不严格，表结构可变，不需要像关系型数据库一样需要预先定义表结构</td>
<td>查询性能不高，而且缺乏统一的查询语言</td>
</tr>
<tr>
<td>图形数据库</td>
<td>Neo4J，InfoGrid，Infinite Graph</td>
<td>社交网络、推荐系统等等，专注于构建关系图谱</td>
<td>图结构</td>
<td>利用图结构相关算法。比如最短路径寻址，N度关系查找等</td>
<td>很多时候需要对整个图做计算才能得出需要的信息，而且这种结构不太好做分布式的集群方案</td>
</tr>
</tbody></table>
<h3 id="1-5-📈阿里巴技术演进"><a href="#1-5-📈阿里巴技术演进" class="headerlink" title="1.5 📈阿里巴技术演进"></a>1.5 📈阿里巴技术演进</h3><blockquote>
<p>✡技术并无高低之分，就看你如何使用</p>
</blockquote>
<img src="/posts/bae4ff13/image-20201009144812661.png" class="" title="image-20201009144812661.png">

<img src="/posts/bae4ff13/image-20201009145619674.png" class="" title="image-20201009145619674.png">

<img src="/posts/bae4ff13/image-20201009153115683.png" class="" title="image-20201009153115683.png">

<img src="/posts/bae4ff13/image-20201009153346176.png" class="" title="image-20201009153346176.png">





<h2 id="2-📩Redis入门"><a href="#2-📩Redis入门" class="headerlink" title="2. 📩Redis入门"></a>2. 📩Redis入门</h2><blockquote>
<p> 🌐 official website</p>
</blockquote>
<ul>
<li><p>英文官网：<a href="https://www.redis.io/">redis</a></p>
</li>
<li><p>中文官网：<del><a href="https://www.redis.cn/">redis</a></del></p>
</li>
<li><p>中文官网：<a href="https://www.redis.net.cn/">redis</a></p>
</li>
</ul>
<h3 id="2-1-📑简介"><a href="#2-1-📑简介" class="headerlink" title="2.1 📑简介"></a>2.1 📑简介</h3><blockquote>
<p>💡 Redis = Remote Dictionary Server</p>
</blockquote>
<p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 <a href="http://redis.cn/topics/data-types-intro.html#strings">字符串（strings）</a>， <a href="http://redis.cn/topics/data-types-intro.html#hashes">散列（hashes）</a>， <a href="http://redis.cn/topics/data-types-intro.html#lists">列表（lists）</a>， <a href="http://redis.cn/topics/data-types-intro.html#sets">集合（sets）</a>， <a href="http://redis.cn/topics/data-types-intro.html#sorted-sets">有序集合（sorted sets）</a> 与范围查询， <a href="http://redis.cn/topics/data-types-intro.html#bitmaps">bitmaps</a>， <a href="http://redis.cn/topics/data-types-intro.html#hyperloglogs">hyperloglogs</a> 和 <a href="http://redis.cn/commands/geoadd.html">地理空间（geospatial）</a> 索引半径查询。 Redis 内置了 <a href="http://redis.cn/topics/replication.html">复制（replication）</a>，<a href="http://redis.cn/commands/eval.html">LUA脚本（Lua scripting）</a>， <a href="http://redis.cn/topics/lru-cache.html">LRU驱动事件（LRU eviction）</a>，<a href="http://redis.cn/topics/transactions.html">事务（transactions）</a> 和不同级别的 <a href="http://redis.cn/topics/persistence.html">磁盘持久化（persistence）</a>， 并通过 <a href="http://redis.cn/topics/sentinel.html">Redis哨兵（Sentinel）</a>和自动 <a href="http://redis.cn/topics/cluster-tutorial.html">分区（Cluster）</a>提供高可用性（high availability）^(来自官方文档)^。</p>
<h3 id="2-2-🌠特性"><a href="#2-2-🌠特性" class="headerlink" title="2.2 🌠特性"></a>2.2 🌠特性</h3><ul>
<li><input checked="" disabled="" type="checkbox"> 性能优秀，数据在内存中，读写速度非常快，支持10w并发QPS</li>
<li><input checked="" disabled="" type="checkbox"> 单进程单线程，是线程安全的，采用IO多路复用机制</li>
<li><input checked="" disabled="" type="checkbox"> 丰富的数据类型，支持String、Hash、List、Set、Sorted Set</li>
<li><input checked="" disabled="" type="checkbox"> 支持数据持久化，可以将内存中数据保存在磁盘中，重启时加载</li>
<li><input checked="" disabled="" type="checkbox"> 主从复制，哨兵模式，高可用</li>
<li><input checked="" disabled="" type="checkbox"> 可以用作分布式锁</li>
<li><input checked="" disabled="" type="checkbox"> 可以进行地图信息分析</li>
<li><input checked="" disabled="" type="checkbox"> 可以作为消息中间件使用，支持发布订阅</li>
<li><input checked="" disabled="" type="checkbox"> 可以作为计数器使用，记录网页或者小程序等的浏览量</li>
<li><input checked="" disabled="" type="checkbox"> ······</li>
</ul>
<h3 id="2-3-🔰拓展"><a href="#2-3-🔰拓展" class="headerlink" title="2.3 🔰拓展"></a>2.3 🔰拓展</h3><blockquote>
<p>Redis 🆚 Memcache</p>
</blockquote>
<ol>
<li>存储方式上：memcache会把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小。redis有部分数据存在硬盘上，这样能保证数据的持久性</li>
<li>数据支持类型上：memcache对数据类型的支持简单，只支持简单的key-value，而redis支持五大数据类型和三大特殊数据类型</li>
<li>底层模型上：它们之间底层实现方式以及与客户端之间的应用协议不一样。redis直接构建了VM机制，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求</li>
<li>value的大小：redis可以达到1GB，而memcache只有1MB</li>
</ol>
<h2 id="3-📩Redis安装"><a href="#3-📩Redis安装" class="headerlink" title="3. 📩Redis安装"></a>3. 📩Redis安装</h2><blockquote>
<p>⚠️ notice</p>
</blockquote>
<ul>
<li><p>Github上redis的windows版本已经很久不再更新，对于最新的3.2.100版本，个人使用过，redis-cli.exe使用起来偶尔会出问题，命令写出来那一行会变成黑色，兼容性不太好，由于3.0不支持GEO等操作，我还是选择使用3.2.100版本。</p>
</li>
<li><p>Redis这种高性能服务器本身与CentOS的体质就很般配，个人推荐在Linux上安装，尤其是后期搭建redis集群环境。CentOS7本身自带的yum镜像中带的gcc安装包只有4.8.5版本，不支持高版本redis的编译，所以推荐下载5.0.8版本。</p>
</li>
<li><p>以上，不管是Windows还是Linux，都推荐使用Xshell开启Redis服务器和客户端。</p>
</li>
</ul>
<blockquote>
<p>🔽Xshell</p>
</blockquote>
<ul>
<li>网盘链接：<a href="https://pan.baidu.com/s/1qWtPzJgF3N24yIlUfTtq9w">https://pan.baidu.com/s/1qWtPzJgF3N24yIlUfTtq9w</a></li>
<li>提取码：kkkk</li>
</ul>
<h3 id="3-1-💻Windows10-安装"><a href="#3-1-💻Windows10-安装" class="headerlink" title="3.1 💻Windows10 安装"></a>3.1 💻Windows10 安装</h3><blockquote>
<p>下载: <a href="https://github.com/MSOpenTech/redis/releases">redis</a></p>
</blockquote>
<img src="/posts/bae4ff13/image-20201008213905860.png" class="" title="image-20201008213905860">

<blockquote>
<p>解压</p>
</blockquote>
<img src="/posts/bae4ff13/image-20201008214011620.png" class="" title="image-20201008214011620">

<blockquote>
<p>启动</p>
</blockquote>
<img src="/posts/bae4ff13/image-20201008214053586.png" class="" title="image-20201008214053586">



<h3 id="3-2-💻CentOS7-安装"><a href="#3-2-💻CentOS7-安装" class="headerlink" title="3.2 💻CentOS7 安装"></a>3.2 💻CentOS7 安装</h3><blockquote>
<p>安装gcc: <code>yum install gcc-c++ tcl</code></p>
<p>注意安装 version&gt;6 的redis需要 version&gt;5 的gcc: </p>
<p><code>sudo yum install centos-release-scl</code><br><code>sudo yum install devtoolset-7-gcc*</code><br><code>scl enable devtoolset-7 bash</code></p>
</blockquote>
<img src="/posts/bae4ff13/image-20201008224757570.png" class="" title="image-20201008224757570">

<blockquote>
<p>下载压缩包: <code>wget http://download.redis.io/releases/redis-5.0.8.tar.gz</code></p>
</blockquote>
<img src="/posts/bae4ff13/image-20201008223909191.png" class="" title="image-20201008223909191">

<blockquote>
<p>解压压缩包: <code>tar xzf redis-5.0.8.tar.gz</code></p>
</blockquote>
<img src="/posts/bae4ff13/image-20201008224102401.png" class="" title="image-20201008224102401">

<blockquote>
<p>跳转目录: <code>cd redis-5.0.8</code>    </p>
</blockquote>
<img src="/posts/bae4ff13/image-20201008215145306.png" class="" title="image-20201008215145306">

<blockquote>
<p>编译安装: <code>make</code></p>
</blockquote>
<img src="/posts/bae4ff13/image-20201008215335902.png" class="" title="image-20201008215335902">

<img src="/posts/bae4ff13/image-20201008224230979.png" class="" title="image-20201008224230979">

<blockquote>
<p>再次编译: <code>make</code></p>
</blockquote>
<img src="/posts/bae4ff13/image-20201008224450296.png" class="" title="image-20201008224450296">

<blockquote>
<p>最后安装: </p>
<p><code>cd src/</code></p>
<p><code>make install</code></p>
</blockquote>
<img src="/posts/bae4ff13/image-20201008230537427.png" class="" title="image-20201008230537427">

<blockquote>
<p>查看结果: <code>ll /usr/local/bin/</code></p>
</blockquote>
<img src="/posts/bae4ff13/image-20201008230723447.png" class="" title="image-20201008230723447">

<blockquote>
<p>更改配置:</p>
<p>新建配置文件目录: <code>mkdir kconfig</code>   </p>
<p>将原生Redis配置文件复制进来: <code>cp /home/parak/Redis/redis-5.0.8/redis.conf </code></p>
<p>修改配置文件: <code>gedit redis.conf</code> </p>
<pre><code>daemonize yes</code></pre>
</blockquote>
<blockquote>
<p>测试启动: <code>redis-server kconfig/redis.conf</code></p>
</blockquote>
<img src="/posts/bae4ff13/image-20201009105138976.png" class="" title="image-20201009105138976">

<blockquote>
<p>查看redis进程: <code>ps -ef | grep redis</code></p>
</blockquote>
<img src="/posts/bae4ff13/image-20201009105424943.png" class="" title="image-20201009105424943">

<blockquote>
<p>关闭redis服务: <code>shutdown</code></p>
</blockquote>
<img src="/posts/bae4ff13/image-20201009105552015.png" class="" title="image-20201009105552015">



<h2 id="4-📩Redis配置"><a href="#4-📩Redis配置" class="headerlink" title="4. 📩Redis配置"></a>4. 📩Redis配置</h2><h3 id="4-1-🚩命令"><a href="#4-1-🚩命令" class="headerlink" title="4.1 🚩命令"></a>4.1 🚩命令</h3><blockquote>
<p>👀查看所有配置项</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">config get *<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>✏命令行编辑配置</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">config set <option> <value><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="4-2-📝redis-conf-配置项说明"><a href="#4-2-📝redis-conf-配置项说明" class="headerlink" title="4.2 📝redis.conf 配置项说明"></a>4.2 📝redis.conf 配置项说明</h3><table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">配置项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left"><code>daemonize no</code></td>
<td align="left">Redis 默认不是以守护进程的方式运行，可以通过该配置项修改，使用 yes 启用守护进程（Windows 不支持守护线程的配置为 no ）</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left"><code>pidfile /var/run/redis.pid</code></td>
<td align="left">当 Redis 以守护进程方式运行时，Redis 默认会把 pid 写入 /var/run/redis.pid 文件，可以通过 pidfile 指定</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left"><code>port 6379</code></td>
<td align="left">指定 Redis 监听端口，默认端口为 6379</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left"><code>bind 127.0.0.1</code></td>
<td align="left">绑定的主机地址</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left"><code>timeout 300</code></td>
<td align="left">当客户端闲置多长秒后关闭连接，如果指定为 0 ，表示关闭该功能</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left"><code>loglevel notice</code></td>
<td align="left">指定日志记录级别，Redis 总共支持四个级别：debug、verbose、notice、warning，默认为 notice</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left"><code>logfile stdout</code></td>
<td align="left">日志记录方式，默认为标准输出，如果配置 Redis 为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给 /dev/null</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left"><code>databases 16</code></td>
<td align="left">设置数据库的数量，默认数据库为0，可以使用SELECT 命令在连接上指定数据库id</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left"><code>save  </code>Redis 默认配置文件中提供了三个条件：<strong>save 900 1</strong>、<strong>save 300 10</strong> 、<strong>save 60 10000</strong>分别表示 900 秒（15 分钟）内有 1 个更改，300 秒（5 分钟）内有 10 个更改以及 60 秒内有 10000 个更改。</td>
<td align="left">指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</td>
</tr>
<tr>
<td align="left">10</td>
<td align="left"><code>rdbcompression yes</code></td>
<td align="left">指定存储至本地数据库时是否压缩数据，默认为 yes，Redis 采用 LZF 压缩，如果为了节省 CPU 时间，可以关闭该选项，但会导致数据库文件变的巨大</td>
</tr>
<tr>
<td align="left">11</td>
<td align="left"><code>dbfilename dump.rdb</code></td>
<td align="left">指定本地数据库文件名，默认值为 dump.rdb</td>
</tr>
<tr>
<td align="left">12</td>
<td align="left"><code>dir ./</code></td>
<td align="left">指定本地数据库存放目录</td>
</tr>
<tr>
<td align="left">13</td>
<td align="left"><code>slaveof  </code></td>
<td align="left">设置当本机为 slave 服务时，设置 master 服务的 IP 地址及端口，在 Redis 启动时，它会自动从 master 进行数据同步</td>
</tr>
<tr>
<td align="left">14</td>
<td align="left"><code>masterauth </code></td>
<td align="left">当 master 服务设置了密码保护时，slav 服务连接 master 的密码</td>
</tr>
<tr>
<td align="left">15</td>
<td align="left"><code>requirepass foobared</code></td>
<td align="left">设置 Redis 连接密码，如果配置了连接密码，客户端在连接 Redis 时需要通过 AUTH <password> 命令提供密码，默认关闭</td>
</tr>
<tr>
<td align="left">16</td>
<td align="left"><code> maxclients 128</code></td>
<td align="left">设置同一时间最大客户端连接数，默认无限制，Redis 可以同时打开的客户端连接数为 Redis 进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis 会关闭新的连接并向客户端返回 max number of clients reached 错误信息</td>
</tr>
<tr>
<td align="left">17</td>
<td align="left"><code>maxmemory </code></td>
<td align="left">指定 Redis 最大内存限制，Redis 在启动时会把数据加载到内存中，达到最大内存后，Redis 会先尝试清除已到期或即将到期的 Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis 新的 vm 机制，会把 Key 存放内存，Value 会存放在 swap 区</td>
</tr>
<tr>
<td align="left">18</td>
<td align="left"><code>appendonly no</code></td>
<td align="left">指定是否在每次更新操作后进行日志记录，Redis 在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis 本身同步数据文件是按上面 save 条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为 no</td>
</tr>
<tr>
<td align="left">19</td>
<td align="left"><code>appendfilename appendonly.aof</code></td>
<td align="left">指定更新日志文件名，默认为 appendonly.aof</td>
</tr>
<tr>
<td align="left">20</td>
<td align="left"><code>appendfsync everysec</code></td>
<td align="left">指定更新日志条件，共有 3 个可选值：<strong>no</strong>：表示等操作系统进行数据缓存同步到磁盘（快）<strong>always</strong>：表示每次更新操作后手动调用 fsync() 将数据写到磁盘（慢，安全）<strong>everysec</strong>：表示每秒同步一次（折中，默认值）</td>
</tr>
<tr>
<td align="left">21</td>
<td align="left"><code>vm-enabled no</code></td>
<td align="left">指定是否启用虚拟内存机制，默认值为 no，简单的介绍一下，VM 机制将数据分页存放，由 Redis 将访问量较少的页即冷数据 swap 到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析 Redis 的 VM 机制）</td>
</tr>
<tr>
<td align="left">22</td>
<td align="left"><code>vm-swap-file /tmp/redis.swap</code></td>
<td align="left">虚拟内存文件路径，默认值为 /tmp/redis.swap，不可多个 Redis 实例共享</td>
</tr>
<tr>
<td align="left">23</td>
<td align="left"><code>vm-max-memory 0</code></td>
<td align="left">将所有大于 vm-max-memory 的数据存入虚拟内存，无论 vm-max-memory 设置多小，所有索引数据都是内存存储的(Redis 的索引数据 就是 keys)，也就是说，当 vm-max-memory 设置为 0 的时候，其实是所有 value 都存在于磁盘。默认值为 0</td>
</tr>
<tr>
<td align="left">24</td>
<td align="left"><code>vm-page-size 32</code></td>
<td align="left">Redis swap 文件分成了很多的 page，一个对象可以保存在多个 page 上面，但一个 page 上不能被多个对象共享，vm-page-size 是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page 大小最好设置为 32 或者 64bytes；如果存储很大大对象，则可以使用更大的 page，如果不确定，就使用默认值</td>
</tr>
<tr>
<td align="left">25</td>
<td align="left"><code>vm-pages 134217728</code></td>
<td align="left">设置 swap 文件中的 page 数量，由于页表（一种表示页面空闲或使用的 bitmap）是在放在内存中的，，在磁盘上每 8 个 pages 将消耗 1byte 的内存。</td>
</tr>
<tr>
<td align="left">26</td>
<td align="left"><code>vm-max-threads 4</code></td>
<td align="left">设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4</td>
</tr>
<tr>
<td align="left">27</td>
<td align="left"><code>glueoutputbuf yes</code></td>
<td align="left">设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启</td>
</tr>
<tr>
<td align="left">28</td>
<td align="left"><code>hash-max-zipmap-entries 64 hash-max-zipmap-value 512</code></td>
<td align="left">指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</td>
</tr>
<tr>
<td align="left">29</td>
<td align="left"><code>activerehashing yes</code></td>
<td align="left">指定是否激活重置哈希，默认为开启（后面在介绍 Redis 的哈希算法时具体介绍）</td>
</tr>
<tr>
<td align="left">30</td>
<td align="left"><code>include /path/to/local.conf</code></td>
<td align="left">指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</td>
</tr>
</tbody></table>
<h3 id="4-3-🔍-重点详解"><a href="#4-3-🔍-重点详解" class="headerlink" title="4.3 🔍 重点详解"></a>4.3 🔍 重点详解</h3><ol>
<li><p>UNIT: redis对大小写不敏感</p>
</li>
<li><p>INCLUEDS[模块]: 可以包含多个配置文件</p>
</li>
<li><p>MOUDLES[模块]: 启动时加载模块</p>
</li>
<li><p>NETWORK[网络]: </p>
<ul>
<li>bind: 绑定IP</li>
<li>protected-mode: 保护模式</li>
<li>post: 端口设置</li>
</ul>
</li>
<li><p>GENERAL[通用]: </p>
<ul>
<li>daemonize: 是否以守护进程的方式运行<a href="%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B">^1</a></li>
<li>pidfile /var/run/redis_6379.pid: 如果以后台的方式运行，就需要指定一个pid的配置文件</li>
<li>loglevel: 日志级别</li>
<li>logfile: 日志的文件位置</li>
<li>database: 数据库的数量</li>
<li>always-show-logo: 是否开启服务的时候显示logo</li>
</ul>
</li>
<li><p>SNAPSHOTTING[快照]:</p>
<ul>
<li>save 900 1: 如果在900s内，至少有1个key进行了修改，就进行持久化操作</li>
<li>save 300 10: 如果在300s内，至少有10个key进行了修改，就进行持久化操作</li>
<li>save 60 10000: 如果在60s内，至少有10000个key进行了修改，就进行持久化操作</li>
<li>stop-writes-on-bgsave-error: 持久化出现错误，是否让redis继续工作</li>
<li>rdbcompression: 是否压缩rdb文件，需要消耗一些CPU资源</li>
<li>rdbchecksum: 保存rdb的文件的时候，是否进行错误校验</li>
<li>dir: 文件保存的目录</li>
</ul>
</li>
<li><p>REPLICATION[复制]:</p>
<ul>
<li>见主从复制</li>
</ul>
</li>
<li><p>SECURITY[安全]:</p>
<ul>
<li><p>requirepass: 设置密码</p>
</li>
<li><pre class="line-numbers language-shell"><code class="language-shell"># 设置密码
> config set requirepass <password>
# 登录输入
> auth <password>
# 获取密码
> config get requirepass
# 取消设置
> config set requirepass ''<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
<li><p>CLIENTS[客户端]:</p>
<ul>
<li>maxclients: 设置可连接redis的最大客户端数量</li>
<li>maxmemory: 配置redis的最大内存容量</li>
<li>maxmemory-policy: 内存到达上限的处理策略<ul>
<li>volatile-lru：只对设置了过期时间的key进行LRU（默认值） </li>
<li>allkeys-lru ： 删除lru算法的key  </li>
<li>volatile-random：随机删除即将过期key  </li>
<li>allkeys-random：随机删除  </li>
<li>volatile-ttl ： 删除即将过期的  </li>
<li>noeviction ： 永不过期，返回错误</li>
</ul>
</li>
</ul>
</li>
<li><p>APPEND ONLY MODE[AOF]:</p>
<ul>
<li>appendonly: 默认不开启AOF模式</li>
<li>appendfilename: AOF持久化的文件名称</li>
<li>appendfsync always: 每次修改都会同步，消耗性能</li>
<li>appendfsync everysec: 每秒执行一次同步，可能会丢失这1s的数据</li>
<li>appendfsync no: 不执行同步，操作系统自己同步数据，速度最快</li>
</ul>
</li>
</ol>
<h2 id="5-📩Redis测试"><a href="#5-📩Redis测试" class="headerlink" title="5. 📩Redis测试"></a>5. 📩Redis测试</h2><h3 id="5-1🔬测试方法"><a href="#5-1🔬测试方法" class="headerlink" title="5.1🔬测试方法"></a>5.1🔬测试方法</h3><blockquote>
<p>redis的性能测试命令</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">redis-benchmark [option] [option value]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>🔔<strong>注意: 这个命令是在redis目录下执行，而非redis客户端的内部命令</strong></p>
<h3 id="5-2-📝redis性能测试工具可选参数"><a href="#5-2-📝redis性能测试工具可选参数" class="headerlink" title="5.2 📝redis性能测试工具可选参数"></a>5.2 📝redis性能测试工具可选参数</h3><table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">选项</th>
<th align="left">描述</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left"><strong>-h</strong></td>
<td align="left">指定服务器主机名</td>
<td align="left">127.0.0.1</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left"><strong>-p</strong></td>
<td align="left">指定服务器端口</td>
<td align="left">6379</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left"><strong>-s</strong></td>
<td align="left">指定服务器 socket</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">4</td>
<td align="left"><strong>-c</strong></td>
<td align="left">指定并发连接数</td>
<td align="left">50</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left"><strong>-n</strong></td>
<td align="left">指定请求数</td>
<td align="left">10000</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left"><strong>-d</strong></td>
<td align="left">以字节的形式指定 SET/GET 值的数据大小</td>
<td align="left">3</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left"><strong>-k</strong></td>
<td align="left">1=keep alive 0=reconnect</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left"><strong>-r</strong></td>
<td align="left">SET/GET/INCR 使用随机 key, SADD 使用随机值</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">9</td>
<td align="left"><strong>-P</strong></td>
<td align="left">通过管道传输 <numreq> 请求</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">10</td>
<td align="left"><strong>-q</strong></td>
<td align="left">强制退出 redis。仅显示 query/sec 值</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">11</td>
<td align="left"><strong>–csv</strong></td>
<td align="left">以 CSV 格式输出</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">12</td>
<td align="left"><strong>-l</strong></td>
<td align="left">生成循环，永久执行测试</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">13</td>
<td align="left"><strong>-t</strong></td>
<td align="left">仅运行以逗号分隔的测试命令列表。</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">14</td>
<td align="left"><strong>-I</strong></td>
<td align="left">Idle 模式。仅打开 N 个 idle 连接并等待。</td>
<td align="left"></td>
</tr>
</tbody></table>
<h3 id="5-3-📊测试结果分析"><a href="#5-3-📊测试结果分析" class="headerlink" title="5.3 📊测试结果分析"></a>5.3 📊测试结果分析</h3><pre class="line-numbers language-shell"><code class="language-shell">redis-benchmark -h 127.0.0.1 -p 6379 -c 100 -n 100000 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/bae4ff13/image-20201009193727448.png" class="" title="image-20201009193727448">

<pre class="line-numbers language-shell"><code class="language-shell">redis-benchmark -h 127.0.0.1 -p 6379 -c 1 -n 100000 -q<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/bae4ff13/image-20201009194004617.png" class="" title="image-20201009194004617">

<p>这个是对所有操作测试性能，每秒处理的请求数量。</p>
<h2 id="6-📩Redis基础"><a href="#6-📩Redis基础" class="headerlink" title="6. 📩Redis基础"></a>6. 📩Redis基础</h2><h3 id="6-1-💠Redis数据库"><a href="#6-1-💠Redis数据库" class="headerlink" title="6.1 💠Redis数据库"></a>6.1 💠Redis数据库</h3><p><strong>redis有16个数据库，默认使用第0个</strong></p>
<blockquote>
<p>测试连接</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">ping<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>关闭连接</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">quit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>返回消息</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">echo <str><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>切换数据库</p>
</blockquote>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">select</span> <span class="token operator">&lt;</span>num of database<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>获取当前数据库的大小</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">dbsize<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>清空当前数据库</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">flushdb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>清空所有数据库</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">flushall<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>交换数据库</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">swap <n1> <n2><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="6-2-🌏6379的故事"><a href="#6-2-🌏6379的故事" class="headerlink" title="6.2 🌏6379的故事"></a>6.2 🌏6379的故事</h3><p><strong>redis默认端口号为6379</strong></p>
<blockquote>
<p>作者在自己的一篇博文中解释了为什么选用 6379 作为默认端口，因为 6379 在手机按键上 MERZ 对应的号码，而 MERZ 取自意大利歌女 Alessia Merz 的名字。MERZ长期以来被Redis作者antirez及其朋友当作愚蠢的代名词，后来作者在开发Redis就选用了这个端口。</p>
</blockquote>
<h3 id="6-3-⚡Redis蜜汁速度"><a href="#6-3-⚡Redis蜜汁速度" class="headerlink" title="6.3 ⚡Redis蜜汁速度"></a>6.3 ⚡Redis蜜汁速度</h3><p><strong>redis是单线程的。</strong></p>
<p>redis基于内存操作，CPU不是redis的性能瓶颈，Redis的瓶颈很可能是机器内存或者网路带宽。</p>
<p>既然单线程容易实现，而且CPU不会成为瓶颈，那就顺理成章的采用单线程实现。</p>
<blockquote>
<p>💉理解Redis蜜汁速度需要跨过两个误区</p>
</blockquote>
<ul>
<li><p>误区1：高性能的服务器一定是多线程的？</p>
</li>
<li><p>误区2：多线程的效率一定比单线程高？</p>
</li>
</ul>
<blockquote>
<p>💊Redis采用单线程依然快的原因</p>
</blockquote>
<ol>
<li>Redis完全基于内存，读写全部在一个CPU上，绝大部分请求是纯粹的内存操作，非常迅速，数据存在于内存中，类似于HashMap，HashMap的优势就是查询和操作的时间复杂度时O(1)</li>
<li>数据结构简单，对数据操作也简单</li>
<li>采用单线程，避免了不必要的上下文切换和竞争条件，不存在多线程导致的CPU切换，不用取考虑各种锁的问题，不存在加锁放锁操作，没有死锁问题导致的性能消耗</li>
<li>使用多路复用IO模型，非阻塞IO</li>
</ol>
<h2 id="7-📩Redis数据类型"><a href="#7-📩Redis数据类型" class="headerlink" title="7. 📩Redis数据类型"></a>7. 📩Redis数据类型</h2><blockquote>
<p>🌞说明</p>
</blockquote>
<p>所有命令可查看中文官方文档: <a href="http://redis.cn/commands.html#">http://redis.cn/commands.html#</a></p>
<h3 id="7-1-🏆五大数据类型"><a href="#7-1-🏆五大数据类型" class="headerlink" title="7.1 🏆五大数据类型"></a>7.1 🏆五大数据类型</h3><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">简介</th>
<th align="center">特性</th>
<th align="center">场景</th>
</tr>
</thead>
<tbody><tr>
<td align="center">String(字符串)</td>
<td align="center">二进制安全</td>
<td align="center">可以包含任何数据，比如jpg图片或者序列化对象</td>
<td align="center">—</td>
</tr>
<tr>
<td align="center">Hash(字典)</td>
<td align="center">键值对集合</td>
<td align="center">适合存储对象，并且可以像数据库中的update一个属性一样值修改某一项属性值</td>
<td align="center">存储、读取、修改用户属性</td>
</tr>
<tr>
<td align="center">List(列表)</td>
<td align="center">双向链表</td>
<td align="center">增删快，提供了操作某一元素的api</td>
<td align="center">最新消息排行；消息队列</td>
</tr>
<tr>
<td align="center">Set(集合)</td>
<td align="center">hash表实现，元素不重复</td>
<td align="center">增删查快，提供了求交集、并集和差集的操作</td>
<td align="center">共同好友:  利用唯一性，统计网站UV</td>
</tr>
<tr>
<td align="center">Sorted Set(有序集合)</td>
<td align="center">将set中的元素增加一个权重score，元素按照score有序排列</td>
<td align="center">数据插入集合时，已经进行了天然排序</td>
<td align="center">排行榜；带权重的消息队列</td>
</tr>
</tbody></table>
<p><strong>🎲Key</strong></p>
<blockquote>
<p>查看所有的key</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">keys *<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>创建键值对</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">set <key> <value><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>获取key的值</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">get <key><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>移除键值对</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">move <key> <value><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>判断key是否存在</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">exists <key><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>查看key的类型</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">type <key><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>设置key的过期时间/秒</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">expire <key> <seconds> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>获取key的有效时间/秒</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">ttl <key><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>获取key的有效时间/毫秒</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">pttl <key><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="7-1-1-⚽String"><a href="#7-1-1-⚽String" class="headerlink" title="7.1.1 ⚽String"></a>7.1.1 ⚽String</h4><blockquote>
<p>向key上追加字符串</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">append <key> <value><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>获取key的长度</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">strlen <key><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>Integer操作</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell"># 加1
incr <key>
# 加n
incrby <key> n
# 减1
decr <key>
# 减n
decrby <key> n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>subString(start, end)操作</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell"># 截取整个字符串
getrange <key> 0 -1
# 截取部分字符串
getrange <key> start end
# 例如
> set s "Khighness"
> getrange s 0 -1 # "Khighness"
> getrange s 1 4  # "high"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>replace(start, end)操作</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell"># 把字符串从n位开始之后的字符替换为新的字符串newStr
setrange <key> n newStr
# 例如
> set s "Khighness"
> setrange s 0 X 
> get s # "Xhighness"
> setrange s 5 "XXXXX"
> get s # "XhighXXXXX"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>setex (set with expire) 创建键值对的同时设置过期时间</p>
<p>setnx (set if not exist)  如果key不存在则创建键值对，防止覆盖原有键值对 (分布式锁中经常使用)</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell"># 设置键值对，设置过期时间
setex <key> <seconds> <value>
# key不存在，则创建键值对
setnx <key> <value>

# 例如
127.0.0.1:6379> setex k1 10 parak
OK
127.0.0.1:6379> ttl k1
(integer) 5
127.0.0.1:6379> ttl k1
(integer) 3
127.0.0.1:6379> ttl k1
(integer) 2
127.0.0.1:6379> ttl k1
(integer) 2
127.0.0.1:6379> ttl k1
(integer) 1
127.0.0.1:6379> ttl k1
(integer) -2
127.0.0.1:6379> get k1
(nil)

127.0.0.1:6379> setnx k2 parak
(integer) 1 # 1代表设置成功
127.0.0.1:6379> setnx k2 flowerk
(integer) 0 # 0代表设置失败
127.0.0.1:6379> get k2
"parak"     
127.0.0.1:6379> setnx k2 FlowerK
(integer) 0 
127.0.0.1:6379> set k2 FlowerK
OK          # 强制设置value
127.0.0.1:6379> get k2
"FlowerK"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>多个键值对操作</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell"># 一次性创建多个键值对
mset <key> <value> [key value ...]
# 获取多个key的值
meget <key> [key ...]
# 不存在则创建多个键值对
# 原子性操作，只要其中有一个key已存在，就会全部创建失败
msetnx <key> <value> [key value ...]

# 例如
127.0.0.1:6379> mset k1 v1 k2 v2 k3 v3
OK
127.0.0.1:6379> mget k1 k2 k3
1) "v1"
2) "v2"
3) "v3"
127.0.0.1:6379> msetnx k2 v2 k4 v4 k5 v5
(integer) 0
127.0.0.1:6379> keys *
1) "k2"
2) "k3"
3) "k1"

# 巧妙设计key  object:&#123;id&#125;:&#123;field&#125;
127.0.0.1:6379> mset user:1:name Khighness user:1:age 18
OK
127.0.0.1:6379> mget user:1:name user:1:age
1) "Khighness"
2) "18"
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>组合操作</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell"># 先获取值，再设置新的值
getset k v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="7-1-2-⚾List"><a href="#7-1-2-⚾List" class="headerlink" title="7.1.2 ⚾List"></a>7.1.2 ⚾List</h4><p>redis里面，list可以当成栈、队列、队列。</p>
<blockquote>
<p>向list的头部添加值</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">lpush <key> value [value ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>向list的尾部添加值</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">rpush <key> value [value ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>判断list是否存在</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">exists <key><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>移除列表的第一个元素</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">lpop <key> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>移除列表的最后一个元素</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">rpop <key> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>移除指定的值</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">lrem <key> <count> <value><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>更新list</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell"># 根据index更新值
lset <key> <index> <value><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>根据下标获取值</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">lindex <key> <index><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>获取list的长度</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">llen <key><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>获取list指定范围的值</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell"># 获取整个list的值
lrange <key> 0 -1
# 获取指定范围的值
lrange <key> start end

# 例如
127.0.0.1:6379> lpush list1 1 2 3 4 5 
(integer) 5
127.0.0.1:6379> lrange list1 0 -1
1) "5"
2) "4"
3) "3"
4) "2"
5) "1"
127.0.0.1:6379> lrange list1 0 1
1) "5"
2) "4"
127.0.0.1:6379> rpush list2 1 2 3 4 5
(integer) 5
127.0.0.1:6379> lrange list2 0 -1
1) "1"
2) "2"
3) "3"
4) "4"
5) "5"
127.0.0.1:6379> lrange list2 0 1
1) "1"
2) "2"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>截取list中指定范围的值</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell"># 保留下标[start, end]的值
ltrim <key> start end

# 例如
127.0.0.1:6379> rpush list parak1 parak2 parak3 parak4 parak5
(integer) 5
127.0.0.1:6379> ltrim list 0 2
OK
127.0.0.1:6379> lrange list 0 -1
1) "parak1"
2) "parak2"
3) "parak3"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>组合操作</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell"># 移除source的尾部的值插入到destination的头部
rpoplpush <source> <destination>

# 例如
127.0.0.1:6379> rpush list 1 2 3 4 5
(integer) 5
127.0.0.1:6379> rpoplpush list newlist
"5"
127.0.0.1:6379> lrange newlist 0 -1
1) "5"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>在list中插入值</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell"># 在list中的某个值之前插入
linsert <key> before <priot> <value>
# 在list中的某个值之后插入
linsert <key> after <priot> <value>

# 例如
127.0.0.1:6379> rpush list 1 2 3 4 5
(integer) 5
127.0.0.1:6379> linsert list before 3 6
(integer) 6
127.0.0.1:6379> lrange list 0 -1
1) "1"
2) "2"
3) "6"
4) "3"
5) "4"
6) "5"
127.0.0.1:6379> linsert list after 5 7
(integer) 7
127.0.0.1:6379> lrange list 0 -1
1) "1"
2) "2"
3) "6"
4) "3"
5) "4"
6) "5"
7) "7"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="7-1-3-🏀Set"><a href="#7-1-3-🏀Set" class="headerlink" title="7.1.3 🏀Set"></a>7.1.3 🏀Set</h4><p>set 无序不重复集合</p>
<ul>
<li>set通过哈希表实现，所有增删查的时间复杂度是O(1)</li>
</ul>
<blockquote>
<p>向set中国添加值</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">sadd <key> <value> [value ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>查看set中的所有值</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">smembers <key><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>查看set中是否包含值value</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">sismember <key> <value><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>获取set中的元素个数</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">scard <key><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>移除set中的值value</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">srem <key> <value><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>获取set中的随机值(可以做抽奖功能)</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">srandmember <key><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>随机移除set中的元素</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">spop <key><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>将一个set集合中指定的值移动到另一个set集合</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell"># 将source中的value移动到destination
smove <source> <destination> <value>

# 例如
127.0.0.1:6379> sadd set k1 k2 k3 k4 k5 k6 k7
(integer) 7
127.0.0.1:6379> sadd newset k1
(integer) 1
127.0.0.1:6379> smove set newset k3
(integer) 1
127.0.0.1:6379> smembers newset
1) "k3"
2) "k1"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>集合运算</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell"># 集合s1和s2的并集
sunion <s1> <s>
# 集合s1和s2的交集 (实现共同好友、共同关注)
sinter <s1> <s2>
# 集合s1中独有的元素
sdiff <s1> <s2>

# 例如
127.0.0.1:6379> sadd s1 k1 k2 k3 k4 k5 k6
(integer) 6
127.0.0.1:6379> sadd s2 k5 k6 k7 k8 k9 k10
(integer) 6
127.0.0.1:6379> sunion s1 s2
 1) "k5"
 2) "k6"
 3) "k8"
 4) "k2"
 5) "k3"
 6) "k1"
 7) "k4"
 8) "k7"
 9) "k10"
10) "k9"
127.0.0.1:6379> sinter s1 s2
1) "k5"
2) "k6"
127.0.0.1:6379> sdiff s1 s2
1) "k2"
2) "k1"
3) "k3"
4) "k4"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="7-1-4-🏈Hash"><a href="#7-1-4-🏈Hash" class="headerlink" title="7.1.4 🏈Hash"></a>7.1.4 🏈Hash</h4><p>相当于key-HashMap，value为一个map集合，更适合于对象的存储，多用于存储变更数据、</p>
<blockquote>
<p>设置key指定的哈希集中指定字段的值</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">hset <key> <field> <value> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>key指定的哈希集中不存在指定字段时，设置字段的值</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">hsetnx <key> <field> <value><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>删除key指定的哈希集中指定字段</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">hdel <key> <field> [field ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>判断key指定哈希集中指定字段是否存在</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">hexists <key> <field><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>对key指定的哈希集中指定字段的值加上增量(Integer型，可正可负，字段不存在则在操作执行前把该字段的值设置为0)</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">hincrby <key> <field> <integer><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>对key指定的哈希集中指定字段的值加上增量(float型，可正可负，字段不存在则在操作执行前把该字段的值设置为0)</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">hincrbyfloat <key> <field> <float><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>获取key指定的哈希集中字段数量</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">hlen <key> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>获取key指定的哈希集中指定字段的值的字符串长度</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">hstrlen hash <key> <value> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>key指定的哈希集操作</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell"># 设置key指定的哈希集中指定字段的值
hmset <key> <field> <value> [field value ...]
# 获取key指定的哈希集中指定字段所关联的值
hmget <key> <field> [field ...]
# 获取key指定的哈希集中所有字段的名字
hkeys
# 获取key指定哈希集中所有字段的值
hvals
# 获取key指定的哈希集中所有的字段和值
hgetall

# 例如
127.0.0.1:6379> hmset hash field1 hello field2 world
OK
127.0.0.1:6379> hmget hash field1 field2
1) "hello"
2) "world"
127.0.0.1:6379> hkeys hash
1) "field1"
2) "field2"
127.0.0.1:6379> hvals hash
1) "hello"
2) "world"
127.0.0.1:6379> hgetall hash
1) "field1"
2) "hello"
3) "field2"
4) "world"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="7-1-5-🏉Sorted-Set"><a href="#7-1-5-🏉Sorted-Set" class="headerlink" title="7.1.5 🏉Sorted Set"></a>7.1.5 🏉Sorted Set</h4><p>有序集合sorted set，集合中每个元素都会关联一个double类型的分数。</p>
<ul>
<li><p>redis通过分数对集合中的成员进行排序。</p>
</li>
<li><p>有序集合中成员是唯一的，分数可以重复。</p>
</li>
<li><p>集合是通过哈希表实现的，所以增删查的事件复杂度都是O(1)。</p>
</li>
<li><p>集合中最大的成员数量为2^32^-1(4294967295)， 每个集合可存储40多亿个成员。</p>
</li>
</ul>
<blockquote>
<p>向key的有序集合中添加序号为number的value</p>
</blockquote>
<pre class="line-numbers language-she"><code class="language-she">zadd <key> <number> <value> [number value ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>获取key的有序集合中的所有值</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">zrange <key> 0 -1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>获取key的有序集合中的成员数量</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">zcard <key> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>获取key的有序集合中指定下标区间的成员</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">zrange <key> start end<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>获取key的有序集合中指定成员member的索引</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">zrank <key> member<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>对key的有序集合中指定成员member的分数加上增量</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">zincrby <key> <Integer> member<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>获取key的有序集合中指定成员member的分数值</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">zscore <key> member<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>获取key的有序集合中指定成员member的排名(从小到大)</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">zrank <key> member<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>获取key的有序集合中指定成员member的排名(从大到小)</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">zrevrank <key> member<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>获取key的有序集合中分数在指定区间[min,max]的成员数量</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">zcount <key> min max<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>通过字典区间获取key的有序集合中的成员数量</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">zlexcount <key> min max<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>通过字典区间获取key的有序集合中的成员</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">zrangebylex <key> min max [limit offset count]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>获取key的有序集合中分数在指定区间[min,max]的成员</p>
<blockquote>
<p>参数说明</p>
<ul>
<li>min max<ul>
<li>默认情况下为闭区间，即[min ,max]</li>
<li>也可以是使用开区间，即(min, max)，写法为<code> (min  (max</code></li>
</ul>
</li>
<li>withscores<ul>
<li>返回成员的同时会返回分数</li>
</ul>
</li>
<li>limit offset count<ul>
<li>offset：起始位置，count：从起始位置开始的记录数量</li>
<li>实现分页查询</li>
<li>参数: 页数pagenum，页面大小pagesize</li>
<li>那么实际的offset = (pagenum - 1) * pagesize，count = pagesize</li>
<li>即查询语句为<code>zrangebyscore salary min max withscores limit (pagenum - 1) * pagesize pagesize  </code></li>
</ul>
</li>
</ul>
</blockquote>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">zrangebyscore <key> min max [withscores] [limit offset count]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>例如</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">127.0.0.1:6379> zadd salary -10000 W -20000 F -30000 S
(integer) 3
127.0.0.1:6379> zadd salary 10000 K 20000 A 30000 G
(integer) 3
127.0.0.1:6379> zrangebyscore salary -20000 20000
1) "F"
2) "W"
3) "K"
4) "A"
127.0.0.1:6379> zrangebyscore salary -inf inf 
1) "S"
2) "F"
3) "W"
4) "K"
5) "A"
6) "G"
127.0.0.1:6379> zrangebyscore salary -inf inf withscores
 1) "S"
 2) "-30000"
 3) "F"
 4) "-20000"
 5) "W"
 6) "-10000"
 7) "K"
 8) "10000"
 9) "A"
10) "20000"
11) "G"
12) "30000"
127.0.0.1:6379> zrangebyscore salary -inf inf withscores limit 4 2
1) "G"
2) "30000"
3) "K"
4) "60000"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>删除key的有序集合中的一个或多个成员</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">zrem <key> member [member ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="7-2-🌌三种特殊类型"><a href="#7-2-🌌三种特殊类型" class="headerlink" title="7.2 🌌三种特殊类型"></a>7.2 🌌三种特殊类型</h3><h4 id="7-2-1-🔮Geospatial"><a href="#7-2-1-🔮Geospatial" class="headerlink" title="7.2.1 🔮Geospatial"></a>7.2.1 🔮Geospatial</h4><p>Geospatial，地理空间，简称GEO，主要用于存储地理位置信息，并对存储的信息进行操作。</p>
<blockquote>
<p>操作方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">geoadd</td>
<td align="center">添加地理位置的坐标</td>
</tr>
<tr>
<td align="center">geopos</td>
<td align="center">获取地理位置的坐标</td>
</tr>
<tr>
<td align="center">geodist</td>
<td align="center">计算两个位置之间的距离</td>
</tr>
<tr>
<td align="center">georadius</td>
<td align="center">根据用户给定的经纬度坐标来获取指定范围内的地理位置集合</td>
</tr>
<tr>
<td align="center">georadiusbymember</td>
<td align="center">根据储存在位置集合里面的某个地点获取指定范围内的地理位置集合</td>
</tr>
<tr>
<td align="center">geohash</td>
<td align="center">返回一个或者多个位置对象的geohash值</td>
</tr>
</tbody></table>
<p>查询地理数据：<a href="http://www.jsons.cn/lngcode/">城市经纬度查询</a></p>
<blockquote>
<p>测试数据</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">地方</th>
<th align="center">经度</th>
<th align="center">纬度</th>
</tr>
</thead>
<tbody><tr>
<td align="center">黄冈市黄梅县</td>
<td align="center">115.94427</td>
<td align="center">30.07033</td>
</tr>
<tr>
<td align="center">武汉市武昌区</td>
<td align="center">114.31589</td>
<td align="center">30.55389</td>
</tr>
<tr>
<td align="center">北京市丰台区</td>
<td align="center">116.28625</td>
<td align="center">39.8585</td>
</tr>
<tr>
<td align="center">上海市黄浦区</td>
<td align="center">121.49295</td>
<td align="center">31.22337</td>
</tr>
<tr>
<td align="center">合肥市蜀山区</td>
<td align="center">117.26104</td>
<td align="center">31.85117</td>
</tr>
<tr>
<td align="center">深圳市南山区</td>
<td align="center">113.93029</td>
<td align="center">22.53291</td>
</tr>
<tr>
<td align="center">大连市中山区</td>
<td align="center">121.64465</td>
<td align="center">38.91859</td>
</tr>
<tr>
<td align="center">广州市天河区</td>
<td align="center">113.36112</td>
<td align="center">23.12467</td>
</tr>
</tbody></table>
<p>1️⃣<strong>geoadd</strong></p>
<blockquote>
<p>描述</p>
</blockquote>
<p>geoadd用于存储指定的地理位置空间，可以将一个或多个经度(longitude)、纬度(latitude)、位置名称(member)添加到指定的key中。</p>
<blockquote>
<p>语法</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">geoadd <key> longitude latitude member [longtitude latitude member ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>规则</p>
</blockquote>
<ul>
<li>两级无法直接添加</li>
<li>有效经度：-180 - 180</li>
<li>有效纬度：-85.05112878 - 85.05112878</li>
</ul>
<blockquote>
<p>实例</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">127.0.0.1:6379> geoadd china:city 115.94427 30.07033 huanggang
(integer) 1
127.0.0.1:6379> geoadd china:city 114.31589 30.55389 wuhan
(integer) 1
127.0.0.1:6379> geoadd china:city 116.28625 39.8585 beijing
(integer) 1
127.0.0.1:6379> geoadd china:city 121.49295 31.22337 shanghai
(integer) 1
127.0.0.1:6379> geoadd china:city 117.26104 31.85117 hefei
(integer) 1
127.0.0.1:6379> geoadd china:city 113.93029 22.53291 shenzhen
(integer) 1
127.0.0.1:6379> geoadd china:city 121.64465 38.91859 dalian
(integer) 1
127.0.0.1:6379> geoadd china:city 113.36112 23.12467 guangzhou
(integer) 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>实际应用中，一般会把城市地理数据写在文件中，直接通过java程序一次性导入。</p>
<p>2️⃣<strong>geopos</strong></p>
<blockquote>
<p>描述</p>
</blockquote>
<p>geopos用于从给定的key里返回所有指定名称(member)的位置(经度和纬度)，不存在的返回nil。</p>
<blockquote>
<p>语法</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">geopos <key> member [member ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>实例</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">127.0.0.1:6379> geopos china:city huanggang shenzhen shanghai 
1) 1) "115.94427019357681274"
   2) "30.07033115798519418"
2) 1) "113.93029063940048218"
   2) "22.53290942281488896"
3) 1) "121.49295061826705933"
   2) "31.22337074392616074"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>3️⃣<strong>geodist</strong></p>
<blockquote>
<p>描述</p>
</blockquote>
<p>geodist用于计算两个给定位置之间的距离。</p>
<blockquote>
<p>语法</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">geodist <key> member1 member2 [m|km|ft|mi]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>参数说明：</p>
<ul>
<li>member1和member2为两个地理位置</li>
<li>m：米，默认位置</li>
<li>km：千米</li>
<li>mi：英里</li>
<li>ft：英尺</li>
</ul>
<blockquote>
<p>实例</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">127.0.0.1:6379> geodist china:city huanggang shenzhen
"862016.4959"
127.0.0.1:6379> geodist china:city huanggang hefei km
"234.5308"
127.0.0.1:6379> geodist china:city shanghai dalian mi
"531.9085"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>4️⃣<strong>georadius</strong></p>
<blockquote>
<p>描述</p>
</blockquote>
<p>给定一个中心的地理位置(经度和纬度)，给定一个最大距离，返回给定的key包含的位置元素中，与中心的距离不超过最大距离的所有位置元素。</p>
<blockquote>
<p>语法</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">georadius <key> longitude latitude radius m|km|ft|mi [withcoord] [withdist] [withhash] [count] [asc|desc] [store key] [storedist key]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>参数说明：</p>
<ul>
<li><p>longitude：给定中心的经度</p>
</li>
<li><p>latitude：给定中心的纬度</p>
</li>
<li><p>radius：给定的最大距离</p>
</li>
<li><p>withcoord：返回+(位置元素的经度和纬度)</p>
</li>
<li><p>withdist：返回+(位置元素与中心之间的距离)</p>
</li>
<li><p>withhash：以 52 位有符号整数的形式， 返回位置元素经过原始 geohash 编码的有序集合分值。 这个选项主要用于底层应用或者调试， 实际中的作用并不大。</p>
</li>
<li><p>count：限定返回的记录数量</p>
</li>
<li><p>asc：查找结果根据距离从小到大排序</p>
</li>
<li><p>desc：查找结果根据距离从大到小排序</p>
</li>
</ul>
<blockquote>
<p>实例</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell"># 查看距离广州不大于1000km的城市
127.0.0.1:6379> georadius china:city 113.36112 23.12467 1000 km asc
1) "guangzhou"
2) "shenzhen"
3) "huanggang"
4) "wuhan"
# 查看距离武汉不大于1000km的城市，从大到小，限制5个，并且显示距离和城市经纬度
127.0.0.1:6379> georadius china:city 114.31589 30.55389 1000 km withcoord withdist count 5 desc 
1) 1) "shenzhen"
   2) "892.9663"
   3) 1) "113.93029063940048218"
      2) "22.53290942281488896"
2) 1) "guangzhou"
   2) "831.7263"
   3) 1) "113.36112052202224731"
      2) "23.12467049411647935"
3) 1) "shanghai"
   2) "688.9652"
   3) 1) "121.49295061826705933"
      2) "31.22337074392616074"
4) 1) "hefei"
   2) "315.1437"
   3) 1) "117.26104170083999634"
      2) "31.85117048067123591"
5) 1) "huanggang"
   2) "165.3475"
   3) 1) "115.94427019357681274"
      2) "30.07033115798519418"
# 查看距离北京不大于1500km的城市
127.0.0.1:6379> georadius china:city 116.28625 39.8585 1500 km withdist asc
1) 1) "beijing"
   2) "0.0002"
2) 1) "dalian"
   2) "472.2545"
3) 1) "hefei"
   2) "894.9324"
4) 1) "wuhan"
   2) "1050.2106"
5) 1) "shanghai"
   2) "1069.3051"
6) 1) "huanggang"
   2) "1089.1453"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>5️⃣<strong>georadiusbymember</strong></p>
<blockquote>
<p>描述</p>
</blockquote>
<p>georadiusbymember 和 georadius命令一样， 都可以找出位于指定范围内的元素， 但是 georadiusbymember 的中心点是只能从key中的位置元素选。</p>
<blockquote>
<p>语法</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">georadiusbymember <key> member radius m|km|ft|mi [withcoord] [withdist] [withhash] [count] [asc|desc] [store key] [storedist key]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>实例</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell"># 查看距离黄冈不大于900km的城市
127.0.0.1:6379> georadiusbymember china:city huanggang 900 km withdist asc
1) 1) "huanggang"
   2) "0.0000"
2) 1) "wuhan"
   2) "165.3475"
3) 1) "hefei"
   2) "234.5308"
4) 1) "shanghai"
   2) "546.1566"
5) 1) "guangzhou"
   2) "814.0494"
6) 1) "shenzhen"
   2) "862.0165"
# 查看距离深圳不大于2000km的城市
127.0.0.1:6379> georadiusbymember china:city shenzhen 2000 km withdist desc
1) 1) "dalian"
   2) "1964.1097"
2) 1) "beijing"
   2) "1939.8454"
3) 1) "shanghai"
   2) "1222.7809"
4) 1) "hefei"
   2) "1087.3585"
5) 1) "wuhan"
   2) "892.9663"
6) 1) "huanggang"
   2) "862.0165"
7) 1) "guangzhou"
   2) "87.9580"
8) 1) "shenzhen"
   2) "0.0000"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>6️⃣<strong>geohash</strong></p>
<blockquote>
<p>描述</p>
</blockquote>
<p>geohash用于获取一个或多个位置元素的geohash值。</p>
<blockquote>
<p>实质</p>
</blockquote>
<p><strong>降维打击</strong>：将二维的经纬度转换为一维的字符串</p>
<p>如果两个字符串越接近，那么距离越近。</p>
<blockquote>
<p>语法</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">geohash <key> member [member ...]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>实例</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">127.0.0.1:6379> geohash china:city huanggang beijing hefei
1) "wt67n6hh3k0"
2) "wx4dy0j0d40"
3) "wtemhq6fs20"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>7️⃣<strong>Other</strong></p>
<blockquote>
<p>GEO</p>
</blockquote>
<p>GEO的底层原理就是Sorted Set，因此我们可以使用Sorted Set命令来操作GEO。</p>
<blockquote>
<p>实例</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell"># 查看地图中全部元素
127.0.0.1:6379> zrange china:city 0 -1
1) "shenzhen"
2) "guangzhou"
3) "wuhan"
4) "huanggang"
5) "hefei"
6) "shanghai"
7) "beijing"
8) "dalian"
# 移除大连这个城市
127.0.0.1:6379> zrem china:city dalian
(integer) 1
# 按照分数给城市排名
127.0.0.1:6379> zrangebyscore china:city -inf inf withscores
 1) "shenzhen"
 2) "4046431599170567"
 3) "guangzhou"
 4) "4046534293000673"
 5) "wuhan"
 6) "4051938129491420"
 7) "huanggang"
 8) "4052334404505800"
 9) "hefei"
10) "4052764524670284"
11) "shanghai"
12) "4054757680623470"
13) "beijing"
14) "4069146323276357"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="7-2-2-📄HyperLogLog"><a href="#7-2-2-📄HyperLogLog" class="headerlink" title="7.2.2 📄HyperLogLog"></a>7.2.2 📄HyperLogLog</h4><p>HyperLogLog，Redis中基数统计的算法。</p>
<blockquote>
<p>优点</p>
</blockquote>
<p>占用内存固定且较小。每个HyperLogLog键占用12KB内存，可以计算2^64^个不同元素的基数。</p>
<blockquote>
<p>基数</p>
</blockquote>
<p>一个数据集中不重复元素的数量</p>
<blockquote>
<p>应用场景</p>
</blockquote>
<p>统计网站UV</p>
<p>传统方式：使用set保存用户id，set的元素数量可作为标准判断。</p>
<p>这个方式如果保存大量的用户id，就会比较麻烦，目的是计数，而非保存用户id。</p>
<p>使用HyperLogLog会有**0.81%**的错误率，这个在统计UV任务中是可以接受的。</p>
<blockquote>
<p>操作方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">pfadd &lt;key&gt; element [element …]</td>
<td align="center">添加指定元素到HyperLogLog中</td>
</tr>
<tr>
<td align="center">pfcount &lt;key&gt;</td>
<td align="center">返回给定HyperLogLog的基数估算值</td>
</tr>
<tr>
<td align="center">pfmerge &lt;destkey&gt; &lt;key&gt; [key…]</td>
<td align="center">将多个HyperLogLog合并为一个HyperLogLog</td>
</tr>
</tbody></table>
<blockquote>
<p>实例</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell"># 创建第一组元素
127.0.0.1:6379> pfadd hyper K H I G H N E S S 
(integer) 1
# 统计第一组元素基数
127.0.0.1:6379> pfcount hyper
(integer) 7
# 创建第二组元素
127.0.0.1:6379> pfadd hyper2 P A R A K
(integer) 1
# 统计第二组元素基数
127.0.0.1:6379> pfcount hyper2
(integer) 4
# 合并两组元素
127.0.0.1:6379> pfmerge hyper hyper hyper2
OK
# 统计所有元素基数
127.0.0.1:6379> pfcount hyper
(integer) 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="7-1-3-🔳Bitmaps"><a href="#7-1-3-🔳Bitmaps" class="headerlink" title="7.1.3 🔳Bitmaps"></a>7.1.3 🔳Bitmaps</h4><p>Bitmaps，位图，操作二进制位来进行记录，只有0和1两个状态。</p>
<blockquote>
<p>应用场景</p>
</blockquote>
<p>统计用户活跃度，打卡，两个状态的都可以使用Bitmaps。</p>
<blockquote>
<p>操作方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">setbit &lt;key&gt; offset value</td>
<td align="center">设置值</td>
</tr>
<tr>
<td align="center">getbit &lt;key&gt;  offset</td>
<td align="center">获取值</td>
</tr>
<tr>
<td align="center">bitcount &lt;key&gt; start end</td>
<td align="center">获取Bitmaps指定范围值为1的个数</td>
</tr>
<tr>
<td align="center">bitop and|or|not|xor &lt;destkey&gt; key [key …]</td>
<td align="center">Bitmaps的集合运算</td>
</tr>
</tbody></table>
<blockquote>
<p>实例</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell"># 打卡 0-6:周一-周日
# 2020年第一周打卡
127.0.0.1:6379> setbit 2020:week:1 0 1
(integer) 0
127.0.0.1:6379> setbit 2020:week:1 1 1
(integer) 0
127.0.0.1:6379> setbit 2020:week:1 2 1
(integer) 0
127.0.0.1:6379> setbit 2020:week:1 3 1
(integer) 0
127.0.0.1:6379> setbit 2020:week:1 4 1
(integer) 0
127.0.0.1:6379> setbit 2020:week:1 5 0
(integer) 0
127.0.0.1:6379> setbit 2020:week:1 6 0
(integer) 0
# 2020年第二周打卡
127.0.0.1:6379> setbit 2020:week:2 0 0
(integer) 0
127.0.0.1:6379> setbit 2020:week:2 1 0
(integer) 0
127.0.0.1:6379> setbit 2020:week:2 2 0
(integer) 0
127.0.0.1:6379> setbit 2020:week:2 3 1
(integer) 0
127.0.0.1:6379> setbit 2020:week:2 4 0
(integer) 1
127.0.0.1:6379> setbit 2020:week:2 5 1
(integer) 0
127.0.0.1:6379> setbit 2020:week:2 6 1
(integer) 0
# 检查打卡
127.0.0.1:6379> getbit 2020:week:1 3
(integer) 1
127.0.0.1:6379> getbit 2020:week:2 1
(integer) 0
# 统计打卡
127.0.0.1:6379> bitcount 2020:week:1
(integer) 5
127.0.0.1:6379> bitcount 2020:week:2
(integer) 3
# 对两周打卡结果取并集
127.0.0.1:6379> bitop and andres 2020:week:1 2020:week:2
(integer) 1
127.0.0.1:6379> bitcount andres
(integer) 1
# 对两周打卡结果取交集
127.0.0.1:6379> bitop or orres 2020:week:1 2020:week:2
(integer) 1
127.0.0.1:6379> bitcount orres
(integer) 7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="8-📩Redis事务"><a href="#8-📩Redis事务" class="headerlink" title="8. 📩Redis事务"></a>8. 📩Redis事务</h2><blockquote>
<p> 💡 说明</p>
</blockquote>
<p>Redis单条命令执行具有原子性，但是事务不保证原子性。</p>
<h3 id="8-1📖定义"><a href="#8-1📖定义" class="headerlink" title="8. 1📖定义"></a>8. 1📖定义</h3><p>一组命令的队列</p>
<h3 id="8-2-🌠特征"><a href="#8-2-🌠特征" class="headerlink" title="8.2 🌠特征"></a>8.2 🌠特征</h3><ul>
<li>一次性</li>
<li>顺序性</li>
<li>排他性</li>
</ul>
<h3 id="8-3-⏳三个阶段"><a href="#8-3-⏳三个阶段" class="headerlink" title="8.3 ⏳三个阶段"></a>8.3 ⏳三个阶段</h3><ul>
<li>开始事务 (multi)</li>
<li>命令入队 (…)</li>
<li>执行事务 (exec)</li>
</ul>
<h3 id="8-4-📝操作方法"><a href="#8-4-📝操作方法" class="headerlink" title="8.4 📝操作方法"></a>8.4 📝操作方法</h3><table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">discard</td>
<td align="center">取消事务，放弃执行事务块内的所有命令</td>
</tr>
<tr>
<td align="center">exec</td>
<td align="center">执行事务块内的所有命令</td>
</tr>
<tr>
<td align="center">multi</td>
<td align="center">标记一个事务的开始</td>
</tr>
<tr>
<td align="center">unwatch</td>
<td align="center">取消watch命令对所有key的监视</td>
</tr>
<tr>
<td align="center">watch</td>
<td align="center">监视一个或多个key，如果在事务执行之前这个或这些key被其他命令锁改动，那么事务将被打断</td>
</tr>
</tbody></table>
<h3 id="8-5-🕵️实例"><a href="#8-5-🕵️实例" class="headerlink" title="8.5 🕵️实例"></a>8.5 🕵️实例</h3><pre class="line-numbers language-shell"><code class="language-shell"># 开启事务
127.0.0.1:6379> multi
OK
# 命令入队
127.0.0.1:6379> set k1 v1
QUEUED
127.0.0.1:6379> set k2 v2 
QUEUED
127.0.0.1:6379> mget k1 k2
QUEUED
127.0.0.1:6379> getset k3 v3
QUEUED
127.0.0.1:6379> get k3
QUEUED
# 执行事务
127.0.0.1:6379> exec
1) OK
2) OK
3) 1) "v1"
   2) "v2"
4) "v3"
5) "v3"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="8-6-⭕异常"><a href="#8-6-⭕异常" class="headerlink" title="8.6 ⭕异常"></a>8.6 ⭕异常</h3><ul>
<li>命令异常：命令存在错误，所有命令都不会被执行</li>
</ul>
<pre class="line-numbers language-shell"><code class="language-shell">127.0.0.1:6379> multi
OK
127.0.0.1:6379> set k1 v1
QUEUED
127.0.0.1:6379> set k2 v2
QUEUED
127.0.0.1:6379> getset k3 # 错误命令
(error) ERR wrong number of arguments for 'getset' command
127.0.0.1:6379> set k4 v4
QUEUED
127.0.0.1:6379> exec # 执行事务报错
(error) EXECABORT Transaction discarded because of previous errors.
127.0.0.1:6379> get k1 # 所有命令都未被执行
(nil)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>运行异常：错误操作的命令抛出异常，其他命令正常执行</li>
</ul>
<pre class="line-numbers language-shell"><code class="language-shell">127.0.0.1:6379> multi 
OK
127.0.0.1:6379> set k1 v1
QUEUED
127.0.0.1:6379> incr k1 # 错误操作
QUEUED
127.0.0.1:6379> set k2 v2
QUEUED
127.0.0.1:6379> exec # 执行事务仅错误操作执行失败，其他命令执行成功
1) OK
2) (error) ERR value is not an integer or out of range
3) OK
127.0.0.1:6379> mget k1 k2
1) "v1"
2) "v2"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="9-7-🔭监控"><a href="#9-7-🔭监控" class="headerlink" title="9.7 🔭监控"></a>9.7 🔭监控</h3><ul>
<li>悲观锁：很悲观，认为什么时候都会出问题，无论做什么都会加锁。</li>
<li>乐观锁：很乐观，认为什么时候都不会出问题，所以不会上锁。更新数据的时候会比较version，判断数据是否更新过。</li>
<li>watch的本质：select version，一旦发现监视的数据version改变，事务将被打断。</li>
</ul>
<blockquote>
<p>实例1-watch的监控测试</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell"># 个人财务
127.0.0.1:6379> set money 100
OK
# 个人支出
127.0.0.1:6379> set out 0
OK
# 监控财务
127.0.0.1:6379> watch money 
OK
# 开启事务
127.0.0.1:6379> multi
OK
# 消费10元
127.0.0.1:6379> decrby money 30
QUEUED
# 支出增加
127.0.0.1:6379> incrby out 30
QUEUED
# 执行事务
127.0.0.1:6379> exec
1) (integer) 70
2) (integer) 30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>实例2-watch的多线程测试，watch可以当做redis的乐观锁操作</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell"># 线程1
# 监控财务
127.0.0.1:6379> watch money
OK
127.0.0.1:6379> multi
OK
# 消费10元
127.0.0.1:6379> decrby money 10
QUEUED
# 支出增加
127.0.0.1:6379> incrby out 10
QUEUED
# 执行之前线程2修改了财务，这个时候就会导致事务执行失败
127.0.0.1:6379> exec
(nil)

# 线程2 
# 执行在线程1的事务exec之前
# 查询财务
127.0.0.1:6379> get money
"70"
# 充值1000
127.0.0.1:6379> incrby money 1000
(integer) 1070

# 线程1
# 执行在线程1的事务exec之后
# 1、如果发现事务执行失败，就先解锁
127.0.0.1:6379> unwatch 
OK
# 2、获取最新的值，再次监视
127.0.0.1:6379> watch money
OK
127.0.0.1:6379> multi
OK
127.0.0.1:6379> decrby money 50
QUEUED
127.0.0.1:6379> incrby out 50
QUEUED
# 3、对比监视的值是否发生了变化
# 如果没有变化，那么可以执行成功，否则执行失败
127.0.0.1:6379> exec
1) (integer) 1020
2) (integer) 80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="9-📩Jedis"><a href="#9-📩Jedis" class="headerlink" title="9. 📩Jedis"></a>9. 📩Jedis</h2><blockquote>
<p>📢 说明</p>
</blockquote>
<p>Jedis是Redis官方推荐的Java连接开发工具。</p>
<p>Jedis中的所有api就对应Redis中的所有命令。</p>
<h3 id="9-1-➕导入依赖"><a href="#9-1-➕导入依赖" class="headerlink" title="9.1 ➕导入依赖"></a>9.1 ➕导入依赖</h3><blockquote>
<p>pom.xml</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>top.parak<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springboot-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>developers</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>developer</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>KHighness<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>email</span><span class="token punctuation">></span></span>parakovo@gmail.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>email</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>developer</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>developers</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fastjson.version</span><span class="token punctuation">></span></span>1.2.68<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fastjson.version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jackson.version</span><span class="token punctuation">></span></span>2.11.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jackson.version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jedis.version</span><span class="token punctuation">></span></span>3.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jedis.version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- Springboot-Web  --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- Spring Test --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- Springboot-Aop  --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- Springboot-Redis  --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- SpringCloud-Context --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- Fastjson --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>fastjson.version<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- Jackson --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>jackson.version<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- Lombok --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment" spellcheck="true">&lt;!-- Jedis --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>jedis.version<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="9-2-⌨️编码测试"><a href="#9-2-⌨️编码测试" class="headerlink" title="9.2 ⌨️编码测试"></a>9.2 ⌨️编码测试</h3><h4 id="9-2-1-🅿Ping测试"><a href="#9-2-1-🅿Ping测试" class="headerlink" title="9.2.1 🅿Ping测试"></a>9.2.1 🅿Ping测试</h4><blockquote>
<p>Ping.java</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>jedis<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Log4j2<span class="token punctuation">;</span>
<span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author: KHighness
 * @date: 2020/10/11 17:47
 * @apiNote: 测试链接
 */</span>

<span class="token annotation punctuation">@Log4j2</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ping</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>运行结果</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">17:52:31.303 [main] INFO top.parak.jedis.Ping - PONG<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="9-2-1-⚪GEO-api测试"><a href="#9-2-1-⚪GEO-api测试" class="headerlink" title="9.2.1 ⚪GEO-api测试"></a>9.2.1 ⚪GEO-api测试</h4><blockquote>
<p>city.txt</p>
</blockquote>
<pre class="line-numbers language-txt"><code class="language-txt">huanggang    115.94427    30.07033
wuhan        114.31589    30.55389
beijing      116.28625    39.8585
shanghai     121.49295    31.22337
hefei        117.26104    31.85117
shenzhen     113.93029    22.53291
dalian       121.64465    38.91859
guangzhou    113.36112    23.12467<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>Geo.java</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>jedis<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Log4j2<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ResourceUtils<span class="token punctuation">;</span>
<span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>GeoCoordinate<span class="token punctuation">;</span>
<span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>GeoUnit<span class="token punctuation">;</span>
<span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span>
<span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>params<span class="token punctuation">.</span>GeoRadiusParam<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ByteBuffer<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>FileChannel<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>


<span class="token comment" spellcheck="true">/**
 * @author: KHighness
 * @date: 2020/10/11 17:59
 * @apiNote: 测试Geospatial
 */</span>

<span class="token annotation punctuation">@Log4j2</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Geo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 读取文件将地理数据写进redis
     * @param path
     * @throws IOException
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">readAndWriteIntoRedis</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span> Jedis jedis<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        FileInputStream fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        FileChannel channel <span class="token operator">=</span> fileInputStream<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ByteBuffer byteBuffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        String<span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> GeoCoordinate<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 使用正则\s+匹配多个空格，分割字符串</span>
            String<span class="token punctuation">[</span><span class="token punctuation">]</span> ss <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\s+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ss<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">GeoCoordinate</span><span class="token punctuation">(</span>Double<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ss<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Double<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>ss<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jedis<span class="token punctuation">.</span><span class="token function">geoadd</span><span class="token punctuation">(</span><span class="token string">"china:city"</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">readAndWriteIntoRedis</span><span class="token punctuation">(</span>ResourceUtils<span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token string">"src/main/resources/city.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> jedis<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"==========地图中的所有城市=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jedis<span class="token punctuation">.</span><span class="token function">zrange</span><span class="token punctuation">(</span><span class="token string">"china:city"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"==========查询黄冈的经纬度=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">geopos</span><span class="token punctuation">(</span><span class="token string">"china:city"</span><span class="token punctuation">,</span> <span class="token string">"huanggang"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"==========查询距离杭州不超过1000km的城市=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        GeoRadiusParam geoRadiusParam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GeoRadiusParam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        geoRadiusParam<span class="token punctuation">.</span><span class="token function">withCoord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withDist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sortAscending</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jedis<span class="token punctuation">.</span><span class="token function">georadius</span><span class="token punctuation">(</span><span class="token string">"china:city"</span><span class="token punctuation">,</span> <span class="token number">120.153576</span><span class="token punctuation">,</span> <span class="token number">30.287459</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> GeoUnit<span class="token punctuation">.</span>KM<span class="token punctuation">,</span> geoRadiusParam<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> c <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"城市名称：&amp;#123;&amp;#125;, 经纬度：&amp;#123;&amp;#125;，距离：&amp;#123;&amp;#125;KM"</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">getMemberByString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">getCoordinate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">getDistance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"==========查询距离武汉不超过1000KM的城市=========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jedis<span class="token punctuation">.</span><span class="token function">georadiusByMember</span><span class="token punctuation">(</span><span class="token string">"china:city"</span><span class="token punctuation">,</span> <span class="token string">"wuhan"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> GeoUnit<span class="token punctuation">.</span>KM<span class="token punctuation">,</span> geoRadiusParam<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> c <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"城市名称：&amp;#123;&amp;#125;, 经纬度：&amp;#123;&amp;#125;，距离：&amp;#123;&amp;#125;KM"</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">getMemberByString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">getCoordinate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">getDistance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>运行结果</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">20:21:02.671 [main] INFO top.parak.jedis.Geo - ==========地图中的所有城市==========
20:21:02.718 [main] INFO top.parak.jedis.Geo - shenzhen 
20:21:02.718 [main] INFO top.parak.jedis.Geo - guangzhou 
20:21:02.718 [main] INFO top.parak.jedis.Geo - wuhan 
20:21:02.718 [main] INFO top.parak.jedis.Geo - huanggang 
20:21:02.718 [main] INFO top.parak.jedis.Geo - hefei 
20:21:02.718 [main] INFO top.parak.jedis.Geo - shanghai 
20:21:02.718 [main] INFO top.parak.jedis.Geo - beijing 
20:21:02.718 [main] INFO top.parak.jedis.Geo - dalian 
20:21:02.718 [main] INFO top.parak.jedis.Geo - ==========查询黄冈的经纬度==========
20:21:02.720 [main] INFO top.parak.jedis.Geo - [(115.94427019357681,30.070331157985194)]
20:21:02.721 [main] INFO top.parak.jedis.Geo - ==========查询距离杭州不超过1000km的城市==========
20:21:02.724 [main] INFO top.parak.jedis.Geo - 城市名称：shanghai, 经纬度：(121.49295061826706,31.22337074392616)，距离：165.0KM
20:21:02.724 [main] INFO top.parak.jedis.Geo - 城市名称：hefei, 经纬度：(117.26104170084,31.851170480671236)，距离：325.8468KM
20:21:02.725 [main] INFO top.parak.jedis.Geo - 城市名称：huanggang, 经纬度：(115.94427019357681,30.070331157985194)，距离：405.4241KM
20:21:02.725 [main] INFO top.parak.jedis.Geo - 城市名称：wuhan, 经纬度：(114.31589037179947,30.55389005243692)，距离：560.6357KM
20:21:02.725 [main] INFO top.parak.jedis.Geo - 城市名称：dalian, 经纬度：(121.64465099573135,38.91858901014995)，距离：969.6213KM
20:21:02.725 [main] INFO top.parak.jedis.Geo - ==========查询距离武汉不超过1000KM的城市==========
20:21:02.725 [main] INFO top.parak.jedis.Geo - 城市名称：wuhan, 经纬度：(114.31589037179947,30.55389005243692)，距离：0.0KM
20:21:02.725 [main] INFO top.parak.jedis.Geo - 城市名称：huanggang, 经纬度：(115.94427019357681,30.070331157985194)，距离：165.3475KM
20:21:02.726 [main] INFO top.parak.jedis.Geo - 城市名称：hefei, 经纬度：(117.26104170084,31.851170480671236)，距离：315.1437KM
20:21:02.726 [main] INFO top.parak.jedis.Geo - 城市名称：shanghai, 经纬度：(121.49295061826706,31.22337074392616)，距离：688.9652KM
20:21:02.726 [main] INFO top.parak.jedis.Geo - 城市名称：guangzhou, 经纬度：(113.36112052202225,23.12467049411648)，距离：831.7263KM
20:21:02.726 [main] INFO top.parak.jedis.Geo - 城市名称：shenzhen, 经纬度：(113.93029063940048,22.53290942281489)，距离：892.9663KM<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="9-2-2-⚫Hyper-api测试"><a href="#9-2-2-⚫Hyper-api测试" class="headerlink" title="9.2.2 ⚫Hyper-api测试"></a>9.2.2 ⚫Hyper-api测试</h4><blockquote>
<p>Hyper.java</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>jedis<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Log4j2<span class="token punctuation">;</span>
<span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author: KHighness
 * @date: 2020/10/11 20:26
 * @apiNote: 测试hyper
 */</span>

<span class="token annotation punctuation">@Log4j2</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hyper</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jedis<span class="token punctuation">.</span><span class="token function">pfadd</span><span class="token punctuation">(</span><span class="token string">"hyper1"</span><span class="token punctuation">,</span> <span class="token string">"K"</span><span class="token punctuation">,</span> <span class="token string">"H"</span><span class="token punctuation">,</span> <span class="token string">"I"</span><span class="token punctuation">,</span> <span class="token string">"G"</span><span class="token punctuation">,</span> <span class="token string">"H"</span><span class="token punctuation">,</span> <span class="token string">"N"</span><span class="token punctuation">,</span> <span class="token string">"E"</span><span class="token punctuation">,</span> <span class="token string">"S"</span><span class="token punctuation">,</span> <span class="token string">"S"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hyper1中的元素基数：&amp;#123;&amp;#125;"</span><span class="token punctuation">,</span> jedis<span class="token punctuation">.</span><span class="token function">pfcount</span><span class="token punctuation">(</span><span class="token string">"hyper1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jedis<span class="token punctuation">.</span><span class="token function">pfadd</span><span class="token punctuation">(</span><span class="token string">"hyper2"</span><span class="token punctuation">,</span> <span class="token string">"P"</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"R"</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"K"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hyper2中的元素基数：&amp;#123;&amp;#125;"</span><span class="token punctuation">,</span> jedis<span class="token punctuation">.</span><span class="token function">pfcount</span><span class="token punctuation">(</span><span class="token string">"hyper2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jedis<span class="token punctuation">.</span><span class="token function">pfmerge</span><span class="token punctuation">(</span><span class="token string">"hyper"</span><span class="token punctuation">,</span> <span class="token string">"hyper1"</span><span class="token punctuation">,</span> <span class="token string">"hyper2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hyper1和hyper2合并后的元素基数：&amp;#123;&amp;#125;"</span><span class="token punctuation">,</span> jedis<span class="token punctuation">.</span><span class="token function">pfcount</span><span class="token punctuation">(</span><span class="token string">"hyper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>运行结果</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">20:36:20.386 [main] INFO top.parak.jedis.Hyper - hyper1中的元素基数：7
20:36:20.390 [main] INFO top.parak.jedis.Hyper - hyper2中的元素基数：4
20:36:20.390 [main] INFO top.parak.jedis.Hyper - hyper1和hyper2合并后的元素基数：10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="9-2-3-🔴Bitmaps-api测试"><a href="#9-2-3-🔴Bitmaps-api测试" class="headerlink" title="9.2.3 🔴Bitmaps-api测试"></a>9.2.3 🔴Bitmaps-api测试</h4><blockquote>
<p>Bit.java</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>jedis<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Log4j2<span class="token punctuation">;</span>
<span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>BitOP<span class="token punctuation">;</span>
<span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author: KHighness
 * @date: 2020/10/11 20:38
 * @apiNote: 测试Bitmaps
 */</span>

<span class="token annotation punctuation">@Log4j2</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bit</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getChineseExpression</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">"星期一"</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">"星期二"</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">"星期三"</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">"星期四"</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">"星期五"</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">"星期六"</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">"星期日"</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token string">"Error"</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 模拟两周的打卡情况</span>
        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bool1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bool2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bool1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> jedis<span class="token punctuation">.</span><span class="token function">setbit</span><span class="token punctuation">(</span><span class="token string">"2020:week:1"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> bool1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bool2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> jedis<span class="token punctuation">.</span><span class="token function">setbit</span><span class="token punctuation">(</span><span class="token string">"2020:week:2"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> bool2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"2020年第一周的打卡天数：&amp;#123;&amp;#125;"</span><span class="token punctuation">,</span> jedis<span class="token punctuation">.</span><span class="token function">bitcount</span><span class="token punctuation">(</span><span class="token string">"2020:week:1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"2020年第一周具体打卡情况"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bool1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">getChineseExpression</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">getbit</span><span class="token punctuation">(</span><span class="token string">"2020:week:1"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"已打卡"</span> <span class="token operator">:</span> <span class="token string">"未打卡"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"2020年第二周的打卡天数：&amp;#123;&amp;#125;"</span><span class="token punctuation">,</span> jedis<span class="token punctuation">.</span><span class="token function">bitcount</span><span class="token punctuation">(</span><span class="token string">"2020:week:2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"2020年第二周具体打卡情况"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bool2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token function">getChineseExpression</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">getbit</span><span class="token punctuation">(</span><span class="token string">"2020:week:2"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"已打卡"</span> <span class="token operator">:</span> <span class="token string">"未打卡"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        jedis<span class="token punctuation">.</span><span class="token function">bitop</span><span class="token punctuation">(</span>BitOP<span class="token punctuation">.</span>AND<span class="token punctuation">,</span> <span class="token string">"2020:week:1and2"</span><span class="token punctuation">,</span> <span class="token string">"2020:week:1"</span><span class="token punctuation">,</span> <span class="token string">"2020:week:2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"2020年第一周和第二周两天都打卡的天数：&amp;#123;&amp;#125;"</span><span class="token punctuation">,</span> jedis<span class="token punctuation">.</span><span class="token function">bitcount</span><span class="token punctuation">(</span><span class="token string">"2020:week:1and2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jedis<span class="token punctuation">.</span><span class="token function">bitop</span><span class="token punctuation">(</span>BitOP<span class="token punctuation">.</span>OR<span class="token punctuation">,</span> <span class="token string">"2020:week:1or2"</span><span class="token punctuation">,</span> <span class="token string">"2020:week:1"</span><span class="token punctuation">,</span> <span class="token string">"2020:week:2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"2020年第一周和第二周至少有一天打卡的天数：&amp;#123;&amp;#125;"</span><span class="token punctuation">,</span> jedis<span class="token punctuation">.</span><span class="token function">bitcount</span><span class="token punctuation">(</span><span class="token string">"2020:week:1or2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jedis<span class="token punctuation">.</span><span class="token function">bitop</span><span class="token punctuation">(</span>BitOP<span class="token punctuation">.</span>XOR<span class="token punctuation">,</span><span class="token string">"2020:week:1xor2"</span><span class="token punctuation">,</span> <span class="token string">"2020:week:1"</span><span class="token punctuation">,</span> <span class="token string">"2020:week:2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"2020年第一周和第二周仅有一天打卡的天数：&amp;#123;&amp;#125;"</span><span class="token punctuation">,</span> jedis<span class="token punctuation">.</span><span class="token function">bitcount</span><span class="token punctuation">(</span><span class="token string">"2020:week:1xor2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>运行结果</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">21:07:40.042 [main] INFO top.parak.jedis.Bit - 2020年第一周的打卡天数：5
21:07:40.046 [main] INFO top.parak.jedis.Bit - 2020年第一周具体打卡情况
21:07:40.046 [main] INFO top.parak.jedis.Bit - 星期一: 已打卡
21:07:40.046 [main] INFO top.parak.jedis.Bit - 星期二: 已打卡
21:07:40.046 [main] INFO top.parak.jedis.Bit - 星期三: 已打卡
21:07:40.046 [main] INFO top.parak.jedis.Bit - 星期四: 已打卡
21:07:40.046 [main] INFO top.parak.jedis.Bit - 星期五: 已打卡
21:07:40.046 [main] INFO top.parak.jedis.Bit - 星期六: 未打卡
21:07:40.047 [main] INFO top.parak.jedis.Bit - 星期日: 未打卡
21:07:40.047 [main] INFO top.parak.jedis.Bit - 2020年第二周的打卡天数：3
21:07:40.047 [main] INFO top.parak.jedis.Bit - 2020年第二周具体打卡情况
21:07:40.047 [main] INFO top.parak.jedis.Bit - 星期一: 未打卡
21:07:40.047 [main] INFO top.parak.jedis.Bit - 星期二: 未打卡
21:07:40.047 [main] INFO top.parak.jedis.Bit - 星期三: 未打卡
21:07:40.047 [main] INFO top.parak.jedis.Bit - 星期四: 已打卡
21:07:40.047 [main] INFO top.parak.jedis.Bit - 星期五: 已打卡
21:07:40.047 [main] INFO top.parak.jedis.Bit - 星期六: 已打卡
21:07:40.047 [main] INFO top.parak.jedis.Bit - 星期日: 未打卡
21:07:40.048 [main] INFO top.parak.jedis.Bit - 2020年第一周和第二周两天都打卡的天数：2
21:07:40.048 [main] INFO top.parak.jedis.Bit - 2020年第一周和第二周至少有一天打卡的天数：6
21:07:40.048 [main] INFO top.parak.jedis.Bit - 2020年第一周和第二周仅有一天打卡的天数：4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="9-2-4-🔵事务测试"><a href="#9-2-4-🔵事务测试" class="headerlink" title="9.2.4 🔵事务测试"></a>9.2.4 🔵事务测试</h4><blockquote>
<p>Affair.java</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>jedis<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>JSONObject<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Log4j2<span class="token punctuation">;</span>
<span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span>
<span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Transaction<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author: KHighness
 * @date: 2020/10/11 21:33
 * @apiNote: 测试事务
 */</span>

<span class="token annotation punctuation">@Log4j2</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Affair</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 创建json数据</span>
        JSONObject jsonObject1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jsonObject1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"KHighness"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jsonObject1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jsonObject1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"constellation"</span><span class="token punctuation">,</span> <span class="token string">"Virgo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jsonObject1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Hobby"</span><span class="token punctuation">,</span> <span class="token string">"Jay"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String json1 <span class="token operator">=</span> jsonObject1<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        JSONObject jsonObject2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jsonObject2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"BingYao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jsonObject2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jsonObject2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"constellation"</span><span class="token punctuation">,</span> <span class="token string">"Taurus"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jsonObject2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Hobby"</span><span class="token punctuation">,</span> <span class="token string">"Czk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String json2 <span class="token operator">=</span> jsonObject2<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">,</span> json1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"user2"</span><span class="token punctuation">,</span> json2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 加入乐观锁</span>
        jedis<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">,</span> <span class="token string">"user2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 开启事务</span>
        Transaction multi <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
           <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
               TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               multi<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">,</span> json1<span class="token punctuation">)</span><span class="token punctuation">;</span>
               multi<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"user2"</span><span class="token punctuation">,</span> json2<span class="token punctuation">)</span><span class="token punctuation">;</span>
               <span class="token comment" spellcheck="true">// 执行事务</span>
               multi<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
               <span class="token comment" spellcheck="true">// 发生异常</span>
               <span class="token comment" spellcheck="true">// 放弃事务</span>
               multi<span class="token punctuation">.</span><span class="token function">discard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
               <span class="token comment" spellcheck="true">// 输出数据</span>
               log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"user1: [&amp;#123;&amp;#125;]"</span><span class="token punctuation">,</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"user2: [&amp;#123;&amp;#125;]"</span><span class="token punctuation">,</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"user2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token string">"Multi"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 另一线程</span>
        <span class="token comment" spellcheck="true">// 开启在事务之前</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token keyword">new</span> <span class="token class-name">Affair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resetInfo1</span><span class="token punctuation">(</span>jedis<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token string">"Other"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">resetInfo1</span><span class="token punctuation">(</span>Jedis jedis<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        JSONObject jsonObject1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jsonObject1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"KHighness"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jsonObject1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jsonObject1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"constellation"</span><span class="token punctuation">,</span> <span class="token string">"Leo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jsonObject1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Hobby"</span><span class="token punctuation">,</span> <span class="token string">"BingYao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String json1 <span class="token operator">=</span> jsonObject1<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">,</span> json1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>运行结果</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">Exception in thread "Other" redis.clients.jedis.exceptions.JedisDataException: Cannot use Jedis when in Multi. Please use Transaction or reset jedis state.
    at redis.clients.jedis.BinaryJedis.checkIsInMultiOrPipeline(BinaryJedis.java:1895)
    at redis.clients.jedis.Jedis.set(Jedis.java:152)
    at top.parak.jedis.Affair.resetInfo1(Affair.java:82)
    at top.parak.jedis.Affair.lambda$main$1(Affair.java:66)
    at java.lang.Thread.run(Thread.java:748)
22:05:18.651 [Multi] INFO top.parak.jedis.Affair - user1: [&#123;"constellation":"Virgo","name":"KHighness","Hobby":"Jay","age":19&#125;]
22:05:18.654 [Multi] INFO top.parak.jedis.Affair - user2: [&#123;"constellation":"Taurus","name":"BingYao","Hobby":"Czk","age":16&#125;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="10-📩Springboot整合"><a href="#10-📩Springboot整合" class="headerlink" title="10. 📩Springboot整合"></a>10. 📩Springboot整合</h2><blockquote>
<p>⚠️notice</p>
</blockquote>
<p>在SpringBoot2.X之后，原来使用的jedis被替换为了lettuce，在windows下lettuce连接池仅支持3.2.100版本的Redis</p>
<ul>
<li><p>jedis：采用的直连，多个线程操作的话，是不安全的，如果想要避免不安全，需要使用jedis pool连接池，更像BIO模式</p>
</li>
<li><p>lettuce：底层整合Netty，实例可以在多个线程中共享，不存在线程不安全的情况，可以减少线程数据，更像NIO模式</p>
</li>
</ul>
<h3 id="10-1-🔎源码分析"><a href="#10-1-🔎源码分析" class="headerlink" title="10.1 🔎源码分析"></a>10.1 🔎源码分析</h3><blockquote>
<p>自动配置类：RedisAutoConfiguration.java</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>
    proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>RedisOperations<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>RedisProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>LettuceConnectionConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> JedisConnectionConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisAutoConfiguration</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">RedisAutoConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"redisTemplate"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> 
    <span class="token comment" spellcheck="true">// ==> 这个注解说明，不存在我们自定义名为redisTemplate的Bean的情况下，这个Bean才生效</span>
    <span class="token comment" spellcheck="true">// ==> 因此我们可以使用自定义的RedisTemplate，SpringBoot会优先使用自定义RedisTemplate</span>
    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> UnknownHostException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 默认的RedisTemplate没有过多的配置，Redis对象都需要序列化和反序列化</span>
        <span class="token comment" spellcheck="true">// 两个泛型都是 Object, Obeject 的类型，我们以后使用需要强制转换成 String, Object</span>
        RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> template<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>
    <span class="token comment" spellcheck="true">// 由于String是Redis中最常使用的类型，所以单独一个StringRedisTemplate</span>
    <span class="token comment" spellcheck="true">// 所以操作String类型，直接使用StringRedisTemplate即可</span>
    <span class="token keyword">public</span> StringRedisTemplate <span class="token function">stringRedisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> UnknownHostException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        StringRedisTemplate template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> template<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="10-2-🔑整合使用"><a href="#10-2-🔑整合使用" class="headerlink" title="10.2 🔑整合使用"></a>10.2 🔑整合使用</h3><blockquote>
<p>导入依赖：pom.xml(见上jedis)</p>
</blockquote>
<blockquote>
<p>配置环境：application.properties</p>
</blockquote>
<pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># Redis数据库索引（默认为0）</span>
<span class="token attr-name">spring.redis.database</span><span class="token punctuation">=</span><span class="token attr-value">0</span>
<span class="token comment" spellcheck="true"># Redis服务器地址</span>
<span class="token attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token attr-value">127.0.0.1</span>
<span class="token comment" spellcheck="true"># Redis服务器连接端口</span>
<span class="token attr-name">spring.redis.port</span><span class="token punctuation">=</span><span class="token attr-value">6379</span>
<span class="token comment" spellcheck="true"># Redis服务器连接密码（默认为空）</span>
<span class="token attr-name">spring.redis.password</span><span class="token punctuation">=</span>
<span class="token comment" spellcheck="true"># 连接超时时间（毫秒）</span>
<span class="token attr-name">spring.redis.timeout</span><span class="token punctuation">=</span><span class="token attr-value">100</span>

<span class="token comment" spellcheck="true"># Spring 2.X以后，使用lettuce连接池</span>
<span class="token comment" spellcheck="true"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span>
<span class="token attr-name">spring.redis.lettuce.pool.max-active</span><span class="token punctuation">=</span><span class="token attr-value">100</span>
<span class="token comment" spellcheck="true"># 连接池中的最大空闲连接</span>
<span class="token attr-name">spring.redis.lettuce.pool.max-idle</span><span class="token punctuation">=</span><span class="token attr-value">10</span>
<span class="token comment" spellcheck="true"># 连接池中的最小空闲连接</span>
<span class="token attr-name">spring.redis.lettuce.pool.min-idle</span><span class="token punctuation">=</span><span class="token attr-value">0</span>
<span class="token comment" spellcheck="true"># 连接超时时间</span>
<span class="token attr-name">spring.redis.lettuce.shutdown-timeout</span><span class="token punctuation">=</span><span class="token attr-value">100ms</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>⌨️自定义RedisTemplate：RedisConfig.java</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>config<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>JsonAutoDetect<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PropertyAccessor<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>jsontype<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>LaissezFaireSubTypeValidator<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Qualifier<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>RedisConnectionFactory<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>Jackson2JsonRedisSerializer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>StringRedisSerializer<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author: KHighness
 * @date: 2020/10/7 20:23
 * @apiNote: 自定义RedisTemplate
 */</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * &lt;p>自定义redisTemplate&lt;/p>
     * @param redisConnectionFactory
     * @return
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"redisTemplate"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* 创建redisTemplate */</span>
        RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* 关联redisConnectionFactory */</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* Jackson2JsonRedisSerializer：Json序列化器 */</span>
        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ObjectMapper objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        objectMapper<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>PropertyAccessor<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> JsonAutoDetect<span class="token punctuation">.</span>Visibility<span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>
        objectMapper<span class="token punctuation">.</span><span class="token function">activateDefaultTyping</span><span class="token punctuation">(</span>LaissezFaireSubTypeValidator<span class="token punctuation">.</span>instance<span class="token punctuation">,</span> ObjectMapper<span class="token punctuation">.</span>DefaultTyping<span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>
        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* StringRedisSerializer：String序列化器 */</span>
        StringRedisSerializer stringRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* 设置key的序列化方式：String */</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* 设置value的序列化方式：Json */</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* 设置hash的key的序列化方式：Json */</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">/* 设置hash的value的序列化方式：Json */</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>⌨️Redis工具类：RedisUtil.java</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>common<span class="token punctuation">;</span>

<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Log4j2<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>CollectionUtils<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author: KHighness
 * @date: 2020/10/7 21:33
 * @apiNote: Redis操作工具类
 */</span>

<span class="token annotation punctuation">@Log4j2</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisUtil</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/*==================================================================
    //                            common                              //
    ==================================================================*/</span>

    <span class="token comment" spellcheck="true">/**
     * 指定缓存失效时间
     * @param key 键
     * @param time 时间(秒)
     * @return true 成功，false 失败
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">expire</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                redisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 根据key获取过期时间
     * @param key 键
     * @return 时间(秒) 返回0代表永久有效
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getExpire</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">getExpire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/*==================================================================
    //                            String                              //
    ==================================================================*/</span>

    <span class="token comment" spellcheck="true">/**
     * 判断key是否存在
     * @param key 键
     * @return true 存在，false 不存在
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 删除缓存
     * @param key 可以传一个或多个
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">arrayToList</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 普通缓存获取
     * @param key 键
     * @return 值
     */</span>
    <span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> key <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 普通缓存放入
     * @param key   键
     * @param value 值
     * @return true 成功，false 失败
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 普通缓存放入并设置时间
     * @param key   键
     * @param value 值
     * @param time 时间(秒) time要大于0 如果time小于等于0 将设置无限期
     * @return true 成功，false 失败
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> time<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 递增
     * @param key   键
     * @param delta 增量
     * @return 递增后的值
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">incr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"增量必须大于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 递减
     * @param key   键
     * @param delta 减量
     * @return 递减后的值
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">decr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"减量必须大于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/*==================================================================
    //                              map                               //
    ==================================================================*/</span>

    <span class="token comment" spellcheck="true">/**
     * HashGet
     * @param key  键 不能为NULL
     * @param item 项 不能为NULL
     * @return 值
     */</span>
    <span class="token keyword">public</span> Object <span class="token function">hget</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 获取hashKey对应的所有键值
     * @param key 键
     * @return 对应的多个键值
     */</span>
    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">hmget</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * HashSet
     * @param key 键
     * @param map 对应的多个键值
     * @return true 成功，false 失败
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hmset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * HashSet 并设置时间
     * @param key 键
     * @param map 对应多个键值
     * @param time 时间(秒)
     * @return true 成功，false 失败
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hmset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 向一张hash表中放入数据，如果不存在则创建
     * @param key   键
     * @param item  项
     * @param value 值
     * @return true 成功，false 失败
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 向一张hash表中放入数据，并设置时间，如果不存在则创建
     * @param key   键
     * @param item  项
     * @param value 值
     * @param time  时间(秒) 如果已存在的hash表有时间，这里会更新原值
     * @return true 成功，false 失败
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 删除hash表中的值
     * @param key  键 不能为NULL
     * @param item 项 可以使多个 不能为NULL
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hdel</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> item<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 判断hash表中是否有该项的值
     * @param key  键 不能为NULL
     * @param item 项 不能为NULL
     * @return true 存在，false 不存在
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hHasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * hash递增 如果不存在，就会创建一个，并把递增后的值返回
     * @param key  键
     * @param item 值
     * @param by   增量
     * @return 递增后的值
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">hincr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> <span class="token keyword">double</span> by<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> by<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * hash递减
     * @param key  键
     * @param item 值
     * @param by   减量
     * @return 递减后的值
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">hdecr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> <span class="token keyword">double</span> by<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> <span class="token operator">-</span>by<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/*==================================================================
    //                              set                               //
    ==================================================================*/</span>

    <span class="token comment" spellcheck="true">/**
     * 根据key获取Set中的所有值
     * @param key 键
     * @return set中的所有值
     */</span>
    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">sGet</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> null<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 根据value从一个set中查询是否存在
     * @param key   键
     * @param value 值
     * @return true 存在，false 不存在
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">sHasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isMember</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 将数据放入set缓存
     * @param key    键
     * @param values 值 可以是多个
     * @return 成功个数
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 将set数据放入缓存，并设置时间
     * @param key    键
     * @param time   时间(秒)
     * @param values 值 可以是多个
     * @return 成功个数
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sSetAndTime</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            Long count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> count<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 获取set缓存的长度
     * @param key 键
     * @return set的长度
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sGetSetSize</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/*==================================================================
    //                             list                               //
    ==================================================================*/</span>

    <span class="token comment" spellcheck="true">/**
     * 获取list缓存的长度
     * @param key 键
     * @return list的长度
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">lGetListSize</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 通过索引获取list中的值
     * @param key   键
     * @param index 索引 index >= 0时，0 表头，1 第二个元素，依次类推；index &lt; 0时，-1 表尾，-2 倒数第二个元素，依次类推
     * @return 值
     */</span>
    <span class="token keyword">public</span> Object <span class="token function">lGetIndex</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> index<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> null<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 将list放入缓存
     * @param key   键
     * @param value 值
     * @return true 成功，false 失败
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 将list放入缓存，并设置时间
     * @param key   键
     * @param value 值
     * @param time  时间(秒)
     * @return 成功数量
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 根据索引修改list中的某条数据
     * @param key   键
     * @param index 索引
     * @param value 值
     * @return true 成功，false 失败
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lUpdateIndex</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> index<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 移除N个值为value
     * @param key   键
     * @param count 移除数量
     * @param value 值
     * @return 移除数量
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">lRemove</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> count <span class="token punctuation">,</span>Object value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            Long remove <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> count<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> remove<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="10-3-💨api测试"><a href="#10-3-💨api测试" class="headerlink" title="10.3 💨api测试"></a>10.3 💨api测试</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">;</span>


<span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JsonProcessingException<span class="token punctuation">;</span>
<span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>StringRedisTemplate<span class="token punctuation">;</span>
<span class="token keyword">import</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>common<span class="token punctuation">.</span>RedisUtil<span class="token punctuation">;</span>
<span class="token keyword">import</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>User<span class="token punctuation">;</span>
<span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Log4j2<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>

<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token annotation punctuation">@Log4j2</span>
<span class="token keyword">class</span> <span class="token class-name">SpringbootRedisApplicationTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> StringRedisTemplate stringRedisTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> RedisTemplate redisTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> RedisUtil redisUtil<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"K殿下"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"Knum"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token string">"Knum"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"KHighness"</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String jsonUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        HashMap hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name1"</span><span class="token punctuation">,</span> <span class="token string">"KHighness"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name2"</span><span class="token punctuation">,</span> <span class="token string">"ParaK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name3"</span><span class="token punctuation">,</span> <span class="token string">"FlowerK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisUtil<span class="token punctuation">.</span><span class="token function">hmset</span><span class="token punctuation">(</span><span class="token string">"K"</span><span class="token punctuation">,</span> hashMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry k <span class="token operator">:</span> redisUtil<span class="token punctuation">.</span><span class="token function">hmget</span><span class="token punctuation">(</span><span class="token string">"K"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>运行结果</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java">
                        __ __ __    _       __
                       <span class="token operator">/</span> <span class="token comment" spellcheck="true">//_// /_  (_)___ _/ /_  ____  ___  __________</span>
                      <span class="token operator">/</span> <span class="token punctuation">,</span><span class="token operator">&lt;</span>  <span class="token operator">/</span> __ \<span class="token operator">/</span> <span class="token operator">/</span> __ `<span class="token operator">/</span> __ \<span class="token operator">/</span> __ \<span class="token operator">/</span> _ \<span class="token operator">/</span> ___<span class="token operator">/</span> ___<span class="token operator">/</span>
                     <span class="token operator">/</span> <span class="token operator">/</span><span class="token operator">|</span> <span class="token operator">|</span><span class="token operator">/</span> <span class="token operator">/</span> <span class="token operator">/</span> <span class="token operator">/</span> <span class="token operator">/</span> <span class="token operator">/</span>_<span class="token operator">/</span> <span class="token operator">/</span> <span class="token operator">/</span> <span class="token operator">/</span> <span class="token operator">/</span> <span class="token operator">/</span> <span class="token operator">/</span> <span class="token operator">/</span>  <span class="token function">__</span><span class="token punctuation">(</span>__  <span class="token operator">|</span>__  <span class="token punctuation">)</span>
                    <span class="token operator">/</span>_<span class="token operator">/</span> <span class="token operator">|</span>_<span class="token operator">/</span>_<span class="token operator">/</span> <span class="token operator">/</span>_<span class="token operator">/</span>_<span class="token operator">/</span>\__<span class="token punctuation">,</span> <span class="token operator">/</span>_<span class="token operator">/</span> <span class="token operator">/</span>_<span class="token operator">/</span>_<span class="token operator">/</span> <span class="token operator">/</span>_<span class="token operator">/</span>\___<span class="token operator">/</span>____<span class="token operator">/</span>____<span class="token operator">/</span>
                                  <span class="token operator">/</span>____<span class="token operator">/</span>

                     Copyright © <span class="token number">2020</span> KHighness<span class="token punctuation">.</span> All Rights Reserved

<span class="token number">2020</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">12</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">35.073</span>  INFO <span class="token number">18840</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> t<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>SpringbootRedisApplicationTest   <span class="token operator">:</span> No active profile set<span class="token punctuation">,</span> falling back to <span class="token keyword">default</span> profiles<span class="token operator">:</span> <span class="token keyword">default</span>
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">12</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">35.417</span>  INFO <span class="token number">18840</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> <span class="token punctuation">.</span>s<span class="token punctuation">.</span>d<span class="token punctuation">.</span>r<span class="token punctuation">.</span>c<span class="token punctuation">.</span>RepositoryConfigurationDelegate <span class="token operator">:</span> Multiple Spring Data modules found<span class="token punctuation">,</span> entering strict repository configuration mode<span class="token operator">!</span>
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">12</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">35.420</span>  INFO <span class="token number">18840</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> <span class="token punctuation">.</span>s<span class="token punctuation">.</span>d<span class="token punctuation">.</span>r<span class="token punctuation">.</span>c<span class="token punctuation">.</span>RepositoryConfigurationDelegate <span class="token operator">:</span> Bootstrapping Spring Data Redis repositories in DEFAULT mode<span class="token punctuation">.</span>
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">12</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">35.445</span>  INFO <span class="token number">18840</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> <span class="token punctuation">.</span>s<span class="token punctuation">.</span>d<span class="token punctuation">.</span>r<span class="token punctuation">.</span>c<span class="token punctuation">.</span>RepositoryConfigurationDelegate <span class="token operator">:</span> Finished Spring Data repository scanning in 10ms<span class="token punctuation">.</span> Found <span class="token number">0</span> Redis repository interfaces<span class="token punctuation">.</span>
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">12</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">35.534</span>  INFO <span class="token number">18840</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> o<span class="token punctuation">.</span>s<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>context<span class="token punctuation">.</span>scope<span class="token punctuation">.</span>GenericScope     <span class="token operator">:</span> BeanFactory id<span class="token operator">=</span>8d774ca9<span class="token operator">-</span>71ca<span class="token operator">-</span>37a9<span class="token operator">-</span><span class="token number">91e1</span><span class="token operator">-</span>35cd9af79e44
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">12</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">35.699</span>  INFO <span class="token number">18840</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> trationDelegate$BeanPostProcessorChecker <span class="token operator">:</span> Bean <span class="token string">'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration'</span> of type <span class="token punctuation">[</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$67ea5b63<span class="token punctuation">]</span> is not eligible <span class="token keyword">for</span> getting processed by all <span class="token function">BeanPostProcessors</span> <span class="token punctuation">(</span><span class="token keyword">for</span> example<span class="token operator">:</span> not eligible <span class="token keyword">for</span> auto<span class="token operator">-</span>proxying<span class="token punctuation">)</span>
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">12</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">36.483</span>  INFO <span class="token number">18840</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> o<span class="token punctuation">.</span>s<span class="token punctuation">.</span>s<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ThreadPoolTaskExecutor  <span class="token operator">:</span> Initializing ExecutorService <span class="token string">'applicationTaskExecutor'</span>
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">12</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">36.818</span>  INFO <span class="token number">18840</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> t<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>SpringbootRedisApplicationTest   <span class="token operator">:</span> Started SpringbootRedisApplicationTest in <span class="token number">2.287</span> <span class="token function">seconds</span> <span class="token punctuation">(</span>JVM running <span class="token keyword">for</span> <span class="token number">3.29</span><span class="token punctuation">)</span>

<span class="token number">2020</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">12</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">37.191</span>  INFO <span class="token number">18840</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> io<span class="token punctuation">.</span>lettuce<span class="token punctuation">.</span>core<span class="token punctuation">.</span>EpollProvider            <span class="token operator">:</span> Starting without optional epoll library
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">12</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">37.192</span>  INFO <span class="token number">18840</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> io<span class="token punctuation">.</span>lettuce<span class="token punctuation">.</span>core<span class="token punctuation">.</span>KqueueProvider           <span class="token operator">:</span> Starting without optional kqueue library
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">12</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">37.740</span>  INFO <span class="token number">18840</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> t<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>SpringbootRedisApplicationTest   <span class="token operator">:</span> K殿下

<span class="token number">2020</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">12</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">37.762</span>  INFO <span class="token number">18840</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> t<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>SpringbootRedisApplicationTest   <span class="token operator">:</span> <span class="token number">6</span>

<span class="token number">2020</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">12</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">37.802</span>  INFO <span class="token number">18840</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> t<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>SpringbootRedisApplicationTest   <span class="token operator">:</span> <span class="token function">User</span><span class="token punctuation">(</span>name<span class="token operator">=</span>KHighness<span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">19</span><span class="token punctuation">)</span>

<span class="token number">2020</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">12</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">37.836</span>  INFO <span class="token number">18840</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> t<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>SpringbootRedisApplicationTest   <span class="token operator">:</span> name3<span class="token operator">=</span>FlowerK
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">12</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">37.836</span>  INFO <span class="token number">18840</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> t<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>SpringbootRedisApplicationTest   <span class="token operator">:</span> name2<span class="token operator">=</span>ParaK
<span class="token number">2020</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">12</span> <span class="token number">13</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">37.836</span>  INFO <span class="token number">18840</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> t<span class="token punctuation">.</span>parak<span class="token punctuation">.</span>SpringbootRedisApplicationTest   <span class="token operator">:</span> name1<span class="token operator">=</span>KHighness<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="11-📩Redis持久化"><a href="#11-📩Redis持久化" class="headerlink" title="11. 📩Redis持久化"></a>11. 📩Redis持久化</h2><blockquote>
<p>📌tip</p>
</blockquote>
<p>Redis是内存数据库，如果不将内存中的数据库状态保存在磁盘，那么一旦服务器进程退出，服务器中的数据库状态也会消失。所以Redis提供了持久化功能。</p>
<ul>
<li><p>Redis默认是按照快照RDB的持久化方式</p>
</li>
<li><p>Redis重启的时候会优先使用AOF文件还原数据库状态</p>
</li>
</ul>
<h3 id="11-1-📁RDB"><a href="#11-1-📁RDB" class="headerlink" title="11.1 📁RDB"></a>11.1 📁RDB</h3><blockquote>
<p>🔔RDB = Redis Database</p>
</blockquote>
<p>将内存中的数据以快照”RDB”的形式将数据持久化到磁盘的一个二进制文件dump.rdb，定时保存。</p>
<blockquote>
<p>🔨配置</p>
</blockquote>
<pre><code>save 900 1    # 15分钟备份一次
save 300 10   # 如果在300s内，至少有10个key进行了修改，就进行持久化操作
save 60 10000 # 如果在60s内，至少有10000个key进行了修改，就进行持久化操作</code></pre>
<p>可以在24小时内，每小时备份一次，并且在每个月的每一天也备份一个RDB文件。</p>
<p>这样的话，即使遇上问题，也可以随时将数据集恢复到不同的版本。</p>
<blockquote>
<p>🔍工作机制</p>
</blockquote>
<p>Redis会单独创建(fork)一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何I/O操作的。这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加高效。RDB的<strong>缺点是最后一次持久化后的数据可能丢失</strong>。我们默认的就是RDB，一般情况下不需要修改这个配置。</p>
<blockquote>
<p>💣触发机制</p>
</blockquote>
<ul>
<li>save的规则满足的情况下，会自动触发rdb规则</li>
<li>执行flushall命令，也会触发rdb规则</li>
<li>退出redis，也会产生rdb文件</li>
</ul>
<blockquote>
<p>💟恢复rdb</p>
</blockquote>
<ul>
<li><p>将rdb文件放在redis启动目录，redis服务器启动的时候就会自动检查dump.rdb，恢复其中的数据</p>
</li>
<li><p>查看需要存在的位置</p>
</li>
</ul>
<pre class="line-numbers language-shell"><code class="language-shell">127.0.0.1:6379> config get dir
1) "dir"
2) "/usr/local/bin" # 如果在这个目录下存在dump.rdb文件，启动就会自动恢复其中的数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>🌠优点缺点</p>
</blockquote>
<p>优点：</p>
<ul>
<li><p>适合大规模的数据恢复(适合文件备份)</p>
</li>
<li><p>对数据的完整性要求不高</p>
</li>
</ul>
<p>缺点：</p>
<ul>
<li><p>Redis服务器宕机时会丢失数据</p>
</li>
<li><p>fork进程会占用一定的内容空间</p>
</li>
</ul>
<h3 id="11-2-📁AOF"><a href="#11-2-📁AOF" class="headerlink" title="11.2 📁AOF"></a>11.2 📁AOF</h3><blockquote>
<p>🔔AOF = Append Only Mode</p>
</blockquote>
<p>把所有的对Redis的服务器进行修改的命令都存到一个文件(默认为appendonly.aof)里，命令的集合。</p>
<blockquote>
<p>🔔配置</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">appendonly yes # 开启AOF
appendfsync yes # 默认开启同步
appendfsync always # 每次数据修改发生时候都会写入AOF文件
appendfsync everysec # 每秒钟同步一次，这个死AOF的缺省策略<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>📝AOF重写</p>
</blockquote>
<ul>
<li>AOF文件的大小随着时间的流逝一定越来越大，影响包括但不限于：对于Redis服务器计算机的存储压力；AOF还原数据库状态的时间增加</li>
<li>为了解决AOF文件体积膨胀的问题，Redis提供了AOF重写功能：Redis服务器可以创建一个新的AOF文件来替代现有的AOF文件，新旧两个文件所保存的数据库状态是相同的，但是新的AOF 文件不会包含任何浪费空间的冗余命令，通常会较旧AOF文件小很多</li>
</ul>
<p>Redis会在最近一次重写后记住AOF文件的大小，将次基本大小与当前大小进行比较，如果当前大小大于指定的百分比，则触发重写。</p>
<p>指定零百分比可以禁用重写功能。</p>
<pre class="line-numbers language-shell"><code class="language-shell">auto-aof-rewrite-percentage 100 
auto-aof-rewrite-min-size 64mb # 触发重写的AOF文件的最小大小<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>💢产生问题</p>
</blockquote>
<p>每次重启Redis的时候，会优先使用AOF文件还原数据。</p>
<p>如果AOF文件以外产生错位，或者人工意外改写，可以通过<code>redis-check-aof --fix appendonly.aof</code>修复文件</p>
<pre class="line-numbers language-shell"><code class="language-shell">[root@master bin]# redis-check-aof --fix appendonly.aof 
'x              3f: Expected prefix '*', got: '
AOF analyzed: size=114, ok_up_to=63, diff=51
This will shrink the AOF from 114 bytes, with 51 bytes, to 63 bytes
Continue? [y/N]: y
Successfully truncated AOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>🌠优点缺点</p>
</blockquote>
<p>优点：</p>
<ul>
<li>AOF会让redis变得非常耐久，AOF的默认策略是每秒同步一次，在这种配置下，就算Redis服务器宕机，也最多丢失一秒钟的数据</li>
</ul>
<p>缺点：</p>
<ul>
<li>对于相同的数据集来说，AOF的文件体积要大于RDB的文件体积，数据恢复的速度更慢</li>
<li>根据所使用的sync策略，AOF的速度可能慢于RDB</li>
</ul>
<h2 id="12-📩Redis发布订阅"><a href="#12-📩Redis发布订阅" class="headerlink" title="12. 📩Redis发布订阅"></a>12. 📩Redis发布订阅</h2><h3 id="12-1-💬说明"><a href="#12-1-💬说明" class="headerlink" title="12.1 💬说明"></a>12.1 💬说明</h3><p>Redis 发布订阅 (pub/sub) 是一种消息通信模式：发送者(pub) 发送方消息，订阅者(sub)接收消息。</p>
<p>Redis客户端可以订阅任意数量的频道。</p>
<h3 id="12-2-📷模型"><a href="#12-2-📷模型" class="headerlink" title="12.2 📷模型"></a>12.2 📷模型</h3><blockquote>
<p>🗼订阅模型</p>
</blockquote>
<img src="/posts/bae4ff13/image-20201125132811770.png" class="" title="image-20201125132811770">

<blockquote>
<p>🗽消息模型</p>
</blockquote>
<img src="/posts/bae4ff13/image-20201125132839908.png" class="" title="image-20201125132839908">



<blockquote>
<p>📜发布订阅命令</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">psubscribe pattern [pattern …]</td>
<td align="center">订阅一个或多个符合给定模式的频道</td>
</tr>
<tr>
<td align="center">pubsub subcommand [argument [argument …]]</td>
<td align="center">查看订阅与发布系统状态</td>
</tr>
<tr>
<td align="center">publish channel message</td>
<td align="center">将消息发送到指定的频道</td>
</tr>
<tr>
<td align="center">punsubscribe channel [channel …]</td>
<td align="center">退订所有给定模式的频道</td>
</tr>
<tr>
<td align="center">subscribe channel [channel …]</td>
<td align="center">订阅给定的一个或多个频道的信息</td>
</tr>
<tr>
<td align="center">unsubscribe [channel [channel …]]</td>
<td align="center">退订给定的频道</td>
</tr>
</tbody></table>
<blockquote>
<p>🎏演示</p>
</blockquote>
<p>开启三个redis-cli</p>
<pre class="line-numbers language-shell"><code class="language-shell"># 第一个客户端，订阅频道：Khighness
127.0.0.1:6379> subscribe Khighness
Reading messages... (press Ctrl-C to quit)
1) "subscribe"
2) "Khighness"
3) (integer) 1
1) "message"
2) "Khighness"

# 第二个客户端，在频道Khighness发布消息
127.0.0.1:6379> publish Khighness "Client1: Hello, Khighness"
(integer) 1

# 第三个客户端，在频道Khighness发布消息
127.0.0.1:6379> publish Khighness "Client3: Hello, Khighness"
(integer) 1

# 订阅频道的第一个客户端就能收到消息
1) "message"
2) "Khighness"
3) "Client2: Hello, Khighness"
1) "message"
2) "Khighness"
3) "Client3: Hello, Khighness"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>🕵️原理</p>
</blockquote>
<p>Redis是C语言编写的，通过分析Redis源代码里面的pubsub.c文件，了解发布和订阅机制的底层实现。</p>
<p>通过subscribe命令订阅某频道后，redis-server里维护了一个字典，字典的键就是一个个频道channel，而字典的值则是一个个链表，链表中保存了所有订阅这个频道的客户端client。subscribe命令的关键，就是将client添加到给定channel的订阅链中。</p>
<p>通过publish命令向订阅者发送消息，redis-server会使用给定的频道作为键，在它所维护的channel字典查找记录了订阅这个频道的所有客户端的链表，遍历这个链表，将消息发布给所有订阅者。</p>
<p>在Redis中，可以设定对某一个key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到响应的消息。这一功能最明显的用法就是用作实时消息系统，普通的即时聊天和群聊功能。</p>
<h2 id="13-📩Redis主从复制"><a href="#13-📩Redis主从复制" class="headerlink" title="13. 📩Redis主从复制"></a>13. 📩Redis主从复制</h2><h3 id="13-1-📖概念"><a href="#13-1-📖概念" class="headerlink" title="13.1 📖概念"></a>13.1 📖概念</h3><p>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主结点(master)，后者称为从结点(slave)；数据的复制是单向的，只能由主节点到从结点。master以写为主，salve以读为主。</p>
<p>默认情况下，每台Redis服务器都是主结点；且一个主结点可以有多个从结点(或没有从结点)，但一个从结点只能有一个主节点。</p>
<h3 id="13-2-🔧作用"><a href="#13-2-🔧作用" class="headerlink" title="13.2 🔧作用"></a>13.2 🔧作用</h3><ol>
<li>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式</li>
<li>故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复，实际上是一种服务的冗余</li>
<li>负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供读服务，分担服务器负载；尤其是在写少读多的场景下，通过多个从结点分担读负载，可以大大提高Redis服务器的并发量</li>
<li>高可用基石：主从复制是哨兵和集群可实施的基础，因此说主从复制是Redis高可用的基础</li>
</ol>
<h3 id="13-3-🔍复制原理"><a href="#13-3-🔍复制原理" class="headerlink" title="13.3 🔍复制原理"></a>13.3 🔍复制原理</h3><p>slave启动成功连接到master后会发送一个sync同步命令。</p>
<p>master接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave，并完成一次完全同步。</p>
<p><strong>全量复制</strong>：slave服务在接收到数据库文件后，将其存盘并加载到内存中。</p>
<p><strong>增量复制</strong>：master继续将新的所有收集到的修改命令依次传给slave，完成同步。</p>
<p>但是只要是重新连接master，一次完全同步(全量复制)将被自动执行。</p>
<h2 id="14-📩Redis集群搭建"><a href="#14-📩Redis集群搭建" class="headerlink" title="14. 📩Redis集群搭建"></a>14. 📩Redis集群搭建</h2><h3 id="14-1-🔱方法"><a href="#14-1-🔱方法" class="headerlink" title="14.1 🔱方法"></a>14.1 🔱方法</h3><p>==搭建临时伪集群，命令操作即可==</p>
<p>主要操作：<strong>操作从机，认老大。</strong></p>
<p>查看redis服务器信息：<code>info replication</code></p>
<p>在从机上认老大master：<code>slaveof &lt;master-ip&gt; &lt;master-port&gt;</code></p>
<p>==搭建永久集群，修改配置文件==</p>
<p>主要操作：修改redis-conf文件</p>
<pre class="line-numbers language-shell"><code class="language-shell">replicaof <masterip> <masterport>  # 配置master的ip和端口号
masterauth <master-passwordd>      # 如果master有密码则配置密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>==master关机解决——谋权篡位==</p>
<p>通过<code>slaveof no one</code>让slave自己变成master</p>
<h3 id="14-2-🔪操作"><a href="#14-2-🔪操作" class="headerlink" title="14.2 🔪操作"></a>14.2 🔪操作</h3><ol>
<li>复制三份redis.conf文件，修改信息<ul>
<li>port</li>
<li>logfile</li>
<li>pidfile</li>
<li>dbfilename</li>
</ul>
</li>
<li>分别在三个配置文件下启动redis服务</li>
</ol>
<pre class="line-numbers language-shell"><code class="language-shell">[root@master bin]# ps -ef | grep redis
root      18914      1  0 00:54 ?        00:01:38 redis-server 127.0.0.1:6379
root      31612      1  0 11:51 ?        00:00:00 redis-server 127.0.0.1:6380
root      31623      1  0 11:51 ?        00:00:00 redis-server 127.0.0.1:6381
root      31634  31340  0 11:51 pts/2    00:00:00 grep --color=auto redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="3">
<li>开启三个终端开启三个redis客户端分别连接三个redis服务器</li>
</ol>
<pre class="line-numbers language-shell"><code class="language-shell"># Terminal1
[parak@master bin]$ redis-cli -p 6379
# Terminal2
[parak@master bin]$ redis-cli -p 6380
# Terminal3
[parak@master bin]$ redis-cli -p 6381<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="4">
<li>将6379端口的服务的配置成master，另外两个配置成slave</li>
</ol>
<pre class="line-numbers language-shell"><code class="language-shell"># 6380
127.0.0.1:6380> slaveof 127.0.0.1 6379
OK
127.0.0.1:6380> info replication
# Replication
role:slave
master_host:127.0.0.1
master_port:6379
master_link_status:up
master_last_io_seconds_ago:3
master_sync_in_progress:0
slave_repl_offset:14
slave_priority:100
slave_read_only:1
connected_slaves:0
master_replid:9c3e61afce386f90c00db9ee4e9a2e7b4b265297
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:14
second_repl_offset:-1
repl_backlog_active:1
repl_backlog_size:1048576
repl_backlog_first_byte_offset:1
repl_backlog_histlen:14

# 6381
127.0.0.1:6381> slaveof 127.0.0.1 6379
OK
127.0.0.1:6381> info replication
# Replication
role:slave
master_host:127.0.0.1
master_port:6379
master_link_status:up
master_last_io_seconds_ago:8
master_sync_in_progress:0
slave_repl_offset:42
slave_priority:100
slave_read_only:1
connected_slaves:0
master_replid:9c3e61afce386f90c00db9ee4e9a2e7b4b265297
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:42
second_repl_offset:-1
repl_backlog_active:1
repl_backlog_size:1048576
repl_backlog_first_byte_offset:43
repl_backlog_histlen:0

# 6379
127.0.0.1:6379> info replication
# Replication
role:master
connected_slaves:2
slave0:ip=127.0.0.1,port=6380,state=online,offset=2087,lag=0
slave1:ip=127.0.0.1,port=6381,state=online,offset=2087,lag=0
master_replid:9c3e61afce386f90c00db9ee4e9a2e7b4b265297
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:2087
second_repl_offset:-1
repl_backlog_active:1
repl_backlog_size:1048576
repl_backlog_first_byte_offset:1
repl_backlog_histlen:2087<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="5">
<li>在master上写入值，在slave上读取值</li>
</ol>
<pre class="line-numbers language-shell"><code class="language-shell"># 6379
127.0.0.1:6379> hmset student:1 name Khighness gender male age 19
OK
127.0.0.1:6379> hmset student:2 name bingyao gender female age 16
OK
# 6380
127.0.0.1:6380> hmget student:1 name gender age
1) "Khighness"
2) "male"
3) "19"
# 6381
127.0.0.1:6381> hmget student:2 name gender age
1) "bingyao"
2) "female"
3) "16"

# slave只能读取，不能写入
127.0.0.1:6380> set K2 V2
(error) READONLY You can't write against a read only replica<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="15-📩Redis哨兵模式"><a href="#15-📩Redis哨兵模式" class="headerlink" title="15. 📩Redis哨兵模式"></a>15. 📩Redis哨兵模式</h2><p><del>驾校手动挡=&gt;上路自动挡</del></p>
<h3 id="15-1-📙概述"><a href="#15-1-📙概述" class="headerlink" title="15.1 📙概述"></a>15.1 📙概述</h3><p>主从切换技术的方法：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑哨兵模式。Redis从2.8开始正式提供了Sentinel(哨兵)架构来解决这个问题。</p>
<p>简单来说，哨兵模式就是谋权篡位的自动版，能够后台监控主机是否故障，如果发生故障则根据投票数自动将库转换为主库。</p>
<p>哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。</p>
<p>原理：哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例。</p>
<pre class="line-numbers language-mermaid"><code class="language-mermaid">graph TD;
    A((哨兵))
    B(主Redis服务器)
    C(从Redis服务器1)
    D(从Redis服务器2)
    S[以独立的进程监控3台服务器Redis是否正常运行] 
    S --> A
    A --> C
    A --> B
    A --> D
    B --> C
    B --> D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里的哨兵有两个作用：</p>
<ul>
<li>通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器</li>
<li>当哨兵监测到master宕机，会自动将slave切换为master，然后通过发布订阅模式通知其他的从服务器，修改配置文件，让它们切换主机</li>
</ul>
<p>一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控，各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</p>
<img src="/posts/bae4ff13/sentinel.jpg" class="" title="sentinel">



<p>假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行failover过程，仅仅是哨兵1主管的认为主服务器不可用，仅仅是哨兵1主观的认为主服务器不可用，这个现象称为主观下线，当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover[故障转移]操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为客观下线。</p>
<h3 id="15-2-🎏测试"><a href="#15-2-🎏测试" class="headerlink" title="15.2 🎏测试"></a>15.2 🎏测试</h3><p>准备三个redis服务，6379-master、6380-slave、6381-slave</p>
<p>修改配置文件sentinel.conf</p>
<pre class="line-numbers language-shell"><code class="language-shell">sentinel monitor mymaster 127.0.0.1 6379 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>启动哨兵</p>
<pre class="line-numbers language-shell"><code class="language-shell">34055:X 20 Oct 2020 14:39:15.404 * Increased maximum number of open files to 10032 (it was originally set to 1024).
                _._                                                  
           _.-``__ ''-._                                             
      _.-``    `.  `_.  ''-._           Redis 5.0.8 (00000000/0) 64 bit
  .-`` .-```.  ```\/    _.,_ ''-._                                   
 (    '      ,       .-`  | `,    )     Running in sentinel mode
 |`-._`-...-` __...-.``-._|'` _.-'|     Port: 26379
 |    `-._   `._    /     _.-'    |     PID: 34055
  `-._    `-._  `-./  _.-'    _.-'                                   
 |`-._`-._    `-.__.-'    _.-'_.-'|                                  
 |    `-._`-._        _.-'_.-'    |           http://redis.io        
  `-._    `-._`-.__.-'_.-'    _.-'                                   
 |`-._`-._    `-.__.-'    _.-'_.-'|                                  
 |    `-._`-._        _.-'_.-'    |                                  
  `-._    `-._`-.__.-'_.-'    _.-'                                   
      `-._    `-.__.-'    _.-'                                       
          `-._        _.-'                                           
              `-.__.-'                                               

34055:X 20 Oct 2020 14:39:15.407 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.
34055:X 20 Oct 2020 14:39:15.408 # Sentinel ID is dbfb304470e8ed2bb81b4be42f847e21ff5d9519
34055:X 20 Oct 2020 14:39:15.408 # +monitor master mymaster 127.0.0.1 6379 quorum 1
34055:X 20 Oct 2020 14:40:15.646 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379
34055:X 20 Oct 2020 14:40:25.731 * +slave slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>关闭master服务</p>
<pre class="line-numbers language-shell"><code class="language-shell"># 6379: master -> shutdown
127.0.0.1:6379> SHUTDOWN
not connected> exit

# sentinel
# 监控到master宕机
# 选出6380为master
34055:X 20 Oct 2020 14:43:47.509 # +sdown master mymaster 127.0.0.1 6379
34055:X 20 Oct 2020 14:43:47.509 # +odown master mymaster 127.0.0.1 6379 #quorum 1/1
34055:X 20 Oct 2020 14:43:47.509 # +new-epoch 1
34055:X 20 Oct 2020 14:43:47.509 # +try-failover master mymaster 127.0.0.1 6379
34055:X 20 Oct 2020 14:43:47.510 # +vote-for-leader dbfb304470e8ed2bb81b4be42f847e21ff5d9519 1
34055:X 20 Oct 2020 14:43:47.510 # +elected-leader master mymaster 127.0.0.1 6379
34055:X 20 Oct 2020 14:43:47.510 # +failover-state-select-slave master mymaster 127.0.0.1 6379
34055:X 20 Oct 2020 14:43:47.594 # +selected-slave slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379
34055:X 20 Oct 2020 14:43:47.594 * +failover-state-send-slaveof-noone slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379
34055:X 20 Oct 2020 14:43:47.678 * +failover-state-wait-promotion slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379
34055:X 20 Oct 2020 14:43:48.296 # +promoted-slave slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379
34055:X 20 Oct 2020 14:43:48.296 # +failover-state-reconf-slaves master mymaster 127.0.0.1 6379
34055:X 20 Oct 2020 14:43:48.371 * +slave-reconf-sent slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379
34055:X 20 Oct 2020 14:43:49.310 * +slave-reconf-inprog slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379
34055:X 20 Oct 2020 14:43:49.310 * +slave-reconf-done slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379
34055:X 20 Oct 2020 14:43:49.362 # +failover-end master mymaster 127.0.0.1 6379
34055:X 20 Oct 2020 14:43:49.362 # +switch-master mymaster 127.0.0.1 6379 127.0.0.1 6380
34055:X 20 Oct 2020 14:43:49.362 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6380
34055:X 20 Oct 2020 14:43:49.362 * +slave slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6380
34055:X 20 Oct 2020 14:44:19.365 # +sdown slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6380

# 6380: 新王登基
127.0.0.1:6380> info replication
# Replication
role:master
connected_slaves:1
slave0:ip=127.0.0.1,port=6381,state=online,offset=42337,lag=1
master_replid:12a540accf0c9347d3e45fad83ccddea86f3b3c3
master_replid2:b80e4fbbe06a83ac070f38e89267bd81b26ec5ca
master_repl_offset:42351
second_repl_offset:20188
repl_backlog_active:1
repl_backlog_size:1048576
repl_backlog_first_byte_offset:8342
repl_backlog_histlen:34010

# 6381: 参拜新王
127.0.0.1:6381> info replication
# Replication
role:slave
master_host:127.0.0.1
master_port:6380
master_link_status:up
master_last_io_seconds_ago:0
master_sync_in_progress:0
slave_repl_offset:63969
slave_priority:100
slave_read_only:1
connected_slaves:0
master_replid:12a540accf0c9347d3e45fad83ccddea86f3b3c3
master_replid2:b80e4fbbe06a83ac070f38e89267bd81b26ec5ca
master_repl_offset:63969
second_repl_offset:20188
repl_backlog_active:1
repl_backlog_size:1048576
repl_backlog_first_byte_offset:8053
repl_backlog_histlen:55917

# 重启6379的服务
# 重启之后俯首称臣
[root@master bin]# redis-server kconfig/redis6379.conf 
[root@master bin]# redis-cli -p 6379
127.0.0.1:6379> ping
PONG
127.0.0.1:6379> info relplication
127.0.0.1:6379> info replication
# Replication
role:slave
master_host:127.0.0.1
master_port:6380
master_link_status:up
master_last_io_seconds_ago:2
master_sync_in_progress:0
slave_repl_offset:50522
slave_priority:100
slave_read_only:1
connected_slaves:0
master_replid:12a540accf0c9347d3e45fad83ccddea86f3b3c3
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:50522
second_repl_offset:-1
repl_backlog_active:1
repl_backlog_size:1048576
repl_backlog_first_byte_offset:48596
repl_backlog_histlen:1927<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="15-3-🌠优点"><a href="#15-3-🌠优点" class="headerlink" title="15.3 🌠优点"></a>15.3 🌠优点</h3><ul>
<li>哨兵集群，基于主从复制模式，继承了主从的所有优点</li>
<li>主从可以切换，故障可以转移，增强系统的可用性</li>
<li>哨兵模式是主从模式的升级版，手动到自动，更加健壮</li>
</ul>
<h3 id="15-4-📰配置详解"><a href="#15-4-📰配置详解" class="headerlink" title="15.4 📰配置详解"></a>15.4 📰配置详解</h3><pre class="line-numbers language-shell"><code class="language-shell"># sentinel.conf

# 哨兵sentinel实例运行的端口，默认26379
port 26379

# 守护进程 
daemonize no

# 进程文件
pidfile "/var/run/redis-sentinel.pid"

# 进程文件
logfile ""

# 工作目录
dir "/tmp"

# 哨兵sentinel监控的master的IP和Port
# quorum配置多少个哨兵统一认为master失联。那么这时客观上认为主结点失联
sentinel monitor <master-name> <master-ip> <redis-ip> <quorum>

# 在redis实例中开启了授权密码
# 设置哨兵senti的连接密码
sentinel auth-pass <master-name> <password>

# 配置指定在发生failover主从切换时最多可以有多少个slave同时对新的master同步
# numreplicas越小，完成failover的事件就越长
# numreplicas越大，就意味着越多的slave因为replication(复制)而不可用
# numreplicas设置为1，保证每次只有slave处于不能处理命令请求的状态
sentinel parallel-syncs <master-name> <numreplicas>

# 配置指定多milliseconds毫秒之后，master没有响应sentinel
# 此时，哨兵主观上认为master下线，默认30秒
sentinel down-after-milliseconds <master-name> <milliseconds>

# 配置故障转移的超时时间，默认2分钟
# 可以用于以下方面
# 1. 同一sentinel对同一个master两次failo ver的间隔时间
# 2. 当一个slave从一个错误的master那里同步数据开始计算时间，直至slave被纠正为向正确的master那里同步数据
# 3. 当想要取消一个正在进行的failover需要的时间
# 4. 当进行failover时，配置所有slaves指向新的master所需的最大时间
sentinel failover-timeout <master-name> <milliseconds>

# 通知脚本
sentinel notification-script <master-name> <script-path>

# 客户端重新配置主节点参数脚本
sentinel client-reconfig-script <master-name> <script-path><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="16-📩Redis穿透、击穿和雪崩"><a href="#16-📩Redis穿透、击穿和雪崩" class="headerlink" title="16. 📩Redis穿透、击穿和雪崩"></a>16. 📩Redis穿透、击穿和雪崩</h2><h3 id="16-1-🔥缓存穿透"><a href="#16-1-🔥缓存穿透" class="headerlink" title="16.1 🔥缓存穿透"></a>16.1 🔥缓存穿透</h3><blockquote>
<p>💭问题说明</p>
</blockquote>
<p>查询的key对应的数据不在redis缓存中，即缓存没有命中，于是向持久层数据库查询，数据库也没有，当请求量过大的时候，可能压垮数据库。</p>
<p>即大面积的缓存失效，大并发请求打崩DB。</p>
<blockquote>
<p>💖解决方法</p>
</blockquote>
<p>1️⃣<strong>参数校验</strong></p>
<p>在接口层增加校验，不合法的参数直接return，比如id&lt;0直接拦截。</p>
<p>2️⃣<strong>布隆过滤器</strong></p>
<p>利用高效的数据结构和算法快速判断出你这个Key是否在数据库中存在，不存在你return就好了，存在你就去查DB刷新KV再return。</p>
<p>3️⃣<strong>缓存空对象</strong></p>
<p>当存储层不命中后，即使返回的空对象也将其缓存起来，同时会设置一个过期时间，之后再访问这个数据将会从缓存中获取，保护数据库。</p>
<h3 id="16-2-💧缓存击穿"><a href="#16-2-💧缓存击穿" class="headerlink" title="16.2 💧缓存击穿"></a>16.2 💧缓存击穿</h3><blockquote>
<p>💭问题说明</p>
</blockquote>
<p>查询的一个key非常热点，在不停地扛着大量的请求，大并发集中对这一个点进行访问，当这个key在失效的瞬间，持续的大并发直接落到了数据库上，就在这个Key的点上击穿了缓存。</p>
<p>即单个key的缓存失效，大并发请求击穿redis直落DB。</p>
<blockquote>
<p>💙解决方法</p>
</blockquote>
<p>设置热点数据永不过期，或者加上互斥锁。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getData</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//从Redis查询数据</span>
        String result <span class="token operator">=</span> <span class="token function">getDataByKV</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//参数校验</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//获得锁</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>reenLock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">//去数据库查询</span>
                    result <span class="token operator">=</span> <span class="token function">getDataByDB</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">//校验</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                        <span class="token comment" spellcheck="true">//插进缓存</span>
                        <span class="token function">setDataToKV</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">//睡一会再拿</span>
                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>100L<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    result <span class="token operator">=</span> <span class="token function">getData</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//释放锁</span>
                reenLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="16-3-🌊缓存雪崩"><a href="#16-3-🌊缓存雪崩" class="headerlink" title="16.3 🌊缓存雪崩"></a>16.3 🌊缓存雪崩</h3><blockquote>
<p>💭问题说明</p>
</blockquote>
<p>当redis服务器重启或则大量缓存集中在某一个时间段失效，瞬间Redis跟没有一样，那这个数量级别的请求直接打到数据库几乎是灾难性的</p>
<blockquote>
<p>💚解决方法</p>
</blockquote>
<p>1️⃣<strong>redis高可用</strong></p>
<p>搭建集群，异地多活</p>
<p>2️⃣<strong>限流降级</strong></p>
<p>在缓存失效后，通过加锁或者队列哎控制读数据库写缓存的线程数量</p>
<p>3️⃣<strong>数据预热</strong></p>
<p>在正式部署之前，先把可能的数据预先访问一遍，让可能的数据加载到缓存中。</p>
<p>在即将发生大并发访问写入key的时候，设置不同的缓存时间，让缓存失效的时间点尽量均匀。</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>NoSQL</tag>
        <tag>Cache</tag>
      </tags>
  </entry>
  <entry>
    <title>Regex</title>
    <url>/posts/83c5d7ce/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Regex"><a href="#Regex" class="headerlink" title="Regex"></a>Regex</h1><center>
    <font face="Kristen ITC" color="#555555" size=3>Khighness</font><br>
</center>



<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><blockquote>
<p>Regex</p>
</blockquote>
<p><strong>正则表达式，Regular Expression</strong></p>
<blockquote>
<p>为什么需要正则表达式？</p>
</blockquote>
<p><strong>文本的复杂处理</strong></p>
<blockquote>
<p>正则表达式的优势和用途？</p>
</blockquote>
<ul>
<li><strong>一种强大而灵活的文本处理工具</strong></li>
<li><strong>大部分编程语言、数据库、文本编辑器、开发环境都支持正则表达式</strong></li>
</ul>
<blockquote>
<p>正则表达式定义：</p>
</blockquote>
<p><strong>一种字符串匹配的模式</strong></p>
<blockquote>
<p>开发中使用</p>
</blockquote>
<ul>
<li>分析所要匹配的数据，写出测试用的典型数据</li>
<li>在工具软件中进行匹配测试</li>
<li>在程序中调用测试的正则表达式</li>
</ul>
<a id="more"></a>



<h2 id="2-语法"><a href="#2-语法" class="headerlink" title="2. 语法"></a>2. 语法</h2><h3 id="2-1-标准字符集合"><a href="#2-1-标准字符集合" class="headerlink" title="2.1 标准字符集合"></a>2.1 标准字符集合</h3><ul>
<li>能够与”多种字符”匹配的表达式</li>
<li>注意区分大小写，大写是相反的意思</li>
</ul>
<table>
<thead>
<tr>
<th align="center">字符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\d</td>
<td align="center">任意一个数字，0-9中的任意一个</td>
</tr>
<tr>
<td align="center">\w</td>
<td align="center">任意一个字母或数字或下划线，也就是A-Z、a-z、0-9、_中任意一个</td>
</tr>
<tr>
<td align="center">\s</td>
<td align="center">包括空格、制表符、换行符等空白字符的其中一个</td>
</tr>
<tr>
<td align="center">.</td>
<td align="center">小数点可以匹配任意一个字符(除了换行符)， 如果要匹配包括”\n”在内的所有字符，一般用<code>[\s\S]</code></td>
</tr>
</tbody></table>
<p>如果要匹配真正的’.’、’+’、’-‘、’\&#39; ， 就要转义，用<code>\.</code>、<code>\+</code>、<code>\-</code>、<code>\\</code></p>
<h3 id="2-2-自定义字符集合"><a href="#2-2-自定义字符集合" class="headerlink" title="2.2 自定义字符集合"></a>2.2 自定义字符集合</h3><ul>
<li>[]方括号匹配方式，能够匹配方括号中任意一个字符</li>
<li>正则表达式的特殊符号，被包含到中括号中，则失去了特殊意义，除了^、-之外</li>
<li>标准字符集合，除小数点外，如果被包含于中括号，自定义字符集合被包含该集合<ul>
<li>[\d.-+]将匹配：数字、小数点、+、-</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">例如</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">[ab5@]</td>
<td align="center">匹配”a”或”b”或”5”或”@”</td>
</tr>
<tr>
<td align="center">[^abc]</td>
<td align="center">匹配”a”、”b”、”c”之外的任意一个字符</td>
</tr>
<tr>
<td align="center">[f-k]</td>
<td align="center">匹配”f”-“k”之间的任意一个字母</td>
</tr>
<tr>
<td align="center">[^A-F0-3]</td>
<td align="center">匹配”A”-“F”、”0”-“3”之外的任意一个字符</td>
</tr>
</tbody></table>
<h3 id="2-3-量词"><a href="#2-3-量词" class="headerlink" title="2.3 量词"></a>2.3 量词</h3><ul>
<li>修饰匹配次数的特殊符号</li>
<li>匹配次数中的贪婪模式(匹配字符越多越好，默认)</li>
<li>匹配次数中的非贪婪模式(匹配字符越少越好，在修饰匹配次数的特殊符号后再加上一个”?”号)</li>
</ul>
<table>
<thead>
<tr>
<th align="center">量词</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">{n}</td>
<td align="center">表达式重复n次</td>
</tr>
<tr>
<td align="center">{m,n}</td>
<td align="center">表达式至少重复m次，最多重复n次</td>
</tr>
<tr>
<td align="center">{m,}</td>
<td align="center">表达式至少重复m次</td>
</tr>
<tr>
<td align="center">?</td>
<td align="center">表达式匹配0次或1次，相当于{0,1}</td>
</tr>
<tr>
<td align="center">+</td>
<td align="center">表达式至少出现1次，相当于{1,}</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">表达式不出现或出现任意次，相当于{0,}</td>
</tr>
</tbody></table>
<p>例如：</p>
<ul>
<li><code>[A-Za-z]+</code>可以匹配单词</li>
</ul>
<p>例如文本：</p>
<pre><code>6、7、8、9、
1、2、3、4、5、6、7、8、9、
ab a1b a12b a123b a1234b a12345b </code></pre>
<p><code>(\d、)&#123;1,3&#125;</code>的匹配结果：</p>
<pre><code>6、7、8、
9、
1、2、3、
4、5、6、
7、8、9、</code></pre>
<p><code>(\d、)&#123;1,3&#125;?</code>的匹配结果：</p>
<pre><code>6、
7、
8、
9、
1、
2、
3、
4、
5、
6、
7、
8、
9、</code></pre>
<p><code>a\d?b</code>的匹配结果：</p>
<pre><code>ab
a1b</code></pre>
<p><code>a\d+b</code>的匹配结果：</p>
<pre><code>a1b
a12b
a123b
a1234b
a12345b</code></pre>
<p><code>a\d-b</code>的匹配结果：</p>
<pre><code>ab
a1b
a12b
a123b
a1234b
a12345b</code></pre>
<h3 id="2-4-字符边界"><a href="#2-4-字符边界" class="headerlink" title="2.4 字符边界"></a>2.4 字符边界</h3><table>
<thead>
<tr>
<th align="center">字符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">^</td>
<td align="center">与字符串开始的地方匹配</td>
</tr>
<tr>
<td align="center">$</td>
<td align="center">与字符串结束的地方匹配</td>
</tr>
<tr>
<td align="center">\b</td>
<td align="center">匹配一个单词边界</td>
</tr>
</tbody></table>
<p><code>\b</code>匹配这样一个位置：前面的字符和后面的字符不全是\w</p>
<p>例如文本:</p>
<pre><code>Khighness 
Khighness1 Khighness2
3Khighness 
4Khighness 
Khighness5 Khighness6
7Khighness 
8Khighness</code></pre>
<p><code>^K</code>匹配最初的”K”，<code>s$</code>匹配最后的”s”；</p>
<p><code>Khighness\b</code>匹配第1、3、4、6、7行的”Khighness”；</p>
<p><code>\bKhighness</code>匹配第1、2、5行的”Khighness”；</p>
<p><code>\bKhighness\b</code>匹配第1行的”Khighness”。</p>
<h3 id="2-5-匹配模式"><a href="#2-5-匹配模式" class="headerlink" title="2.5 匹配模式"></a>2.5 匹配模式</h3><ul>
<li>IGNORECASE-忽略大小写模式<ul>
<li>匹配时忽略大小写</li>
<li>默认情况下，正则表达式是要区分大小写的</li>
</ul>
</li>
<li>SINGLELINE-单行模式<ul>
<li>整个文本看做一个字符串，只有一个开头，一个结尾</li>
<li>使小数点”.”可以匹配包含换行符(\n)在内的任意字符</li>
</ul>
</li>
<li>MULTILINE-多行模式<ul>
<li>每行都是一个字符串，都有开头和结尾</li>
<li>在指定了MULTILINE之后，如果需要仅匹配字符串开始和结束为止，可以使用<code>\A</code>和<code>\Z</code></li>
</ul>
</li>
</ul>
<h3 id="2-7-选择符和分组"><a href="#2-7-选择符和分组" class="headerlink" title="2.7 选择符和分组"></a>2.7 选择符和分组</h3><table>
<thead>
<tr>
<th align="center">表达式</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">分支结构: |</td>
<td align="center">左右两边表达式之间“或”关系，匹配左边或者右边</td>
</tr>
<tr>
<td align="center">捕获组: ()</td>
<td align="center">(1) 在被修饰匹配次数的时候，括号中的表达式可以作为整体被修饰; (2) 取匹配结果的时候，括号中的表达式匹配到的内容可以被单独得到; (3) 每一对括号会分配一个编号，使用()的捕获根据左括号的顺序从1开始自动编号。捕获元素编号为零的第一个捕获是由整个正则表达式模式匹配的文本</td>
</tr>
<tr>
<td align="center">非捕获组: (?:Exception)</td>
<td align="center">一些表达式中，不得不使用()，但又不需要保存()中子表达式匹配的内容，这时可以用非捕获组来抵消使用()带来的副作用</td>
</tr>
</tbody></table>
<ul>
<li>反向引用(\num)<ul>
<li>每一对()会分配一个编号，使用()的捕获模式</li>
</ul>
</li>
</ul>
<p>例如<code>([a-z]&#123;2&#125;)\1</code>可以匹配类似”abab”、”gogo”、”toto”的字符串</p>
<h3 id="2-8-预搜索-零宽断言"><a href="#2-8-预搜索-零宽断言" class="headerlink" title="2.8 预搜索(零宽断言)"></a>2.8 预搜索(零宽断言)</h3><ul>
<li>只进行子表达式的匹配，匹配内容不计入最终的匹配结果，是零宽度</li>
<li>这个位置应该符合某个条件。判断当前位置的前后字符，是否符合指定的条件，但不匹配前后的字符。是对位置的匹配</li>
<li>正则表达式匹配过程中，如果子表达式匹配到的是字符内容，而非位置，并被保存到最终的匹配结果中，那么久认为这个子表达式是占有字符的；如果子表达式匹配的仅仅是位置，或者匹配的内容并不保存到最终的匹配结果中，那么就认为这个子表达式是零宽度的。占有字符还是零宽度，是针对匹配的内容屎否保存到最终的匹配结果中而言的。</li>
</ul>
<table>
<thead>
<tr>
<th align="center">表达式</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">(?=exp)</td>
<td align="center">断言自身出现的位置的后面能匹配表达式exp</td>
</tr>
<tr>
<td align="center">(?&lt;=exp)</td>
<td align="center">断言自身出现的位置的前面能匹配表达式exp</td>
</tr>
<tr>
<td align="center">(?!exp)</td>
<td align="center">断言此位置的后面不能匹配表达式exp</td>
</tr>
<tr>
<td align="center">(?&lt;exp)</td>
<td align="center">断言此位置的前面不能匹配表达式exp</td>
</tr>
</tbody></table>
<p>例如：</p>
<ul>
<li><p><code>[A-Za-z]+(?=ing)</code>可以匹配所有以”ing”结尾的单词(匹配结果不包含”ing”，<code>[A-Za-z]+ing</code>的匹配结果包含”ing”)</p>
</li>
<li><p><code>(?&lt;=in)[A-Za-z]+</code>可以匹配所有以”in”为前缀的单词(匹配结果不包含”in”，<code>in[A-Za-z]+</code>的匹配结果包含”in”)</p>
</li>
</ul>
<h2 id="3-验证"><a href="#3-验证" class="headerlink" title="3. 验证"></a>3. 验证</h2><h3 id="3-1-电话号码验证"><a href="#3-1-电话号码验证" class="headerlink" title="3.1 电话号码验证"></a>3.1 电话号码验证</h3><blockquote>
<p>要求</p>
</blockquote>
<ul>
<li>固定电话号码由数字和”-“构成，电话号码为7到8位</li>
<li>如果固定电话号码中包含有区号，那么区号为三位或四位，首位是0，区号用”-“和其他部分隔开</li>
<li>移动电话号码为11位，第一位和第二位为”13”、”14”、15”、”17”、18”、”19”</li>
</ul>
<blockquote>
<p>分析：</p>
</blockquote>
<ul>
<li>固定电话号码：<code>0\d&#123;2,3&#125;-\d&#123;7,9&#125;</code></li>
<li>移动电话号码: <code>1[3|4|5|7|8|9]\d&#123;9&#125;</code></li>
<li>合起来就是：<code>^0\d&#123;2,3&#125;-\d&#123;7,9&#125;|1[3|4|5|7|8|9]\d&#123;9&#125;$</code></li>
</ul>
<h3 id="3-3-电子邮箱验证"><a href="#3-3-电子邮箱验证" class="headerlink" title="3.3 电子邮箱验证"></a>3.3 电子邮箱验证</h3><blockquote>
<p>要求</p>
</blockquote>
<ul>
<li>电子邮箱格式：名称@域名</li>
<li>邮箱名称部分：允许汉字、字母、数字、中划线和下划线</li>
<li>邮箱域名部分：允许字母、数字、英语句号</li>
</ul>
<blockquote>
<p>分析</p>
</blockquote>
<ul>
<li>邮箱名称表达式：<ul>
<li>汉字<code>[\u4e00-\u9fa5]</code></li>
<li>字母<code>[A-Za-z]</code></li>
<li>数字<code>[0-9]</code></li>
<li>中划线和下划线<code>[-_]</code></li>
<li>综上得到名称表达式<code>[\u4e00-\u9fa5A-Za-z0-9-_]+</code></li>
</ul>
</li>
<li>邮箱域名表达式：<ul>
<li>域名的一般规律为[N级域名].[三级域名].[二级域名].[一级域名]，格式类似为<code>**.**.**.**</code></li>
<li>一级域名只包含字母(如com、top、cn等)，长度为2-4位</li>
<li><code>**</code>部分可以表示为<code>[A-Za-z0-9-_]+</code></li>
<li><code>.**</code>部分可以表示为<code>\.[A-Za-z0-9-_]+</code></li>
<li>零或多个<code>&quot;.**&quot;</code>可以表示为 <code> (\.[A-Za-z0-9-_]+)*</code></li>
<li>一级域名部分<code>.**</code>可以表示为.<code>\.[a-z]&#123;2,4&#125;</code></li>
<li>综上得到域名表达式<code>[A-Za-z0-9-_]+(\.[A-Za-z0-9-_]+)*\.[a-z]&#123;2,4&#125;</code></li>
</ul>
</li>
<li>邮箱最终表达式：<ul>
<li>使用<code>^</code>匹配邮箱最开始的部分，使用<code>$</code>匹配邮箱结束部分以保证邮箱前后不能有其他字符</li>
<li>由”名称@域名”得到最终表达式：<code>[\u4e00-\u9fa5A-Za-z0-9-_]+@[A-Za-z0-9-_]+(\.[A-Za-z0-9-_]+)*\.[a-z]&#123;2,4&#125;</code></li>
<li>简写即为：<code>^[\u4e00-\u9fa5-\w]+@[-\w]+(\.[-\w]+)*\.[a-z]&#123;2,4&#125;$</code></li>
</ul>
</li>
</ul>
<h2 id="4-使用"><a href="#4-使用" class="headerlink" title="4. 使用"></a>4. 使用</h2><p>Java程序中使用正则表达式，相关类位于<code>java.util.regex</code>包下面</p>
<ul>
<li>类<code>Pattern</code>:<ul>
<li>正则表达四的编译表示形式</li>
<li>建立正则表达式，并启用相应模式：<code>Pattern pattern = Pattern.compile(Regular Expression);</code></li>
</ul>
</li>
<li>类<code>Matcher</code>:<ul>
<li>通过解释<code>Pattern</code>对<code>character squence</code>执行匹配操作的引擎</li>
<li>匹配str字符串：<code>Matcher matcher = pattern.matcher(str);</code></li>
<li>将整个字符串序列与该模式匹配：<code>boolean res1 = matcher.matches();</code></li>
<li>扫描字符串序列，查找与该模式匹配的下一个子序列：<code>boolean res2 = matcher.find();</code></li>
</ul>
</li>
</ul>
<h3 id="4-1-基本操作"><a href="#4-1-基本操作" class="headerlink" title="4.1 基本操作"></a>4.1 基本操作</h3><blockquote>
<p>代码</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>Matcher<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>Pattern<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author: KHighness
 * @date: 2020/10/7 15:23
 * @apiNote: 基本操作
 */</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 正则匹配模式</span>
        Pattern pattern <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"\\w+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 匹配操作引擎</span>
        Matcher matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"KHighness||ParaK||FlowerK||18236763"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 完整匹配</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------完整匹配----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> res <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匹配结果："</span> <span class="token operator">+</span> res <span class="token operator">+</span> <span class="token string">"，匹配字符串："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>res <span class="token operator">?</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">"NULL"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 每次操作完引擎中的字符串都会到达末尾，需要重新写</span>
        matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"KHighness||ParaK||FlowerK||18236763"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 子串匹配</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------子串匹配----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> res1 <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匹配结果："</span> <span class="token operator">+</span> res1 <span class="token operator">+</span> <span class="token string">"，匹配字符串："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>res1 <span class="token operator">?</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">"NULL"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> res2 <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匹配结果："</span> <span class="token operator">+</span> res2 <span class="token operator">+</span> <span class="token string">"，匹配字符串："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>res2 <span class="token operator">?</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">"NULL"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> res3 <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匹配结果："</span> <span class="token operator">+</span> res3 <span class="token operator">+</span> <span class="token string">"，匹配字符串："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>res3 <span class="token operator">?</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">"NULL"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> res4 <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匹配结果："</span> <span class="token operator">+</span> res4 <span class="token operator">+</span> <span class="token string">"，匹配字符串："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>res4 <span class="token operator">?</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">"NULL"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> res5 <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匹配结果："</span> <span class="token operator">+</span> res5 <span class="token operator">+</span> <span class="token string">"，匹配字符串："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>res5 <span class="token operator">?</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">"NULL"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 循环查找</span>
        matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"KHighness||ParaK||FlowerK||18236763"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------循环匹配----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>运行</p>
</blockquote>
<pre class="line-numbers language-powershell"><code class="language-powershell">-<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">--</span><span class="token operator">-</span>完整匹配<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">-</span>
匹配结果：false，匹配字符串：NULL
<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">-</span>子串匹配<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">-</span>
匹配结果：true，匹配字符串：KHighness
匹配结果：true，匹配字符串：ParaK
匹配结果：true，匹配字符串：FlowerK
匹配结果：true，匹配字符串：18236763
匹配结果：false，匹配字符串：NULL
<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">-</span>循环匹配<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">-</span>
KHighness
ParaK
FlowerK
18236763<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="4-2-分组操作"><a href="#4-2-分组操作" class="headerlink" title="4.2 分组操作"></a>4.2 分组操作</h3><blockquote>
<p>代码</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>Matcher<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>Pattern<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author: KHighness
 * @date: 2020/10/7 15:46
 * @apiNote: 分组操作
 */</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 正则匹配模式</span>
        <span class="token comment" spellcheck="true">// 分组两组匹配：字母和数字</span>
        Pattern pattern <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"([A-Za-z]+)([0-9]+)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 匹配操作引擎</span>
        Matcher matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"KHighness18||ParaK23||FlowerK67||KAG63||KAG72"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-----第%d组-----\n"</span><span class="token punctuation">,</span> index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"group[0]: "</span> <span class="token operator">+</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"group[1]: "</span> <span class="token operator">+</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>运行</p>
</blockquote>
<pre class="line-numbers language-powershell"><code class="language-powershell">-<span class="token operator">--</span>-<span class="token operator">-</span>第1组<span class="token operator">--</span>-<span class="token operator">--</span>
<span class="token function">group</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span>: KHighness18
<span class="token function">group</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span>: KHighness
<span class="token operator">--</span>-<span class="token operator">--</span>第2组<span class="token operator">--</span>-<span class="token operator">--</span>
<span class="token function">group</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span>: ParaK23
<span class="token function">group</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span>: ParaK
<span class="token operator">--</span>-<span class="token operator">--</span>第3组<span class="token operator">--</span>-<span class="token operator">--</span>
<span class="token function">group</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span>: FlowerK67
<span class="token function">group</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span>: FlowerK
<span class="token operator">--</span>-<span class="token operator">--</span>第4组<span class="token operator">--</span>-<span class="token operator">--</span>
<span class="token function">group</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span>: KAG63
<span class="token function">group</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span>: KAG
<span class="token operator">--</span>-<span class="token operator">--</span>第5组<span class="token operator">--</span>-<span class="token operator">--</span>
<span class="token function">group</span><span class="token punctuation">[</span>0<span class="token punctuation">]</span>: KAG72
<span class="token function">group</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span>: KAG<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="4-3-替换操作"><a href="#4-3-替换操作" class="headerlink" title="4.3 替换操作"></a>4.3 替换操作</h3><blockquote>
<p>代码</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>Matcher<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>Pattern<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author: KHighness
 * @date: 2020/10/7 16:09
 * @apiNote: 替换操作
 */</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo3</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 正则匹配模式</span>
        Pattern pattern <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"[0-9]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 匹配操作引擎</span>
        Matcher matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token string">"KHighness18||ParaK23||FlowerK67||KAG63||KAG72"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 数字全部替换为##</span>
        String newStr <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>运行</p>
</blockquote>
<pre class="line-numbers language-powershell"><code class="language-powershell">KHighness<span class="token comment" spellcheck="true">##||ParaK##||FlowerK##||KAG##||KAG##</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="4-4-分割操作"><a href="#4-4-分割操作" class="headerlink" title="4.4 分割操作"></a>4.4 分割操作</h3><blockquote>
<p>代码</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author: KHighness
 * @date: 2020/10/7 16:12
 * @apiNote: 分割操作
 */</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo4</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        String str <span class="token operator">=</span> <span class="token string">"K18H23I67G63H72N18E23S67S6372"</span><span class="token punctuation">;</span>
        String<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\d+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 以数字为边界进行切割</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>运行</p>
</blockquote>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token namespace">[K, H, I, G, H, N, E, S, S]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="4-5-爬取腾讯官网所有的超链接"><a href="#4-5-爬取腾讯官网所有的超链接" class="headerlink" title="4.5 爬取腾讯官网所有的超链接"></a>4.5 爬取腾讯官网所有的超链接</h3><blockquote>
<p>代码</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>parak<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>MalformedURLException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span>Charset<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>LinkedList<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>Matcher<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span>Pattern<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author: KHighness
 * @date: 2020/10/7 16:24
 * @apiNote: 爬取腾讯官网的所有超链接
 */</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSpider</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 通过URL获取html
     * @param urlStr
     * @return
     */</span>
    <span class="token keyword">public</span> String <span class="token function">getURLContent</span><span class="token punctuation">(</span>String urlStr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        StringBuilder stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>urlStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
            BufferedReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">openStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Charset<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            String temp <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>temp <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>temp <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MalformedURLException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> stringBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 将匹配结果装进list
     * @param destStr
     * @param regex
     * @return
     */</span>
    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getMatcherSubs</span><span class="token punctuation">(</span>String destStr<span class="token punctuation">,</span> String regex<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Pattern pattern <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Matcher matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>destStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>String<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        String url <span class="token operator">=</span> <span class="token string">"https://www.tencent.com/zh-cn"</span><span class="token punctuation">;</span>
        WebSpider spider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSpider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 获取超链接标签a的内容 &lt;a\s\S]+?&lt;/a></span>
        <span class="token comment" spellcheck="true">// 获取href的内容 href=\"(.+?)\"</span>
        spider<span class="token punctuation">.</span><span class="token function">getMatcherSubs</span><span class="token punctuation">(</span>spider<span class="token punctuation">.</span><span class="token function">getURLContent</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"href=\\\"([\\w\\s./:]+?)\\\""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>运行</p>
</blockquote>
<pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token operator">/</span>css<span class="token operator">/</span>base<span class="token punctuation">.</span>css
<span class="token operator">/</span>css<span class="token operator">/</span>index<span class="token punctuation">.</span>css
https:<span class="token operator">/</span><span class="token operator">/</span>weibo<span class="token punctuation">.</span>com<span class="token operator">/</span>tencent
https:<span class="token operator">/</span><span class="token operator">/</span>twitter<span class="token punctuation">.</span>com<span class="token operator">/</span>TencentGlobal
https:<span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>linkedin<span class="token punctuation">.</span>com<span class="token operator">/</span>company<span class="token operator">/</span>tencent<span class="token operator">/</span>
https:<span class="token operator">/</span><span class="token operator">/</span>careers<span class="token punctuation">.</span>tencent<span class="token punctuation">.</span>com<span class="token operator">/</span>
https:<span class="token operator">/</span><span class="token operator">/</span>join<span class="token punctuation">.</span>qq<span class="token punctuation">.</span>com<span class="token operator">/</span>
https:<span class="token operator">/</span><span class="token operator">/</span>spd<span class="token punctuation">.</span>tencent<span class="token punctuation">.</span>com<span class="token operator">/</span>portal
https:<span class="token operator">/</span><span class="token operator">/</span>ipr<span class="token punctuation">.</span>tencent<span class="token punctuation">.</span>com<span class="token operator">/</span>
http:<span class="token operator">/</span><span class="token operator">/</span>beian<span class="token punctuation">.</span>miit<span class="token punctuation">.</span>gov<span class="token punctuation">.</span>cn<span class="token operator">/</span>
http:<span class="token operator">/</span><span class="token operator">/</span>beian<span class="token punctuation">.</span>miit<span class="token punctuation">.</span>gov<span class="token punctuation">.</span>cn<span class="token operator">/</span>
http:<span class="token operator">/</span><span class="token operator">/</span>beian<span class="token punctuation">.</span>miit<span class="token punctuation">.</span>gov<span class="token punctuation">.</span>cn<span class="token operator">/</span>
<span class="token operator">/</span>css<span class="token operator">/</span>rem<span class="token punctuation">.</span>css
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Regex</tag>
      </tags>
  </entry>
  <entry>
    <title>博弈论</title>
    <url>/posts/12bcd26e/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="博弈论"><a href="#博弈论" class="headerlink" title="博弈论"></a>博弈论</h1><center>
    <font face="Kristen ITC" color="#555555" size=3>Khighness、寻找必败态</font><br>
</center>





<h2 id="1-巴什博弈"><a href="#1-巴什博弈" class="headerlink" title="1. 巴什博弈"></a>1. 巴什博弈</h2><h3 id="1-1-问题"><a href="#1-1-问题" class="headerlink" title="1.1 问题"></a>1.1 问题</h3><blockquote>
<p>两个顶尖聪明的人在玩游戏，有 n 个石子，每个人每次拿 1~m 个石头，拿掉最后一块石头的人就是获胜者。请问先手与后手谁必胜？</p>
</blockquote>
<a id="more"></a>



<h3 id="1-2-分析"><a href="#1-2-分析" class="headerlink" title="1.2 分析"></a>1.2 分析</h3><blockquote>
<p>分类讨论: </p>
<p>（1）当n ≤ m时，这时先手的人可以一次取走所有的；</p>
<p>（2）当n = m+1时，这时先手无论取走多少个，后手的人都能取走剩下所有的；</p>
<p>（3）当n = k ∗ ( m + 1)时，对于每(m + 1)个石子，先手取i个，后手一定能将剩下的(m + 1 − i)个都取走，因此后手必胜；</p>
<p>（4）当n = k ∗ ( m + 1)  + x ( 0&lt; x&lt; m + 1)时，先手可以先取 x 个，之后的局势就回到了上一种情况，无论后手取多少个，先手都能取走m+1个中剩下的，因此先手必胜。</p>
</blockquote>
<h3 id="1-3-结论"><a href="#1-3-结论" class="headerlink" title="1.3 结论"></a>1.3 结论</h3><blockquote>
<p><strong>当n % m + 1) == 0时，后手必胜，否则先手必胜。</strong></p>
</blockquote>
<h3 id="1-4-代码"><a href="#1-4-代码" class="headerlink" title="1.4 代码"></a>1.4 代码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BashGame</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后手获胜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"先手获胜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="2-尼姆博弈"><a href="#2-尼姆博弈" class="headerlink" title="2. 尼姆博弈"></a>2. 尼姆博弈</h2><h3 id="2-1-问题"><a href="#2-1-问题" class="headerlink" title="2.1 问题"></a>2.1 问题</h3><blockquote>
<p>两个顶尖聪明的人在玩游戏，有 n 堆石子，第 i 堆有 ai 每个人每次能从一堆石子中取任意多个石子但不能不取，不能取的人输。请问先手与后手谁必胜？</p>
</blockquote>
<h3 id="2-2-分析"><a href="#2-2-分析" class="headerlink" title="2.2 分析"></a>2.2 分析</h3><blockquote>
<p>（1）当n = 1时，显然先手取走这一堆就能获胜；</p>
<p>（2）当n = 2且a1 != a2时，我们假设a1 &gt; a2，先手可以先在第一堆取走a1-a2个，下一次无论后手取走多少个，先手都可以在另一堆取走相同的个数，因此先手必胜；</p>
<p>（3）当n = 2且a1 == a2时，先手无论取多少个，后手都可以在另一堆取相同的个数，因此后手必胜；</p>
<p>（4）当n &gt;= 3时，问题变得繁琐起来，先找出规律性的结论。</p>
</blockquote>
<h3 id="2-3-结论"><a href="#2-3-结论" class="headerlink" title="2.3 结论"></a>2.3 结论</h3><blockquote>
<p><strong>当 a1 ^ a2 ^ ··· ^ an =  0 时，后手必胜，否则先手必胜。</strong></p>
<p><strong>证明：</strong></p>
<p>假设当前：a1 ^ a2 ^ ··· ^ an =  0，</p>
<p>先手回合：取走若干个后，</p>
<p>局势变成：a1 ^ a2 ^ ··· ^ an =  K，</p>
<p>即：a1 ^ a2 ^ ··· ^ an ^ K = 0。</p>
<p>假设 K 的最高位1在第 x 位，</p>
<p>那么必然存在 aj (1 &lt; = j &lt;= n) 的 第 x 位为1，</p>
<p>后手回合：只要把 aj 变成 aj ^ K，</p>
<p>就能使得：a1 ^ a2 ^ ··· ^ an =  0。</p>
<p>由于 aj ^ K 使得第 x 位 为0，无论低位是什么，</p>
<p>第 x 位变为0后，aj 整个数一定会变小，即：aj ^ K &lt; aj，</p>
<p>所以后手只需在第 j 堆取走(aj - aj ^ K)个石子即可。</p>
<p>先手每次取完，后手每次取(aj - aj ^ K)，</p>
<p>最后的局势一定是：a1 = a2 = ··· = an = 0，</p>
<p>此时先手无法取了，后手必胜。</p>
<p>反之，当a1 ^ a2 ^ ··· ^ an = K 时，</p>
<p>局势反转，先手每次取(aj - aj ^ K)个即可，先手必胜。</p>
</blockquote>
<h3 id="2-4-代码"><a href="#2-4-代码" class="headerlink" title="2.4 代码"></a>2.4 代码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NimGame</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            res <span class="token operator">^=</span> i<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后手获胜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"先手获胜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="3-尼姆Plus博弈"><a href="#3-尼姆Plus博弈" class="headerlink" title="3. 尼姆Plus博弈"></a>3. 尼姆Plus博弈</h2><h3 id="3-1-问题"><a href="#3-1-问题" class="headerlink" title="3.1 问题"></a>3.1 问题</h3><blockquote>
<p>两个顶尖聪明的人在玩游戏，有 n 堆石子，第 i 堆有 ai 个石子，每个人每次能从 1~d 堆石子中取任意多个石子但不能不取，不能取的人输。请问先手与后手谁必胜？</p>
</blockquote>
<h3 id="3-2-分析"><a href="#3-2-分析" class="headerlink" title="3.2 分析"></a>3.2 分析</h3><blockquote>
<p>特么太难了啊，呜呜呜我好菜</p>
</blockquote>
<h3 id="3-3-结论"><a href="#3-3-结论" class="headerlink" title="3.3 结论"></a>3.3 结论</h3><blockquote>
<p><strong>将每堆石子数量用二进制表示，对于二进制的任意一位，如果这一位为1的石子堆数量%(d+1)==0，那么后手必胜，否则先手必胜。</strong></p>
</blockquote>
<h3 id="3-4-证明"><a href="#3-4-证明" class="headerlink" title="3.4 证明"></a>3.4 证明</h3><blockquote>
<p>只需要证明三点：</p>
<ol>
<li><p>终止局面为先手必败（显然）</p>
</li>
<li><p>任意先手必胜的局面都能转变成先手必败的局面</p>
</li>
<li><p>任意先手必败的局面都不能转变成先手必胜的局面</p>
</li>
</ol>
<p><strong>证明</strong></p>
<p>证明2:</p>
<p>假设最高位%(d+1) != 0有m堆，那么将这些堆的这一位变成0；</p>
<p>假设下一位%(d+1) != 0的位有n个，之前m堆中这一位有a个1和b个0。</p>
<p>（1）如果n &lt;= a，显然将这a中的n个变成0即可；</p>
<p>（2）如果(d+1) - n &lt;= b，那么只要将b个中的(d+1) - n个变成1即可；</p>
<p>因为之前最高位是将1变成0，所以这一位即使由0变1，这堆石子也是减少的；</p>
<p>（3）如果两个都不满足，即a &gt; n &amp;&amp; b &lt; (d + 1 - n)，那么只要将这a堆和m堆之外的(n - a)堆的这一位变成0，</p>
<p>那么总改变堆数为 a + b + (n - a) = b + n &lt; (d + 1) - n + n = d + 1，</p>
<p>即将这一位变成%(d+1) = 0需要改变的总堆数要小于(d+1)，</p>
<p>即可以一次操作完成，然后以此类推就能使每一位都变为%(d+1)=0。</p>
<p>证明3:</p>
<p>因为一次最多操作d堆石子，因此不能将(d+1)堆某一位是1的石子堆的这一位都变为0。</p>
</blockquote>
<h2 id="4-威佐夫博弈"><a href="#4-威佐夫博弈" class="headerlink" title="4. 威佐夫博弈"></a>4. 威佐夫博弈</h2><h3 id="4-1-问题"><a href="#4-1-问题" class="headerlink" title="4.1 问题"></a>4.1 问题</h3><blockquote>
<p>两个顶尖聪明的人在玩游戏，有 2 堆石子，每个人每次可以从任意一堆石子中取任意多的石子或者从两堆石子中取同样多的石子，不能取的人输。请问先手与后手谁必胜？</p>
</blockquote>
<h3 id="4-1-分析"><a href="#4-1-分析" class="headerlink" title="4.1 分析"></a>4.1 分析</h3><blockquote>
<p>威佐夫博弈不同于巴什博弈和尼姆博弈，它的特殊之处在于不能将两堆石子分开分析。</p>
<p><em>下面分析不想看的直接跳过记住结论即可</em></p>
<p>定义先手必输的局势为奇异局势，前几个奇异局势为: (0, 0), (1, 2), (3, 5), (4, 7), (6,10)……</p>
<p>假设 (x, y) 为第 k 个奇异局势</p>
<p>性质：</p>
<ul>
<li>x为前 1···k 个奇异局势中没有出现过的最小正整数，y = x + k (打表找规律)</li>
<li>任何一个自然数都包含在一个且仅有一个奇异局势中</li>
<li>任何操作都会将奇异局势变为非奇异局势</li>
<li>非奇异局势可以通过适当操作变为奇异局势</li>
</ul>
<p>证明这个结论，只需证明：</p>
<ol>
<li>任意自然数都出现过</li>
<li>任意自然数仅出现一次</li>
</ol>
<p>反证法易证。</p>
</blockquote>
<img src="/posts/12bcd26e/%E5%A8%81%E4%BD%90%E5%A4%AB%E5%8D%9A%E5%BC%88.jpg" class="" title="XY">

<blockquote>
<p>我们可以将两堆石子看成是棋盘上一个点的纵横坐标，那么游戏切换：</p>
<p>棋盘上有一个点，每次每个人只能将棋子往左或者往下移动任意个格子，不能移动的人输。</p>
<p>将能一步到达(0, 0)的点都染色，那么这些点就是必胜态，再找到横纵坐标之和最小的没被染色的点，</p>
<p>这个点就是下一个必败态，由此画出上图。</p>
</blockquote>
<h3 id="4-1-结论"><a href="#4-1-结论" class="headerlink" title="4.1 结论"></a>4.1 结论</h3><blockquote>
<p><strong>根据<a href="https://baike.baidu.com/item/%E8%B4%9D%E8%92%82%E5%AE%9A%E7%90%86/2677437?fr=aladdin">Betty定理</a>，第K个局势就是(⌊(1+√5)/2 *k⌋, ⌊(3+√5)/2 *k⌋)，其中(1+√5)/2=1.618是黄金分割系数。</strong></p>
<p><strong>因此，局势(x, y)满足(y - x)*(1+√5)/2)=x时，先手必败，否则先手必胜。</strong></p>
</blockquote>
<h3 id="4-1-代码"><a href="#4-1-代码" class="headerlink" title="4.1 代码"></a>4.1 代码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WizovGame</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 保证 a &lt;= b</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> temp <span class="token operator">=</span> b<span class="token punctuation">;</span>
            b <span class="token operator">=</span> a<span class="token punctuation">;</span>
            a <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 判断 a == (b - a) * 黄金分割系数 (向上取整)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>b <span class="token operator">-</span> a<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">5.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后手获胜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"先手获胜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="5-斐波那契博弈"><a href="#5-斐波那契博弈" class="headerlink" title="5. 斐波那契博弈"></a>5. 斐波那契博弈</h2><h3 id="5-1-问题"><a href="#5-1-问题" class="headerlink" title="5.1 问题"></a>5.1 问题</h3><blockquote>
<p>两个顶尖聪明的人在玩游戏，有一堆石子，数量为n，两个人轮流取石子，规则如下：</p>
<p>（1）先手不能在第一次把所有的石子取完，至少取一颗；</p>
<p>（2）之后每次可以取的石子数至少为1，至多为对手刚取的石子数的2倍；</p>
<p>不能取的人输。请问先手与后手谁必胜？</p>
</blockquote>
<h3 id="5-2-结论"><a href="#5-2-结论" class="headerlink" title="5.2 结论"></a>5.2 结论</h3><blockquote>
<p><strong>当n为Fibonacci数的时候，后手必胜，否则先手必胜。</strong></p>
</blockquote>
<h3 id="5-3-证明"><a href="#5-3-证明" class="headerlink" title="5.3 证明"></a>5.3 证明</h3><blockquote>
<p>数学归纳法：</p>
<p>假设石子数量n = F[i]（斐波那契数列中的第i项{1, 1, 2, 3, 5······}）</p>
<p>（1）当 i = 2 时，n = 2，显然先手取一个，后手必胜</p>
<p>（2）当 i &gt; 2 时，假设当 i &lt;= k 时结论成立。</p>
<p>当i = k + 1时，F[i] = F[k] + F[k-1]，将石子分成两部分来看。</p>
<p>假设先手第一次取 x 个，后手第一次取 y 个。</p>
<p>1）如果 x &lt; F[k-1] / 3，因为 n = F[k-1] 时已经证明后手一定能取到 F[k-1] 个中的最后一个，</p>
<p>所以问题转化成了有 F[k] 个中的最后一个，这个也已经证明后手一定能取到F[k]中的最后一个。</p>
<p>所以后手必胜。</p>
<p>2）如果 F[k-1] / 3 &lt;= x &lt;= F[k]时，则F[k-1]中剩余数量小于2x，后手可以直接取完，</p>
<p>（如果不选择一次性取完，慢慢磨最终也会是所证明的F[k-1]的情况，后手最后取完）</p>
<p>即后手取了F[k-1]-x个，即y &lt;= 2/3 * F[k-1]。比较 2/3 * F[k-1] 与 1/2 * F[k] 的大小，</p>
<p>即比较4 * [k-1] 与 3 * F[k] 的大小：</p>
<p>由于 F[k] 函数递增 且 F[k] = F[k-1] + F[k-2]易知：2 * F[k-2] &lt; F[k] &lt; 2 * F[k-1]，</p>
<p>因而 3 * F[k] = 3 * F[k-1] + 3 * F[k-2] &gt; 3 * F[k-1] + 3 / 2 * F[k-1] &gt; 4 * F[k-1]。</p>
<p>也就是说，在后手取完F[k-1]那一堆石子之后，先手不能一次性取完F[k]那一堆石子，</p>
<p>于是问题最终演变成了F[k]的状况，后手最后取完。</p>
<p>3）如果 x &gt; F[k-1]，因为F[k] &lt; 2 * F[k-1]，后手可以一次性取完。</p>
<p>综上三种情况，当 i &lt;= k 时结论成立，那么当 n = k+1 时结论也成立。</p>
</blockquote>
<h3 id="5-4-代码"><a href="#5-4-代码" class="headerlink" title="5.4 代码"></a>5.4 代码</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FibonacciGame</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">fibnacci</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 递归计算，慢</span>
<span class="token comment" spellcheck="true">//        if (n == 1 || n == 2)</span>
<span class="token comment" spellcheck="true">//            return 1;</span>
<span class="token comment" spellcheck="true">//        else</span>
<span class="token comment" spellcheck="true">//            return fibnacci(n - 1) + fibnacci(n - 2);</span>
        <span class="token comment" spellcheck="true">// 公式计算，快</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>  <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">/</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token function">fibnacci</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fibnacci</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后手获胜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"先手获胜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Game</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据</title>
    <url>/posts/ec060e02/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="大数据与云计算"><a href="#大数据与云计算" class="headerlink" title="大数据与云计算"></a>大数据与云计算</h1><center>
    <font face="Kristen ITC" color="#555555" font-size=100px>💌 Khighness 💌</font><br>
</center>





<h2 id="1-安装CentOS7"><a href="#1-安装CentOS7" class="headerlink" title="1. 安装CentOS7"></a>1. 安装CentOS7</h2><h3 id="1-下载镜像"><a href="#1-下载镜像" class="headerlink" title="1. 下载镜像"></a>1. 下载镜像</h3><blockquote>
<p>ISO: <a href="https://www.centos.org/download/">CentOS7 X86_64</a></p>
</blockquote>
<img src="/posts/ec060e02/image-20200915192222693.png" class="" title="image-20200915192222693">



<a id="more"></a>



<h3 id="2-安装系统"><a href="#2-安装系统" class="headerlink" title="2. 安装系统"></a>2. 安装系统</h3><img src="/posts/ec060e02/image-20200914201854650.png" class="" title="image-20200914201854650">

<img src="/posts/ec060e02/image-20200914201950325.png" class="" title="image-20200914201950325">



<img src="/posts/ec060e02/image-20200914202216056.png" class="" title="image-20200914202216056">



<h3 id="3-虚拟机完成"><a href="#3-虚拟机完成" class="headerlink" title="3. 虚拟机完成"></a>3. 虚拟机完成</h3><img src="/posts/ec060e02/image-20200914204312121.png" class="" title="image-20200914204312121">



<h3 id="4-安装Docker"><a href="#4-安装Docker" class="headerlink" title="4. 安装Docker"></a>4. 安装Docker</h3><blockquote>
<p>Docker要求CentOS系统的内核版本高于 3.10，查看CentOS版本是否支持 Docker</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">uname -r<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="Hadoop%5Cimage-20200922202458823.png" alt="image-20200922202458823"></p>
<blockquote>
<p>确保yum包更新到最新</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">sudo yum update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200922202118583.png" class="" title="image-20200922202118583">

<img src="/posts/ec060e02/image-20200922202544937.png" class="" title="image-20200922202544937">

<blockquote>
<p>安装过Docker则卸载旧版本</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">sudo yum remove docker  docker-common docker-selinux docker-engine<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200922204747806.png" class="" title="image-20200922204747806">

<blockquote>
<p>安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">sudo yum install -y yum-utils device-mapper-persistent-data lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200922203530629.png" class="" title="image-20200922203530629">

<blockquote>
<p>设置yum源（使用阿里云地址）</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200922203620500.png" class="" title="image-20200922203620500">

<blockquote>
<p>可以查看所有仓库中所有的docker版本，并选择特定版本安装</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">yum list docker-ce --showduplicates | sort -r<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200922203726104.png" class="" title="image-20200922203726104">

<blockquote>
<p>安装最新版本的 Docker Engine-Community 和 containerd</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">sudo yum install docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200922204125206.png" class="" title="image-20200922204125206">

<blockquote>
<p>验证是否安装成功</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">docker version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200922204248819.png" class="" title="image-20200922204248819">

<blockquote>
<p>启动Docker</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">sudo systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200922204613291.png" class="" title="image-20200922204613291">

<blockquote>
<p>运行Hello World</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">sudo docker run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200922204637363.png" class="" title="image-20200922204637363">



<h2 id="2-搭建Hadoop集群"><a href="#2-搭建Hadoop集群" class="headerlink" title="2. 搭建Hadoop集群"></a>2. 搭建Hadoop集群</h2><h3 id="1-下载并配置JDK"><a href="#1-下载并配置JDK" class="headerlink" title="1. 下载并配置JDK"></a>1. 下载并配置JDK</h3><blockquote>
<p>下载 jdk</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">yum install java-1.8.0-openjdk* -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200914205909499.png" class="" title="image-20200914205909499">

<blockquote>
<p>获取JAVA_HOME</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">dirname $(readlink $(readlink $(which java))) <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>配置环境变量</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">vi /etc/profile

export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el7_8.x86_64
export JRE_HOME=$JAVA_HOME/jre
export CLASSPATH=$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH
export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200914210707353.png" class="" title="image-20200914210707353">

<blockquote>
<p>查看JAVA_HOME</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">source /etc/profile
echo $JAVA_HOME<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200930135506971.png" class="" title="image-20200930135506971">

<blockquote>
<p>测试</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">java -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200930135637993.png" class="" title="image-20200930135637993">



<h3 id="2-配置Hosts列表"><a href="#2-配置Hosts列表" class="headerlink" title="2. 配置Hosts列表"></a>2. 配置Hosts列表</h3><p>由于两台虚拟机是同一台虚拟机复制而来，所以必须先重新生成Mac地址</p>
<img src="/posts/ec060e02/image-20200930135951474.png" class="" title="image-20200930135951474">

<blockquote>
<p>master 和 slave 禁用防火墙</p>
</blockquote>
<p>停止防火墙 </p>
<pre class="line-numbers language-shell"><code class="language-shell">systemctl stop firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>禁用防火墙</p>
<pre class="line-numbers language-shell"><code class="language-shell">systemctl disable firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200913225928453.png" class="" title="image-20200913225928453">

<blockquote>
<p>master 和 slave 修改主机名</p>
</blockquote>
<pre class="line-numbers language-she"><code class="language-she">vi /etc/sysconfig/network<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200913230804529.png" class="" title="image-20200913230804529">

<img src="/posts/ec060e02/image-20200913230917724.png" class="" title="image-20200913230917724">

<blockquote>
<p>确认修改</p>
</blockquote>
<img src="/posts/ec060e02/image-20200913231003539.png" class="" title="image-20200913231003539">

<img src="/posts/ec060e02/image-20200913231047961.png" class="" title="image-20200913231047961">

<blockquote>
<p>master 和 slave 执行 ifconfig 查询 IP</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">ifconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200914215339951.png" class="" title="image-20200914215339951">

<img src="/posts/ec060e02/image-20200914215731073.png" class="" title="image-20200914215731073">

<blockquote>
<p> master 和 slave 将IP地址和主机名分别添加至/etc/hosts中</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">vi /etc/hosts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200914215942690.png" class="" title="image-20200914215942690">

<blockquote>
<p>master 和 slave 之间互ping</p>
</blockquote>
<img src="/posts/ec060e02/image-20200914220102245.png" class="" title="image-20200914220102245">

<img src="/posts/ec060e02/image-20200914220213547.png" class="" title="image-20200914220213547">



<h3 id="3-集群ssh免密登录"><a href="#3-集群ssh免密登录" class="headerlink" title="3. 集群ssh免密登录"></a>3. 集群ssh免密登录</h3><p>对master操作：</p>
<blockquote>
<p>master 生成公钥</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">ssh-keygen -t rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200914220829338.png" class="" title="image-20200914220829338">

<blockquote>
<p>将公钥追加到授权列表</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200914221008829.png" class="" title="image-20200914221008829">

<blockquote>
<p>修改authorized_keys文件的权限</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">chmod 600 ~/.ssh/authorized_keys <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200914221036706.png" class="" title="image-20200914221036706">

<blockquote>
<p>将authorized_keys文件复制到slave节点</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">scp ~/.ssh/authorized_keys parak@slave:~/.ssh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200914221427275.png" class="" title="image-20200914221427275">

<blockquote>
<p>查看slave的.ssh的目录</p>
</blockquote>
<img src="/posts/ec060e02/image-20200914221514758.png" class="" title="image-20200914221514758">

<blockquote>
<p>修改master和slave的SSH配置</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">su root
vi /etc/ssh/sshd_config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200914221856072.png" class="" title="image-20200914221856072">

<blockquote>
<p>使用ssh-add指令将私钥加入并重启sshd服务</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">ssh-add ~/.ssh/id_rsa
service sshd restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<blockquote>
<p>测试免密登录</p>
</blockquote>
<img src="/posts/ec060e02/image-20200914223950719.png" class="" title="image-20200914223950719">

<p>ssh登录依然需要密码，我们可以去看一下master的日志文件</p>
<blockquote>
<p>cat  var/log/secure </p>
</blockquote>
<img src="/posts/ec060e02/image-20200916160625256.png" class="" title="image-20200916160625256">

<blockquote>
<p><strong>原因</strong></p>
<p>sshd为了安全，对属主的目录和文件权限有所要求。</p>
<p>如果权限不对，则ssh的免密码登陆不生效。</p>
</blockquote>
<blockquote>
<p><strong>解决</strong></p>
<p>将.ssh目录的权限改为755</p>
<p>id_rsa.pub和authorized_keys权限改为644</p>
<p>id_rsa权限必须为600</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">chmod 755 .ssh
cd .ssh
chmod 644 id_rsa.pub authorized_keys
chmod 600 id_rsa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>再次测试免密登录</p>
</blockquote>
<img src="/posts/ec060e02/image-20200914224837430.png" class="" title="image-20200914224837430">



<h3 id="4-下载并配置Hadoop"><a href="#4-下载并配置Hadoop" class="headerlink" title="4. 下载并配置Hadoop"></a>4. 下载并配置Hadoop</h3><blockquote>
<p>下载：<a href="https://www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-3.3.0/hadoop-3.3.0.tar.gz">hadoop-2.9.2</a>    选择bsfu的北京外国语学院的镜像, 速度流批</p>
</blockquote>
<img src="/posts/ec060e02/image-20200914211714263.png" class="" title="image-20200914211714263">

<blockquote>
<p>解压下载的压缩包</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">tar -zxvf hadoop-2.3.2.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200914211633182.png" class="" title="image-20200914211633182">

<blockquote>
<p>修改文件权限</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">chmod 777 hadoop-env.sh core-site.xml hdfs-site.xml yarn-site.xml mapred-site.xml slaves<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200914212318855.png" class="" title="image-20200914212318855">

<blockquote>
<p>配置环境变量</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">gedit /home/parak/hadoop/hadoop-2.9.2/etc/hadoop/hadoop-env.sh

添加
export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el7_8.x86_64
export HADOOP_HOME=/home/parak/hadoop/hadoop-2.9.2
export PATH=$&#123;JAVA_HOME&#125;/bin:$&#123;HADOOP_HOME&#125;/bin:$&#123;HADOOP_HOME&#125;/sbin:$PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>配置核心组件  <strong><em>core-site.xml</em></strong></p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?></span>
<span class="token comment" spellcheck="true">&lt;!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License. See accompanying LICENSE file.
--></span>

<span class="token comment" spellcheck="true">&lt;!-- Put site-specific property overrides in this file. --></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://master:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/home/parak/hadoopdata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200914213003704.png" class="" title="image-20200914213003704">

<blockquote>
<p>配置文件系统  <strong><em>hdfs.site.xml</em></strong></p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?></span>
<span class="token comment" spellcheck="true">&lt;!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License. See accompanying LICENSE file.
--></span>

<span class="token comment" spellcheck="true">&lt;!-- Put site-specific property overrides in this file. --></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200914213047280.png" class="" title="image-20200914213047280">

<blockquote>
<p>配置文件系统  <strong><em>yarn-site.xml</em></strong></p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span>
<span class="token comment" spellcheck="true">&lt;!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License. See accompanying LICENSE file.
--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- Site specific YARN configuration properties --></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.aux-services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>mapreduce_shuffle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master:18040<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.scheduler.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master:18030<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.resource-tracker.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master:18025<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.admin.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master:18141<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.webapp.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master:18088<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200914213215770.png" class="" title="image-20200914213215770">

<blockquote>
<p>配置计算框架  <strong><em>mapred-site.xml</em></strong></p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell"><?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
<!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License. See accompanying LICENSE file.
-->

<!-- Put site-specific property overrides in this file. -->

<configuration>
    <property>
        <name>mapreduce.framework.name</name>
        <value>yarn</value>
    </property>
</configuration><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200914213254714.png" class="" title="image-20200914213254714">

<blockquote>
<p>在master节点配置slaves文件 </p>
</blockquote>
<img src="/posts/ec060e02/image-20200914225547865.png" class="" title="image-20200914225547865">



<h3 id="5-启动Hadoo集群"><a href="#5-启动Hadoo集群" class="headerlink" title="5. 启动Hadoo集群"></a>5. 启动Hadoo集群</h3><blockquote>
<p>切换用户  <strong><em>parak</em></strong></p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">su parak<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>配置Hadoop启动的系统环境变量</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">cd
gedit ~/.bash_profile

添加：
#HADOOP
export HADOOP_HOME=/home/parak/hadoop/hadoop-2.9.2
export PATH=$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$PATH

执行：
source ~/.bash_profile

验证：
echo $&#123;HADOOP_HOME&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200914213558226.png" class="" title="image-20200914213558226">

<img src="/posts/ec060e02/image-20200914230053210.png" class="" title="image-20200914230053210">

<blockquote>
<p>创建数据目录  <strong><em>hadoopdata</em></strong></p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">mkdir /home/parak/hadoopdata
chmod 777 hadoopdata/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200914225858363.png" class="" title="image-20200914225858363">

<blockquote>
<p>格式化文件系统</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">hdfs namenode -format<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200914230347627.png" class="" title="image-20200914230347627">

<img src="/posts/ec060e02/image-20200914230450.png" class="" title="image-20200914230450">

<blockquote>
<p>启动Hadoop</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">sbin/start-all.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200914232331519.png" class="" title="image-20200914232331519">

<blockquote>
<p>查看进程</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">jps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200914232056642.png" class="" title="image-20200914232056642">

<img src="/posts/ec060e02/image-20200914232211741.png" class="" title="image-20200914232211741">



<blockquote>
<p>进入 <strong>FireFox</strong> 输入：<a href="http://master:50070/">http://master:50070/</a>   </p>
<p>检查 <strong>namenode</strong> 和 <strong>datanode</strong> 是否正常</p>
</blockquote>
<img src="/posts/ec060e02/image-20200914232603284.png" class="" title="image-20200914232603284">



<blockquote>
<p>进入 <strong>FireFox</strong> 输入：<a href="http://master:18088/">http://master:18088/</a></p>
<p>检查 <strong>Yarn</strong> 是否正常</p>
</blockquote>
<img src="/posts/ec060e02/image-20200914232824073.png" class="" title="image-20200914232824073">



<blockquote>
<p>运行PI实例检查Hadoop集群是否搭建成功</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">cd ~/hadoop/hadoop-2.9.2/share/hadoop/mapreduce/
hadoop jar hadoop-mapreduce-examples-2.9.2.jar pi 10 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200915083538083.png" class="" title="image-20200915083538083">

<blockquote>
<p> <strong>报错</strong>：未找到主机路由</p>
<p><strong>分析</strong>：slave的防火墙没有关闭</p>
</blockquote>
<blockquote>
<p>检查slave的防火墙</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">systemctl status firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200915084136061.png" class="" title="image-20200915084136061">

<blockquote>
<p>关闭且禁用防火墙</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">systemctl stop firewalld
systemctl disable firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200915084354244.png" class="" title="image-20200915084354244">

<blockquote>
<p>再次运行PI实例</p>
</blockquote>
<img src="/posts/ec060e02/image-20200915084909905.png" class="" title="image-20200915084909905">

<img src="/posts/ec060e02/image-20200915084933355.png" class="" title="image-20200915084933355">

<p>可以看到运行结果：PI = 3.20000000000000000000</p>
<p><strong>综上，集群正常启动</strong></p>
<blockquote>
<p>关闭Hadoop集群</p>
</blockquote>
<img src="/posts/ec060e02/image-20200915085606053.png" class="" title="image-20200915085606053">





<h2 id="3-分布式文件系统HDFS上的操作"><a href="#3-分布式文件系统HDFS上的操作" class="headerlink" title="3. 分布式文件系统HDFS上的操作"></a>3. 分布式文件系统HDFS上的操作</h2><h3 id="1-利用Shell命令与HDFS进行交互"><a href="#1-利用Shell命令与HDFS进行交互" class="headerlink" title="1. 利用Shell命令与HDFS进行交互"></a>1. 利用Shell命令与HDFS进行交互</h3><pre class="line-numbers language-shell"><code class="language-shell">hadoop fs    //适用于任何不同的文件系统，比如本地文件系统和HDFS文件系统
hadoop dfa   //只能适用于HDFS文件系统
hdfs dfs     //跟hadoop dfs的命令作用一样，也只能适用于HDFS文件系统<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200915091307833.png" class="" title="image-20200915091307833">

<pre class="line-numbers language-shell"><code class="language-shell">hadoop fs -help put<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200915091423474.png" class="" title="image-20200915091423474">



<h4 id="1-目录操作"><a href="#1-目录操作" class="headerlink" title="(1) 目录操作"></a>(1) 目录操作</h4><blockquote>
<p>在HDFS中为parak用户创建一个用户目录，命令如下：</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">hadoop fs -mkdir -p /user/parak<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>可以使用如下命令显示HDFS中/user目录下的内容：</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">hadoop fs -ls /user<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200915091936795.png" class="" title="image-20200915091936795">

<blockquote>
<p>创建/user/parak/input目录</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">hadoop fs -mkdir -p /user/parak/input<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>查看/user/parak/input目录是否创建成功</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">hadoop fs -ls /user/parak<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200915094202790.png" class="" title="image-20200915094202790">

<blockquote>
<p>创建/input目录</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">hadoop fs -mkdir -p /input<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>删除/input目录</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell"> hadoop fs -rm -r /input<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>查看/input目录是否删除成功</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">hadoop fs -ls /<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200915094415033.png" class="" title="image-20200915094415033">



<h4 id="2-文件操作"><a href="#2-文件操作" class="headerlink" title="(2) 文件操作"></a>(2) 文件操作</h4><p>​       在实际应用中，经常需要从本地文件系统向HDFS中上传文件，或者把HDFS中的文件下载到本地文件系统中。</p>
<blockquote>
<p>首先，使用vim编辑器，在本地Linux文件系统的“/home/parak/”目录下创建一个文件myLocalFile.txt，里面输入：</p>
</blockquote>
<pre class="line-numbers language-text"><code class="language-text">Hadoop
MapReduce
Spark
Khighness<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>然后，把本地文件系统的“/home/parak/myLocalFile.txt”上传到HDFS中的当前用户目录的input目录下，也就是上传到HDFS的“/user/parak/input/”目录下：</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">hadoop fs -put /home/parak/myLocalFile.txt /user/parak/input<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>查看一下文件是否成功上传到HDFS中：</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">hadoop fs -ls /user/parak/input<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>查看HDFS中的myLocalFile.txt这个文件的内容</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">hadoop fs -cat /user/parak/input/myLocalFile.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200915094905208.png" class="" title="image-20200915094905208">

<blockquote>
<p>把HDFS中的myLocalFile.txt文件下载到本地文件系统中的“/home/parak/下载/”这个目录下</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">hadoop fs -get /user/parak/input/myLocalFile.txt /home/parak/下载<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>在本地查看下载下来的文件myLocalFile.txt</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">cd 下载
ll
cat myLocalFile.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200915100241999.png" class="" title="image-20200915100241999">

<blockquote>
<p>把HDFS的“/user/parak/input/myLocalFile.txt”文件，拷贝到HDFS的另外一个目录“/input”中</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">hadoop fs -mkdir /input
hadoop fs -cp /user/parak/input/myLocalFile.txt /input<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200915100148440.png" class="" title="image-20200915100148440">



<h3 id="2-利用Web界面管理HDFS"><a href="#2-利用Web界面管理HDFS" class="headerlink" title="2. 利用Web界面管理HDFS"></a>2. 利用Web界面管理HDFS</h3><blockquote>
<p>在本机Chorme输入 <a href="http://192.168.117.141:50070/">http://192.168.117.141:50070</a> , 即可看到HDFS的Web管理界面</p>
</blockquote>
<img src="/posts/ec060e02/image-20200915093904228.png" class="" title="image-20200915093904228">





<h2 id="4-分布式文件系统HDFS上的编程实践"><a href="#4-分布式文件系统HDFS上的编程实践" class="headerlink" title="4. 分布式文件系统HDFS上的编程实践"></a>4. 分布式文件系统HDFS上的编程实践</h2><h3 id="1-安装Eclipse"><a href="#1-安装Eclipse" class="headerlink" title="1. 安装Eclipse"></a>1. 安装Eclipse</h3><h4 id="1-官网下载安装包"><a href="#1-官网下载安装包" class="headerlink" title="(1) 官网下载安装包"></a>(1) 官网下载安装包</h4><blockquote>
<p>进入FireFox打开下载: <a href="http://www.eclipse.org/downloads/packages/release/neon/1a/eclipse-ide-java-ee-developers">eclipe</a></p>
</blockquote>
<img src="/posts/ec060e02/image-20200915190751901.png" class="" title="image-20200915190751901">

<blockquote>
<p>或者</p>
<p>百度网盘下载</p>
<p>链接: <a href="https://pan.baidu.com/s/1P4vDgBEj_eOSakabM93rew">https://pan.baidu.com/s/1P4vDgBEj_eOSakabM93rew</a></p>
<p>密码: eujp</p>
</blockquote>
<h4 id="2-解压安装包"><a href="#2-解压安装包" class="headerlink" title="(2) 解压安装包"></a>(2) 解压安装包</h4><pre class="line-numbers language-shell"><code class="language-shell">tar xzvf eclipse-inst-linux64.tar.gz 
cd eclipse-installer/
ll<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200915191250751.png" class="" title="image-20200915191250751">

<img src="/posts/ec060e02/image-20200915191446018.png" class="" title="image-20200915191446018">

<h4 id="3-安装Eclipse-For-JavaEE"><a href="#3-安装Eclipse-For-JavaEE" class="headerlink" title="(3) 安装Eclipse For JavaEE"></a>(3) 安装Eclipse For JavaEE</h4><pre class="line-numbers language-shell"><code class="language-shell">eclipse-inst.ini<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200915191721107.png" class="" title="image-20200915191721107.png">

<img src="/posts/ec060e02/image-20200915191841247.png" class="" title="image-20200915191841247.png">

<img src="/posts/ec060e02/image-20200915192946961.png" class="" title="image-20200915192946961.png">



<h4 id="4-创建桌面快捷方式"><a href="#4-创建桌面快捷方式" class="headerlink" title="(4) 创建桌面快捷方式"></a>(4) 创建桌面快捷方式</h4><blockquote>
<p>1、切换root身份：su root</p>
<p>2、进入usr/share/applications目录：cd /usr/share/applications</p>
<p>3、创建eclipase.desktop文件：touch eclipase.desktop</p>
<p>4、输入以下内容后保存：vi eclipase.desktop</p>
<p>5、最后将快捷方式复制到桌面，并添加信任即可</p>
</blockquote>
<pre class="line-numbers language-desktop"><code class="language-desktop">[Desktop Entry]
Name=Eclipse
Exec=/home/parak/eclipse/eclipse-j2e/eclipse/eclipse
Type=Application
Icon=/home/parak/eclipse/eclipse-j2e/eclipse/icon.xpm
Terminal=false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200915195019210.png" class="" title="image-20200915195019210">



<h3 id="2-创建eclipse工程"><a href="#2-创建eclipse工程" class="headerlink" title="2. 创建eclipse工程"></a>2. 创建eclipse工程</h3><blockquote>
<p>双击eclipse桌面快捷方式</p>
</blockquote>
<img src="/posts/ec060e02/image-20200915195625107.png" class="" title="image-20200915195625107">

<blockquote>
<p>进入eclipseIDE</p>
</blockquote>
<img src="/posts/ec060e02/image-20200915195720416.png" class="" title="image-20200915195720416">

<blockquote>
<p>点击：File —&gt; Project —&gt; Java Project</p>
</blockquote>
<img src="/posts/ec060e02/image-20200915200231455.png" class="" title="image-20200915200231455">

<blockquote>
<p>设置JRE</p>
</blockquote>
<img src="/posts/ec060e02/image-20200915200448059.png" class="" title="image-20200915200448059">

<blockquote>
<p>添加JAR</p>
</blockquote>
<ul>
<li><strong>/home/parak/hadoop/hadoop-2.9.2/share/hadoop/common/</strong>:  <strong>hadoop-common-2.9.2.jar</strong>和<strong>hadoop-nfs-2.9.2.jar</strong></li>
<li><strong>/home/parak/hadoop/hadoop-2.9.2/share/hadoop/common/</strong>:  <strong>lib</strong>目录下的所有jar包</li>
<li><strong>/home/parak/hadoop/hadoop-2.9.2/share/hadoop/hdfs/</strong>:  <strong>hadoop-hdfs-2.9.2.jar</strong>和<strong>hadoop-hdfs-nfs-2.9.2.jar</strong></li>
<li><strong>/home/parak/hadoop/hadoop-2.9.2/share/hadoop/hdfs/</strong>:  <strong>lib</strong>目录下的所有jar包</li>
</ul>
<img src="/posts/ec060e02/image-20200915202106984.png" class="" title="image-20200915202106984">

<blockquote>
<p>点击Finish，点击Open Perspective，并且勾选Remember my decision</p>
</blockquote>
<img src="/posts/ec060e02/image-20200915202239806.png" class="" title="image-20200915202239806">

<img src="/posts/ec060e02/image-20200915202452808.png" class="" title="image-20200915202452808">



<h3 id="3-编写一个Java应用程序检测HDFS中是否存在一个文件"><a href="#3-编写一个Java应用程序检测HDFS中是否存在一个文件" class="headerlink" title="3. 编写一个Java应用程序检测HDFS中是否存在一个文件"></a>3. 编写一个Java应用程序检测HDFS中是否存在一个文件</h3><h4 id="1-编写Java程序"><a href="#1-编写Java程序" class="headerlink" title="(1) 编写Java程序"></a>(1) 编写Java程序</h4><blockquote>
<p>右击HDFSExample —&gt; New —&gt; Class</p>
</blockquote>
<img src="/posts/ec060e02/image-20200915203644447.png" class="" title="image-20200915203644447">

<blockquote>
<p>Name = HDFSFileIfExist，然后Finish</p>
</blockquote>
<img src="/posts/ec060e02/image-20200915203811679.png" class="" title="image-20200915203811679">

<blockquote>
<p>编写代码</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>FileSystem<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>Path<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author parak
 * @date   2020-9-15 
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HDFSFileIfExist</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            String fileName <span class="token operator">=</span> <span class="token string">"/user/parak/input/myLocalFile.txt"</span><span class="token punctuation">;</span>
            Configuration conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            conf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"fs.defaultFS"</span><span class="token punctuation">,</span> <span class="token string">"hdfs://master:9000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            conf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"fs.hdfs.impl"</span><span class="token punctuation">,</span> <span class="token string">"org.apache.hadoop.hdfs.DistributedFileSystem"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            FileSystem fs <span class="token operator">=</span> FileSystem<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="2-运行程序"><a href="#2-运行程序" class="headerlink" title="(2) 运行程序"></a>(2) 运行程序</h4><blockquote>
<p>启动Hadoop集群</p>
</blockquote>
<img src="/posts/ec060e02/image-20200915204824967.png" class="" title="image-20200915204824967">

<blockquote>
<p>运行程序</p>
</blockquote>
<img src="/posts/ec060e02/image-20200915205051079.png" class="" title="image-20200915205051079">

<blockquote>
<p>运行结果</p>
</blockquote>
<img src="/posts/ec060e02/image-20200915205218013.png" class="" title="image-20200915205218013">

<h4 id="3-部署到Hadoop平台上运行"><a href="#3-部署到Hadoop平台上运行" class="headerlink" title="(3) 部署到Hadoop平台上运行"></a>(3) 部署到Hadoop平台上运行</h4><blockquote>
<p>在hadoop安装目录下新建myapp目录，存放Hadoop应用程序</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">mkdir ~/hadoop/hadoop-2.9.2/myapp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200915205811634.png" class="" title="image-20200915205811634">

<blockquote>
<p>右击HDFSExample —&gt; Export —&gt; Java —&gt; Runnable JAR file —&gt; Next</p>
</blockquote>
<img src="/posts/ec060e02/image-20200915210022617.png" class="" title="image-20200915210022617">

<blockquote>
<p>Lauch configuration: HDFSFileIfExist -HDFSExsmple</p>
<p>Export destination: /home/parak/hadoop/hadoop-2.9.2/myapp/HDFSExample.jar</p>
</blockquote>
<img src="/posts/ec060e02/image-20200915210640358.png" class="" title="image-20200915210640358">

<blockquote>
<p>出现警告，选择OK</p>
</blockquote>
<img src="/posts/ec060e02/image-20200915210911473.png" class="" title="image-20200915210911473">

<img src="/posts/ec060e02/image-20200915211215820.png" class="" title="image-20200915211215820">

<blockquote>
<p>查看myapp中生成的HDFSExample.jar文件</p>
</blockquote>
<img src="/posts/ec060e02/image-20200915211618901.png" class="" title="image-20200915211618901">

<blockquote>
<p>运行程序</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">java -jar ~/hadoop/hadoop-2.9.2/myapp/HDFSExample.jar <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200915211802010.png" class="" title="image-20200915211802010">



<h3 id="4-编写一个Java应用程序读-写HDFS文件"><a href="#4-编写一个Java应用程序读-写HDFS文件" class="headerlink" title="4. 编写一个Java应用程序读/写HDFS文件"></a>4. 编写一个Java应用程序读/写HDFS文件</h3><h4 id="1-读取HDFS文件程序"><a href="#1-读取HDFS文件程序" class="headerlink" title="(1) 读取HDFS文件程序"></a>(1) 读取HDFS文件程序</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>Path<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>FSDataInputStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>FileSystem<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author parak
 * @date 2020-9-15
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HDFSReadFile</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            Configuration conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            conf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"fs.defaultFS"</span><span class="token punctuation">,</span> <span class="token string">"hdfs://master:9000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            conf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"fs.hdfs.impl"</span><span class="token punctuation">,</span>
                    <span class="token string">"org.apache.hadoop.hdfs.DistributedFileSystem"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            FileSystem fs <span class="token operator">=</span> FileSystem<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>
            Path file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"/user/parak/input/myLocalFile.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            FSDataInputStream getIt <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
            BufferedReader d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>getIt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            String content <span class="token operator">=</span> null<span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>content <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            d<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 关闭文件</span>
            fs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 关闭hdfs</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>运行</p>
</blockquote>
<img src="/posts/ec060e02/image-20200915213406899.png" class="" title="image-20200915213406899">

<h4 id="2-写HDFS文件程序"><a href="#2-写HDFS文件程序" class="headerlink" title="(2) 写HDFS文件程序"></a>(2) 写HDFS文件程序</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>FileSystem<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>FSDataOutputStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>Path<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
* @author parak
* @date 2020-9-15
*/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HDFSWriteFile</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
       <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
           Configuration conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           conf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"fs.defaultFS"</span><span class="token punctuation">,</span> <span class="token string">"hdfs://master:9000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           conf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"fs.hdfs.impl"</span><span class="token punctuation">,</span>
                   <span class="token string">"org.apache.hadoop.hdfs.DistributedFileSystem"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           FileSystem fs <span class="token operator">=</span> FileSystem<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>conf<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token string">"Hello, Khighness"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 要写入的内容</span>
           String filename <span class="token operator">=</span> <span class="token string">"/user/parak/test.txt"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 要写入的文件名</span>
           FSDataOutputStream os <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> buff<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Create:"</span> <span class="token operator">+</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
           os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           fs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>运行</p>
</blockquote>
<img src="/posts/ec060e02/image-20200915213012019.png" class="" title="image-20200915213012019">



<h2 id="5-Eclipse上的HDFS操作"><a href="#5-Eclipse上的HDFS操作" class="headerlink" title="5. Eclipse上的HDFS操作"></a>5. Eclipse上的HDFS操作</h2><h3 id="1-安装Hadoop-Eclipse-Plugin"><a href="#1-安装Hadoop-Eclipse-Plugin" class="headerlink" title="1. 安装Hadoop-Eclipse-Plugin"></a>1. 安装Hadoop-Eclipse-Plugin</h3><p>(1) 下载相关插件：<a href="https://github.com/winghc/hadoop2x-eclipse-plugin">hadoop-eclipse-plugin</a></p>
<img src="/posts/ec060e02/image-20200922203150692.png" class="" title="image-20200922203150692">

<p>我是vpn下载下来的，分享一下：</p>
<blockquote>
<p>完整包</p>
<p>网盘链接：<a href="https://pan.baidu.com/s/1Q72HyCSUnh-Q0JRQK03Jjg">https://pan.baidu.com/s/1Q72HyCSUnh-Q0JRQK03Jjg</a></p>
<p>提取码：kkkk</p>
<p>插件包</p>
<p>网盘链接：<a href="https://pan.baidu.com/s/1dfBm7JB4ZXTR3bwF7PSaKA">https://pan.baidu.com/s/1dfBm7JB4ZXTR3bwF7PSaKA</a></p>
<p>提取码：kkkk</p>
</blockquote>
<img src="/posts/ec060e02/image-20200922222447098.png" class="" title="image-20200922222447098">



<p>(2) 下载后将release中的<code>hadoop-eclipse-plugin-2.6.0.jar</code>复制到 Eclipse 安装目录的 plugins 文件夹中</p>
<img src="/posts/ec060e02/image-20200922223813270.png" class="" title="image-20200922223813270">

<p>(3) 运行 <code>eclipse-clean</code> 重启 Eclipse</p>
<h3 id="2-配置Hadoop-Eclipse-Plugin"><a href="#2-配置Hadoop-Eclipse-Plugin" class="headerlink" title="2. 配置Hadoop-Eclipse-Plugin"></a>2. 配置Hadoop-Eclipse-Plugin</h3><p>配置前开启Hadoop</p>
<img src="/posts/ec060e02/image-20200928131439434.png" class="" title="image-20200928131439434">

<p>(1) 切换到“Map/Reduce”开发视图</p>
<img src="/posts/ec060e02/image-20200928131546990.png" class="" title="image-20200928131546990">



<p>(2) 建立与Hadoop集群的连接</p>
<img src="/posts/ec060e02/image-20200928131720837.png" class="" title="image-20200928131720837">

<p>(3) 填写Hadoop连接配置</p>
<img src="/posts/ec060e02/image-20200928131907971.png" class="" title="image-20200928131907971">



<h3 id="3-在Eclipse中操作HDFS中的文件"><a href="#3-在Eclipse中操作HDFS中的文件" class="headerlink" title="3. 在Eclipse中操作HDFS中的文件"></a>3. 在Eclipse中操作HDFS中的文件</h3><p>点击左侧DFS Locations即可查看HDFS的文件列表</p>
<img src="/posts/ec060e02/image-20200928132219334.png" class="" title="image-20200928132219334">



<h2 id="6-在Eclipse中运行”Wold-Count”MapReduce程序"><a href="#6-在Eclipse中运行”Wold-Count”MapReduce程序" class="headerlink" title="6. 在Eclipse中运行”Wold Count”MapReduce程序"></a>6. 在Eclipse中运行”Wold Count”MapReduce程序</h2><h3 id="1-在Eclipse中创建”WordCount”MapReduce项目"><a href="#1-在Eclipse中创建”WordCount”MapReduce项目" class="headerlink" title="1. 在Eclipse中创建”WordCount”MapReduce项目"></a>1. 在Eclipse中创建”WordCount”MapReduce项目</h3><blockquote>
<p>选择File -&gt; New -&gt; Project -&gt; Map/Reduce Project</p>
</blockquote>
<img src="/posts/ec060e02/image-20200928133415156.png" class="" title="image-20200928133415156">

<blockquote>
<p>项目名称=MyWordCount，然后Configure Hadoop install directory -&gt; Finish</p>
</blockquote>
<img src="/posts/ec060e02/image-20200928133508525.png" class="" title="image-20200928133508525">

<blockquote>
<p>新建Java文件，name = WordCountTest</p>
</blockquote>
<img src="/posts/ec060e02/image-20200928134118935.png" class="" title="image-20200928134118935">

<blockquote>
<p>代码如下</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StringTokenizer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>Path<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IntWritable<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Text<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Job<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Mapper<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Reducer<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>input<span class="token punctuation">.</span>FileInputFormat<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>output<span class="token punctuation">.</span>FileOutputFormat<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>util<span class="token punctuation">.</span>GenericOptionsParser<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author parak
 * @date   2020-9-28
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordCountTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">WordCountTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Configuration conf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String<span class="token punctuation">[</span><span class="token punctuation">]</span> otherArgs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericOptionsParser</span><span class="token punctuation">(</span>conf<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRemainingArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>otherArgs<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Usage: wordcount &lt;in> [&lt;in>...] &lt;out>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        Job job <span class="token operator">=</span> Job<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>conf<span class="token punctuation">,</span> <span class="token string">"word count test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        job<span class="token punctuation">.</span><span class="token function">setJarByClass</span><span class="token punctuation">(</span>WordCountTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        job<span class="token punctuation">.</span><span class="token function">setMapperClass</span><span class="token punctuation">(</span>WordCountTest<span class="token punctuation">.</span>TokenizerMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        job<span class="token punctuation">.</span><span class="token function">setCombinerClass</span><span class="token punctuation">(</span>WordCountTest<span class="token punctuation">.</span>IntSumReducer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        job<span class="token punctuation">.</span><span class="token function">setReducerClass</span><span class="token punctuation">(</span>WordCountTest<span class="token punctuation">.</span>IntSumReducer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        job<span class="token punctuation">.</span><span class="token function">setOutputKeyClass</span><span class="token punctuation">(</span>Text<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        job<span class="token punctuation">.</span><span class="token function">setOutputValueClass</span><span class="token punctuation">(</span>IntWritable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> otherArgs<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            FileInputFormat<span class="token punctuation">.</span><span class="token function">addInputPath</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>otherArgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        FileOutputFormat<span class="token punctuation">.</span><span class="token function">setOutputPath</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>otherArgs<span class="token punctuation">[</span>otherArgs<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>job<span class="token punctuation">.</span><span class="token function">waitForCompletion</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">IntSumReducer</span> <span class="token keyword">extends</span> <span class="token class-name">Reducer</span><span class="token operator">&lt;</span>Text<span class="token punctuation">,</span> IntWritable<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> IntWritable<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> IntWritable result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token function">IntSumReducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reduce</span><span class="token punctuation">(</span>Text key<span class="token punctuation">,</span> Iterable<span class="token operator">&lt;</span>IntWritable<span class="token operator">></span> values<span class="token punctuation">,</span> Reducer<span class="token operator">&lt;</span>Text<span class="token punctuation">,</span> IntWritable<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> IntWritable<span class="token operator">></span><span class="token punctuation">.</span>Context context<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

            IntWritable val<span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span>Iterator itr <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> itr<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> sum <span class="token operator">+=</span> val<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                val <span class="token operator">=</span> <span class="token punctuation">(</span>IntWritable<span class="token punctuation">)</span>itr<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

            <span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
            context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TokenizerMapper</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> IntWritable<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> IntWritable one <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntWritable</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> Text word <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token function">TokenizerMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">map</span><span class="token punctuation">(</span>Object key<span class="token punctuation">,</span> Text value<span class="token punctuation">,</span> Mapper<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> IntWritable<span class="token operator">></span><span class="token punctuation">.</span>Context context<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            StringTokenizer itr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTokenizer</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">while</span><span class="token punctuation">(</span>itr<span class="token punctuation">.</span><span class="token function">hasMoreTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>word<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>itr<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>word<span class="token punctuation">,</span> one<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-添加log4j-properties配置文件到src目录下"><a href="#2-添加log4j-properties配置文件到src目录下" class="headerlink" title="2. 添加log4j.properties配置文件到src目录下"></a>2. 添加log4j.properties配置文件到src目录下</h3><blockquote>
<p>新建文件</p>
</blockquote>
<img src="/posts/ec060e02/image-20200928205438905.png" class="" title="image-20200928205438905">

<blockquote>
<p>内容如下</p>
</blockquote>
<pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">log4j.rootLogger</span> <span class="token punctuation">=</span> <span class="token attr-value">INFO,KAG,CONSOLE</span>

<span class="token attr-name">log4j.appender.KAG.Threshold</span><span class="token punctuation">=</span><span class="token attr-value">INFO</span>
<span class="token attr-name">log4j.appender.KAG.encoding</span><span class="token punctuation">=</span><span class="token attr-value">UTF-8</span>

<span class="token attr-name">log4j.appender.KAG</span> <span class="token punctuation">=</span> <span class="token attr-value">org.apache.log4j.DailyRollingFileAppender</span>
<span class="token attr-name">log4j.appender.KAG.File</span><span class="token punctuation">=</span><span class="token attr-value">log/sHadoop.log</span>
<span class="token attr-name">log4j.appender.KAG.ImmediateFlush</span><span class="token punctuation">=</span><span class="token attr-value">true</span>
<span class="token attr-name">log4j.appender.KAG.DatePattern</span><span class="token punctuation">=</span><span class="token attr-value">'_'yyyy-MM-dd</span>
<span class="token attr-name">log4j.appender.KAG.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.PatternLayout</span>
<span class="token attr-name">log4j.appender.KAG.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">%-d&amp;#123;yyyy-MM-dd HH:mm:ss&amp;#125; KAG %-5p [%c] - %m%n</span>

<span class="token attr-name">log4j.appender.CONSOLE</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.ConsoleAppender</span>
<span class="token attr-name">log4j.appender.Threshold</span><span class="token punctuation">=</span><span class="token attr-value">INFO</span>

<span class="token attr-name">log4j.appender.CONSOLE.Target</span><span class="token punctuation">=</span><span class="token attr-value">System.out</span>
<span class="token attr-name">log4j.appender.CONSOLE.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.PatternLayout</span>
<span class="token attr-name">log4j.appender.CONSOLE.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">%-d&amp;#123;yyyy-MM-dd HH:mm:ss&amp;#125; KAG %-5p [%c] - %m%n</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="3-通过Eclipse运行“MyWordCount”-MapReduce项目"><a href="#3-通过Eclipse运行“MyWordCount”-MapReduce项目" class="headerlink" title="3. 通过Eclipse运行“MyWordCount” MapReduce项目"></a>3. 通过Eclipse运行“MyWordCount” MapReduce项目</h3><blockquote>
<p>更改运行配置</p>
</blockquote>
<img src="/posts/ec060e02/image-20200928183606296.png" class="" title="image-20200928183606296"> 

<blockquote>
<p>运行结果</p>
</blockquote>
<img src="/posts/ec060e02/image-20200928184930876.png" class="" title="image-20200928184930876">

<img src="/posts/ec060e02/image-20200928184947160.png" class="" title="image-20200928184947160">

<blockquote>
<p>查看/user/parak/output目录，和目录下的文件</p>
</blockquote>
<img src="/posts/ec060e02/image-20200928185257730.png" class="" title="image-20200928185257730">

<blockquote>
<p>重启Eclipse，在Eclipse中查看HDFS文件系统，/user/parak/output</p>
</blockquote>
<img src="/posts/ec060e02/image-20200928185548345.png" class="" title="image-20200928185548345">



<h3 id="4-在Hadoop平台上部署WordCount程序"><a href="#4-在Hadoop平台上部署WordCount程序" class="headerlink" title="4. 在Hadoop平台上部署WordCount程序"></a>4. 在Hadoop平台上部署WordCount程序</h3><blockquote>
<p>右键 WordCountTest —&gt; Export</p>
</blockquote>
<img src="/posts/ec060e02/image-20200928205719777.png" class="" title="image-20200928205719777">

<blockquote>
<p>选择 Java —&gt; Runnable JAR File —&gt; Next</p>
</blockquote>
<img src="/posts/ec060e02/image-20200928205756522.png" class="" title="image-20200928205756522">

<blockquote>
<p>填入内容：</p>
<p>Lauch configuration: WordCountTest - MyWordCount</p>
<p>Export destination: /home/parak/hadoop/hadoop-2.9.2/myapp/WordCount.jar</p>
<p>然后Finish即可</p>
</blockquote>
<img src="/posts/ec060e02/image-20200928210235072.png" class="" title="image-20200928210235072">

<blockquote>
<p>运行程序</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java">java <span class="token operator">-</span>jar <span class="token operator">/</span>home<span class="token operator">/</span>parak<span class="token operator">/</span>hadoop<span class="token operator">/</span>hadoop<span class="token operator">-</span><span class="token number">2.9</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token operator">/</span>myapp<span class="token operator">/</span>WordCount<span class="token punctuation">.</span>jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="7-统计某电商网站买家收藏商品数量"><a href="#7-统计某电商网站买家收藏商品数量" class="headerlink" title="7. 统计某电商网站买家收藏商品数量"></a>7. 统计某电商网站买家收藏商品数量</h2><p><strong>要求</strong></p>
<p>现有某电商网站用户对商品的收藏数据，记录了用户收藏的商品id以及收藏日期，名为buyer_favorite1。buyer_favorite1包含：买家id，商品id，收藏日期这三个字段，数据以“\t”分割，样本数据及格式如下：</p>
<ol>
<li><p>买家id  商品id  收藏日期 </p>
</li>
<li><p>10181  1000481  2010-04-04 16:54:31 </p>
</li>
<li><p>20001  1001597  2010-04-07 15:07:52 </p>
</li>
<li><p>20001  1001560  2010-04-07 15:08:27 </p>
</li>
<li><p>20042  1001368  2010-04-08 08:20:30 </p>
</li>
<li><p>20067  1002061  2010-04-08 16:45:33 </p>
</li>
<li><p>20056  1003289  2010-04-12 10:50:55 </p>
</li>
<li><p>20056  1003290  2010-04-12 11:57:35 </p>
</li>
<li><p>20056  1003292  2010-04-12 12:05:29 </p>
</li>
<li><p>20054  1002420  2010-04-14 15:24:12 </p>
</li>
<li><p>20055  1001679  2010-04-14 19:46:04 </p>
</li>
<li><p>20054  1010675  2010-04-14 15:23:53 </p>
</li>
<li><p>20054  1002429  2010-04-14 17:52:45 </p>
</li>
<li><p>20076  1002427  2010-04-14 19:35:39 </p>
</li>
<li><p>20054  1003326  2010-04-20 12:54:44 </p>
</li>
<li><p>20056  1002420  2010-04-15 11:24:49 </p>
</li>
<li><p>20064  1002422  2010-04-15 11:35:54 </p>
</li>
<li><p>20056  1003066  2010-04-15 11:43:01 </p>
</li>
<li><p>20056  1003055  2010-04-15 11:43:06 </p>
</li>
<li><p>20056  1010183  2010-04-15 11:45:24 </p>
</li>
<li><p>20056  1002422  2010-04-15 11:45:49 </p>
</li>
<li><p>20056  1003100  2010-04-15 11:45:54 </p>
</li>
<li><p>20056  1003094  2010-04-15 11:45:57 </p>
</li>
<li><p>20056  1003064  2010-04-15 11:46:04 </p>
</li>
<li><p>20056  1010178  2010-04-15 16:15:20 </p>
</li>
<li><p>20076  1003101  2010-04-15 16:37:27 </p>
</li>
<li><p>20076  1003103  2010-04-15 16:37:05 </p>
</li>
<li><p>20076  1003100  2010-04-15 16:37:18 </p>
</li>
<li><p>20076  1003066  2010-04-15 16:37:31 </p>
</li>
<li><p>20054  1003103  2010-04-15 16:40:14 </p>
</li>
<li><p>20054  1003100  2010-04-15 16:40:16 </p>
</li>
</ol>
<p>要求编写MapReduce程序，统计每个买家收藏商品数量。</p>
<h3 id="1-在文档下新建文件buyer-favourite9"><a href="#1-在文档下新建文件buyer-favourite9" class="headerlink" title="1. 在文档下新建文件buyer_favourite9"></a>1. 在文档下新建文件buyer_favourite9</h3><blockquote>
<p>写入数据</p>
</blockquote>
<pre><code>10181   1000481   2010-04-04添加到日历 16:54:31
20001   1001597   2010-04-07 15:07:52
20001   1001560   2010-04-07 15:08:27
20042   1001368   2010-04-08 08:20:30
20067   1002061   2010-04-08 16:45:33
20056   1003289   2010-04-12 10:50:55
20056   1003290   2010-04-12 11:57:35
20056   1003292   2010-04-12 12:05:29
20054   1002420   2010-04-14 15:24:12
20055   1001679   2010-04-14 19:46:04
20054   1010675   2010-04-14 15:23:53
20054   1002429   2010-04-14 17:52:45
20076   1002427   2010-04-14 19:35:39
20054   1003326   2010-04-20 12:54:44
20056   1002420   2010-04-15 11:24:49
20064   1002422   2010-04-15 11:35:54
20056   1003066   2010-04-15 11:43:01
20056   1003055   2010-04-15 11:43:06
20056   1010183   2010-04-15 11:45:24
20056   1002422   2010-04-15 11:45:49
20056   1003100   2010-04-15 11:45:54
20056   1003094   2010-04-15 11:45:57
20056   1003064   2010-04-15 11:46:04
20056   1010178   2010-04-15 16:15:20
20076   1003101   2010-04-15 16:37:27
20076   1003103   2010-04-15 16:37:05
20076   1003100   2010-04-15 16:37:18
20076   1003066   2010-04-15 16:37:31
20054   1003103   2010-04-15 16:40:14
20054   1003100   2010-04-15 16:40:16 </code></pre>
<h3 id="2-将buyer-favourite9上传到HDFS文件系统"><a href="#2-将buyer-favourite9上传到HDFS文件系统" class="headerlink" title="2. 将buyer_favourite9上传到HDFS文件系统"></a>2. 将buyer_favourite9上传到HDFS文件系统</h3><blockquote>
<p>右键input —&gt; Upload files to DFS</p>
</blockquote>
<img src="/posts/ec060e02/image-20200928222920023.png" class="" title="image-20200928222920023">

<blockquote>
<p>选择buyer_favourite1后确定</p>
</blockquote>
<img src="/posts/ec060e02/image-20200928225427432.png" class="" title="image-20200928225427432">



<h3 id="3-新建java文件ProductNumber"><a href="#3-新建java文件ProductNumber" class="headerlink" title="3. 新建java文件ProductNumber"></a>3. 新建java文件ProductNumber</h3><blockquote>
<p>代码如下</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kag<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>  
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StringTokenizer<span class="token punctuation">;</span>  
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>Path<span class="token punctuation">;</span>  
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IntWritable<span class="token punctuation">;</span>  
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Text<span class="token punctuation">;</span>  
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Job<span class="token punctuation">;</span>  
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Mapper<span class="token punctuation">;</span>  
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>Reducer<span class="token punctuation">;</span>  
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>input<span class="token punctuation">.</span>FileInputFormat<span class="token punctuation">;</span>  
<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>mapreduce<span class="token punctuation">.</span>lib<span class="token punctuation">.</span>output<span class="token punctuation">.</span>FileOutputFormat<span class="token punctuation">;</span> 

<span class="token comment" spellcheck="true">/**
 * @author parak
 * @date 2020-9-28
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductNumber</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException<span class="token punctuation">,</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Job job <span class="token operator">=</span> Job<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        job<span class="token punctuation">.</span><span class="token function">setJobName</span><span class="token punctuation">(</span><span class="token string">"ProductNumber"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        job<span class="token punctuation">.</span><span class="token function">setJarByClass</span><span class="token punctuation">(</span>ProductNumber<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        job<span class="token punctuation">.</span><span class="token function">setMapperClass</span><span class="token punctuation">(</span>MapperHandler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        job<span class="token punctuation">.</span><span class="token function">setReducerClass</span><span class="token punctuation">(</span>ReducerHandler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        job<span class="token punctuation">.</span><span class="token function">setOutputKeyClass</span><span class="token punctuation">(</span>Text<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        job<span class="token punctuation">.</span><span class="token function">setOutputValueClass</span><span class="token punctuation">(</span>IntWritable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        Path inputPath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"hdfs://master:9000/user/parak/input/buyer_favourite1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Path outputPath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token string">"hdfs://master:9000/user/parak/output/buyer_favourite1_analysis_result"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        FileInputFormat<span class="token punctuation">.</span><span class="token function">addInputPath</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> inputPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        FileOutputFormat<span class="token punctuation">.</span><span class="token function">setOutputPath</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> outputPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> job<span class="token punctuation">.</span><span class="token function">waitForCompletion</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>ProductNumber<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Falg = "</span> <span class="token operator">+</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>flag <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MapperHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> IntWritable<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> IntWritable intWritable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntWritable</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> Text word <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">map</span><span class="token punctuation">(</span>Object key<span class="token punctuation">,</span> Text value<span class="token punctuation">,</span> Context context<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            StringTokenizer tokenizer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTokenizer</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            word<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>tokenizer<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> intWritable<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ReducerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">Reducer</span><span class="token operator">&lt;</span>Text<span class="token punctuation">,</span> IntWritable<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> IntWritable<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> IntWritable intWritable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntWritable</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">reduce</span><span class="token punctuation">(</span>Text key<span class="token punctuation">,</span> Iterable<span class="token operator">&lt;</span>IntWritable<span class="token operator">></span> values<span class="token punctuation">,</span> Context context<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>IntWritable value <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                sum <span class="token operator">+=</span> value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            intWritable<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
            context<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> intWritable<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>运行结果</p>
</blockquote>
<img src="/posts/ec060e02/image-20200928223752502.png" class="" title="image-20200928223752502">

<blockquote>
<p>运行后的HDFS文件系统</p>
</blockquote>
<img src="/posts/ec060e02/image-20200928225133967.png" class="" title="image-20200928225133967">



<blockquote>
<p>part-r-00000文件内容即为统计结果</p>
</blockquote>
<img src="/posts/ec060e02/image-20200928225154667.png" class="" title="image-20200928225154667">





<h2 id="8-安装部署HBase"><a href="#8-安装部署HBase" class="headerlink" title="8. 安装部署HBase"></a>8. 安装部署HBase</h2><p>HBase与Hadoop版本支持关系</p>
<img src="/posts/ec060e02/image-20201002211137852.png" class="" title="image-20201002211137852">





<h3 id="1-下载安装HBase-1-6-0"><a href="#1-下载安装HBase-1-6-0" class="headerlink" title="1. 下载安装HBase-1.6.0"></a>1. 下载安装HBase-1.6.0</h3><blockquote>
<p>使用镜像：<a href="https://mirrors.bfsu.edu.cn/apache/hbase/">https://mirrors.bfsu.edu.cn/apache/hbase/</a></p>
</blockquote>
<img src="/posts/ec060e02/image-20200929100114445.png" class="" title="image-20200929100114445">

<blockquote>
<p>选择1.6.0，下载tar.gz压缩包</p>
</blockquote>
<img src="/posts/ec060e02/image-20200929100159559.png" class="" title="image-20200929100159559">

<blockquote>
<p>解压</p>
</blockquote>
<pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">tar</span> xzvf hbase-1.6.0-bin.tar.gz <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200929102107183.png" class="" title="image-20200929102107183">

<blockquote>
<p>查看</p>
</blockquote>
<img src="/posts/ec060e02/image-20200929102212291.png" class="" title="image-20200929102212291">



<h3 id="2-配置Hbase"><a href="#2-配置Hbase" class="headerlink" title="2. 配置Hbase"></a>2. 配置Hbase</h3><blockquote>
<p>进入HBase安装主目录的conf目录，然后修改配置文件</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">cd conf/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="1-修改配置文件hbase-env-sh"><a href="#1-修改配置文件hbase-env-sh" class="headerlink" title="(1) 修改配置文件hbase-env.sh"></a>(1) 修改配置文件hbase-env.sh</h4><pre class="line-numbers language-shell"><code class="language-shell">gedit hbase-env.sh

修改JAVA_HOME:
export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el7_8.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200929103119874.png" class="" title="image-20200929103119874">

<h4 id="2-修改配置文件hbase-site-xml"><a href="#2-修改配置文件hbase-site-xml" class="headerlink" title="(2) 修改配置文件hbase-site.xml"></a>(2) 修改配置文件hbase-site.xml</h4><blockquote>
<p>将hbase-site.xml修改为‘</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span>
<span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?></span>
<span class="token comment" spellcheck="true">&lt;!--
/**
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.cluster.distributed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.rootdir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://master:9000/hbase<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.zookeeper.quorum<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.master.info.port<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>60010<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200929103343424.png" class="" title="image-20200929103343424">

<h4 id="3-设置-regionservers"><a href="#3-设置-regionservers" class="headerlink" title="(3) 设置 regionservers"></a>(3) 设置 regionservers</h4><blockquote>
<p>将regionservers中的localhost修改为: slave</p>
</blockquote>
<h4 id="4-设置环境变量"><a href="#4-设置环境变量" class="headerlink" title="(4) 设置环境变量"></a>(4) 设置环境变量</h4><pre class="line-numbers language-shell"><code class="language-shell">gedit ~/.bash_profile

将下面代码添加到文件末尾：
#HBase
export HBASE_HOME=/home/parak/HBase/hbase-1.6.0
export PATH=$HBASE_HOME/bin:$PATH
export HADOOP_CLASSPATH=$HBASE_HOME/lib/*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200929104148521.png" class="" title="image-20200929104148521">

<h4 id="5-将HBase复制到Slave结点"><a href="#5-将HBase复制到Slave结点" class="headerlink" title="(5) 将HBase复制到Slave结点"></a>(5) 将HBase复制到Slave结点</h4><pre class="line-numbers language-shell"><code class="language-shell">scp -r /home/parak/HBase/hbase-1.6.0 slave:/home/parak/HBase/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200929104703378.png" class="" title="image-20200929104703378">

<blockquote>
<p>查看slave结点的HBase文件夹</p>
</blockquote>
<img src="/posts/ec060e02/image-20200929104827983.png" class="" title="image-20200929104827983">



<h3 id="3-验证并启动HBase"><a href="#3-验证并启动HBase" class="headerlink" title="3. 验证并启动HBase"></a>3. 验证并启动HBase</h3><blockquote>
<p>先启动Hadoop: start-all.sh</p>
<p>再启动Hbase: start-hbase.sh</p>
</blockquote>
<img src="/posts/ec060e02/image-20200929105006101.png" class="" title="image-20200929105006101">

<blockquote>
<p>启动HBase出现错误</p>
</blockquote>
<img src="/posts/ec060e02/image-20200929110647176.png" class="" title="image-20200929110647176">

<p>我意识到是Hadoop-2.9.2与HBase-1.6.0的版本匹配问题，于是我下载HBase-2.2.6。</p>
<h3 id="4-重新下载配置HBase-2-2-6"><a href="#4-重新下载配置HBase-2-2-6" class="headerlink" title="4. 重新下载配置HBase-2.2.6"></a>4. 重新下载配置HBase-2.2.6</h3><blockquote>
<p>下载</p>
</blockquote>
<img src="/posts/ec060e02/image-20200929110514041.png" class="" title="image-20200929110514041">

<img src="/posts/ec060e02/image-20200929110553845.png" class="" title="image-20200929110553845">

<blockquote>
<p>解压: tar xzvf hbase-2.2.6-bin.tar.gz</p>
</blockquote>
<img src="/posts/ec060e02/image-20200929110818266.png" class="" title="image-20200929110818266">

<blockquote>
<p>修改配置文件hbase-env.sh</p>
</blockquote>
<img src="/posts/ec060e02/image-20200929111024747.png" class="" title="image-20200929111024747">

<blockquote>
<p>修改配置文件hbase-site.xml</p>
</blockquote>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span>
<span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?></span>
<span class="token comment" spellcheck="true">&lt;!--
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
  <span class="token comment" spellcheck="true">&lt;!--
    The following properties are set for running HBase as a single process on a
    developer workstation. With this configuration, HBase is running in
    "stand-alone" mode and without a distributed file system. In this mode, and
    without further configuration, HBase and ZooKeeper data are stored on the
    local filesystem, in a path under the value configured for `hbase.tmp.dir`.
    This value is overridden from its default value of `/tmp` because many
    systems clean `/tmp` on a regular basis. Instead, it points to a path within
    this HBase installation directory.

    Running against the `LocalFileSystem`, as opposed to a distributed
    filesystem, runs the risk of data integrity issues and data loss. Normally
    HBase will refuse to run in such an environment. Setting
    `hbase.unsafe.stream.capability.enforce` to `false` overrides this behavior,
    permitting operation. This configuration is for the developer workstation
    only and __should not be used in production!__

    See also https://hbase.apache.org/book.html#standalone_dist
  --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.cluster.distributed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>./tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.unsafe.stream.capability.enforce<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.rootdir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://master:9000/hbase<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.zookeeper.quorum<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.master.info.port<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>60010<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200929111344171.png" class="" title="image-20200929111344171">

<blockquote>
<p>修改regionservers文件</p>
</blockquote>
<p><img src="Hadoop%5Cimage-20200929113716160.png" alt="image-20200929113716160"></p>
<blockquote>
<p>将HBase复制到Slave节点</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">scp -r /home/parak/HBase/hbase-2.2.6 slave:/home/parak/HBase<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200929112324004.png" class="" title="image-20200929112324004">

<blockquote>
<p>再次启动Hbase</p>
</blockquote>
<img src="/posts/ec060e02/image-20200929113827901.png" class="" title="image-20200929113827901">

<blockquote>
<p>打开FireFox，进入<a href="http://master:60010/">http://master:60010</a></p>
</blockquote>
<img src="/posts/ec060e02/image-20200929113959833.png" class="" title="image-20200929113959833">

<p>说明HBase启动成功</p>
<h3 id="4-关闭HBase"><a href="#4-关闭HBase" class="headerlink" title="4. 关闭HBase"></a>4. 关闭HBase</h3><blockquote>
<p>先关闭HBase: stop-hbase.sh</p>
<p>再关闭Hadoop: stop-all.sh</p>
</blockquote>
<img src="/posts/ec060e02/image-20200929114148065.png" class="" title="image-20200929114148065">



<h2 id="9-HBase-Shell命令操作"><a href="#9-HBase-Shell命令操作" class="headerlink" title="9. HBase Shell命令操作"></a>9. HBase Shell命令操作</h2><h3 id="1-启动HBase-Shell"><a href="#1-启动HBase-Shell" class="headerlink" title="1. 启动HBase Shell"></a>1. 启动HBase Shell</h3><h4 id="1-启动HBase-Shell界面"><a href="#1-启动HBase-Shell界面" class="headerlink" title="(1) 启动HBase Shell界面"></a>(1) 启动HBase Shell界面</h4><pre class="line-numbers language-shell"><code class="language-shell">hbase shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200929191351747.png" class="" title="image-20200929191351747">

<h4 id="2-HBase-Shell的help命令"><a href="#2-HBase-Shell的help命令" class="headerlink" title="(2) HBase Shell的help命令"></a>(2) HBase Shell的help命令</h4><pre class="line-numbers language-shell"><code class="language-shell">help<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200929191531507.png" class="" title="image-20200929191531507">

<blockquote>
<p>查看HBase建表命令create的用法</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">help "create"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200929191618099.png" class="" title="image-20200929191618099">



<h3 id="2-创建HBase数据表"><a href="#2-创建HBase数据表" class="headerlink" title="2. 创建HBase数据表"></a>2. 创建HBase数据表</h3><blockquote>
<p>HBase中用create命令创建表</p>
</blockquote>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token string">'student'</span><span class="token punctuation">,</span> <span class="token string">'Sname'</span><span class="token punctuation">,</span> <span class="token string">'Ssex'</span><span class="token punctuation">,</span> <span class="token string">'Sage'</span><span class="token punctuation">,</span> <span class="token string">'Sdept'</span><span class="token punctuation">,</span> <span class="token string">'course'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200929191856923.png" class="" title="image-20200929191856923">

<blockquote>
<p>查看’student’表的属性</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">describe 'student'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200929191953519.png" class="" title="image-20200929191953519">



<h3 id="3-HBase数据库基本操作"><a href="#3-HBase数据库基本操作" class="headerlink" title="3. HBase数据库基本操作"></a>3. HBase数据库基本操作</h3><h4 id="1-添加数据"><a href="#1-添加数据" class="headerlink" title="(1) 添加数据"></a>(1) 添加数据</h4><blockquote>
<p>put命令添加数据，一次只能为一个表的一行数据的一个列添加一个数据</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">put 'student', '95001', 'Sname', 'Li Ying'
put 'student', '95001', 'Sdept', 'CS'
put 'student', '95001', 'course:math', '81'
put 'student', '95001', 'course:english', '85'
put 'student', '95002', 'course:math', '83'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200929193655517.png" class="" title="image-20200929193655517">



<h4 id="2-查看数据"><a href="#2-查看数据" class="headerlink" title="(2) 查看数据"></a>(2) 查看数据</h4><blockquote>
<p>查看表某一行的数据</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">get 'student', '95001'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200929194017359.png" class="" title="image-20200929194017359">

<blockquote>
<p>查看表的全部数据</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">scan 'student'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200929194135877.png" class="" title="image-20200929194135877">



<h4 id="3-删除数据"><a href="#3-删除数据" class="headerlink" title="(3) 删除数据"></a>(3) 删除数据</h4><blockquote>
<p>delete命令删除某一项数据</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">delete 'student', '95001', 'Ssex'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200929194514884.png" class="" title="image-20200929194514884">

<blockquote>
<p>delete命令删除某行的全部数据</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">delete 'student','95001'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200929194626605.png" class="" title="image-20200929194626605">



<h4 id="4-删除表"><a href="#4-删除表" class="headerlink" title="(4) 删除表"></a>(4) 删除表</h4><pre class="line-numbers language-shell"><code class="language-shell">disable 'student'
drop 'student'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200929193442627.png" class="" title="image-20200929193442627">



<h3 id="4-查询HBase数据表的历史数据"><a href="#4-查询HBase数据表的历史数据" class="headerlink" title="4. 查询HBase数据表的历史数据"></a>4. 查询HBase数据表的历史数据</h3><blockquote>
<p>在创建表的时候，指定保存的版本数</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">create 'teacher', &#123;NAME=>'username', VERSIONS=>5&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200929203801474.png" class="" title="image-20200929203801474">

<blockquote>
<p>插入数据然后更新数据，使其产生历史版本数据</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">put 'teacher', '91001', 'username', 'Mary'
put 'teacher', '91001', 'username', 'Mary1'
put 'teacher', '91001', 'username', 'Mary2'
put 'teacher', '91001', 'username', 'Mary3'
put 'teacher', '91001', 'username', 'Mary4'
put 'teacher', '91001', 'username', 'Mary5'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200929204220031.png" class="" title="image-20200929204220031">

<blockquote>
<p>查询时，指定查询的历史版本书（默认会查询出最新的数据）</p>
</blockquote>
<pre class="line-numbers language-shell"><code class="language-shell">get 'teacher', '91001', &#123;COLUMN=>'username', VERSIONS=>5&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/ec060e02/image-20200929204245861.png" class="" title="image-20200929204245861">



<h3 id="5-退出HBase-Shell"><a href="#5-退出HBase-Shell" class="headerlink" title="5. 退出HBase Shell"></a>5. 退出HBase Shell</h3><pre class="line-numbers language-sh"><code class="language-sh">exit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Cloud</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty</title>
    <url>/posts/1c6ba3e2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h1><center>
    <font face="Kristen ITC" color="#555555" size=3>Khighness</font><br>
</center>

<h2 id="1-IO"><a href="#1-IO" class="headerlink" title="1. IO"></a>1. IO</h2><h3 id="1-1-BIO"><a href="#1-1-BIO" class="headerlink" title="1.1 BIO"></a>1.1 BIO</h3><h4 id="1-1-1-介绍"><a href="#1-1-1-介绍" class="headerlink" title="1.1.1 介绍"></a>1.1.1 介绍</h4><ul>
<li>Java BIO就是传统的Java IO编程，相关API都在java.io</li>
<li>BIO (<strong>blocking I/O</strong>)：<strong>同步并阻塞</strong>，服务器实现模式为一个连接一个线程，即有连接请求时服务器就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销</li>
<li>BIO方式适用于连接数目较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择</li>
</ul>
<a id="more"></a>



<h4 id="1-1-2-实例"><a href="#1-1-2-实例" class="headerlink" title="1.1.2 实例"></a>1.1.2 实例</h4><blockquote>
<p>BIO服务器</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kag<span class="token punctuation">.</span>bio<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ServerSocket<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>Socket<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutorService<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @Author: KHighness
 * @Date: 2020/9/13 11:07
 * @Description: BIO服务器
 */</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BIOServer</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> Logger logger <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>BIOServer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     *  启动服务器
     * @throws IOException
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/**
         * 线程池机制
         * 思路
         * 1、创建一个线程池
         * 2、如果有多个线程池联机呃，就创建一个线程，与之通讯
         */</span>

        ExecutorService newCachedThreadPool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 创建ServerSocket</span>
        ServerSocket serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"NIO 服务器启动 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 监听，等待客户端接受</span>
            <span class="token keyword">final</span> Socket socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"新增一个客户端连接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 创建一个线程，与之通讯</span>
            newCachedThreadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    <span class="token function">handler</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * handler，和客户端通讯
     * @param socket
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handler</span><span class="token punctuation">(</span>Socket socket<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 通过socket获取输入流</span>
            InputStream inputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 循环读取客户端发送的数据</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// 输出线程信息</span>
                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"线程信息：&amp;#123; PID = "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token operator">+</span> <span class="token string">", Name = "</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" &amp;#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> read <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>read <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[客户端："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> read<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"关闭与客户端的连接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">new</span> <span class="token class-name">BIOServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="1-1-3-配置"><a href="#1-1-3-配置" class="headerlink" title="1.1.3 配置"></a>1.1.3 配置</h4><img src="/posts/1c6ba3e2/image-20200913115739418.png" class="" title="image-20200913115739418">

<img src="/posts/1c6ba3e2/image-20200913115851769.png" class="" title="image-20200913115851769">

<img src="/posts/1c6ba3e2/image-20200913115947574.png" class="" title="image-20200913115947574">



<h4 id="1-1-4-运行"><a href="#1-1-4-运行" class="headerlink" title="1.1.4 运行"></a>1.1.4 运行</h4><img src="/posts/1c6ba3e2/image-20200913120322526.png" class="" title="image-20200913120322526">



<pre class="line-numbers language-shell"><code class="language-shell">telnet 127.0.0.1 6666<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<img src="/posts/1c6ba3e2/image-20200913120406689.png" class="" title="image-20200913120406689">



<img src="/posts/1c6ba3e2/image-20200913121954652.png" class="" title="image-20200913121954652">

<img src="/posts/1c6ba3e2/image-20200913122028056.png" class="" title="image-20200913122028056">



<h4 id="1-1-5-不足"><a href="#1-1-5-不足" class="headerlink" title="1.1.5 不足"></a>1.1.5 不足</h4><p>1｝每个请求都需要创建独立的线程，与对应的客户端进行数据Read，业务处理，数据Write</p>
<p>2）当并发数较大时，需要创建大量线程来处理连接，系统资源占用较大</p>
<p>3）连接建立后，如果当当前线程暂存没有数据可读，则线程就阻塞在Read上，造成线程资源浪费</p>
<h3 id="1-2-NIO"><a href="#1-2-NIO" class="headerlink" title="1.2 NIO"></a>1.2 NIO</h3><h4 id="1-2-1-介绍"><a href="#1-2-1-介绍" class="headerlink" title="1.2.1 介绍"></a>1.2.1 介绍</h4><ul>
<li>Java NIO 全称 <strong>java non-blocking IO</strong>，是指JDK提供的心API，是<strong>同步非阻塞</strong>的。</li>
<li>NIO 相关类都被放在 java.nio包及子包下，并且对原 java.io包中的很多类进行改写</li>
<li>NIO 三大核心部分：<u>Channel</u>(通道)、<u>Buffer</u>(缓冲区)、<u>Selector</u>(选择器)</li>
<li>NIO 是面向缓冲区或者面向块编程的。数据读取到一个它稍后处理的缓冲区，需要时可在缓冲区前后移动，这就增加处理过程中的灵活性，使用它可以提供非阻塞的高伸缩性网络</li>
</ul>
<h4 id="1-2-2-比较"><a href="#1-2-2-比较" class="headerlink" title="1.2.2 比较"></a>1.2.2 比较</h4><blockquote>
<p><code>BIO</code> VS <code>NIO</code></p>
</blockquote>
<ul>
<li><p>BIO以流的方式处理数据，而NIO以块的方式处理数据，块I/O的效率比流I/O高很多</p>
</li>
<li><p>BIO是阻塞的，NIO则是非阻塞的</p>
</li>
<li><p>BIO基于字节流和字符流进行操作，而NIO基于<code>Channel</code>(通道)和<code>Buffer</code>(缓冲区)进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区写入到同道中人。<code>Selectors</code>(选择器)用于监听多个通道的事件（比如：连接请求、数据到达等），因此使用单个线程就可以监听多个客户端通道</p>
</li>
</ul>
<h4 id="1-2-3-组件"><a href="#1-2-3-组件" class="headerlink" title="1.2.3 组件"></a>1.2.3 组件</h4><p>三大组件：<code>Selector</code>、<code>Channe</code>和<code>Buffer</code></p>
<blockquote>
<p>关系图</p>
</blockquote>
<img src="/posts/1c6ba3e2/image-20200913164017187.png" class="" title="image-20200913164017187">

<blockquote>
<p>说明</p>
</blockquote>
<ul>
<li>每个<code>channel</code>都会对应一个<code>Buffer</code></li>
<li><code>Selector</code>对应一个线程，一个线程对应多个<code>channel</code></li>
<li>该图反应有三个<code>channel</code>注册到了该<code>Selector</code>程序</li>
<li>程序切换到哪个<code>channel</code>是有事件决定的，<code>Event</code>就是一个重要的概念</li>
<li><code>Selector</code>会根据不同的事件，在各个通道上切换</li>
<li><code>Buffer</code>就是一个内存块，底层是有一个数组</li>
<li>数据的读取写入都通过<code>Buffer</code>，这个和BIO不同。BIO要么是输入流，要么是输出流，不能双向，但是NIO的<code>buffer</code>是可以读也可以写，需要<code>flip</code>方法切换</li>
<li><code>channel</code>是双向的，可以返回底层操作系统的情况，比如<code>Linux</code>，底层的操作系统通道就是双向的</li>
</ul>
<h5 id="1-2-3-1-Buffer"><a href="#1-2-3-1-Buffer" class="headerlink" title="1.2.3.1 Buffer"></a>1.2.3.1 Buffer</h5><blockquote>
<p>说明</p>
</blockquote>
<p>缓冲区：缓冲区本质上是一个可以读写数据的内存块</p>
<blockquote>
<p>常用Buffer子类：</p>
</blockquote>
<ul>
<li>ByteBuffer</li>
<li>ShortBuffer</li>
<li>CharBuffer</li>
<li>IntBuffer</li>
<li>LongBuffer</li>
<li>DoubleBuffer</li>
<li>FloatBuffer</li>
</ul>
<blockquote>
<p>Buffer类定义了所有的缓冲区都具有的四个属性来提供关于其所包含的数据元素</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Capacity</td>
<td align="center">容量，级可以容纳的最大数据量；在缓冲区创建时被设定且不能改变</td>
</tr>
<tr>
<td align="center">Limit</td>
<td align="center">表示缓冲区的当前重点，不能对缓冲区超过极限的位置进行读写操作，且极限是可以修改的</td>
</tr>
<tr>
<td align="center">Position</td>
<td align="center">位置，下一个要被读或写的元素的索引，每次读写缓冲区数据时都会改变的值，为下次读写作准备</td>
</tr>
<tr>
<td align="center">Mark</td>
<td align="center">标记</td>
</tr>
</tbody></table>
<blockquote>
<p>mark &lt;= position &lt;= limit &lt;= capacity</p>
</blockquote>
<h5 id="1-2-3-2-Channel"><a href="#1-2-3-2-Channel" class="headerlink" title="1.2.3.2 Channel"></a>1.2.3.2 Channel</h5><blockquote>
<p>说明</p>
</blockquote>
<p>通道：NIO的通道类似于流，但有些区别</p>
<ul>
<li>通道可以同时进行读写，而流只能读或者只能写</li>
<li>通道可以实现异步读写数据</li>
<li>通道可以从缓冲读数据，也可以写数据到缓冲</li>
</ul>
<blockquote>
<p> 常用的Channel类：</p>
</blockquote>
<ul>
<li>FileChannel                      ━━━━━▶          文件的数据读写</li>
<li>DatagramChannel            ━━━━━▶          UDP的数据读写</li>
<li>ServerSocketChannel      ━━━━━▶          TCP的数据读写</li>
<li>SocketChannel                 ━━━━━▶          TCP的数据读写</li>
</ul>
<blockquote>
<p>FileChannel的主要IO操作</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">public int read(ByteBuffer dst)</td>
<td align="center">从通道读取数据并放到缓冲区中</td>
</tr>
<tr>
<td align="center">public int write(ByteBuffer src)</td>
<td align="center">把缓冲区的数据写到通道中</td>
</tr>
<tr>
<td align="center">public long transferFrom(ReadableByteChannel src, long position, long count)</td>
<td align="center">从目标通道中复制数据到当前通道</td>
</tr>
<tr>
<td align="center">public long transferTo(long position, long count, WritableByteChannel target)</td>
<td align="center">把数据从当前通道复制给目标通道</td>
</tr>
</tbody></table>
<h5 id="1-2-3-3-Selector"><a href="#1-2-3-3-Selector" class="headerlink" title="1.2.3.3 Selector"></a>1.2.3.3 Selector</h5><blockquote>
<p>说明</p>
</blockquote>
<p>选择器：</p>
<ul>
<li>Java的NIO，用非阻塞的IO方式，可以用一个线程，处理多个的客户端连接，就会使用到<code>Selector</code></li>
<li><code>Selector</code>能够检测多个注册的通道上是否有事件发生（多个<code>Channel</code>以事件的方式可以注册到同一个<code>Selector</code>），如果有事件发生，便获取事件然后针对每个事件进行相应的处理。这样就可以只用一个单线程去管理多个通道，也就是管理多个连接和请求</li>
<li>只有在连接真正有读写事件发生时，才会进行读写，就大大地减少了系统开销，并且不必为每个连接都创建一个线程</li>
<li>避免了多线程之间的上下文切换导致的开销</li>
</ul>
<blockquote>
<p>类及相关方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Class | Method</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">public abstract class Selector implements Closeable</td>
<td align="center">抽象类</td>
</tr>
<tr>
<td align="center">public static Selector open()</td>
<td align="center">得到一个选择器对象</td>
</tr>
<tr>
<td align="center">public int select(long timeout)</td>
<td align="center">监控所有注册的通道，参数用来设置超时时间</td>
</tr>
<tr>
<td align="center">public Set<SelectionKey> selectedKeys()</td>
<td align="center">从内部集合中得到所有的SelectionKe’y</td>
</tr>
</tbody></table>
<blockquote>
<p>说明</p>
</blockquote>
<ul>
<li>当客户端连接时，会通过<code>ServerSocketChannel</code>得到<code>SocketChannel</code></li>
<li>将<code>SocketChannel</code>注册到<code>Selector</code>上，注册后返回一个<code>SelectionKey</code></li>
<li><code>Selector</code>进行监听<code>select</code>方法，返回有事件发生的通道的个数</li>
<li>进一步得到各个<code>SelectionKey</code></li>
<li>在通道<code>SelectionKey</code>反向获取<code>SocketChannel</code>，方法<code>channel()</code></li>
<li>可以得到所有的<code>channel</code>，完成业务处理</li>
</ul>
<h4 id="1-2-3-编程"><a href="#1-2-3-编程" class="headerlink" title="1.2.3 编程"></a>1.2.3 编程</h4><blockquote>
<p>将数据写入到本地文件</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 创建输出流 ——> channel</span>
        FileOutputStream fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"D:\\Java\\Test\\K1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 通过 fileOutputStream 获取 对应的 FileChannel</span>
        <span class="token comment" spellcheck="true">// 这个 fileChannel 真实类型是  FileChannelImpl</span>
        FileChannel fileChannel <span class="token operator">=</span> fileOutputStream<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 创建一个缓冲区 ByteBuffer</span>
        ByteBuffer byteBuffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 将 s 放入 byteBuffer</span>
        byteBuffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 对 byteBuffer 进行flip</span>
        byteBuffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 将 byteBuffer 数据写入到 fileChannel</span>
        fileChannel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>从本地文件读取数据</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 创建文件的输入流</span>
        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        FileInputStream fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 通过 fileInputStream 获取对应的 FileChannel ——>  实际类型 FileChannelImpl</span>
        FileChannel fileChannel <span class="token operator">=</span> fileInputStream<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 创建一个缓冲区ByteBuffer</span>
        ByteBuffer byteBuffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 将 通道的数据 读入到 Buffer</span>
        fileChannel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 将byteBuffer的字节数据转成字符串</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>拷贝文件</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span>String source<span class="token punctuation">,</span> String destination<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        FileInputStream fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
        FileChannel fileChannel1 <span class="token operator">=</span> fileInputStream<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        FileOutputStream fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>destination<span class="token punctuation">)</span><span class="token punctuation">;</span>
        FileChannel fileChannel2 <span class="token operator">=</span> fileOutputStream<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        ByteBuffer byteBuffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 复位，重置标志位</span>
            byteBuffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">int</span> read <span class="token operator">=</span> fileChannel1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>read <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 表示读完</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 将buffer中的数据写入到fileChannel02 -- K2.txt</span>
            byteBuffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            fileChannel2<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>使用transferFrom完成拷贝</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copyImage</span><span class="token punctuation">(</span>String fromPath<span class="token punctuation">,</span> String toPath<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 创建相关流</span>
        FileInputStream fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>fromPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
        FileOutputStream fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>toPath<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 获取Channel</span>
        FileChannel sourceChannel <span class="token operator">=</span> fileInputStream<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        FileChannel destinChannel <span class="token operator">=</span> fileOutputStream<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 使用transferFrom完成拷贝</span>
        destinChannel<span class="token punctuation">.</span><span class="token function">transferFrom</span><span class="token punctuation">(</span>sourceChannel<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> sourceChannel<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 关闭相关流</span>
        sourceChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        destinChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>buffer数组完成读写操作</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Scattering: 将数据写入到buffer时，可以采用buffer数组，依次写入[分散]</span>
<span class="token comment" spellcheck="true">// Gathering: 从buffer读取数据时，可以采用buffer数组，依次读取[聚集]</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScatteringAndGatheringTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 使用ServerSocketChannel 和 SocketChannel 网络</span>
        ServerSocketChannel serverSocketChannel <span class="token operator">=</span> ServerSocketChannel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        InetSocketAddress inetSocketAddress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">7000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 绑定端口到Socket，并启动</span>
        serverSocketChannel<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>inetSocketAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 创建buffer数组</span>
        ByteBuffer<span class="token punctuation">[</span><span class="token punctuation">]</span> byteBuffers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        byteBuffers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        byteBuffers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 等客户端连接</span>
        SocketChannel socketChannel <span class="token operator">=</span> serverSocketChannel<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> messageLength <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 循环的读取</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> byteRead <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

            <span class="token keyword">while</span> <span class="token punctuation">(</span>byteRead <span class="token operator">&lt;</span> messageLength<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token keyword">long</span> l <span class="token operator">=</span> socketChannel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>byteBuffers<span class="token punctuation">)</span><span class="token punctuation">;</span>
                byteRead  <span class="token operator">+=</span> l<span class="token punctuation">;</span>
                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"byteRead = "</span> <span class="token operator">+</span> byteRead<span class="token punctuation">)</span><span class="token punctuation">;</span>
                Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>byteBuffers<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>buffer <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"position = "</span>
                                <span class="token operator">+</span> buffer<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                <span class="token operator">+</span> <span class="token string">", limit = "</span>
                                <span class="token operator">+</span> buffer<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// 将所有的buffer反转</span>
                Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>byteBuffers<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>buffer <span class="token operator">-</span><span class="token operator">></span> buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// 将数据读出显示到客户端</span>
                <span class="token keyword">long</span> byteWrite <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>byteWrite <span class="token operator">&lt;</span> messageLength<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    socketChannel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>byteBuffers<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    byteWrite <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

                <span class="token comment" spellcheck="true">// 将所欲的buffer进行clear</span>
                Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>byteBuffers<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>buffer <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    buffer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>
                                <span class="token string">"byteRead = "</span> <span class="token operator">+</span> byteRead
                                <span class="token operator">+</span> <span class="token string">", byteWrite = "</span> <span class="token operator">+</span> byteWrite
                                <span class="token operator">+</span> <span class="token string">", messageLength = "</span> <span class="token operator">+</span> messageLength<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="1-2-4-实例"><a href="#1-2-4-实例" class="headerlink" title="1.2.4 实例"></a>1.2.4 实例</h4><p><strong>群聊系统Demo</strong></p>
<p>编码步骤：</p>
<ol>
<li>当客户端连接时，会通过<code>ServerSocketChannel</code> 得到 SocketChannel</li>
<li>Selector 进行监听 select 方法, 返回有事件发生的通道的个数.</li>
<li>将socketChannel注册到Selector上, register(Selector sel, int ops), 一个selector上可以注册多个SocketChannel</li>
<li>注册后返回一个 SelectionKey, 会和该Selector 关联(集合)</li>
<li>进一步得到各个 SelectionKey (有事件发生)</li>
<li>在通过 SelectionKey 反向获取 SocketChannel , 方法 channel()</li>
<li>判断该Channel的事件类型，对不同事件进行不同的业务处理</li>
</ol>
<blockquote>
<p>NIOServer</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kag<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>groupchat<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetSocketAddress<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ByteBuffer<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @Author: KHighness
 * @Date: 2020/9/19 22:59
 * @Description:
 */</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GroupChatServer</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>GroupChatServer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> Selector selector<span class="token punctuation">;</span>

    <span class="token keyword">private</span> ServerSocketChannel listenChannel<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PORT <span class="token operator">=</span> <span class="token number">3333</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">GroupChatServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 1、获取选择器</span>
            selector <span class="token operator">=</span> Selector<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 2、获取通道</span>
            listenChannel <span class="token operator">=</span> ServerSocketChannel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 3、绑定端口</span>
            listenChannel<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>PORT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 4、设置非阻塞</span>
            listenChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 5、将通道注册到选择器，注册操作：“接收”</span>
            listenChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> SelectionKey<span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 监听</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 6、采用轮询的方式，查询获取“准备就绪”的注册过的操作</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> count <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">// 7、获取当前选择器中所有注册的选择键</span>
                    Iterator<span class="token operator">&lt;</span>SelectionKey<span class="token operator">></span> iterator <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                        <span class="token comment" spellcheck="true">// 8、获取“准备就绪”的时间</span>
                        SelectionKey selectionKey <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                        <span class="token comment" spellcheck="true">// 9、判断selectionKey是具体的什么事件</span>
                        <span class="token comment" spellcheck="true">// 监听到accept事件</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>selectionKey<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                            <span class="token comment" spellcheck="true">// 10、若接受的事件是“接收就绪”操作，就获取客户端连接</span>
                            SocketChannel socketChannel <span class="token operator">=</span> listenChannel<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token comment" spellcheck="true">// 11、切换为非阻塞模式</span>
                            socketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token comment" spellcheck="true">// 将该通道注册到选择器上</span>
                            socketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> SelectionKey<span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"["</span> <span class="token operator">+</span> socketChannel<span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]上线"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

                        <span class="token comment" spellcheck="true">// 监听到read事件</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>selectionKey<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                            <span class="token comment" spellcheck="true">// 处理读 (专门方法)</span>
                            <span class="token function">readMessage</span><span class="token punctuation">(</span>selectionKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

                        <span class="token comment" spellcheck="true">// end：移除选择键，防止重复操作</span>
                        iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"等待····"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 读取客户端消息</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readMessage</span><span class="token punctuation">(</span>SelectionKey selectionKey<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 定义一个 SocketChannel</span>
        SocketChannel socketChannel <span class="token operator">=</span> null<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 13、获取该选择器上的“读就绪”状态的通道</span>
            socketChannel <span class="token operator">=</span> <span class="token punctuation">(</span>SocketChannel<span class="token punctuation">)</span> selectionKey<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 14、读取数据</span>
            ByteBuffer buffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">int</span> count <span class="token operator">=</span> socketChannel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 根据count的h值做处理</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// 把缓存区的数据转成字符串</span>
                String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// 输出该消息</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"客户端-"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// 向其他客户端转发消息(排除自己)，专门写一个方法来处理</span>
                <span class="token function">sendMessageToOtherClients</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> socketChannel<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"["</span> <span class="token operator">+</span> socketChannel<span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]离线"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// 取消注册</span>
                selectionKey<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// 关闭通道</span>
                socketChannel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ioException<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 转发消息给其他客户</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sendMessageToOtherClients</span><span class="token punctuation">(</span>String msg<span class="token punctuation">,</span> SocketChannel self<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"服务器转发消息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 遍历所有注册到 selector 上的SocketChannel，并排除self</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>SelectionKey key <span class="token operator">:</span> selector<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 通过 key 取出 对应的 SocketChannel</span>
            Channel targetChannel <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 排除自己</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>targetChannel <span class="token keyword">instanceof</span> <span class="token class-name">SocketChannel</span> <span class="token operator">&amp;&amp;</span> targetChannel <span class="token operator">!=</span> self<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// 转型</span>
                SocketChannel dest <span class="token operator">=</span> <span class="token punctuation">(</span>SocketChannel<span class="token punctuation">)</span> targetChannel<span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// 将msg存储到buffer</span>
                ByteBuffer byteBuffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// 将buffer的数据写入通道</span>
                dest<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 创建服务器对象</span>
        GroupChatServer groupChatServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GroupChatServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        groupChatServer<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>NIOClient</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kag<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>groupchat<span class="token punctuation">;</span>

<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetSocketAddress<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ByteBuffer<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>SelectionKey<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>Selector<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span>SocketChannel<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @Author: KHighness
 * @Date: 2020/9/20 0:53
 * @Description:
 */</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GroupChatClient</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> Logger log <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>GroupChatClient<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> String HOST <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span>    PORT <span class="token operator">=</span> <span class="token number">3333</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> Selector selector<span class="token punctuation">;</span>

    <span class="token keyword">private</span> SocketChannel socketChannel<span class="token punctuation">;</span>

    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 构造器</span>
    <span class="token keyword">public</span> <span class="token function">GroupChatClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        selector <span class="token operator">=</span> Selector<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 连接服务器</span>
        socketChannel <span class="token operator">=</span> socketChannel<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 设置非阻塞</span>
        socketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 将socketChannel注册到selector</span>
        socketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> SelectionKey<span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 得到username</span>
        username <span class="token operator">=</span> socketChannel<span class="token punctuation">.</span><span class="token function">getLocalAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"["</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">"]已就绪···"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 向服务器发送消息</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        msg <span class="token operator">=</span> username <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> msg<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            socketChannel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>ByteBuffer<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 从服务器回复的消息</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> readChannels <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>readChannels <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                Iterator<span class="token operator">&lt;</span>SelectionKey<span class="token operator">></span> iterator <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    SelectionKey key <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                        <span class="token comment" spellcheck="true">// 得到相关的通道</span>
                        SocketChannel socketChannel <span class="token operator">=</span> <span class="token punctuation">(</span>SocketChannel<span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment" spellcheck="true">// 得到一个buffer</span>
                        ByteBuffer buffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment" spellcheck="true">// 读取</span>
                        socketChannel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment" spellcheck="true">// 把读到的缓冲区的数据转成字符串</span>
                        String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// 删除当前 SelectionKey</span>
                iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//log.error("无可用的通道···");</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 启动客户端</span>
        GroupChatClient chatClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GroupChatClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 启动一个线程，每隔3秒，读取从服务器</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    chatClient<span class="token punctuation">.</span><span class="token function">readMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                        Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 发送数据给服务器</span>
        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            String s <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            chatClient<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="1-2-5-零拷贝"><a href="#1-2-5-零拷贝" class="headerlink" title="1.2.5 零拷贝"></a>1.2.5 零拷贝</h4><blockquote>
<p>说明</p>
</blockquote>
<ul>
<li><p>零拷贝，是从OS(操作系统)的角度来说的。因为内核缓冲区之间，没有数据是重复的</p>
</li>
<li><p>零拷贝不仅仅带来更少的数据复制，还能带来其他的性能优势，更少的CPU缓存伪共享以及无CPU校验和计算</p>
</li>
</ul>
<blockquote>
<p>mmap</p>
</blockquote>
<ul>
<li>mmap通过内存映射，将文件映射到内核缓冲区，同时，用户空间可以共享内核空间的数据。这样，在进行网络传输时，就可以减少内核空间到用户空间的拷贝次数</li>
</ul>
<blockquote>
<p>mmap和sendFile的区别</p>
</blockquote>
<ul>
<li>mmp适合小数据量读写，sendFile适合大文件传输</li>
<li>mmap需要4次上下文切换，3次数据拷贝；sendFile需要3次上下文切换，最少2次数据拷贝</li>
<li>sendFile可以利用DMA(direct memory access: 直接内存拷贝)方式，减少CPU拷贝，mmap则不能(必须从内核拷贝到Socket缓冲区)</li>
</ul>
<h2 id="2-概述"><a href="#2-概述" class="headerlink" title="2. 概述"></a>2. 概述</h2><p>官网: <a href="https://netty.io/">Netty.io</a></p>
<h3 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h3><p>Netty是一个异步事件驱动的网络应用程序框架，用于快速开发可维护的高性能协议服务器和客户端。</p>
<h3 id="1-2-设计"><a href="#1-2-设计" class="headerlink" title="1.2 设计"></a>1.2 设计</h3><ul>
<li>适用于各种传输类型的统一API-阻塞和非阻塞套接字</li>
<li>基于灵活且可扩展的事件模型，可将关注点明确分离</li>
<li>高度可定制的线程模型-单线程，一个或多个线程池，例如SEDA</li>
<li>真正的无连接数据报套接字支持（从3.1开始）</li>
</ul>
<h3 id="1-3-性能"><a href="#1-3-性能" class="headerlink" title="1.3 性能"></a>1.3 性能</h3><ul>
<li>更高的吞吐量，更低的延迟</li>
<li>减少资源消耗</li>
<li>减少不必要的内存复制</li>
</ul>
<h3 id="1-4-架构"><a href="#1-4-架构" class="headerlink" title="1.4 架构"></a>1.4 架构</h3><img src="/posts/1c6ba3e2/image-20200921092848809.png" class="" title="image-20200921092848809">



<h2 id="3-Reactor"><a href="#3-Reactor" class="headerlink" title="3. Reactor"></a>3. Reactor</h2><h3 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h3><blockquote>
<p>反应器模式  |  分发者模式  |  通知者模式</p>
</blockquote>
<ul>
<li>基于I/O复用模型: 多个连接共用一个阻塞对象，应用程序只需要再一个阻塞对象等待，无需阻塞等待所有连接。当某个连接有新的数据可以处理时，操作系统通知应用程序，线程从阻塞状态返回，开始进行业务处理</li>
<li>基于线程池复用线程资源: 不必再为每个连接创建线程，键连接完成后的业务处理热舞分配给线程进行处理，一个线程可以处理多个连接的业务</li>
</ul>
<h3 id="2-2-组成"><a href="#2-2-组成" class="headerlink" title="2.2 组成"></a>2.2 组成</h3><ul>
<li>Reactor: Reactor在一个单独的线程中运行，负责监听和分发事件，分发给适当的处理程序来对IO事件做出反应。</li>
<li>Handlers: 处理程序执行I/O事件要完成的实际事件。Reactor通过调度适当的处理程序来响应I/O事件，处理程序执行非阻塞操作。</li>
</ul>
<h3 id="2-3-分类"><a href="#2-3-分类" class="headerlink" title="2.3 分类"></a>2.3 分类</h3><ul>
<li>单Reactor单线程        ━━━━━▶    前台接待员和服务员是同一个人，全程为顾客服务</li>
<li>单Reactor多线程        ━━━━━▶    1个前台接待员，多个服务员，接待员只负责接待</li>
<li>主从Reactor多线程    ━━━━━▶    多个前台接待员，多个服务生</li>
</ul>
<h4 id="2-2-1-单Reactor单线程"><a href="#2-2-1-单Reactor单线程" class="headerlink" title="2.2.1 单Reactor单线程"></a>2.2.1 单Reactor单线程</h4><blockquote>
<p>图示</p>
</blockquote>
<img src="/posts/1c6ba3e2/image-20200921181936951.png" class="" title="image-20200921181936951">

<blockquote>
<p>分析</p>
</blockquote>
<ol>
<li>优点：模型简单，没有多线程、进程通信、竞争的问题，全部都在一个线程中完成</li>
<li>缺点：性能问题，只有一个线程，无法发挥多核CPU的性能。<code>Handler</code>在处理某个连接上的业务时，整个进程无法处理其他连接事件，很容易导致性能瓶颈</li>
<li>缺点：可靠性问题，线程意外终止，或者进入死循环，会导致整个系统通信模块不可用，不能接收和处理外部消息，造成节点故障</li>
<li>使用场景：客户端的数量有限，业务处理非常快速</li>
</ol>
<h4 id="2-2-2-单Reactor多线程"><a href="#2-2-2-单Reactor多线程" class="headerlink" title="2.2.2 单Reactor多线程"></a>2.2.2 单Reactor多线程</h4><blockquote>
<p>图示</p>
</blockquote>
<img src="/posts/1c6ba3e2/image-20200921182914960.png" class="" title="image-20200921182914960">

<blockquote>
<p>方案说明</p>
</blockquote>
<ol>
<li><code>Reactor</code>对象通过<code>select</code>监控客户端请求事件，收到事件后，通过<code>dispatch</code>进行分发</li>
<li>如果建立连接请求，则由<code>Acceptor</code>通过<code>accept</code>处理连接请求，然后从黄健一个Handler对象处理完成连接后的各种事件</li>
<li>如果不是连接请求，则由<code>Reactor</code>分发调用连接对应的<code>handler</code>读取数据后，会分发给后面的<code>Worker</code>线程池的某个线程处理业务</li>
<li><code>Handler</code>只负责响应事件，不做具体的业务处理，通过<code>read</code>读取数据后，会分发给后面的<code>worker</code>线程池的某个线程处理业务</li>
<li><code>Worker</code>线程池会分配独立线程完成真正的业务，并将结果返回给<code>Handler</code></li>
<li><code>Handler</code>收到响应后，通过<code>send</code>将结果返回给<code>Client</code></li>
</ol>
<blockquote>
<p>分析</p>
</blockquote>
<ol>
<li>优点：可以充分的利用多核<code>CPU</code>的处理能力</li>
<li>缺点：多线程数据共享和访问比较复杂，<code>Reactor</code>处理所有的事件的监听和响应，在单线程运行，在高并发场景容易成为性能瓶颈</li>
</ol>
<h4 id="2-2-3-主从Reactor多线程"><a href="#2-2-3-主从Reactor多线程" class="headerlink" title="2.2.3 主从Reactor多线程"></a>2.2.3 主从Reactor多线程</h4><blockquote>
<p>图示</p>
</blockquote>
<img src="/posts/1c6ba3e2/image-20200921191731035.png" class="" title="image-20200921191731035">

<blockquote>
<p>方案说明</p>
</blockquote>
<ol>
<li><code>Reactor</code>主线程<code>MainReactor</code>对象通过<code>select</code>监听连接事件，收到事件后，通过<code>Acceptor</code>处理连接事件</li>
<li>当<code>Acceptor</code>处理连接事件后，<code>MainReactor</code>将连接分配给<code>SubReactor</code></li>
<li><code>SubReactor</code>将连接加入到连接队列进行监听，并创建<code>Handler</code>进行各种事件处理</li>
<li>当有新事件发生时，<code>SubReactor</code>就会调用对应的Handler处理</li>
<li><code>Worker</code>线程池分配独立的<code>Worker</code>线程进行业务处理，并返回结果</li>
<li><code>Handler</code>收到响应的结果后，再通过<code>send</code>将结果返回给<code>Client</code></li>
<li><code>Reactor</code>主线程可以对于多个<code>Reactor</code>子线程，即<code>MainReactor</code>，可以关联多个<code>SubReactor</code></li>
</ol>
<blockquote>
<p>分析</p>
</blockquote>
<ol>
<li><p>优点：父线程与子线程的职责明确，父线程只需要接收新连接，子线程完成后续的业务处理</p>
</li>
<li><p>优点：父线程与子线程的数据交互简单，<code>Reactor</code>主线程只需要把新连接传给子线程，子线程无需返回数据</p>
</li>
<li><p>缺点：编程复杂度较高</p>
</li>
</ol>
<h3 id="2-4-优点"><a href="#2-4-优点" class="headerlink" title="2.4 优点"></a>2.4 优点</h3><ul>
<li>响应快，不必为单个同步时间所阻塞，虽然<code>Reactor</code>本身依然是同步的</li>
<li>可以最大程度的比曼复杂的多线程及同步问题，并且避免了多线程/进程的切换开销</li>
<li>扩展性好，可以方便的通过增加<code>Reactor</code>实例个数来充分利用CPU资源</li>
<li>复用性好，<code>Reactor</code>模型本身与具体事件处理逻辑无关，具有很高的复用性</li>
</ul>
<h2 id="4-架构"><a href="#4-架构" class="headerlink" title="4. 架构"></a>4. 架构</h2><h3 id="3-1-图示"><a href="#3-1-图示" class="headerlink" title="3.1 图示"></a>3.1 图示</h3><img src="/posts/1c6ba3e2/image-20200921204851799.png" class="" title="image-20200921204851799">

<h3 id="3-2-说明"><a href="#3-2-说明" class="headerlink" title="3.2 说明"></a>3.2 说明</h3><ol>
<li><code>Netty</code>抽象出两组线程池<code>BossGroup</code>专门负责接收客户端的连接，<code>WorkerGroup</code>专门负责网络的读写</li>
<li><code>BossGroup</code>和<code>WorkerGroup</code>类型的本质都是<code>NioEventLoopGroup</code></li>
<li><code>NioEventLoopGroup</code>相当于一个事件循环组，这个组中含有多个事件循环，每一个事件循环是<code>NioEventLoop</code></li>
<li><code>NioEventLoop</code>表示一个不断循环的执行处理任务的线程，每个<code>NioEventLoop</code>都有一个<code>selector</code>，用于监听绑定在其上的socket的网络通讯</li>
<li><code>NioEventLoopGroup</code>可以有多个线程，即可以含有多个<code>NioEventLoop</code></li>
<li>每个<code>Boss NioEventLoop</code>循环执行的步骤有三步:<ol>
<li>轮询<code>accept</code>事件</li>
<li>处理<code>accept</code>事件，与<code>client</code>建立连接，生成<code>NioSocketChannel</code>，并将其注册到某个<code>Worker NioEventLoop</code>上的<code>selector</code></li>
<li>处理任务队列的任务，即<code>runAllTasks</code></li>
</ol>
</li>
<li>每个<code>Worker NIOEventLoop</code>循环执行的步骤<ol>
<li>轮询<code>read</code>、<code>write</code>事件</li>
<li>处理i/o事件，即<code>read</code>、<code>write</code>事件，在对应<code>NioSocketChannel</code>处理</li>
<li>处理任务队列的任务，即<code>runAllTasks</code></li>
</ol>
</li>
</ol>
<h3 id="3-3-代码示例"><a href="#3-3-代码示例" class="headerlink" title="3.3 代码示例"></a>3.3 代码示例</h3><blockquote>
<p>NettyServer.java</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kag<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>simple<span class="token punctuation">;</span>

<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>bootstrap<span class="token punctuation">.</span>ServerBootstrap<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>NioEventLoopGroup<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>SocketChannel<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>NioServerSocketChannel<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author: KHighness
 * @date: 2020/9/21 21:53
 * @apiNote:
 */</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyServer</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">/*
         * 创建BossGroup 和 WorkerGroup
         * 说明：
         * 1、创建两个线程组：bossGroup 和 workerGroup
         * 2、bossGroup处理连接请求
         * 3、workerGroup处理和客户端的业务
         * 4、两个都是无限循环
         */</span>
        EventLoopGroup bossGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        NioEventLoopGroup workerGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 创建服务器端的启动对象，配置参数</span>
            ServerBootstrap bootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">// 使用链式编程来进行设置</span>
            bootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>workerGroup<span class="token punctuation">,</span> workerGroup<span class="token punctuation">)</span>                         <span class="token comment" spellcheck="true">// 设置两个线程组</span>
                    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioServerSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// 使用NioSocketChannel作为服务器的通道实现</span>
                    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>SO_BACKLOG<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">// 设置线程队列得到连接个数</span>
                    <span class="token punctuation">.</span><span class="token function">childOption</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>SO_KEEPALIVE<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 设置保持活动连接状态</span>
                    <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 创建一个通道测试对象</span>
                        <span class="token comment" spellcheck="true">// 给Pipeline设置处理器</span>
                        <span class="token annotation punctuation">@Override</span>
                        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel socketChannel<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                            socketChannel<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NettyServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 给workerGroup的EventLoop对应的管道设置处理器</span>

            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务器已就绪···"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">// 绑定一个端口并且同步</span>
            <span class="token comment" spellcheck="true">// 绑定端口并启动服务器</span>
            ChannelFuture channelFuture <span class="token operator">=</span> bootstrap<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">3333</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">// 对关闭通道进行监听</span>
            channelFuture<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            bossGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            workerGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>NettyHandler.java</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kag<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>simple<span class="token punctuation">;</span>

<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span>ByteBuf<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span>Unpooled<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>ChannelHandlerContext<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>ChannelInboundHandlerAdapter<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>util<span class="token punctuation">.</span>CharsetUtil<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author: KHighness
 * @date: 2020/9/21 22:20
 * @apiNote:
 */</span>

<span class="token comment" spellcheck="true">/**
 * 说明：
 * 自定义一个Handler需要继承Netty规定好的某个HandlerAdapter
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyServerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInboundHandlerAdapter</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 读取数据事件
     * @param ctx 上下文对象，含有管道pipline[处理数据]，通道channel[传输数据]，地址
     * @param msg 客户端发送的数据
     * @throws Exception
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"server ctx = "</span> <span class="token operator">+</span> ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 将msg转成ByteBuffer</span>
        ByteBuf byteBuf <span class="token operator">=</span> <span class="token punctuation">(</span>ByteBuf<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端发送消息："</span> <span class="token operator">+</span> byteBuf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端地址："</span> <span class="token operator">+</span> ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 数据读取完毕
     * @param ctx
     * @throws Exception
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelReadComplete</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 将数据写入到缓存，并刷新</span>
        ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span><span class="token string">"Hello, 客户端~"</span><span class="token punctuation">,</span> CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 处理异常
     * @param ctx
     * @param cause
     * @throws Exception
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cause<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>NettyClient.java</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kag<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>simple<span class="token punctuation">;</span>

<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span>ByteBuf<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span>Unpooled<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>ChannelHandlerContext<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>ChannelInboundHandlerAdapter<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>util<span class="token punctuation">.</span>CharsetUtil<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author: KHighness
 * @date: 2020/9/21 22:20
 * @apiNote:
 */</span>

<span class="token comment" spellcheck="true">/**
 * 说明：
 * 自定义一个Handler需要继承Netty规定好的某个HandlerAdapter
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyServerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInboundHandlerAdapter</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 读取数据事件
     * @param ctx 上下文对象，含有管道pipline[处理数据]，通道channel[传输数据]，地址
     * @param msg 客户端发送的数据
     * @throws Exception
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"server ctx = "</span> <span class="token operator">+</span> ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 将msg转成ByteBuffer</span>
        ByteBuf byteBuf <span class="token operator">=</span> <span class="token punctuation">(</span>ByteBuf<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端发送消息："</span> <span class="token operator">+</span> byteBuf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端地址："</span> <span class="token operator">+</span> ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 数据读取完毕
     * @param ctx
     * @throws Exception
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelReadComplete</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 将数据写入到缓存，并刷新</span>
        ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span><span class="token string">"Hello, 客户端~"</span><span class="token punctuation">,</span> CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 处理异常
     * @param ctx
     * @param cause
     * @throws Exception
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cause<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>NettyClientHandler.java</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kag<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>simple<span class="token punctuation">;</span>

<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span>ByteBuf<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>buffer<span class="token punctuation">.</span>Unpooled<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>ChannelHandlerContext<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>ChannelInboundHandlerAdapter<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>util<span class="token punctuation">.</span>CharsetUtil<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author: KHighness
 * @date: 2020/9/22 19:09
 * @apiNote:
 */</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyClientHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInboundHandlerAdapter</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 通道就绪->触发
     * @param ctx
     * @throws Exception
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelActive</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"client "</span> <span class="token operator">+</span>  ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span><span class="token string">"Hello, server~喵"</span><span class="token punctuation">,</span> CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 有读取事件时->触发
     * @param ctx
     * @param msg
     * @throws Exception
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        ByteBuf byteBuf <span class="token operator">=</span> <span class="token punctuation">(</span>ByteBuf<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务器回复消息："</span> <span class="token operator">+</span> byteBuf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务器的地址："</span> <span class="token operator">+</span> ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 处理异常
     * @param ctx
     * @param cause
     * @throws Exception
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cause<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="3-4-任务队列"><a href="#3-4-任务队列" class="headerlink" title="3.4 任务队列"></a>3.4 任务队列</h3><p>任务队列中的<code>Task</code>有三种典型使用场景</p>
<ul>
<li>用户程序自定义的普通任务</li>
<li>用户自定义定时任务</li>
<li>非当前<code>Reactor</code>线程调用<code>Channel</code>的各种方法</li>
</ul>
<h3 id="3-5-异步模型"><a href="#3-5-异步模型" class="headerlink" title="3.5 异步模型"></a>3.5 异步模型</h3><h4 id="3-5-1-基本介绍"><a href="#3-5-1-基本介绍" class="headerlink" title="3.5.1 基本介绍"></a>3.5.1 基本介绍</h4><ol>
<li>异步的概念和同步相对。当一个异步过程调用发出后，调用者不能立刻得到结果。实际处理这个调用的组件在完成后，通过状态、通知和回调来通知调用者</li>
<li><code>Netty</code>中的I/O操作是异步的，包括<code>Bind</code>、<code>Write</code>、<code>Connect</code>等操作会简单的返回一个<code>ChannelFuture</code></li>
<li>调用者并不能理科获得结果，而是通过Future-Listener机制，用户可以方便的主动获取或者通过通知机制获得IO操作结果</li>
<li><code>Netty</code>的异步模型是建立在<code>future</code>和<code>callback</code>之上的。<code>callback</code>就是回调。重点是<code>future</code>，它的核心思想是：结社一个方法<code>fun</code>，计算过程可能非常耗时，等待<code>fun</code>返回显然不合适。那么可以在调用<code>fun</code>的时候立马返回一个<code>future</code>，后续可以通过<code>future</code>去监控方法<code>fun</code>的处理过程</li>
</ol>
<h4 id="3-5-2-Future说明"><a href="#3-5-2-Future说明" class="headerlink" title="3.5.2 Future说明"></a>3.5.2 Future说明</h4><ol>
<li><p>表示异步的执行结果，可以通过它提供的方法来检测执行是否完成</p>
</li>
<li><p><code>ChannelFuture</code>是一个接口: public interface ChannelFuture extends Future<Void></p>
<p>我们可以添加监听器，当监听的事件发生时，就会通知到监听器</p>
</li>
</ol>
<h4 id="3-5-3-Future-Listener机制"><a href="#3-5-3-Future-Listener机制" class="headerlink" title="3.5.3 Future-Listener机制"></a>3.5.3 Future-Listener机制</h4><ol>
<li><p>当<code>future</code>对象刚刚创建时，处于非完成状态，调用者可以通过返回的<code>ChannelFuture</code>来获取操作执行的状态，注册监听函数来执行完成后的操作</p>
</li>
<li><p>常见操作：</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">isDone()</td>
<td align="center">判断当前操作是否完成</td>
</tr>
<tr>
<td align="center">isSuccess()</td>
<td align="center">判断已完成的当前操作是否成功</td>
</tr>
<tr>
<td align="center">getCause()</td>
<td align="center">获取已完成的当前操作失败的原因</td>
</tr>
<tr>
<td align="center">isCancelled()</td>
<td align="center">判断已完成的当前操作是否被取消</td>
</tr>
<tr>
<td align="center">addListener()</td>
<td align="center">注册监听器，当操作已完成(isDone返回完成)，将会通知指定的监听器；如果Future对象已完成，则通知指定的监听器</td>
</tr>
</tbody></table>
</li>
</ol>
<p>例如：</p>
<pre class="line-numbers language-java"><code class="language-java">            <span class="token comment" spellcheck="true">// 绑定一个端口并且同步</span>
            <span class="token comment" spellcheck="true">// 绑定端口并启动服务器</span>
            ChannelFuture CF <span class="token operator">=</span> bootstrap<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">3333</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">// 给CF注册监听器</span>
            CF<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelFutureListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span>ChannelFuture channelFuture<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>CF<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务器监听端口[3333]成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务器监听端口[3333]失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="3-6-Http服务"><a href="#3-6-Http服务" class="headerlink" title="3.6 Http服务"></a>3.6 Http服务</h3><blockquote>
<p>TestServer.java</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kag<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>http<span class="token punctuation">;</span>

<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>bootstrap<span class="token punctuation">.</span>ServerBootstrap<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>ChannelFuture<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>EventLoopGroup<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>NioEventLoopGroup<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>NioServerSocketChannel<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author: KHighness
 * @date: 2020/9/26 10:34
 * @apiNote:
 */</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestServer</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

        EventLoopGroup bossGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        EventLoopGroup workerGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            ServerBootstrap serverBootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            serverBootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>bossGroup<span class="token punctuation">,</span> workerGroup<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioServerSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TestServerInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            ChannelFuture CF <span class="token operator">=</span> serverBootstrap<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">3333</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            CF<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            bossGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            workerGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>TestServerInitializer.java</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kag<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>http<span class="token punctuation">;</span>

<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>ChannelInitializer<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>ChannelPipeline<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>SocketChannel<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServerCodec<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author: KHighness
 * @date: 2020/9/26 10:39
 * @apiNote:
 */</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestServerInitializer</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel socketChannel<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 向管道加入处理器</span>

        <span class="token comment" spellcheck="true">// 得到管道</span>
        ChannelPipeline pipeline <span class="token operator">=</span> socketChannel<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 加入一个Netty提供的HttpServerCodeC codec => [coder - decoder]</span>
        <span class="token comment" spellcheck="true">// 1、HttpServerCodeC: 处理http的编&amp;解码器</span>
        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"MyHttpServerCodec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HttpServerCodec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 2、增加一个自定义handler</span>
        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"MyTestServerHandler"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TestHttpServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>TestHttpServerHandler.java</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kag<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>http<span class="token punctuation">;</span>

<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>ChannelInitializer<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>ChannelPipeline<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>SocketChannel<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServerCodec<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author: KHighness
 * @date: 2020/9/26 10:39
 * @apiNote:
 */</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestServerInitializer</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel socketChannel<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 向管道加入处理器</span>

        <span class="token comment" spellcheck="true">// 得到管道</span>
        ChannelPipeline pipeline <span class="token operator">=</span> socketChannel<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 加入一个Netty提供的HttpServerCodeC codec => [coder - decoder]</span>
        <span class="token comment" spellcheck="true">// 1、HttpServerCodeC: 处理http的编&amp;解码器</span>
        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"MyHttpServerCodec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HttpServerCodec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 2、增加一个自定义handler</span>
        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"MyTestServerHandler"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TestHttpServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="5-核心"><a href="#5-核心" class="headerlink" title="5. 核心"></a>5. 核心</h2><h3 id="4-1-BootStrap、ServerBootStrap"><a href="#4-1-BootStrap、ServerBootStrap" class="headerlink" title="4.1 BootStrap、ServerBootStrap"></a>4.1 BootStrap、ServerBootStrap</h3><blockquote>
<p>说明</p>
</blockquote>
<p><code>BootStrap</code>意思是引导程序，一个<code>Netty</code>应用通常由一个<code>BootStrap</code>开始，主要作用是配置整个<code>Netty</code>程序，串联各个组件，<code>Netty</code>中<code>BootStrap</code>类是客户端程序的启动引导类，<code>ServerBootStrap</code>是服务器端启动引导类</p>
<blockquote>
<p>常用方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法名称</th>
<th align="center">方法介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">public ServerBootStrap group(EventLoopGroup parentGroup, EventLoopGroup childGroup)</td>
<td align="center">该方法用于服务器端，用来设置两个EventLoop</td>
</tr>
<tr>
<td align="center">public B group(EventLoopGroup group)</td>
<td align="center">该方法用于客户端，用来设置一个EventLoop</td>
</tr>
<tr>
<td align="center">public B channel(Class&lt;? extends C&gt; channelClass)</td>
<td align="center">该方法用来设置一个服务器端的通道实现</td>
</tr>
<tr>
<td align="center">public <T> B option(ChannelOption<T> option, T value)</td>
<td align="center">用来给ServerChannel添加配置</td>
</tr>
<tr>
<td align="center">public  ServerBootstrap childOption(ChannelOption childOption, T value)</td>
<td align="center">用来给接收到的通道添加配置</td>
</tr>
<tr>
<td align="center">public ServerBootstrap childHandler(ChannelHandler childHandler)</td>
<td align="center">该方法用来设置业务处理类(自定义的handler)</td>
</tr>
<tr>
<td align="center">public ChannelFuture bind(int inetPort)</td>
<td align="center">该方法用于服务器端，用来设置占用的端口号</td>
</tr>
<tr>
<td align="center">public ChannelFuture connect(String inetHost, int inetPort)</td>
<td align="center">该方法用于客户端，用来连接服务器</td>
</tr>
</tbody></table>
<h3 id="4-2-Future、ChannelFuture"><a href="#4-2-Future、ChannelFuture" class="headerlink" title="4.2 Future、ChannelFuture"></a>4.2 Future、ChannelFuture</h3><blockquote>
<p>说明</p>
</blockquote>
<p><code>Netty</code>中所有的IO操作都是异步的，不能立刻得知消息是否被正确处理。但是可以过一会等它执行完或者直接注册一个监听，具体的实现就是通过<code>Future</code>和<code>ChannelFuture</code>，它们可以注册一个监听，当操作执行成功或失败时监听会自动触发注册的监听事件</p>
<blockquote>
<p>常用方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法名称</th>
<th align="center">方法介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Channel channel()</td>
<td align="center">返回当前正在进行IO操作的通道</td>
</tr>
<tr>
<td align="center">ChannelFuture sync()</td>
<td align="center">等待异步操作执行完毕，相当于将阻塞在当前</td>
</tr>
</tbody></table>
<h3 id="4-3-Channel"><a href="#4-3-Channel" class="headerlink" title="4.3 Channel"></a>4.3 Channel</h3><blockquote>
<p>说明</p>
</blockquote>
<ul>
<li><code>Netty</code>网络通信的组件，能够用于执行网络I/O操作</li>
<li>通过<code>Channel</code>可获得当前网络连接的通道的状态</li>
<li>通过<code>Channel</code>可获得网络连接的配置参数</li>
<li><code>Channel</code>通过异步的网络I/O操作(比如：建立连接、读写和绑定端口)，异步调用意味着任何I/O调用都将立即返回，并且不保证在调用结束时所请求的I/O操作已完成</li>
<li>调用立即返回一个<code>ChannelFuture</code>实例，通过注册器到<code>ChannelFuture</code>上，可以I/O操作成功、失败或取消时回调通知调用方 </li>
<li>支持关联I/O操作与对应的处理程序</li>
<li>不同协议、不同的阻塞类型的连接都有不同的<code>Channel</code>类型与之对应</li>
</ul>
<blockquote>
<p>常见Channel类型</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">NioSocketChannel</td>
<td align="center">异步的客户端TCP Socket连接</td>
</tr>
<tr>
<td align="center">NioServerSocketChannel</td>
<td align="center">异步的服务器端TCP Socket连接</td>
</tr>
<tr>
<td align="center">NioDatagramChannel</td>
<td align="center">异步的UDP连接</td>
</tr>
<tr>
<td align="center">NioSctpChannel</td>
<td align="center">异步的客户端Sctp连接</td>
</tr>
<tr>
<td align="center">NioSctpServerChannel</td>
<td align="center">异步的Sctp服务器端连接，这些通道涵盖了UDP和TCP网络I/O以及文件I/O</td>
</tr>
</tbody></table>
<h3 id="4-4-Selector"><a href="#4-4-Selector" class="headerlink" title="4.4 Selector"></a>4.4 Selector</h3><blockquote>
<p>说明</p>
</blockquote>
<ul>
<li><code>Netty</code>基于<code>Selector</code>对象实现I/O多路复用，通过<code>Selector</code>一个线程可以监听多个连接的<code>Channel</code>事件</li>
<li>当向一个<code>Selector</code>中注册<code>Channel</code>后，<code>Selector</code>内部的机制就可以自动不断地查询(<code>Select</code>)这些注册的<code>Channel</code>是否有已就绪的I/O事件(比如：可读、可写、网络连接完成等)，这样程序就可以很简单地使用一个线程高效地管理多个<code>Channel</code></li>
<li>同时，<code>Netty</code>中对<code>Selector</code>中的<code>selectedKey</code>集合进行了替换，它替换成了一个它自己实现的一个<code>set</code>集合，这样效率更高</li>
</ul>
<h3 id="4-5-ChannelHandler及其实现类"><a href="#4-5-ChannelHandler及其实现类" class="headerlink" title="4.5 ChannelHandler及其实现类"></a>4.5 ChannelHandler及其实现类</h3><blockquote>
<p>说明</p>
</blockquote>
<ul>
<li><p><code>ChannelHandler</code>是一个接口，处理I/O事件或拦截I/O操作，并将其转发到<code>ChannelPipeline</code>(业务处理链)中的下一个处理程序</p>
</li>
<li><p><code>ChannelHandler</code>本身并没有提供很多方法，因为这个接口有许多的方法需要实现，方便使用期间，可以继承它的子类</p>
</li>
<li><p>我们经常需要自定义一个<code>Handler</code>类取继承<code>ChannelInboundHandlerAdapter</code>，然后通过重写相应方法实现业务逻辑</p>
<p>一般需要重写的方法</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChannelInboundHandlerAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelHandlerAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">ChannelInboundHandler</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//通道注册事件</span>
    <span class="token annotation punctuation">@Skip</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRegistered</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span><span class="token function">fireChannelRegistered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//通道取消注册事件</span>
    <span class="token annotation punctuation">@Skip</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelUnregistered</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span><span class="token function">fireChannelUnregistered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//通道就绪事件</span>
    <span class="token annotation punctuation">@Skip</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelActive</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span><span class="token function">fireChannelActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//通道断联事件</span>
    <span class="token annotation punctuation">@Skip</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelInactive</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span><span class="token function">fireChannelInactive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//通道读取数据事件</span>
    <span class="token annotation punctuation">@Skip</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span><span class="token function">fireChannelRead</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//通道数据读取完毕事件</span>
    <span class="token annotation punctuation">@Skip</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelReadComplete</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span><span class="token function">fireChannelReadComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//用法事件触发</span>
    <span class="token annotation punctuation">@Skip</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">userEventTriggered</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object evt<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span><span class="token function">fireUserEventTriggered</span><span class="token punctuation">(</span>evt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//通道可写性更改事件</span>
    <span class="token annotation punctuation">@Skip</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelWritabilityChanged</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span><span class="token function">fireChannelWritabilityChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//通道发生异常事件</span>
    <span class="token annotation punctuation">@Skip</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"deprecation"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span><span class="token function">fireExceptionCaught</span><span class="token punctuation">(</span>cause<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>ChannelInboundHandler</code>  用于处理入站I/O事件</li>
<li><code>ChannelOutboundHandler</code>  用于处理出战I/O事件</li>
</ul>
<blockquote>
<p>适配器</p>
</blockquote>
</li>
<li><p><code>ChannelInboundHandlerAdapter</code> 用于处理入站 I/O 事件</p>
</li>
<li><p><code>ChannelOutboundHandlerAdapter</code> 用于处理出站 I/O 操作</p>
</li>
<li><p><code>ChannelDuplexHandler</code> 用于处理入站和出站事件</p>
</li>
</ul>
<h3 id="4-6-Pipeline、Channel"><a href="#4-6-Pipeline、Channel" class="headerlink" title="4.6 Pipeline、Channel"></a>4.6 Pipeline、Channel</h3><blockquote>
<p>说明</p>
</blockquote>
<ul>
<li><p><code>ChannelPipeline</code>是一个Handler的集合，它负责处理和拦截<code>inbound</code>和<code>outbound</code>的事件和操作，相当于一个贯穿<code>Netty</code>的链（通俗的讲：<code>ChannelPipeline</code>是保存<code>ChannelHandler</code>的<code>list</code>，用于处理或拦截<code>Channel</code>的入站事件和出战操作）</p>
</li>
<li><p><code>ChanenelPipline</code>实现了一种高级形式的拦截过滤器模式，使用户可以完全控制事件的处理方式，以及<code>Channel</code>中各个的<code>ChannelHandler</code>如何相互交互</p>
</li>
<li><p>在<code>Netty</code>中每个<code>Channel</code>都有且仅有一个<code>ChannelPipeline</code>与之对应，他们的组成关系如下</p>
<img src="/posts/1c6ba3e2/image-20201002192427279.png" class="" title="image-20201002192427279">
</li>
<li><p>一个<code>Channel</code>包含一个<code>ChannelPipeline</code>，而<code>ChannelPipeline</code>中又维护了一个由<code>ChannelHandlerContext</code>组成的双向链表，并且每个<code>ChannelHandlerContext</code>中又关联着一个<code>ChannelHandler</code></p>
</li>
<li><p>入站事件和出战事件在一个双向链表中，入站事件会从链表<code>head</code>往后传递到最后一个入站的handler，出站事件会从链表<code>tail</code>往前传递到最前一个出站的<code>handler</code>，两种类型的<code>handler</code>互不干扰</p>
</li>
</ul>
<blockquote>
<p>常用方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法名称</th>
<th align="center">方法介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ChannelPipeline addFirst(ChannelHandler… handlers)</td>
<td align="center">把一个业务处理类（handler）添加到链中的第一个位置</td>
</tr>
<tr>
<td align="center">ChannelPipeline addLast(ChannelHandler… handlers)</td>
<td align="center">把一个业务处理类（handler）添加到链中的最后一个位置</td>
</tr>
</tbody></table>
<h3 id="4-7-ChannelHandlerContext"><a href="#4-7-ChannelHandlerContext" class="headerlink" title="4.7 ChannelHandlerContext"></a>4.7 ChannelHandlerContext</h3><blockquote>
<p>说明</p>
</blockquote>
<ul>
<li>保存<code>Channel</code>相关的所有上下文信息，同时关联一个ChannelHandler对象</li>
<li>即<code>ChannelHandlerContext</code>中包含一个具体的事件处理器<code>ChannelHandler</code>，同时<code>ChannelHandlerContext</code>中也绑定了对应的<code>Pipeline</code>和<code>Channel</code>的信息，方便对<code>ChannelHandler</code>进行调用</li>
</ul>
<blockquote>
<p>常见方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法名称</th>
<th align="center">方法介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ChannelFuture close()</td>
<td align="center">关闭通道</td>
</tr>
<tr>
<td align="center">ChannelOutboundInvoker flush()</td>
<td align="center">刷新</td>
</tr>
<tr>
<td align="center">ChannelFuture writeAndFlush(Object msg)</td>
<td align="center">将数据写到ChannelPipeline中当前ChannelHandler的下一个ChannelHandler开始处理</td>
</tr>
</tbody></table>
<h3 id="4-8-ChannelOption"><a href="#4-8-ChannelOption" class="headerlink" title="4.8 ChannelOption"></a>4.8 ChannelOption</h3><blockquote>
<p>说明</p>
</blockquote>
<p><code>Netty</code>在创建<code>Channel</code>实例后，一般都需要设置<code>ChannelOption</code>参数</p>
<blockquote>
<p>参数如下：</p>
</blockquote>
<ul>
<li>ChannelOption.SO_BACKLOG:<ul>
<li>对应TCP/IP协议listen函数中的backlog参数，用来初始化服务器可连接队列大小</li>
<li>服务端处理客户端连接请求是顺序处理的，所以同一时间只能处理一个客户端连接。多个客户端来的时候，服务端将不能处理的客户端连接请求放在队列中等待处理，backlog参数指定了队列的大小</li>
</ul>
</li>
<li>ChannelOption.SO_KEEPALIVE:<ul>
<li>一直保持连接活动状态</li>
</ul>
</li>
</ul>
<h3 id="4-9-EventLoopGroup和其实现类NioEventLoopGroup"><a href="#4-9-EventLoopGroup和其实现类NioEventLoopGroup" class="headerlink" title="4.9 EventLoopGroup和其实现类NioEventLoopGroup"></a>4.9 EventLoopGroup和其实现类NioEventLoopGroup</h3><blockquote>
<p>说明</p>
</blockquote>
<ul>
<li><code>EventLoopGroup</code>是一组<code>EventLoop</code>的抽象，<code>Netty</code>为了更好的利用多核CPU资源，一般会有多个<code>EventLoop</code>同时工作，每个<code>EventLoop</code>维护者一个Selector实例。</li>
<li><code>EventLoopGroup</code>提供next接口，可以从组里面按照一定规则获取其中一个<code>EventLoop</code>来处理任务。在Netty服务器端编程中，我们一般都需要提供两个<code>EventLoopGroup</code>，<code>BossGroup</code>和<code>WorkerGroup</code></li>
<li>通常一个服务端口即一个<code>ServerSocketChannel</code>对应一个<code>Selector</code>和一个<code>EventLoop</code>线程。<code>BossEventLoop</code>负责接收客户端的连接并将<code>SocketChannel</code>交给<code>WorkerEventLoopGroup</code>来进行IO处理</li>
<li><code>BossEventLoopGroup</code>通常是一个单线程的<code>EventLoop</code>，<code>EventLoop</code>维护着一个注册了<code>ServerSocketChannel</code>的<code>Selector</code>实例<code>BossEventLoop</code>不断轮询<code>Selector</code>将连接事件分离出来</li>
<li>通常是OP_ACCEPT事件，然后将接收到的<code>SocketChannel</code>交给<code>WorkerEventLoopGroup</code></li>
<li><code>WorkerEventLoopGroup</code>会由<code>next</code>选择其中一个<code>EventLoop</code>来将这个<code>SocketChannel</code>注册到其维护的<code>Selector</code>并对其后续的IO事件进行处理</li>
</ul>
<blockquote>
<p>常用方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法名称</th>
<th align="center">方法介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">public NioEventLoopGroup()</td>
<td align="center">构造方法</td>
</tr>
<tr>
<td align="center">public Future&lt;?&gt; shutdownGracefully()</td>
<td align="center">断开连接，关闭线程</td>
</tr>
</tbody></table>
<h3 id="4-10-Unpooled"><a href="#4-10-Unpooled" class="headerlink" title="4.10 Unpooled"></a>4.10 Unpooled</h3><blockquote>
<p>说明</p>
</blockquote>
<p><code>Netty</code>提供一个专门用来操作缓冲区（即<code>Netty</code>的数据容器）的工具类</p>
<blockquote>
<p>常用方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法名称</th>
<th align="center">方法介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">public static ByteBuf copiedBuffer(CharSequence string, Charset charset)</td>
<td align="center">通过给定的数据和字符编码返回一个 ByteBuf 对象（类似于 NIO 中的 ByteBuffer 但有区别）</td>
</tr>
</tbody></table>
<h3 id="4-11-群聊系统"><a href="#4-11-群聊系统" class="headerlink" title="4.11 群聊系统"></a>4.11 群聊系统</h3><blockquote>
<p>要求</p>
</blockquote>
<ul>
<li>编写一个 Netty 群聊系统，实现服务器端和客户端之间的数据简单通讯（非阻塞）</li>
<li>实现多人群聊</li>
<li>服务器：可以监测用户上线，离线，并实现消息转发功能</li>
<li>客户端：通过channel 可以无阻塞发送消息给其它所有用户，同时可以接受其它用户发送的消息(由服务器转发得到)</li>
</ul>
<blockquote>
<p>GroupChatServer.java</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kag<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>groupChat<span class="token punctuation">;</span>

<span class="token keyword">import</span> com<span class="token punctuation">.</span>kag<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>groupchat<span class="token punctuation">.</span>GroupChatClient<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>bootstrap<span class="token punctuation">.</span>ServerBootstrap<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>NioEventLoopGroup<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>SocketChannel<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>NioServerSocketChannel<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>NioSocketChannel<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>string<span class="token punctuation">.</span>StringDecoder<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>string<span class="token punctuation">.</span>StringEncoder<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author: KHighness
 * @date: 2020/10/2 8:19
 * @apiNote:
 */</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GroupChatServer</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> port<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">GroupChatServer</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>port <span class="token operator">=</span> port<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 创建两个线程组</span>
        EventLoopGroup bossGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        EventLoopGroup workerGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        ServerBootstrap serverBootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        serverBootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>workerGroup<span class="token punctuation">,</span> workerGroup<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioServerSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>SO_BACKLOG<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">childOption</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>SO_KEEPALIVE<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                        <span class="token comment" spellcheck="true">// 获取pipeline</span>
                        ChannelPipeline pipeline <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
                        <span class="token comment" spellcheck="true">// 向pipeline加入解码器</span>
                        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"decoder"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment" spellcheck="true">// 向pipeline加入编码器</span>
                        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"encoder"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StringEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment" spellcheck="true">// 加入自己的业务处理handler</span>
                        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GroupChatServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"▶-----Netty服务器启动-----◀"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ChannelFuture channelFuture <span class="token operator">=</span> serverBootstrap<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">// 监听关闭</span>
            channelFuture<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            bossGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            workerGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">GroupChatServer</span><span class="token punctuation">(</span><span class="token number">3333</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>GroupChatServerHandler.java</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kag<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>groupChat<span class="token punctuation">;</span>

<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>Channel<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>ChannelHandlerContext<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>SimpleChannelInboundHandler<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>group<span class="token punctuation">.</span>ChannelGroup<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>group<span class="token punctuation">.</span>DefaultChannelGroup<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>EventExecutor<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>GlobalEventExecutor<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author: KHighness
 * @date: 2020/10/2 8:33
 * @apiNote:
 */</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GroupChatServerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleChannelInboundHandler</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 定义一个channel组，管理所有的channel</span>
    <span class="token comment" spellcheck="true">// GlobalEventExecutor.INSTANCE 是全局的时间执行器，是一个单例</span>
    EventExecutor executor<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> ChannelGroup channelGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultChannelGroup</span><span class="token punctuation">(</span>GlobalEventExecutor<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> String <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        SimpleDateFormat simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * HandlerAdded
     * 表示连接建立，一旦连接，第一个被执行
     * @param ctx
     * @throws Exception
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlerAdded</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Channel channel <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 将该客户加入聊天的信息推送给其他在线的客户</span>
        <span class="token comment" spellcheck="true">// 该方法会将channelGroup中的所有channel遍历，并发送消息</span>
        channelGroup<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" [客户端]"</span> <span class="token operator">+</span> channel<span class="token punctuation">.</span><span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"加入聊天\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        channelGroup<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * HandlerRemoved
     * 表示断开连接，将XX客户离线信息推送给当前在线客户
     * @param ctx
     * @throws Exception
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlerRemoved</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Channel channel <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        channelGroup<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" [客户端]"</span> <span class="token operator">+</span> channel<span class="token punctuation">.</span><span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"离开聊天\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Channel Group Size = "</span> <span class="token operator">+</span> channelGroup<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * channelActive
     * 表示channel处于活动状态，提示XX上线
     * @param ctx
     * @throws Exception
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelActive</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"上线"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * channelInactive
     * 表示channel处于非活动状态
     * @param ctx
     * @throws Exception
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelInactive</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"离线"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * ChannelRead0
     * 转发消息
     * @param channelHandlerContext
     * @param s
     * @throws Exception
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">channelRead0</span><span class="token punctuation">(</span>ChannelHandlerContext channelHandlerContext<span class="token punctuation">,</span> String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Channel channel <span class="token operator">=</span> channelHandlerContext<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 遍历ChannelGroup</span>
        channelGroup<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>ch <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>channel <span class="token operator">!=</span> ch<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 不是当前channel，直接转发</span>
                ch<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" [客户]"</span> <span class="token operator">+</span> channel<span class="token punctuation">.</span><span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"："</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token comment" spellcheck="true">// 当前channel是自己</span>
                ch<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" [自己]: "</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 异常处理
     * @param ctx
     * @param cause
     * @throws Exception
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">exceptionCaught</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>GroupChatClient.java</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kag<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>groupChat<span class="token punctuation">;</span>

<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>bootstrap<span class="token punctuation">.</span>Bootstrap<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>*<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>NioEventLoopGroup<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>SocketChannel<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>NioSocketChannel<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>string<span class="token punctuation">.</span>StringDecoder<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>codec<span class="token punctuation">.</span>string<span class="token punctuation">.</span>StringEncoder<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>SocketAddress<span class="token punctuation">;</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author: KHighness
 * @date: 2020/10/2 9:22
 * @apiNote:
 */</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GroupChatClient</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> String host<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> port<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">GroupChatClient</span><span class="token punctuation">(</span>String host<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>host <span class="token operator">=</span> host<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>port <span class="token operator">=</span> port<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        EventLoopGroup group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Bootstrap bootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    <span class="token annotation punctuation">@Override</span>
                    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                        <span class="token comment" spellcheck="true">// 得到pipeline</span>
                        ChannelPipeline pipeline <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment" spellcheck="true">// 加入相关handler</span>
                        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"decoder"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"encoder"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StringEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment" spellcheck="true">// 加入自定义的handler</span>
                        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GroupChatClientHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            ChannelFuture channelFuture <span class="token operator">=</span> bootstrap<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Channel channel <span class="token operator">=</span> channelFuture<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"▶-----"</span> <span class="token operator">+</span> channel<span class="token punctuation">.</span><span class="token function">localAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-----◀"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 输入信息</span>
            Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                String msg <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">// 通过channel发送到服务器端</span>
                channel<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>msg <span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            group<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">GroupChatClient</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">3333</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>GroupChatClientHandler.java</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kag<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>groupChat<span class="token punctuation">;</span>

<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>ChannelHandlerContext<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>SimpleChannelInboundHandler<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author: KHighness
 * @date: 2020/10/2 10:06
 * @apiNote:
 */</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GroupChatClientHandler</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleChannelInboundHandler</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">channelRead0</span><span class="token punctuation">(</span>ChannelHandlerContext channelHandlerContext<span class="token punctuation">,</span> String s<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="4-12-心跳检测"><a href="#4-12-心跳检测" class="headerlink" title="4.12 心跳检测"></a>4.12 心跳检测</h3><blockquote>
<p>要求</p>
</blockquote>
<ul>
<li>当服务器超过3秒没有读操作时，就提示读空闲</li>
<li>当服务器超过5秒没有写操作时，就提示写空闲</li>
<li>当服务器超过7秒没有读或写时，就提示读写空闲</li>
</ul>
<blockquote>
<p>MyServer.java</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kag<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>heartbeat<span class="token punctuation">;</span>

<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>bootstrap<span class="token punctuation">.</span>ServerBootstrap<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>ChannelFuture<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>ChannelInitializer<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>ChannelPipeline<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>NioEventLoopGroup<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>SocketChannel<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>NioServerSocketChannel<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>LogLevel<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>logging<span class="token punctuation">.</span>LoggingHandler<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>timeout<span class="token punctuation">.</span>IdleStateHandler<span class="token punctuation">;</span>

<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author: KHighness
 * @date: 2020/10/2 10:25
 * @apiNote:
 */</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServer</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        NioEventLoopGroup bossGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        NioEventLoopGroup workerGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            ServerBootstrap serverBootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            serverBootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>bossGroup<span class="token punctuation">,</span> workerGroup<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioServerSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoggingHandler</span><span class="token punctuation">(</span>LogLevel<span class="token punctuation">.</span>INFO<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//为BossGroup中的请求添加日志处理Handler</span>
                    <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                        <span class="token annotation punctuation">@Override</span>
                        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                            ChannelPipeline pipeline <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token comment" spellcheck="true">/**
                             * 加入一个 netty 提供的 IdleStateHandler
                             * 说明
                             * 1、IdleStateHandler 是 netty 提供的检测空闲状态的处理器
                             * 2、long readerIdleTime：表示多长时间没有读，就会发送一个心跳检测包检测是否还是连接的状态
                             * 3、long writerIdleTime：表示多长时间没有写，就会发送一个心跳检测包检测是否还是连接的状态
                             * 4、long allIdleTime：表示多长时间没有读写，就会发送一个心跳检测包检测是否还是连接的状态
                             * 5、当 IdleStateEvent 触发后，就会传递给管道的下一个 Handler，通过调用（触发）下一个Handler的 userEventTriggered，在该方法区处理这个事件。
                             */</span>
                            pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IdleStateHandler</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                            <span class="token comment" spellcheck="true">//加入一个对空闲检测进一步处理的Handler（自定义）</span>
                            pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//启动服务器，设置为同步模式</span>
            ChannelFuture channelFuture <span class="token operator">=</span> serverBootstrap<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">3333</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            channelFuture<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            bossGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            workerGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>MyServerHandler.java</p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kag<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>heartbeat<span class="token punctuation">;</span>

<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>ChannelHandlerContext<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>ChannelInboundHandlerAdapter<span class="token punctuation">;</span>
<span class="token keyword">import</span> io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>timeout<span class="token punctuation">.</span>IdleStateEvent<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * @author: KHighness
 * @date: 2020/10/2 10:48
 * @apiNote:
 */</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInboundHandlerAdapter</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     *
     * @param ctx 上下文
     * @param evt 事件
     * @throws Exception
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">userEventTriggered</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object evt<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>evt <span class="token keyword">instanceof</span> <span class="token class-name">IdleStateEvent</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">// 将evt向下转型</span>
            IdleStateEvent event <span class="token operator">=</span> <span class="token punctuation">(</span>IdleStateEvent<span class="token punctuation">)</span> evt<span class="token punctuation">;</span>
            String eventType <span class="token operator">=</span> null<span class="token punctuation">;</span>
            <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> READER_IDLE<span class="token operator">:</span>
                    eventType <span class="token operator">=</span> <span class="token string">"读空闲"</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> WRITER_IDLE<span class="token operator">:</span>
                    eventType <span class="token operator">=</span> <span class="token string">"写空闲"</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token keyword">case</span> ALL_IDLE<span class="token operator">:</span>
                    eventType <span class="token operator">=</span> <span class="token string">"读写空闲"</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"——>超时："</span> <span class="token operator">+</span> eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">// 如果发生空闲，直接关闭通道</span>
<span class="token comment" spellcheck="true">//            ctx.channel().close();</span>
<span class="token comment" spellcheck="true">//            System.out.println("服务器关闭通道···");</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="4-13-简单总结"><a href="#4-13-简单总结" class="headerlink" title="4.13 简单总结"></a>4.13 简单总结</h3><blockquote>
<p>服务器</p>
</blockquote>
<ol>
<li>创建两个线程组，<code>bossGroup</code>和<code>workerGroup</code></li>
<li>创建服务器启动对象<code>ServerBootStrap</code></li>
<li>链式编程配置<code>ServerBootStrap</code>的参数<ol>
<li><code>group</code>：设置线程组<code>bossGroup</code>和<code>workerGroup</code></li>
<li><code>channel</code>：设置通道实现，一般选择<code>NioServerSocketChannel</code></li>
<li><code>option</code>：设置可连接线程队列以及大小，一般选择<code>SO_BACKLOG</code></li>
<li><code>childOption</code>：设置保持活动连接状态，选择<code>SO_KEEPALIVE</code></li>
<li><code>handler</code>：给<code>bossGroup</code>设置<code>Handler</code></li>
<li><code>childHandler</code>：给<code>workerGroup</code>设置<code>Hadnler</code></li>
</ol>
</li>
<li><code>ServerBootStrap</code>绑定端口，设置同步，并且监听通道关闭事件</li>
</ol>
<blockquote>
<p>客户端</p>
</blockquote>
<ol>
<li>创建一个线程组<code>group</code></li>
<li>创建客户端启动对象<code>BootStrap</code></li>
<li>链式编程配置<code>BootStrap</code>的参数<ol>
<li><code>group</code>：设置线程组<code>group</code></li>
<li><code>channel</code>：设置通道实现，一般选择<code>NioSocketChannel</code></li>
<li><code>handler</code>：设置<code>Handler</code></li>
</ol>
</li>
<li><code>BootStrap</code>绑定端口，设置同步，并且监听通道关闭事件</li>
</ol>
<blockquote>
<p>常见Handler</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Handler</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">SimpleChannelInboundHandler</td>
<td align="center">处理通信(服务器最常用)</td>
</tr>
<tr>
<td align="center">IdleStateHandler</td>
<td align="center">检测空闲状态(心跳检测)</td>
</tr>
<tr>
<td align="center">WebSocketServerProtocolHandler</td>
<td align="center">将http协议升级ws协议，保持长连接</td>
</tr>
</tbody></table>
<blockquote>
<p>Handler常用方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Method</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">handlerAdded(ChannelHandlerContext ctx)</td>
<td align="center">连接建立，一旦建立连接，第一个被执行的方法</td>
</tr>
<tr>
<td align="center">handlerRemoved(ChannelHandlerContext ctx)</td>
<td align="center">连接断开，将XX客户离线信息推送给当前在线客户</td>
</tr>
<tr>
<td align="center">channelActive(ChannelHandlerContext ctx)</td>
<td align="center">表示channel处于活动状态，提示XX上线</td>
</tr>
<tr>
<td align="center">channelInactive(ChannelHandlerContext ctx)</td>
<td align="center">表示channel处于非活动状态，提示XX离线</td>
</tr>
<tr>
<td align="center">channelRead0(ChannelHandlerContext channelHandlerContext, String s)</td>
<td align="center">读取数据，并进行消息转发</td>
</tr>
<tr>
<td align="center">exceptionCaught(ChannelHandlerContext ctx, Throwable cause)</td>
<td align="center">异常处理</td>
</tr>
<tr>
<td align="center">userEventTriggered(ChannelHandlerContext ctx, Object evt)</td>
<td align="center">事件触发器。在<code>IdleStateHandler</code>后面加上一个触发器，可以检测心跳。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Server</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8-Stream</title>
    <url>/posts/3e51ba23/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Java8-Stream"><a href="#Java8-Stream" class="headerlink" title="Java8-Stream"></a>Java8-Stream</h1><center>
    <font face="Kristen ITC" color="#555555" size=3>Khighness</font><br>
</center>



<h2 id="一-概述"><a href="#一-概述" class="headerlink" title="一. 概述"></a>一. 概述</h2><p>​       Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。</p>
<p>特点：</p>
<ul>
<li><p>不是数据结构，不会保存数据。</p>
</li>
<li><p>不会修改原来的数据源，它会将操作后的数据保存到另外一个对象中。（保留意见：毕竟peek方法可以修改流中元素）</p>
</li>
<li><p>惰性求值，流在中间处理过程中，只是对操作进行了记录，并不会立即执行，需要等到执行终止操作的时候才会进行实际的计算。</p>
</li>
</ul>
<a id="more"></a>



<h2 id="二-分类"><a href="#二-分类" class="headerlink" title="二. 分类"></a>二. 分类</h2><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">状态</th>
<th align="center">API</th>
</tr>
</thead>
<tbody><tr>
<td align="center">中间操作</td>
<td align="center">有状态</td>
<td align="center">unordered() filter() map() mapToInt() mapToDouble() flatMap() flatMapToInt() flatMapToLong() flatMapToDouble() peek()</td>
</tr>
<tr>
<td align="center">中间操作</td>
<td align="center">无状态</td>
<td align="center">distinct() sorted() limit() skip()</td>
</tr>
<tr>
<td align="center">结束操作</td>
<td align="center">非短路操作</td>
<td align="center">foreach() forEachOrdered() toArray() reduce() collect() max() min() count()</td>
</tr>
<tr>
<td align="center">结束操作</td>
<td align="center">短路操作</td>
<td align="center">anyMatch() allMatch() noneMatch() findFirst() findAny()</td>
</tr>
</tbody></table>
<p>注释：</p>
<ul>
<li><p>无状态：指元素的处理不受之前元素的影响；</p>
</li>
<li><p>有状态：指该操作只有拿到所有元素之后才能继续下去。</p>
</li>
<li><p>非短路操作：指必须处理所有元素才能得到最终结果；</p>
</li>
<li><p>短路操作：指遇到某些符合条件的元素就可以得到最终结果，如 A || B，只要A为true，则无需判断B的结果。</p>
</li>
</ul>
<h2 id="三-使用"><a href="#三-使用" class="headerlink" title="三. 使用"></a>三. 使用</h2><h3 id="1-流的常用创建方法"><a href="#1-流的常用创建方法" class="headerlink" title="1. 流的常用创建方法"></a>1. 流的常用创建方法</h3><h4 id="1-1-使用Collection下的-stream-和-parallelStream-方法"><a href="#1-1-使用Collection下的-stream-和-parallelStream-方法" class="headerlink" title="1.1 使用Collection下的 stream() 和 parallelStream() 方法"></a>1.1 使用Collection下的 <code>stream()</code> 和 <code>parallelStream()</code> 方法</h4><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * Collection.
     *            stream()
     *            parallelStream()
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------method1----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> parallelStream <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="1-2-使用Arrays中的-stream-方法，将数组转成流"><a href="#1-2-使用Arrays中的-stream-方法，将数组转成流" class="headerlink" title="1.2 使用Arrays中的 stream() 方法，将数组转成流"></a>1.2 使用Arrays中的 <code>stream()</code> 方法，将数组转成流</h4><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * Arrays.stream()
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------method2----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Double<span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        Stream<span class="token operator">&lt;</span>Double<span class="token operator">></span> stream <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
        stream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="1-3-使用Stream中的静态方法-of-、iterate-、generate"><a href="#1-3-使用Stream中的静态方法-of-、iterate-、generate" class="headerlink" title="1.3 使用Stream中的静态方法: of()、iterate()、generate()"></a>1.3 使用Stream中的静态方法: <code>of()</code>、<code>iterate()</code>、<code>generate()</code></h4><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * Stream.
     *        of()
     *        iterate()
     *        generate()
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------method3----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stream1 <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stream1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>

        Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stream2 <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stream2<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>

        Stream<span class="token operator">&lt;</span>Double<span class="token operator">></span> stream3 <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>Math<span class="token operator">:</span><span class="token operator">:</span>random<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stream3<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="1-4-使用-BufferedReader-lines-方法，将每行内容转成流"><a href="#1-4-使用-BufferedReader-lines-方法，将每行内容转成流" class="headerlink" title="1.4 使用 BufferedReader.lines() 方法，将每行内容转成流"></a>1.4 使用 <code>BufferedReader.lines()</code> 方法，将每行内容转成流</h4><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * BufferedReader.lines()
     * @throws IOException
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------method4----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        BufferedReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"D:/Java/Test/K1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> lines <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        lines<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="1-5-使用-Pattern-splitAsStream-方法，将字符串分隔成流"><a href="#1-5-使用-Pattern-splitAsStream-方法，将字符串分隔成流" class="headerlink" title="1.5 使用 Pattern.splitAsStream() 方法，将字符串分隔成流"></a>1.5 使用 <code>Pattern.splitAsStream()</code> 方法，将字符串分隔成流</h4><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * Pattern.splitAsStream()
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------method5----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Pattern pattern <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stringStream <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">splitAsStream</span><span class="token punctuation">(</span><span class="token string">"K,H,I,G,H,N,E,S,S"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stringStream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-流的中间操作"><a href="#2-流的中间操作" class="headerlink" title="2. 流的中间操作"></a>2. 流的中间操作</h3><h4 id="2-1-筛选与切片"><a href="#2-1-筛选与切片" class="headerlink" title="2.1 筛选与切片"></a>2.1 筛选与切片</h4><ul>
<li>filter: 过滤流中的某些元素</li>
<li>limit: 获取前n个元素</li>
<li>skip: 跳过前n个元素</li>
<li>limit + skip ==&gt; 可以实现分页[skip(PageNumber * PageSize).limit(PageSize)]</li>
<li>distinct: 通过流中元素的hashCode()和equals()去除重复元素</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 筛选与切片
     * filter: 过滤流中的某些元素
     * limit: 获取前n个元素
     * skip: 跳过前n个元素
     * limit + skip ==> 可以实现分页[skip(PageNumber * PageSize).limit(PageSize)]
     * distinct: 通过流中元素的hashCode()和equals()去除重复元素
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------method1----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>
                                            <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span>
                                            <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span>
                                            <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span>
                                            <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span>
                                            <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span>
                                            <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span>
                                            <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span>
                                            <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------过滤大于5的元素----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stream1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-</span><span class="token operator">></span> x <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stream1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------分页查询/5/3----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Stream<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stream2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stream2<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>

        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------去掉重复元素----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Stream stream3 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stream3<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="2-2-映射"><a href="#2-2-映射" class="headerlink" title="2.2 映射"></a>2.2 映射</h4><ul>
<li><p>map: 接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素</p>
</li>
<li><p>flatMap: 接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</p>
<pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**
   * 映射
   * map: 接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素
   * flatMap: 接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流
   */</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------method2----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"A,B,C"</span><span class="token punctuation">,</span> <span class="token string">"1,2,3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stringStream1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span> x <span class="token operator">-</span><span class="token operator">></span> x<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> <span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      stringStream1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>

      Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stringStream2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span> x <span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
          String<span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          Stream<span class="token operator">&lt;</span>String<span class="token operator">></span> stringStream <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>split<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> stringStream<span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      stringStream2<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h4 id="2-3-排序"><a href="#2-3-排序" class="headerlink" title="2.3 排序"></a>2.3 排序</h4><ul>
<li><p>sorted(): 自然排序，流中元素需要实现Comparable接口</p>
</li>
<li><p>sorted(Comparator c): 自定义排序，自定义Comparator排序器</p>
<pre class="line-numbers language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**
  * 排序
  * sorted(): 自然排序，流中元素需要实现Comparable接口
  * sorted(Comparator c): 自定义排序，自定义Comparator排序器
  */</span>
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------method3----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

     List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> integers <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     integers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>

     List<span class="token operator">&lt;</span>String<span class="token operator">></span> strings <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"K"</span><span class="token punctuation">,</span> <span class="token string">"H"</span><span class="token punctuation">,</span> <span class="token string">"I"</span><span class="token punctuation">,</span> <span class="token string">"G"</span><span class="token punctuation">,</span> <span class="token string">"H"</span><span class="token punctuation">,</span> <span class="token string">"N"</span><span class="token punctuation">,</span> <span class="token string">"E"</span><span class="token punctuation">,</span> <span class="token string">"S"</span><span class="token punctuation">,</span> <span class="token string">"S"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>
             <span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                 <span class="token keyword">return</span> s1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
             <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
     <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token annotation punctuation">@Data</span>
     <span class="token annotation punctuation">@AllArgsConstructor</span>
     <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
         String name<span class="token punctuation">;</span>
         <span class="token keyword">int</span> score<span class="token punctuation">;</span> 
     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
     List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"K"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                             <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"H"</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                             <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"I"</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                             <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"G"</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                             <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"N"</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>
             <span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                 <span class="token keyword">return</span> s1<span class="token punctuation">.</span>score <span class="token operator">-</span> s2<span class="token punctuation">.</span>score<span class="token punctuation">;</span>
             <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
     <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h4 id="2-4-消费"><a href="#2-4-消费" class="headerlink" title="2.4 消费"></a>2.4 消费</h4><p>peek: 类似map<br>不同：</p>
<ul>
<li><p>map接收function表达式，有返回值</p>
</li>
<li><p>peek接收consumer表达式，无返回值</p>
<pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**
   * 消费
   * peek: 类似map
   * 不同：
   * map接收function表达式，有返回值
   * peek接收consumer表达式，无返回值
   */</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------method4----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token annotation punctuation">@Data</span>
      <span class="token annotation punctuation">@AllArgsConstructor</span>
      <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
          String name<span class="token punctuation">;</span>
          <span class="token keyword">int</span> score<span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
      List<span class="token operator">&lt;</span>Student<span class="token operator">></span> students <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"K"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
              <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"H"</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
              <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"I"</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
              <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"G"</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
              <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"N"</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>
              s <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                  s<span class="token punctuation">.</span><span class="token function">setScore</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
      <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="3-流的终止操作"><a href="#3-流的终止操作" class="headerlink" title="3. 流的终止操作"></a>3. 流的终止操作</h3><h4 id="3-1-匹配、聚合操作"><a href="#3-1-匹配、聚合操作" class="headerlink" title="3.1 匹配、聚合操作"></a>3.1 匹配、聚合操作</h4><ul>
<li>allMatch: 接收一个Predicate函数，当流中每个元素都符合该断言时才返回true，否则返回false</li>
<li>noneMatch: 接收一个Predicate函数，当流中每个元素都不符合该断言时才返回true，否则返回false</li>
<li>anyMatch: 接收一个Predicate函数，只要流中有一个元素满足该断言则返回true，否则返回false</li>
<li>findFIrst: 返回流中第一个元素</li>
<li>findAny: 返回流中的任意元素</li>
<li>count: 返回流中元素总个数</li>
<li>max: 返回流中元素的最大值</li>
<li>min: 返回流中元素的最小值</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------method1----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">boolean</span> allMatch <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// false</span>
        <span class="token keyword">boolean</span> noneMatch <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span>
        <span class="token keyword">boolean</span> anyMatch <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// true</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>allMatch <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> noneMatch <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> anyMatch<span class="token punctuation">)</span><span class="token punctuation">;</span>

        Integer findFirst <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Integer findAny <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"first = "</span> <span class="token operator">+</span> findFirst <span class="token operator">+</span> <span class="token string">", any = "</span> <span class="token operator">+</span> findAny<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">long</span> count <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Integer max <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>Integer<span class="token operator">:</span><span class="token operator">:</span>compareTo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Integer min <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>Integer<span class="token operator">:</span><span class="token operator">:</span>compareTo<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"count = "</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">", max = "</span> <span class="token operator">+</span> max <span class="token operator">+</span> <span class="token string">", min = "</span> <span class="token operator">+</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="3-2-规约操作"><a href="#3-2-规约操作" class="headerlink" title="3.2 规约操作"></a>3.2 规约操作</h4><p>Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator)：第一次执行时，accumulator函数的第一个参数为流中的第一个元素，第二个参数为流中元素的第二个元素；第二次执行时，第一个参数为第一次函数执行的结果，第二个参数为流中的第三个元素；依次类推。<br>     T reduce(T identity, BinaryOperator&lt;T&gt; accumulator)：流程跟上面一样，只是第一次执行时，accumulator函数的第一个参数为identity，而第二个参数为流中的第一个元素。<br>     &lt;U&gt; U reduce(U identity,BiFunction&lt;U, ? super T, U&gt; accumulator,BinaryOperator&lt;U&gt; combiner)：在串行流(stream)中，该方法跟第二个方法一样，即第三个参数combiner不会起作用。在并行流(parallelStream)中,我们知道流被fork join出多个线程进行执行，此时每个线程的执行流程就跟第二个方法reduce(identity,accumulator)一样，而第三个参数combiner函数，则是将每个线程的执行结果当成一个新的流，然后使用第一个方法reduce(accumulator)流程进行规约。</p>
<pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**
     * 规约
     * reduce
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------method2----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 求和</span>
        Integer v <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> x1 <span class="token operator">+</span> x2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum = "</span>  <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 10 + 和</span>
        Integer v1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> x1 <span class="token operator">+</span> x2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10 + sum = "</span> <span class="token operator">+</span> v1<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 求-和</span>
        Integer v2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>
                <span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stream accumulator: x1: "</span> <span class="token operator">+</span> x1 <span class="token operator">+</span> <span class="token string">" x2: "</span> <span class="token operator">+</span> x2<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> x1 <span class="token operator">-</span> x2<span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
                <span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 求累积</span>
        Integer v3 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>
                <span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stream combiner: x1:"</span> <span class="token operator">+</span> x1 <span class="token operator">+</span> <span class="token string">"  x2:"</span> <span class="token operator">+</span> x2<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> x1 <span class="token operator">*</span> x2<span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
         <span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 字符串拼接</span>
        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list1 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"K"</span><span class="token punctuation">,</span> <span class="token string">"Highness"</span><span class="token punctuation">,</span> <span class="token string">". Nice "</span><span class="token punctuation">,</span> <span class="token string">"to "</span><span class="token punctuation">,</span> <span class="token string">"meet "</span><span class="token punctuation">,</span> <span class="token string">"you"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        String res <span class="token operator">=</span> list1<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token string">"Hello "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> c1 <span class="token operator">+</span> c2<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="3-3-收集操作"><a href="#3-3-收集操作" class="headerlink" title="3.3 收集操作"></a>3.3 收集操作</h4><p> collect：接收一个Collector实例，将流中元素收集成另外一个数据结构。</p>
<p>Collector&lt;T, A, R&gt; 是一个接口，有以下5个抽象方法：<br>       Supplier&lt;A&gt; supplier()：创建一个结果容器A<br>       BiConsumer&lt;A, T&gt; accumulator()：消费型接口，第一个参数为容器A，第二个参数为流中元素T。<br>       BinaryOperator&lt;A&gt; combiner()：函数接口，该参数的作用跟上一个方法(reduce)中的combiner参数一样，将并行流中各个子进程的运行结果(accumulator函数操作后的容器A)进行合并。<br>       Function&lt;A, R&gt; finisher()：函数式接口，参数为：容器A，返回类型为：collect方法最终想要的结果R。<br>       Set&lt;Characteristics&gt; characteristics()：返回一个不可变的Set集合，用来表明该Collector的特征。有以下三个特征：<br>         CONCURRENT：表示此收集器支持并发。（官方文档还有其他描述，暂时没去探索，故不作过多翻译）<br>         UNORDERED：表示该收集操作不会保留流中元素原有的顺序。<br>         IDENTITY_FINISH：表示finisher参数只是标识而已，可忽略。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java8</tag>
      </tags>
  </entry>
  <entry>
    <title>Http状态码</title>
    <url>/posts/140645a5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Http状态码"><a href="#Http状态码" class="headerlink" title="Http状态码"></a>Http状态码</h1><center>
    <font face="Kristen ITC" color="#555555" size=3>Khighness</font><br>
</center>



<table>
<thead>
<tr>
<th align="center">分类</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1**</td>
<td align="center">信息，服务器收到请求，需要请求者继续执行操作</td>
</tr>
<tr>
<td align="center">2**</td>
<td align="center">成功，操作被成功接收并处理</td>
</tr>
<tr>
<td align="center">3**</td>
<td align="center">重定向，需要进一步的操作以完成请求</td>
</tr>
<tr>
<td align="center">4**</td>
<td align="center">客户端错误，请求白蛤语法错误或无分发完成请求</td>
</tr>
<tr>
<td align="center">5**</td>
<td align="center">服务器错误，服务器才处理请求的过程中发生了错误</td>
</tr>
</tbody></table>
<a id="more"></a>




<h2 id="1xx-消息"><a href="#1xx-消息" class="headerlink" title="1xx-消息"></a>1xx-消息</h2><p>这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于HTTP/1.0协议中没有定义任何1xx状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送1xx响应。 这些状态码代表的响应都是信息性的，标示客户应该采取的其他行动。</p>
<ul>
<li><p>100 Continue<br>服务器已经接收到请求头，并且客户端应继续发送请求主体（在需要发送身体的请求的情况下：例如，POST请求），或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。要使服务器检查请求的头部，客户端必须在其初始请求中发送Expect: 100-continue作为头部，并在发送正文之前接收100 Continue状态代码。响应代码417期望失败表示请求不应继续。</p>
</li>
<li><p>101 Switching Protocols<br>服务器已经理解了客户端的请求，并将通过Upgrade消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade消息头中定义的那些协议。<br>只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的HTTP版本（如HTTP/2）比旧版本更有优势，或者切换到一个实时且同步的协议（如WebSocket）以传送利用此类特性的资源。</p>
</li>
<li><p>102 Processing（WebDAV；RFC 2518）<br>WebDAV请求可能包含许多涉及文件操作的子请求，需要很长时间才能完成请求。该代码表示服务器已经收到并正在处理请求，但无响应可用。[6]这样可以防止客户端超时，并假设请求丢失。</p>
</li>
</ul>
<h2 id="2xx-成功"><a href="#2xx-成功" class="headerlink" title="2xx-成功"></a>2xx-成功</h2><p>这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。</p>
<ul>
<li><p>200 OK<br>请求已成功，请求所希望的响应头或数据体将随此响应返回。实际的响应将取决于所使用的请求方法。在GET请求中，响应将包含与请求的资源相对应的实体。在POST请求中，响应将包含描述或操作结果的实体。</p>
</li>
<li><p>201 Created<br>请求已经被实现，而且有一个新的资源已经依据请求的需要而创建，且其URI已经随Location头信息返回。假如需要的资源无法及时创建的话，应当返回’202 Accepted’。</p>
</li>
<li><p>202 Accepted<br>服务器已接受请求，但尚未处理。最终该请求可能会也可能不会被执行，并且可能在处理发生时被禁止。</p>
</li>
<li><p>203 Non-Authoritative Information（自HTTP / 1.1起）<br>服务器是一个转换代理服务器（transforming proxy，例如网络加速器），以200 OK状态码为起源，但回应了原始响应的修改版本。</p>
</li>
<li><p>204 No Content<br>服务器成功处理了请求，没有返回任何内容。</p>
</li>
<li><p>205 Reset Content<br>服务器成功处理了请求，但没有返回任何内容。与204响应不同，此响应要求请求者重置文档视图。</p>
</li>
<li><p>206 Partial Content<br>服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。</p>
</li>
<li><p>207 Multi-Status（WebDAV；RFC 4918）<br>代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。</p>
</li>
<li><p>208 Already Reported （WebDAV；RFC 5842）<br>DAV绑定的成员已经在（多状态）响应之前的部分被列举，且未被再次包含。</p>
</li>
<li><p>226 IM Used （RFC 3229）<br>服务器已经满足了对资源的请求，对实体请求的一个或多个实体操作的结果表示。</p>
</li>
</ul>
<h2 id="3xx-重定向"><a href="#3xx-重定向" class="headerlink" title="3xx-重定向"></a>3xx-重定向</h2><p>这类状态码代表需要客户端采取进一步的操作才能完成请求。通常，这些状态码用来重定向，后续的请求地址（重定向目标）在本次响应的Location域中指明。</p>
<p>当且仅当后续的请求所使用的方法是GET或者HEAD时，用户浏览器才可以在没有用户介入的情况下自动提交所需要的后续请求。客户端应当自动监测无限循环重定向（例如：A→B→C→……→A或A→A），因为这会导致服务器和客户端大量不必要的资源消耗。按照HTTP/1.0版规范的建议，浏览器不应自动访问超过5次的重定向。</p>
<ul>
<li><p>300 Multiple Choices<br>被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。<br>除非这是一个HEAD请求，否则该响应应当包括一个资源特性及地址的列表的实体，以便用户或浏览器从中选择最合适的重定向地址。这个实体的格式由Content-Type定义的格式所决定。浏览器可能根据响应的格式以及浏览器自身能力，自动作出最合适的选择。当然，RFC 2616规范并没有规定这样的自动选择该如何进行。<br>如果服务器本身已经有了首选的回馈选择，那么在Location中应当指明这个回馈的URI；浏览器可能会将这个Location值作为自动重定向的地址。此外，除非额外指定，否则这个响应也是可缓存的。</p>
</li>
<li><p>301 Moved Permanently<br>被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。<br>新的永久性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。<br>如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。<br>注意：对于某些使用HTTP/1.0协议的浏览器，当它们发送的POST请求得到了一个301响应的话，接下来的重定向请求将会变成GET方式。</p>
</li>
<li><p>302 Found<br>要求客户端执行临时重定向（原始描述短语为“Moved Temporarily”）。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。<br>新的临时性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。<br>如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。<br>注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用GET方式访问在Location中规定的URI，而无视原先请求的方法。因此状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。</p>
</li>
<li><p>303 See Other<br>对应当前请求的响应可以在另一个URI上被找到，当响应于POST（或PUT / DELETE）接收到响应时，客户端应该假定服务器已经收到数据，并且应该使用单独的GET消息发出重定向。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的URI不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。<br>新的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。<br>注意：许多HTTP/1.1版以前的浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。</p>
</li>
<li><p>304 Not Modified<br>表示资源未被修改，因为请求头指定的版本If-Modified-Since或If-None-Match。在这种情况下，由于客户端仍然具有以前下载的副本，因此不需要重新传输资源。</p>
</li>
<li><p>305 Use Proxy<br>被请求的资源必须通过指定的代理才能被访问。Location域中将给出指定的代理所在的URI信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能创建305响应。许多HTTP客户端（像是Mozilla和Internet Explorer）都没有正确处理这种状态代码的响应，主要是出于安全考虑。<br>注意：RFC 2068中没有明确305响应是为了重定向一个单独的请求，而且只能被原始服务器建立。忽视这些限制可能导致严重的安全后果。</p>
</li>
<li><p>306 Switch Proxy<br>在最新版的规范中，306状态码已经不再被使用。最初是指“后续请求应使用指定的代理”。</p>
</li>
<li><p>307 Temporary Redirect<br>在这种情况下，请求应该与另一个URI重复，但后续的请求应仍使用原始的URI。 与302相反，当重新发出原始请求时，不允许更改请求方法。 例如，应该使用另一个POST请求来重复POST请求。</p>
</li>
<li><p>308 Permanent Redirect (RFC 7538)<br>请求和所有将来的请求应该使用另一个URI重复。 307和308重复302和301的行为，但不允许HTTP方法更改。 例如，将表单提交给永久重定向的资源可能会顺利进行。</p>
</li>
</ul>
<h2 id="4xx-客户端错误"><a href="#4xx-客户端错误" class="headerlink" title="4xx-客户端错误"></a>4xx-客户端错误</h2><p>这类的状态码代表了客户端看起来可能发生了错误，妨碍了服务器的处理。除非响应的是一个HEAD请求，否则服务器就应该返回一个解释当前错误状况的实体，以及这是临时的还是永久性的状况。这些状态码适用于任何请求方法。浏览器应当向用户显示任何包含在此类错误响应中的实体内容。</p>
<p>如果错误发生时客户端正在传送数据，那么使用TCP的服务器实现应当仔细确保在关闭客户端与服务器之间的连接之前，客户端已经收到了包含错误信息的数据包。如果客户端在收到错误信息后继续向服务器发送数据，服务器的TCP栈将向客户端发送一个重置数据包，以清除该客户端所有还未识别的输入缓冲，以免这些数据被服务器上的应用程序读取并干扰后者。</p>
<ul>
<li><p>400 Bad Request<br>由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求。</p>
</li>
<li><p>401 Unauthorized（RFC 7235）<br>参见：HTTP基本认证、HTTP摘要认证<br>类似于403 Forbidden，401语义即“未认证”，即用户没有必要的凭据。该状态码表示当前请求需要用户验证。该响应必须包含一个适用于被请求资源的WWW-Authenticate信息头用以询问用户信息。客户端可以重复提交一个包含恰当的Authorization头信息的请求。[33]如果当前请求已经包含了Authorization证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。<br>注意：当网站（通常是网站域名）禁止IP地址时，有些网站状态码显示的401，表示该特定地址被拒绝访问网站。</p>
</li>
<li><p>402 Payment Required<br>该状态码是为了将来可能的需求而预留的。该状态码最初的意图可能被用作某种形式的数字现金或在线支付方案的一部分，但几乎没有哪家服务商使用，而且这个状态码通常不被使用。如果特定开发人员已超过请求的每日限制，Google Developers API会使用此状态码。</p>
</li>
<li><p>403 Forbidden<br>主条目：HTTP 403<br>服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个HEAD请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。</p>
</li>
<li><p>404 Not Found<br>主条目：HTTP 404<br>请求失败，请求所希望得到的资源未被在服务器上发现，但允许用户的后续请求。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。</p>
</li>
<li><p>405 Method Not Allowed<br>请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow头信息用以表示出当前资源能够接受的请求方法的列表。例如，需要通过POST呈现数据的表单上的GET请求，或只读资源上的PUT请求。<br>鉴于PUT，DELETE方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。</p>
</li>
<li><p>406 Not Acceptable<br>参见：内容协商<br>请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体，该请求不可接受。<br>除非这是一个HEAD请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址列表的实体。实体的格式由Content-Type头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准。</p>
</li>
<li><p>407 Proxy Authentication Required（RFC 2617）<br>与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个Proxy-Authenticate用以进行身份询问。客户端可以返回一个Proxy-Authorization信息头用以验证。</p>
</li>
<li><p>408 Request Timeout<br>请求超时。根据HTTP规范，客户端没有在服务器预备等待的时间内完成一个请求的发送，客户端可以随时再次提交这一请求而无需进行任何更改。</p>
</li>
<li><p>409 Conflict<br>表示因为请求存在冲突无法处理该请求，例如多个同步更新之间的编辑冲突。</p>
</li>
<li><p>410 Gone<br>表示所请求的资源不再可用，将不再可用。当资源被有意地删除并且资源应被清除时，应该使用这个。在收到410状态码后，用户应停止再次请求资源。但大多数服务端不会使用此状态码，而是直接使用404状态码。</p>
</li>
<li><p>411 Length Required<br>服务器拒绝在没有定义Content-Length头的情况下接受请求。在添加了表明请求消息体长度的有效Content-Length头之后，客户端可以再次提交该请求。</p>
</li>
<li><p>412 Precondition Failed（RFC 7232）<br>服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。</p>
</li>
<li><p>413 Request Entity Too Large（RFC 7231）<br>前称“Request Entity Too Large”，表示服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。<br>如果这个状况是临时的，服务器应当返回一个Retry-After的响应头，以告知客户端可以在多少时间以后重新尝试。</p>
</li>
<li><p>414 Request-URI Too Long（RFC 7231）<br>前称“Request-URI Too Long”，表示请求的URI长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。通常将太多数据的结果编码为GET请求的查询字符串，在这种情况下，应将其转换为POST请求。这比较少见，通常的情况包括：<br>本应使用POST方法的表单提交变成了GET方法，导致查询字符串过长。<br>重定向URI“黑洞”，例如每次重定向把旧的URI作为新的URI的一部分，导致在若干次重定向后URI超长。<br>客户端正在尝试利用某些服务器中存在的安全漏洞攻击服务器。这类服务器使用固定长度的缓冲读取或操作请求的URI，当GET后的参数超过某个数值后，可能会产生缓冲区溢出，导致任意代码被执行。没有此类漏洞的服务器，应当返回414状态码。</p>
</li>
<li><p>415 Unsupported Media Type<br>对于当前请求的方法和所请求的资源，请求中提交的互联网媒体类型并不是服务器中所支持的格式，因此请求被拒绝。例如，客户端将图像上传格式为svg，但服务器要求图像使用上传格式为jpg。</p>
</li>
<li><p>416 Requested Range Not Satisfiable（RFC 7233）<br>前称“Requested Range Not Satisfiable”。客户端已经要求文件的一部分（Byte serving），但服务器不能提供该部分。例如，如果客户端要求文件的一部分超出文件尾端。</p>
</li>
<li><p>417 Expectation Failed<br>在请求头Expect中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服显的证据证明在当前路由的下一个节点上，Expect的内容无法被满足。</p>
</li>
<li><p>418 I’m a teapot（RFC 2324）<br>本操作码是在1998年作为IETF的传统愚人节笑话, 在RFC 2324超文本咖啡壶控制协议’中定义的，并不需要在真实的HTTP服务器中定义。当一个控制茶壶的HTCPCP收到BREW或POST指令要求其煮咖啡时应当回传此错误。这个HTTP状态码在某些网站（包括Google.com）与项目（如Node.js、ASP.NET和Go语言）中用作彩蛋。</p>
</li>
<li><p>420 Enhance Your Caim<br>Twitter Search与Trends API在客户端被限速的情况下返回。</p>
</li>
<li><p>421 Misdirected Request （RFC 7540）<br>该请求针对的是无法产生响应的服务器（例如因为连接重用）。</p>
</li>
<li><p>422 Unprocessable Entity（WebDAV；RFC 4918 ）<br>请求格式正确，但是由于含有语义错误，无法响应。</p>
</li>
<li><p>423 Locked（WebDAV；RFC 4918）<br>当前资源被锁定。</p>
</li>
<li><p>424 Failed Dependency（WebDAV；RFC 4918）<br>由于之前的某个请求发生的错误，导致当前请求失败，例如PROPPATCH。</p>
</li>
<li><p>425 Unordered Collection<br>在WebDAV Advanced Collections Protocol中定义，但Web Distributed Authoring and Versioning (WebDAV) Ordered Collections Protocol中并不存在。</p>
</li>
<li><p>426 Upgrade Required（RFC 2817）<br>客户端应当切换到TLS/1.0，并在HTTP/1.1 Upgrade header中给出。</p>
</li>
<li><p>428 Precondition Required (RFC 6585)<br>原服务器要求该请求满足一定条件。这是为了防止“‘未更新’问题，即客户端读取（GET）一个资源的状态，更改它，并将它写（PUT）回服务器，但这期间第三方已经在服务器上更改了该资源的状态，因此导致了冲突。”</p>
</li>
<li><p>429 Too Many Requests （RFC 6585）<br>用户在给定的时间内发送了太多的请求。旨在用于网络限速。</p>
</li>
<li><p>431 Request Header Fields Too Large （RFC 6585）<br>服务器不愿处理请求，因为一个或多个头字段过大。</p>
</li>
<li><p>444 No Response<br>Nginx上HTTP服务器扩展。服务器不向客户端返回任何信息，并关闭连接（有助于阻止恶意软件）。</p>
</li>
<li><p>450 Blocked by Windows Parental Controls<br>这是一个由Windows家庭控制（Microsoft）HTTP阻止的450状态代码的示例，用于信息和测试。</p>
</li>
<li><p>451 Unavailable For Legal Reasons<br>该访问因法律的要求而被拒绝，由IETF在2015核准后新增加。</p>
</li>
<li><p>494 Request Header Too Large<br>在错误代码431提出之前Nginx上使用的扩展HTTP代码。</p>
</li>
</ul>
<h2 id="5xx-服务器错误"><a href="#5xx-服务器错误" class="headerlink" title="5xx-服务器错误"></a>5xx-服务器错误</h2><p>表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。除非这是一个HEAD请求，否则服务器应当包含一个解释当前错误状态以及这个状况是临时的还是永久的解释信息实体。浏览器应当向用户展示任何在当前响应中被包含的实体。这些状态码适用于任何响应方法。</p>
<ul>
<li><p>500 Internal Server Error<br>通用错误消息，服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。没有给出具体错误信息。</p>
</li>
<li><p>501 Not Implemented<br>服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。（例如，网络服务API的新功能）</p>
</li>
<li><p>502 Bad Gateway<br>作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。</p>
</li>
<li><p>503 Service Unavailable<br>由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是暂时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个Retry-After头用以标明这个延迟时间。如果没有给出这个Retry-After信息，那么客户端应当以处理500响应的方式处理它。</p>
</li>
<li><p>504 Gateway Timeout<br>作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。<br>注意：某些代理服务器在DNS查询超时时会返回400或者500错误。</p>
</li>
<li><p>505 HTTP Version Not Supported<br>服务器不支持，或者拒绝支持在请求中使用的HTTP版本。[63]这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体。</p>
</li>
<li><p>506 Variant Also Negotiates（RFC 2295）<br>由《透明内容协商协议》（RFC 2295）扩展，代表服务器存在内部配置错误，被请求的协商变元资源被配置为在透明内容协商中使用自己，因此在一个协商处理中不是一个合适的重点。</p>
</li>
<li><p>507 Insufficient Storage（WebDAV；RFC 4918）<br>服务器无法存储完成请求所必须的内容。这个状况被认为是临时的。</p>
</li>
<li><p>508 Loop Detected （WebDAV；RFC 5842）<br>服务器在处理请求时陷入死循环。 （可代替 208状态码）</p>
</li>
<li><p>510 Not Extended（RFC 2774）<br>获取资源所需要的策略并没有被满足。</p>
</li>
<li><p>511 Network Authentication Required （RFC 6585）<br>客户端需要进行身份验证才能获得网络访问权限，旨在限制用户群访问特定网络。（例如连接WiFi热点时的强制网络门户）</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Http</category>
      </categories>
      <tags>
        <tag>HttpCode</tag>
      </tags>
  </entry>
</search>
