<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>博弈论</title>
    <url>/2020/10/03/Game/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="博弈论"><a href="#博弈论" class="headerlink" title="博弈论"></a>博弈论</h1><center>
    <font face="Kristen ITC" color="#555555" font-size=100px>Khighness、寻找必败态</font><br>
</center>





<h2 id="1-巴什博弈"><a href="#1-巴什博弈" class="headerlink" title="1. 巴什博弈"></a>1. 巴什博弈</h2><h3 id="1-1-问题"><a href="#1-1-问题" class="headerlink" title="1.1 问题"></a>1.1 问题</h3><blockquote>
<p>两个顶尖聪明的人在玩游戏，有 n 个石子，每个人每次拿 1~m 个石头，拿掉最后一块石头的人就是获胜者。请问先手与后手谁必胜？</p>
</blockquote>
<h3 id="1-2-分析"><a href="#1-2-分析" class="headerlink" title="1.2 分析"></a>1.2 分析</h3><blockquote>
<p>分类讨论: </p>
<p>（1）当n ≤ m时，这时先手的人可以一次取走所有的；</p>
<p>（2）当n = m+1时，这时先手无论取走多少个，后手的人都能取走剩下所有的；</p>
<p>（3）当n = k ∗ ( m + 1)时，对于每(m + 1)个石子，先手取i个，后手一定能将剩下的(m + 1 − i)个都取走，因此后手必胜；</p>
<p>（4）当n = k ∗ ( m + 1)  + x ( 0&lt; x&lt; m + 1)时，先手可以先取 x 个，之后的局势就回到了上一种情况，无论后手取多少个，先手都能取走m+1个中剩下的，因此先手必胜。</p>
</blockquote>
<h3 id="1-3-结论"><a href="#1-3-结论" class="headerlink" title="1.3 结论"></a>1.3 结论</h3><blockquote>
<p><strong>当n % m + 1) == 0时，后手必胜，否则先手必胜。</strong></p>
</blockquote>
<h3 id="1-4-代码"><a href="#1-4-代码" class="headerlink" title="1.4 代码"></a>1.4 代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BashGame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((n % (m + <span class="number">1</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;后手获胜&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;先手获胜&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-尼姆博弈"><a href="#2-尼姆博弈" class="headerlink" title="2. 尼姆博弈"></a>2. 尼姆博弈</h2><h3 id="2-1-问题"><a href="#2-1-问题" class="headerlink" title="2.1 问题"></a>2.1 问题</h3><blockquote>
<p>两个顶尖聪明的人在玩游戏，有 n 堆石子，第 i 堆有 ai 每个人每次能从一堆石子中取任意多个石子但不能不取，不能取的人输。请问先手与后手谁必胜？</p>
</blockquote>
<h3 id="2-2-分析"><a href="#2-2-分析" class="headerlink" title="2.2 分析"></a>2.2 分析</h3><blockquote>
<p>（1）当n = 1时，显然先手取走这一堆就能获胜；</p>
<p>（2）当n = 2且a1 != a2时，我们假设a1 &gt; a2，先手可以先在第一堆取走a1-a2个，下一次无论后手取走多少个，先手都可以在另一堆取走相同的个数，因此先手必胜；</p>
<p>（3）当n = 2且a1 == a2时，先手无论取多少个，后手都可以在另一堆取相同的个数，因此后手必胜；</p>
<p>（4）当n &gt;= 3时，问题变得繁琐起来，先找出规律性的结论。</p>
</blockquote>
<h3 id="2-3-结论"><a href="#2-3-结论" class="headerlink" title="2.3 结论"></a>2.3 结论</h3><blockquote>
<p><strong>当 a1 ^ a2 ^ ··· ^ an =  0 时，后手必胜，否则先手必胜。</strong></p>
<p><strong>证明：</strong></p>
<p>假设当前：a1 ^ a2 ^ ··· ^ an =  0，</p>
<p>先手回合：取走若干个后，</p>
<p>局势变成：a1 ^ a2 ^ ··· ^ an =  K，</p>
<p>即：a1 ^ a2 ^ ··· ^ an ^ K = 0。</p>
<p>假设 K 的最高位1在第 x 位，</p>
<p>那么必然存在 aj (1 &lt; = j &lt;= n) 的 第 x 位为1，</p>
<p>后手回合：只要把 aj 变成 aj ^ K，</p>
<p>就能使得：a1 ^ a2 ^ ··· ^ an =  0。</p>
<p>由于 aj ^ K 使得第 x 位 为0，无论低位是什么，</p>
<p>第 x 位变为0后，aj 整个数一定会变小，即：aj ^ K &lt; aj，</p>
<p>所以后手只需在第 j 堆取走(aj - aj ^ K)个石子即可。</p>
<p>先手每次取完，后手每次取(aj - aj ^ K)，</p>
<p>最后的局势一定是：a1 = a2 = ··· = an = 0，</p>
<p>此时先手无法取了，后手必胜。</p>
<p>反之，当a1 ^ a2 ^ ··· ^ an = K 时，</p>
<p>局势反转，先手每次取(aj - aj ^ K)个即可，先手必胜。</p>
</blockquote>
<h3 id="2-4-代码"><a href="#2-4-代码" class="headerlink" title="2.4 代码"></a>2.4 代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NimGame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : a) &#123;</span><br><span class="line">            res ^= i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;后手获胜&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;先手获胜&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-尼姆Plus博弈"><a href="#3-尼姆Plus博弈" class="headerlink" title="3. 尼姆Plus博弈"></a>3. 尼姆Plus博弈</h2><h3 id="3-1-问题"><a href="#3-1-问题" class="headerlink" title="3.1 问题"></a>3.1 问题</h3><blockquote>
<p>两个顶尖聪明的人在玩游戏，有 n 堆石子，第 i 堆有 ai 个石子，每个人每次能从 1~d 堆石子中取任意多个石子但不能不取，不能取的人输。请问先手与后手谁必胜？</p>
</blockquote>
<h3 id="3-2-分析"><a href="#3-2-分析" class="headerlink" title="3.2 分析"></a>3.2 分析</h3><blockquote>
<p>特么太难了啊，呜呜呜我好菜</p>
</blockquote>
<h3 id="3-3-结论"><a href="#3-3-结论" class="headerlink" title="3.3 结论"></a>3.3 结论</h3><blockquote>
<p><strong>将每堆石子数量用二进制表示，对于二进制的任意一位，如果这一位为1的石子堆数量%(d+1)==0，那么后手必胜，否则先手必胜。</strong></p>
</blockquote>
<h3 id="3-4-证明"><a href="#3-4-证明" class="headerlink" title="3.4 证明"></a>3.4 证明</h3><blockquote>
<p>只需要证明三点：</p>
<ol>
<li><p>终止局面为先手必败（显然）</p>
</li>
<li><p>任意先手必胜的局面都能转变成先手必败的局面</p>
</li>
<li><p>任意先手必败的局面都不能转变成先手必胜的局面</p>
</li>
</ol>
<p><strong>证明</strong></p>
<p>证明2:</p>
<p>假设最高位%(d+1) != 0有m堆，那么将这些堆的这一位变成0；</p>
<p>假设下一位%(d+1) != 0的位有n个，之前m堆中这一位有a个1和b个0。</p>
<p>（1）如果n &lt;= a，显然将这a中的n个变成0即可；</p>
<p>（2）如果(d+1) - n &lt;= b，那么只要将b个中的(d+1) - n个变成1即可；</p>
<p>因为之前最高位是将1变成0，所以这一位即使由0变1，这堆石子也是减少的；</p>
<p>（3）如果两个都不满足，即a &gt; n &amp;&amp; b &lt; (d + 1 - n)，那么只要将这a堆和m堆之外的(n - a)堆的这一位变成0，</p>
<p>那么总改变堆数为 a + b + (n - a) = b + n &lt; (d + 1) - n + n = d + 1，</p>
<p>即将这一位变成%(d+1) = 0需要改变的总堆数要小于(d+1)，</p>
<p>即可以一次操作完成，然后以此类推就能使每一位都变为%(d+1)=0。</p>
<p>证明3:</p>
<p>因为一次最多操作d堆石子，因此不能将(d+1)堆某一位是1的石子堆的这一位都变为0。</p>
</blockquote>
<h2 id="4-威佐夫博弈"><a href="#4-威佐夫博弈" class="headerlink" title="4. 威佐夫博弈"></a>4. 威佐夫博弈</h2><h3 id="4-1-问题"><a href="#4-1-问题" class="headerlink" title="4.1 问题"></a>4.1 问题</h3><blockquote>
<p>两个顶尖聪明的人在玩游戏，有 2 堆石子，每个人每次可以从任意一堆石子中取任意多的石子或者从两堆石子中取同样多的石子，不能取的人输。请问先手与后手谁必胜？</p>
</blockquote>
<h3 id="4-1-分析"><a href="#4-1-分析" class="headerlink" title="4.1 分析"></a>4.1 分析</h3><blockquote>
<p>威佐夫博弈不同于巴什博弈和尼姆博弈，它的特殊之处在于不能将两堆石子分开分析。</p>
<p><em>下面分析不想看的直接跳过记住结论即可</em></p>
<p>定义先手必输的局势为奇异局势，前几个奇异局势为: (0, 0), (1, 2), (3, 5), (4, 7), (6,10)……</p>
<p>假设 (x, y) 为第 k 个奇异局势</p>
<p>性质：</p>
<ul>
<li>x为前 1···k 个奇异局势中没有出现过的最小正整数，y = x + k (打表找规律)</li>
<li>任何一个自然数都包含在一个且仅有一个奇异局势中</li>
<li>任何操作都会将奇异局势变为非奇异局势</li>
<li>非奇异局势可以通过适当操作变为奇异局势</li>
</ul>
<p>证明这个结论，只需证明：</p>
<ol>
<li>任意自然数都出现过</li>
<li>任意自然数仅出现一次</li>
</ol>
<p>反证法易证。</p>
</blockquote>
<img src="/2020/10/03/Game/%E5%A8%81%E4%BD%90%E5%A4%AB%E5%8D%9A%E5%BC%88.jpg" class="" title="XY">

<blockquote>
<p>我们可以将两堆石子看成是棋盘上一个点的纵横坐标，那么游戏切换：</p>
<p>棋盘上有一个点，每次每个人只能将棋子往左或者往下移动任意个格子，不能移动的人输。</p>
<p>将能一步到达(0, 0)的点都染色，那么这些点就是必胜态，再找到横纵坐标之和最小的没被染色的点，</p>
<p>这个点就是下一个必败态，由此画出上图。</p>
</blockquote>
<h3 id="4-1-结论"><a href="#4-1-结论" class="headerlink" title="4.1 结论"></a>4.1 结论</h3><blockquote>
<p><strong>根据<a href="https://baike.baidu.com/item/%E8%B4%9D%E8%92%82%E5%AE%9A%E7%90%86/2677437?fr=aladdin">Betty定理</a>，第K个局势就是(⌊(1+√5)/2 *k⌋, ⌊(3+√5)/2 *k⌋)，其中(1+√5)/2=1.618是黄金分割系数。</strong></p>
<p><strong>因此，局势(x, y)满足(y - x)*(1+√5)/2)=x时，先手必败，否则先手必胜。</strong></p>
</blockquote>
<h3 id="4-1-代码"><a href="#4-1-代码" class="headerlink" title="4.1 代码"></a>4.1 代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WizovGame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 保证 a &lt;= b</span></span><br><span class="line">        <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = b;</span><br><span class="line">            b = a;</span><br><span class="line">            a = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断 a == (b - a) * 黄金分割系数 (向上取整)</span></span><br><span class="line">        <span class="keyword">if</span> ( a == (<span class="keyword">int</span>) Math.ceil( (b - a) * (<span class="number">1</span> + Math.sqrt(<span class="number">5.0</span>)) / <span class="number">2</span>) ) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;后手获胜&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;先手获胜&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="5-斐波那契博弈"><a href="#5-斐波那契博弈" class="headerlink" title="5. 斐波那契博弈"></a>5. 斐波那契博弈</h2><h3 id="5-1-问题"><a href="#5-1-问题" class="headerlink" title="5.1 问题"></a>5.1 问题</h3><blockquote>
<p>两个顶尖聪明的人在玩游戏，有一堆石子，数量为n，两个人轮流取石子，规则如下：</p>
<p>（1）先手不能在第一次把所有的石子取完，至少取一颗；</p>
<p>（2）之后每次可以取的石子数至少为1，至多为对手刚取的石子数的2倍；</p>
<p>不能取的人输。请问先手与后手谁必胜？</p>
</blockquote>
<h3 id="5-2-结论"><a href="#5-2-结论" class="headerlink" title="5.2 结论"></a>5.2 结论</h3><blockquote>
<p><strong>当n为Fibonacci数的时候，后手必胜，否则先手必胜。</strong></p>
</blockquote>
<h3 id="5-3-证明"><a href="#5-3-证明" class="headerlink" title="5.3 证明"></a>5.3 证明</h3><blockquote>
<p>数学归纳法：</p>
<p>假设石子数量n = F[i]（斐波那契数列中的第i项{1, 1, 2, 3, 5······}）</p>
<p>（1）当 i = 2 时，n = 2，显然先手取一个，后手必胜</p>
<p>（2）当 i &gt; 2 时，假设当 i &lt;= k 时结论成立。</p>
<p>当i = k + 1时，F[i] = F[k] + F[k-1]，将石子分成两部分来看。</p>
<p>假设先手第一次取 x 个，后手第一次取 y 个。</p>
<p>1）如果 x &lt; F[k-1] / 3，因为 n = F[k-1] 时已经证明后手一定能取到 F[k-1] 个中的最后一个，</p>
<p>所以问题转化成了有 F[k] 个中的最后一个，这个也已经证明后手一定能取到F[k]中的最后一个。</p>
<p>所以后手必胜。</p>
<p>2）如果 F[k-1] / 3 &lt;= x &lt;= F[k]时，则F[k-1]中剩余数量小于2x，后手可以直接取完，</p>
<p>（如果不选择一次性取完，慢慢磨最终也会是所证明的F[k-1]的情况，后手最后取完）</p>
<p>即后手取了F[k-1]-x个，即y &lt;= 2/3 * F[k-1]。比较 2/3 * F[k-1] 与 1/2 * F[k] 的大小，</p>
<p>即比较4 * [k-1] 与 3 * F[k] 的大小：</p>
<p>由于 F[k] 函数递增 且 F[k] = F[k-1] + F[k-2]易知：2 * F[k-2] &lt; F[k] &lt; 2 * F[k-1]，</p>
<p>因而 3 * F[k] = 3 * F[k-1] + 3 * F[k-2] &gt; 3 * F[k-1] + 3 / 2 * F[k-1] &gt; 4 * F[k-1]。</p>
<p>也就是说，在后手取完F[k-1]那一堆石子之后，先手不能一次性取完F[k]那一堆石子，</p>
<p>于是问题最终演变成了F[k]的状况，后手最后取完。</p>
<p>3）如果 x &gt; F[k-1]，因为F[k] &lt; 2 * F[k-1]，后手可以一次性取完。</p>
<p>综上三种情况，当 i &lt;= k 时结论成立，那么当 n = k+1 时结论也成立。</p>
</blockquote>
<h3 id="5-4-代码"><a href="#5-4-代码" class="headerlink" title="5.4 代码"></a>5.4 代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FibonacciGame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fibnacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 递归计算，慢</span></span><br><span class="line"><span class="comment">//        if (n == 1 || n == 2)</span></span><br><span class="line"><span class="comment">//            return 1;</span></span><br><span class="line"><span class="comment">//        else</span></span><br><span class="line"><span class="comment">//            return fibnacci(n - 1) + fibnacci(n - 2);</span></span><br><span class="line">        <span class="comment">// 公式计算，快</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) Math.floor( ( Math.pow((<span class="number">1</span> + Math.sqrt(<span class="number">5</span>)) / <span class="number">2</span>, n)  - Math.pow((<span class="number">1</span> - Math.sqrt(<span class="number">5</span>)) / <span class="number">2</span>, n) ) / Math.sqrt(<span class="number">5</span>) );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; fibnacci(i) &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fibnacci(i+<span class="number">1</span>) == n) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;后手获胜&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;先手获胜&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Game</tag>
      </tags>
  </entry>
  <entry>
    <title>十一月的肖邦</title>
    <url>/2020/03/21/Khighness/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <div id="aplayer-wTTblAQU" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">
            <pre class="aplayer-lrc-content">逆鳞 - 周杰伦 (Jay Chou)
词：黄俊郎
曲：周杰伦
而生命 对每个人
都不公平 也没道理
只能扑向 泥泞迎向
那阵骤雨 由不得你
Yeah
突来的骤雨
这条街一路泥泞
就像人生
不过是一场即兴
整个世界
正在对我们挑衅
就算如此
还是得无惧前进
手中的邮报
封面的人在微笑
下个路口
生命在暗巷尖叫
活着只是
油墨上面的一角
明天之后
还有谁翻阅得得到
我跟你用不同方式
踩过前方带刺荆棘
你嚣张不畏惧退缩
我低头沉默却坚定
用力的还击 发出声音
让他们安静不敢相信
继续前进
他们畏惧 睁大眼睛
他们躲避 难道放弃
专心聆听 我的声音
这生命 对每个人
都不公平 也没道理
只能扑向 泥泞迎向
那阵骤雨 由不得你
如果生命 对每个人
都不公平 也没道理
那就让我 带着孤寂
继续前进 直到光明
Wo wo
我只有一种容貌
我就是永远不会倒
我就算逆境环绕
我面对也要带着笑
我只有一种咆哮
我要让他们都知道
我生命再怎么粗糙
我都要活的很骄傲
我说自尊那
看起来或许可笑
但它至少支着我
试着不让我跌倒
活着如果只是不甘寂静的喧嚣
那就咆哮吧
让每个人都能听得到
用力的还击
发出声音
让他们安静不敢相信
继续前进
他们畏惧 睁大眼睛
他们躲避 难道放弃
专心聆听 我的声音
这生命 对每个人
都不公平 也没道理
只能扑向 泥泞迎向
那阵骤雨 由不得你
如果生命 对每个人
都不公平 也没道理
那就让我 带着孤寂
继续前进 直到光明
而生命 对每个人
都不公平 也没道理
只能扑向 泥泞迎向
那阵骤雨 由不得你
如果生命 对每个人
都不公平 也没道理
那就让我 带着孤寂
继续前进 直到光明
这生命 对每个人
都不公平 也没道理
只能扑向 泥泞迎向
那阵骤雨 由不得你
如果生命 对每个人
都不公平 也没道理
那就让我 带着孤寂
继续前进</pre>
        </div>
        <script>
          var ap = new APlayer({
            element: document.getElementById("aplayer-wTTblAQU"),
            narrow: false,
            autoplay: false,
            showlrc: 2,
            music: {
              title: "逆鳞",
              author: "周杰伦",
              url: "逆鳞.ogg",
              pic: "/2020/03/21/Khighness/XB.jpg",
              lrc: "逆鳞.txt"
            }
          });
          window.aplayers || (window.aplayers = []);
          window.aplayers.push(ap);
        </script>



<center>
<p>逆鳞 - 周杰伦 (Jay Chou)</p>
<P>词：黄俊郎</P>
<p>曲：周杰伦</p>
<p>而生命 对每个人
<p>都不公平 也没道理
<p>只能扑向 泥泞迎向
<p>那阵骤雨 由不得你
<p>Yeah
<p>突来的骤雨
<p>这条街一路泥泞
<p>就像人生
<p>不过是一场即兴
<p>整个世界
<p>正在对我们挑衅
<p>就算如此
<p>还是得无惧前进
<p>手中的邮报
<p>封面的人在微笑
<p>下个路口
<p>生命在暗巷尖叫
<p>活着只是
<p>油墨上面的一角
<p>明天之后
<p>还有谁翻阅得得到
<p>我跟你用不同方式
<p>踩过前方带刺荆棘
<p>你嚣张不畏惧退缩
<p>我低头沉默却坚定
<p>用力的还击 发出声音
<p>让他们安静不敢相信
<p>继续前进
<p>他们畏惧 睁大眼睛
<p>他们躲避 难道放弃
<p>专心聆听 我的声音
<p>这生命 对每个人
<p>都不公平 也没道理
<p>只能扑向 泥泞迎向
<p>那阵骤雨 由不得你
<p>如果生命 对每个人
<p>都不公平 也没道理
<p>那就让我 带着孤寂
<p>继续前进 直到光明
<p>Wo wo
<p>我只有一种容貌
<p>我就是永远不会倒
<p>我就算逆境环绕
<p>我面对也要带着笑
<p>我只有一种咆哮
<p>我要让他们都知道
<p>我生命再怎么粗糙
<p>我都要活的很骄傲
<p>我说自尊那
<p>看起来或许可笑
<p>但它至少支着我
<p>试着不让我跌倒
<p>活着如果只是不甘寂静的喧嚣
<p>那就咆哮吧
<p>让每个人都能听得到
<p>用力的还击
<p>发出声音
<p>让他们安静不敢相信
<p>继续前进
<p>他们畏惧 睁大眼睛
<p>他们躲避 难道放弃
<p>专心聆听 我的声音
<p>这生命 对每个人
<p>都不公平 也没道理
<p>只能扑向 泥泞迎向
<p>那阵骤雨 由不得你
<p>如果生命 对每个人
<p>都不公平 也没道理
<p>那就让我 带着孤寂
<p>继续前进 直到光明
<p>而生命 对每个人
<p>都不公平 也没道理
<p>只能扑向 泥泞迎向
<p>那阵骤雨 由不得你
<p>如果生命 对每个人
<p>都不公平 也没道理
<p>那就让我 带着孤寂
<p>继续前进 直到光明
<p>这生命 对每个人
<p>都不公平 也没道理
<p>只能扑向 泥泞迎向
<p>那阵骤雨 由不得你
<p>如果生命 对每个人
<p>都不公平 也没道理
<p>那就让我 带着孤寂
<p>继续前进
</center>











]]></content>
      <categories>
        <category>Jay</category>
      </categories>
      <tags>
        <tag>逆鳞</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8-Stream</title>
    <url>/2020/09/20/Java8-Stream/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Java8-Stream"><a href="#Java8-Stream" class="headerlink" title="Java8-Stream"></a>Java8-Stream</h1><center>
    <font face="Kristen ITC" color="#555555" font-size=100px>Khighness</font><br>
</center>



<h2 id="一-概述"><a href="#一-概述" class="headerlink" title="一. 概述"></a>一. 概述</h2><p>​       Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。</p>
<p>特点：</p>
<ul>
<li><p>不是数据结构，不会保存数据。</p>
</li>
<li><p>不会修改原来的数据源，它会将操作后的数据保存到另外一个对象中。（保留意见：毕竟peek方法可以修改流中元素）</p>
</li>
<li><p>惰性求值，流在中间处理过程中，只是对操作进行了记录，并不会立即执行，需要等到执行终止操作的时候才会进行实际的计算。</p>
</li>
</ul>
<h2 id="二-分类"><a href="#二-分类" class="headerlink" title="二. 分类"></a>二. 分类</h2><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">状态</th>
<th align="center">API</th>
</tr>
</thead>
<tbody><tr>
<td align="center">中间操作</td>
<td align="center">有状态</td>
<td align="center">unordered() filter() map() mapToInt() mapToDouble() flatMap() flatMapToInt() flatMapToLong() flatMapToDouble() peek()</td>
</tr>
<tr>
<td align="center">中间操作</td>
<td align="center">无状态</td>
<td align="center">distinct() sorted() limit() skip()</td>
</tr>
<tr>
<td align="center">结束操作</td>
<td align="center">非短路操作</td>
<td align="center">foreach() forEachOrdered() toArray() reduce() collect() max() min() count()</td>
</tr>
<tr>
<td align="center">结束操作</td>
<td align="center">短路操作</td>
<td align="center">anyMatch() allMatch() noneMatch() findFirst() findAny()</td>
</tr>
</tbody></table>
<p>注释：</p>
<ul>
<li><p>无状态：指元素的处理不受之前元素的影响；</p>
</li>
<li><p>有状态：指该操作只有拿到所有元素之后才能继续下去。</p>
</li>
<li><p>非短路操作：指必须处理所有元素才能得到最终结果；</p>
</li>
<li><p>短路操作：指遇到某些符合条件的元素就可以得到最终结果，如 A || B，只要A为true，则无需判断B的结果。</p>
</li>
</ul>
<h2 id="三-使用"><a href="#三-使用" class="headerlink" title="三. 使用"></a>三. 使用</h2><h3 id="1-流的常用创建方法"><a href="#1-流的常用创建方法" class="headerlink" title="1. 流的常用创建方法"></a>1. 流的常用创建方法</h3><h4 id="1-1-使用Collection下的-stream-和-parallelStream-方法"><a href="#1-1-使用Collection下的-stream-和-parallelStream-方法" class="headerlink" title="1.1 使用Collection下的 stream() 和 parallelStream() 方法"></a>1.1 使用Collection下的 <code>stream()</code> 和 <code>parallelStream()</code> 方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Collection.</span></span><br><span class="line"><span class="comment"> *            stream()</span></span><br><span class="line"><span class="comment"> *            parallelStream()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------method1----------&quot;</span>);</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    list.add(<span class="number">1</span>);</span><br><span class="line">    list.add(<span class="number">3</span>);</span><br><span class="line">    list.add(<span class="number">5</span>);</span><br><span class="line">    list.add(<span class="number">7</span>);</span><br><span class="line">    list.add(<span class="number">9</span>);</span><br><span class="line">    Stream&lt;Integer&gt; stream = list.stream();</span><br><span class="line">    Stream&lt;Integer&gt; parallelStream = list.parallelStream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-2-使用Arrays中的-stream-方法，将数组转成流"><a href="#1-2-使用Arrays中的-stream-方法，将数组转成流" class="headerlink" title="1.2 使用Arrays中的 stream() 方法，将数组转成流"></a>1.2 使用Arrays中的 <code>stream()</code> 方法，将数组转成流</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Arrays.stream()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------method2----------&quot;</span>);</span><br><span class="line">    Double[] nums = <span class="keyword">new</span> Double[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        nums[i] = random();</span><br><span class="line">    &#125;</span><br><span class="line">    Stream&lt;Double&gt; stream = Arrays.stream(nums);</span><br><span class="line">    stream.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-3-使用Stream中的静态方法-of-、iterate-、generate"><a href="#1-3-使用Stream中的静态方法-of-、iterate-、generate" class="headerlink" title="1.3 使用Stream中的静态方法: of()、iterate()、generate()"></a>1.3 使用Stream中的静态方法: <code>of()</code>、<code>iterate()</code>、<code>generate()</code></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Stream.</span></span><br><span class="line"><span class="comment"> *        of()</span></span><br><span class="line"><span class="comment"> *        iterate()</span></span><br><span class="line"><span class="comment"> *        generate()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------method3----------&quot;</span>);</span><br><span class="line">    Stream&lt;Integer&gt; stream1 = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">    stream1.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    Stream&lt;Integer&gt; stream2 = Stream.iterate(<span class="number">0</span>, (x) -&gt; x + <span class="number">1</span>).limit(<span class="number">6</span>);</span><br><span class="line">    stream2.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    Stream&lt;Double&gt; stream3 = Stream.generate(Math::random).limit(<span class="number">6</span>);</span><br><span class="line">    stream3.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-4-使用-BufferedReader-lines-方法，将每行内容转成流"><a href="#1-4-使用-BufferedReader-lines-方法，将每行内容转成流" class="headerlink" title="1.4 使用 BufferedReader.lines() 方法，将每行内容转成流"></a>1.4 使用 <code>BufferedReader.lines()</code> 方法，将每行内容转成流</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * BufferedReader.lines()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------method4----------&quot;</span>);</span><br><span class="line">    BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;D:/Java/Test/K1.txt&quot;</span>));</span><br><span class="line">    Stream&lt;String&gt; lines = reader.lines();</span><br><span class="line">    lines.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-5-使用-Pattern-splitAsStream-方法，将字符串分隔成流"><a href="#1-5-使用-Pattern-splitAsStream-方法，将字符串分隔成流" class="headerlink" title="1.5 使用 Pattern.splitAsStream() 方法，将字符串分隔成流"></a>1.5 使用 <code>Pattern.splitAsStream()</code> 方法，将字符串分隔成流</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Pattern.splitAsStream()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------method5----------&quot;</span>);</span><br><span class="line">    Pattern pattern = Pattern.compile(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">    Stream&lt;String&gt; stringStream = pattern.splitAsStream(<span class="string">&quot;K,H,I,G,H,N,E,S,S&quot;</span>);</span><br><span class="line">    stringStream.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-流的中间操作"><a href="#2-流的中间操作" class="headerlink" title="2. 流的中间操作"></a>2. 流的中间操作</h3><h4 id="2-1-筛选与切片"><a href="#2-1-筛选与切片" class="headerlink" title="2.1 筛选与切片"></a>2.1 筛选与切片</h4><ul>
<li>filter: 过滤流中的某些元素</li>
<li>limit: 获取前n个元素</li>
<li>skip: 跳过前n个元素</li>
<li>limit + skip ==&gt; 可以实现分页[skip(PageNumber * PageSize).limit(PageSize)]</li>
<li>distinct: 通过流中元素的hashCode()和equals()去除重复元素</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 筛选与切片</span></span><br><span class="line"><span class="comment"> * filter: 过滤流中的某些元素</span></span><br><span class="line"><span class="comment"> * limit: 获取前n个元素</span></span><br><span class="line"><span class="comment"> * skip: 跳过前n个元素</span></span><br><span class="line"><span class="comment"> * limit + skip ==&gt; 可以实现分页[skip(PageNumber * PageSize).limit(PageSize)]</span></span><br><span class="line"><span class="comment"> * distinct: 通过流中元素的hashCode()和equals()去除重复元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------method1----------&quot;</span>);</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList( <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                        <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>,</span><br><span class="line">                                        <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>,</span><br><span class="line">                                        <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>,</span><br><span class="line">                                        <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>,</span><br><span class="line">                                        <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>,</span><br><span class="line">                                        <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>,</span><br><span class="line">                                        <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>,</span><br><span class="line">                                        <span class="number">9</span>, <span class="number">9</span>, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;----------过滤大于5的元素----------&quot;</span>);</span><br><span class="line">    Stream&lt;Integer&gt; stream1 = list.stream().filter(x -&gt; x &lt;= <span class="number">5</span>);</span><br><span class="line">    stream1.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;----------分页查询/5/3----------&quot;</span>);</span><br><span class="line">    Stream&lt;Integer&gt; stream2 = list.stream().skip(<span class="number">5</span> * <span class="number">3</span>).limit(<span class="number">3</span>);</span><br><span class="line">    stream2.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;----------去掉重复元素----------&quot;</span>);</span><br><span class="line">    Stream stream3 = list.stream().distinct();</span><br><span class="line">    stream3.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2-2-映射"><a href="#2-2-映射" class="headerlink" title="2.2 映射"></a>2.2 映射</h4><ul>
<li>map: 接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素</li>
<li>flatMap: 接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 映射</span></span><br><span class="line"><span class="comment"> * map: 接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素</span></span><br><span class="line"><span class="comment"> * flatMap: 接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------method2----------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;A,B,C&quot;</span>, <span class="string">&quot;1,2,3&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Stream&lt;String&gt; stringStream1 = list.stream().map( x -&gt; x.replaceAll(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;|&quot;</span>));</span><br><span class="line">    stringStream1.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    Stream&lt;String&gt; stringStream2 = list.stream().flatMap( x -&gt;&#123;</span><br><span class="line">        String[] split = x.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        Stream&lt;String&gt; stringStream = Arrays.stream(split);</span><br><span class="line">        <span class="keyword">return</span> stringStream;</span><br><span class="line">    &#125;);</span><br><span class="line">    stringStream2.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="2-3-排序"><a href="#2-3-排序" class="headerlink" title="2.3 排序"></a>2.3 排序</h4><ul>
<li>sorted(): 自然排序，流中元素需要实现Comparable接口</li>
<li>sorted(Comparator c): 自定义排序，自定义Comparator排序器<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 排序</span></span><br><span class="line"><span class="comment"> * sorted(): 自然排序，流中元素需要实现Comparable接口</span></span><br><span class="line"><span class="comment"> * sorted(Comparator c): 自定义排序，自定义Comparator排序器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------method3----------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">2</span>);</span><br><span class="line">    integers.stream().sorted().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;K&quot;</span>, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;I&quot;</span>, <span class="string">&quot;G&quot;</span>, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;N&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;S&quot;</span>, <span class="string">&quot;S&quot;</span>);</span><br><span class="line">    strings.stream().sorted(</span><br><span class="line">            (s1, s2) -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> s1.compareTo(s2);</span><br><span class="line">            &#125;</span><br><span class="line">    ).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">        String name;</span><br><span class="line">        <span class="keyword">int</span> score; </span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Student&gt; students = Arrays.asList( <span class="keyword">new</span> Student(<span class="string">&quot;K&quot;</span>, <span class="number">100</span>),</span><br><span class="line">                                            <span class="keyword">new</span> Student(<span class="string">&quot;H&quot;</span>, <span class="number">91</span>),</span><br><span class="line">                                            <span class="keyword">new</span> Student(<span class="string">&quot;I&quot;</span>, <span class="number">95</span>),</span><br><span class="line">                                            <span class="keyword">new</span> Student(<span class="string">&quot;G&quot;</span>, <span class="number">98</span>),</span><br><span class="line">                                            <span class="keyword">new</span> Student(<span class="string">&quot;N&quot;</span>, <span class="number">88</span>));</span><br><span class="line">    students.stream().sorted(</span><br><span class="line">            (s1, s2) -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> s1.score - s2.score;</span><br><span class="line">            &#125;</span><br><span class="line">    ).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="2-4-消费"><a href="#2-4-消费" class="headerlink" title="2.4 消费"></a>2.4 消费</h4><p>peek: 类似map<br>不同：</p>
<ul>
<li>map接收function表达式，有返回值</li>
<li>peek接收consumer表达式，无返回值<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费</span></span><br><span class="line"><span class="comment"> * peek: 类似map</span></span><br><span class="line"><span class="comment"> * 不同：</span></span><br><span class="line"><span class="comment"> * map接收function表达式，有返回值</span></span><br><span class="line"><span class="comment"> * peek接收consumer表达式，无返回值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------method4----------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">        String name;</span><br><span class="line">        <span class="keyword">int</span> score;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Student&gt; students = Arrays.asList( <span class="keyword">new</span> Student(<span class="string">&quot;K&quot;</span>, <span class="number">100</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;H&quot;</span>, <span class="number">91</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;I&quot;</span>, <span class="number">95</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;G&quot;</span>, <span class="number">98</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;N&quot;</span>, <span class="number">88</span>));</span><br><span class="line">    students.stream().peek(</span><br><span class="line">            s -&gt; &#123;</span><br><span class="line">                s.setScore(<span class="number">99</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    ).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h3 id="3-流的终止操作"><a href="#3-流的终止操作" class="headerlink" title="3. 流的终止操作"></a>3. 流的终止操作</h3><h4 id="3-1-匹配、聚合操作"><a href="#3-1-匹配、聚合操作" class="headerlink" title="3.1 匹配、聚合操作"></a>3.1 匹配、聚合操作</h4><ul>
<li>allMatch: 接收一个Predicate函数，当流中每个元素都符合该断言时才返回true，否则返回false</li>
<li>noneMatch: 接收一个Predicate函数，当流中每个元素都不符合该断言时才返回true，否则返回false</li>
<li>anyMatch: 接收一个Predicate函数，只要流中有一个元素满足该断言则返回true，否则返回false</li>
<li>findFIrst: 返回流中第一个元素</li>
<li>findAny: 返回流中的任意元素</li>
<li>count: 返回流中元素总个数</li>
<li>max: 返回流中元素的最大值</li>
<li>min: 返回流中元素的最小值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------method1----------&quot;</span>);</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> allMatch = list.stream().anyMatch(e -&gt; e &gt; <span class="number">10</span>);    <span class="comment">// false</span></span><br><span class="line">    <span class="keyword">boolean</span> noneMatch = list.stream().noneMatch(e -&gt; e &gt; <span class="number">10</span>);  <span class="comment">// true</span></span><br><span class="line">    <span class="keyword">boolean</span> anyMatch = list.stream().anyMatch(e -&gt; e &gt; <span class="number">4</span>);     <span class="comment">// true</span></span><br><span class="line">    System.out.println(allMatch + <span class="string">&quot; &quot;</span> + noneMatch + <span class="string">&quot; &quot;</span> + anyMatch);</span><br><span class="line"></span><br><span class="line">    Integer findFirst = list.stream().findFirst().get();</span><br><span class="line">    Integer findAny = list.stream().findAny().get();</span><br><span class="line">    System.out.println(<span class="string">&quot;first = &quot;</span> + findFirst + <span class="string">&quot;, any = &quot;</span> + findAny);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> count = list.stream().count();</span><br><span class="line">    Integer max = list.stream().max(Integer::compareTo).get();</span><br><span class="line">    Integer min = list.stream().min(Integer::compareTo).get();</span><br><span class="line">    System.out.println(<span class="string">&quot;count = &quot;</span> + count + <span class="string">&quot;, max = &quot;</span> + max + <span class="string">&quot;, min = &quot;</span> + min);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="3-2-规约操作"><a href="#3-2-规约操作" class="headerlink" title="3.2 规约操作"></a>3.2 规约操作</h4><p>Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator)：第一次执行时，accumulator函数的第一个参数为流中的第一个元素，第二个参数为流中元素的第二个元素；第二次执行时，第一个参数为第一次函数执行的结果，第二个参数为流中的第三个元素；依次类推。<br>     T reduce(T identity, BinaryOperator&lt;T&gt; accumulator)：流程跟上面一样，只是第一次执行时，accumulator函数的第一个参数为identity，而第二个参数为流中的第一个元素。<br>     &lt;U&gt; U reduce(U identity,BiFunction&lt;U, ? super T, U&gt; accumulator,BinaryOperator&lt;U&gt; combiner)：在串行流(stream)中，该方法跟第二个方法一样，即第三个参数combiner不会起作用。在并行流(parallelStream)中,我们知道流被fork join出多个线程进行执行，此时每个线程的执行流程就跟第二个方法reduce(identity,accumulator)一样，而第三个参数combiner函数，则是将每个线程的执行结果当成一个新的流，然后使用第一个方法reduce(accumulator)流程进行规约。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 规约</span></span><br><span class="line"><span class="comment"> * reduce</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------method2----------&quot;</span>);</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 求和</span></span><br><span class="line">    Integer v = list.stream().reduce(<span class="number">0</span>, (x1, x2) -&gt; x1 + x2);</span><br><span class="line">    System.out.println(<span class="string">&quot;sum = &quot;</span>  + v);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 10 + 和</span></span><br><span class="line">    Integer v1 = list.stream().reduce(<span class="number">10</span>, (x1, x2) -&gt; x1 + x2);</span><br><span class="line">    System.out.println(<span class="string">&quot;10 + sum = &quot;</span> + v1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 求-和</span></span><br><span class="line">    Integer v2 = list.stream().reduce(<span class="number">0</span>,</span><br><span class="line">            (x1, x2) -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;stream accumulator: x1: &quot;</span> + x1 + <span class="string">&quot; x2: &quot;</span> + x2);</span><br><span class="line">                <span class="keyword">return</span> x1 - x2;</span><br><span class="line">            &#125;</span><br><span class="line">            );</span><br><span class="line">    System.out.println(v2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 求累积</span></span><br><span class="line">    Integer v3 = list.stream().reduce(<span class="number">1</span>,</span><br><span class="line">            (x1, x2) -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;stream combiner: x1:&quot;</span> + x1 + <span class="string">&quot;  x2:&quot;</span> + x2);</span><br><span class="line">                <span class="keyword">return</span> x1 * x2;</span><br><span class="line">            &#125;</span><br><span class="line">     );</span><br><span class="line">    System.out.println(v3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字符串拼接</span></span><br><span class="line">    List&lt;String&gt; list1 = Arrays.asList(<span class="string">&quot;K&quot;</span>, <span class="string">&quot;Highness&quot;</span>, <span class="string">&quot;. Nice &quot;</span>, <span class="string">&quot;to &quot;</span>, <span class="string">&quot;meet &quot;</span>, <span class="string">&quot;you&quot;</span>);</span><br><span class="line">    String res = list1.stream().reduce(<span class="string">&quot;Hello &quot;</span>, (c1, c2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> c1 + c2;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="3-3-收集操作"><a href="#3-3-收集操作" class="headerlink" title="3.3 收集操作"></a>3.3 收集操作</h4><p> collect：接收一个Collector实例，将流中元素收集成另外一个数据结构。<br>     Collector&lt;T, A, R&gt; 是一个接口，有以下5个抽象方法：<br>       Supplier&lt;A&gt; supplier()：创建一个结果容器A<br>       BiConsumer&lt;A, T&gt; accumulator()：消费型接口，第一个参数为容器A，第二个参数为流中元素T。<br>       BinaryOperator&lt;A&gt; combiner()：函数接口，该参数的作用跟上一个方法(reduce)中的combiner参数一样，将并行流中各                                 个子进程的运行结果(accumulator函数操作后的容器A)进行合并。<br>       Function&lt;A, R&gt; finisher()：函数式接口，参数为：容器A，返回类型为：collect方法最终想要的结果R。<br>       Set&lt;Characteristics&gt; characteristics()：返回一个不可变的Set集合，用来表明该Collector的特征。有以下三个特征：<br>         CONCURRENT：表示此收集器支持并发。（官方文档还有其他描述，暂时没去探索，故不作过多翻译）<br>         UNORDERED：表示该收集操作不会保留流中元素原有的顺序。<br>         IDENTITY_FINISH：表示finisher参数只是标识而已，可忽略。</p>
]]></content>
      <categories>
        <category>-Stream</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>叶惠美</title>
    <url>/2020/10/13/Yehuimei/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>
        <div id="aplayer-xZpfSEkv" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;"></div>
			  <script>
				  var options = {"narrow":false,"autoplay":false,"showlrc":1,"mode":"oredr","mutex":true,"theme":"#e6d0b2","preload":"metadata","listmaxheight":"513px","music":[{"title":"以父之名","author":"周杰伦","url":"/2020/10/13/Yehuimei/以父之名.ogg","pic":"/2020/10/13/Yehuimei/YHM.jpg","lrc":"以父之名.txt"},{"title":"懦夫","author":"周杰伦","url":"/2020/10/13/Yehuimei/懦夫.ogg","pic":"/2020/10/13/Yehuimei/YHM.jpg","lrc":"懦夫.txt"},{"title":"晴天","author":"周杰伦","url":"/2020/10/13/Yehuimei/晴天.flac","pic":"/2020/10/13/Yehuimei/YHM.jpg","lrc":"晴天.txt"},{"title":"三年二班","author":"周杰伦","url":"/2020/10/13/Yehuimei/三年二班.ogg","pic":"/2020/10/13/Yehuimei/YHM.jpg","lrc":"三年二班.txt"},{"title":"东风破","author":"周杰伦","url":"/2020/10/13/Yehuimei/东风破.ogg","pic":"/2020/10/13/Yehuimei/YHM.jpg","lrc":"东风破.txt"},{"title":"你听得到","author":"周杰伦","url":"/2020/10/13/Yehuimei/你听得到.ogg","pic":"/2020/10/13/Yehuimei/YHM.jpg","lrc":"你听得到.txt"},{"title":"同一种调调","author":"周杰伦","url":"/2020/10/13/Yehuimei/同一种调调.ogg","pic":"/2020/10/13/Yehuimei/YHM.jpg","lrc":"同一种调调.txt"},{"title":"她的睫毛","author":"周杰伦","url":"/2020/10/13/Yehuimei/她的睫毛.ogg","pic":"/2020/10/13/Yehuimei/YHM.jpg","lrc":"她的睫毛.txt"},{"title":"爱情悬崖","author":"周杰伦","url":"/2020/10/13/Yehuimei/爱情悬崖.ogg","pic":"/2020/10/13/Yehuimei/YHM.jpg","lrc":"爱情悬崖.txt"},{"title":"梯田","author":"周杰伦","url":"/2020/10/13/Yehuimei/梯田.ogg","pic":"/2020/10/13/Yehuimei/YHM.jpg","lrc":"梯田.txt"},{"title":"双刀","author":"周杰伦","url":"/2020/10/13/Yehuimei/双刀.ogg","pic":"/2020/10/13/Yehuimei/YHM.jpg","lrc":"双刀.txt"}]};
				  options.element = document.getElementById("aplayer-xZpfSEkv");
				  var ap = new APlayer(options);
			    window.aplayers || (window.aplayers = []);
				  window.aplayers.push(ap);
			  </script>



<center>
<p>以上,歌曲均来源于QQ音乐下载后的格式解码，歌词还没有补充上，有时间再update</p>
</center>


]]></content>
      <categories>
        <category>Jay</category>
      </categories>
      <tags>
        <tag>叶惠美</tag>
      </tags>
  </entry>
  <entry>
    <title>Http状态码</title>
    <url>/2020/06/01/HttpCode/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Http状态码"><a href="#Http状态码" class="headerlink" title="Http状态码"></a>Http状态码</h1><center>
    <font face="Kristen ITC" color="#555555" font-size=100px>Khighness</font><br>
</center>



<table>
<thead>
<tr>
<th align="center">分类</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1**</td>
<td align="center">信息，服务器收到请求，需要请求者继续执行操作</td>
</tr>
<tr>
<td align="center">2**</td>
<td align="center">成功，操作被成功接收并处理</td>
</tr>
<tr>
<td align="center">3**</td>
<td align="center">重定向，需要进一步的操作以完成请求</td>
</tr>
<tr>
<td align="center">4**</td>
<td align="center">客户端错误，请求白蛤语法错误或无分发完成请求</td>
</tr>
<tr>
<td align="center">5**</td>
<td align="center">服务器错误，服务器才处理请求的过程中发生了错误</td>
</tr>
</tbody></table>
<h2 id="1xx-消息"><a href="#1xx-消息" class="headerlink" title="1xx-消息"></a>1xx-消息</h2><p>这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于HTTP/1.0协议中没有定义任何1xx状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送1xx响应。 这些状态码代表的响应都是信息性的，标示客户应该采取的其他行动。</p>
<ul>
<li><p>100 Continue<br>服务器已经接收到请求头，并且客户端应继续发送请求主体（在需要发送身体的请求的情况下：例如，POST请求），或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。要使服务器检查请求的头部，客户端必须在其初始请求中发送Expect: 100-continue作为头部，并在发送正文之前接收100 Continue状态代码。响应代码417期望失败表示请求不应继续。</p>
</li>
<li><p>101 Switching Protocols<br>服务器已经理解了客户端的请求，并将通过Upgrade消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade消息头中定义的那些协议。<br>只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的HTTP版本（如HTTP/2）比旧版本更有优势，或者切换到一个实时且同步的协议（如WebSocket）以传送利用此类特性的资源。</p>
</li>
<li><p>102 Processing（WebDAV；RFC 2518）<br>WebDAV请求可能包含许多涉及文件操作的子请求，需要很长时间才能完成请求。该代码表示服务器已经收到并正在处理请求，但无响应可用。[6]这样可以防止客户端超时，并假设请求丢失。</p>
</li>
</ul>
<h2 id="2xx-成功"><a href="#2xx-成功" class="headerlink" title="2xx-成功"></a>2xx-成功</h2><p>这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。</p>
<ul>
<li><p>200 OK<br>请求已成功，请求所希望的响应头或数据体将随此响应返回。实际的响应将取决于所使用的请求方法。在GET请求中，响应将包含与请求的资源相对应的实体。在POST请求中，响应将包含描述或操作结果的实体。</p>
</li>
<li><p>201 Created<br>请求已经被实现，而且有一个新的资源已经依据请求的需要而创建，且其URI已经随Location头信息返回。假如需要的资源无法及时创建的话，应当返回’202 Accepted’。</p>
</li>
<li><p>202 Accepted<br>服务器已接受请求，但尚未处理。最终该请求可能会也可能不会被执行，并且可能在处理发生时被禁止。</p>
</li>
<li><p>203 Non-Authoritative Information（自HTTP / 1.1起）<br>服务器是一个转换代理服务器（transforming proxy，例如网络加速器），以200 OK状态码为起源，但回应了原始响应的修改版本。</p>
</li>
<li><p>204 No Content<br>服务器成功处理了请求，没有返回任何内容。</p>
</li>
<li><p>205 Reset Content<br>服务器成功处理了请求，但没有返回任何内容。与204响应不同，此响应要求请求者重置文档视图。</p>
</li>
<li><p>206 Partial Content<br>服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。</p>
</li>
<li><p>207 Multi-Status（WebDAV；RFC 4918）<br>代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。</p>
</li>
<li><p>208 Already Reported （WebDAV；RFC 5842）<br>DAV绑定的成员已经在（多状态）响应之前的部分被列举，且未被再次包含。</p>
</li>
<li><p>226 IM Used （RFC 3229）<br>服务器已经满足了对资源的请求，对实体请求的一个或多个实体操作的结果表示。</p>
</li>
</ul>
<h2 id="3xx-重定向"><a href="#3xx-重定向" class="headerlink" title="3xx-重定向"></a>3xx-重定向</h2><p>这类状态码代表需要客户端采取进一步的操作才能完成请求。通常，这些状态码用来重定向，后续的请求地址（重定向目标）在本次响应的Location域中指明。</p>
<p>当且仅当后续的请求所使用的方法是GET或者HEAD时，用户浏览器才可以在没有用户介入的情况下自动提交所需要的后续请求。客户端应当自动监测无限循环重定向（例如：A→B→C→……→A或A→A），因为这会导致服务器和客户端大量不必要的资源消耗。按照HTTP/1.0版规范的建议，浏览器不应自动访问超过5次的重定向。</p>
<ul>
<li><p>300 Multiple Choices<br>被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。<br>除非这是一个HEAD请求，否则该响应应当包括一个资源特性及地址的列表的实体，以便用户或浏览器从中选择最合适的重定向地址。这个实体的格式由Content-Type定义的格式所决定。浏览器可能根据响应的格式以及浏览器自身能力，自动作出最合适的选择。当然，RFC 2616规范并没有规定这样的自动选择该如何进行。<br>如果服务器本身已经有了首选的回馈选择，那么在Location中应当指明这个回馈的URI；浏览器可能会将这个Location值作为自动重定向的地址。此外，除非额外指定，否则这个响应也是可缓存的。</p>
</li>
<li><p>301 Moved Permanently<br>被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。<br>新的永久性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。<br>如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。<br>注意：对于某些使用HTTP/1.0协议的浏览器，当它们发送的POST请求得到了一个301响应的话，接下来的重定向请求将会变成GET方式。</p>
</li>
<li><p>302 Found<br>要求客户端执行临时重定向（原始描述短语为“Moved Temporarily”）。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。<br>新的临时性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。<br>如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。<br>注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用GET方式访问在Location中规定的URI，而无视原先请求的方法。因此状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。</p>
</li>
<li><p>303 See Other<br>对应当前请求的响应可以在另一个URI上被找到，当响应于POST（或PUT / DELETE）接收到响应时，客户端应该假定服务器已经收到数据，并且应该使用单独的GET消息发出重定向。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的URI不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。<br>新的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。<br>注意：许多HTTP/1.1版以前的浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。</p>
</li>
<li><p>304 Not Modified<br>表示资源未被修改，因为请求头指定的版本If-Modified-Since或If-None-Match。在这种情况下，由于客户端仍然具有以前下载的副本，因此不需要重新传输资源。</p>
</li>
<li><p>305 Use Proxy<br>被请求的资源必须通过指定的代理才能被访问。Location域中将给出指定的代理所在的URI信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能创建305响应。许多HTTP客户端（像是Mozilla和Internet Explorer）都没有正确处理这种状态代码的响应，主要是出于安全考虑。<br>注意：RFC 2068中没有明确305响应是为了重定向一个单独的请求，而且只能被原始服务器建立。忽视这些限制可能导致严重的安全后果。</p>
</li>
<li><p>306 Switch Proxy<br>在最新版的规范中，306状态码已经不再被使用。最初是指“后续请求应使用指定的代理”。</p>
</li>
<li><p>307 Temporary Redirect<br>在这种情况下，请求应该与另一个URI重复，但后续的请求应仍使用原始的URI。 与302相反，当重新发出原始请求时，不允许更改请求方法。 例如，应该使用另一个POST请求来重复POST请求。</p>
</li>
<li><p>308 Permanent Redirect (RFC 7538)<br>请求和所有将来的请求应该使用另一个URI重复。 307和308重复302和301的行为，但不允许HTTP方法更改。 例如，将表单提交给永久重定向的资源可能会顺利进行。</p>
</li>
</ul>
<h2 id="4xx-客户端错误"><a href="#4xx-客户端错误" class="headerlink" title="4xx-客户端错误"></a>4xx-客户端错误</h2><p>这类的状态码代表了客户端看起来可能发生了错误，妨碍了服务器的处理。除非响应的是一个HEAD请求，否则服务器就应该返回一个解释当前错误状况的实体，以及这是临时的还是永久性的状况。这些状态码适用于任何请求方法。浏览器应当向用户显示任何包含在此类错误响应中的实体内容。</p>
<p>如果错误发生时客户端正在传送数据，那么使用TCP的服务器实现应当仔细确保在关闭客户端与服务器之间的连接之前，客户端已经收到了包含错误信息的数据包。如果客户端在收到错误信息后继续向服务器发送数据，服务器的TCP栈将向客户端发送一个重置数据包，以清除该客户端所有还未识别的输入缓冲，以免这些数据被服务器上的应用程序读取并干扰后者。</p>
<ul>
<li><p>400 Bad Request<br>由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求。</p>
</li>
<li><p>401 Unauthorized（RFC 7235）<br>参见：HTTP基本认证、HTTP摘要认证<br>类似于403 Forbidden，401语义即“未认证”，即用户没有必要的凭据。该状态码表示当前请求需要用户验证。该响应必须包含一个适用于被请求资源的WWW-Authenticate信息头用以询问用户信息。客户端可以重复提交一个包含恰当的Authorization头信息的请求。[33]如果当前请求已经包含了Authorization证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。<br>注意：当网站（通常是网站域名）禁止IP地址时，有些网站状态码显示的401，表示该特定地址被拒绝访问网站。</p>
</li>
<li><p>402 Payment Required<br>该状态码是为了将来可能的需求而预留的。该状态码最初的意图可能被用作某种形式的数字现金或在线支付方案的一部分，但几乎没有哪家服务商使用，而且这个状态码通常不被使用。如果特定开发人员已超过请求的每日限制，Google Developers API会使用此状态码。</p>
</li>
<li><p>403 Forbidden<br>主条目：HTTP 403<br>服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个HEAD请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。</p>
</li>
<li><p>404 Not Found<br>主条目：HTTP 404<br>请求失败，请求所希望得到的资源未被在服务器上发现，但允许用户的后续请求。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。</p>
</li>
<li><p>405 Method Not Allowed<br>请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow头信息用以表示出当前资源能够接受的请求方法的列表。例如，需要通过POST呈现数据的表单上的GET请求，或只读资源上的PUT请求。<br>鉴于PUT，DELETE方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。</p>
</li>
<li><p>406 Not Acceptable<br>参见：内容协商<br>请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体，该请求不可接受。<br>除非这是一个HEAD请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址列表的实体。实体的格式由Content-Type头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准。</p>
</li>
<li><p>407 Proxy Authentication Required（RFC 2617）<br>与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个Proxy-Authenticate用以进行身份询问。客户端可以返回一个Proxy-Authorization信息头用以验证。</p>
</li>
<li><p>408 Request Timeout<br>请求超时。根据HTTP规范，客户端没有在服务器预备等待的时间内完成一个请求的发送，客户端可以随时再次提交这一请求而无需进行任何更改。</p>
</li>
<li><p>409 Conflict<br>表示因为请求存在冲突无法处理该请求，例如多个同步更新之间的编辑冲突。</p>
</li>
<li><p>410 Gone<br>表示所请求的资源不再可用，将不再可用。当资源被有意地删除并且资源应被清除时，应该使用这个。在收到410状态码后，用户应停止再次请求资源。但大多数服务端不会使用此状态码，而是直接使用404状态码。</p>
</li>
<li><p>411 Length Required<br>服务器拒绝在没有定义Content-Length头的情况下接受请求。在添加了表明请求消息体长度的有效Content-Length头之后，客户端可以再次提交该请求。</p>
</li>
<li><p>412 Precondition Failed（RFC 7232）<br>服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。</p>
</li>
<li><p>413 Request Entity Too Large（RFC 7231）<br>前称“Request Entity Too Large”，表示服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。<br>如果这个状况是临时的，服务器应当返回一个Retry-After的响应头，以告知客户端可以在多少时间以后重新尝试。</p>
</li>
<li><p>414 Request-URI Too Long（RFC 7231）<br>前称“Request-URI Too Long”，表示请求的URI长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。通常将太多数据的结果编码为GET请求的查询字符串，在这种情况下，应将其转换为POST请求。这比较少见，通常的情况包括：<br>本应使用POST方法的表单提交变成了GET方法，导致查询字符串过长。<br>重定向URI“黑洞”，例如每次重定向把旧的URI作为新的URI的一部分，导致在若干次重定向后URI超长。<br>客户端正在尝试利用某些服务器中存在的安全漏洞攻击服务器。这类服务器使用固定长度的缓冲读取或操作请求的URI，当GET后的参数超过某个数值后，可能会产生缓冲区溢出，导致任意代码被执行。没有此类漏洞的服务器，应当返回414状态码。</p>
</li>
<li><p>415 Unsupported Media Type<br>对于当前请求的方法和所请求的资源，请求中提交的互联网媒体类型并不是服务器中所支持的格式，因此请求被拒绝。例如，客户端将图像上传格式为svg，但服务器要求图像使用上传格式为jpg。</p>
</li>
<li><p>416 Requested Range Not Satisfiable（RFC 7233）<br>前称“Requested Range Not Satisfiable”。客户端已经要求文件的一部分（Byte serving），但服务器不能提供该部分。例如，如果客户端要求文件的一部分超出文件尾端。</p>
</li>
<li><p>417 Expectation Failed<br>在请求头Expect中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服显的证据证明在当前路由的下一个节点上，Expect的内容无法被满足。</p>
</li>
<li><p>418 I’m a teapot（RFC 2324）<br>本操作码是在1998年作为IETF的传统愚人节笑话, 在RFC 2324超文本咖啡壶控制协议’中定义的，并不需要在真实的HTTP服务器中定义。当一个控制茶壶的HTCPCP收到BREW或POST指令要求其煮咖啡时应当回传此错误。这个HTTP状态码在某些网站（包括Google.com）与项目（如Node.js、ASP.NET和Go语言）中用作彩蛋。</p>
</li>
<li><p>420 Enhance Your Caim<br>Twitter Search与Trends API在客户端被限速的情况下返回。</p>
</li>
<li><p>421 Misdirected Request （RFC 7540）<br>该请求针对的是无法产生响应的服务器（例如因为连接重用）。</p>
</li>
<li><p>422 Unprocessable Entity（WebDAV；RFC 4918 ）<br>请求格式正确，但是由于含有语义错误，无法响应。</p>
</li>
<li><p>423 Locked（WebDAV；RFC 4918）<br>当前资源被锁定。</p>
</li>
<li><p>424 Failed Dependency（WebDAV；RFC 4918）<br>由于之前的某个请求发生的错误，导致当前请求失败，例如PROPPATCH。</p>
</li>
<li><p>425 Unordered Collection<br>在WebDAV Advanced Collections Protocol中定义，但Web Distributed Authoring and Versioning (WebDAV) Ordered Collections Protocol中并不存在。</p>
</li>
<li><p>426 Upgrade Required（RFC 2817）<br>客户端应当切换到TLS/1.0，并在HTTP/1.1 Upgrade header中给出。</p>
</li>
<li><p>428 Precondition Required (RFC 6585)<br>原服务器要求该请求满足一定条件。这是为了防止“‘未更新’问题，即客户端读取（GET）一个资源的状态，更改它，并将它写（PUT）回服务器，但这期间第三方已经在服务器上更改了该资源的状态，因此导致了冲突。”</p>
</li>
<li><p>429 Too Many Requests （RFC 6585）<br>用户在给定的时间内发送了太多的请求。旨在用于网络限速。</p>
</li>
<li><p>431 Request Header Fields Too Large （RFC 6585）<br>服务器不愿处理请求，因为一个或多个头字段过大。</p>
</li>
<li><p>444 No Response<br>Nginx上HTTP服务器扩展。服务器不向客户端返回任何信息，并关闭连接（有助于阻止恶意软件）。</p>
</li>
<li><p>450 Blocked by Windows Parental Controls<br>这是一个由Windows家庭控制（Microsoft）HTTP阻止的450状态代码的示例，用于信息和测试。</p>
</li>
<li><p>451 Unavailable For Legal Reasons<br>该访问因法律的要求而被拒绝，由IETF在2015核准后新增加。</p>
</li>
<li><p>494 Request Header Too Large<br>在错误代码431提出之前Nginx上使用的扩展HTTP代码。</p>
</li>
</ul>
<h2 id="5xx-服务器错误"><a href="#5xx-服务器错误" class="headerlink" title="5xx-服务器错误"></a>5xx-服务器错误</h2><p>表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。除非这是一个HEAD请求，否则服务器应当包含一个解释当前错误状态以及这个状况是临时的还是永久的解释信息实体。浏览器应当向用户展示任何在当前响应中被包含的实体。这些状态码适用于任何响应方法。</p>
<ul>
<li><p>500 Internal Server Error<br>通用错误消息，服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。没有给出具体错误信息。</p>
</li>
<li><p>501 Not Implemented<br>服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。（例如，网络服务API的新功能）</p>
</li>
<li><p>502 Bad Gateway<br>作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。</p>
</li>
<li><p>503 Service Unavailable<br>由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是暂时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个Retry-After头用以标明这个延迟时间。如果没有给出这个Retry-After信息，那么客户端应当以处理500响应的方式处理它。</p>
</li>
<li><p>504 Gateway Timeout<br>作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。<br>注意：某些代理服务器在DNS查询超时时会返回400或者500错误。</p>
</li>
<li><p>505 HTTP Version Not Supported<br>服务器不支持，或者拒绝支持在请求中使用的HTTP版本。[63]这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体。</p>
</li>
<li><p>506 Variant Also Negotiates（RFC 2295）<br>由《透明内容协商协议》（RFC 2295）扩展，代表服务器存在内部配置错误，被请求的协商变元资源被配置为在透明内容协商中使用自己，因此在一个协商处理中不是一个合适的重点。</p>
</li>
<li><p>507 Insufficient Storage（WebDAV；RFC 4918）<br>服务器无法存储完成请求所必须的内容。这个状况被认为是临时的。</p>
</li>
<li><p>508 Loop Detected （WebDAV；RFC 5842）<br>服务器在处理请求时陷入死循环。 （可代替 208状态码）</p>
</li>
<li><p>510 Not Extended（RFC 2774）<br>获取资源所需要的策略并没有被满足。</p>
</li>
<li><p>511 Network Authentication Required （RFC 6585）<br>客户端需要进行身份验证才能获得网络访问权限，旨在限制用户群访问特定网络。（例如连接WiFi热点时的强制网络门户）</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Http</category>
      </categories>
      <tags>
        <tag>HttpCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Regex</title>
    <url>/2020/10/06/Regex/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Regex"><a href="#Regex" class="headerlink" title="Regex"></a>Regex</h1><center>
    <font face="Kristen ITC" color="#555555" font-size=100px>Khighness</font><br>
</center>



<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><blockquote>
<p>Regex</p>
</blockquote>
<p><strong>正则表达式，Regular Expression</strong></p>
<blockquote>
<p>为什么需要正则表达式？</p>
</blockquote>
<p><strong>文本的复杂处理</strong></p>
<blockquote>
<p>正则表达式的优势和用途？</p>
</blockquote>
<ul>
<li><strong>一种强大而灵活的文本处理工具</strong></li>
<li><strong>大部分编程语言、数据库、文本编辑器、开发环境都支持正则表达式</strong></li>
</ul>
<blockquote>
<p>正则表达式定义：</p>
</blockquote>
<p><strong>一种字符串匹配的模式</strong></p>
<blockquote>
<p>开发中使用</p>
</blockquote>
<ul>
<li>分析所要匹配的数据，写出测试用的典型数据</li>
<li>在工具软件中进行匹配测试</li>
<li>在程序中调用测试的正则表达式</li>
</ul>
<h2 id="2-语法"><a href="#2-语法" class="headerlink" title="2. 语法"></a>2. 语法</h2><h3 id="2-1-标准字符集合"><a href="#2-1-标准字符集合" class="headerlink" title="2.1 标准字符集合"></a>2.1 标准字符集合</h3><ul>
<li>能够与”多种字符”匹配的表达式</li>
<li>注意区分大小写，大写是相反的意思</li>
</ul>
<table>
<thead>
<tr>
<th align="center">字符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\d</td>
<td align="center">任意一个数字，0-9中的任意一个</td>
</tr>
<tr>
<td align="center">\w</td>
<td align="center">任意一个字母或数字或下划线，也就是A-Z、a-z、0-9、_中任意一个</td>
</tr>
<tr>
<td align="center">\s</td>
<td align="center">包括空格、制表符、换行符等空白字符的其中一个</td>
</tr>
<tr>
<td align="center">.</td>
<td align="center">小数点可以匹配任意一个字符(除了换行符)， 如果要匹配包括”\n”在内的所有字符，一般用<code>[\s\S]</code></td>
</tr>
</tbody></table>
<p>如果要匹配真正的’.’、’+’、’-‘、’\&#39; ， 就要转义，用<code>\.</code>、<code>\+</code>、<code>\-</code>、<code>\\</code></p>
<h3 id="2-2-自定义字符集合"><a href="#2-2-自定义字符集合" class="headerlink" title="2.2 自定义字符集合"></a>2.2 自定义字符集合</h3><ul>
<li>[]方括号匹配方式，能够匹配方括号中任意一个字符</li>
<li>正则表达式的特殊符号，被包含到中括号中，则失去了特殊意义，除了^、-之外</li>
<li>标准字符集合，除小数点外，如果被包含于中括号，自定义字符集合被包含该集合<ul>
<li>[\d.-+]将匹配：数字、小数点、+、-</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">例如</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">[ab5@]</td>
<td align="center">匹配”a”或”b”或”5”或”@”</td>
</tr>
<tr>
<td align="center">[^abc]</td>
<td align="center">匹配”a”、”b”、”c”之外的任意一个字符</td>
</tr>
<tr>
<td align="center">[f-k]</td>
<td align="center">匹配”f”-“k”之间的任意一个字母</td>
</tr>
<tr>
<td align="center">[^A-F0-3]</td>
<td align="center">匹配”A”-“F”、”0”-“3”之外的任意一个字符</td>
</tr>
</tbody></table>
<h3 id="2-3-量词"><a href="#2-3-量词" class="headerlink" title="2.3 量词"></a>2.3 量词</h3><ul>
<li>修饰匹配次数的特殊符号</li>
<li>匹配次数中的贪婪模式(匹配字符越多越好，默认)</li>
<li>匹配次数中的非贪婪模式(匹配字符越少越好，在修饰匹配次数的特殊符号后再加上一个”?”号)</li>
</ul>
<table>
<thead>
<tr>
<th align="center">量词</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">{n}</td>
<td align="center">表达式重复n次</td>
</tr>
<tr>
<td align="center">{m,n}</td>
<td align="center">表达式至少重复m次，最多重复n次</td>
</tr>
<tr>
<td align="center">{m,}</td>
<td align="center">表达式至少重复m次</td>
</tr>
<tr>
<td align="center">?</td>
<td align="center">表达式匹配0次或1次，相当于{0,1}</td>
</tr>
<tr>
<td align="center">+</td>
<td align="center">表达式至少出现1次，相当于{1,}</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">表达式不出现或出现任意次，相当于{0,}</td>
</tr>
</tbody></table>
<p>例如：</p>
<ul>
<li><code>[A-Za-z]+</code>可以匹配单词</li>
</ul>
<p>例如文本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6、7、8、9、</span><br><span class="line">1、2、3、4、5、6、7、8、9、</span><br><span class="line">ab a1b a12b a123b a1234b a12345b </span><br></pre></td></tr></table></figure>

<p><code>(\d、)&#123;1,3&#125;</code>的匹配结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6、7、8、</span><br><span class="line">9、</span><br><span class="line">1、2、3、</span><br><span class="line">4、5、6、</span><br><span class="line">7、8、9、</span><br></pre></td></tr></table></figure>

<p><code>(\d、)&#123;1,3&#125;?</code>的匹配结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6、</span><br><span class="line">7、</span><br><span class="line">8、</span><br><span class="line">9、</span><br><span class="line">1、</span><br><span class="line">2、</span><br><span class="line">3、</span><br><span class="line">4、</span><br><span class="line">5、</span><br><span class="line">6、</span><br><span class="line">7、</span><br><span class="line">8、</span><br><span class="line">9、</span><br></pre></td></tr></table></figure>

<p><code>a\d?b</code>的匹配结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ab</span><br><span class="line">a1b</span><br></pre></td></tr></table></figure>

<p><code>a\d+b</code>的匹配结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a1b</span><br><span class="line">a12b</span><br><span class="line">a123b</span><br><span class="line">a1234b</span><br><span class="line">a12345b</span><br></pre></td></tr></table></figure>

<p><code>a\d-b</code>的匹配结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ab</span><br><span class="line">a1b</span><br><span class="line">a12b</span><br><span class="line">a123b</span><br><span class="line">a1234b</span><br><span class="line">a12345b</span><br></pre></td></tr></table></figure>



<h3 id="2-4-字符边界"><a href="#2-4-字符边界" class="headerlink" title="2.4 字符边界"></a>2.4 字符边界</h3><table>
<thead>
<tr>
<th align="center">字符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">^</td>
<td align="center">与字符串开始的地方匹配</td>
</tr>
<tr>
<td align="center">$</td>
<td align="center">与字符串结束的地方匹配</td>
</tr>
<tr>
<td align="center">\b</td>
<td align="center">匹配一个单词边界</td>
</tr>
</tbody></table>
<p><code>\b</code>匹配这样一个位置：前面的字符和后面的字符不全是\w</p>
<p>例如文本:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Khighness </span><br><span class="line">Khighness1 Khighness2</span><br><span class="line">3Khighness </span><br><span class="line">4Khighness </span><br><span class="line">Khighness5 Khighness6</span><br><span class="line">7Khighness </span><br><span class="line">8Khighness</span><br></pre></td></tr></table></figure>

<p><code>^K</code>匹配最初的”K”，<code>s$</code>匹配最后的”s”；</p>
<p><code>Khighness\b</code>匹配第1、3、4、6、7行的”Khighness”；</p>
<p><code>\bKhighness</code>匹配第1、2、5行的”Khighness”；</p>
<p><code>\bKhighness\b</code>匹配第1行的”Khighness”。</p>
<h3 id="2-5-匹配模式"><a href="#2-5-匹配模式" class="headerlink" title="2.5 匹配模式"></a>2.5 匹配模式</h3><ul>
<li>IGNORECASE-忽略大小写模式<ul>
<li>匹配时忽略大小写</li>
<li>默认情况下，正则表达式是要区分大小写的</li>
</ul>
</li>
<li>SINGLELINE-单行模式<ul>
<li>整个文本看做一个字符串，只有一个开头，一个结尾</li>
<li>使小数点”.”可以匹配包含换行符(\n)在内的任意字符</li>
</ul>
</li>
<li>MULTILINE-多行模式<ul>
<li>每行都是一个字符串，都有开头和结尾</li>
<li>在指定了MULTILINE之后，如果需要仅匹配字符串开始和结束为止，可以使用<code>\A</code>和<code>\Z</code></li>
</ul>
</li>
</ul>
<h3 id="2-7-选择符和分组"><a href="#2-7-选择符和分组" class="headerlink" title="2.7 选择符和分组"></a>2.7 选择符和分组</h3><table>
<thead>
<tr>
<th align="center">表达式</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">分支结构: |</td>
<td align="center">左右两边表达式之间“或”关系，匹配左边或者右边</td>
</tr>
<tr>
<td align="center">捕获组: ()</td>
<td align="center">(1) 在被修饰匹配次数的时候，括号中的表达式可以作为整体被修饰; (2) 取匹配结果的时候，括号中的表达式匹配到的内容可以被单独得到; (3) 每一对括号会分配一个编号，使用()的捕获根据左括号的顺序从1开始自动编号。捕获元素编号为零的第一个捕获是由整个正则表达式模式匹配的文本</td>
</tr>
<tr>
<td align="center">非捕获组: (?:Exception)</td>
<td align="center">一些表达式中，不得不使用()，但又不需要保存()中子表达式匹配的内容，这时可以用非捕获组来抵消使用()带来的副作用</td>
</tr>
</tbody></table>
<ul>
<li>反向引用(\num)<ul>
<li>每一对()会分配一个编号，使用()的捕获模式</li>
</ul>
</li>
</ul>
<p>例如<code>([a-z]&#123;2&#125;)\1</code>可以匹配类似”abab”、”gogo”、”toto”的字符串</p>
<h3 id="2-8-预搜索-零宽断言"><a href="#2-8-预搜索-零宽断言" class="headerlink" title="2.8 预搜索(零宽断言)"></a>2.8 预搜索(零宽断言)</h3><ul>
<li>只进行子表达式的匹配，匹配内容不计入最终的匹配结果，是零宽度</li>
<li>这个位置应该符合某个条件。判断当前位置的前后字符，是否符合指定的条件，但不匹配前后的字符。是对位置的匹配</li>
<li>正则表达式匹配过程中，如果子表达式匹配到的是字符内容，而非位置，并被保存到最终的匹配结果中，那么久认为这个子表达式是占有字符的；如果子表达式匹配的仅仅是位置，或者匹配的内容并不保存到最终的匹配结果中，那么就认为这个子表达式是零宽度的。占有字符还是零宽度，是针对匹配的内容屎否保存到最终的匹配结果中而言的。</li>
</ul>
<table>
<thead>
<tr>
<th align="center">表达式</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">(?=exp)</td>
<td align="center">断言自身出现的位置的后面能匹配表达式exp</td>
</tr>
<tr>
<td align="center">(?&lt;=exp)</td>
<td align="center">断言自身出现的位置的前面能匹配表达式exp</td>
</tr>
<tr>
<td align="center">(?!exp)</td>
<td align="center">断言此位置的后面不能匹配表达式exp</td>
</tr>
<tr>
<td align="center">(?&lt;exp)</td>
<td align="center">断言此位置的前面不能匹配表达式exp</td>
</tr>
</tbody></table>
<p>例如：</p>
<ul>
<li><p><code>[A-Za-z]+(?=ing)</code>可以匹配所有以”ing”结尾的单词(匹配结果不包含”ing”，<code>[A-Za-z]+ing</code>的匹配结果包含”ing”)</p>
</li>
<li><p><code>(?&lt;=in)[A-Za-z]+</code>可以匹配所有以”in”为前缀的单词(匹配结果不包含”in”，<code>in[A-Za-z]+</code>的匹配结果包含”in”)</p>
</li>
</ul>
<h2 id="3-验证"><a href="#3-验证" class="headerlink" title="3. 验证"></a>3. 验证</h2><h3 id="3-1-电话号码验证"><a href="#3-1-电话号码验证" class="headerlink" title="3.1 电话号码验证"></a>3.1 电话号码验证</h3><blockquote>
<p>要求</p>
</blockquote>
<ul>
<li>固定电话号码由数字和”-“构成，电话号码为7到8位</li>
<li>如果固定电话号码中包含有区号，那么区号为三位或四位，首位是0，区号用”-“和其他部分隔开</li>
<li>移动电话号码为11位，第一位和第二位为”13”、”14”、15”、”17”、18”、”19”</li>
</ul>
<blockquote>
<p>分析：</p>
</blockquote>
<ul>
<li>固定电话号码：<code>0\d&#123;2,3&#125;-\d&#123;7,9&#125;</code></li>
<li>移动电话号码: <code>1[3|4|5|7|8|9]\d&#123;9&#125;</code></li>
<li>合起来就是：<code>^0\d&#123;2,3&#125;-\d&#123;7,9&#125;|1[3|4|5|7|8|9]\d&#123;9&#125;$</code></li>
</ul>
<h3 id="3-3-电子邮箱验证"><a href="#3-3-电子邮箱验证" class="headerlink" title="3.3 电子邮箱验证"></a>3.3 电子邮箱验证</h3><blockquote>
<p>要求</p>
</blockquote>
<ul>
<li>电子邮箱格式：名称@域名</li>
<li>邮箱名称部分：允许汉字、字母、数字、中划线和下划线</li>
<li>邮箱域名部分：允许字母、数字、英语句号</li>
</ul>
<blockquote>
<p>分析</p>
</blockquote>
<ul>
<li>邮箱名称表达式：<ul>
<li>汉字<code>[\u4e00-\u9fa5]</code></li>
<li>字母<code>[A-Za-z]</code></li>
<li>数字<code>[0-9]</code></li>
<li>中划线和下划线<code>[-_]</code></li>
<li>综上得到名称表达式<code>[\u4e00-\u9fa5A-Za-z0-9-_]+</code></li>
</ul>
</li>
<li>邮箱域名表达式：<ul>
<li>域名的一般规律为[N级域名].[三级域名].[二级域名].[一级域名]，格式类似为<code>**.**.**.**</code></li>
<li>一级域名只包含字母(如com、top、cn等)，长度为2-4位</li>
<li><code>**</code>部分可以表示为<code>[A-Za-z0-9-_]+</code></li>
<li><code>.**</code>部分可以表示为<code>\.[A-Za-z0-9-_]+</code></li>
<li>零或多个<code>&quot;.**&quot;</code>可以表示为 <code> (\.[A-Za-z0-9-_]+)*</code></li>
<li>一级域名部分<code>.**</code>可以表示为.<code>\.[a-z]&#123;2,4&#125;</code></li>
<li>综上得到域名表达式<code>[A-Za-z0-9-_]+(\.[A-Za-z0-9-_]+)*\.[a-z]&#123;2,4&#125;</code></li>
</ul>
</li>
<li>邮箱最终表达式：<ul>
<li>使用<code>^</code>匹配邮箱最开始的部分，使用<code>$</code>匹配邮箱结束部分以保证邮箱前后不能有其他字符</li>
<li>由”名称@域名”得到最终表达式：<code>[\u4e00-\u9fa5A-Za-z0-9-_]+@[A-Za-z0-9-_]+(\.[A-Za-z0-9-_]+)*\.[a-z]&#123;2,4&#125;</code></li>
<li>简写即为：<code>^[\u4e00-\u9fa5-\w]+@[-\w]+(\.[-\w]+)*\.[a-z]&#123;2,4&#125;$</code></li>
</ul>
</li>
</ul>
<h2 id="4-使用"><a href="#4-使用" class="headerlink" title="4. 使用"></a>4. 使用</h2><p>Java程序中使用正则表达式，相关类位于<code>java.util.regex</code>包下面</p>
<ul>
<li>类<code>Pattern</code>:<ul>
<li>正则表达四的编译表示形式</li>
<li>建立正则表达式，并启用相应模式：<code>Pattern pattern = Pattern.compile(Regular Expression);</code></li>
</ul>
</li>
<li>类<code>Matcher</code>:<ul>
<li>通过解释<code>Pattern</code>对<code>character squence</code>执行匹配操作的引擎</li>
<li>匹配str字符串：<code>Matcher matcher = pattern.matcher(str);</code></li>
<li>将整个字符串序列与该模式匹配：<code>boolean res1 = matcher.matches();</code></li>
<li>扫描字符串序列，查找与该模式匹配的下一个子序列：<code>boolean res2 = matcher.find();</code></li>
</ul>
</li>
</ul>
<h3 id="4-1-基本操作"><a href="#4-1-基本操作" class="headerlink" title="4.1 基本操作"></a>4.1 基本操作</h3><blockquote>
<p>代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/7 15:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: 基本操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 正则匹配模式</span></span><br><span class="line">        Pattern pattern = Pattern.compile(<span class="string">&quot;\\w+&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 匹配操作引擎</span></span><br><span class="line">        Matcher matcher = pattern.matcher(<span class="string">&quot;KHighness||ParaK||FlowerK||18236763&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 完整匹配</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------完整匹配----------&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> res = matcher.matches();</span><br><span class="line">        System.out.println(<span class="string">&quot;匹配结果：&quot;</span> + res + <span class="string">&quot;，匹配字符串：&quot;</span> + (res ? matcher.group() : <span class="string">&quot;NULL&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每次操作完引擎中的字符串都会到达末尾，需要重新写</span></span><br><span class="line">        matcher = pattern.matcher(<span class="string">&quot;KHighness||ParaK||FlowerK||18236763&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 子串匹配</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------子串匹配----------&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> res1 = matcher.find();</span><br><span class="line">        System.out.println(<span class="string">&quot;匹配结果：&quot;</span> + res1 + <span class="string">&quot;，匹配字符串：&quot;</span> + (res1 ? matcher.group() : <span class="string">&quot;NULL&quot;</span>));</span><br><span class="line">        <span class="keyword">boolean</span> res2 = matcher.find();</span><br><span class="line">        System.out.println(<span class="string">&quot;匹配结果：&quot;</span> + res2 + <span class="string">&quot;，匹配字符串：&quot;</span> + (res2 ? matcher.group() : <span class="string">&quot;NULL&quot;</span>));</span><br><span class="line">        <span class="keyword">boolean</span> res3 = matcher.find();</span><br><span class="line">        System.out.println(<span class="string">&quot;匹配结果：&quot;</span> + res3 + <span class="string">&quot;，匹配字符串：&quot;</span> + (res3 ? matcher.group() : <span class="string">&quot;NULL&quot;</span>));</span><br><span class="line">        <span class="keyword">boolean</span> res4 = matcher.find();</span><br><span class="line">        System.out.println(<span class="string">&quot;匹配结果：&quot;</span> + res4 + <span class="string">&quot;，匹配字符串：&quot;</span> + (res4 ? matcher.group() : <span class="string">&quot;NULL&quot;</span>));</span><br><span class="line">        <span class="keyword">boolean</span> res5 = matcher.find();</span><br><span class="line">        System.out.println(<span class="string">&quot;匹配结果：&quot;</span> + res5 + <span class="string">&quot;，匹配字符串：&quot;</span> + (res5 ? matcher.group() : <span class="string">&quot;NULL&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环查找</span></span><br><span class="line">        matcher = pattern.matcher(<span class="string">&quot;KHighness||ParaK||FlowerK||18236763&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------循环匹配----------&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(matcher.group());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">----------完整匹配----------</span><br><span class="line">匹配结果：false，匹配字符串：NULL</span><br><span class="line">----------子串匹配----------</span><br><span class="line">匹配结果：true，匹配字符串：KHighness</span><br><span class="line">匹配结果：true，匹配字符串：ParaK</span><br><span class="line">匹配结果：true，匹配字符串：FlowerK</span><br><span class="line">匹配结果：true，匹配字符串：<span class="number">18236763</span></span><br><span class="line">匹配结果：false，匹配字符串：NULL</span><br><span class="line">----------循环匹配----------</span><br><span class="line">KHighness</span><br><span class="line">ParaK</span><br><span class="line">FlowerK</span><br><span class="line"><span class="number">18236763</span></span><br></pre></td></tr></table></figure>



<h3 id="4-2-分组操作"><a href="#4-2-分组操作" class="headerlink" title="4.2 分组操作"></a>4.2 分组操作</h3><blockquote>
<p>代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/7 15:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: 分组操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 正则匹配模式</span></span><br><span class="line">        <span class="comment">// 分组两组匹配：字母和数字</span></span><br><span class="line">        Pattern pattern = Pattern.compile(<span class="string">&quot;([A-Za-z]+)([0-9]+)&quot;</span>);</span><br><span class="line">        <span class="comment">// 匹配操作引擎</span></span><br><span class="line">        Matcher matcher = pattern.matcher(<span class="string">&quot;KHighness18||ParaK23||FlowerK67||KAG63||KAG72&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;-----第%d组-----\n&quot;</span>, index++);</span><br><span class="line">            System.out.println(<span class="string">&quot;group[0]: &quot;</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;group[1]: &quot;</span> + matcher.group(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">-----第<span class="number">1</span>组-----</span><br><span class="line"><span class="built_in">group</span>[<span class="number">0</span>]: KHighness18</span><br><span class="line"><span class="built_in">group</span>[<span class="number">1</span>]: KHighness</span><br><span class="line">-----第<span class="number">2</span>组-----</span><br><span class="line"><span class="built_in">group</span>[<span class="number">0</span>]: ParaK23</span><br><span class="line"><span class="built_in">group</span>[<span class="number">1</span>]: ParaK</span><br><span class="line">-----第<span class="number">3</span>组-----</span><br><span class="line"><span class="built_in">group</span>[<span class="number">0</span>]: FlowerK67</span><br><span class="line"><span class="built_in">group</span>[<span class="number">1</span>]: FlowerK</span><br><span class="line">-----第<span class="number">4</span>组-----</span><br><span class="line"><span class="built_in">group</span>[<span class="number">0</span>]: KAG63</span><br><span class="line"><span class="built_in">group</span>[<span class="number">1</span>]: KAG</span><br><span class="line">-----第<span class="number">5</span>组-----</span><br><span class="line"><span class="built_in">group</span>[<span class="number">0</span>]: KAG72</span><br><span class="line"><span class="built_in">group</span>[<span class="number">1</span>]: KAG</span><br></pre></td></tr></table></figure>



<h3 id="4-3-替换操作"><a href="#4-3-替换操作" class="headerlink" title="4.3 替换操作"></a>4.3 替换操作</h3><blockquote>
<p>代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/7 16:09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: 替换操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 正则匹配模式</span></span><br><span class="line">        Pattern pattern = Pattern.compile(<span class="string">&quot;[0-9]&quot;</span>);</span><br><span class="line">        <span class="comment">// 匹配操作引擎</span></span><br><span class="line">        Matcher matcher = pattern.matcher(<span class="string">&quot;KHighness18||ParaK23||FlowerK67||KAG63||KAG72&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数字全部替换为##</span></span><br><span class="line">        String newStr = matcher.replaceAll(<span class="string">&quot;#&quot;</span>);</span><br><span class="line">        System.out.println(newStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">KHighness<span class="comment">##||ParaK##||FlowerK##||KAG##||KAG##</span></span><br></pre></td></tr></table></figure>



<h3 id="4-4-分割操作"><a href="#4-4-分割操作" class="headerlink" title="4.4 分割操作"></a>4.4 分割操作</h3><blockquote>
<p>代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/7 16:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: 分割操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;K18H23I67G63H72N18E23S67S6372&quot;</span>;</span><br><span class="line">        String[] arr = str.split(<span class="string">&quot;\\d+&quot;</span>); <span class="comment">// 以数字为边界进行切割</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">K</span>, <span class="type">H</span>, <span class="type">I</span>, <span class="type">G</span>, <span class="type">H</span>, <span class="type">N</span>, <span class="type">E</span>, <span class="type">S</span>, <span class="type">S</span>]</span><br></pre></td></tr></table></figure>



<h3 id="4-5-爬取腾讯官网所有的超链接"><a href="#4-5-爬取腾讯官网所有的超链接" class="headerlink" title="4.5 爬取腾讯官网所有的超链接"></a>4.5 爬取腾讯官网所有的超链接</h3><blockquote>
<p>代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/7 16:24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: 爬取腾讯官网的所有超链接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSpider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过URL获取html</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> urlStr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getURLContent</span><span class="params">(String urlStr)</span> </span>&#123;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(urlStr);</span><br><span class="line">            BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(url.openStream(), Charset.forName(<span class="string">&quot;UTF-8&quot;</span>)));</span><br><span class="line">            String temp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">while</span> ((temp = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stringBuilder.append(temp + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将匹配结果装进list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destStr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> regex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getMatcherSubs</span><span class="params">(String destStr, String regex)</span> </span>&#123;</span><br><span class="line">        Pattern pattern = Pattern.compile(regex);</span><br><span class="line">        Matcher matcher = pattern.matcher(destStr);</span><br><span class="line">        List&lt;String&gt; result = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            result.add(matcher.group(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;https://www.tencent.com/zh-cn&quot;</span>;</span><br><span class="line">        WebSpider spider = <span class="keyword">new</span> WebSpider();</span><br><span class="line">        <span class="comment">// 获取超链接标签a的内容 &lt;a\s\S]+?&lt;/a&gt;</span></span><br><span class="line">        <span class="comment">// 获取href的内容 href=\&quot;(.+?)\&quot;</span></span><br><span class="line">        spider.getMatcherSubs(spider.getURLContent(url), <span class="string">&quot;href=\\\&quot;([\\w\\s./:]+?)\\\&quot;&quot;</span>).stream().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/css/base.css</span><br><span class="line">/css/index.css</span><br><span class="line">https://weibo.com/tencent</span><br><span class="line">https://twitter.com/TencentGlobal</span><br><span class="line">https://www.linkedin.com/company/tencent/</span><br><span class="line">https://careers.tencent.com/</span><br><span class="line">https://join.qq.com/</span><br><span class="line">https://spd.tencent.com/portal</span><br><span class="line">https://ipr.tencent.com/</span><br><span class="line">http://beian.miit.gov.cn/</span><br><span class="line">http://beian.miit.gov.cn/</span><br><span class="line">http://beian.miit.gov.cn/</span><br><span class="line">/css/rem.css</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Regex</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Regex</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据</title>
    <url>/2020/10/02/Hadoop/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="大数据与云计算"><a href="#大数据与云计算" class="headerlink" title="大数据与云计算"></a>大数据与云计算</h1><center>
    <font face="华文楷体" color="#33CCFF" size=5>Khighness</font><br>
</center>





<h2 id="1-安装CentOS7"><a href="#1-安装CentOS7" class="headerlink" title="1. 安装CentOS7"></a>1. 安装CentOS7</h2><h3 id="1-下载镜像"><a href="#1-下载镜像" class="headerlink" title="1. 下载镜像"></a>1. 下载镜像</h3><blockquote>
<p>ISO: <a href="https://www.centos.org/download/">CentOS7 X86_64</a></p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200915192222693.png" class="" title="image-20200915192222693">





<h3 id="2-安装系统"><a href="#2-安装系统" class="headerlink" title="2. 安装系统"></a>2. 安装系统</h3><img src="/2020/10/02/Hadoop/image-20200914201854650.png" class="" title="image-20200914201854650">

<img src="/2020/10/02/Hadoop/image-20200914201950325.png" class="" title="image-20200914201950325">



<img src="/2020/10/02/Hadoop/image-20200914202216056.png" class="" title="image-20200914202216056">



<h3 id="3-虚拟机完成"><a href="#3-虚拟机完成" class="headerlink" title="3. 虚拟机完成"></a>3. 虚拟机完成</h3><img src="/2020/10/02/Hadoop/image-20200914204312121.png" class="" title="image-20200914204312121">



<h3 id="4-安装Docker"><a href="#4-安装Docker" class="headerlink" title="4. 安装Docker"></a>4. 安装Docker</h3><blockquote>
<p>Docker要求CentOS系统的内核版本高于 3.10，查看CentOS版本是否支持 Docker</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure>

<p><img src="Hadoop%5Cimage-20200922202458823.png" alt="image-20200922202458823"></p>
<blockquote>
<p>确保yum包更新到最新</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200922202118583.png" class="" title="image-20200922202118583">

<img src="/2020/10/02/Hadoop/image-20200922202544937.png" class="" title="image-20200922202544937">

<blockquote>
<p>安装过Docker则卸载旧版本</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker  docker-common docker-selinux docker-engine</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200922204747806.png" class="" title="image-20200922204747806">

<blockquote>
<p>安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200922203530629.png" class="" title="image-20200922203530629">

<blockquote>
<p>设置yum源（使用阿里云地址）</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200922203620500.png" class="" title="image-20200922203620500">

<blockquote>
<p>可以查看所有仓库中所有的docker版本，并选择特定版本安装</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum list docker-ce --showduplicates | sort -r</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200922203726104.png" class="" title="image-20200922203726104">

<blockquote>
<p>安装最新版本的 Docker Engine-Community 和 containerd</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200922204125206.png" class="" title="image-20200922204125206">

<blockquote>
<p>验证是否安装成功</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200922204248819.png" class="" title="image-20200922204248819">

<blockquote>
<p>启动Docker</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200922204613291.png" class="" title="image-20200922204613291">

<blockquote>
<p>运行Hello World</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200922204637363.png" class="" title="image-20200922204637363">



<h2 id="2-搭建Hadoop集群"><a href="#2-搭建Hadoop集群" class="headerlink" title="2. 搭建Hadoop集群"></a>2. 搭建Hadoop集群</h2><h3 id="1-下载并配置JDK"><a href="#1-下载并配置JDK" class="headerlink" title="1. 下载并配置JDK"></a>1. 下载并配置JDK</h3><blockquote>
<p>下载 jdk</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install java-1.8.0-openjdk* -y</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200914205909499.png" class="" title="image-20200914205909499">

<blockquote>
<p>获取JAVA_HOME</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dirname $(readlink $(readlink $(which java))) </span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置环境变量</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el7_8.x86_64</span><br><span class="line">export JRE_HOME=$JAVA_HOME/jre</span><br><span class="line">export CLASSPATH=$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200914210707353.png" class="" title="image-20200914210707353">

<blockquote>
<p>查看JAVA_HOME</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br><span class="line">echo $JAVA_HOME</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200930135506971.png" class="" title="image-20200930135506971">

<blockquote>
<p>测试</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200930135637993.png" class="" title="image-20200930135637993">



<h3 id="2-配置Hosts列表"><a href="#2-配置Hosts列表" class="headerlink" title="2. 配置Hosts列表"></a>2. 配置Hosts列表</h3><p>由于两台虚拟机是同一台虚拟机复制而来，所以必须先重新生成Mac地址</p>
<img src="/2020/10/02/Hadoop/image-20200930135951474.png" class="" title="image-20200930135951474">

<blockquote>
<p>master 和 slave 禁用防火墙</p>
</blockquote>
<p>停止防火墙 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure>

<p>禁用防火墙</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200913225928453.png" class="" title="image-20200913225928453">

<blockquote>
<p>master 和 slave 修改主机名</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;sysconfig&#x2F;network</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200913230804529.png" class="" title="image-20200913230804529">

<img src="/2020/10/02/Hadoop/image-20200913230917724.png" class="" title="image-20200913230917724">

<blockquote>
<p>确认修改</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200913231003539.png" class="" title="image-20200913231003539">

<img src="/2020/10/02/Hadoop/image-20200913231047961.png" class="" title="image-20200913231047961">

<blockquote>
<p>master 和 slave 执行 ifconfig 查询 IP</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200914215339951.png" class="" title="image-20200914215339951">

<img src="/2020/10/02/Hadoop/image-20200914215731073.png" class="" title="image-20200914215731073">

<blockquote>
<p> master 和 slave 将IP地址和主机名分别添加至/etc/hosts中</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200914215942690.png" class="" title="image-20200914215942690">

<blockquote>
<p>master 和 slave 之间互ping</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200914220102245.png" class="" title="image-20200914220102245">

<img src="/2020/10/02/Hadoop/image-20200914220213547.png" class="" title="image-20200914220213547">



<h3 id="3-集群ssh免密登录"><a href="#3-集群ssh免密登录" class="headerlink" title="3. 集群ssh免密登录"></a>3. 集群ssh免密登录</h3><p>对master操作：</p>
<blockquote>
<p>master 生成公钥</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200914220829338.png" class="" title="image-20200914220829338">

<blockquote>
<p>将公钥追加到授权列表</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200914221008829.png" class="" title="image-20200914221008829">

<blockquote>
<p>修改authorized_keys文件的权限</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 600 ~/.ssh/authorized_keys </span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200914221036706.png" class="" title="image-20200914221036706">

<blockquote>
<p>将authorized_keys文件复制到slave节点</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp ~/.ssh/authorized_keys parak@slave:~/.ssh</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200914221427275.png" class="" title="image-20200914221427275">

<blockquote>
<p>查看slave的.ssh的目录</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200914221514758.png" class="" title="image-20200914221514758">

<blockquote>
<p>修改master和slave的SSH配置</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su root</span><br><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200914221856072.png" class="" title="image-20200914221856072">

<blockquote>
<p>使用ssh-add指令将私钥加入并重启sshd服务</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br><span class="line">service sshd restart</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试免密登录</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200914223950719.png" class="" title="image-20200914223950719">

<p>ssh登录依然需要密码，我们可以去看一下master的日志文件</p>
<blockquote>
<p>cat  var/log/secure </p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200916160625256.png" class="" title="image-20200916160625256">

<blockquote>
<p><strong>原因</strong></p>
<p>sshd为了安全，对属主的目录和文件权限有所要求。</p>
<p>如果权限不对，则ssh的免密码登陆不生效。</p>
</blockquote>
<blockquote>
<p><strong>解决</strong></p>
<p>将.ssh目录的权限改为755</p>
<p>id_rsa.pub和authorized_keys权限改为644</p>
<p>id_rsa权限必须为600</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 755 .ssh</span><br><span class="line">cd .ssh</span><br><span class="line">chmod 644 id_rsa.pub authorized_keys</span><br><span class="line">chmod 600 id_rsa</span><br></pre></td></tr></table></figure>

<blockquote>
<p>再次测试免密登录</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200914224837430.png" class="" title="image-20200914224837430">



<h3 id="4-下载并配置Hadoop"><a href="#4-下载并配置Hadoop" class="headerlink" title="4. 下载并配置Hadoop"></a>4. 下载并配置Hadoop</h3><blockquote>
<p>下载：<a href="https://www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-3.3.0/hadoop-3.3.0.tar.gz">hadoop-2.9.2</a>    选择bsfu的北京外国语学院的镜像, 速度流批</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200914211714263.png" class="" title="image-20200914211714263">

<blockquote>
<p>解压下载的压缩包</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf hadoop-2.3.2.tar.gz</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200914211633182.png" class="" title="image-20200914211633182">

<blockquote>
<p>修改文件权限</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 777 hadoop-env.sh core-site.xml hdfs-site.xml yarn-site.xml mapred-site.xml slaves</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200914212318855.png" class="" title="image-20200914212318855">

<blockquote>
<p>配置环境变量</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gedit /home/parak/hadoop/hadoop-2.9.2/etc/hadoop/hadoop-env.sh</span><br><span class="line"></span><br><span class="line">添加</span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el7_8.x86_64</span><br><span class="line">export HADOOP_HOME=/home/parak/hadoop/hadoop-2.9.2</span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$&#123;HADOOP_HOME&#125;/bin:$&#123;HADOOP_HOME&#125;/sbin:$PATH</span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置核心组件  <strong><em>core-site.xml</em></strong></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/parak/hadoopdata<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<img src="/2020/10/02/Hadoop/image-20200914213003704.png" class="" title="image-20200914213003704">

<blockquote>
<p>配置文件系统  <strong><em>hdfs.site.xml</em></strong></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<img src="/2020/10/02/Hadoop/image-20200914213047280.png" class="" title="image-20200914213047280">

<blockquote>
<p>配置文件系统  <strong><em>yarn-site.xml</em></strong></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18040<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18030<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.resource-tracker.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18025<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.admin.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18141<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18088<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<img src="/2020/10/02/Hadoop/image-20200914213215770.png" class="" title="image-20200914213215770">

<blockquote>
<p>配置计算框架  <strong><em>mapred-site.xml</em></strong></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line"><span class="meta">--&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>



<img src="/2020/10/02/Hadoop/image-20200914213254714.png" class="" title="image-20200914213254714">

<blockquote>
<p>在master节点配置slaves文件 </p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200914225547865.png" class="" title="image-20200914225547865">



<h3 id="5-启动Hadoo集群"><a href="#5-启动Hadoo集群" class="headerlink" title="5. 启动Hadoo集群"></a>5. 启动Hadoo集群</h3><blockquote>
<p>切换用户  <strong><em>parak</em></strong></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su parak</span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置Hadoop启动的系统环境变量</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd</span><br><span class="line">gedit ~/.bash_profile</span><br><span class="line"></span><br><span class="line">添加：</span><br><span class="line"><span class="meta">#</span><span class="bash">HADOOP</span></span><br><span class="line">export HADOOP_HOME=/home/parak/hadoop/hadoop-2.9.2</span><br><span class="line">export PATH=$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$PATH</span><br><span class="line"></span><br><span class="line">执行：</span><br><span class="line">source ~/.bash_profile</span><br><span class="line"></span><br><span class="line">验证：</span><br><span class="line">echo $&#123;HADOOP_HOME&#125;</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200914213558226.png" class="" title="image-20200914213558226">

<img src="/2020/10/02/Hadoop/image-20200914230053210.png" class="" title="image-20200914230053210">

<blockquote>
<p>创建数据目录  <strong><em>hadoopdata</em></strong></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /home/parak/hadoopdata</span><br><span class="line">chmod 777 hadoopdata/</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200914225858363.png" class="" title="image-20200914225858363">

<blockquote>
<p>格式化文件系统</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200914230347627.png" class="" title="image-20200914230347627">

<img src="/2020/10/02/Hadoop/image-20200914230450.png" class="" title="image-20200914230450">

<blockquote>
<p>启动Hadoop</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sbin/start-all.sh</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200914232331519.png" class="" title="image-20200914232331519">

<blockquote>
<p>查看进程</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jps</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200914232056642.png" class="" title="image-20200914232056642">

<img src="/2020/10/02/Hadoop/image-20200914232211741.png" class="" title="image-20200914232211741">



<blockquote>
<p>进入 <strong>FireFox</strong> 输入：<a href="http://master:50070/">http://master:50070/</a>   </p>
<p>检查 <strong>namenode</strong> 和 <strong>datanode</strong> 是否正常</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200914232603284.png" class="" title="image-20200914232603284">



<blockquote>
<p>进入 <strong>FireFox</strong> 输入：<a href="http://master:18088/">http://master:18088/</a></p>
<p>检查 <strong>Yarn</strong> 是否正常</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200914232824073.png" class="" title="image-20200914232824073">



<blockquote>
<p>运行PI实例检查Hadoop集群是否搭建成功</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/hadoop/hadoop-2.9.2/share/hadoop/mapreduce/</span><br><span class="line">hadoop jar hadoop-mapreduce-examples-2.9.2.jar pi 10 10</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200915083538083.png" class="" title="image-20200915083538083">

<blockquote>
<p> <strong>报错</strong>：未找到主机路由</p>
<p><strong>分析</strong>：slave的防火墙没有关闭</p>
</blockquote>
<blockquote>
<p>检查slave的防火墙</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200915084136061.png" class="" title="image-20200915084136061">

<blockquote>
<p>关闭且禁用防火墙</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200915084354244.png" class="" title="image-20200915084354244">

<blockquote>
<p>再次运行PI实例</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200915084909905.png" class="" title="image-20200915084909905">

<img src="/2020/10/02/Hadoop/image-20200915084933355.png" class="" title="image-20200915084933355">

<p>可以看到运行结果：PI = 3.20000000000000000000</p>
<p><strong>综上，集群正常启动</strong></p>
<blockquote>
<p>关闭Hadoop集群</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200915085606053.png" class="" title="image-20200915085606053">





<h2 id="3-分布式文件系统HDFS上的操作"><a href="#3-分布式文件系统HDFS上的操作" class="headerlink" title="3. 分布式文件系统HDFS上的操作"></a>3. 分布式文件系统HDFS上的操作</h2><h3 id="1-利用Shell命令与HDFS进行交互"><a href="#1-利用Shell命令与HDFS进行交互" class="headerlink" title="1. 利用Shell命令与HDFS进行交互"></a>1. 利用Shell命令与HDFS进行交互</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs    //适用于任何不同的文件系统，比如本地文件系统和HDFS文件系统</span><br><span class="line">hadoop dfa   //只能适用于HDFS文件系统</span><br><span class="line">hdfs dfs     //跟hadoop dfs的命令作用一样，也只能适用于HDFS文件系统</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200915091307833.png" class="" title="image-20200915091307833">

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -help put</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200915091423474.png" class="" title="image-20200915091423474">



<h4 id="1-目录操作"><a href="#1-目录操作" class="headerlink" title="(1) 目录操作"></a>(1) 目录操作</h4><blockquote>
<p>在HDFS中为parak用户创建一个用户目录，命令如下：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -mkdir -p /user/parak</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以使用如下命令显示HDFS中/user目录下的内容：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -ls /user</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200915091936795.png" class="" title="image-20200915091936795">

<blockquote>
<p>创建/user/parak/input目录</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -mkdir -p /user/parak/input</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看/user/parak/input目录是否创建成功</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -ls /user/parak</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200915094202790.png" class="" title="image-20200915094202790">

<blockquote>
<p>创建/input目录</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -mkdir -p /input</span><br></pre></td></tr></table></figure>

<blockquote>
<p>删除/input目录</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -rm -r /input</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看/input目录是否删除成功</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -ls /</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200915094415033.png" class="" title="image-20200915094415033">



<h4 id="2-文件操作"><a href="#2-文件操作" class="headerlink" title="(2) 文件操作"></a>(2) 文件操作</h4><p>​       在实际应用中，经常需要从本地文件系统向HDFS中上传文件，或者把HDFS中的文件下载到本地文件系统中。</p>
<blockquote>
<p>首先，使用vim编辑器，在本地Linux文件系统的“/home/parak/”目录下创建一个文件myLocalFile.txt，里面输入：</p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Hadoop</span><br><span class="line">MapReduce</span><br><span class="line">Spark</span><br><span class="line">Khighness</span><br></pre></td></tr></table></figure>

<blockquote>
<p>然后，把本地文件系统的“/home/parak/myLocalFile.txt”上传到HDFS中的当前用户目录的input目录下，也就是上传到HDFS的“/user/parak/input/”目录下：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -put /home/parak/myLocalFile.txt /user/parak/input</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看一下文件是否成功上传到HDFS中：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -ls /user/parak/input</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看HDFS中的myLocalFile.txt这个文件的内容</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -cat /user/parak/input/myLocalFile.txt</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200915094905208.png" class="" title="image-20200915094905208">

<blockquote>
<p>把HDFS中的myLocalFile.txt文件下载到本地文件系统中的“/home/parak/下载/”这个目录下</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -get /user/parak/input/myLocalFile.txt /home/parak/下载</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在本地查看下载下来的文件myLocalFile.txt</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd 下载</span><br><span class="line">ll</span><br><span class="line">cat myLocalFile.txt</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200915100241999.png" class="" title="image-20200915100241999">

<blockquote>
<p>把HDFS的“/user/parak/input/myLocalFile.txt”文件，拷贝到HDFS的另外一个目录“/input”中</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -mkdir /input</span><br><span class="line">hadoop fs -cp /user/parak/input/myLocalFile.txt /input</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200915100148440.png" class="" title="image-20200915100148440">



<h3 id="2-利用Web界面管理HDFS"><a href="#2-利用Web界面管理HDFS" class="headerlink" title="2. 利用Web界面管理HDFS"></a>2. 利用Web界面管理HDFS</h3><blockquote>
<p>在本机Chorme输入 <a href="http://192.168.117.141:50070/">http://192.168.117.141:50070</a> , 即可看到HDFS的Web管理界面</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200915093904228.png" class="" title="image-20200915093904228">





<h2 id="4-分布式文件系统HDFS上的编程实践"><a href="#4-分布式文件系统HDFS上的编程实践" class="headerlink" title="4. 分布式文件系统HDFS上的编程实践"></a>4. 分布式文件系统HDFS上的编程实践</h2><h3 id="1-安装Eclipse"><a href="#1-安装Eclipse" class="headerlink" title="1. 安装Eclipse"></a>1. 安装Eclipse</h3><h4 id="1-官网下载安装包"><a href="#1-官网下载安装包" class="headerlink" title="(1) 官网下载安装包"></a>(1) 官网下载安装包</h4><blockquote>
<p>进入FireFox打开下载: <a href="http://www.eclipse.org/downloads/packages/release/neon/1a/eclipse-ide-java-ee-developers">eclipe</a></p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200915190751901.png" class="" title="image-20200915190751901">

<blockquote>
<p>或者</p>
<p>百度网盘下载</p>
<p>链接: <a href="https://pan.baidu.com/s/1P4vDgBEj_eOSakabM93rew">https://pan.baidu.com/s/1P4vDgBEj_eOSakabM93rew</a></p>
<p>密码: eujp</p>
</blockquote>
<h4 id="2-解压安装包"><a href="#2-解压安装包" class="headerlink" title="(2) 解压安装包"></a>(2) 解压安装包</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar xzvf eclipse-inst-linux64.tar.gz </span><br><span class="line">cd eclipse-installer/</span><br><span class="line">ll</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200915191250751.png" class="" title="image-20200915191250751">

<img src="/2020/10/02/Hadoop/image-20200915191446018.png" class="" title="image-20200915191446018">

<h4 id="3-安装Eclipse-For-JavaEE"><a href="#3-安装Eclipse-For-JavaEE" class="headerlink" title="(3) 安装Eclipse For JavaEE"></a>(3) 安装Eclipse For JavaEE</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">eclipse-inst.ini</span><br></pre></td></tr></table></figure>




<img src="/2020/10/02/Hadoop/image-20200915191721107.png" class="" title="image-20200915191721107.png">

<img src="/2020/10/02/Hadoop/image-20200915191841247.png" class="" title="image-20200915191841247.png">

<img src="/2020/10/02/Hadoop/image-20200915192946961.png" class="" title="image-20200915192946961.png">



<h4 id="4-创建桌面快捷方式"><a href="#4-创建桌面快捷方式" class="headerlink" title="(4) 创建桌面快捷方式"></a>(4) 创建桌面快捷方式</h4><blockquote>
<p>1、切换root身份：su root</p>
<p>2、进入usr/share/applications目录：cd /usr/share/applications</p>
<p>3、创建eclipase.desktop文件：touch eclipase.desktop</p>
<p>4、输入以下内容后保存：vi eclipase.desktop</p>
<p>5、最后将快捷方式复制到桌面，并添加信任即可</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name&#x3D;Eclipse</span><br><span class="line">Exec&#x3D;&#x2F;home&#x2F;parak&#x2F;eclipse&#x2F;eclipse-j2e&#x2F;eclipse&#x2F;eclipse</span><br><span class="line">Type&#x3D;Application</span><br><span class="line">Icon&#x3D;&#x2F;home&#x2F;parak&#x2F;eclipse&#x2F;eclipse-j2e&#x2F;eclipse&#x2F;icon.xpm</span><br><span class="line">Terminal&#x3D;false</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200915195019210.png" class="" title="image-20200915195019210">



<h3 id="2-创建eclipse工程"><a href="#2-创建eclipse工程" class="headerlink" title="2. 创建eclipse工程"></a>2. 创建eclipse工程</h3><blockquote>
<p>双击eclipse桌面快捷方式</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200915195625107.png" class="" title="image-20200915195625107">

<blockquote>
<p>进入eclipseIDE</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200915195720416.png" class="" title="image-20200915195720416">

<blockquote>
<p>点击：File —&gt; Project —&gt; Java Project</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200915200231455.png" class="" title="image-20200915200231455">

<blockquote>
<p>设置JRE</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200915200448059.png" class="" title="image-20200915200448059">

<blockquote>
<p>添加JAR</p>
</blockquote>
<ul>
<li><strong>/home/parak/hadoop/hadoop-2.9.2/share/hadoop/common/</strong>:  <strong>hadoop-common-2.9.2.jar</strong>和<strong>hadoop-nfs-2.9.2.jar</strong></li>
<li><strong>/home/parak/hadoop/hadoop-2.9.2/share/hadoop/common/</strong>:  <strong>lib</strong>目录下的所有jar包</li>
<li><strong>/home/parak/hadoop/hadoop-2.9.2/share/hadoop/hdfs/</strong>:  <strong>hadoop-hdfs-2.9.2.jar</strong>和<strong>hadoop-hdfs-nfs-2.9.2.jar</strong></li>
<li><strong>/home/parak/hadoop/hadoop-2.9.2/share/hadoop/hdfs/</strong>:  <strong>lib</strong>目录下的所有jar包</li>
</ul>
<img src="/2020/10/02/Hadoop/image-20200915202106984.png" class="" title="image-20200915202106984">

<blockquote>
<p>点击Finish，点击Open Perspective，并且勾选Remember my decision</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200915202239806.png" class="" title="image-20200915202239806">

<img src="/2020/10/02/Hadoop/image-20200915202452808.png" class="" title="image-20200915202452808">



<h3 id="3-编写一个Java应用程序检测HDFS中是否存在一个文件"><a href="#3-编写一个Java应用程序检测HDFS中是否存在一个文件" class="headerlink" title="3. 编写一个Java应用程序检测HDFS中是否存在一个文件"></a>3. 编写一个Java应用程序检测HDFS中是否存在一个文件</h3><h4 id="1-编写Java程序"><a href="#1-编写Java程序" class="headerlink" title="(1) 编写Java程序"></a>(1) 编写Java程序</h4><blockquote>
<p>右击HDFSExample —&gt; New —&gt; Class</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200915203644447.png" class="" title="image-20200915203644447">

<blockquote>
<p>Name = HDFSFileIfExist，然后Finish</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200915203811679.png" class="" title="image-20200915203811679">

<blockquote>
<p>编写代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> parak</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>   2020-9-15 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HDFSFileIfExist</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            String fileName = <span class="string">&quot;/user/parak/input/myLocalFile.txt&quot;</span>;</span><br><span class="line">            Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">            conf.set(<span class="string">&quot;fs.defaultFS&quot;</span>, <span class="string">&quot;hdfs://master:9000&quot;</span>);</span><br><span class="line">            conf.set(<span class="string">&quot;fs.hdfs.impl&quot;</span>, <span class="string">&quot;org.apache.hadoop.hdfs.DistributedFileSystem&quot;</span>);</span><br><span class="line">            FileSystem fs = FileSystem.get(conf);</span><br><span class="line">            <span class="keyword">if</span>(fs.exists(<span class="keyword">new</span> Path(fileName)))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;文件存在&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-运行程序"><a href="#2-运行程序" class="headerlink" title="(2) 运行程序"></a>(2) 运行程序</h4><blockquote>
<p>启动Hadoop集群</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200915204824967.png" class="" title="image-20200915204824967">

<blockquote>
<p>运行程序</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200915205051079.png" class="" title="image-20200915205051079">

<blockquote>
<p>运行结果</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200915205218013.png" class="" title="image-20200915205218013">

<h4 id="3-部署到Hadoop平台上运行"><a href="#3-部署到Hadoop平台上运行" class="headerlink" title="(3) 部署到Hadoop平台上运行"></a>(3) 部署到Hadoop平台上运行</h4><blockquote>
<p>在hadoop安装目录下新建myapp目录，存放Hadoop应用程序</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir ~/hadoop/hadoop-2.9.2/myapp</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200915205811634.png" class="" title="image-20200915205811634">

<blockquote>
<p>右击HDFSExample —&gt; Export —&gt; Java —&gt; Runnable JAR file —&gt; Next</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200915210022617.png" class="" title="image-20200915210022617">

<blockquote>
<p>Lauch configuration: HDFSFileIfExist -HDFSExsmple</p>
<p>Export destination: /home/parak/hadoop/hadoop-2.9.2/myapp/HDFSExample.jar</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200915210640358.png" class="" title="image-20200915210640358">

<blockquote>
<p>出现警告，选择OK</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200915210911473.png" class="" title="image-20200915210911473">

<img src="/2020/10/02/Hadoop/image-20200915211215820.png" class="" title="image-20200915211215820">

<blockquote>
<p>查看myapp中生成的HDFSExample.jar文件</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200915211618901.png" class="" title="image-20200915211618901">

<blockquote>
<p>运行程序</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar ~/hadoop/hadoop-2.9.2/myapp/HDFSExample.jar </span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200915211802010.png" class="" title="image-20200915211802010">



<h3 id="4-编写一个Java应用程序读-写HDFS文件"><a href="#4-编写一个Java应用程序读-写HDFS文件" class="headerlink" title="4. 编写一个Java应用程序读/写HDFS文件"></a>4. 编写一个Java应用程序读/写HDFS文件</h3><h4 id="1-读取HDFS文件程序"><a href="#1-读取HDFS文件程序" class="headerlink" title="(1) 读取HDFS文件程序"></a>(1) 读取HDFS文件程序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataInputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> parak</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-9-15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HDFSReadFile</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">			conf.set(<span class="string">&quot;fs.defaultFS&quot;</span>, <span class="string">&quot;hdfs://master:9000&quot;</span>);</span><br><span class="line">			conf.set(<span class="string">&quot;fs.hdfs.impl&quot;</span>,</span><br><span class="line">					<span class="string">&quot;org.apache.hadoop.hdfs.DistributedFileSystem&quot;</span>);</span><br><span class="line">			FileSystem fs = FileSystem.get(conf);</span><br><span class="line">			Path file = <span class="keyword">new</span> Path(<span class="string">&quot;/user/parak/input/myLocalFile.txt&quot;</span>);</span><br><span class="line">			FSDataInputStream getIt = fs.open(file);</span><br><span class="line">			BufferedReader d = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(getIt));</span><br><span class="line">			String content = <span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">while</span>((content = d.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">				System.out.println(content);</span><br><span class="line">			&#125;</span><br><span class="line">			d.close(); <span class="comment">// 关闭文件</span></span><br><span class="line">			fs.close(); <span class="comment">// 关闭hdfs</span></span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200915213406899.png" class="" title="image-20200915213406899">

<h4 id="2-写HDFS文件程序"><a href="#2-写HDFS文件程序" class="headerlink" title="(2) 写HDFS文件程序"></a>(2) 写HDFS文件程序</h4> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataOutputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> parak</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-9-15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HDFSWriteFile</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">			conf.set(<span class="string">&quot;fs.defaultFS&quot;</span>, <span class="string">&quot;hdfs://master:9000&quot;</span>);</span><br><span class="line">			conf.set(<span class="string">&quot;fs.hdfs.impl&quot;</span>,</span><br><span class="line">					<span class="string">&quot;org.apache.hadoop.hdfs.DistributedFileSystem&quot;</span>);</span><br><span class="line">			FileSystem fs = FileSystem.get(conf);</span><br><span class="line">			<span class="keyword">byte</span>[] buff = <span class="string">&quot;Hello, Khighness&quot;</span>.getBytes(); <span class="comment">// 要写入的内容</span></span><br><span class="line">			String filename = <span class="string">&quot;/user/parak/test.txt&quot;</span>; <span class="comment">// 要写入的文件名</span></span><br><span class="line">			FSDataOutputStream os = fs.create(<span class="keyword">new</span> Path(filename));</span><br><span class="line">			os.write(buff, <span class="number">0</span>, buff.length);</span><br><span class="line">			System.out.println(<span class="string">&quot;Create:&quot;</span> + filename);</span><br><span class="line">			os.close();</span><br><span class="line">			fs.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200915213012019.png" class="" title="image-20200915213012019">



<h2 id="5-Eclipse上的HDFS操作"><a href="#5-Eclipse上的HDFS操作" class="headerlink" title="5. Eclipse上的HDFS操作"></a>5. Eclipse上的HDFS操作</h2><h3 id="1-安装Hadoop-Eclipse-Plugin"><a href="#1-安装Hadoop-Eclipse-Plugin" class="headerlink" title="1. 安装Hadoop-Eclipse-Plugin"></a>1. 安装Hadoop-Eclipse-Plugin</h3><p>(1) 下载相关插件：<a href="https://github.com/winghc/hadoop2x-eclipse-plugin">hadoop-eclipse-plugin</a></p>
<img src="/2020/10/02/Hadoop/image-20200922203150692.png" class="" title="image-20200922203150692">

<p>我是vpn下载下来的，分享一下：</p>
<blockquote>
<p>完整包</p>
<p>网盘链接：<a href="https://pan.baidu.com/s/1Q72HyCSUnh-Q0JRQK03Jjg">https://pan.baidu.com/s/1Q72HyCSUnh-Q0JRQK03Jjg</a></p>
<p>提取码：kkkk</p>
<p>插件包</p>
<p>网盘链接：<a href="https://pan.baidu.com/s/1dfBm7JB4ZXTR3bwF7PSaKA">https://pan.baidu.com/s/1dfBm7JB4ZXTR3bwF7PSaKA</a></p>
<p>提取码：kkkk</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200922222447098.png" class="" title="image-20200922222447098">



<p>(2) 下载后将release中的<code>hadoop-eclipse-plugin-2.6.0.jar</code>复制到 Eclipse 安装目录的 plugins 文件夹中</p>
<img src="/2020/10/02/Hadoop/image-20200922223813270.png" class="" title="image-20200922223813270">

<p>(3) 运行 <code>eclipse-clean</code> 重启 Eclipse</p>
<h3 id="2-配置Hadoop-Eclipse-Plugin"><a href="#2-配置Hadoop-Eclipse-Plugin" class="headerlink" title="2. 配置Hadoop-Eclipse-Plugin"></a>2. 配置Hadoop-Eclipse-Plugin</h3><p>配置前开启Hadoop</p>
<img src="/2020/10/02/Hadoop/image-20200928131439434.png" class="" title="image-20200928131439434">

<p>(1) 切换到“Map/Reduce”开发视图</p>
<img src="/2020/10/02/Hadoop/image-20200928131546990.png" class="" title="image-20200928131546990">



<p>(2) 建立与Hadoop集群的连接</p>
<img src="/2020/10/02/Hadoop/image-20200928131720837.png" class="" title="image-20200928131720837">

<p>(3) 填写Hadoop连接配置</p>
<img src="/2020/10/02/Hadoop/image-20200928131907971.png" class="" title="image-20200928131907971">



<h3 id="3-在Eclipse中操作HDFS中的文件"><a href="#3-在Eclipse中操作HDFS中的文件" class="headerlink" title="3. 在Eclipse中操作HDFS中的文件"></a>3. 在Eclipse中操作HDFS中的文件</h3><p>点击左侧DFS Locations即可查看HDFS的文件列表</p>
<img src="/2020/10/02/Hadoop/image-20200928132219334.png" class="" title="image-20200928132219334">



<h2 id="6-在Eclipse中运行”Wold-Count”MapReduce程序"><a href="#6-在Eclipse中运行”Wold-Count”MapReduce程序" class="headerlink" title="6. 在Eclipse中运行”Wold Count”MapReduce程序"></a>6. 在Eclipse中运行”Wold Count”MapReduce程序</h2><h3 id="1-在Eclipse中创建”WordCount”MapReduce项目"><a href="#1-在Eclipse中创建”WordCount”MapReduce项目" class="headerlink" title="1. 在Eclipse中创建”WordCount”MapReduce项目"></a>1. 在Eclipse中创建”WordCount”MapReduce项目</h3><blockquote>
<p>选择File -&gt; New -&gt; Project -&gt; Map/Reduce Project</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200928133415156.png" class="" title="image-20200928133415156">

<blockquote>
<p>项目名称=MyWordCount，然后Configure Hadoop install directory -&gt; Finish</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200928133508525.png" class="" title="image-20200928133508525">

<blockquote>
<p>新建Java文件，name = WordCountTest</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200928134118935.png" class="" title="image-20200928134118935">

<blockquote>
<p>代码如下</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.GenericOptionsParser;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> parak</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>   2020-9-28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WordCountTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        String[] otherArgs = (<span class="keyword">new</span> GenericOptionsParser(conf, args)).getRemainingArgs();</span><br><span class="line">        <span class="keyword">if</span>(otherArgs.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;Usage: wordcount &lt;in&gt; [&lt;in&gt;...] &lt;out&gt;&quot;</span>);</span><br><span class="line">            System.exit(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        Job job = Job.getInstance(conf, <span class="string">&quot;word count test&quot;</span>);</span><br><span class="line">        job.setJarByClass(WordCountTest.class);</span><br><span class="line">        job.setMapperClass(WordCountTest.TokenizerMapper.class);</span><br><span class="line">        job.setCombinerClass(WordCountTest.IntSumReducer.class);</span><br><span class="line">        job.setReducerClass(WordCountTest.IntSumReducer.class);</span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; otherArgs.length - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            FileInputFormat.addInputPath(job, <span class="keyword">new</span> Path(otherArgs[i]));</span><br><span class="line"> </span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(otherArgs[otherArgs.length - <span class="number">1</span>]));</span><br><span class="line">        System.exit(job.waitForCompletion(<span class="keyword">true</span>)?<span class="number">0</span>:<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntSumReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> IntWritable result = <span class="keyword">new</span> IntWritable();</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">IntSumReducer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Reducer&lt;Text, IntWritable, Text, IntWritable&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">            IntWritable val;</span><br><span class="line">            <span class="keyword">for</span>(Iterator itr = values.iterator(); itr.hasNext(); sum += val.get()) &#123;</span><br><span class="line">                val = (IntWritable)itr.next();</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">this</span>.result.set(sum);</span><br><span class="line">            context.write(key, <span class="keyword">this</span>.result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenizerMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Object</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> IntWritable one = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">private</span> Text word = <span class="keyword">new</span> Text();</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TokenizerMapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Object key, Text value, Mapper&lt;Object, Text, Text, IntWritable&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            StringTokenizer itr = <span class="keyword">new</span> StringTokenizer(value.toString());</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">while</span>(itr.hasMoreTokens()) &#123;</span><br><span class="line">                <span class="keyword">this</span>.word.set(itr.nextToken());</span><br><span class="line">                context.write(<span class="keyword">this</span>.word, one);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-添加log4j-properties配置文件到src目录下"><a href="#2-添加log4j-properties配置文件到src目录下" class="headerlink" title="2. 添加log4j.properties配置文件到src目录下"></a>2. 添加log4j.properties配置文件到src目录下</h3><blockquote>
<p>新建文件</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200928205438905.png" class="" title="image-20200928205438905">

<blockquote>
<p>内容如下</p>
</blockquote>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span> = <span class="string">INFO,KAG,CONSOLE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.KAG.Threshold</span>=<span class="string">INFO</span></span><br><span class="line"><span class="meta">log4j.appender.KAG.encoding</span>=<span class="string">UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.KAG</span> = <span class="string">org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.KAG.File</span>=<span class="string">log/sHadoop.log</span></span><br><span class="line"><span class="meta">log4j.appender.KAG.ImmediateFlush</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.KAG.DatePattern</span>=<span class="string">&#x27;_&#x27;yyyy-MM-dd</span></span><br><span class="line"><span class="meta">log4j.appender.KAG.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.KAG.layout.ConversionPattern</span>=<span class="string">%-d&#123;yyyy-MM-dd HH:mm:ss&#125; KAG %-5p [%c] - %m%n</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.CONSOLE</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.Threshold</span>=<span class="string">INFO</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.CONSOLE.Target</span>=<span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.CONSOLE.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.CONSOLE.layout.ConversionPattern</span>=<span class="string">%-d&#123;yyyy-MM-dd HH:mm:ss&#125; KAG %-5p [%c] - %m%n</span></span><br></pre></td></tr></table></figure>



<h3 id="3-通过Eclipse运行“MyWordCount”-MapReduce项目"><a href="#3-通过Eclipse运行“MyWordCount”-MapReduce项目" class="headerlink" title="3. 通过Eclipse运行“MyWordCount” MapReduce项目"></a>3. 通过Eclipse运行“MyWordCount” MapReduce项目</h3><blockquote>
<p>更改运行配置</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200928183606296.png" class="" title="image-20200928183606296"> 

<blockquote>
<p>运行结果</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200928184930876.png" class="" title="image-20200928184930876">

<img src="/2020/10/02/Hadoop/image-20200928184947160.png" class="" title="image-20200928184947160">

<blockquote>
<p>查看/user/parak/output目录，和目录下的文件</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200928185257730.png" class="" title="image-20200928185257730">

<blockquote>
<p>重启Eclipse，在Eclipse中查看HDFS文件系统，/user/parak/output</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200928185548345.png" class="" title="image-20200928185548345">



<h3 id="4-在Hadoop平台上部署WordCount程序"><a href="#4-在Hadoop平台上部署WordCount程序" class="headerlink" title="4. 在Hadoop平台上部署WordCount程序"></a>4. 在Hadoop平台上部署WordCount程序</h3><blockquote>
<p>右键 WordCountTest —&gt; Export</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200928205719777.png" class="" title="image-20200928205719777">

<blockquote>
<p>选择 Java —&gt; Runnable JAR File —&gt; Next</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200928205756522.png" class="" title="image-20200928205756522">

<blockquote>
<p>填入内容：</p>
<p>Lauch configuration: WordCountTest - MyWordCount</p>
<p>Export destination: /home/parak/hadoop/hadoop-2.9.2/myapp/WordCount.jar</p>
<p>然后Finish即可</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200928210235072.png" class="" title="image-20200928210235072">

<blockquote>
<p>运行程序</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -jar /home/parak/hadoop/hadoop-<span class="number">2.9</span>.<span class="number">2</span>/myapp/WordCount.jar</span><br></pre></td></tr></table></figure>



<h2 id="7-统计某电商网站买家收藏商品数量"><a href="#7-统计某电商网站买家收藏商品数量" class="headerlink" title="7. 统计某电商网站买家收藏商品数量"></a>7. 统计某电商网站买家收藏商品数量</h2><p><strong>要求</strong></p>
<p>现有某电商网站用户对商品的收藏数据，记录了用户收藏的商品id以及收藏日期，名为buyer_favorite1。buyer_favorite1包含：买家id，商品id，收藏日期这三个字段，数据以“\t”分割，样本数据及格式如下：</p>
<ol>
<li><p>买家id  商品id  收藏日期 </p>
</li>
<li><p>10181  1000481  2010-04-04 16:54:31 </p>
</li>
<li><p>20001  1001597  2010-04-07 15:07:52 </p>
</li>
<li><p>20001  1001560  2010-04-07 15:08:27 </p>
</li>
<li><p>20042  1001368  2010-04-08 08:20:30 </p>
</li>
<li><p>20067  1002061  2010-04-08 16:45:33 </p>
</li>
<li><p>20056  1003289  2010-04-12 10:50:55 </p>
</li>
<li><p>20056  1003290  2010-04-12 11:57:35 </p>
</li>
<li><p>20056  1003292  2010-04-12 12:05:29 </p>
</li>
<li><p>20054  1002420  2010-04-14 15:24:12 </p>
</li>
<li><p>20055  1001679  2010-04-14 19:46:04 </p>
</li>
<li><p>20054  1010675  2010-04-14 15:23:53 </p>
</li>
<li><p>20054  1002429  2010-04-14 17:52:45 </p>
</li>
<li><p>20076  1002427  2010-04-14 19:35:39 </p>
</li>
<li><p>20054  1003326  2010-04-20 12:54:44 </p>
</li>
<li><p>20056  1002420  2010-04-15 11:24:49 </p>
</li>
<li><p>20064  1002422  2010-04-15 11:35:54 </p>
</li>
<li><p>20056  1003066  2010-04-15 11:43:01 </p>
</li>
<li><p>20056  1003055  2010-04-15 11:43:06 </p>
</li>
<li><p>20056  1010183  2010-04-15 11:45:24 </p>
</li>
<li><p>20056  1002422  2010-04-15 11:45:49 </p>
</li>
<li><p>20056  1003100  2010-04-15 11:45:54 </p>
</li>
<li><p>20056  1003094  2010-04-15 11:45:57 </p>
</li>
<li><p>20056  1003064  2010-04-15 11:46:04 </p>
</li>
<li><p>20056  1010178  2010-04-15 16:15:20 </p>
</li>
<li><p>20076  1003101  2010-04-15 16:37:27 </p>
</li>
<li><p>20076  1003103  2010-04-15 16:37:05 </p>
</li>
<li><p>20076  1003100  2010-04-15 16:37:18 </p>
</li>
<li><p>20076  1003066  2010-04-15 16:37:31 </p>
</li>
<li><p>20054  1003103  2010-04-15 16:40:14 </p>
</li>
<li><p>20054  1003100  2010-04-15 16:40:16 </p>
</li>
</ol>
<p>要求编写MapReduce程序，统计每个买家收藏商品数量。</p>
<h3 id="1-在文档下新建文件buyer-favourite9"><a href="#1-在文档下新建文件buyer-favourite9" class="headerlink" title="1. 在文档下新建文件buyer_favourite9"></a>1. 在文档下新建文件buyer_favourite9</h3><blockquote>
<p>写入数据</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10181   1000481   2010-04-04添加到日历 16:54:31</span><br><span class="line">20001   1001597   2010-04-07 15:07:52</span><br><span class="line">20001   1001560   2010-04-07 15:08:27</span><br><span class="line">20042   1001368   2010-04-08 08:20:30</span><br><span class="line">20067   1002061   2010-04-08 16:45:33</span><br><span class="line">20056   1003289   2010-04-12 10:50:55</span><br><span class="line">20056   1003290   2010-04-12 11:57:35</span><br><span class="line">20056   1003292   2010-04-12 12:05:29</span><br><span class="line">20054   1002420   2010-04-14 15:24:12</span><br><span class="line">20055   1001679   2010-04-14 19:46:04</span><br><span class="line">20054   1010675   2010-04-14 15:23:53</span><br><span class="line">20054   1002429   2010-04-14 17:52:45</span><br><span class="line">20076   1002427   2010-04-14 19:35:39</span><br><span class="line">20054   1003326   2010-04-20 12:54:44</span><br><span class="line">20056   1002420   2010-04-15 11:24:49</span><br><span class="line">20064   1002422   2010-04-15 11:35:54</span><br><span class="line">20056   1003066   2010-04-15 11:43:01</span><br><span class="line">20056   1003055   2010-04-15 11:43:06</span><br><span class="line">20056   1010183   2010-04-15 11:45:24</span><br><span class="line">20056   1002422   2010-04-15 11:45:49</span><br><span class="line">20056   1003100   2010-04-15 11:45:54</span><br><span class="line">20056   1003094   2010-04-15 11:45:57</span><br><span class="line">20056   1003064   2010-04-15 11:46:04</span><br><span class="line">20056   1010178   2010-04-15 16:15:20</span><br><span class="line">20076   1003101   2010-04-15 16:37:27</span><br><span class="line">20076   1003103   2010-04-15 16:37:05</span><br><span class="line">20076   1003100   2010-04-15 16:37:18</span><br><span class="line">20076   1003066   2010-04-15 16:37:31</span><br><span class="line">20054   1003103   2010-04-15 16:40:14</span><br><span class="line">20054   1003100   2010-04-15 16:40:16 </span><br></pre></td></tr></table></figure>



<h3 id="2-将buyer-favourite9上传到HDFS文件系统"><a href="#2-将buyer-favourite9上传到HDFS文件系统" class="headerlink" title="2. 将buyer_favourite9上传到HDFS文件系统"></a>2. 将buyer_favourite9上传到HDFS文件系统</h3><blockquote>
<p>右键input —&gt; Upload files to DFS</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200928222920023.png" class="" title="image-20200928222920023">

<blockquote>
<p>选择buyer_favourite1后确定</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200928225427432.png" class="" title="image-20200928225427432">



<h3 id="3-新建java文件ProductNumber"><a href="#3-新建java文件ProductNumber" class="headerlink" title="3. 新建java文件ProductNumber"></a>3. 新建java文件ProductNumber</h3><blockquote>
<p>代码如下</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;  </span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;  </span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;  </span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;  </span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;  </span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;  </span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat; </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> parak</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-9-28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductNumber</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">		Job job = Job.getInstance();</span><br><span class="line">		job.setJobName(<span class="string">&quot;ProductNumber&quot;</span>);</span><br><span class="line">		job.setJarByClass(ProductNumber.class);</span><br><span class="line">		job.setMapperClass(MapperHandler.class);  </span><br><span class="line">		job.setReducerClass(ReducerHandler.class);  </span><br><span class="line">		job.setOutputKeyClass(Text.class);  </span><br><span class="line">		job.setOutputValueClass(IntWritable.class);  </span><br><span class="line">		Path inputPath = <span class="keyword">new</span> Path(<span class="string">&quot;hdfs://master:9000/user/parak/input/buyer_favourite1&quot;</span>);</span><br><span class="line">		Path outputPath = <span class="keyword">new</span> Path(<span class="string">&quot;hdfs://master:9000/user/parak/output/buyer_favourite1_analysis_result&quot;</span>);</span><br><span class="line">		FileInputFormat.addInputPath(job, inputPath);</span><br><span class="line">		FileOutputFormat.setOutputPath(job, outputPath);</span><br><span class="line">		<span class="keyword">boolean</span> flag = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">		Logger log = Logger.getLogger(ProductNumber.class);</span><br><span class="line">		log.info(<span class="string">&quot;Falg = &quot;</span> + flag);</span><br><span class="line">		System.exit(flag ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperHandler</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Object</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> IntWritable intWritable = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">static</span> Text word = <span class="keyword">new</span> Text();</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Object key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">			StringTokenizer tokenizer = <span class="keyword">new</span> StringTokenizer(value.toString(), <span class="string">&quot;   &quot;</span>);</span><br><span class="line">			word.set(tokenizer.nextToken());</span><br><span class="line">			context.write(word, intWritable);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ReducerHandler</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">		<span class="keyword">private</span> IntWritable intWritable = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">			<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line">				sum += value.get();</span><br><span class="line">			&#125;</span><br><span class="line">			intWritable.set(sum);</span><br><span class="line">			context.write(key, intWritable);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200928223752502.png" class="" title="image-20200928223752502">

<blockquote>
<p>运行后的HDFS文件系统</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200928225133967.png" class="" title="image-20200928225133967">



<blockquote>
<p>part-r-00000文件内容即为统计结果</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200928225154667.png" class="" title="image-20200928225154667">





<h2 id="8-安装部署HBase"><a href="#8-安装部署HBase" class="headerlink" title="8. 安装部署HBase"></a>8. 安装部署HBase</h2><p>HBase与Hadoop版本支持关系</p>
<img src="/2020/10/02/Hadoop/image-20201002211137852.png" class="" title="image-20201002211137852">





<h3 id="1-下载安装HBase-1-6-0"><a href="#1-下载安装HBase-1-6-0" class="headerlink" title="1. 下载安装HBase-1.6.0"></a>1. 下载安装HBase-1.6.0</h3><blockquote>
<p>使用镜像：<a href="https://mirrors.bfsu.edu.cn/apache/hbase/">https://mirrors.bfsu.edu.cn/apache/hbase/</a></p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200929100114445.png" class="" title="image-20200929100114445">

<blockquote>
<p>选择1.6.0，下载tar.gz压缩包</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200929100159559.png" class="" title="image-20200929100159559">

<blockquote>
<p>解压</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xzvf hbase-1.6.0-bin.tar.gz </span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200929102107183.png" class="" title="image-20200929102107183">

<blockquote>
<p>查看</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200929102212291.png" class="" title="image-20200929102212291">



<h3 id="2-配置Hbase"><a href="#2-配置Hbase" class="headerlink" title="2. 配置Hbase"></a>2. 配置Hbase</h3><blockquote>
<p>进入HBase安装主目录的conf目录，然后修改配置文件</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd conf/</span><br></pre></td></tr></table></figure>



<h4 id="1-修改配置文件hbase-env-sh"><a href="#1-修改配置文件hbase-env-sh" class="headerlink" title="(1) 修改配置文件hbase-env.sh"></a>(1) 修改配置文件hbase-env.sh</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gedit hbase-env.sh</span><br><span class="line"></span><br><span class="line">修改JAVA_HOME:</span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el7_8.x86_64</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200929103119874.png" class="" title="image-20200929103119874">

<h4 id="2-修改配置文件hbase-site-xml"><a href="#2-修改配置文件hbase-site-xml" class="headerlink" title="(2) 修改配置文件hbase-site.xml"></a>(2) 修改配置文件hbase-site.xml</h4><blockquote>
<p>将hbase-site.xml修改为‘</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment"> * or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment"> * distributed with this work for additional information</span></span><br><span class="line"><span class="comment"> * regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment"> * to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment"> * &quot;License&quot;); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment"> * with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:9000/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>master<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.master.info.port<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>60010<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200929103343424.png" class="" title="image-20200929103343424">

<h4 id="3-设置-regionservers"><a href="#3-设置-regionservers" class="headerlink" title="(3) 设置 regionservers"></a>(3) 设置 regionservers</h4><blockquote>
<p>将regionservers中的localhost修改为: slave</p>
</blockquote>
<h4 id="4-设置环境变量"><a href="#4-设置环境变量" class="headerlink" title="(4) 设置环境变量"></a>(4) 设置环境变量</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gedit ~/.bash_profile</span><br><span class="line"></span><br><span class="line">将下面代码添加到文件末尾：</span><br><span class="line"><span class="meta">#</span><span class="bash">HBase</span></span><br><span class="line">export HBASE_HOME=/home/parak/HBase/hbase-1.6.0</span><br><span class="line">export PATH=$HBASE_HOME/bin:$PATH</span><br><span class="line">export HADOOP_CLASSPATH=$HBASE_HOME/lib/*</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200929104148521.png" class="" title="image-20200929104148521">

<h4 id="5-将HBase复制到Slave结点"><a href="#5-将HBase复制到Slave结点" class="headerlink" title="(5) 将HBase复制到Slave结点"></a>(5) 将HBase复制到Slave结点</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -r /home/parak/HBase/hbase-1.6.0 slave:/home/parak/HBase/</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200929104703378.png" class="" title="image-20200929104703378">

<blockquote>
<p>查看slave结点的HBase文件夹</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200929104827983.png" class="" title="image-20200929104827983">



<h3 id="3-验证并启动HBase"><a href="#3-验证并启动HBase" class="headerlink" title="3. 验证并启动HBase"></a>3. 验证并启动HBase</h3><blockquote>
<p>先启动Hadoop: start-all.sh</p>
<p>再启动Hbase: start-hbase.sh</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200929105006101.png" class="" title="image-20200929105006101">

<blockquote>
<p>启动HBase出现错误</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200929110647176.png" class="" title="image-20200929110647176">

<p>我意识到是Hadoop-2.9.2与HBase-1.6.0的版本匹配问题，于是我下载HBase-2.2.6。</p>
<h3 id="4-重新下载配置HBase-2-2-6"><a href="#4-重新下载配置HBase-2-2-6" class="headerlink" title="4. 重新下载配置HBase-2.2.6"></a>4. 重新下载配置HBase-2.2.6</h3><blockquote>
<p>下载</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200929110514041.png" class="" title="image-20200929110514041">

<img src="/2020/10/02/Hadoop/image-20200929110553845.png" class="" title="image-20200929110553845">

<blockquote>
<p>解压: tar xzvf hbase-2.2.6-bin.tar.gz</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200929110818266.png" class="" title="image-20200929110818266">

<blockquote>
<p>修改配置文件hbase-env.sh</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200929111024747.png" class="" title="image-20200929111024747">

<blockquote>
<p>修改配置文件hbase-site.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment"> * or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment"> * distributed with this work for additional information</span></span><br><span class="line"><span class="comment"> * regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment"> * to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment"> * &quot;License&quot;); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment"> * with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    The following properties are set for running HBase as a single process on a</span></span><br><span class="line"><span class="comment">    developer workstation. With this configuration, HBase is running in</span></span><br><span class="line"><span class="comment">    &quot;stand-alone&quot; mode and without a distributed file system. In this mode, and</span></span><br><span class="line"><span class="comment">    without further configuration, HBase and ZooKeeper data are stored on the</span></span><br><span class="line"><span class="comment">    local filesystem, in a path under the value configured for `hbase.tmp.dir`.</span></span><br><span class="line"><span class="comment">    This value is overridden from its default value of `/tmp` because many</span></span><br><span class="line"><span class="comment">    systems clean `/tmp` on a regular basis. Instead, it points to a path within</span></span><br><span class="line"><span class="comment">    this HBase installation directory.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Running against the `LocalFileSystem`, as opposed to a distributed</span></span><br><span class="line"><span class="comment">    filesystem, runs the risk of data integrity issues and data loss. Normally</span></span><br><span class="line"><span class="comment">    HBase will refuse to run in such an environment. Setting</span></span><br><span class="line"><span class="comment">    `hbase.unsafe.stream.capability.enforce` to `false` overrides this behavior,</span></span><br><span class="line"><span class="comment">    permitting operation. This configuration is for the developer workstation</span></span><br><span class="line"><span class="comment">    only and __should not be used in production!__</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    See also https://hbase.apache.org/book.html#standalone_dist</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>./tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.unsafe.stream.capability.enforce<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:9000/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>master<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.master.info.port<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>60010<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200929111344171.png" class="" title="image-20200929111344171">

<blockquote>
<p>修改regionservers文件</p>
</blockquote>
<p><img src="Hadoop%5Cimage-20200929113716160.png" alt="image-20200929113716160"></p>
<blockquote>
<p>将HBase复制到Slave节点</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -r /home/parak/HBase/hbase-2.2.6 slave:/home/parak/HBase</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200929112324004.png" class="" title="image-20200929112324004">

<blockquote>
<p>再次启动Hbase</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200929113827901.png" class="" title="image-20200929113827901">

<blockquote>
<p>打开FireFox，进入<a href="http://master:60010/">http://master:60010</a></p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200929113959833.png" class="" title="image-20200929113959833">

<p>说明HBase启动成功</p>
<h3 id="4-关闭HBase"><a href="#4-关闭HBase" class="headerlink" title="4. 关闭HBase"></a>4. 关闭HBase</h3><blockquote>
<p>先关闭HBase: stop-hbase.sh</p>
<p>再关闭Hadoop: stop-all.sh</p>
</blockquote>
<img src="/2020/10/02/Hadoop/image-20200929114148065.png" class="" title="image-20200929114148065">



<h2 id="9-HBase-Shell命令操作"><a href="#9-HBase-Shell命令操作" class="headerlink" title="9. HBase Shell命令操作"></a>9. HBase Shell命令操作</h2><h3 id="1-启动HBase-Shell"><a href="#1-启动HBase-Shell" class="headerlink" title="1. 启动HBase Shell"></a>1. 启动HBase Shell</h3><h4 id="1-启动HBase-Shell界面"><a href="#1-启动HBase-Shell界面" class="headerlink" title="(1) 启动HBase Shell界面"></a>(1) 启动HBase Shell界面</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hbase shell</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200929191351747.png" class="" title="image-20200929191351747">

<h4 id="2-HBase-Shell的help命令"><a href="#2-HBase-Shell的help命令" class="headerlink" title="(2) HBase Shell的help命令"></a>(2) HBase Shell的help命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">help</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200929191531507.png" class="" title="image-20200929191531507">

<blockquote>
<p>查看HBase建表命令create的用法</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">help &quot;create&quot;</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200929191618099.png" class="" title="image-20200929191618099">



<h3 id="2-创建HBase数据表"><a href="#2-创建HBase数据表" class="headerlink" title="2. 创建HBase数据表"></a>2. 创建HBase数据表</h3><blockquote>
<p>HBase中用create命令创建表</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;Sname&#x27;</span>, <span class="string">&#x27;Ssex&#x27;</span>, <span class="string">&#x27;Sage&#x27;</span>, <span class="string">&#x27;Sdept&#x27;</span>, <span class="string">&#x27;course&#x27;</span></span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200929191856923.png" class="" title="image-20200929191856923">

<blockquote>
<p>查看’student’表的属性</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">describe &#x27;student&#x27;</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200929191953519.png" class="" title="image-20200929191953519">



<h3 id="3-HBase数据库基本操作"><a href="#3-HBase数据库基本操作" class="headerlink" title="3. HBase数据库基本操作"></a>3. HBase数据库基本操作</h3><h4 id="1-添加数据"><a href="#1-添加数据" class="headerlink" title="(1) 添加数据"></a>(1) 添加数据</h4><blockquote>
<p>put命令添加数据，一次只能为一个表的一行数据的一个列添加一个数据</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">put &#x27;student&#x27;, &#x27;95001&#x27;, &#x27;Sname&#x27;, &#x27;Li Ying&#x27;</span><br><span class="line">put &#x27;student&#x27;, &#x27;95001&#x27;, &#x27;Sdept&#x27;, &#x27;CS&#x27;</span><br><span class="line">put &#x27;student&#x27;, &#x27;95001&#x27;, &#x27;course:math&#x27;, &#x27;81&#x27;</span><br><span class="line">put &#x27;student&#x27;, &#x27;95001&#x27;, &#x27;course:english&#x27;, &#x27;85&#x27;</span><br><span class="line">put &#x27;student&#x27;, &#x27;95002&#x27;, &#x27;course:math&#x27;, &#x27;83&#x27;</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200929193655517.png" class="" title="image-20200929193655517">



<h4 id="2-查看数据"><a href="#2-查看数据" class="headerlink" title="(2) 查看数据"></a>(2) 查看数据</h4><blockquote>
<p>查看表某一行的数据</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">get &#x27;student&#x27;, &#x27;95001&#x27;</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200929194017359.png" class="" title="image-20200929194017359">

<blockquote>
<p>查看表的全部数据</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scan &#x27;student&#x27;</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200929194135877.png" class="" title="image-20200929194135877">



<h4 id="3-删除数据"><a href="#3-删除数据" class="headerlink" title="(3) 删除数据"></a>(3) 删除数据</h4><blockquote>
<p>delete命令删除某一项数据</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">delete &#x27;student&#x27;, &#x27;95001&#x27;, &#x27;Ssex&#x27;</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200929194514884.png" class="" title="image-20200929194514884">

<blockquote>
<p>delete命令删除某行的全部数据</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">delete &#x27;student&#x27;,&#x27;95001&#x27;</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200929194626605.png" class="" title="image-20200929194626605">



<h4 id="4-删除表"><a href="#4-删除表" class="headerlink" title="(4) 删除表"></a>(4) 删除表</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">disable &#x27;student&#x27;</span><br><span class="line">drop &#x27;student&#x27;</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200929193442627.png" class="" title="image-20200929193442627">



<h3 id="4-查询HBase数据表的历史数据"><a href="#4-查询HBase数据表的历史数据" class="headerlink" title="4. 查询HBase数据表的历史数据"></a>4. 查询HBase数据表的历史数据</h3><blockquote>
<p>在创建表的时候，指定保存的版本数</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create &#x27;teacher&#x27;, &#123;NAME=&gt;&#x27;username&#x27;, VERSIONS=&gt;5&#125;</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200929203801474.png" class="" title="image-20200929203801474">

<blockquote>
<p>插入数据然后更新数据，使其产生历史版本数据</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">put &#x27;teacher&#x27;, &#x27;91001&#x27;, &#x27;username&#x27;, &#x27;Mary&#x27;</span><br><span class="line">put &#x27;teacher&#x27;, &#x27;91001&#x27;, &#x27;username&#x27;, &#x27;Mary1&#x27;</span><br><span class="line">put &#x27;teacher&#x27;, &#x27;91001&#x27;, &#x27;username&#x27;, &#x27;Mary2&#x27;</span><br><span class="line">put &#x27;teacher&#x27;, &#x27;91001&#x27;, &#x27;username&#x27;, &#x27;Mary3&#x27;</span><br><span class="line">put &#x27;teacher&#x27;, &#x27;91001&#x27;, &#x27;username&#x27;, &#x27;Mary4&#x27;</span><br><span class="line">put &#x27;teacher&#x27;, &#x27;91001&#x27;, &#x27;username&#x27;, &#x27;Mary5&#x27;</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200929204220031.png" class="" title="image-20200929204220031">

<blockquote>
<p>查询时，指定查询的历史版本书（默认会查询出最新的数据）</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">get &#x27;teacher&#x27;, &#x27;91001&#x27;, &#123;COLUMN=&gt;&#x27;username&#x27;, VERSIONS=&gt;5&#125;</span><br></pre></td></tr></table></figure>

<img src="/2020/10/02/Hadoop/image-20200929204245861.png" class="" title="image-20200929204245861">



<h3 id="5-退出HBase-Shell"><a href="#5-退出HBase-Shell" class="headerlink" title="5. 退出HBase Shell"></a>5. 退出HBase Shell</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>



<h2 id="10-HBase-Java-API-编程实践"><a href="#10-HBase-Java-API-编程实践" class="headerlink" title="10. HBase Java API 编程实践"></a>10. HBase Java API 编程实践</h2><p>Updating~</p>
]]></content>
      <categories>
        <category>BigData</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Hadoop</tag>
        <tag>HBase</tag>
        <tag>CentOS7</tag>
      </tags>
  </entry>
  <entry>
    <title>红黑树</title>
    <url>/2020/11/07/RBTree/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h1><center>
    <font face="Kristen ITC" color="#555555" font-size=100px>☬ Khighness ☬</font><br>
</center>



<h2 id="📓-定义"><a href="#📓-定义" class="headerlink" title="📓 定义"></a>📓 定义</h2><p>红黑树是一种含有红黑节点并能自平衡的二叉查找树</p>
<blockquote>
<p>🌲二叉查找树</p>
<p>满足约束：左结点的值小于父结点，父结点的值小于右结点的值。</p>
<p>场景理解：假设二叉查找树建立在x-y笛卡尔坐标系中，则所有结点向x轴投影，值正好沿着x轴递增。</p>
</blockquote>
<h2 id="🔰-性质"><a href="#🔰-性质" class="headerlink" title="🔰 性质"></a>🔰 性质</h2><ul>
<li>每个结点要么是黑色，要么是红色</li>
<li>根节点是黑色</li>
<li>每个叶子结点(NIL)是黑色的(虚结点)</li>
<li>每个红色结点的两个子结点一定都是黑色</li>
<li>任意一结点到每个叶子结点的路径都包含数量相同的黑结点(黑色完美平衡)</li>
</ul>
<p>以上为最简性质，任何一条不可缺少，任意四条不能推出另外一条。</p>
<h2 id="🌗-平衡"><a href="#🌗-平衡" class="headerlink" title="🌗 平衡"></a>🌗 平衡</h2><p>红黑树是非完美平衡二叉查找树，是完美黑色平衡二叉查找树。</p>
<blockquote>
<p>⭕红黑树自平衡的最小单元</p>
</blockquote>
<img src="/2020/11/07/RBTree/image-20201106225159861.png" class="" title="image-20201106225159861">

<p>红黑树的自平衡</p>
<p>插入只考虑G-{P, U}-C三代，删除只考虑P-{C, B}-{CL, CR, BL, BR}四代</p>
<blockquote>
<p>🔱红黑树自平衡的原子操作</p>
</blockquote>
<p>包括：变色、左旋、右旋</p>
<p>旋转要有圆心，有方向。</p>
<p>旋转结点是父结点围绕子节点旋转(子节点为圆心)。</p>
<img src="/2020/11/07/RBTree/image-20201103220142748.png" class="" title="image-20201103220142748">

<center>
    <font face="Kristen ITC" color="#555555" font-size=100px>☬ 旋转结点 ☬</font><br>
</center>



<blockquote>
<p>🌐变色：P-Black=&gt;Red,CB-Red=&gt;Black</p>
</blockquote>
<img src="/2020/11/07/RBTree/image-20201103221816468.png" class="" title="image-20201103221816468">

<center>
    <font face="Kristen ITC" color="#555555" font-size=100px>☬ 变色操作 ☬</font><br>
</center>

<blockquote>
<p>🌔左旋：旋转结点绕圆心逆时针方向旋转。基于最短路径来确定方向。</p>
</blockquote>
<img src="/2020/11/07/RBTree/image-20201103222025132.png" class="" title="image-20201103222025132">

<center>
    <font face="Kristen ITC" color="#555555" font-size=100px>☬ 左旋操作 ☬</font><br>
</center>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;左旋&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;过程：父亲下沉，右子上升，右子的左子变为原父的右子&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     左旋X结点</span></span><br><span class="line"><span class="comment"> *             P                                P</span></span><br><span class="line"><span class="comment"> *            /                                /</span></span><br><span class="line"><span class="comment"> *           X                                Y</span></span><br><span class="line"><span class="comment"> *         /  \        --(左旋)--&gt;           / \</span></span><br><span class="line"><span class="comment"> *       lX    Y                           X  rY</span></span><br><span class="line"><span class="comment"> *            / \                        /  \</span></span><br><span class="line"><span class="comment"> *          lY   r                      lX  lY</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leftRotate</span><span class="params">(RBTNode&lt;T, D&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 右子结点 */</span></span><br><span class="line">    RBTNode&lt;T, D&gt; y = x.getRight();</span><br><span class="line">    <span class="comment">/* 父亲结点 */</span></span><br><span class="line">    RBTNode&lt;T, D&gt; p = x.getParent();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Y的左子 变成 X的右子</span></span><br><span class="line"><span class="comment">    * 若X不Y的左子不为空</span></span><br><span class="line"><span class="comment">    * 则设置Y的左子的父亲为X */</span></span><br><span class="line">    x.setRight(y.getLeft());</span><br><span class="line">    <span class="keyword">if</span> (y.getLeft() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        y.getLeft().setParent(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置Y的父亲为P</span></span><br><span class="line"><span class="comment">    * 1. P为空，则根节点设置为Y</span></span><br><span class="line"><span class="comment">    * 2. X为P的左子， 则P的左子设置为Y</span></span><br><span class="line"><span class="comment">    * 3. X为P的右子，则P的右子设置为Y */</span></span><br><span class="line">    y.setParent(p);</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.root = y;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (p.getLeft() == x) &#123;</span><br><span class="line">            p.setLeft(y);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p.setRight(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 将X的父亲设置为Y</span></span><br><span class="line"><span class="comment">    * 将Y的左子设置为X */</span></span><br><span class="line">    x.setParent(y);</span><br><span class="line">    y.setLeft(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>🌖右旋：旋转结点绕圆心顺时针方向旋转。基于最短路径确定方向。</p>
</blockquote>
<img src="/2020/11/07/RBTree/image-20201103223223997.png" class="" title="image-20201103223223997">

<center>
    <font face="Kristen ITC" color="#555555" font-size=100px>☬ 右旋操作 ☬</font><br>
</center>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;右旋&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;过程：父亲下沉，左子上升，左子的右子变成原父的左子&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     右旋X结点</span></span><br><span class="line"><span class="comment"> *             P                                P</span></span><br><span class="line"><span class="comment"> *            /                                /</span></span><br><span class="line"><span class="comment"> *           X                                Y</span></span><br><span class="line"><span class="comment"> *         /  \        --(右旋)--&gt;           /  \</span></span><br><span class="line"><span class="comment"> *        Y   rX                           lY   X</span></span><br><span class="line"><span class="comment"> *       / \                                   / \</span></span><br><span class="line"><span class="comment"> *     lY  rY                                rY  rX</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rightRotate</span><span class="params">(RBTNode&lt;T, D&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 左子结点 */</span></span><br><span class="line">    RBTNode&lt;T, D&gt; y = x.getLeft();</span><br><span class="line">    <span class="comment">/* 父亲结点 */</span></span><br><span class="line">    RBTNode&lt;T, D&gt; p = x.getParent();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Y的右子 变成 X的左子</span></span><br><span class="line"><span class="comment">    * 若Y的右子不为空</span></span><br><span class="line"><span class="comment">    * 则设置Y的右子的父亲为X */</span></span><br><span class="line">    x.setLeft(y.getRight());</span><br><span class="line">    <span class="keyword">if</span> (y.getRight() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        y.getRight().setParent(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置Y的父亲为P</span></span><br><span class="line"><span class="comment">     * 1. P为空，则根节点设置为Y</span></span><br><span class="line"><span class="comment">     * 2. X为P的左子， 则P的左子设置为Y</span></span><br><span class="line"><span class="comment">     * 3. X为P的右子，则P的右子设置为Y */</span></span><br><span class="line">    y.setParent(p);</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.root = y;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (p.getLeft() == x) &#123;</span><br><span class="line">            p.setLeft(y);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p.setRight(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 将X的父亲设置为Y</span></span><br><span class="line"><span class="comment">    * 将Y的右子设置为X */</span></span><br><span class="line">    x.setParent(y);</span><br><span class="line">    y.setRight(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="🌀-增删"><a href="#🌀-增删" class="headerlink" title="🌀 增删"></a>🌀 增删</h2><blockquote>
<p>➕插入</p>
</blockquote>
<p>新增结点默认为红色，避免破坏黑色完美平衡。</p>
<p>首先寻找新结点的插入位置，即找到新结点的父亲，然后决定将新结点插入到父亲的左边还是右边。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;插入结点&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertNode</span><span class="params">(T key, D data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cmp;</span><br><span class="line">    RBTNode&lt;T, D&gt; x = <span class="keyword">this</span>.root;</span><br><span class="line">    RBTNode&lt;T, D&gt; y = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 寻找新结点的插入位置 */</span></span><br><span class="line">    <span class="keyword">while</span> (x != <span class="keyword">null</span>) &#123;</span><br><span class="line">        y = x;</span><br><span class="line">        cmp = key.compareTo(x.getKey());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cmp == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/* key已存在，直接更新 */</span></span><br><span class="line">            System.out.println(getCurrentTime() + <span class="string">&quot; [WARN] key已存在&quot;</span>);</span><br><span class="line">            System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] 更新value: &quot;</span> + get(key) + <span class="string">&quot; =&gt; &quot;</span> + data);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">/* key较大，继续向右查询 */</span></span><br><span class="line">            x = x.getRight();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/* key较小，继续向左查询 */</span></span><br><span class="line">            x = x.getLeft();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 生成一个新的结点 */</span></span><br><span class="line">    RBTNode&lt;T, D&gt; node = <span class="keyword">new</span> RBTNode&lt;&gt;(RBTColor.red, key, data, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] 新增结点 (&quot;</span> + key + <span class="string">&quot;, &quot;</span> + data + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">    <span class="comment">/* 总结点数量+1 */</span></span><br><span class="line">    <span class="keyword">this</span>.count.incrementAndGet();</span><br><span class="line">    <span class="comment">/* 设置新结点的父亲为Y */</span></span><br><span class="line">    node.setParent(y);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 再次比较决定新结点是y的左子还是右子*/</span></span><br><span class="line">    <span class="keyword">if</span> (y == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.root = node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cmp = key.compareTo(y.getKey());</span><br><span class="line">        <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            y.setRight(node);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            y.setLeft(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 最后进行自平衡 */</span></span><br><span class="line">    balanceInsertion(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>==修复操作==</p>
<p>插入结点为红色，因此只有当父亲结点为红色时才需要修复。</p>
<p>G-祖父、P-父亲、U-叔叔、C-插入。</p>
<p>我总结了五种情况以及解决口诀:</p>
<p>（1）叔叔为红</p>
<p>CASE 1</p>
<p>Description: 叔叔为红</p>
<p>Solution: GPU变色，若不满足红黑树约束则递归变色</p>
<p>（2）叔叔为黑</p>
<p>CASE 2</p>
<p>Description: 父为左子，GPC三点一线</p>
<p>Solution: 右旋祖父，GP变色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">*         (<span class="number">1</span>) 右旋祖父结点</span><br><span class="line">*           黑祖                        红父</span><br><span class="line">*           / \                         / \</span><br><span class="line">*        红父  黑叔    --(右旋)--&gt;    红插  黑祖</span><br><span class="line">*         /                                 \</span><br><span class="line">*       红插                                黑叔</span><br><span class="line">*         (<span class="number">2</span>) 祖父和父亲变色</span><br><span class="line">*           红父                        黑父</span><br><span class="line">*           / \                         / \</span><br><span class="line">*        红插  黑祖    --(变色)--&gt;    红插  红祖</span><br><span class="line">*              \                            \</span><br><span class="line">*              黑叔                         黑叔</span><br></pre></td></tr></table></figure>



<p>CASE 3: </p>
<p>Description: 父为左子，GPC三角关系</p>
<p>Solution: 左旋父亲，交换PC，右旋祖父，GP变色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">*         (<span class="number">1</span>) 左旋父亲结点，并且交换父子身份，此时GPC三点一线</span><br><span class="line">*          黑祖                        黑祖                        黑祖</span><br><span class="line">*          / \                         / \                        / \</span><br><span class="line">*       红父  黑叔    --(左旋)--&gt;    红插  黑叔    --(交换)--&gt;    红父  黑叔</span><br><span class="line">*        \                          /                           /</span><br><span class="line">*        红插                     红父                         红插</span><br><span class="line">*        (<span class="number">2</span>) 右旋祖父结点</span><br><span class="line">*          黑祖                        红父</span><br><span class="line">*          / \                         / \</span><br><span class="line">*       红父  黑叔    --(右旋)--&gt;    红插  黑祖</span><br><span class="line">*        /                                 \</span><br><span class="line">*      红插                                黑叔</span><br><span class="line">*        (<span class="number">3</span>) 祖父和父亲变色</span><br><span class="line">*          红父                        黑父</span><br><span class="line">*          / \                         / \</span><br><span class="line">*       红插  黑祖    --(变色)--&gt;    红插  红组</span><br><span class="line">*              \                           \</span><br><span class="line">*              黑叔                        黑叔</span><br></pre></td></tr></table></figure>



<p>CASE 4</p>
<p>Description: 父为右子，GPC三点一线</p>
<p>Solution: 左旋祖父，GP变色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">*         (<span class="number">1</span>) 左旋祖父结点</span><br><span class="line">*           黑祖                        红父</span><br><span class="line">*           / \                         / \</span><br><span class="line">*        黑叔  红父    --(右旋)--&gt;    黑祖  红插</span><br><span class="line">*               \                     /</span><br><span class="line">*               红插                黑叔</span><br><span class="line">*         (<span class="number">2</span>) 祖父和父亲变色</span><br><span class="line">*           红父                        黑父</span><br><span class="line">*           / \                         / \</span><br><span class="line">*        黑祖  红插    --(变色)--&gt;    红祖  红插</span><br><span class="line">*         /                           /</span><br><span class="line">*       黑叔                        黑叔</span><br></pre></td></tr></table></figure>



<p>CASE 5</p>
<p>Description: 父为右子，GPC三角关系</p>
<p>Solution: 右旋父亲，交换PC，左旋祖父，GP变色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">*          (<span class="number">1</span>) 右旋父亲结点，并且交换父子身份，此时GPC三点一线</span><br><span class="line">*           黑祖                        黑祖                        黑祖</span><br><span class="line">*           / \                         / \                        / \</span><br><span class="line">*        黑叔  红父    --(右旋)--&gt;    黑祖  红插    --(交换)--&gt;    黑祖  红父</span><br><span class="line">*              /                            \                          \</span><br><span class="line">*            红插                           红父                        红插</span><br><span class="line">*          (<span class="number">2</span>) 左旋祖父</span><br><span class="line">*           黑祖                        红父</span><br><span class="line">*           / \                         / \</span><br><span class="line">*        黑叔  红父    --(左旋)--&gt;    黑祖  红插</span><br><span class="line">*               \                    /</span><br><span class="line">*               红插               黑叔</span><br><span class="line">*          (<span class="number">3</span>) 祖父和父亲变色</span><br><span class="line">*           红父                        黑父</span><br><span class="line">*           / \                         / \</span><br><span class="line">*        黑叔  红插    --(变色)--&gt;    红祖  红插</span><br><span class="line">*         /                         /</span><br><span class="line">*       黑叔                      黑叔</span><br></pre></td></tr></table></figure>



<blockquote>
<p>➖删除</p>
</blockquote>
<p>三种情况，解决方案主要为寻找后裔顶替自己</p>
<p>CASE 1</p>
<p>Description: 待删结点左子和右子都存在:</p>
<p>Solution: 替代结点为右子树的最左孩子，然后调整关系</p>
<p>CASE 2:</p>
<p>Description: 待删结点没有左子和右子:</p>
<p>Solution: 直接删除，然后调整关系</p>
<p>CASE 3:</p>
<p>Description: 待删结点只有左子或者右子:</p>
<p>Solution: 替代结点为存在的孩子，然后调整关系</p>
<p>==修复操作==</p>
<p>仅删除黑色结点需要修复，删除红色不需要。</p>
<p>P-父亲、D-删除、B-兄弟、BR-兄弟右子、BL-兄弟左子。</p>
<ul>
<li>D为左子<ul>
<li>B为红色：左旋父亲，父亲染红，兄弟染黑，然后continue</li>
<li>B为黑色<ul>
<li>BL为黑色且BR黑色：兄弟染红，父亲回溯</li>
<li>BL为红色且BR为黑色：右旋兄弟，兄弟染红，BL染黑</li>
<li>BR为红色：左旋父亲，父亲的颜色给兄弟，父亲黑化，BR黑化，然后break</li>
</ul>
</li>
</ul>
</li>
<li>D为右子<ul>
<li>B为红色：右旋父亲，父亲染红，兄弟染黑，然后continue</li>
<li>B为黑色：<ul>
<li>BL为黑色且BR为黑色：兄弟染红，父亲回溯</li>
<li>BL为红色且BR为黑色：左旋兄弟，父亲染红，BR染黑</li>
<li>BL为红色：右旋父亲，父亲的颜色给兄弟，父亲黑化，BL黑化，然后break</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="📑-源码"><a href="#📑-源码" class="headerlink" title="📑 源码"></a>📑 源码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.DataStructures.RBTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: Algorithm &lt;/P&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.DataStructures.RBTree &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: RBTree &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 红黑树 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 红黑颜色 */</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">RBTColor</span> </span>&#123;</span><br><span class="line">    red,</span><br><span class="line">    black</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 红黑结点 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RBTNode</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;, <span class="title">D</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 结点颜色 */</span></span><br><span class="line">    <span class="keyword">private</span> RBTColor color;</span><br><span class="line">    <span class="comment">/* 结点键值 */</span></span><br><span class="line">    <span class="keyword">private</span> T key;</span><br><span class="line">    <span class="comment">/* 结点数据 */</span></span><br><span class="line">    <span class="keyword">private</span> D data;</span><br><span class="line">    <span class="comment">/* 父亲结点 */</span></span><br><span class="line">    <span class="keyword">private</span> RBTNode&lt;T, D&gt; parent;</span><br><span class="line">    <span class="comment">/* 左子结点 */</span></span><br><span class="line">    <span class="keyword">private</span> RBTNode left;</span><br><span class="line">    <span class="comment">/* 右子结点 */</span></span><br><span class="line">    <span class="keyword">private</span> RBTNode right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RBTNode</span><span class="params">(RBTColor color, T key, D data, RBTNode&lt;T, D&gt; parent, RBTNode left, RBTNode right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.parent = parent;</span><br><span class="line">        <span class="keyword">this</span>.left = left;</span><br><span class="line">        <span class="keyword">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RBTColor <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> color;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(RBTColor color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.color == RBTColor.red) &#123;</span><br><span class="line">            <span class="keyword">this</span>.color = RBTColor.black;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.color = RBTColor.red;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(T key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> D <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(D data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RBTNode&lt;T, D&gt; <span class="title">getParent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParent</span><span class="params">(RBTNode&lt;T, D&gt; parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parent = parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RBTNode <span class="title">getLeft</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeft</span><span class="params">(RBTNode left)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.left = left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RBTNode <span class="title">getRight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRight</span><span class="params">(RBTNode right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;RBTNode[&quot;</span> +</span><br><span class="line">                <span class="string">&quot;color=&quot;</span> + color +</span><br><span class="line">                <span class="string">&quot;, key=&quot;</span> + key +</span><br><span class="line">                <span class="string">&quot;, data=&quot;</span> + data +</span><br><span class="line">                <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 红黑树 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedBlackTree</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;, <span class="title">D</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 时间格式 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat SDF = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 根节点 */</span></span><br><span class="line">    <span class="keyword">private</span> RBTNode&lt;T, D&gt; root;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 树结点数量 */</span></span><br><span class="line">    <span class="keyword">private</span> AtomicLong count = <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;获取时间&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getCurrentTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SDF.format(<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;大小&lt;p/&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;查询&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> D <span class="title">get</span><span class="params">(T key)</span> </span>&#123;</span><br><span class="line">        RBTNode&lt;T, D&gt; node = search(key, <span class="keyword">this</span>.root);</span><br><span class="line">        <span class="keyword">return</span> node == <span class="keyword">null</span> ? <span class="keyword">null</span> : node.getData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;插入&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T key, D data)</span> </span>&#123;</span><br><span class="line">        insertNode(key, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;删除&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(T key)</span> </span>&#123;</span><br><span class="line">        RBTNode&lt;T, D&gt; node = search(key, <span class="keyword">this</span>.root);</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            deleteNode(node);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(getCurrentTime() + <span class="string">&quot; [ERROR] &quot;</span> + <span class="string">&quot;key为&quot;</span> + key + <span class="string">&quot;的结点不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;root-getter&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RBTNode&lt;T, D&gt; <span class="title">getRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;判断结点是否为红色&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">isRed</span><span class="params">(RBTNode&lt;T, D&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (node != <span class="keyword">null</span> &amp;&amp; node.getColor() == RBTColor.red) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;判断结点是否为黑色&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">isBlack</span><span class="params">(RBTNode&lt;T, D&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (node == <span class="keyword">null</span> || node.getColor() == RBTColor.black) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;查询key值的结点&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;递归查询: 比较key，相等直接返回，过大则继续向右，过小则继续向左&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RBTNode&lt;T, D&gt; <span class="title">search</span><span class="params">(T key, RBTNode&lt;T, D&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> cmp = key.compareTo(node.getKey());</span><br><span class="line">            <span class="keyword">if</span> (cmp == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> node;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> search(key, node.getRight());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> search(key, node.getLeft());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;左旋&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;过程：父亲下沉，右子上升，右子的左子变为原父的右子&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     *     左旋X结点</span></span><br><span class="line"><span class="comment">     *             P                                P</span></span><br><span class="line"><span class="comment">     *            /                                /</span></span><br><span class="line"><span class="comment">     *           X                                Y</span></span><br><span class="line"><span class="comment">     *         /  \        --(左旋)--&gt;           / \</span></span><br><span class="line"><span class="comment">     *       lX    Y                           X  rY</span></span><br><span class="line"><span class="comment">     *            / \                        /  \</span></span><br><span class="line"><span class="comment">     *          lY   r                      lX  lY</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">leftRotate</span><span class="params">(RBTNode&lt;T, D&gt; x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 右子结点 */</span></span><br><span class="line">        RBTNode&lt;T, D&gt; y = x.getRight();</span><br><span class="line">        <span class="comment">/* 父亲结点 */</span></span><br><span class="line">        RBTNode&lt;T, D&gt; p = x.getParent();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Y的左子 变成 X的右子</span></span><br><span class="line"><span class="comment">        * 若X不Y的左子不为空</span></span><br><span class="line"><span class="comment">        * 则设置Y的左子的父亲为X */</span></span><br><span class="line">        x.setRight(y.getLeft());</span><br><span class="line">        <span class="keyword">if</span> (y.getLeft() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            y.getLeft().setParent(x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 设置Y的父亲为P</span></span><br><span class="line"><span class="comment">        * 1. P为空，则根节点设置为Y</span></span><br><span class="line"><span class="comment">        * 2. X为P的左子， 则P的左子设置为Y</span></span><br><span class="line"><span class="comment">        * 3. X为P的右子，则P的右子设置为Y */</span></span><br><span class="line">        y.setParent(p);</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.root = y;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.getLeft() == x) &#123;</span><br><span class="line">                p.setLeft(y);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p.setRight(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 将X的父亲设置为Y</span></span><br><span class="line"><span class="comment">        * 将Y的左子设置为X */</span></span><br><span class="line">        x.setParent(y);</span><br><span class="line">        y.setLeft(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;右旋&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;过程：父亲下沉，左子上升，左子的右子变成原父的左子&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     *     右旋X结点</span></span><br><span class="line"><span class="comment">     *             P                                P</span></span><br><span class="line"><span class="comment">     *            /                                /</span></span><br><span class="line"><span class="comment">     *           X                                Y</span></span><br><span class="line"><span class="comment">     *         /  \        --(右旋)--&gt;           /  \</span></span><br><span class="line"><span class="comment">     *        Y   rX                           lY   X</span></span><br><span class="line"><span class="comment">     *       / \                                   / \</span></span><br><span class="line"><span class="comment">     *     lY  rY                                rY  rX</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rightRotate</span><span class="params">(RBTNode&lt;T, D&gt; x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 左子结点 */</span></span><br><span class="line">        RBTNode&lt;T, D&gt; y = x.getLeft();</span><br><span class="line">        <span class="comment">/* 父亲结点 */</span></span><br><span class="line">        RBTNode&lt;T, D&gt; p = x.getParent();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Y的右子 变成 X的左子</span></span><br><span class="line"><span class="comment">        * 若Y的右子不为空</span></span><br><span class="line"><span class="comment">        * 则设置Y的右子的父亲为X */</span></span><br><span class="line">        x.setLeft(y.getRight());</span><br><span class="line">        <span class="keyword">if</span> (y.getRight() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            y.getRight().setParent(x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 设置Y的父亲为P</span></span><br><span class="line"><span class="comment">         * 1. P为空，则根节点设置为Y</span></span><br><span class="line"><span class="comment">         * 2. X为P的左子， 则P的左子设置为Y</span></span><br><span class="line"><span class="comment">         * 3. X为P的右子，则P的右子设置为Y */</span></span><br><span class="line">        y.setParent(p);</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.root = y;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.getLeft() == x) &#123;</span><br><span class="line">                p.setLeft(y);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p.setRight(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 将X的父亲设置为Y</span></span><br><span class="line"><span class="comment">        * 将Y的右子设置为X */</span></span><br><span class="line">        x.setParent(y);</span><br><span class="line">        y.setRight(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;插入结点&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insertNode</span><span class="params">(T key, D data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cmp;</span><br><span class="line">        RBTNode&lt;T, D&gt; x = <span class="keyword">this</span>.root;</span><br><span class="line">        RBTNode&lt;T, D&gt; y = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 寻找新结点的插入位置 */</span></span><br><span class="line">        <span class="keyword">while</span> (x != <span class="keyword">null</span>) &#123;</span><br><span class="line">            y = x;</span><br><span class="line">            cmp = key.compareTo(x.getKey());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (cmp == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">/* key已存在，直接更新 */</span></span><br><span class="line">                System.out.println(getCurrentTime() + <span class="string">&quot; [WARN] key已存在&quot;</span>);</span><br><span class="line">                System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] 更新value: &quot;</span> + get(key) + <span class="string">&quot; =&gt; &quot;</span> + data);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">/* key较大，继续向右查询 */</span></span><br><span class="line">                x = x.getRight();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">/* key较小，继续向左查询 */</span></span><br><span class="line">                x = x.getLeft();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 生成一个新的结点 */</span></span><br><span class="line">        RBTNode&lt;T, D&gt; node = <span class="keyword">new</span> RBTNode&lt;&gt;(RBTColor.red, key, data, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] 新增结点 (&quot;</span> + key + <span class="string">&quot;, &quot;</span> + data + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">        <span class="comment">/* 总结点数量+1 */</span></span><br><span class="line">        <span class="keyword">this</span>.count.incrementAndGet();</span><br><span class="line">        <span class="comment">/* 设置新结点的父亲为Y */</span></span><br><span class="line">        node.setParent(y);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 再次比较决定新结点是y的左子还是右子*/</span></span><br><span class="line">        <span class="keyword">if</span> (y == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.root = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cmp = key.compareTo(y.getKey());</span><br><span class="line">            <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                y.setRight(node);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                y.setLeft(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 最后进行自平衡 */</span></span><br><span class="line">        balanceInsertion(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;插入结点的自平衡操作&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;由于插入节点默认颜色为红色，所以只有父结点为红色时候才需要修复</span></span><br><span class="line"><span class="comment">     *   分三种情况讨论&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;case1. 叔叔结点也为红色&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;case2. 叔叔结点为空，且祖父子三点一线&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;case3. 叔叔结点为空，且祖父子三角关系&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;G-祖父、P-父亲、U-叔叔、C-插入&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">balanceInsertion</span><span class="params">(RBTNode&lt;T, D&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 父亲 · 祖父 */</span></span><br><span class="line">        RBTNode&lt;T, D&gt; paren, grand;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 当父亲节点为黑色时，结束修复 */</span></span><br><span class="line">        <span class="keyword">while</span> (((paren = node.getParent()) != <span class="keyword">null</span>) &amp;&amp; isRed(paren)) &#123;</span><br><span class="line">            grand = paren.getParent();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 确定父亲和叔叔的左右关系 */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* CASE: 父左叔右 */</span></span><br><span class="line">            <span class="keyword">if</span> (grand.getLeft() == paren) &#123;</span><br><span class="line">                RBTNode&lt;T, D&gt; uncle = grand.getRight();</span><br><span class="line"></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * case1: PU双红</span></span><br><span class="line"><span class="comment">                 * solution1: GPU变色</span></span><br><span class="line"><span class="comment">                 * 如果此时整棵树不满足约束，则递归进行GPU变色</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span> (isRed(uncle)) &#123;</span><br><span class="line">                    grand.setColor(RBTColor.red);</span><br><span class="line">                    paren.setColor(RBTColor.black);</span><br><span class="line">                    uncle.setColor(RBTColor.black);</span><br><span class="line">                    node = grand;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * case2: P红U黑，父为左子，GPC三点一线</span></span><br><span class="line"><span class="comment">                 * solution2: 右旋祖父，GP变色</span></span><br><span class="line"><span class="comment">                 *         (1) 右旋祖父结点</span></span><br><span class="line"><span class="comment">                 *           黑祖                        红父</span></span><br><span class="line"><span class="comment">                 *           / \                         / \</span></span><br><span class="line"><span class="comment">                 *        红父  黑叔    --(右旋)--&gt;    红插  黑祖</span></span><br><span class="line"><span class="comment">                 *         /                                 \</span></span><br><span class="line"><span class="comment">                 *       红插                                黑叔</span></span><br><span class="line"><span class="comment">                 *         (2) 祖父和父亲变色</span></span><br><span class="line"><span class="comment">                 *           红父                        黑父</span></span><br><span class="line"><span class="comment">                 *           / \                         / \</span></span><br><span class="line"><span class="comment">                 *        红插  黑祖    --(变色)--&gt;    红插  红祖</span></span><br><span class="line"><span class="comment">                 *              \                            \</span></span><br><span class="line"><span class="comment">                 *              黑叔                         黑叔</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                * case3: P红U黑，父为左子，GPC三角关系</span></span><br><span class="line"><span class="comment">                * solution3: 左旋父亲，交换PC，右旋祖父，GP变色</span></span><br><span class="line"><span class="comment">                *         (1) 左旋父亲结点，并且交换父子身份，此时GPC三点一线</span></span><br><span class="line"><span class="comment">                *          黑祖                        黑祖                        黑祖</span></span><br><span class="line"><span class="comment">                *          / \                         / \                        / \</span></span><br><span class="line"><span class="comment">                *       红父  黑叔    --(左旋)--&gt;    红插  黑叔    --(交换)--&gt;    红父  黑叔</span></span><br><span class="line"><span class="comment">                *        \                          /                           /</span></span><br><span class="line"><span class="comment">                *        红插                     红父                         红插</span></span><br><span class="line"><span class="comment">                *        (2) 右旋祖父结点</span></span><br><span class="line"><span class="comment">                *          黑祖                        红父</span></span><br><span class="line"><span class="comment">                *          / \                         / \</span></span><br><span class="line"><span class="comment">                *       红父  黑叔    --(右旋)--&gt;    红插  黑祖y</span></span><br><span class="line"><span class="comment">                *        /                                 \</span></span><br><span class="line"><span class="comment">                *      红插                                黑叔</span></span><br><span class="line"><span class="comment">                *        (3) 祖父和父亲变色</span></span><br><span class="line"><span class="comment">                *          红父                        黑</span></span><br><span class="line"><span class="comment">                *          / \                         / \</span></span><br><span class="line"><span class="comment">                *       红插  黑祖    --(变色)--&gt;    红插  红组</span></span><br><span class="line"><span class="comment">                *              \                           \</span></span><br><span class="line"><span class="comment">                *              黑叔                        黑叔</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 * attention:</span></span><br><span class="line"><span class="comment">                 * 三角关系经过一步旋转即可转换成三点一线</span></span><br><span class="line"><span class="comment">                 * 因此case3先经过一步处理到case2，再进行case2的处理</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (paren.getRight() == node) &#123; <span class="comment">// case3</span></span><br><span class="line">                        leftRotate(paren);</span><br><span class="line">                        RBTNode&lt;T, D&gt; temp = node;</span><br><span class="line">                        node = paren;</span><br><span class="line">                        paren = temp;</span><br><span class="line">                    &#125; <span class="comment">// case2</span></span><br><span class="line">                    rightRotate(grand);</span><br><span class="line">                    grand.updateColor();</span><br><span class="line">                    paren.updateColor();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* CASE: 父右叔左 */</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                RBTNode&lt;T, D&gt; uncle = grand.getLeft();</span><br><span class="line"></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * case1: PU双红(父亲和叔叔都为红色)</span></span><br><span class="line"><span class="comment">                 * solution1: GPU变色(祖父变为红色，父亲和叔叔都变为黑色)</span></span><br><span class="line"><span class="comment">                 * 如果此时整棵树不满足约束，则递归进行GPU变色</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span> (isRed(uncle)) &#123;</span><br><span class="line">                    grand.setColor(RBTColor.red);</span><br><span class="line">                    paren.setColor(RBTColor.black);</span><br><span class="line">                    uncle.setColor(RBTColor.black);</span><br><span class="line">                    node = grand;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * case4: P红U黑，父为左子，GPC三点一线</span></span><br><span class="line"><span class="comment">                 * solution4: 左旋祖父，GP变色</span></span><br><span class="line"><span class="comment">                 *         (1) 左旋祖父结点</span></span><br><span class="line"><span class="comment">                 *           黑祖                        红父</span></span><br><span class="line"><span class="comment">                 *           / \                         / \</span></span><br><span class="line"><span class="comment">                 *        黑叔  红父    --(右旋)--&gt;    黑祖  红插</span></span><br><span class="line"><span class="comment">                 *               \                     /</span></span><br><span class="line"><span class="comment">                 *               红插                黑叔</span></span><br><span class="line"><span class="comment">                 *          (2) 祖父和父亲变色</span></span><br><span class="line"><span class="comment">                 *           红父                        黑父</span></span><br><span class="line"><span class="comment">                 *           / \                         / \</span></span><br><span class="line"><span class="comment">                 *        黑祖  红插    --(变色)--&gt;    红祖  红插</span></span><br><span class="line"><span class="comment">                 *         /                           /</span></span><br><span class="line"><span class="comment">                 *       黑叔                        黑叔</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 * case5: P红U黑，父为右子，GPC三角关系</span></span><br><span class="line"><span class="comment">                 * solution5: 右旋父亲，交换PC，左旋祖父，GP变色</span></span><br><span class="line"><span class="comment">                 *          (1) 右旋父亲结点，并且交换父子身份，此时GPC三点一线</span></span><br><span class="line"><span class="comment">                 *           黑祖                        黑祖                        黑祖</span></span><br><span class="line"><span class="comment">                 *           / \                         / \                        / \</span></span><br><span class="line"><span class="comment">                 *        黑叔  红父    --(右旋)--&gt;    黑祖  红插    --(交换)--&gt;    黑祖  红父</span></span><br><span class="line"><span class="comment">                 *              /                            \                          \</span></span><br><span class="line"><span class="comment">                 *            红插                           红父                        红插</span></span><br><span class="line"><span class="comment">                 *          (2) 左旋祖父</span></span><br><span class="line"><span class="comment">                 *           黑祖                        红父</span></span><br><span class="line"><span class="comment">                 *           / \                         / \</span></span><br><span class="line"><span class="comment">                 *        黑叔  红父    --(左旋)--&gt;    黑祖  红插</span></span><br><span class="line"><span class="comment">                 *               \                    /</span></span><br><span class="line"><span class="comment">                 *               红插               黑叔</span></span><br><span class="line"><span class="comment">                 *          (3) 祖父和父亲变色</span></span><br><span class="line"><span class="comment">                 *           红父                        黑父</span></span><br><span class="line"><span class="comment">                 *           / \                         / \</span></span><br><span class="line"><span class="comment">                 *        黑叔  红插    --(变色)--&gt;    红祖  红插</span></span><br><span class="line"><span class="comment">                 *         /                         /</span></span><br><span class="line"><span class="comment">                 *       黑叔                      黑叔</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 * attention:</span></span><br><span class="line"><span class="comment">                 * 三角关系经过一步旋转即可转换成三点一线</span></span><br><span class="line"><span class="comment">                 * 因此case3先经过一步处理到case2，再进行case2的处理</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (paren.getLeft() == node) &#123; <span class="comment">// case3</span></span><br><span class="line">                        rightRotate(paren);</span><br><span class="line">                        RBTNode&lt;T, D&gt; temp = node;</span><br><span class="line">                        node = paren;</span><br><span class="line">                        paren = temp;</span><br><span class="line">                    &#125; <span class="comment">// case2</span></span><br><span class="line">                    leftRotate(grand);</span><br><span class="line">                    grand.updateColor();</span><br><span class="line">                    paren.updateColor();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 保证根节点为黑色 */</span></span><br><span class="line">        <span class="keyword">if</span> (root == node) &#123;</span><br><span class="line">            node.setColor(RBTColor.black);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;删除结点&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;三种情况&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;1. 待删结点左子和右子都存在&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;2. 待删结点没有左子和右子&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;3. 待删结点只有左子或者右子&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(RBTNode&lt;T, D&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 父亲 · 儿子 · 继承者 */</span></span><br><span class="line">        RBTNode&lt;T, D&gt; paren, child, replace;</span><br><span class="line">        RBTColor color;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * case1: 待删结点左子和右子都存在</span></span><br><span class="line"><span class="comment">         * solution1:</span></span><br><span class="line"><span class="comment">         * - 找到该结点的右子树中的最左子结点</span></span><br><span class="line"><span class="comment">         * - 把它的值和要删除的结点的值进行交换</span></span><br><span class="line"><span class="comment">         * - 然后删除这个结点即相当于删除所需删除结点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> ((node.getLeft() != <span class="keyword">null</span>) &amp;&amp; (node.getRight() != <span class="keyword">null</span>))  &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*  获取其后继结点: 右子树中的最左子结点 */</span></span><br><span class="line">            replace = descendants(node);</span><br><span class="line">            paren = replace.getParent();</span><br><span class="line">            child = replace.getRight();</span><br><span class="line">            color = replace.getColor();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node == replace.getParent()) &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * case:</span></span><br><span class="line"><span class="comment">                 *    node              replace</span></span><br><span class="line"><span class="comment">                 *      \                  \</span></span><br><span class="line"><span class="comment">                 *      replace    --&gt;    child</span></span><br><span class="line"><span class="comment">                 *         \</span></span><br><span class="line"><span class="comment">                 *         child</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                paren = replace;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * case:</span></span><br><span class="line"><span class="comment">                 *     node                replace</span></span><br><span class="line"><span class="comment">                 *       \                   \</span></span><br><span class="line"><span class="comment">                 *        X                   X</span></span><br><span class="line"><span class="comment">                 *       / \                 / \</span></span><br><span class="line"><span class="comment">                 *  paren   X    --&gt;    paren   X</span></span><br><span class="line"><span class="comment">                 *     /                  /</span></span><br><span class="line"><span class="comment">                 *  replace            child</span></span><br><span class="line"><span class="comment">                 *     \</span></span><br><span class="line"><span class="comment">                 *     child</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="comment">/* 建立替代结点的父亲与替换结点的右子的父子关系，即爷孙変父子 */</span></span><br><span class="line">                <span class="keyword">if</span> (child != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    child.setParent(replace.getParent());</span><br><span class="line">                &#125;</span><br><span class="line">                replace.getParent().setLeft(child);</span><br><span class="line">                <span class="comment">/* 建立替代节点与待删节点的右子的父子关系 */</span></span><br><span class="line">                replace.setRight(node.getRight());</span><br><span class="line">                node.getRight().setParent(replace);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 待删节点的父亲设置为替代结点的父亲 */</span></span><br><span class="line">            replace.setParent(node.getParent());</span><br><span class="line">            <span class="comment">/* 建立替换结点与待删节点左子的父子关系 */</span></span><br><span class="line">            replace.setLeft(node.getLeft());</span><br><span class="line">            node.getLeft().setParent(replace);</span><br><span class="line">            <span class="comment">/* 替代结点沿用待删节点的颜色 */</span></span><br><span class="line">            replace.setColor(node.getColor());</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 待删结点的父亲不为空，则调整左右子 */</span></span><br><span class="line">            <span class="keyword">if</span> (node.getParent() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node.getParent().getLeft() == node) &#123;</span><br><span class="line">                    node.getParent().setLeft(replace);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    node.getParent().setRight(replace);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* 待删结点的父亲为空，则设置根结点 */</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.root = replace;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 删除黑色结点需要调整平衡，红色不需要 */</span></span><br><span class="line">            <span class="keyword">if</span> (color == RBTColor.black) &#123;</span><br><span class="line">                balanceDeletion(child, paren);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * case2: 待删结点没有左子和右子</span></span><br><span class="line"><span class="comment">         * solution3: 直接删除结点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((node.getLeft() == <span class="keyword">null</span>) &amp;&amp; (node.getRight() == <span class="keyword">null</span>)) &#123;</span><br><span class="line">            paren = node.getParent();</span><br><span class="line">            <span class="keyword">if</span> (node == paren.getLeft()) &#123;</span><br><span class="line">                paren.setLeft(node.getLeft());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                paren.setRight(node.getRight());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * case2: 待删结点只有左子或者右子</span></span><br><span class="line"><span class="comment">         * solution2: 待删节点的父亲指向存在的子嗣</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* 确定替代结点 */</span></span><br><span class="line">            <span class="keyword">if</span> (node.getLeft() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                replace = node.getLeft();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                replace = node.getRight();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 待删结点的父亲 */</span></span><br><span class="line">            paren = node.getParent();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 待删结点的父亲是否为空 */</span></span><br><span class="line">            <span class="keyword">if</span> (paren != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (paren.getLeft() == node) &#123;</span><br><span class="line">                    paren.setLeft(replace);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    paren.setRight(replace);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.root = replace;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 待删节点的父亲指向替代结点 */</span></span><br><span class="line">            replace.setParent(paren);</span><br><span class="line"></span><br><span class="line">            color = node.getColor();</span><br><span class="line">            child = replace;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 删除黑色结点需要调整平衡，红色不需要 */</span></span><br><span class="line">            <span class="keyword">if</span> (color == RBTColor.black) &#123;</span><br><span class="line">                balanceDeletion(child, paren);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 结点数量-1 */</span></span><br><span class="line">        count.decrementAndGet();</span><br><span class="line">        System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] key为&quot;</span> + node.getKey() + <span class="string">&quot;的结点删除成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;寻找继承的后裔&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RBTNode&lt;T, D&gt; <span class="title">descendants</span><span class="params">(RBTNode&lt;T, D&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 查询大于该节点的最小结点，即右子树的最左结点 */</span></span><br><span class="line">        <span class="keyword">if</span> (node.getRight() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            RBTNode&lt;T, D&gt; right = node.getRight();</span><br><span class="line">            <span class="keyword">if</span> (right.getLeft() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (right.getLeft() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                right = right.getLeft();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* @deprecated */</span></span><br><span class="line">        RBTNode&lt;T, D&gt; paren = node.getParent();</span><br><span class="line">        <span class="keyword">while</span> ((paren != <span class="keyword">null</span>) &amp;&amp; (paren.getRight() == node)) &#123;</span><br><span class="line">            node = paren;</span><br><span class="line">            paren = paren.getParent();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> paren;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;删除结点的自平衡操作&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * P-父亲、D-删除、B-兄弟、BR-兄弟右子、BL-兄弟左子。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * - D为左子</span></span><br><span class="line"><span class="comment">     *   - B为红色：左旋父亲，父亲染红，兄弟染黑，然后continue</span></span><br><span class="line"><span class="comment">     *   - B为黑色</span></span><br><span class="line"><span class="comment">     *     - BL为黑色且BR黑色：兄弟染红，父亲回溯</span></span><br><span class="line"><span class="comment">     *     - BL为红色且BR为黑色：右旋兄弟，兄弟染红，BL染黑</span></span><br><span class="line"><span class="comment">     *     - BR为红色：左旋父亲，父亲的颜色给兄弟，父亲黑化，BR黑化，然后break</span></span><br><span class="line"><span class="comment">     * - D为右子</span></span><br><span class="line"><span class="comment">     *   - B为红色：右旋父亲，父亲染红，兄弟染黑，然后continue</span></span><br><span class="line"><span class="comment">     *   - B为黑色：</span></span><br><span class="line"><span class="comment">     *     - BL为黑色且BR为黑色：兄弟染红，父亲回溯</span></span><br><span class="line"><span class="comment">     *     - BL为红色且BR为黑色：左旋兄弟，父亲染红，BR染黑</span></span><br><span class="line"><span class="comment">     *     - BL为红色：右旋父亲，父亲的颜色给兄弟，父亲黑化，BL黑化，然后break</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> paren</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     *     入参情况:</span></span><br><span class="line"><span class="comment">     *     1. node=替换节点 paren=替换节点的父亲节点</span></span><br><span class="line"><span class="comment">     *     2. node=替换节点的孩子节点 paren=替换节点</span></span><br><span class="line"><span class="comment">     *     3. node=替换节点的孩子节点 parent=替换节点的父节点</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">balanceDeletion</span><span class="params">(RBTNode&lt;T, D&gt; node, RBTNode&lt;T, D&gt; paren)</span> </span>&#123;</span><br><span class="line">        RBTNode&lt;T, D&gt; broth;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (isBlack(node) &amp;&amp; node != <span class="keyword">this</span>.root) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (paren.getLeft() == node) &#123;</span><br><span class="line">                broth = paren.getRight();</span><br><span class="line"></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * case1: D为左子。B为红色</span></span><br><span class="line"><span class="comment">                 * solution1: 左旋父亲，父亲染红，兄弟染黑，然后continue</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span> (isRed(broth)) &#123;</span><br><span class="line">                    leftRotate(paren);</span><br><span class="line">                    paren.setColor(RBTColor.red);</span><br><span class="line">                    broth.setColor(RBTColor.black);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * case2: D为左子。B为黑色，BL为黑色且BR为黑色</span></span><br><span class="line"><span class="comment">                     * solution2: 兄弟染红，父亲回溯</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">if</span> (isBlack(broth.getLeft()) &amp;&amp; isBlack(broth.getRight())) &#123;</span><br><span class="line">                        broth.setColor(RBTColor.red);</span><br><span class="line">                        node = paren;</span><br><span class="line">                        paren = paren.getParent();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * case3: D为左子。B为黑色，BL为红色且BR为黑色</span></span><br><span class="line"><span class="comment">                     * solution3: 右旋兄弟，兄弟染红，BL染黑</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (isRed(broth.getLeft()) &amp;&amp; isBlack(broth.getRight())) &#123;</span><br><span class="line">                        rightRotate(broth);</span><br><span class="line">                        broth.setColor(RBTColor.red);</span><br><span class="line">                        broth.getLeft().setColor(RBTColor.black);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * case4: D为左子，B为黑色，BR为红色</span></span><br><span class="line"><span class="comment">                     * solution4: 左旋父亲，父亲的颜色给兄弟，父亲黑化，BR黑化，然后break</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (isRed(broth.getRight())) &#123;</span><br><span class="line">                        leftRotate(paren);</span><br><span class="line">                        broth.setColor(paren.getColor());</span><br><span class="line">                        paren.setColor(RBTColor.black);</span><br><span class="line">                        broth.getRight().setColor(RBTColor.black);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                broth = paren.getLeft();</span><br><span class="line"></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * case5: D为右子。B为红色</span></span><br><span class="line"><span class="comment">                 * solution5: 右旋父亲，父亲染红，兄弟染黑，然后continue</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span> (isRed(broth)) &#123;</span><br><span class="line">                    rightRotate(paren);</span><br><span class="line">                    paren.setColor(RBTColor.red);</span><br><span class="line">                    broth.setColor(RBTColor.black);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * case6: D为右子。B为黑色，BL为黑色且BR为黑色</span></span><br><span class="line"><span class="comment">                     * solution6: 兄弟染红，父亲回溯</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">if</span> (isBlack(broth.getLeft()) &amp;&amp; isBlack(broth.getRight())) &#123;</span><br><span class="line">                        broth.setColor(RBTColor.red);</span><br><span class="line">                        node = paren;</span><br><span class="line">                        paren = paren.getParent();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * case7: D为右子。B为黑色，BL为红色且BR为黑色</span></span><br><span class="line"><span class="comment">                     * solution7: 左旋兄弟，父亲染红，BR染黑</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (isRed(broth.getLeft()) &amp;&amp; isBlack(broth.getRight())) &#123;</span><br><span class="line">                        leftRotate(broth);</span><br><span class="line">                        paren.setColor(RBTColor.red);</span><br><span class="line">                        broth.getRight().setColor(RBTColor.black);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * case8: D为右子，B为黑色，BR为红色</span></span><br><span class="line"><span class="comment">                     * solution8: 右旋父亲，父亲的颜色给兄弟，父亲黑化，BL黑化，然后break</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (isRed(broth.getRight())) &#123;</span><br><span class="line">                        rightRotate(paren);</span><br><span class="line">                        broth.setColor(paren.getColor());</span><br><span class="line">                        paren.setColor(RBTColor.black);</span><br><span class="line">                        broth.getRight().setColor(RBTColor.black);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* node染成被删结点的颜色 */</span></span><br><span class="line">        node.setColor(RBTColor.black);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;层次遍历&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;List&lt;RBTNode&lt;T, D&gt;&gt;&gt; levelList = levelOrder(<span class="keyword">this</span>.root);</span><br><span class="line">        <span class="keyword">for</span> (List&lt;RBTNode&lt;T, D&gt;&gt; list:levelList) &#123;</span><br><span class="line">            <span class="keyword">for</span> (RBTNode node : list) &#123;</span><br><span class="line">                System.out.print(node.getKey() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;层次遍历&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;List&lt;RBTNode&lt;T, D&gt;&gt;&gt; levelOrder(RBTNode&lt;T, D&gt; node) &#123;</span><br><span class="line">        List&lt;List&lt;RBTNode&lt;T, D&gt;&gt;&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        Queue&lt;RBTNode&lt;T, D&gt;&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.add(node);</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> count = queue.size();</span><br><span class="line">            List&lt;RBTNode&lt;T, D&gt;&gt; cur = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span> (count != <span class="number">0</span>) &#123;</span><br><span class="line">                RBTNode&lt;T, D&gt; temp = queue.poll();</span><br><span class="line">                cur.add(temp);</span><br><span class="line">                <span class="keyword">if</span> (temp.getLeft() != <span class="keyword">null</span>) queue.add(temp.getLeft());</span><br><span class="line">                <span class="keyword">if</span> (temp.getRight() != <span class="keyword">null</span>) queue.add(temp.getRight());</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;输出红黑树的层级结构&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printRBTreeLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] 开始打印红黑树的层级结构&quot;</span>);</span><br><span class="line">        ConcurrentHashMap&lt;Integer, List&lt;RBTNode&gt;&gt; map = showTree();</span><br><span class="line">        <span class="keyword">int</span> size = map.size();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; map.size(); i++) &#123;</span><br><span class="line">            System.out.println();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; map.get(i).size(); j++) &#123;</span><br><span class="line">                System.out.print( makeSpace(size, i) +</span><br><span class="line">                        (map.get(i).get(j).getKey() == <span class="keyword">null</span> ? <span class="string">&quot; &quot;</span> : (map.get(i).get(j).getKey()) + (map.get(i).get(j).getColor() == RBTColor.black ? <span class="string">&quot;(黑)&quot;</span> : <span class="string">&quot;(红)&quot;</span>)) + makeSpace(size, i));</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] 红黑树的层级结构打印完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;输出整棵树的Graphviz结构&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printGraphviz</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] 开始打印树的Graphviz结构&quot;</span>);</span><br><span class="line">        ConcurrentHashMap&lt;Integer, List&lt;RBTNode&gt;&gt; map = showTree();</span><br><span class="line">        <span class="keyword">int</span> size = map.size();</span><br><span class="line">        System.out.println(<span class="string">&quot;digraph &#123;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; map.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; map.get(i).size(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(map.get(i).get(j).getKey() != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    System.out.println(map.get(i).get(j).getKey() + <span class="string">&quot; [color=&quot;</span>  + (map.get(i).get(j).getColor()) + <span class="string">&quot;] &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; map.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; map.get(i).size(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(map.get(i).get(j).getKey() != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(map.get(i).get(j).getLeft() != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        System.out.println(map.get(i).get(j).getKey() + <span class="string">&quot;-&gt;&quot;</span> + map.get(i).get(j).getLeft().getKey() + <span class="string">&quot;[label=left]&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(map.get(i).get(j).getRight() != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        System.out.println(map.get(i).get(j).getKey() + <span class="string">&quot;-&gt;&quot;</span> + map.get(i).get(j).getRight().getKey() + <span class="string">&quot;[label=right]&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] 树的Graphviz结构打印完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">makeSpace</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; (size - index); i++) &#123;</span><br><span class="line">            builder.append(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ConcurrentHashMap&lt;Integer, List&lt;RBTNode&gt;&gt; showTree()&#123;</span><br><span class="line">        ConcurrentHashMap&lt;Integer, List&lt;RBTNode&gt;&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">        showTree(root, <span class="number">0</span>, map);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showTree</span><span class="params">(RBTNode root, <span class="keyword">int</span> count, ConcurrentHashMap&lt;Integer, List&lt;RBTNode&gt;&gt; map)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map.get(count) == <span class="keyword">null</span>)&#123;</span><br><span class="line">            map.put(count, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        map.get(count).add(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root.getLeft() != <span class="keyword">null</span>)&#123;</span><br><span class="line">            showTree(root.getLeft(), count+<span class="number">1</span> , map);</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.get(count+<span class="number">1</span>) == <span class="keyword">null</span>)&#123;</span><br><span class="line">                map.put(count+<span class="number">1</span>, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            map.get(count+<span class="number">1</span>).add(<span class="keyword">new</span> RBTNode(RBTColor.red, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.getRight() != <span class="keyword">null</span>)&#123;</span><br><span class="line">            showTree(root.getRight(), count+<span class="number">1</span> , map);</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.get(count+<span class="number">1</span>) == <span class="keyword">null</span>)&#123;</span><br><span class="line">                map.put(count+<span class="number">1</span>, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            map.get(count+<span class="number">1</span>).add(<span class="keyword">new</span> RBTNode(RBTColor.red, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;菜单&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RBT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RedBlackTree KTree = <span class="keyword">new</span> RedBlackTree();</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println((<span class="string">&quot;┏━━━━━━━━━ ▶ ▶ ▶ ▶ ▶ RED ❤ BLACK ◀ ◀ ◀ ◀ ◀ ━━━━━━━━━━┓&quot;</span>));</span><br><span class="line">            System.out.println((<span class="string">&quot;   ✪━━━━━━━━━━━━━━━━━━━ 1. 插入节点 ━━━━━━━━━━━━━━━━━━━✪&quot;</span>));</span><br><span class="line">            System.out.println((<span class="string">&quot;   ✪━━━━━━━━━━━━━━━━━━━ 2. 查询节点 ━━━━━━━━━━━━━━━━━━━✪&quot;</span>));</span><br><span class="line">            System.out.println((<span class="string">&quot;   ✪━━━━━━━━━━━━━━━━━━━ 3. 删除结点 ━━━━━━━━━━━━━━━━━━━✪&quot;</span>));</span><br><span class="line">            System.out.println((<span class="string">&quot;   ✪━━━━━━━━━━━━━━━━━━━ 4. 查询数量 ━━━━━━━━━━━━━━━━━━━✪&quot;</span>));</span><br><span class="line">            System.out.println((<span class="string">&quot;   ✪━━━━━━━━━━━━━━━━━━━ 5. 层次结构 ━━━━━━━━━━━━━━━━━━━✪&quot;</span>));</span><br><span class="line">            System.out.println((<span class="string">&quot;   ✪━━━━━━━━━━━━━━━━━━━ 6. Graphviz ━━━━━━━━━━━━━━━━━━✪&quot;</span>));</span><br><span class="line">            System.out.println((<span class="string">&quot;   ✪━━━━━━━━━━━━━━━━━━━ 7. 退出系统 ━━━━━━━━━━━━━━━━━━━✪&quot;</span>));</span><br><span class="line">            System.out.println((<span class="string">&quot;┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛&quot;</span>));</span><br><span class="line"></span><br><span class="line">            System.out.print(getCurrentTime() + <span class="string">&quot; [input] 输入选择：&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> choice = scanner.nextInt();</span><br><span class="line">            <span class="keyword">int</span> key;</span><br><span class="line">            String value;</span><br><span class="line">            <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    System.out.print(getCurrentTime() + <span class="string">&quot; [INPUT] 输入键值：&quot;</span>);</span><br><span class="line">                    key = scanner.nextInt();</span><br><span class="line">                    System.out.print(getCurrentTime() + <span class="string">&quot; [INPUT] 输入数据：&quot;</span>);</span><br><span class="line">                    value = scanner.next();</span><br><span class="line">                    KTree.add(key, value);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    System.out.print(getCurrentTime() + <span class="string">&quot; [INPUT] 输入键值：&quot;</span>);</span><br><span class="line">                    key = scanner.nextInt();</span><br><span class="line">                    System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] 查询结果 value = &quot;</span> + KTree.get(key));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    System.out.print(getCurrentTime() + <span class="string">&quot; [INPUT] 输入键值：&quot;</span>);</span><br><span class="line">                    key = scanner.nextInt();</span><br><span class="line">                    KTree.del(key);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] 查询结果 size = &quot;</span> + KTree.size());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                    KTree.printRBTreeLevel();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                    KTree.printGraphviz();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                    System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] 退出成功&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(getCurrentTime() + <span class="string">&quot; [ERROR] 输入错误&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RedBlackTree redBlackTree = <span class="keyword">new</span> RedBlackTree();</span><br><span class="line">        redBlackTree.RBT();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>RedBlackTree</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty</title>
    <url>/2020/10/01/Netty/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h1><center>
    <font face="Kristen ITC" color="#555555" font-size=100px>Khighness</font><br>
</center>

<h2 id="1-IO"><a href="#1-IO" class="headerlink" title="1. IO"></a>1. IO</h2><h3 id="1-1-BIO"><a href="#1-1-BIO" class="headerlink" title="1.1 BIO"></a>1.1 BIO</h3><h4 id="1-1-1-介绍"><a href="#1-1-1-介绍" class="headerlink" title="1.1.1 介绍"></a>1.1.1 介绍</h4><ul>
<li>Java BIO就是传统的Java IO编程，相关API都在java.io</li>
<li>BIO (<strong>blocking I/O</strong>)：<strong>同步并阻塞</strong>，服务器实现模式为一个连接一个线程，即有连接请求时服务器就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销</li>
<li>BIO方式适用于连接数目较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择</li>
</ul>
<h4 id="1-1-2-实例"><a href="#1-1-2-实例" class="headerlink" title="1.1.2 实例"></a>1.1.2 实例</h4><blockquote>
<p>BIO服务器</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.bio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/9/13 11:07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: BIO服务器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BIOServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = Logger.getLogger(BIOServer.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  启动服务器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 线程池机制</span></span><br><span class="line"><span class="comment">         * 思路</span></span><br><span class="line"><span class="comment">         * 1、创建一个线程池</span></span><br><span class="line"><span class="comment">         * 2、如果有多个线程池联机呃，就创建一个线程，与之通讯</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        ExecutorService newCachedThreadPool = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建ServerSocket</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;NIO 服务器启动 &quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 监听，等待客户端接受</span></span><br><span class="line">            <span class="keyword">final</span> Socket socket = serverSocket.accept();</span><br><span class="line">            logger.info(<span class="string">&quot;新增一个客户端连接&quot;</span>);</span><br><span class="line">            <span class="comment">// 创建一个线程，与之通讯</span></span><br><span class="line">            newCachedThreadPool.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    handler(socket);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * handler，和客户端通讯</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> socket</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handler</span><span class="params">(Socket socket)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="comment">// 通过socket获取输入流</span></span><br><span class="line">            InputStream inputStream = socket.getInputStream();</span><br><span class="line">            <span class="comment">// 循环读取客户端发送的数据</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 输出线程信息</span></span><br><span class="line">                logger.info(<span class="string">&quot;线程信息：&#123; PID = &quot;</span> + Thread.currentThread().getId()</span><br><span class="line">                        + <span class="string">&quot;, Name = &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; &#125;&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> read = inputStream.read(bytes);</span><br><span class="line">                <span class="keyword">if</span> (read != -<span class="number">1</span>) &#123;</span><br><span class="line">                    logger.info(<span class="string">&quot;[客户端：&quot;</span> + <span class="keyword">new</span> String(bytes, <span class="number">0</span>, read) + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.info(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;关闭与客户端的连接&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> BIOServer().start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="1-1-3-配置"><a href="#1-1-3-配置" class="headerlink" title="1.1.3 配置"></a>1.1.3 配置</h4><img src="/2020/10/01/Netty/image-20200913115739418.png" class="" title="image-20200913115739418">

<img src="/2020/10/01/Netty/image-20200913115851769.png" class="" title="image-20200913115851769">

<img src="/2020/10/01/Netty/image-20200913115947574.png" class="" title="image-20200913115947574">



<h4 id="1-1-4-运行"><a href="#1-1-4-运行" class="headerlink" title="1.1.4 运行"></a>1.1.4 运行</h4><img src="/2020/10/01/Netty/image-20200913120322526.png" class="" title="image-20200913120322526">



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">telnet 127.0.0.1 6666</span><br></pre></td></tr></table></figure>

<img src="/2020/10/01/Netty/image-20200913120406689.png" class="" title="image-20200913120406689">



<img src="/2020/10/01/Netty/image-20200913121954652.png" class="" title="image-20200913121954652">

<img src="/2020/10/01/Netty/image-20200913122028056.png" class="" title="image-20200913122028056">



<h4 id="1-1-5-不足"><a href="#1-1-5-不足" class="headerlink" title="1.1.5 不足"></a>1.1.5 不足</h4><p>1｝每个请求都需要创建独立的线程，与对应的客户端进行数据Read，业务处理，数据Write</p>
<p>2）当并发数较大时，需要创建大量线程来处理连接，系统资源占用较大</p>
<p>3）连接建立后，如果当当前线程暂存没有数据可读，则线程就阻塞在Read上，造成线程资源浪费</p>
<h3 id="1-2-NIO"><a href="#1-2-NIO" class="headerlink" title="1.2 NIO"></a>1.2 NIO</h3><h4 id="1-2-1-介绍"><a href="#1-2-1-介绍" class="headerlink" title="1.2.1 介绍"></a>1.2.1 介绍</h4><ul>
<li>Java NIO 全称 <strong>java non-blocking IO</strong>，是指JDK提供的心API，是<strong>同步非阻塞</strong>的。</li>
<li>NIO 相关类都被放在 java.nio包及子包下，并且对原 java.io包中的很多类进行改写</li>
<li>NIO 三大核心部分：<u>Channel</u>(通道)、<u>Buffer</u>(缓冲区)、<u>Selector</u>(选择器)</li>
<li>NIO 是面向缓冲区或者面向块编程的。数据读取到一个它稍后处理的缓冲区，需要时可在缓冲区前后移动，这就增加处理过程中的灵活性，使用它可以提供非阻塞的高伸缩性网络</li>
</ul>
<h4 id="1-2-2-比较"><a href="#1-2-2-比较" class="headerlink" title="1.2.2 比较"></a>1.2.2 比较</h4><blockquote>
<p><code>BIO</code> VS <code>NIO</code></p>
</blockquote>
<ul>
<li><p>BIO以流的方式处理数据，而NIO以块的方式处理数据，块I/O的效率比流I/O高很多</p>
</li>
<li><p>BIO是阻塞的，NIO则是非阻塞的</p>
</li>
<li><p>BIO基于字节流和字符流进行操作，而NIO基于<code>Channel</code>(通道)和<code>Buffer</code>(缓冲区)进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区写入到同道中人。<code>Selectors</code>(选择器)用于监听多个通道的事件（比如：连接请求、数据到达等），因此使用单个线程就可以监听多个客户端通道</p>
</li>
</ul>
<h4 id="1-2-3-组件"><a href="#1-2-3-组件" class="headerlink" title="1.2.3 组件"></a>1.2.3 组件</h4><p>三大组件：<code>Selector</code>、<code>Channe</code>和<code>Buffer</code></p>
<blockquote>
<p>关系图</p>
</blockquote>
<img src="/2020/10/01/Netty/image-20200913164017187.png" class="" title="image-20200913164017187">

<blockquote>
<p>说明</p>
</blockquote>
<ul>
<li>每个<code>channel</code>都会对应一个<code>Buffer</code></li>
<li><code>Selector</code>对应一个线程，一个线程对应多个<code>channel</code></li>
<li>该图反应有三个<code>channel</code>注册到了该<code>Selector</code>程序</li>
<li>程序切换到哪个<code>channel</code>是有事件决定的，<code>Event</code>就是一个重要的概念</li>
<li><code>Selector</code>会根据不同的事件，在各个通道上切换</li>
<li><code>Buffer</code>就是一个内存块，底层是有一个数组</li>
<li>数据的读取写入都通过<code>Buffer</code>，这个和BIO不同。BIO要么是输入流，要么是输出流，不能双向，但是NIO的<code>buffer</code>是可以读也可以写，需要<code>flip</code>方法切换</li>
<li><code>channel</code>是双向的，可以返回底层操作系统的情况，比如<code>Linux</code>，底层的操作系统通道就是双向的</li>
</ul>
<h5 id="1-2-3-1-Buffer"><a href="#1-2-3-1-Buffer" class="headerlink" title="1.2.3.1 Buffer"></a>1.2.3.1 Buffer</h5><blockquote>
<p>说明</p>
</blockquote>
<p>缓冲区：缓冲区本质上是一个可以读写数据的内存块</p>
<blockquote>
<p>常用Buffer子类：</p>
</blockquote>
<ul>
<li>ByteBuffer</li>
<li>ShortBuffer</li>
<li>CharBuffer</li>
<li>IntBuffer</li>
<li>LongBuffer</li>
<li>DoubleBuffer</li>
<li>FloatBuffer</li>
</ul>
<blockquote>
<p>Buffer类定义了所有的缓冲区都具有的四个属性来提供关于其所包含的数据元素</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Capacity</td>
<td align="center">容量，级可以容纳的最大数据量；在缓冲区创建时被设定且不能改变</td>
</tr>
<tr>
<td align="center">Limit</td>
<td align="center">表示缓冲区的当前重点，不能对缓冲区超过极限的位置进行读写操作，且极限是可以修改的</td>
</tr>
<tr>
<td align="center">Position</td>
<td align="center">位置，下一个要被读或写的元素的索引，每次读写缓冲区数据时都会改变的值，为下次读写作准备</td>
</tr>
<tr>
<td align="center">Mark</td>
<td align="center">标记</td>
</tr>
</tbody></table>
<blockquote>
<p>mark &lt;= position &lt;= limit &lt;= capacity</p>
</blockquote>
<h5 id="1-2-3-2-Channel"><a href="#1-2-3-2-Channel" class="headerlink" title="1.2.3.2 Channel"></a>1.2.3.2 Channel</h5><blockquote>
<p>说明</p>
</blockquote>
<p>通道：NIO的通道类似于流，但有些区别</p>
<ul>
<li>通道可以同时进行读写，而流只能读或者只能写</li>
<li>通道可以实现异步读写数据</li>
<li>通道可以从缓冲读数据，也可以写数据到缓冲</li>
</ul>
<blockquote>
<p> 常用的Channel类：</p>
</blockquote>
<ul>
<li>FileChannel                      ━━━━━▶          文件的数据读写</li>
<li>DatagramChannel            ━━━━━▶          UDP的数据读写</li>
<li>ServerSocketChannel      ━━━━━▶          TCP的数据读写</li>
<li>SocketChannel                 ━━━━━▶          TCP的数据读写</li>
</ul>
<blockquote>
<p>FileChannel的主要IO操作</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">public int read(ByteBuffer dst)</td>
<td align="center">从通道读取数据并放到缓冲区中</td>
</tr>
<tr>
<td align="center">public int write(ByteBuffer src)</td>
<td align="center">把缓冲区的数据写到通道中</td>
</tr>
<tr>
<td align="center">public long transferFrom(ReadableByteChannel src, long position, long count)</td>
<td align="center">从目标通道中复制数据到当前通道</td>
</tr>
<tr>
<td align="center">public long transferTo(long position, long count, WritableByteChannel target)</td>
<td align="center">把数据从当前通道复制给目标通道</td>
</tr>
</tbody></table>
<h5 id="1-2-3-3-Selector"><a href="#1-2-3-3-Selector" class="headerlink" title="1.2.3.3 Selector"></a>1.2.3.3 Selector</h5><blockquote>
<p>说明</p>
</blockquote>
<p>选择器：</p>
<ul>
<li>Java的NIO，用非阻塞的IO方式，可以用一个线程，处理多个的客户端连接，就会使用到<code>Selector</code></li>
<li><code>Selector</code>能够检测多个注册的通道上是否有事件发生（多个<code>Channel</code>以事件的方式可以注册到同一个<code>Selector</code>），如果有事件发生，便获取事件然后针对每个事件进行相应的处理。这样就可以只用一个单线程去管理多个通道，也就是管理多个连接和请求</li>
<li>只有在连接真正有读写事件发生时，才会进行读写，就大大地减少了系统开销，并且不必为每个连接都创建一个线程</li>
<li>避免了多线程之间的上下文切换导致的开销</li>
</ul>
<blockquote>
<p>类及相关方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Class | Method</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">public abstract class Selector implements Closeable</td>
<td align="center">抽象类</td>
</tr>
<tr>
<td align="center">public static Selector open()</td>
<td align="center">得到一个选择器对象</td>
</tr>
<tr>
<td align="center">public int select(long timeout)</td>
<td align="center">监控所有注册的通道，参数用来设置超时时间</td>
</tr>
<tr>
<td align="center">public Set<SelectionKey> selectedKeys()</td>
<td align="center">从内部集合中得到所有的SelectionKe’y</td>
</tr>
</tbody></table>
<blockquote>
<p>说明</p>
</blockquote>
<ul>
<li>当客户端连接时，会通过<code>ServerSocketChannel</code>得到<code>SocketChannel</code></li>
<li>将<code>SocketChannel</code>注册到<code>Selector</code>上，注册后返回一个<code>SelectionKey</code></li>
<li><code>Selector</code>进行监听<code>select</code>方法，返回有事件发生的通道的个数</li>
<li>进一步得到各个<code>SelectionKey</code></li>
<li>在通道<code>SelectionKey</code>反向获取<code>SocketChannel</code>，方法<code>channel()</code></li>
<li>可以得到所有的<code>channel</code>，完成业务处理</li>
</ul>
<h4 id="1-2-3-编程"><a href="#1-2-3-编程" class="headerlink" title="1.2.3 编程"></a>1.2.3 编程</h4><blockquote>
<p>将数据写入到本地文件</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建输出流 ——&gt; channel</span></span><br><span class="line">    FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:\\Java\\Test\\K1.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 fileOutputStream 获取 对应的 FileChannel</span></span><br><span class="line">    <span class="comment">// 这个 fileChannel 真实类型是  FileChannelImpl</span></span><br><span class="line">    FileChannel fileChannel = fileOutputStream.getChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个缓冲区 ByteBuffer</span></span><br><span class="line">    ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 s 放入 byteBuffer</span></span><br><span class="line">    byteBuffer.put(s.getBytes());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对 byteBuffer 进行flip</span></span><br><span class="line">    byteBuffer.flip();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 byteBuffer 数据写入到 fileChannel</span></span><br><span class="line">    fileChannel.write(byteBuffer);</span><br><span class="line">    fileOutputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>从本地文件读取数据</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建文件的输入流</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(path);</span><br><span class="line">    FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 fileInputStream 获取对应的 FileChannel ——&gt;  实际类型 FileChannelImpl</span></span><br><span class="line">    FileChannel fileChannel = fileInputStream.getChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个缓冲区ByteBuffer</span></span><br><span class="line">    ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 通道的数据 读入到 Buffer</span></span><br><span class="line">    fileChannel.read(byteBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将byteBuffer的字节数据转成字符串</span></span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(byteBuffer.array()));</span><br><span class="line">    fileInputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>拷贝文件</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(String source, String destination)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(source);</span><br><span class="line">    FileChannel fileChannel1 = fileInputStream.getChannel();</span><br><span class="line"></span><br><span class="line">    FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(destination);</span><br><span class="line">    FileChannel fileChannel2 = fileOutputStream.getChannel();</span><br><span class="line"></span><br><span class="line">    ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 复位，重置标志位</span></span><br><span class="line">        byteBuffer.clear();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> read = fileChannel1.read(byteBuffer);</span><br><span class="line">        <span class="keyword">if</span> (read == -<span class="number">1</span>) &#123;<span class="comment">// 表示读完</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将buffer中的数据写入到fileChannel02 -- K2.txt</span></span><br><span class="line">        byteBuffer.flip();</span><br><span class="line">        fileChannel2.write(byteBuffer);</span><br><span class="line">    &#125;</span><br><span class="line">    fileOutputStream.close();</span><br><span class="line">    fileInputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用transferFrom完成拷贝</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyImage</span><span class="params">(String fromPath, String toPath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建相关流</span></span><br><span class="line">    FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(fromPath);</span><br><span class="line">    FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(toPath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取Channel</span></span><br><span class="line">    FileChannel sourceChannel = fileInputStream.getChannel();</span><br><span class="line">    FileChannel destinChannel = fileOutputStream.getChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用transferFrom完成拷贝</span></span><br><span class="line">    destinChannel.transferFrom(sourceChannel, <span class="number">0</span>, sourceChannel.size());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭相关流</span></span><br><span class="line">    sourceChannel.close();</span><br><span class="line">    destinChannel.close();</span><br><span class="line">    fileInputStream.close();</span><br><span class="line">    fileOutputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>buffer数组完成读写操作</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Scattering: 将数据写入到buffer时，可以采用buffer数组，依次写入[分散]</span></span><br><span class="line"><span class="comment">// Gathering: 从buffer读取数据时，可以采用buffer数组，依次读取[聚集]</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScatteringAndGatheringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 使用ServerSocketChannel 和 SocketChannel 网络</span></span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        InetSocketAddress inetSocketAddress = <span class="keyword">new</span> InetSocketAddress(<span class="number">7000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绑定端口到Socket，并启动</span></span><br><span class="line">        serverSocketChannel.socket().bind(inetSocketAddress);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建buffer数组</span></span><br><span class="line">        ByteBuffer[] byteBuffers = <span class="keyword">new</span> ByteBuffer[<span class="number">2</span>];</span><br><span class="line">        byteBuffers[<span class="number">0</span>] = ByteBuffer.allocate(<span class="number">5</span>);</span><br><span class="line">        byteBuffers[<span class="number">1</span>] = ByteBuffer.allocate(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等客户端连接</span></span><br><span class="line">        SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">        <span class="keyword">int</span> messageLength = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环的读取</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> byteRead = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (byteRead &lt; messageLength) &#123;</span><br><span class="line">                <span class="keyword">long</span> l = socketChannel.read(byteBuffers);</span><br><span class="line">                byteRead  += l;</span><br><span class="line">                System.out.println(<span class="string">&quot;byteRead = &quot;</span> + byteRead);</span><br><span class="line">                Arrays.asList(byteBuffers)</span><br><span class="line">                        .stream()</span><br><span class="line">                        .map(buffer -&gt; <span class="string">&quot;position = &quot;</span></span><br><span class="line">                                + buffer.position()</span><br><span class="line">                                + <span class="string">&quot;, limit = &quot;</span></span><br><span class="line">                                + buffer.limit())</span><br><span class="line">                        .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将所有的buffer反转</span></span><br><span class="line">                Arrays.asList(byteBuffers).forEach(buffer -&gt; buffer.flip());</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将数据读出显示到客户端</span></span><br><span class="line">                <span class="keyword">long</span> byteWrite = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (byteWrite &lt; messageLength) &#123;</span><br><span class="line">                    socketChannel.write(byteBuffers);</span><br><span class="line">                    byteWrite += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将所欲的buffer进行clear</span></span><br><span class="line">                Arrays.asList(byteBuffers).forEach(buffer -&gt; &#123;</span><br><span class="line">                    buffer.clear();</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                System.out.println(</span><br><span class="line">                                <span class="string">&quot;byteRead = &quot;</span> + byteRead</span><br><span class="line">                                + <span class="string">&quot;, byteWrite = &quot;</span> + byteWrite</span><br><span class="line">                                + <span class="string">&quot;, messageLength = &quot;</span> + messageLength);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-2-4-实例"><a href="#1-2-4-实例" class="headerlink" title="1.2.4 实例"></a>1.2.4 实例</h4><p><strong>群聊系统Demo</strong></p>
<p>编码步骤：</p>
<ol>
<li>当客户端连接时，会通过<code>ServerSocketChannel</code> 得到 SocketChannel</li>
<li>Selector 进行监听 select 方法, 返回有事件发生的通道的个数.</li>
<li>将socketChannel注册到Selector上, register(Selector sel, int ops), 一个selector上可以注册多个SocketChannel</li>
<li>注册后返回一个 SelectionKey, 会和该Selector 关联(集合)</li>
<li>进一步得到各个 SelectionKey (有事件发生)</li>
<li>在通过 SelectionKey 反向获取 SocketChannel , 方法 channel()</li>
<li>判断该Channel的事件类型，对不同事件进行不同的业务处理</li>
</ol>
<blockquote>
<p>NIOServer</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.nio.groupchat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/9/19 22:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(GroupChatServer.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServerSocketChannel listenChannel;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">3333</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GroupChatServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1、获取选择器</span></span><br><span class="line">            selector = Selector.open();</span><br><span class="line">            <span class="comment">// 2、获取通道</span></span><br><span class="line">            listenChannel = ServerSocketChannel.open();</span><br><span class="line">            <span class="comment">// 3、绑定端口</span></span><br><span class="line">            listenChannel.socket().bind(<span class="keyword">new</span> InetSocketAddress(PORT));</span><br><span class="line">            <span class="comment">// 4、设置非阻塞</span></span><br><span class="line">            listenChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">// 5、将通道注册到选择器，注册操作：“接收”</span></span><br><span class="line">            listenChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.info(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 6、采用轮询的方式，查询获取“准备就绪”的注册过的操作</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> count = selector.select();</span><br><span class="line">                <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 7、获取当前选择器中所有注册的选择键</span></span><br><span class="line">                    Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class="line">                    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                        <span class="comment">// 8、获取“准备就绪”的时间</span></span><br><span class="line">                        SelectionKey selectionKey = iterator.next();</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 9、判断selectionKey是具体的什么事件</span></span><br><span class="line">                        <span class="comment">// 监听到accept事件</span></span><br><span class="line">                        <span class="keyword">if</span> (selectionKey.isAcceptable()) &#123;</span><br><span class="line">                            <span class="comment">// 10、若接受的事件是“接收就绪”操作，就获取客户端连接</span></span><br><span class="line">                            SocketChannel socketChannel = listenChannel.accept();</span><br><span class="line">                            <span class="comment">// 11、切换为非阻塞模式</span></span><br><span class="line">                            socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">                            <span class="comment">// 将该通道注册到选择器上</span></span><br><span class="line">                            socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">                            log.info(<span class="string">&quot;[&quot;</span> + socketChannel.getRemoteAddress().toString().substring(<span class="number">1</span>) + <span class="string">&quot;]上线&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 监听到read事件</span></span><br><span class="line">                        <span class="keyword">if</span> (selectionKey.isReadable()) &#123;</span><br><span class="line">                            <span class="comment">// 处理读 (专门方法)</span></span><br><span class="line">                            readMessage(selectionKey);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// end：移除选择键，防止重复操作</span></span><br><span class="line">                        iterator.remove();</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;等待····&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取客户端消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readMessage</span><span class="params">(SelectionKey selectionKey)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义一个 SocketChannel</span></span><br><span class="line">        SocketChannel socketChannel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 13、获取该选择器上的“读就绪”状态的通道</span></span><br><span class="line">            socketChannel = (SocketChannel) selectionKey.channel();</span><br><span class="line">            <span class="comment">// 14、读取数据</span></span><br><span class="line">            ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> count = socketChannel.read(buffer);</span><br><span class="line">            <span class="comment">// 根据count的h值做处理</span></span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 把缓存区的数据转成字符串</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(buffer.array());</span><br><span class="line">                <span class="comment">// 输出该消息</span></span><br><span class="line">                log.info(<span class="string">&quot;客户端-&quot;</span> + msg);</span><br><span class="line">                <span class="comment">// 向其他客户端转发消息(排除自己)，专门写一个方法来处理</span></span><br><span class="line">                sendMessageToOtherClients(msg, socketChannel);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;[&quot;</span> + socketChannel.getRemoteAddress().toString().substring(<span class="number">1</span>) + <span class="string">&quot;]离线&quot;</span>);</span><br><span class="line">                <span class="comment">// 取消注册</span></span><br><span class="line">                selectionKey.cancel();</span><br><span class="line">                <span class="comment">// 关闭通道</span></span><br><span class="line">                socketChannel.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioException) &#123;</span><br><span class="line">                log.error(e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转发消息给其他客户</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMessageToOtherClients</span><span class="params">(String msg, SocketChannel self)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;服务器转发消息&quot;</span>);</span><br><span class="line">        <span class="comment">// 遍历所有注册到 selector 上的SocketChannel，并排除self</span></span><br><span class="line">        <span class="keyword">for</span> (SelectionKey key : selector.keys()) &#123;</span><br><span class="line">            <span class="comment">// 通过 key 取出 对应的 SocketChannel</span></span><br><span class="line">            Channel targetChannel = key.channel();</span><br><span class="line">            <span class="comment">// 排除自己</span></span><br><span class="line">            <span class="keyword">if</span> (targetChannel <span class="keyword">instanceof</span> SocketChannel &amp;&amp; targetChannel != self) &#123;</span><br><span class="line">                <span class="comment">// 转型</span></span><br><span class="line">                SocketChannel dest = (SocketChannel) targetChannel;</span><br><span class="line">                <span class="comment">// 将msg存储到buffer</span></span><br><span class="line">                ByteBuffer byteBuffer = ByteBuffer.wrap(msg.getBytes());</span><br><span class="line">                <span class="comment">// 将buffer的数据写入通道</span></span><br><span class="line">                dest.write(byteBuffer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建服务器对象</span></span><br><span class="line">        GroupChatServer groupChatServer = <span class="keyword">new</span> GroupChatServer();</span><br><span class="line">        groupChatServer.listen();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>NIOClient</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.nio.groupchat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/9/20 0:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(GroupChatClient.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String HOST = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>    PORT = <span class="number">3333</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SocketChannel socketChannel;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GroupChatClient</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        selector = Selector.open();</span><br><span class="line">        <span class="comment">// 连接服务器</span></span><br><span class="line">        socketChannel = socketChannel.open(<span class="keyword">new</span> InetSocketAddress(HOST, PORT));</span><br><span class="line">        <span class="comment">// 设置非阻塞</span></span><br><span class="line">        socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 将socketChannel注册到selector</span></span><br><span class="line">        socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">        <span class="comment">// 得到username</span></span><br><span class="line">        username = socketChannel.getLocalAddress().toString().substring(<span class="number">1</span>);</span><br><span class="line">        log.info(<span class="string">&quot;[&quot;</span> + username + <span class="string">&quot;]已就绪···&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向服务器发送消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        msg = username + <span class="string">&quot;: &quot;</span> + msg;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socketChannel.write(ByteBuffer.wrap(msg.getBytes()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从服务器回复的消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> readChannels = selector.select();</span><br><span class="line">            <span class="keyword">if</span> (readChannels &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class="line">                <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                    SelectionKey key = iterator.next();</span><br><span class="line">                    <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">                        <span class="comment">// 得到相关的通道</span></span><br><span class="line">                        SocketChannel socketChannel = (SocketChannel) key.channel();</span><br><span class="line">                        <span class="comment">// 得到一个buffer</span></span><br><span class="line">                        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                        <span class="comment">// 读取</span></span><br><span class="line">                        socketChannel.read(buffer);</span><br><span class="line">                        <span class="comment">// 把读到的缓冲区的数据转成字符串</span></span><br><span class="line">                        String msg = <span class="keyword">new</span> String(buffer.array());</span><br><span class="line">                        log.info(msg);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 删除当前 SelectionKey</span></span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//log.error(&quot;无可用的通道···&quot;);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 启动客户端</span></span><br><span class="line">        GroupChatClient chatClient = <span class="keyword">new</span> GroupChatClient();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动一个线程，每隔3秒，读取从服务器</span></span><br><span class="line">        <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    chatClient.readMessage();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.currentThread().sleep(<span class="number">3000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        System.err.println(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送数据给服务器</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">            String s = scanner.nextLine();</span><br><span class="line">            chatClient.sendMessage(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="1-2-5-零拷贝"><a href="#1-2-5-零拷贝" class="headerlink" title="1.2.5 零拷贝"></a>1.2.5 零拷贝</h4><blockquote>
<p>说明</p>
</blockquote>
<ul>
<li><p>零拷贝，是从OS(操作系统)的角度来说的。因为内核缓冲区之间，没有数据是重复的</p>
</li>
<li><p>零拷贝不仅仅带来更少的数据复制，还能带来其他的性能优势，更少的CPU缓存伪共享以及无CPU校验和计算</p>
</li>
</ul>
<blockquote>
<p>mmap</p>
</blockquote>
<ul>
<li>mmap通过内存映射，将文件映射到内核缓冲区，同时，用户空间可以共享内核空间的数据。这样，在进行网络传输时，就可以减少内核空间到用户空间的拷贝次数</li>
</ul>
<blockquote>
<p>mmap和sendFile的区别</p>
</blockquote>
<ul>
<li>mmp适合小数据量读写，sendFile适合大文件传输</li>
<li>mmap需要4次上下文切换，3次数据拷贝；sendFile需要3次上下文切换，最少2次数据拷贝</li>
<li>sendFile可以利用DMA(direct memory access: 直接内存拷贝)方式，减少CPU拷贝，mmap则不能(必须从内核拷贝到Socket缓冲区)</li>
</ul>
<h2 id="2-概述"><a href="#2-概述" class="headerlink" title="2. 概述"></a>2. 概述</h2><p>官网: <a href="https://netty.io/">Netty.io</a></p>
<h3 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h3><p>Netty是一个异步事件驱动的网络应用程序框架，用于快速开发可维护的高性能协议服务器和客户端。</p>
<h3 id="1-2-设计"><a href="#1-2-设计" class="headerlink" title="1.2 设计"></a>1.2 设计</h3><ul>
<li>适用于各种传输类型的统一API-阻塞和非阻塞套接字</li>
<li>基于灵活且可扩展的事件模型，可将关注点明确分离</li>
<li>高度可定制的线程模型-单线程，一个或多个线程池，例如SEDA</li>
<li>真正的无连接数据报套接字支持（从3.1开始）</li>
</ul>
<h3 id="1-3-性能"><a href="#1-3-性能" class="headerlink" title="1.3 性能"></a>1.3 性能</h3><ul>
<li>更高的吞吐量，更低的延迟</li>
<li>减少资源消耗</li>
<li>减少不必要的内存复制</li>
</ul>
<h3 id="1-4-架构"><a href="#1-4-架构" class="headerlink" title="1.4 架构"></a>1.4 架构</h3><img src="/2020/10/01/Netty/image-20200921092848809.png" class="" title="image-20200921092848809">



<h2 id="3-Reactor"><a href="#3-Reactor" class="headerlink" title="3. Reactor"></a>3. Reactor</h2><h3 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h3><blockquote>
<p>反应器模式  |  分发者模式  |  通知者模式</p>
</blockquote>
<ul>
<li>基于I/O复用模型: 多个连接共用一个阻塞对象，应用程序只需要再一个阻塞对象等待，无需阻塞等待所有连接。当某个连接有新的数据可以处理时，操作系统通知应用程序，线程从阻塞状态返回，开始进行业务处理</li>
<li>基于线程池复用线程资源: 不必再为每个连接创建线程，键连接完成后的业务处理热舞分配给线程进行处理，一个线程可以处理多个连接的业务</li>
</ul>
<h3 id="2-2-组成"><a href="#2-2-组成" class="headerlink" title="2.2 组成"></a>2.2 组成</h3><ul>
<li>Reactor: Reactor在一个单独的线程中运行，负责监听和分发事件，分发给适当的处理程序来对IO事件做出反应。</li>
<li>Handlers: 处理程序执行I/O事件要完成的实际事件。Reactor通过调度适当的处理程序来响应I/O事件，处理程序执行非阻塞操作。</li>
</ul>
<h3 id="2-3-分类"><a href="#2-3-分类" class="headerlink" title="2.3 分类"></a>2.3 分类</h3><ul>
<li>单Reactor单线程        ━━━━━▶    前台接待员和服务员是同一个人，全程为顾客服务</li>
<li>单Reactor多线程        ━━━━━▶    1个前台接待员，多个服务员，接待员只负责接待</li>
<li>主从Reactor多线程    ━━━━━▶    多个前台接待员，多个服务生</li>
</ul>
<h4 id="2-2-1-单Reactor单线程"><a href="#2-2-1-单Reactor单线程" class="headerlink" title="2.2.1 单Reactor单线程"></a>2.2.1 单Reactor单线程</h4><blockquote>
<p>图示</p>
</blockquote>
<img src="/2020/10/01/Netty/image-20200921181936951.png" class="" title="image-20200921181936951">

<blockquote>
<p>分析</p>
</blockquote>
<ol>
<li>优点：模型简单，没有多线程、进程通信、竞争的问题，全部都在一个线程中完成</li>
<li>缺点：性能问题，只有一个线程，无法发挥多核CPU的性能。<code>Handler</code>在处理某个连接上的业务时，整个进程无法处理其他连接事件，很容易导致性能瓶颈</li>
<li>缺点：可靠性问题，线程意外终止，或者进入死循环，会导致整个系统通信模块不可用，不能接收和处理外部消息，造成节点故障</li>
<li>使用场景：客户端的数量有限，业务处理非常快速</li>
</ol>
<h4 id="2-2-2-单Reactor多线程"><a href="#2-2-2-单Reactor多线程" class="headerlink" title="2.2.2 单Reactor多线程"></a>2.2.2 单Reactor多线程</h4><blockquote>
<p>图示</p>
</blockquote>
<img src="/2020/10/01/Netty/image-20200921182914960.png" class="" title="image-20200921182914960">

<blockquote>
<p>方案说明</p>
</blockquote>
<ol>
<li><code>Reactor</code>对象通过<code>select</code>监控客户端请求事件，收到事件后，通过<code>dispatch</code>进行分发</li>
<li>如果建立连接请求，则由<code>Acceptor</code>通过<code>accept</code>处理连接请求，然后从黄健一个Handler对象处理完成连接后的各种事件</li>
<li>如果不是连接请求，则由<code>Reactor</code>分发调用连接对应的<code>handler</code>读取数据后，会分发给后面的<code>Worker</code>线程池的某个线程处理业务</li>
<li><code>Handler</code>只负责响应事件，不做具体的业务处理，通过<code>read</code>读取数据后，会分发给后面的<code>worker</code>线程池的某个线程处理业务</li>
<li><code>Worker</code>线程池会分配独立线程完成真正的业务，并将结果返回给<code>Handler</code></li>
<li><code>Handler</code>收到响应后，通过<code>send</code>将结果返回给<code>Client</code></li>
</ol>
<blockquote>
<p>分析</p>
</blockquote>
<ol>
<li>优点：可以充分的利用多核<code>CPU</code>的处理能力</li>
<li>缺点：多线程数据共享和访问比较复杂，<code>Reactor</code>处理所有的事件的监听和响应，在单线程运行，在高并发场景容易成为性能瓶颈</li>
</ol>
<h4 id="2-2-3-主从Reactor多线程"><a href="#2-2-3-主从Reactor多线程" class="headerlink" title="2.2.3 主从Reactor多线程"></a>2.2.3 主从Reactor多线程</h4><blockquote>
<p>图示</p>
</blockquote>
<img src="/2020/10/01/Netty/image-20200921191731035.png" class="" title="image-20200921191731035">

<blockquote>
<p>方案说明</p>
</blockquote>
<ol>
<li><code>Reactor</code>主线程<code>MainReactor</code>对象通过<code>select</code>监听连接事件，收到事件后，通过<code>Acceptor</code>处理连接事件</li>
<li>当<code>Acceptor</code>处理连接事件后，<code>MainReactor</code>将连接分配给<code>SubReactor</code></li>
<li><code>SubReactor</code>将连接加入到连接队列进行监听，并创建<code>Handler</code>进行各种事件处理</li>
<li>当有新事件发生时，<code>SubReactor</code>就会调用对应的Handler处理</li>
<li><code>Worker</code>线程池分配独立的<code>Worker</code>线程进行业务处理，并返回结果</li>
<li><code>Handler</code>收到响应的结果后，再通过<code>send</code>将结果返回给<code>Client</code></li>
<li><code>Reactor</code>主线程可以对于多个<code>Reactor</code>子线程，即<code>MainReactor</code>，可以关联多个<code>SubReactor</code></li>
</ol>
<blockquote>
<p>分析</p>
</blockquote>
<ol>
<li><p>优点：父线程与子线程的职责明确，父线程只需要接收新连接，子线程完成后续的业务处理</p>
</li>
<li><p>优点：父线程与子线程的数据交互简单，<code>Reactor</code>主线程只需要把新连接传给子线程，子线程无需返回数据</p>
</li>
<li><p>缺点：编程复杂度较高</p>
</li>
</ol>
<h3 id="2-4-优点"><a href="#2-4-优点" class="headerlink" title="2.4 优点"></a>2.4 优点</h3><ul>
<li>响应快，不必为单个同步时间所阻塞，虽然<code>Reactor</code>本身依然是同步的</li>
<li>可以最大程度的比曼复杂的多线程及同步问题，并且避免了多线程/进程的切换开销</li>
<li>扩展性好，可以方便的通过增加<code>Reactor</code>实例个数来充分利用CPU资源</li>
<li>复用性好，<code>Reactor</code>模型本身与具体事件处理逻辑无关，具有很高的复用性</li>
</ul>
<h2 id="4-架构"><a href="#4-架构" class="headerlink" title="4. 架构"></a>4. 架构</h2><h3 id="3-1-图示"><a href="#3-1-图示" class="headerlink" title="3.1 图示"></a>3.1 图示</h3><img src="/2020/10/01/Netty/image-20200921204851799.png" class="" title="image-20200921204851799">

<h3 id="3-2-说明"><a href="#3-2-说明" class="headerlink" title="3.2 说明"></a>3.2 说明</h3><ol>
<li><code>Netty</code>抽象出两组线程池<code>BossGroup</code>专门负责接收客户端的连接，<code>WorkerGroup</code>专门负责网络的读写</li>
<li><code>BossGroup</code>和<code>WorkerGroup</code>类型的本质都是<code>NioEventLoopGroup</code></li>
<li><code>NioEventLoopGroup</code>相当于一个事件循环组，这个组中含有多个事件循环，每一个事件循环是<code>NioEventLoop</code></li>
<li><code>NioEventLoop</code>表示一个不断循环的执行处理任务的线程，每个<code>NioEventLoop</code>都有一个<code>selector</code>，用于监听绑定在其上的socket的网络通讯</li>
<li><code>NioEventLoopGroup</code>可以有多个线程，即可以含有多个<code>NioEventLoop</code></li>
<li>每个<code>Boss NioEventLoop</code>循环执行的步骤有三步:<ol>
<li>轮询<code>accept</code>事件</li>
<li>处理<code>accept</code>事件，与<code>client</code>建立连接，生成<code>NioSocketChannel</code>，并将其注册到某个<code>Worker NioEventLoop</code>上的<code>selector</code></li>
<li>处理任务队列的任务，即<code>runAllTasks</code></li>
</ol>
</li>
<li>每个<code>Worker NIOEventLoop</code>循环执行的步骤<ol>
<li>轮询<code>read</code>、<code>write</code>事件</li>
<li>处理i/o事件，即<code>read</code>、<code>write</code>事件，在对应<code>NioSocketChannel</code>处理</li>
<li>处理任务队列的任务，即<code>runAllTasks</code></li>
</ol>
</li>
</ol>
<h3 id="3-3-代码示例"><a href="#3-3-代码示例" class="headerlink" title="3.3 代码示例"></a>3.3 代码示例</h3><blockquote>
<p>NettyServer.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.*;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/9/21 21:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 创建BossGroup 和 WorkerGroup</span></span><br><span class="line"><span class="comment">         * 说明：</span></span><br><span class="line"><span class="comment">         * 1、创建两个线程组：bossGroup 和 workerGroup</span></span><br><span class="line"><span class="comment">         * 2、bossGroup处理连接请求</span></span><br><span class="line"><span class="comment">         * 3、workerGroup处理和客户端的业务</span></span><br><span class="line"><span class="comment">         * 4、两个都是无限循环</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        NioEventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建服务器端的启动对象，配置参数</span></span><br><span class="line">            ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用链式编程来进行设置</span></span><br><span class="line">            bootstrap.group(workerGroup, workerGroup)                         <span class="comment">// 设置两个线程组</span></span><br><span class="line">                    .channel(NioServerSocketChannel.class)                    <span class="comment">// 使用NioSocketChannel作为服务器的通道实现</span></span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>)              <span class="comment">// 设置线程队列得到连接个数</span></span><br><span class="line">                    .childOption(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>)      <span class="comment">// 设置保持活动连接状态</span></span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;   <span class="comment">// 创建一个通道测试对象</span></span><br><span class="line">                        <span class="comment">// 给Pipeline设置处理器</span></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            socketChannel.pipeline().addLast(<span class="keyword">new</span> NettyServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);  <span class="comment">// 给workerGroup的EventLoop对应的管道设置处理器</span></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;服务器已就绪···&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 绑定一个端口并且同步</span></span><br><span class="line">            <span class="comment">// 绑定端口并启动服务器</span></span><br><span class="line">            ChannelFuture channelFuture = bootstrap.bind(<span class="number">3333</span>).sync();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 对关闭通道进行监听</span></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>NettyHandler.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/9/21 22:20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：</span></span><br><span class="line"><span class="comment"> * 自定义一个Handler需要继承Netty规定好的某个HandlerAdapter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取数据事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx 上下文对象，含有管道pipline[处理数据]，通道channel[传输数据]，地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 客户端发送的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;server ctx = &quot;</span> + ctx);</span><br><span class="line">        <span class="comment">// 将msg转成ByteBuffer</span></span><br><span class="line">        ByteBuf byteBuf = (ByteBuf) msg;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端发送消息：&quot;</span> + byteBuf.toString(CharsetUtil.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端地址：&quot;</span> + ctx.channel().remoteAddress());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据读取完毕</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 将数据写入到缓存，并刷新</span></span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;Hello, 客户端~&quot;</span>, CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(cause.getMessage());</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>NettyClient.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/9/21 22:20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：</span></span><br><span class="line"><span class="comment"> * 自定义一个Handler需要继承Netty规定好的某个HandlerAdapter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取数据事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx 上下文对象，含有管道pipline[处理数据]，通道channel[传输数据]，地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 客户端发送的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;server ctx = &quot;</span> + ctx);</span><br><span class="line">        <span class="comment">// 将msg转成ByteBuffer</span></span><br><span class="line">        ByteBuf byteBuf = (ByteBuf) msg;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端发送消息：&quot;</span> + byteBuf.toString(CharsetUtil.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端地址：&quot;</span> + ctx.channel().remoteAddress());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据读取完毕</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 将数据写入到缓存，并刷新</span></span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;Hello, 客户端~&quot;</span>, CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(cause.getMessage());</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>NettyClientHandler.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/9/22 19:09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通道就绪-&gt;触发</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;client &quot;</span> +  ctx);</span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;Hello, server~喵&quot;</span>, CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有读取事件时-&gt;触发</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteBuf byteBuf = (ByteBuf) msg;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器回复消息：&quot;</span> + byteBuf.toString(CharsetUtil.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器的地址：&quot;</span> + ctx.channel().remoteAddress());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(cause.getMessage());</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-4-任务队列"><a href="#3-4-任务队列" class="headerlink" title="3.4 任务队列"></a>3.4 任务队列</h3><p>任务队列中的<code>Task</code>有三种典型使用场景</p>
<ul>
<li>用户程序自定义的普通任务</li>
<li>用户自定义定时任务</li>
<li>非当前<code>Reactor</code>线程调用<code>Channel</code>的各种方法</li>
</ul>
<h3 id="3-5-异步模型"><a href="#3-5-异步模型" class="headerlink" title="3.5 异步模型"></a>3.5 异步模型</h3><h4 id="3-5-1-基本介绍"><a href="#3-5-1-基本介绍" class="headerlink" title="3.5.1 基本介绍"></a>3.5.1 基本介绍</h4><ol>
<li>异步的概念和同步相对。当一个异步过程调用发出后，调用者不能立刻得到结果。实际处理这个调用的组件在完成后，通过状态、通知和回调来通知调用者</li>
<li><code>Netty</code>中的I/O操作是异步的，包括<code>Bind</code>、<code>Write</code>、<code>Connect</code>等操作会简单的返回一个<code>ChannelFuture</code></li>
<li>调用者并不能理科获得结果，而是通过Future-Listener机制，用户可以方便的主动获取或者通过通知机制获得IO操作结果</li>
<li><code>Netty</code>的异步模型是建立在<code>future</code>和<code>callback</code>之上的。<code>callback</code>就是回调。重点是<code>future</code>，它的核心思想是：结社一个方法<code>fun</code>，计算过程可能非常耗时，等待<code>fun</code>返回显然不合适。那么可以在调用<code>fun</code>的时候立马返回一个<code>future</code>，后续可以通过<code>future</code>去监控方法<code>fun</code>的处理过程</li>
</ol>
<h4 id="3-5-2-Future说明"><a href="#3-5-2-Future说明" class="headerlink" title="3.5.2 Future说明"></a>3.5.2 Future说明</h4><ol>
<li><p>表示异步的执行结果，可以通过它提供的方法来检测执行是否完成</p>
</li>
<li><p><code>ChannelFuture</code>是一个接口: public interface ChannelFuture extends Future<Void></p>
<p>我们可以添加监听器，当监听的事件发生时，就会通知到监听器</p>
</li>
</ol>
<h4 id="3-5-3-Future-Listener机制"><a href="#3-5-3-Future-Listener机制" class="headerlink" title="3.5.3 Future-Listener机制"></a>3.5.3 Future-Listener机制</h4><ol>
<li><p>当<code>future</code>对象刚刚创建时，处于非完成状态，调用者可以通过返回的<code>ChannelFuture</code>来获取操作执行的状态，注册监听函数来执行完成后的操作</p>
</li>
<li><p>常见操作：</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">isDone()</td>
<td align="center">判断当前操作是否完成</td>
</tr>
<tr>
<td align="center">isSuccess()</td>
<td align="center">判断已完成的当前操作是否成功</td>
</tr>
<tr>
<td align="center">getCause()</td>
<td align="center">获取已完成的当前操作失败的原因</td>
</tr>
<tr>
<td align="center">isCancelled()</td>
<td align="center">判断已完成的当前操作是否被取消</td>
</tr>
<tr>
<td align="center">addListener()</td>
<td align="center">注册监听器，当操作已完成(isDone返回完成)，将会通知指定的监听器；如果Future对象已完成，则通知指定的监听器</td>
</tr>
</tbody></table>
</li>
</ol>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 绑定一个端口并且同步</span></span><br><span class="line"><span class="comment">// 绑定端口并启动服务器</span></span><br><span class="line">ChannelFuture CF = bootstrap.bind(<span class="number">3333</span>).sync();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给CF注册监听器</span></span><br><span class="line">CF.addListener(<span class="keyword">new</span> ChannelFutureListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(ChannelFuture channelFuture)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CF.isSuccess()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;服务器监听端口[3333]成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;服务器监听端口[3333]失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="3-6-Http服务"><a href="#3-6-Http服务" class="headerlink" title="3.6 Http服务"></a>3.6 Http服务</h3><blockquote>
<p>TestServer.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/9/26 10:34</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            serverBootstrap.group(bossGroup, workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> TestServerInitializer());</span><br><span class="line"></span><br><span class="line">            ChannelFuture CF = serverBootstrap.bind(<span class="number">3333</span>).sync();</span><br><span class="line"></span><br><span class="line">            CF.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>TestServerInitializer.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelPipeline;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.http.HttpServerCodec;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/9/26 10:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServerInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 向管道加入处理器</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到管道</span></span><br><span class="line">        ChannelPipeline pipeline = socketChannel.pipeline();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加入一个Netty提供的HttpServerCodeC codec =&gt; [coder - decoder]</span></span><br><span class="line">        <span class="comment">// 1、HttpServerCodeC: 处理http的编&amp;解码器</span></span><br><span class="line">        pipeline.addLast(<span class="string">&quot;MyHttpServerCodec&quot;</span>, <span class="keyword">new</span> HttpServerCodec());</span><br><span class="line">        <span class="comment">// 2、增加一个自定义handler</span></span><br><span class="line">        pipeline.addLast(<span class="string">&quot;MyTestServerHandler&quot;</span>, <span class="keyword">new</span> TestHttpServerHandler());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>TestHttpServerHandler.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelPipeline;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.http.HttpServerCodec;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/9/26 10:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServerInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 向管道加入处理器</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到管道</span></span><br><span class="line">        ChannelPipeline pipeline = socketChannel.pipeline();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加入一个Netty提供的HttpServerCodeC codec =&gt; [coder - decoder]</span></span><br><span class="line">        <span class="comment">// 1、HttpServerCodeC: 处理http的编&amp;解码器</span></span><br><span class="line">        pipeline.addLast(<span class="string">&quot;MyHttpServerCodec&quot;</span>, <span class="keyword">new</span> HttpServerCodec());</span><br><span class="line">        <span class="comment">// 2、增加一个自定义handler</span></span><br><span class="line">        pipeline.addLast(<span class="string">&quot;MyTestServerHandler&quot;</span>, <span class="keyword">new</span> TestHttpServerHandler());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="5-核心"><a href="#5-核心" class="headerlink" title="5. 核心"></a>5. 核心</h2><h3 id="4-1-BootStrap、ServerBootStrap"><a href="#4-1-BootStrap、ServerBootStrap" class="headerlink" title="4.1 BootStrap、ServerBootStrap"></a>4.1 BootStrap、ServerBootStrap</h3><blockquote>
<p>说明</p>
</blockquote>
<p><code>BootStrap</code>意思是引导程序，一个<code>Netty</code>应用通常由一个<code>BootStrap</code>开始，主要作用是配置整个<code>Netty</code>程序，串联各个组件，<code>Netty</code>中<code>BootStrap</code>类是客户端程序的启动引导类，<code>ServerBootStrap</code>是服务器端启动引导类</p>
<blockquote>
<p>常用方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法名称</th>
<th align="center">方法介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">public ServerBootStrap group(EventLoopGroup parentGroup, EventLoopGroup childGroup)</td>
<td align="center">该方法用于服务器端，用来设置两个EventLoop</td>
</tr>
<tr>
<td align="center">public B group(EventLoopGroup group)</td>
<td align="center">该方法用于客户端，用来设置一个EventLoop</td>
</tr>
<tr>
<td align="center">public B channel(Class&lt;? extends C&gt; channelClass)</td>
<td align="center">该方法用来设置一个服务器端的通道实现</td>
</tr>
<tr>
<td align="center">public <T> B option(ChannelOption<T> option, T value)</td>
<td align="center">用来给ServerChannel添加配置</td>
</tr>
<tr>
<td align="center">public  ServerBootstrap childOption(ChannelOption childOption, T value)</td>
<td align="center">用来给接收到的通道添加配置</td>
</tr>
<tr>
<td align="center">public ServerBootstrap childHandler(ChannelHandler childHandler)</td>
<td align="center">该方法用来设置业务处理类(自定义的handler)</td>
</tr>
<tr>
<td align="center">public ChannelFuture bind(int inetPort)</td>
<td align="center">该方法用于服务器端，用来设置占用的端口号</td>
</tr>
<tr>
<td align="center">public ChannelFuture connect(String inetHost, int inetPort)</td>
<td align="center">该方法用于客户端，用来连接服务器</td>
</tr>
</tbody></table>
<h3 id="4-2-Future、ChannelFuture"><a href="#4-2-Future、ChannelFuture" class="headerlink" title="4.2 Future、ChannelFuture"></a>4.2 Future、ChannelFuture</h3><blockquote>
<p>说明</p>
</blockquote>
<p><code>Netty</code>中所有的IO操作都是异步的，不能立刻得知消息是否被正确处理。但是可以过一会等它执行完或者直接注册一个监听，具体的实现就是通过<code>Future</code>和<code>ChannelFuture</code>，它们可以注册一个监听，当操作执行成功或失败时监听会自动触发注册的监听事件</p>
<blockquote>
<p>常用方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法名称</th>
<th align="center">方法介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Channel channel()</td>
<td align="center">返回当前正在进行IO操作的通道</td>
</tr>
<tr>
<td align="center">ChannelFuture sync()</td>
<td align="center">等待异步操作执行完毕，相当于将阻塞在当前</td>
</tr>
</tbody></table>
<h3 id="4-3-Channel"><a href="#4-3-Channel" class="headerlink" title="4.3 Channel"></a>4.3 Channel</h3><blockquote>
<p>说明</p>
</blockquote>
<ul>
<li><code>Netty</code>网络通信的组件，能够用于执行网络I/O操作</li>
<li>通过<code>Channel</code>可获得当前网络连接的通道的状态</li>
<li>通过<code>Channel</code>可获得网络连接的配置参数</li>
<li><code>Channel</code>通过异步的网络I/O操作(比如：建立连接、读写和绑定端口)，异步调用意味着任何I/O调用都将立即返回，并且不保证在调用结束时所请求的I/O操作已完成</li>
<li>调用立即返回一个<code>ChannelFuture</code>实例，通过注册器到<code>ChannelFuture</code>上，可以I/O操作成功、失败或取消时回调通知调用方 </li>
<li>支持关联I/O操作与对应的处理程序</li>
<li>不同协议、不同的阻塞类型的连接都有不同的<code>Channel</code>类型与之对应</li>
</ul>
<blockquote>
<p>常见Channel类型</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">NioSocketChannel</td>
<td align="center">异步的客户端TCP Socket连接</td>
</tr>
<tr>
<td align="center">NioServerSocketChannel</td>
<td align="center">异步的服务器端TCP Socket连接</td>
</tr>
<tr>
<td align="center">NioDatagramChannel</td>
<td align="center">异步的UDP连接</td>
</tr>
<tr>
<td align="center">NioSctpChannel</td>
<td align="center">异步的客户端Sctp连接</td>
</tr>
<tr>
<td align="center">NioSctpServerChannel</td>
<td align="center">异步的Sctp服务器端连接，这些通道涵盖了UDP和TCP网络I/O以及文件I/O</td>
</tr>
</tbody></table>
<h3 id="4-4-Selector"><a href="#4-4-Selector" class="headerlink" title="4.4 Selector"></a>4.4 Selector</h3><blockquote>
<p>说明</p>
</blockquote>
<ul>
<li><code>Netty</code>基于<code>Selector</code>对象实现I/O多路复用，通过<code>Selector</code>一个线程可以监听多个连接的<code>Channel</code>事件</li>
<li>当向一个<code>Selector</code>中注册<code>Channel</code>后，<code>Selector</code>内部的机制就可以自动不断地查询(<code>Select</code>)这些注册的<code>Channel</code>是否有已就绪的I/O事件(比如：可读、可写、网络连接完成等)，这样程序就可以很简单地使用一个线程高效地管理多个<code>Channel</code></li>
<li>同时，<code>Netty</code>中对<code>Selector</code>中的<code>selectedKey</code>集合进行了替换，它替换成了一个它自己实现的一个<code>set</code>集合，这样效率更高</li>
</ul>
<h3 id="4-5-ChannelHandler及其实现类"><a href="#4-5-ChannelHandler及其实现类" class="headerlink" title="4.5 ChannelHandler及其实现类"></a>4.5 ChannelHandler及其实现类</h3><blockquote>
<p>说明</p>
</blockquote>
<ul>
<li><p><code>ChannelHandler</code>是一个接口，处理I/O事件或拦截I/O操作，并将其转发到<code>ChannelPipeline</code>(业务处理链)中的下一个处理程序</p>
</li>
<li><p><code>ChannelHandler</code>本身并没有提供很多方法，因为这个接口有许多的方法需要实现，方便使用期间，可以继承它的子类</p>
</li>
<li><p>我们经常需要自定义一个<code>Handler</code>类取继承<code>ChannelInboundHandlerAdapter</code>，然后通过重写相应方法实现业务逻辑</p>
<p>一般需要重写的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChannelInboundHandlerAdapter</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> <span class="keyword">implements</span> <span class="title">ChannelInboundHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通道注册事件</span></span><br><span class="line">    <span class="meta">@Skip</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRegistered</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.fireChannelRegistered();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通道取消注册事件</span></span><br><span class="line">    <span class="meta">@Skip</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelUnregistered</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.fireChannelUnregistered();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通道就绪事件</span></span><br><span class="line">    <span class="meta">@Skip</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.fireChannelActive();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通道断联事件</span></span><br><span class="line">    <span class="meta">@Skip</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.fireChannelInactive();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通道读取数据事件</span></span><br><span class="line">    <span class="meta">@Skip</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.fireChannelRead(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通道数据读取完毕事件</span></span><br><span class="line">    <span class="meta">@Skip</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.fireChannelReadComplete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用法事件触发</span></span><br><span class="line">    <span class="meta">@Skip</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.fireUserEventTriggered(evt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通道可写性更改事件</span></span><br><span class="line">    <span class="meta">@Skip</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelWritabilityChanged</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.fireChannelWritabilityChanged();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通道发生异常事件</span></span><br><span class="line">    <span class="meta">@Skip</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;deprecation&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.fireExceptionCaught(cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>ChannelInboundHandler</code>  用于处理入站I/O事件</li>
<li><code>ChannelOutboundHandler</code>  用于处理出战I/O事件</li>
</ul>
<blockquote>
<p>适配器</p>
</blockquote>
</li>
<li><p><code>ChannelInboundHandlerAdapter</code> 用于处理入站 I/O 事件</p>
</li>
<li><p><code>ChannelOutboundHandlerAdapter</code> 用于处理出站 I/O 操作</p>
</li>
<li><p><code>ChannelDuplexHandler</code> 用于处理入站和出站事件</p>
</li>
</ul>
<h3 id="4-6-Pipeline、Channel"><a href="#4-6-Pipeline、Channel" class="headerlink" title="4.6 Pipeline、Channel"></a>4.6 Pipeline、Channel</h3><blockquote>
<p>说明</p>
</blockquote>
<ul>
<li><p><code>ChannelPipeline</code>是一个Handler的集合，它负责处理和拦截<code>inbound</code>和<code>outbound</code>的事件和操作，相当于一个贯穿<code>Netty</code>的链（通俗的讲：<code>ChannelPipeline</code>是保存<code>ChannelHandler</code>的<code>list</code>，用于处理或拦截<code>Channel</code>的入站事件和出战操作）</p>
</li>
<li><p><code>ChanenelPipline</code>实现了一种高级形式的拦截过滤器模式，使用户可以完全控制事件的处理方式，以及<code>Channel</code>中各个的<code>ChannelHandler</code>如何相互交互</p>
</li>
<li><p>在<code>Netty</code>中每个<code>Channel</code>都有且仅有一个<code>ChannelPipeline</code>与之对应，他们的组成关系如下</p>
<img src="/2020/10/01/Netty/image-20201002192427279.png" class="" title="image-20201002192427279">
</li>
<li><p>一个<code>Channel</code>包含一个<code>ChannelPipeline</code>，而<code>ChannelPipeline</code>中又维护了一个由<code>ChannelHandlerContext</code>组成的双向链表，并且每个<code>ChannelHandlerContext</code>中又关联着一个<code>ChannelHandler</code></p>
</li>
<li><p>入站事件和出战事件在一个双向链表中，入站事件会从链表<code>head</code>往后传递到最后一个入站的handler，出站事件会从链表<code>tail</code>往前传递到最前一个出站的<code>handler</code>，两种类型的<code>handler</code>互不干扰</p>
</li>
</ul>
<blockquote>
<p>常用方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法名称</th>
<th align="center">方法介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ChannelPipeline addFirst(ChannelHandler… handlers)</td>
<td align="center">把一个业务处理类（handler）添加到链中的第一个位置</td>
</tr>
<tr>
<td align="center">ChannelPipeline addLast(ChannelHandler… handlers)</td>
<td align="center">把一个业务处理类（handler）添加到链中的最后一个位置</td>
</tr>
</tbody></table>
<h3 id="4-7-ChannelHandlerContext"><a href="#4-7-ChannelHandlerContext" class="headerlink" title="4.7 ChannelHandlerContext"></a>4.7 ChannelHandlerContext</h3><blockquote>
<p>说明</p>
</blockquote>
<ul>
<li>保存<code>Channel</code>相关的所有上下文信息，同时关联一个ChannelHandler对象</li>
<li>即<code>ChannelHandlerContext</code>中包含一个具体的事件处理器<code>ChannelHandler</code>，同时<code>ChannelHandlerContext</code>中也绑定了对应的<code>Pipeline</code>和<code>Channel</code>的信息，方便对<code>ChannelHandler</code>进行调用</li>
</ul>
<blockquote>
<p>常见方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法名称</th>
<th align="center">方法介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ChannelFuture close()</td>
<td align="center">关闭通道</td>
</tr>
<tr>
<td align="center">ChannelOutboundInvoker flush()</td>
<td align="center">刷新</td>
</tr>
<tr>
<td align="center">ChannelFuture writeAndFlush(Object msg)</td>
<td align="center">将数据写到ChannelPipeline中当前ChannelHandler的下一个ChannelHandler开始处理</td>
</tr>
</tbody></table>
<h3 id="4-8-ChannelOption"><a href="#4-8-ChannelOption" class="headerlink" title="4.8 ChannelOption"></a>4.8 ChannelOption</h3><blockquote>
<p>说明</p>
</blockquote>
<p><code>Netty</code>在创建<code>Channel</code>实例后，一般都需要设置<code>ChannelOption</code>参数</p>
<blockquote>
<p>参数如下：</p>
</blockquote>
<ul>
<li>ChannelOption.SO_BACKLOG:<ul>
<li>对应TCP/IP协议listen函数中的backlog参数，用来初始化服务器可连接队列大小</li>
<li>服务端处理客户端连接请求是顺序处理的，所以同一时间只能处理一个客户端连接。多个客户端来的时候，服务端将不能处理的客户端连接请求放在队列中等待处理，backlog参数指定了队列的大小</li>
</ul>
</li>
<li>ChannelOption.SO_KEEPALIVE:<ul>
<li>一直保持连接活动状态</li>
</ul>
</li>
</ul>
<h3 id="4-9-EventLoopGroup和其实现类NioEventLoopGroup"><a href="#4-9-EventLoopGroup和其实现类NioEventLoopGroup" class="headerlink" title="4.9 EventLoopGroup和其实现类NioEventLoopGroup"></a>4.9 EventLoopGroup和其实现类NioEventLoopGroup</h3><blockquote>
<p>说明</p>
</blockquote>
<ul>
<li><code>EventLoopGroup</code>是一组<code>EventLoop</code>的抽象，<code>Netty</code>为了更好的利用多核CPU资源，一般会有多个<code>EventLoop</code>同时工作，每个<code>EventLoop</code>维护者一个Selector实例。</li>
<li><code>EventLoopGroup</code>提供next接口，可以从组里面按照一定规则获取其中一个<code>EventLoop</code>来处理任务。在Netty服务器端编程中，我们一般都需要提供两个<code>EventLoopGroup</code>，<code>BossGroup</code>和<code>WorkerGroup</code></li>
<li>通常一个服务端口即一个<code>ServerSocketChannel</code>对应一个<code>Selector</code>和一个<code>EventLoop</code>线程。<code>BossEventLoop</code>负责接收客户端的连接并将<code>SocketChannel</code>交给<code>WorkerEventLoopGroup</code>来进行IO处理</li>
<li><code>BossEventLoopGroup</code>通常是一个单线程的<code>EventLoop</code>，<code>EventLoop</code>维护着一个注册了<code>ServerSocketChannel</code>的<code>Selector</code>实例<code>BossEventLoop</code>不断轮询<code>Selector</code>将连接事件分离出来</li>
<li>通常是OP_ACCEPT事件，然后将接收到的<code>SocketChannel</code>交给<code>WorkerEventLoopGroup</code></li>
<li><code>WorkerEventLoopGroup</code>会由<code>next</code>选择其中一个<code>EventLoop</code>来将这个<code>SocketChannel</code>注册到其维护的<code>Selector</code>并对其后续的IO事件进行处理</li>
</ul>
<blockquote>
<p>常用方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法名称</th>
<th align="center">方法介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">public NioEventLoopGroup()</td>
<td align="center">构造方法</td>
</tr>
<tr>
<td align="center">public Future&lt;?&gt; shutdownGracefully()</td>
<td align="center">断开连接，关闭线程</td>
</tr>
</tbody></table>
<h3 id="4-10-Unpooled"><a href="#4-10-Unpooled" class="headerlink" title="4.10 Unpooled"></a>4.10 Unpooled</h3><blockquote>
<p>说明</p>
</blockquote>
<p><code>Netty</code>提供一个专门用来操作缓冲区（即<code>Netty</code>的数据容器）的工具类</p>
<blockquote>
<p>常用方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法名称</th>
<th align="center">方法介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">public static ByteBuf copiedBuffer(CharSequence string, Charset charset)</td>
<td align="center">通过给定的数据和字符编码返回一个 ByteBuf 对象（类似于 NIO 中的 ByteBuffer 但有区别）</td>
</tr>
</tbody></table>
<h3 id="4-11-群聊系统"><a href="#4-11-群聊系统" class="headerlink" title="4.11 群聊系统"></a>4.11 群聊系统</h3><blockquote>
<p>要求</p>
</blockquote>
<ul>
<li>编写一个 Netty 群聊系统，实现服务器端和客户端之间的数据简单通讯（非阻塞）</li>
<li>实现多人群聊</li>
<li>服务器：可以监测用户上线，离线，并实现消息转发功能</li>
<li>客户端：通过channel 可以无阻塞发送消息给其它所有用户，同时可以接受其它用户发送的消息(由服务器转发得到)</li>
</ul>
<blockquote>
<p>GroupChatServer.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.groupChat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kag.nio.groupchat.GroupChatClient;</span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.*;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringEncoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/2 8:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GroupChatServer</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建两个线程组</span></span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line"></span><br><span class="line">        serverBootstrap.group(workerGroup, workerGroup)</span><br><span class="line">                .channel(NioServerSocketChannel.class)</span><br><span class="line">                .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>)</span><br><span class="line">                .childOption(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>)</span><br><span class="line">                .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="comment">// 获取pipeline</span></span><br><span class="line">                        ChannelPipeline pipeline = channel.pipeline();;</span><br><span class="line">                        <span class="comment">// 向pipeline加入解码器</span></span><br><span class="line">                        pipeline.addLast(<span class="string">&quot;decoder&quot;</span>, <span class="keyword">new</span> StringDecoder());</span><br><span class="line">                        <span class="comment">// 向pipeline加入编码器</span></span><br><span class="line">                        pipeline.addLast(<span class="string">&quot;encoder&quot;</span>, <span class="keyword">new</span> StringEncoder());</span><br><span class="line">                        <span class="comment">// 加入自己的业务处理handler</span></span><br><span class="line">                        pipeline.addLast(<span class="keyword">new</span> GroupChatServerHandler());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;▶-----Netty服务器启动-----◀&quot;</span>);</span><br><span class="line">            ChannelFuture channelFuture = serverBootstrap.bind(port).sync();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 监听关闭</span></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> GroupChatServer(<span class="number">3333</span>).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>GroupChatServerHandler.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.groupChat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.Channel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.group.ChannelGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.group.DefaultChannelGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.concurrent.EventExecutor;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.concurrent.GlobalEventExecutor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/2 8:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个channel组，管理所有的channel</span></span><br><span class="line">    <span class="comment">// GlobalEventExecutor.INSTANCE 是全局的时间执行器，是一个单例</span></span><br><span class="line">    EventExecutor executor;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ChannelGroup channelGroup = <span class="keyword">new</span> DefaultChannelGroup(GlobalEventExecutor.INSTANCE);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">now</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> simpleDateFormat.format(<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HandlerAdded</span></span><br><span class="line"><span class="comment">     * 表示连接建立，一旦连接，第一个被执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerAdded</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Channel channel = ctx.channel();</span><br><span class="line">        <span class="comment">// 将该客户加入聊天的信息推送给其他在线的客户</span></span><br><span class="line">        <span class="comment">// 该方法会将channelGroup中的所有channel遍历，并发送消息</span></span><br><span class="line">        channelGroup.writeAndFlush(now() + <span class="string">&quot; [客户端]&quot;</span> + channel.remoteAddress() + <span class="string">&quot;加入聊天\n&quot;</span>);</span><br><span class="line">        channelGroup.add(channel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HandlerRemoved</span></span><br><span class="line"><span class="comment">     * 表示断开连接，将XX客户离线信息推送给当前在线客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerRemoved</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Channel channel = ctx.channel();</span><br><span class="line">        channelGroup.writeAndFlush(now() + <span class="string">&quot; [客户端]&quot;</span> + channel.remoteAddress() + <span class="string">&quot;离开聊天\n&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Channel Group Size = &quot;</span> + channelGroup.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * channelActive</span></span><br><span class="line"><span class="comment">     * 表示channel处于活动状态，提示XX上线</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(now() + <span class="string">&quot; &quot;</span> + ctx.channel().remoteAddress() + <span class="string">&quot;上线&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * channelInactive</span></span><br><span class="line"><span class="comment">     * 表示channel处于非活动状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(now() + <span class="string">&quot; &quot;</span> + ctx.channel().remoteAddress() + <span class="string">&quot;离线&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ChannelRead0</span></span><br><span class="line"><span class="comment">     * 转发消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channelHandlerContext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext channelHandlerContext, String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Channel channel = channelHandlerContext.channel();</span><br><span class="line">        <span class="comment">// 遍历ChannelGroup</span></span><br><span class="line">        channelGroup.forEach(ch -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel != ch) <span class="comment">// 不是当前channel，直接转发</span></span><br><span class="line">                ch.writeAndFlush(now() + <span class="string">&quot; [客户]&quot;</span> + channel.remoteAddress() + <span class="string">&quot;：&quot;</span> + s + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="comment">// 当前channel是自己</span></span><br><span class="line">                ch.writeAndFlush(now() + <span class="string">&quot; [自己]: &quot;</span> + s + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.exceptionCaught(ctx, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>GroupChatClient.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.groupChat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.*;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.SocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/2 9:22</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String host;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GroupChatClient</span><span class="params">(String host, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap()</span><br><span class="line">                .group(group)</span><br><span class="line">                .channel(NioSocketChannel.class)</span><br><span class="line">                .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="comment">// 得到pipeline</span></span><br><span class="line">                        ChannelPipeline pipeline = channel.pipeline();</span><br><span class="line">                        <span class="comment">// 加入相关handler</span></span><br><span class="line">                        pipeline.addLast(<span class="string">&quot;decoder&quot;</span>, <span class="keyword">new</span> StringDecoder());</span><br><span class="line">                        pipeline.addLast(<span class="string">&quot;encoder&quot;</span>, <span class="keyword">new</span> StringEncoder());</span><br><span class="line">                        <span class="comment">// 加入自定义的handler</span></span><br><span class="line">                        pipeline.addLast(<span class="keyword">new</span> GroupChatClientHandler());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ChannelFuture channelFuture = bootstrap.connect(host, port).sync();</span><br><span class="line">            Channel channel = channelFuture.channel();</span><br><span class="line">            System.out.println(<span class="string">&quot;▶-----&quot;</span> + channel.localAddress().toString().substring(<span class="number">1</span>) + <span class="string">&quot;-----◀&quot;</span>);</span><br><span class="line">            <span class="comment">// 输入信息</span></span><br><span class="line">            Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">                String msg = scanner.nextLine();</span><br><span class="line">                <span class="comment">// 通过channel发送到服务器端</span></span><br><span class="line">                channel.writeAndFlush(msg + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            group.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">new</span> GroupChatClient(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">3333</span>).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>GroupChatClientHandler.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.groupChat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/2 10:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatClientHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext channelHandlerContext, String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(s.trim());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-12-心跳检测"><a href="#4-12-心跳检测" class="headerlink" title="4.12 心跳检测"></a>4.12 心跳检测</h3><blockquote>
<p>要求</p>
</blockquote>
<ul>
<li>当服务器超过3秒没有读操作时，就提示读空闲</li>
<li>当服务器超过5秒没有写操作时，就提示写空闲</li>
<li>当服务器超过7秒没有读或写时，就提示读写空闲</li>
</ul>
<blockquote>
<p>MyServer.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.heartbeat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelPipeline;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.logging.LogLevel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.logging.LoggingHandler;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.timeout.IdleStateHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/2 10:25</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        NioEventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        NioEventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            serverBootstrap.group(bossGroup, workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))  <span class="comment">//为BossGroup中的请求添加日志处理Handler</span></span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">                            <span class="comment">/**</span></span><br><span class="line"><span class="comment">                             * 加入一个 netty 提供的 IdleStateHandler</span></span><br><span class="line"><span class="comment">                             * 说明</span></span><br><span class="line"><span class="comment">                             * 1、IdleStateHandler 是 netty 提供的检测空闲状态的处理器</span></span><br><span class="line"><span class="comment">                             * 2、long readerIdleTime：表示多长时间没有读，就会发送一个心跳检测包检测是否还是连接的状态</span></span><br><span class="line"><span class="comment">                             * 3、long writerIdleTime：表示多长时间没有写，就会发送一个心跳检测包检测是否还是连接的状态</span></span><br><span class="line"><span class="comment">                             * 4、long allIdleTime：表示多长时间没有读写，就会发送一个心跳检测包检测是否还是连接的状态</span></span><br><span class="line"><span class="comment">                             * 5、当 IdleStateEvent 触发后，就会传递给管道的下一个 Handler，通过调用（触发）下一个Handler的 userEventTriggered，在该方法区处理这个事件。</span></span><br><span class="line"><span class="comment">                             */</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> IdleStateHandler(<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">                            <span class="comment">//加入一个对空闲检测进一步处理的Handler（自定义）</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> MyServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            <span class="comment">//启动服务器，设置为同步模式</span></span><br><span class="line">            ChannelFuture channelFuture = serverBootstrap.bind(<span class="number">3333</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>MyServerHandler.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.heartbeat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.timeout.IdleStateEvent;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/2 10:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx 上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> evt 事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (evt <span class="keyword">instanceof</span> IdleStateEvent) &#123;</span><br><span class="line">            <span class="comment">// 将evt向下转型</span></span><br><span class="line">            IdleStateEvent event = (IdleStateEvent) evt;</span><br><span class="line">            String eventType = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">switch</span> (event.state()) &#123;</span><br><span class="line">                <span class="keyword">case</span> READER_IDLE:</span><br><span class="line">                    eventType = <span class="string">&quot;读空闲&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> WRITER_IDLE:</span><br><span class="line">                    eventType = <span class="string">&quot;写空闲&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> ALL_IDLE:</span><br><span class="line">                    eventType = <span class="string">&quot;读写空闲&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(ctx.channel().remoteAddress() + <span class="string">&quot;——&gt;超时：&quot;</span> + eventType);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果发生空闲，直接关闭通道</span></span><br><span class="line"><span class="comment">//            ctx.channel().close();</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;服务器关闭通道···&quot;);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-13-简单总结"><a href="#4-13-简单总结" class="headerlink" title="4.13 简单总结"></a>4.13 简单总结</h3><blockquote>
<p>服务器</p>
</blockquote>
<ol>
<li>创建两个线程组，<code>bossGroup</code>和<code>workerGroup</code></li>
<li>创建服务器启动对象<code>ServerBootStrap</code></li>
<li>链式编程配置<code>ServerBootStrap</code>的参数<ol>
<li><code>group</code>：设置线程组<code>bossGroup</code>和<code>workerGroup</code></li>
<li><code>channel</code>：设置通道实现，一般选择<code>NioServerSocketChannel</code></li>
<li><code>option</code>：设置可连接线程队列以及大小，一般选择<code>SO_BACKLOG</code></li>
<li><code>childOption</code>：设置保持活动连接状态，选择<code>SO_KEEPALIVE</code></li>
<li><code>handler</code>：给<code>bossGroup</code>设置<code>Handler</code></li>
<li><code>childHandler</code>：给<code>workerGroup</code>设置<code>Hadnler</code></li>
</ol>
</li>
<li><code>ServerBootStrap</code>绑定端口，设置同步，并且监听通道关闭事件</li>
</ol>
<blockquote>
<p>客户端</p>
</blockquote>
<ol>
<li>创建一个线程组<code>group</code></li>
<li>创建客户端启动对象<code>BootStrap</code></li>
<li>链式编程配置<code>BootStrap</code>的参数<ol>
<li><code>group</code>：设置线程组<code>group</code></li>
<li><code>channel</code>：设置通道实现，一般选择<code>NioSocketChannel</code></li>
<li><code>handler</code>：设置<code>Handler</code></li>
</ol>
</li>
<li><code>BootStrap</code>绑定端口，设置同步，并且监听通道关闭事件</li>
</ol>
<blockquote>
<p>常见Handler</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Handler</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">SimpleChannelInboundHandler</td>
<td align="center">处理通信(服务器最常用)</td>
</tr>
<tr>
<td align="center">IdleStateHandler</td>
<td align="center">检测空闲状态(心跳检测)</td>
</tr>
<tr>
<td align="center">WebSocketServerProtocolHandler</td>
<td align="center">将http协议升级ws协议，保持长连接</td>
</tr>
</tbody></table>
<blockquote>
<p>Handler常用方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Method</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">handlerAdded(ChannelHandlerContext ctx)</td>
<td align="center">连接建立，一旦建立连接，第一个被执行的方法</td>
</tr>
<tr>
<td align="center">handlerRemoved(ChannelHandlerContext ctx)</td>
<td align="center">连接断开，将XX客户离线信息推送给当前在线客户</td>
</tr>
<tr>
<td align="center">channelActive(ChannelHandlerContext ctx)</td>
<td align="center">表示channel处于活动状态，提示XX上线</td>
</tr>
<tr>
<td align="center">channelInactive(ChannelHandlerContext ctx)</td>
<td align="center">表示channel处于非活动状态，提示XX离线</td>
</tr>
<tr>
<td align="center">channelRead0(ChannelHandlerContext channelHandlerContext, String s)</td>
<td align="center">读取数据，并进行消息转发</td>
</tr>
<tr>
<td align="center">exceptionCaught(ChannelHandlerContext ctx, Throwable cause)</td>
<td align="center">异常处理</td>
</tr>
<tr>
<td align="center">userEventTriggered(ChannelHandlerContext ctx, Object evt)</td>
<td align="center">事件触发器。在<code>IdleStateHandler</code>后面加上一个触发器，可以检测心跳。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>-Netty</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/2020/10/08/Redis/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><center>
    <font face="Kristen ITC" color="#555555" font-size=100px>Khighness</font><br>
</center>

<p>[TOC]</p>
<h2 id="1-NoSQL概述"><a href="#1-NoSQL概述" class="headerlink" title="1. NoSQL概述"></a>1. NoSQL概述</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><blockquote>
<p>NoSQL != 非SQL </p>
<p>NoSQL == Not Only SQL</p>
<p>不仅仅是SQL！</p>
</blockquote>
<p>泛指非关系型的数据库。克服大并发。</p>
<p>很多的数据类型，用户的个人信息、社交网络和地理位置，这些数据类型的存储不需要一个固定的格式，不需要多元的操作就可以横向扩展。</p>
<h3 id="1-2-特点"><a href="#1-2-特点" class="headerlink" title="1.2 特点"></a>1.2 特点</h3><ul>
<li><p>方便扩展（数据之间没有关系，很好扩展）</p>
</li>
<li><p>大数据量高性能（细粒度缓存，性能高）</p>
</li>
<li><p>数据类型多样（不需要设计数据库，随取随用）</p>
</li>
<li><p>RDBMS和NoSQL的区别: </p>
<ul>
<li>RDBMS<ul>
<li>结构化组织</li>
<li>SQL</li>
<li>数据和关系都存在单独的表中</li>
<li>严格的一致性</li>
<li>基础的事务</li>
<li>···</li>
</ul>
</li>
<li>NoSQL<ul>
<li>不仅仅是数据</li>
<li>没有固定的查询语言</li>
<li>键值对存储，列存储，文档存储，图形存储</li>
<li>最终一致性</li>
<li>CAP和BASE</li>
<li>三高：高性能、高可用、高可扩展</li>
<li>···</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="1-3-3V-3H"><a href="#1-3-3V-3H" class="headerlink" title="1.3 3V+3H"></a>1.3 3V+3H</h3><ul>
<li>大数据时代的3V<ul>
<li>海量 Volume</li>
<li>多样 Variety</li>
<li>实时 Velocity</li>
</ul>
</li>
<li>互联网需求的3H<ul>
<li>高并发 High concurrency</li>
<li>高可拓 High scalable</li>
<li>高性能 High performance</li>
</ul>
</li>
</ul>
<h3 id="1-4-分类"><a href="#1-4-分类" class="headerlink" title="1.4 分类"></a>1.4 分类</h3><blockquote>
<p>呜呜呜，我好菜，我啥都不会</p>
</blockquote>
<table>
<thead>
<tr>
<th>分类</th>
<th>举例</th>
<th>典型应用场景</th>
<th>数据模型</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td>键值对</td>
<td>Tokyo Cabinet/Tyrant，Redis，Voldemort，Oracle BDB</td>
<td>内容UAN，主要用于处理大量数据的高访问负载，也用于一些日志系统等等</td>
<td>Key指向value的键值对，通常用hash table来实现</td>
<td>查找速度快</td>
<td>数据无结构化，通常只被当做字符串或者二进制数据</td>
</tr>
<tr>
<td>列存储数据库</td>
<td>Cassandra，HBase，Riak</td>
<td>分布式的文件系统</td>
<td>以列簇式存储，将同一列数据存在一起</td>
<td>查找速度快，可扩展性强，更容易进行分布式扩展</td>
<td>功能相对局限</td>
</tr>
<tr>
<td>文档型数据库</td>
<td>CouchDB，MongoDB</td>
<td>Web应用</td>
<td>Key-Value对应的键值对，Value为结构化数据</td>
<td>数据结构要求不严格，表结构可变，不需要像关系型数据库一样需要预先定义表结构</td>
<td>查询性能不高，而且缺乏统一的查询语言</td>
</tr>
<tr>
<td>图形数据库</td>
<td>Neo4J，InfoGrid，Infinite Graph</td>
<td>社交网络、推荐系统等等，专注于构建关系图谱</td>
<td>图结构</td>
<td>利用图结构相关算法。比如最短路径寻址，N度关系查找等</td>
<td>很多时候需要对整个图做计算才能得出需要的信息，而且这种结构不太好做分布式的集群方案</td>
</tr>
</tbody></table>
<h3 id="1-5-阿里巴技术演进"><a href="#1-5-阿里巴技术演进" class="headerlink" title="1.5 阿里巴技术演进"></a>1.5 阿里巴技术演进</h3><blockquote>
<p>技术并无高低之分，就看你如何使用</p>
</blockquote>
<img src="/2020/10/08/Redis/image-20201009144812661.png" class="" title="image-20201009144812661.png">

<img src="/2020/10/08/Redis/image-20201009145619674.png" class="" title="image-20201009145619674.png">

<img src="/2020/10/08/Redis/image-20201009153115683.png" class="" title="image-20201009153115683.png">

<img src="/2020/10/08/Redis/image-20201009153346176.png" class="" title="image-20201009153346176.png">





<h2 id="2-Redis入门"><a href="#2-Redis入门" class="headerlink" title="2. Redis入门"></a>2. Redis入门</h2><blockquote>
<p>📘 official website</p>
</blockquote>
<ul>
<li><p>英文官网：<a href="https://www.redis.io/">redis</a></p>
</li>
<li><p>中文官网：<del><a href="https://www.redis.cn/">redis</a></del></p>
</li>
<li><p>中文官网：<a href="https://www.redis.net.cn/">redis</a></p>
</li>
</ul>
<h3 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h3><blockquote>
<p>Redis = Remote Dictionary Server</p>
</blockquote>
<p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 <a href="http://redis.cn/topics/data-types-intro.html#strings">字符串（strings）</a>， <a href="http://redis.cn/topics/data-types-intro.html#hashes">散列（hashes）</a>， <a href="http://redis.cn/topics/data-types-intro.html#lists">列表（lists）</a>， <a href="http://redis.cn/topics/data-types-intro.html#sets">集合（sets）</a>， <a href="http://redis.cn/topics/data-types-intro.html#sorted-sets">有序集合（sorted sets）</a> 与范围查询， <a href="http://redis.cn/topics/data-types-intro.html#bitmaps">bitmaps</a>， <a href="http://redis.cn/topics/data-types-intro.html#hyperloglogs">hyperloglogs</a> 和 <a href="http://redis.cn/commands/geoadd.html">地理空间（geospatial）</a> 索引半径查询。 Redis 内置了 <a href="http://redis.cn/topics/replication.html">复制（replication）</a>，<a href="http://redis.cn/commands/eval.html">LUA脚本（Lua scripting）</a>， <a href="http://redis.cn/topics/lru-cache.html">LRU驱动事件（LRU eviction）</a>，<a href="http://redis.cn/topics/transactions.html">事务（transactions）</a> 和不同级别的 <a href="http://redis.cn/topics/persistence.html">磁盘持久化（persistence）</a>， 并通过 <a href="http://redis.cn/topics/sentinel.html">Redis哨兵（Sentinel）</a>和自动 <a href="http://redis.cn/topics/cluster-tutorial.html">分区（Cluster）</a>提供高可用性（high availability）^(来自官方文档)^。</p>
<h3 id="2-2-特性"><a href="#2-2-特性" class="headerlink" title="2.2 特性"></a>2.2 特性</h3><ul>
<li><input checked="" disabled="" type="checkbox"> 性能优秀，数据在内存中，读写速度非常快，支持10w并发QPS</li>
<li><input checked="" disabled="" type="checkbox"> 单进程单线程，是线程安全的，采用IO多路复用机制</li>
<li><input checked="" disabled="" type="checkbox"> 丰富的数据类型，支持String、Hash、List、Set、Sorted Set</li>
<li><input checked="" disabled="" type="checkbox"> 支持数据持久化，可以将内存中数据保存在磁盘中，重启时加载</li>
<li><input checked="" disabled="" type="checkbox"> 主从复制，哨兵模式，高可用</li>
<li><input checked="" disabled="" type="checkbox"> 可以用作分布式锁</li>
<li><input checked="" disabled="" type="checkbox"> 可以进行地图信息分析</li>
<li><input checked="" disabled="" type="checkbox"> 可以作为消息中间件使用，支持发布订阅</li>
<li><input checked="" disabled="" type="checkbox"> 可以作为计数器使用，记录网页或者小程序等的浏览量</li>
<li><input checked="" disabled="" type="checkbox"> ······</li>
</ul>
<h3 id="2-3-拓展"><a href="#2-3-拓展" class="headerlink" title="2.3 拓展"></a>2.3 拓展</h3><blockquote>
<p>Redis和Memcache的区别</p>
</blockquote>
<ol>
<li>存储方式上：memcache会把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小。redis有部分数据存在硬盘上，这样能保证数据的持久性</li>
<li>数据支持类型上：memcache对数据类型的支持简单，只支持简单的key-value，而redis支持五大数据类型和三大特殊数据类型</li>
<li>底层模型上：它们之间底层实现方式以及与客户端之间的应用协议不一样。redis直接构建了VM机制，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求</li>
<li>value的大小：redis可以达到1GB，而memcache只有1MB</li>
</ol>
<h2 id="3-Redis安装"><a href="#3-Redis安装" class="headerlink" title="3. Redis安装"></a>3. Redis安装</h2><blockquote>
<p>⚠️ notice</p>
</blockquote>
<ul>
<li><p>Github上redis的windows版本已经很久不再更新，对于最新的3.2.100版本，个人使用过，redis-cli.exe使用起来偶尔会出问题，命令写出来那一行会变成黑色，兼容性不太好，由于3.0不支持GEO等操作，我还是选择使用3.2.100版本。</p>
</li>
<li><p>Redis这种高性能服务器本身与CentOS的体质就很般配，个人推荐在Linux上安装，尤其是后期搭建redis集群环境。CentOS7本身自带的yum镜像中带的gcc安装包只有4.8.5版本，不支持高版本redis的编译，所以推荐下载5.0.8版本。</p>
</li>
<li><p>以上，不管是Windows还是Linux，都推荐使用Xshell开启Redis服务器和客户端。</p>
</li>
</ul>
<blockquote>
<p>🔨 Xshell</p>
</blockquote>
<ul>
<li>网盘链接：<a href="https://pan.baidu.com/s/1qWtPzJgF3N24yIlUfTtq9w">https://pan.baidu.com/s/1qWtPzJgF3N24yIlUfTtq9w</a></li>
<li>提取码：kkkk</li>
</ul>
<h3 id="3-1-Windows10-安装"><a href="#3-1-Windows10-安装" class="headerlink" title="3.1 Windows10 安装"></a>3.1 Windows10 安装</h3><blockquote>
<p>下载: <a href="https://github.com/MSOpenTech/redis/releases">redis</a></p>
</blockquote>
<img src="/2020/10/08/Redis/image-20201008213905860.png" class="" title="image-20201008213905860">

<blockquote>
<p>解压</p>
</blockquote>
<img src="/2020/10/08/Redis/image-20201008214011620.png" class="" title="image-20201008214011620">

<blockquote>
<p>启动:</p>
</blockquote>
<img src="/2020/10/08/Redis/image-20201008214053586.png" class="" title="image-20201008214053586">



<h3 id="3-2-CentOS7-安装"><a href="#3-2-CentOS7-安装" class="headerlink" title="3.2 CentOS7 安装"></a>3.2 CentOS7 安装</h3><blockquote>
<p>安装gcc: <code>yum install gcc-c++ tcl</code></p>
<p>注意安装 version&gt;6 的redis需要 version&gt;5 的gcc: </p>
<p><code>sudo yum install centos-release-scl</code><br><code>sudo yum install devtoolset-7-gcc*</code><br><code>scl enable devtoolset-7 bash</code></p>
</blockquote>
<img src="/2020/10/08/Redis/image-20201008224757570.png" class="" title="image-20201008224757570">

<blockquote>
<p>下载压缩包: <code>wget http://download.redis.io/releases/redis-5.0.8.tar.gz</code></p>
</blockquote>
<img src="/2020/10/08/Redis/image-20201008223909191.png" class="" title="image-20201008223909191">

<blockquote>
<p>解压压缩包: <code>tar xzf redis-5.0.8.tar.gz</code></p>
</blockquote>
<img src="/2020/10/08/Redis/image-20201008224102401.png" class="" title="image-20201008224102401">

<blockquote>
<p>跳转目录: <code>cd redis-5.0.8</code>    </p>
</blockquote>
<img src="/2020/10/08/Redis/image-20201008215145306.png" class="" title="image-20201008215145306">

<blockquote>
<p>编译安装: <code>make</code></p>
</blockquote>
<img src="/2020/10/08/Redis/image-20201008215335902.png" class="" title="image-20201008215335902">

<img src="/2020/10/08/Redis/image-20201008224230979.png" class="" title="image-20201008224230979">

<blockquote>
<p>再次编译: <code>make</code></p>
</blockquote>
<img src="/2020/10/08/Redis/image-20201008224450296.png" class="" title="image-20201008224450296">

<blockquote>
<p>最后安装: </p>
<p><code>cd src/</code></p>
<p><code>make install</code></p>
</blockquote>
<img src="/2020/10/08/Redis/image-20201008230537427.png" class="" title="image-20201008230537427">

<blockquote>
<p>查看结果: <code>ll /usr/local/bin/</code></p>
</blockquote>
<img src="/2020/10/08/Redis/image-20201008230723447.png" class="" title="image-20201008230723447">

<blockquote>
<p>更改配置:</p>
<p>新建配置文件目录: <code>mkdir kconfig</code>   </p>
<p>将原生Redis配置文件复制进来: <code>cp /home/parak/Redis/redis-5.0.8/redis.conf </code></p>
<p>修改配置文件: <code>gedit redis.conf</code> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">daemonize yes</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>测试启动: <code>redis-server kconfig/redis.conf</code></p>
</blockquote>
<img src="/2020/10/08/Redis/image-20201009105138976.png" class="" title="image-20201009105138976">

<blockquote>
<p>查看redis进程: <code>ps -ef | grep redis</code></p>
</blockquote>
<img src="/2020/10/08/Redis/image-20201009105424943.png" class="" title="image-20201009105424943">

<blockquote>
<p>关闭redis服务: <code>shutdown</code></p>
</blockquote>
<img src="/2020/10/08/Redis/image-20201009105552015.png" class="" title="image-20201009105552015">



<h2 id="4-Redis配置"><a href="#4-Redis配置" class="headerlink" title="4. Redis配置"></a>4. Redis配置</h2><blockquote>
<p>查看所有配置项</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">config get *</span><br></pre></td></tr></table></figure>

<blockquote>
<p>命令行编辑配置</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">config set &lt;option&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>redis.conf 配置项说明如下</p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">配置项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left"><code>daemonize no</code></td>
<td align="left">Redis 默认不是以守护进程的方式运行，可以通过该配置项修改，使用 yes 启用守护进程（Windows 不支持守护线程的配置为 no ）</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left"><code>pidfile /var/run/redis.pid</code></td>
<td align="left">当 Redis 以守护进程方式运行时，Redis 默认会把 pid 写入 /var/run/redis.pid 文件，可以通过 pidfile 指定</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left"><code>port 6379</code></td>
<td align="left">指定 Redis 监听端口，默认端口为 6379</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left"><code>bind 127.0.0.1</code></td>
<td align="left">绑定的主机地址</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left"><code>timeout 300</code></td>
<td align="left">当客户端闲置多长秒后关闭连接，如果指定为 0 ，表示关闭该功能</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left"><code>loglevel notice</code></td>
<td align="left">指定日志记录级别，Redis 总共支持四个级别：debug、verbose、notice、warning，默认为 notice</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left"><code>logfile stdout</code></td>
<td align="left">日志记录方式，默认为标准输出，如果配置 Redis 为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给 /dev/null</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left"><code>databases 16</code></td>
<td align="left">设置数据库的数量，默认数据库为0，可以使用SELECT 命令在连接上指定数据库id</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left"><code>save  </code>Redis 默认配置文件中提供了三个条件：<strong>save 900 1</strong>、<strong>save 300 10</strong> 、<strong>save 60 10000</strong>分别表示 900 秒（15 分钟）内有 1 个更改，300 秒（5 分钟）内有 10 个更改以及 60 秒内有 10000 个更改。</td>
<td align="left">指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</td>
</tr>
<tr>
<td align="left">10</td>
<td align="left"><code>rdbcompression yes</code></td>
<td align="left">指定存储至本地数据库时是否压缩数据，默认为 yes，Redis 采用 LZF 压缩，如果为了节省 CPU 时间，可以关闭该选项，但会导致数据库文件变的巨大</td>
</tr>
<tr>
<td align="left">11</td>
<td align="left"><code>dbfilename dump.rdb</code></td>
<td align="left">指定本地数据库文件名，默认值为 dump.rdb</td>
</tr>
<tr>
<td align="left">12</td>
<td align="left"><code>dir ./</code></td>
<td align="left">指定本地数据库存放目录</td>
</tr>
<tr>
<td align="left">13</td>
<td align="left"><code>slaveof  </code></td>
<td align="left">设置当本机为 slave 服务时，设置 master 服务的 IP 地址及端口，在 Redis 启动时，它会自动从 master 进行数据同步</td>
</tr>
<tr>
<td align="left">14</td>
<td align="left"><code>masterauth </code></td>
<td align="left">当 master 服务设置了密码保护时，slav 服务连接 master 的密码</td>
</tr>
<tr>
<td align="left">15</td>
<td align="left"><code>requirepass foobared</code></td>
<td align="left">设置 Redis 连接密码，如果配置了连接密码，客户端在连接 Redis 时需要通过 AUTH <password> 命令提供密码，默认关闭</td>
</tr>
<tr>
<td align="left">16</td>
<td align="left"><code> maxclients 128</code></td>
<td align="left">设置同一时间最大客户端连接数，默认无限制，Redis 可以同时打开的客户端连接数为 Redis 进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis 会关闭新的连接并向客户端返回 max number of clients reached 错误信息</td>
</tr>
<tr>
<td align="left">17</td>
<td align="left"><code>maxmemory </code></td>
<td align="left">指定 Redis 最大内存限制，Redis 在启动时会把数据加载到内存中，达到最大内存后，Redis 会先尝试清除已到期或即将到期的 Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis 新的 vm 机制，会把 Key 存放内存，Value 会存放在 swap 区</td>
</tr>
<tr>
<td align="left">18</td>
<td align="left"><code>appendonly no</code></td>
<td align="left">指定是否在每次更新操作后进行日志记录，Redis 在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis 本身同步数据文件是按上面 save 条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为 no</td>
</tr>
<tr>
<td align="left">19</td>
<td align="left"><code>appendfilename appendonly.aof</code></td>
<td align="left">指定更新日志文件名，默认为 appendonly.aof</td>
</tr>
<tr>
<td align="left">20</td>
<td align="left"><code>appendfsync everysec</code></td>
<td align="left">指定更新日志条件，共有 3 个可选值：<strong>no</strong>：表示等操作系统进行数据缓存同步到磁盘（快）<strong>always</strong>：表示每次更新操作后手动调用 fsync() 将数据写到磁盘（慢，安全）<strong>everysec</strong>：表示每秒同步一次（折中，默认值）</td>
</tr>
<tr>
<td align="left">21</td>
<td align="left"><code>vm-enabled no</code></td>
<td align="left">指定是否启用虚拟内存机制，默认值为 no，简单的介绍一下，VM 机制将数据分页存放，由 Redis 将访问量较少的页即冷数据 swap 到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析 Redis 的 VM 机制）</td>
</tr>
<tr>
<td align="left">22</td>
<td align="left"><code>vm-swap-file /tmp/redis.swap</code></td>
<td align="left">虚拟内存文件路径，默认值为 /tmp/redis.swap，不可多个 Redis 实例共享</td>
</tr>
<tr>
<td align="left">23</td>
<td align="left"><code>vm-max-memory 0</code></td>
<td align="left">将所有大于 vm-max-memory 的数据存入虚拟内存，无论 vm-max-memory 设置多小，所有索引数据都是内存存储的(Redis 的索引数据 就是 keys)，也就是说，当 vm-max-memory 设置为 0 的时候，其实是所有 value 都存在于磁盘。默认值为 0</td>
</tr>
<tr>
<td align="left">24</td>
<td align="left"><code>vm-page-size 32</code></td>
<td align="left">Redis swap 文件分成了很多的 page，一个对象可以保存在多个 page 上面，但一个 page 上不能被多个对象共享，vm-page-size 是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page 大小最好设置为 32 或者 64bytes；如果存储很大大对象，则可以使用更大的 page，如果不确定，就使用默认值</td>
</tr>
<tr>
<td align="left">25</td>
<td align="left"><code>vm-pages 134217728</code></td>
<td align="left">设置 swap 文件中的 page 数量，由于页表（一种表示页面空闲或使用的 bitmap）是在放在内存中的，，在磁盘上每 8 个 pages 将消耗 1byte 的内存。</td>
</tr>
<tr>
<td align="left">26</td>
<td align="left"><code>vm-max-threads 4</code></td>
<td align="left">设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4</td>
</tr>
<tr>
<td align="left">27</td>
<td align="left"><code>glueoutputbuf yes</code></td>
<td align="left">设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启</td>
</tr>
<tr>
<td align="left">28</td>
<td align="left"><code>hash-max-zipmap-entries 64 hash-max-zipmap-value 512</code></td>
<td align="left">指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</td>
</tr>
<tr>
<td align="left">29</td>
<td align="left"><code>activerehashing yes</code></td>
<td align="left">指定是否激活重置哈希，默认为开启（后面在介绍 Redis 的哈希算法时具体介绍）</td>
</tr>
<tr>
<td align="left">30</td>
<td align="left"><code>include /path/to/local.conf</code></td>
<td align="left">指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</td>
</tr>
</tbody></table>
<blockquote>
<p>重点详解</p>
</blockquote>
<ol>
<li><p>UNIT: redis对大小写不敏感</p>
</li>
<li><p>INCLUEDS[模块]: 可以包含多个配置文件</p>
</li>
<li><p>MOUDLES[模块]: 启动时加载模块</p>
</li>
<li><p>NETWORK[网络]: </p>
<ul>
<li>bind: 绑定IP</li>
<li>protected-mode: 保护模式</li>
<li>post: 端口设置</li>
</ul>
</li>
<li><p>GENERAL[通用]: </p>
<ul>
<li>daemonize: 是否以守护进程的方式运行[^1]</li>
<li>pidfile /var/run/redis_6379.pid: 如果以后台的方式运行，就需要指定一个pid的配置文件</li>
<li>loglevel: 日志级别</li>
<li>logfile: 日志的文件位置</li>
<li>database: 数据库的数量</li>
<li>always-show-logo: 是否开启服务的时候显示logo</li>
</ul>
</li>
<li><p>SNAPSHOTTING[快照]:</p>
<ul>
<li>save 900 1: 如果在900s内，至少有1个key进行了修改，就进行持久化操作</li>
<li>save 300 10: 如果在300s内，至少有10个key进行了修改，就进行持久化操作</li>
<li>save 60 10000: 如果在60s内，至少有10000个key进行了修改，就进行持久化操作</li>
<li>stop-writes-on-bgsave-error: 持久化出现错误，是否让redis继续工作</li>
<li>rdbcompression: 是否压缩rdb文件，需要消耗一些CPU资源</li>
<li>rdbchecksum: 保存rdb的文件的时候，是否进行错误校验</li>
<li>dir: 文件保存的目录</li>
</ul>
</li>
<li><p>REPLICATION[复制]:</p>
<ul>
<li>见主从复制</li>
</ul>
</li>
<li><p>SECURITY[安全]:</p>
<ul>
<li><p>requirepass: 设置密码</p>
</li>
<li><pre><code class="shell"># 设置密码
&gt; config set requirepass &lt;password&gt;
# 登录输入
&gt; auth &lt;password&gt;
# 获取密码
&gt; config get requirepass
# 取消设置
&gt; config set requirepass &#39;&#39;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">9. CLIENTS[客户端]:</span><br><span class="line"></span><br><span class="line">   - maxclients: 设置可连接redis的最大客户端数量</span><br><span class="line">   - maxmemory: 配置redis的最大内存容量</span><br><span class="line">   - maxmemory-policy: 内存到达上限的处理策略</span><br><span class="line">     - volatile-lru：只对设置了过期时间的key进行LRU（默认值） </span><br><span class="line">     - allkeys-lru ： 删除lru算法的key  </span><br><span class="line">     - volatile-random：随机删除即将过期key  </span><br><span class="line">     - allkeys-random：随机删除  </span><br><span class="line">     - volatile-ttl ： 删除即将过期的  </span><br><span class="line">     - noeviction ： 永不过期，返回错误</span><br><span class="line"></span><br><span class="line">10. APPEND ONLY MODE[AOF]:</span><br><span class="line"></span><br><span class="line">    - appendonly: 默认不开启AOF模式</span><br><span class="line">    - appendfilename: AOF持久化的文件名称</span><br><span class="line">    - appendfsync always: 每次修改都会同步，消耗性能</span><br><span class="line">    - appendfsync everysec: 每秒执行一次同步，可能会丢失这1s的数据</span><br><span class="line">    - appendfsync no: 不执行同步，操作系统自己同步数据，速度最快</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[^1]: 守护进程(daemon)是一类在后台运行的特殊进程，用于执行特定的系统任务。很多守护进程在系统引导的时候启动，并且一直运行直到系统关闭。另一些只在需要的时候才启动，完成任务后就自动结束。Redis服务器开启守护进程后，不会自动自动关闭。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 5. Redis测试</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; redis的性能测试命令</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;shell</span><br><span class="line">redis-benchmark [option] [option value]</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ol>
<p><strong>注意: 这个命令是在redis目录下执行，而非redis客户端的内部命令</strong></p>
<blockquote>
<p>redis性能测试工具可选参数如下</p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">选项</th>
<th align="left">描述</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left"><strong>-h</strong></td>
<td align="left">指定服务器主机名</td>
<td align="left">127.0.0.1</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left"><strong>-p</strong></td>
<td align="left">指定服务器端口</td>
<td align="left">6379</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left"><strong>-s</strong></td>
<td align="left">指定服务器 socket</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">4</td>
<td align="left"><strong>-c</strong></td>
<td align="left">指定并发连接数</td>
<td align="left">50</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left"><strong>-n</strong></td>
<td align="left">指定请求数</td>
<td align="left">10000</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left"><strong>-d</strong></td>
<td align="left">以字节的形式指定 SET/GET 值的数据大小</td>
<td align="left">3</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left"><strong>-k</strong></td>
<td align="left">1=keep alive 0=reconnect</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left"><strong>-r</strong></td>
<td align="left">SET/GET/INCR 使用随机 key, SADD 使用随机值</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">9</td>
<td align="left"><strong>-P</strong></td>
<td align="left">通过管道传输 <numreq> 请求</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">10</td>
<td align="left"><strong>-q</strong></td>
<td align="left">强制退出 redis。仅显示 query/sec 值</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">11</td>
<td align="left"><strong>–csv</strong></td>
<td align="left">以 CSV 格式输出</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">12</td>
<td align="left"><strong>-l</strong></td>
<td align="left">生成循环，永久执行测试</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">13</td>
<td align="left"><strong>-t</strong></td>
<td align="left">仅运行以逗号分隔的测试命令列表。</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">14</td>
<td align="left"><strong>-I</strong></td>
<td align="left">Idle 模式。仅打开 N 个 idle 连接并等待。</td>
<td align="left"></td>
</tr>
</tbody></table>
<blockquote>
<p>测试结果分析</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-benchmark -h 127.0.0.1 -p 6379 -c 100 -n 100000 </span><br></pre></td></tr></table></figure>

<img src="/2020/10/08/Redis/image-20201009193727448.png" class="" title="image-20201009193727448">

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-benchmark -h 127.0.0.1 -p 6379 -c 1 -n 100000 -q</span><br></pre></td></tr></table></figure>

<img src="/2020/10/08/Redis/image-20201009194004617.png" class="" title="image-20201009194004617">

<p>这个是对所有操作测试性能，每秒处理的请求数量。</p>
<h2 id="6-Redis基础"><a href="#6-Redis基础" class="headerlink" title="6. Redis基础"></a>6. Redis基础</h2><h3 id="6-1-Redis数据库"><a href="#6-1-Redis数据库" class="headerlink" title="6.1 Redis数据库"></a>6.1 Redis数据库</h3><p><strong>redis有16个数据库，默认使用第0个</strong></p>
<blockquote>
<p>测试连接</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping</span><br></pre></td></tr></table></figure>

<blockquote>
<p>关闭连接</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">quit</span><br></pre></td></tr></table></figure>

<blockquote>
<p>返回消息</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &lt;str&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>切换数据库</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select &lt;num of database&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取当前数据库的大小</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dbsize</span><br></pre></td></tr></table></figure>

<blockquote>
<p>清空当前数据库</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flushdb</span><br></pre></td></tr></table></figure>

<blockquote>
<p>清空所有数据库</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flushall</span><br></pre></td></tr></table></figure>

<blockquote>
<p>交换数据库</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">swap &lt;n1&gt; &lt;n2&gt;</span><br></pre></td></tr></table></figure>



<h3 id="6-2-6379的故事"><a href="#6-2-6379的故事" class="headerlink" title="6.2 6379的故事"></a>6.2 6379的故事</h3><p><strong>redis默认端口号为6379</strong></p>
<blockquote>
<p>作者在自己的一篇博文中解释了为什么选用 6379 作为默认端口，因为 6379 在手机按键上 MERZ 对应的号码，而 MERZ 取自意大利歌女 Alessia Merz 的名字。MERZ长期以来被Redis作者antirez及其朋友当作愚蠢的代名词，后来作者在开发Redis就选用了这个端口。</p>
</blockquote>
<h3 id="6-3-Redis蜜汁速度"><a href="#6-3-Redis蜜汁速度" class="headerlink" title="6.3 Redis蜜汁速度"></a>6.3 Redis蜜汁速度</h3><p><strong>redis是单线程的。</strong></p>
<p>redis基于内存操作，CPU不是redis的性能瓶颈，Redis的瓶颈很可能是机器内存或者网路带宽。</p>
<p>既然单线程容易实现，而且CPU不会成为瓶颈，那就顺理成章的采用单线程实现。</p>
<blockquote>
<p>理解Redis蜜汁速度需要跨过两个误区</p>
</blockquote>
<ul>
<li><p>误区1：高性能的服务器一定是多线程的？</p>
</li>
<li><p>误区2：多线程的效率一定比单线程高？</p>
</li>
</ul>
<blockquote>
<p>Redis采用单线程依然快的原因</p>
</blockquote>
<ol>
<li>Redis完全基于内存，读写全部在一个CPU上，绝大部分请求是纯粹的内存操作，非常迅速，数据存在于内存中，类似于HashMap，HashMap的优势就是查询和操作的时间复杂度时O(1)</li>
<li>数据结构简单，对数据操作也简单</li>
<li>采用单线程，避免了不必要的上下文切换和竞争条件，不存在多线程导致的CPU切换，不用取考虑各种锁的问题，不存在加锁放锁操作，没有死锁问题导致的性能消耗</li>
<li>使用多路复用IO模型，非阻塞IO</li>
</ol>
<h2 id="7-Redis数据类型"><a href="#7-Redis数据类型" class="headerlink" title="7. Redis数据类型"></a>7. Redis数据类型</h2><h3 id="7-1-五大数据类型"><a href="#7-1-五大数据类型" class="headerlink" title="7.1 五大数据类型"></a>7.1 五大数据类型</h3><p><strong>所有命令可查看中文官方文档: <a href="http://redis.cn/commands.html#">http://redis.cn/commands.html#</a></strong></p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">简介</th>
<th align="center">特性</th>
<th align="center">场景</th>
</tr>
</thead>
<tbody><tr>
<td align="center">String(字符串)</td>
<td align="center">二进制安全</td>
<td align="center">可以包含任何数据，比如jpg图片或者序列化对象</td>
<td align="center">—</td>
</tr>
<tr>
<td align="center">Hash(字典)</td>
<td align="center">键值对集合</td>
<td align="center">适合存储对象，并且可以像数据库中的update一个属性一样值修改某一项属性值</td>
<td align="center">存储、读取、修改用户属性</td>
</tr>
<tr>
<td align="center">List(列表)</td>
<td align="center">双向链表</td>
<td align="center">增删快，提供了操作某一元素的api</td>
<td align="center">最新消息排行；消息队列</td>
</tr>
<tr>
<td align="center">Set(集合)</td>
<td align="center">hash表实现，元素不重复</td>
<td align="center">增删查快，提供了求交集、并集和差集的操作</td>
<td align="center">共同好友:  利用唯一性，统计网站UV</td>
</tr>
<tr>
<td align="center">Sorted Set(有序集合)</td>
<td align="center">将set中的元素增加一个权重score，元素按照score有序排列</td>
<td align="center">数据插入集合时，已经进行了天然排序</td>
<td align="center">排行榜；带权重的消息队列</td>
</tr>
</tbody></table>
<p><strong>Key</strong></p>
<blockquote>
<p>查看所有的key</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keys *</span><br></pre></td></tr></table></figure>

<blockquote>
<p>创建键值对</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">get &lt;key&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>移除键值对</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">move &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>判断key是否存在</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exists &lt;key&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看key的类型</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">type &lt;key&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>设置key的过期时间/秒</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">expire &lt;key&gt; &lt;seconds&gt; </span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的有效时间/秒</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ttl &lt;key&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的有效时间/毫秒</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pttl &lt;key&gt;</span><br></pre></td></tr></table></figure>



<h4 id="7-1-1-String"><a href="#7-1-1-String" class="headerlink" title="7.1.1 String"></a>7.1.1 String</h4><blockquote>
<p>向key上追加字符串</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">append &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的长度</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">strlen &lt;key&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Integer操作</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 加1</span></span><br><span class="line">incr &lt;key&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 加n</span></span><br><span class="line">incrby &lt;key&gt; n</span><br><span class="line"><span class="meta">#</span><span class="bash"> 减1</span></span><br><span class="line">decr &lt;key&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 减n</span></span><br><span class="line">decrby &lt;key&gt; n</span><br></pre></td></tr></table></figure>

<blockquote>
<p>subString(start, end)操作</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 截取整个字符串</span></span><br><span class="line">getrange &lt;key&gt; 0 -1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 截取部分字符串</span></span><br><span class="line">getrange &lt;key&gt; start end</span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">set</span> s <span class="string">&quot;Khighness&quot;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> getrange s 0 -1 <span class="comment"># &quot;Khighness&quot;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> getrange s 1 4  <span class="comment"># &quot;high&quot;</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>replace(start, end)操作</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 把字符串从n位开始之后的字符替换为新的字符串newStr</span></span><br><span class="line">setrange &lt;key&gt; n newStr</span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">set</span> s <span class="string">&quot;Khighness&quot;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> setrange s 0 X </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> get s <span class="comment"># &quot;Xhighness&quot;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> setrange s 5 <span class="string">&quot;XXXXX&quot;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> get s <span class="comment"># &quot;XhighXXXXX&quot;</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>setex (set with expire) 创建键值对的同时设置过期时间</p>
<p>setnx (set if not exist)  如果key不存在则创建键值对，防止覆盖原有键值对 (分布式锁中经常使用)</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置键值对，设置过期时间</span></span><br><span class="line">setex &lt;key&gt; &lt;seconds&gt; &lt;value&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> key不存在，则创建键值对</span></span><br><span class="line">setnx &lt;key&gt; &lt;value&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line">127.0.0.1:6379&gt; setex k1 10 parak</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) -2</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">(nil)</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; setnx k2 parak</span><br><span class="line">(integer) 1 # 1代表设置成功</span><br><span class="line">127.0.0.1:6379&gt; setnx k2 flowerk</span><br><span class="line">(integer) 0 # 0代表设置失败</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">&quot;parak&quot;     </span><br><span class="line">127.0.0.1:6379&gt; setnx k2 FlowerK</span><br><span class="line">(integer) 0 </span><br><span class="line">127.0.0.1:6379&gt; set k2 FlowerK</span><br><span class="line">OK          # 强制设置value</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">&quot;FlowerK&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>多个键值对操作</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 一次性创建多个键值对</span></span><br><span class="line">mset &lt;key&gt; &lt;value&gt; [key value ...]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取多个key的值</span></span><br><span class="line">meget &lt;key&gt; [key ...]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 不存在则创建多个键值对</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 原子性操作，只要其中有一个key已存在，就会全部创建失败</span></span><br><span class="line">msetnx &lt;key&gt; &lt;value&gt; [key value ...]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line">127.0.0.1:6379&gt; mset k1 v1 k2 v2 k3 v3</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget k1 k2 k3</span><br><span class="line">1) &quot;v1&quot;</span><br><span class="line">2) &quot;v2&quot;</span><br><span class="line">3) &quot;v3&quot;</span><br><span class="line">127.0.0.1:6379&gt; msetnx k2 v2 k4 v4 k5 v5</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;k2&quot;</span><br><span class="line">2) &quot;k3&quot;</span><br><span class="line">3) &quot;k1&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 巧妙设计key  object:&#123;id&#125;:&#123;field&#125;</span></span><br><span class="line">127.0.0.1:6379&gt; mset user:1:name Khighness user:1:age 18</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget user:1:name user:1:age</span><br><span class="line">1) &quot;Khighness&quot;</span><br><span class="line">2) &quot;18&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>组合操作</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先获取值，再设置新的值</span></span><br><span class="line">getset k v</span><br></pre></td></tr></table></figure>



<h4 id="7-1-2-List"><a href="#7-1-2-List" class="headerlink" title="7.1.2 List"></a>7.1.2 List</h4><p>redis里面，list可以当成栈、队列、队列。</p>
<blockquote>
<p>向list的头部添加值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lpush &lt;key&gt; value [value ...]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>向list的尾部添加值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpush &lt;key&gt; value [value ...]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>判断list是否存在</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exists &lt;key&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>移除列表的第一个元素</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lpop &lt;key&gt; </span><br></pre></td></tr></table></figure>

<blockquote>
<p>移除列表的最后一个元素</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpop &lt;key&gt; </span><br></pre></td></tr></table></figure>

<blockquote>
<p>移除指定的值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lrem &lt;key&gt; &lt;count&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>更新list</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 根据index更新值</span></span><br><span class="line">lset &lt;key&gt; &lt;index&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>根据下标获取值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lindex &lt;key&gt; &lt;index&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取list的长度</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">llen &lt;key&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取list指定范围的值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取整个list的值</span></span><br><span class="line">lrange &lt;key&gt; 0 -1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取指定范围的值</span></span><br><span class="line">lrange &lt;key&gt; start end</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line">127.0.0.1:6379&gt; lpush list1 1 2 3 4 5 </span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="line">1) &quot;5&quot;</span><br><span class="line">2) &quot;4&quot;</span><br><span class="line">3) &quot;3&quot;</span><br><span class="line">4) &quot;2&quot;</span><br><span class="line">5) &quot;1&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 1</span><br><span class="line">1) &quot;5&quot;</span><br><span class="line">2) &quot;4&quot;</span><br><span class="line">127.0.0.1:6379&gt; rpush list2 1 2 3 4 5</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; lrange list2 0 -1</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;3&quot;</span><br><span class="line">4) &quot;4&quot;</span><br><span class="line">5) &quot;5&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange list2 0 1</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;2&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>截取list中指定范围的值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 保留下标[start, end]的值</span></span><br><span class="line">ltrim &lt;key&gt; start end</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line">127.0.0.1:6379&gt; rpush list parak1 parak2 parak3 parak4 parak5</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; ltrim list 0 2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;parak1&quot;</span><br><span class="line">2) &quot;parak2&quot;</span><br><span class="line">3) &quot;parak3&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>组合操作</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 移除<span class="built_in">source</span>的尾部的值插入到destination的头部</span></span><br><span class="line">rpoplpush &lt;source&gt; &lt;destination&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line">127.0.0.1:6379&gt; rpush list 1 2 3 4 5</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; rpoplpush list newlist</span><br><span class="line">&quot;5&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange newlist 0 -1</span><br><span class="line">1) &quot;5&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在list中插入值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在list中的某个值之前插入</span></span><br><span class="line">linsert &lt;key&gt; before &lt;priot&gt; &lt;value&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在list中的某个值之后插入</span></span><br><span class="line">linsert &lt;key&gt; after &lt;priot&gt; &lt;value&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line">127.0.0.1:6379&gt; rpush list 1 2 3 4 5</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; linsert list before 3 6</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;6&quot;</span><br><span class="line">4) &quot;3&quot;</span><br><span class="line">5) &quot;4&quot;</span><br><span class="line">6) &quot;5&quot;</span><br><span class="line">127.0.0.1:6379&gt; linsert list after 5 7</span><br><span class="line">(integer) 7</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;6&quot;</span><br><span class="line">4) &quot;3&quot;</span><br><span class="line">5) &quot;4&quot;</span><br><span class="line">6) &quot;5&quot;</span><br><span class="line">7) &quot;7&quot;</span><br></pre></td></tr></table></figure>



<h4 id="7-1-3-Set"><a href="#7-1-3-Set" class="headerlink" title="7.1.3 Set"></a>7.1.3 Set</h4><p>set 无序不重复集合</p>
<ul>
<li>set通过哈希表实现，所有增删查的时间复杂度是O(1)</li>
</ul>
<blockquote>
<p>向set中国添加值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sadd &lt;key&gt; &lt;value&gt; [value ...]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看set中的所有值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">smembers &lt;key&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看set中是否包含值value</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sismember &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取set中的元素个数</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scard &lt;key&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>移除set中的值value</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">srem &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取set中的随机值(可以做抽奖功能)</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">srandmember &lt;key&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>随机移除set中的元素</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">spop &lt;key&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将一个set集合中指定的值移动到另一个set集合</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将<span class="built_in">source</span>中的value移动到destination</span></span><br><span class="line">smove &lt;source&gt; &lt;destination&gt; &lt;value&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line">127.0.0.1:6379&gt; sadd set k1 k2 k3 k4 k5 k6 k7</span><br><span class="line">(integer) 7</span><br><span class="line">127.0.0.1:6379&gt; sadd newset k1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; smove set newset k3</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers newset</span><br><span class="line">1) &quot;k3&quot;</span><br><span class="line">2) &quot;k1&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>集合运算</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 集合s1和s2的并集</span></span><br><span class="line">sunion &lt;s1&gt; &lt;s&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 集合s1和s2的交集 (实现共同好友、共同关注)</span></span><br><span class="line">sinter &lt;s1&gt; &lt;s2&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 集合s1中独有的元素</span></span><br><span class="line">sdiff &lt;s1&gt; &lt;s2&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line">127.0.0.1:6379&gt; sadd s1 k1 k2 k3 k4 k5 k6</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; sadd s2 k5 k6 k7 k8 k9 k10</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; sunion s1 s2</span><br><span class="line"> 1) &quot;k5&quot;</span><br><span class="line"> 2) &quot;k6&quot;</span><br><span class="line"> 3) &quot;k8&quot;</span><br><span class="line"> 4) &quot;k2&quot;</span><br><span class="line"> 5) &quot;k3&quot;</span><br><span class="line"> 6) &quot;k1&quot;</span><br><span class="line"> 7) &quot;k4&quot;</span><br><span class="line"> 8) &quot;k7&quot;</span><br><span class="line"> 9) &quot;k10&quot;</span><br><span class="line">10) &quot;k9&quot;</span><br><span class="line">127.0.0.1:6379&gt; sinter s1 s2</span><br><span class="line">1) &quot;k5&quot;</span><br><span class="line">2) &quot;k6&quot;</span><br><span class="line">127.0.0.1:6379&gt; sdiff s1 s2</span><br><span class="line">1) &quot;k2&quot;</span><br><span class="line">2) &quot;k1&quot;</span><br><span class="line">3) &quot;k3&quot;</span><br><span class="line">4) &quot;k4&quot;</span><br></pre></td></tr></table></figure>



<h4 id="7-1-4-Hash"><a href="#7-1-4-Hash" class="headerlink" title="7.1.4 Hash"></a>7.1.4 Hash</h4><p>相当于key-HashMap，value为一个map集合，更适合于对象的存储，多用于存储变更数据、</p>
<blockquote>
<p>设置key指定的哈希集中指定字段的值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hset &lt;key&gt; &lt;field&gt; &lt;value&gt; </span><br></pre></td></tr></table></figure>

<blockquote>
<p>key指定的哈希集中不存在指定字段时，设置字段的值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hsetnx &lt;key&gt; &lt;field&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>删除key指定的哈希集中指定字段</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdel &lt;key&gt; &lt;field&gt; [field ...]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>判断key指定哈希集中指定字段是否存在</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexists &lt;key&gt; &lt;field&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对key指定的哈希集中指定字段的值加上增量(Integer型，可正可负，字段不存在则在操作执行前把该字段的值设置为0)</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hincrby &lt;key&gt; &lt;field&gt; &lt;integer&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对key指定的哈希集中指定字段的值加上增量(float型，可正可负，字段不存在则在操作执行前把该字段的值设置为0)</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hincrbyfloat &lt;key&gt; &lt;field&gt; &lt;float&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key指定的哈希集中字段数量</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hlen &lt;key&gt; </span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key指定的哈希集中指定字段的值的字符串长度</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hstrlen hash &lt;key&gt; &lt;value&gt; </span><br></pre></td></tr></table></figure>

<blockquote>
<p>key指定的哈希集操作</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置key指定的哈希集中指定字段的值</span></span><br><span class="line">hmset &lt;key&gt; &lt;field&gt; &lt;value&gt; [field value ...]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取key指定的哈希集中指定字段所关联的值</span></span><br><span class="line">hmget &lt;key&gt; &lt;field&gt; [field ...]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取key指定的哈希集中所有字段的名字</span></span><br><span class="line">hkeys</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取key指定哈希集中所有字段的值</span></span><br><span class="line">hvals</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取key指定的哈希集中所有的字段和值</span></span><br><span class="line">hgetall</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line">127.0.0.1:6379&gt; hmset hash field1 hello field2 world</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hmget hash field1 field2</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;world&quot;</span><br><span class="line">127.0.0.1:6379&gt; hkeys hash</span><br><span class="line">1) &quot;field1&quot;</span><br><span class="line">2) &quot;field2&quot;</span><br><span class="line">127.0.0.1:6379&gt; hvals hash</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;world&quot;</span><br><span class="line">127.0.0.1:6379&gt; hgetall hash</span><br><span class="line">1) &quot;field1&quot;</span><br><span class="line">2) &quot;hello&quot;</span><br><span class="line">3) &quot;field2&quot;</span><br><span class="line">4) &quot;world&quot;</span><br></pre></td></tr></table></figure>



<h4 id="7-1-5-Sorted-Set"><a href="#7-1-5-Sorted-Set" class="headerlink" title="7.1.5 Sorted Set"></a>7.1.5 Sorted Set</h4><p>有序集合sorted set，集合中每个元素都会关联一个double类型的分数。</p>
<ul>
<li><p>redis通过分数对集合中的成员进行排序。</p>
</li>
<li><p>有序集合中成员是唯一的，分数可以重复。</p>
</li>
<li><p>集合是通过哈希表实现的，所以增删查的事件复杂度都是O(1)。</p>
</li>
<li><p>集合中最大的成员数量为2^32^-1(4294967295)， 每个集合可存储40多亿个成员。</p>
</li>
</ul>
<blockquote>
<p>向key的有序集合中添加序号为number的value</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zadd &lt;key&gt; &lt;number&gt; &lt;value&gt; [number value ...]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的有序集合中的所有值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrange &lt;key&gt; 0 -1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的有序集合中的成员数量</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zcard &lt;key&gt; </span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的有序集合中指定下标区间的成员</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrange &lt;key&gt; start end</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的有序集合中指定成员member的索引</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrank &lt;key&gt; member</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对key的有序集合中指定成员member的分数加上增量</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zincrby &lt;key&gt; &lt;Integer&gt; member</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的有序集合中指定成员member的分数值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zscore &lt;key&gt; member</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的有序集合中指定成员member的排名(从小到大)</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrank &lt;key&gt; member</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的有序集合中指定成员member的排名(从大到小)</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrevrank &lt;key&gt; member</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的有序集合中分数在指定区间[min,max]的成员数量</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zcount &lt;key&gt; min max</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过字典区间获取key的有序集合中的成员数量</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zlexcount &lt;key&gt; min max</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过字典区间获取key的有序集合中的成员</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrangebylex &lt;key&gt; min max [limit offset count]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的有序集合中分数在指定区间[min,max]的成员</p>
<blockquote>
<p>参数说明</p>
<ul>
<li>min max<ul>
<li>默认情况下为闭区间，即[min ,max]</li>
<li>也可以是使用开区间，即(min, max)，写法为<code> (min  (max</code></li>
</ul>
</li>
<li>withscores<ul>
<li>返回成员的同时会返回分数</li>
</ul>
</li>
<li>limit offset count<ul>
<li>offset：起始位置，count：从起始位置开始的记录数量</li>
<li>实现分页查询</li>
<li>参数: 页数pagenum，页面大小pagesize</li>
<li>那么实际的offset = (pagenum - 1) * pagesize，count = pagesize</li>
<li>即查询语句为<code>zrangebyscore salary min max withscores limit (pagenum - 1) * pagesize pagesize  </code></li>
</ul>
</li>
</ul>
</blockquote>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrangebyscore &lt;key&gt; min max [withscores] [limit offset count]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>例如</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd salary -10000 W -20000 F -30000 S</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; zadd salary 10000 K 20000 A 30000 G</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary -20000 20000</span><br><span class="line">1) &quot;F&quot;</span><br><span class="line">2) &quot;W&quot;</span><br><span class="line">3) &quot;K&quot;</span><br><span class="line">4) &quot;A&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary -inf inf </span><br><span class="line">1) &quot;S&quot;</span><br><span class="line">2) &quot;F&quot;</span><br><span class="line">3) &quot;W&quot;</span><br><span class="line">4) &quot;K&quot;</span><br><span class="line">5) &quot;A&quot;</span><br><span class="line">6) &quot;G&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary -inf inf withscores</span><br><span class="line"> 1) &quot;S&quot;</span><br><span class="line"> 2) &quot;-30000&quot;</span><br><span class="line"> 3) &quot;F&quot;</span><br><span class="line"> 4) &quot;-20000&quot;</span><br><span class="line"> 5) &quot;W&quot;</span><br><span class="line"> 6) &quot;-10000&quot;</span><br><span class="line"> 7) &quot;K&quot;</span><br><span class="line"> 8) &quot;10000&quot;</span><br><span class="line"> 9) &quot;A&quot;</span><br><span class="line">10) &quot;20000&quot;</span><br><span class="line">11) &quot;G&quot;</span><br><span class="line">12) &quot;30000&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary -inf inf withscores limit 4 2</span><br><span class="line">1) &quot;G&quot;</span><br><span class="line">2) &quot;30000&quot;</span><br><span class="line">3) &quot;K&quot;</span><br><span class="line">4) &quot;60000&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>删除key的有序集合中的一个或多个成员</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrem &lt;key&gt; member [member ...]</span><br></pre></td></tr></table></figure>



<h3 id="7-2-三种特殊类型"><a href="#7-2-三种特殊类型" class="headerlink" title="7.2 三种特殊类型"></a>7.2 三种特殊类型</h3><h4 id="7-2-1-Geospatial"><a href="#7-2-1-Geospatial" class="headerlink" title="7.2.1 Geospatial"></a>7.2.1 Geospatial</h4><p>Geospatial，地理空间，简称GEO，主要用于存储地理位置信息，并对存储的信息进行操作。</p>
<blockquote>
<p>操作方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">geoadd</td>
<td align="center">添加地理位置的坐标</td>
</tr>
<tr>
<td align="center">geopos</td>
<td align="center">获取地理位置的坐标</td>
</tr>
<tr>
<td align="center">geodist</td>
<td align="center">计算两个位置之间的距离</td>
</tr>
<tr>
<td align="center">georadius</td>
<td align="center">根据用户给定的经纬度坐标来获取指定范围内的地理位置集合</td>
</tr>
<tr>
<td align="center">georadiusbymember</td>
<td align="center">根据储存在位置集合里面的某个地点获取指定范围内的地理位置集合</td>
</tr>
<tr>
<td align="center">geohash</td>
<td align="center">返回一个或者多个位置对象的geohash值</td>
</tr>
</tbody></table>
<p>查询地理数据：<a href="http://www.jsons.cn/lngcode/">城市经纬度查询</a></p>
<blockquote>
<p>测试数据</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">地方</th>
<th align="center">经度</th>
<th align="center">纬度</th>
</tr>
</thead>
<tbody><tr>
<td align="center">黄冈市黄梅县</td>
<td align="center">115.94427</td>
<td align="center">30.07033</td>
</tr>
<tr>
<td align="center">武汉市武昌区</td>
<td align="center">114.31589</td>
<td align="center">30.55389</td>
</tr>
<tr>
<td align="center">北京市丰台区</td>
<td align="center">116.28625</td>
<td align="center">39.8585</td>
</tr>
<tr>
<td align="center">上海市黄浦区</td>
<td align="center">121.49295</td>
<td align="center">31.22337</td>
</tr>
<tr>
<td align="center">合肥市蜀山区</td>
<td align="center">117.26104</td>
<td align="center">31.85117</td>
</tr>
<tr>
<td align="center">深圳市南山区</td>
<td align="center">113.93029</td>
<td align="center">22.53291</td>
</tr>
<tr>
<td align="center">大连市中山区</td>
<td align="center">121.64465</td>
<td align="center">38.91859</td>
</tr>
<tr>
<td align="center">广州市天河区</td>
<td align="center">113.36112</td>
<td align="center">23.12467</td>
</tr>
</tbody></table>
<p>==geoadd==</p>
<blockquote>
<p>描述</p>
</blockquote>
<p>geoadd用于存储指定的地理位置空间，可以将一个或多个经度(longitude)、纬度(latitude)、位置名称(member)添加到指定的key中。</p>
<blockquote>
<p>语法</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">geoadd &lt;key&gt; longitude latitude member [longtitude latitude member ...]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>规则</p>
</blockquote>
<ul>
<li>两级无法直接添加</li>
<li>有效经度：-180 - 180</li>
<li>有效纬度：-85.05112878 - 85.05112878</li>
</ul>
<blockquote>
<p>实例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geoadd china:city 115.94427 30.07033 huanggang</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 114.31589 30.55389 wuhan</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 116.28625 39.8585 beijing</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 121.49295 31.22337 shanghai</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 117.26104 31.85117 hefei</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 113.93029 22.53291 shenzhen</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 121.64465 38.91859 dalian</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 113.36112 23.12467 guangzhou</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure>

<p>实际应用中，一般会把城市地理数据写在文件中，直接通过java程序一次性导入。</p>
<p>==<strong>geopos</strong>==</p>
<blockquote>
<p>描述</p>
</blockquote>
<p>geopos用于从给定的key里返回所有指定名称(member)的位置(经度和纬度)，不存在的返回nil。</p>
<blockquote>
<p>语法</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">geopos &lt;key&gt; member [member ...]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>实例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geopos china:city huanggang shenzhen shanghai </span><br><span class="line">1) 1) &quot;115.94427019357681274&quot;</span><br><span class="line">   2) &quot;30.07033115798519418&quot;</span><br><span class="line">2) 1) &quot;113.93029063940048218&quot;</span><br><span class="line">   2) &quot;22.53290942281488896&quot;</span><br><span class="line">3) 1) &quot;121.49295061826705933&quot;</span><br><span class="line">   2) &quot;31.22337074392616074&quot;</span><br></pre></td></tr></table></figure>



<p>==<strong>geodist</strong>==</p>
<blockquote>
<p>描述</p>
</blockquote>
<p>geodist用于计算两个给定位置之间的距离。</p>
<blockquote>
<p>语法</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">geodist &lt;key&gt; member1 member2 [m|km|ft|mi]</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>member1和member2为两个地理位置</li>
<li>m：米，默认位置</li>
<li>km：千米</li>
<li>mi：英里</li>
<li>ft：英尺</li>
</ul>
<blockquote>
<p>实例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geodist china:city huanggang shenzhen</span><br><span class="line">&quot;862016.4959&quot;</span><br><span class="line">127.0.0.1:6379&gt; geodist china:city huanggang hefei km</span><br><span class="line">&quot;234.5308&quot;</span><br><span class="line">127.0.0.1:6379&gt; geodist china:city shanghai dalian mi</span><br><span class="line">&quot;531.9085&quot;</span><br></pre></td></tr></table></figure>



<p>==<strong>georadius</strong>==</p>
<blockquote>
<p>描述</p>
</blockquote>
<p>给定一个中心的地理位置(经度和纬度)，给定一个最大距离，返回给定的key包含的位置元素中，与中心的距离不超过最大距离的所有位置元素。</p>
<blockquote>
<p>语法</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">georadius &lt;key&gt; longitude latitude radius m|km|ft|mi [withcoord] [withdist] [withhash] [count] [asc|desc] [store key] [storedist key]</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li><p>longitude：给定中心的经度</p>
</li>
<li><p>latitude：给定中心的纬度</p>
</li>
<li><p>radius：给定的最大距离</p>
</li>
<li><p>withcoord：返回+(位置元素的经度和纬度)</p>
</li>
<li><p>withdist：返回+(位置元素与中心之间的距离)</p>
</li>
<li><p>withhash：以 52 位有符号整数的形式， 返回位置元素经过原始 geohash 编码的有序集合分值。 这个选项主要用于底层应用或者调试， 实际中的作用并不大。</p>
</li>
<li><p>count：限定返回的记录数量</p>
</li>
<li><p>asc：查找结果根据距离从小到大排序</p>
</li>
<li><p>desc：查找结果根据距离从大到小排序</p>
</li>
</ul>
<blockquote>
<p>实例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看距离广州不大于1000km的城市</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 113.36112 23.12467 1000 km asc</span><br><span class="line">1) &quot;guangzhou&quot;</span><br><span class="line">2) &quot;shenzhen&quot;</span><br><span class="line">3) &quot;huanggang&quot;</span><br><span class="line">4) &quot;wuhan&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看距离武汉不大于1000km的城市，从大到小，限制5个，并且显示距离和城市经纬度</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 114.31589 30.55389 1000 km withcoord withdist count 5 desc </span><br><span class="line">1) 1) &quot;shenzhen&quot;</span><br><span class="line">   2) &quot;892.9663&quot;</span><br><span class="line">   3) 1) &quot;113.93029063940048218&quot;</span><br><span class="line">      2) &quot;22.53290942281488896&quot;</span><br><span class="line">2) 1) &quot;guangzhou&quot;</span><br><span class="line">   2) &quot;831.7263&quot;</span><br><span class="line">   3) 1) &quot;113.36112052202224731&quot;</span><br><span class="line">      2) &quot;23.12467049411647935&quot;</span><br><span class="line">3) 1) &quot;shanghai&quot;</span><br><span class="line">   2) &quot;688.9652&quot;</span><br><span class="line">   3) 1) &quot;121.49295061826705933&quot;</span><br><span class="line">      2) &quot;31.22337074392616074&quot;</span><br><span class="line">4) 1) &quot;hefei&quot;</span><br><span class="line">   2) &quot;315.1437&quot;</span><br><span class="line">   3) 1) &quot;117.26104170083999634&quot;</span><br><span class="line">      2) &quot;31.85117048067123591&quot;</span><br><span class="line">5) 1) &quot;huanggang&quot;</span><br><span class="line">   2) &quot;165.3475&quot;</span><br><span class="line">   3) 1) &quot;115.94427019357681274&quot;</span><br><span class="line">      2) &quot;30.07033115798519418&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看距离北京不大于1500km的城市</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 116.28625 39.8585 1500 km withdist asc</span><br><span class="line">1) 1) &quot;beijing&quot;</span><br><span class="line">   2) &quot;0.0002&quot;</span><br><span class="line">2) 1) &quot;dalian&quot;</span><br><span class="line">   2) &quot;472.2545&quot;</span><br><span class="line">3) 1) &quot;hefei&quot;</span><br><span class="line">   2) &quot;894.9324&quot;</span><br><span class="line">4) 1) &quot;wuhan&quot;</span><br><span class="line">   2) &quot;1050.2106&quot;</span><br><span class="line">5) 1) &quot;shanghai&quot;</span><br><span class="line">   2) &quot;1069.3051&quot;</span><br><span class="line">6) 1) &quot;huanggang&quot;</span><br><span class="line">   2) &quot;1089.1453&quot;</span><br></pre></td></tr></table></figure>



<p>==<strong>georadiusbymember</strong>==</p>
<blockquote>
<p>描述</p>
</blockquote>
<p>georadiusbymember 和 georadius命令一样， 都可以找出位于指定范围内的元素， 但是 georadiusbymember 的中心点是只能从key中的位置元素选。</p>
<blockquote>
<p>语法</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">georadiusbymember &lt;key&gt; member radius m|km|ft|mi [withcoord] [withdist] [withhash] [count] [asc|desc] [store key] [storedist key]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>实例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看距离黄冈不大于900km的城市</span></span><br><span class="line">127.0.0.1:6379&gt; georadiusbymember china:city huanggang 900 km withdist asc</span><br><span class="line">1) 1) &quot;huanggang&quot;</span><br><span class="line">   2) &quot;0.0000&quot;</span><br><span class="line">2) 1) &quot;wuhan&quot;</span><br><span class="line">   2) &quot;165.3475&quot;</span><br><span class="line">3) 1) &quot;hefei&quot;</span><br><span class="line">   2) &quot;234.5308&quot;</span><br><span class="line">4) 1) &quot;shanghai&quot;</span><br><span class="line">   2) &quot;546.1566&quot;</span><br><span class="line">5) 1) &quot;guangzhou&quot;</span><br><span class="line">   2) &quot;814.0494&quot;</span><br><span class="line">6) 1) &quot;shenzhen&quot;</span><br><span class="line">   2) &quot;862.0165&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看距离深圳不大于2000km的城市</span></span><br><span class="line">127.0.0.1:6379&gt; georadiusbymember china:city shenzhen 2000 km withdist desc</span><br><span class="line">1) 1) &quot;dalian&quot;</span><br><span class="line">   2) &quot;1964.1097&quot;</span><br><span class="line">2) 1) &quot;beijing&quot;</span><br><span class="line">   2) &quot;1939.8454&quot;</span><br><span class="line">3) 1) &quot;shanghai&quot;</span><br><span class="line">   2) &quot;1222.7809&quot;</span><br><span class="line">4) 1) &quot;hefei&quot;</span><br><span class="line">   2) &quot;1087.3585&quot;</span><br><span class="line">5) 1) &quot;wuhan&quot;</span><br><span class="line">   2) &quot;892.9663&quot;</span><br><span class="line">6) 1) &quot;huanggang&quot;</span><br><span class="line">   2) &quot;862.0165&quot;</span><br><span class="line">7) 1) &quot;guangzhou&quot;</span><br><span class="line">   2) &quot;87.9580&quot;</span><br><span class="line">8) 1) &quot;shenzhen&quot;</span><br><span class="line">   2) &quot;0.0000&quot;</span><br></pre></td></tr></table></figure>



<p>==<strong>geohash</strong>==</p>
<blockquote>
<p>描述</p>
</blockquote>
<p>geohash用于获取一个或多个位置元素的geohash值。</p>
<blockquote>
<p>实质</p>
</blockquote>
<p><strong>降维打击</strong>：将二维的经纬度转换为一维的字符串</p>
<p>如果两个字符串越接近，那么距离越近。</p>
<blockquote>
<p>语法</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">geohash &lt;key&gt; member [member ...]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>实例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geohash china:city huanggang beijing hefei</span><br><span class="line">1) &quot;wt67n6hh3k0&quot;</span><br><span class="line">2) &quot;wx4dy0j0d40&quot;</span><br><span class="line">3) &quot;wtemhq6fs20&quot;</span><br></pre></td></tr></table></figure>



<p>==<strong>Other</strong>==</p>
<blockquote>
<p>GEO</p>
</blockquote>
<p>GEO的底层原理就是Sorted Set，因此我们可以使用Sorted Set命令来操作GEO。</p>
<blockquote>
<p>实例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看地图中全部元素</span></span><br><span class="line">127.0.0.1:6379&gt; zrange china:city 0 -1</span><br><span class="line">1) &quot;shenzhen&quot;</span><br><span class="line">2) &quot;guangzhou&quot;</span><br><span class="line">3) &quot;wuhan&quot;</span><br><span class="line">4) &quot;huanggang&quot;</span><br><span class="line">5) &quot;hefei&quot;</span><br><span class="line">6) &quot;shanghai&quot;</span><br><span class="line">7) &quot;beijing&quot;</span><br><span class="line">8) &quot;dalian&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 移除大连这个城市</span></span><br><span class="line">127.0.0.1:6379&gt; zrem china:city dalian</span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 按照分数给城市排名</span></span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore china:city -inf inf withscores</span><br><span class="line"> 1) &quot;shenzhen&quot;</span><br><span class="line"> 2) &quot;4046431599170567&quot;</span><br><span class="line"> 3) &quot;guangzhou&quot;</span><br><span class="line"> 4) &quot;4046534293000673&quot;</span><br><span class="line"> 5) &quot;wuhan&quot;</span><br><span class="line"> 6) &quot;4051938129491420&quot;</span><br><span class="line"> 7) &quot;huanggang&quot;</span><br><span class="line"> 8) &quot;4052334404505800&quot;</span><br><span class="line"> 9) &quot;hefei&quot;</span><br><span class="line">10) &quot;4052764524670284&quot;</span><br><span class="line">11) &quot;shanghai&quot;</span><br><span class="line">12) &quot;4054757680623470&quot;</span><br><span class="line">13) &quot;beijing&quot;</span><br><span class="line">14) &quot;4069146323276357&quot;</span><br></pre></td></tr></table></figure>



<h4 id="7-2-2-HyperLogLog"><a href="#7-2-2-HyperLogLog" class="headerlink" title="7.2.2 HyperLogLog"></a>7.2.2 HyperLogLog</h4><p>HyperLogLog，Redis中基数统计的算法。</p>
<blockquote>
<p>优点</p>
</blockquote>
<p>占用内存固定且较小。每个HyperLogLog键占用12KB内存，可以计算2^64^个不同元素的基数。</p>
<blockquote>
<p>基数</p>
</blockquote>
<p>一个数据集中不重复元素的数量</p>
<blockquote>
<p>应用场景</p>
</blockquote>
<p>统计网站UV</p>
<p>传统方式：使用set保存用户id，set的元素数量可作为标准判断。</p>
<p>这个方式如果保存大量的用户id，就会比较麻烦，目的是计数，而非保存用户id。</p>
<p>使用HyperLogLog会有**0.81%**的错误率，这个在统计UV任务中是可以接受的。</p>
<blockquote>
<p>操作方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">pfadd &lt;key&gt; element [element …]</td>
<td align="center">添加指定元素到HyperLogLog中</td>
</tr>
<tr>
<td align="center">pfcount &lt;key&gt;</td>
<td align="center">返回给定HyperLogLog的基数估算值</td>
</tr>
<tr>
<td align="center">pfmerge &lt;destkey&gt; &lt;key&gt; [key…]</td>
<td align="center">将多个HyperLogLog合并为一个HyperLogLog</td>
</tr>
</tbody></table>
<blockquote>
<p>实例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建第一组元素</span></span><br><span class="line">127.0.0.1:6379&gt; pfadd hyper K H I G H N E S S </span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 统计第一组元素基数</span></span><br><span class="line">127.0.0.1:6379&gt; pfcount hyper</span><br><span class="line">(integer) 7</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建第二组元素</span></span><br><span class="line">127.0.0.1:6379&gt; pfadd hyper2 P A R A K</span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 统计第二组元素基数</span></span><br><span class="line">127.0.0.1:6379&gt; pfcount hyper2</span><br><span class="line">(integer) 4</span><br><span class="line"><span class="meta">#</span><span class="bash"> 合并两组元素</span></span><br><span class="line">127.0.0.1:6379&gt; pfmerge hyper hyper hyper2</span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span><span class="bash"> 统计所有元素基数</span></span><br><span class="line">127.0.0.1:6379&gt; pfcount hyper</span><br><span class="line">(integer) 10</span><br></pre></td></tr></table></figure>





<h4 id="7-1-3-Bitmaps"><a href="#7-1-3-Bitmaps" class="headerlink" title="7.1.3 Bitmaps"></a>7.1.3 Bitmaps</h4><p>Bitmaps，位图，操作二进制位来进行记录，只有0和1两个状态。</p>
<blockquote>
<p>应用场景</p>
</blockquote>
<p>统计用户活跃度，打卡，两个状态的都可以使用Bitmaps。</p>
<blockquote>
<p>操作方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">setbit &lt;key&gt; offset value</td>
<td align="center">设置值</td>
</tr>
<tr>
<td align="center">getbit &lt;key&gt;  offset</td>
<td align="center">获取值</td>
</tr>
<tr>
<td align="center">bitcount &lt;key&gt; start end</td>
<td align="center">获取Bitmaps指定范围值为1的个数</td>
</tr>
<tr>
<td align="center">bitop and|or|not|xor &lt;destkey&gt; key [key …]</td>
<td align="center">Bitmaps的集合运算</td>
</tr>
</tbody></table>
<blockquote>
<p>实例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打卡 0-6:周一-周日</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2020年第一周打卡</span></span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:1 0 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:1 1 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:1 2 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:1 3 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:1 4 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:1 5 0</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:1 6 0</span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2020年第二周打卡</span></span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:2 0 0</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:2 1 0</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:2 2 0</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:2 3 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:2 4 0</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:2 5 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:2 6 1</span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查打卡</span></span><br><span class="line">127.0.0.1:6379&gt; getbit 2020:week:1 3</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; getbit 2020:week:2 1</span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 统计打卡</span></span><br><span class="line">127.0.0.1:6379&gt; bitcount 2020:week:1</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; bitcount 2020:week:2</span><br><span class="line">(integer) 3</span><br><span class="line"><span class="meta">#</span><span class="bash"> 对两周打卡结果取并集</span></span><br><span class="line">127.0.0.1:6379&gt; bitop and andres 2020:week:1 2020:week:2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; bitcount andres</span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 对两周打卡结果取交集</span></span><br><span class="line">127.0.0.1:6379&gt; bitop or orres 2020:week:1 2020:week:2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; bitcount orres</span><br><span class="line">(integer) 7</span><br></pre></td></tr></table></figure>



<h2 id="8-Redis事务"><a href="#8-Redis事务" class="headerlink" title="8. Redis事务"></a>8. Redis事务</h2><p>==Redis单条命令执行具有原子性，但是事务不保证原子性。==</p>
<blockquote>
<p>事务</p>
</blockquote>
<p>一组命令的队列</p>
<blockquote>
<p>特征</p>
</blockquote>
<ul>
<li>一次性</li>
<li>顺序性</li>
<li>排他性</li>
</ul>
<blockquote>
<p>redis事务的三个阶段</p>
</blockquote>
<ul>
<li>开始事务 (multi)</li>
<li>命令入队 (…)</li>
<li>执行事务 (exec)</li>
</ul>
<blockquote>
<p>操作方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">discard</td>
<td align="center">取消事务，放弃执行事务块内的所有命令</td>
</tr>
<tr>
<td align="center">exec</td>
<td align="center">执行事务块内的所有命令</td>
</tr>
<tr>
<td align="center">multi</td>
<td align="center">标记一个事务的开始</td>
</tr>
<tr>
<td align="center">unwatch</td>
<td align="center">取消watch命令对所有key的监视</td>
</tr>
<tr>
<td align="center">watch</td>
<td align="center">监视一个或多个key，如果在事务执行之前这个或这些key被其他命令锁改动，那么事务将被打断</td>
</tr>
</tbody></table>
<blockquote>
<p>实例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 开启事务</span></span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令入队</span></span><br><span class="line">127.0.0.1:6379&gt; set k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 v2 </span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; mget k1 k2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; getset k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">QUEUED</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行事务</span></span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) 1) &quot;v1&quot;</span><br><span class="line">   2) &quot;v2&quot;</span><br><span class="line">4) &quot;v3&quot;</span><br><span class="line">5) &quot;v3&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>异常</p>
</blockquote>
<ul>
<li>命令异常：命令存在错误，所有命令都不会被执行</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; getset k3 # 错误命令</span><br><span class="line">(error) ERR wrong number of arguments for &#x27;getset&#x27; command</span><br><span class="line">127.0.0.1:6379&gt; set k4 v4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec # 执行事务报错</span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class="line">127.0.0.1:6379&gt; get k1 # 所有命令都未被执行</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>

<ul>
<li>运行异常：错误操作的命令抛出异常，其他命令正常执行</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incr k1 # 错误操作</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec # 执行事务仅错误操作执行失败，其他命令执行成功</span><br><span class="line">1) OK</span><br><span class="line">2) (error) ERR value is not an integer or out of range</span><br><span class="line">3) OK</span><br><span class="line">127.0.0.1:6379&gt; mget k1 k2</span><br><span class="line">1) &quot;v1&quot;</span><br><span class="line">2) &quot;v2&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>监控</p>
</blockquote>
<ul>
<li>悲观锁：很悲观，认为什么时候都会出问题，无论做什么都会加锁。</li>
<li>乐观锁：很乐观，认为什么时候都不会出问题，所以不会上锁。更新数据的时候会比较version，判断数据是否更新过。</li>
<li>watch的本质：select version，一旦发现监视的数据version改变，事务将被打断。</li>
</ul>
<blockquote>
<p>实例1-watch的监控测试</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 个人财务</span></span><br><span class="line">127.0.0.1:6379&gt; set money 100</span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span><span class="bash"> 个人支出</span></span><br><span class="line">127.0.0.1:6379&gt; set out 0</span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span><span class="bash"> 监控财务</span></span><br><span class="line">127.0.0.1:6379&gt; watch money </span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启事务</span></span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span><span class="bash"> 消费10元</span></span><br><span class="line">127.0.0.1:6379&gt; decrby money 30</span><br><span class="line">QUEUED</span><br><span class="line"><span class="meta">#</span><span class="bash"> 支出增加</span></span><br><span class="line">127.0.0.1:6379&gt; incrby out 30</span><br><span class="line">QUEUED</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行事务</span></span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">1) (integer) 70</span><br><span class="line">2) (integer) 30</span><br></pre></td></tr></table></figure>

<blockquote>
<p>实例2-watch的多线程测试，watch可以当做redis的乐观锁操作</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 线程1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 监控财务</span></span><br><span class="line">127.0.0.1:6379&gt; watch money</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span><span class="bash"> 消费10元</span></span><br><span class="line">127.0.0.1:6379&gt; decrby money 10</span><br><span class="line">QUEUED</span><br><span class="line"><span class="meta">#</span><span class="bash"> 支出增加</span></span><br><span class="line">127.0.0.1:6379&gt; incrby out 10</span><br><span class="line">QUEUED</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行之前线程2修改了财务，这个时候就会导致事务执行失败</span></span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">(nil)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 线程2 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行在线程1的事务<span class="built_in">exec</span>之前</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询财务</span></span><br><span class="line">127.0.0.1:6379&gt; get money</span><br><span class="line">&quot;70&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 充值1000</span></span><br><span class="line">127.0.0.1:6379&gt; incrby money 1000</span><br><span class="line">(integer) 1070</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 线程1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行在线程1的事务<span class="built_in">exec</span>之后</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1、如果发现事务执行失败，就先解锁</span></span><br><span class="line">127.0.0.1:6379&gt; unwatch </span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、获取最新的值，再次监视</span></span><br><span class="line">127.0.0.1:6379&gt; watch money</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; decrby money 50</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby out 50</span><br><span class="line">QUEUED</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、对比监视的值是否发生了变化</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果没有变化，那么可以执行成功，否则执行失败</span></span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">1) (integer) 1020</span><br><span class="line">2) (integer) 80</span><br></pre></td></tr></table></figure>



<h2 id="9-Jedis"><a href="#9-Jedis" class="headerlink" title="9. Jedis"></a>9. Jedis</h2><p>Jedis是Redis官方推荐的Java连接开发工具。</p>
<p>Jedis中的所有api就对应Redis中的所有命令。</p>
<h3 id="9-1-导入依赖"><a href="#9-1-导入依赖" class="headerlink" title="9.1 导入依赖"></a>9.1 导入依赖</h3><blockquote>
<p>pom.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.parak<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>KHighness<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span>&gt;</span>parakovo@gmail.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fastjson.version</span>&gt;</span>1.2.68<span class="tag">&lt;/<span class="name">fastjson.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jackson.version</span>&gt;</span>2.11.0<span class="tag">&lt;/<span class="name">jackson.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jedis.version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">jedis.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Springboot-Web  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Test --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Springboot-Aop  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Springboot-Redis  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- SpringCloud-Context --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Fastjson --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;fastjson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Jackson --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Lombok --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Jedis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jedis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="9-2-编码测试"><a href="#9-2-编码测试" class="headerlink" title="9.2 编码测试"></a>9.2 编码测试</h3><h4 id="9-2-1-Ping测试"><a href="#9-2-1-Ping测试" class="headerlink" title="9.2.1 Ping测试"></a>9.2.1 Ping测试</h4><blockquote>
<p>Ping.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j2;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/11 17:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: 测试链接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ping</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        log.info(jedis.ping());</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">17:52:31.303 [main] INFO top.parak.jedis.Ping - PONG</span><br></pre></td></tr></table></figure>



<h4 id="9-2-1-GEO-api测试"><a href="#9-2-1-GEO-api测试" class="headerlink" title="9.2.1 GEO-api测试"></a>9.2.1 GEO-api测试</h4><blockquote>
<p>city.txt</p>
</blockquote>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">huanggang    115.94427    30.07033</span><br><span class="line">wuhan        114.31589    30.55389</span><br><span class="line">beijing      116.28625    39.8585</span><br><span class="line">shanghai     121.49295    31.22337</span><br><span class="line">hefei        117.26104    31.85117</span><br><span class="line">shenzhen     113.93029    22.53291</span><br><span class="line">dalian       121.64465    38.91859</span><br><span class="line">guangzhou    113.36112    23.12467</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Geo.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j2;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.ResourceUtils;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.GeoCoordinate;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.GeoUnit;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.params.GeoRadiusParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/11 17:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: 测试Geospatial</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Geo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取文件将地理数据写进redis</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readAndWriteIntoRedis</span><span class="params">(String path, Jedis jedis)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">        FileChannel channel = fileInputStream.getChannel();</span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">512</span>);</span><br><span class="line">        channel.read(byteBuffer);</span><br><span class="line">        String[] res = <span class="keyword">new</span> String(byteBuffer.array()).split(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        Map&lt;String, GeoCoordinate&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Arrays.stream(res).forEach(s -&gt; &#123;</span><br><span class="line">            <span class="comment">// 使用正则\s+匹配多个空格，分割字符串</span></span><br><span class="line">            String[] ss = s.split(<span class="string">&quot;\\s+&quot;</span>);</span><br><span class="line">            map.put(ss[<span class="number">0</span>], <span class="keyword">new</span> GeoCoordinate(Double.valueOf(ss[<span class="number">1</span>]), Double.valueOf(ss[<span class="number">2</span>])));</span><br><span class="line">        &#125;);</span><br><span class="line">        jedis.geoadd(<span class="string">&quot;china:city&quot;</span>, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        readAndWriteIntoRedis(ResourceUtils.getFile(<span class="string">&quot;src/main/resources/city.txt&quot;</span>).getAbsolutePath(), jedis);</span><br><span class="line">        log.info(<span class="string">&quot;==========地图中的所有城市==========&quot;</span>);</span><br><span class="line">        jedis.zrange(<span class="string">&quot;china:city&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>).stream().forEach(s -&gt; &#123; log.info(s + <span class="string">&quot; &quot;</span>); &#125;);</span><br><span class="line">        log.info(<span class="string">&quot;==========查询黄冈的经纬度==========&quot;</span>);</span><br><span class="line">        log.info(jedis.geopos(<span class="string">&quot;china:city&quot;</span>, <span class="string">&quot;huanggang&quot;</span>));</span><br><span class="line">        log.info(<span class="string">&quot;==========查询距离杭州不超过1000km的城市==========&quot;</span>);</span><br><span class="line">        GeoRadiusParam geoRadiusParam = <span class="keyword">new</span> GeoRadiusParam();</span><br><span class="line">        geoRadiusParam.withCoord().withDist().sortAscending();</span><br><span class="line">        jedis.georadius(<span class="string">&quot;china:city&quot;</span>, <span class="number">120.153576</span>, <span class="number">30.287459</span>, <span class="number">1000</span>, GeoUnit.KM, geoRadiusParam).forEach( c -&gt; &#123;</span><br><span class="line">            log.info(<span class="string">&quot;城市名称：&#123;&#125;, 经纬度：&#123;&#125;，距离：&#123;&#125;KM&quot;</span>, c.getMemberByString(), c.getCoordinate(), c.getDistance());</span><br><span class="line">        &#125;);</span><br><span class="line">        log.info(<span class="string">&quot;==========查询距离武汉不超过1000KM的城市==========&quot;</span>);</span><br><span class="line">        jedis.georadiusByMember(<span class="string">&quot;china:city&quot;</span>, <span class="string">&quot;wuhan&quot;</span>, <span class="number">1000</span>, GeoUnit.KM, geoRadiusParam).forEach( c -&gt; &#123;</span><br><span class="line">            log.info(<span class="string">&quot;城市名称：&#123;&#125;, 经纬度：&#123;&#125;，距离：&#123;&#125;KM&quot;</span>, c.getMemberByString(), c.getCoordinate(), c.getDistance());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">20:21:02.671 [main] INFO top.parak.jedis.Geo - ==========地图中的所有城市==========</span><br><span class="line">20:21:02.718 [main] INFO top.parak.jedis.Geo - shenzhen </span><br><span class="line">20:21:02.718 [main] INFO top.parak.jedis.Geo - guangzhou </span><br><span class="line">20:21:02.718 [main] INFO top.parak.jedis.Geo - wuhan </span><br><span class="line">20:21:02.718 [main] INFO top.parak.jedis.Geo - huanggang </span><br><span class="line">20:21:02.718 [main] INFO top.parak.jedis.Geo - hefei </span><br><span class="line">20:21:02.718 [main] INFO top.parak.jedis.Geo - shanghai </span><br><span class="line">20:21:02.718 [main] INFO top.parak.jedis.Geo - beijing </span><br><span class="line">20:21:02.718 [main] INFO top.parak.jedis.Geo - dalian </span><br><span class="line">20:21:02.718 [main] INFO top.parak.jedis.Geo - ==========查询黄冈的经纬度==========</span><br><span class="line">20:21:02.720 [main] INFO top.parak.jedis.Geo - [(115.94427019357681,30.070331157985194)]</span><br><span class="line">20:21:02.721 [main] INFO top.parak.jedis.Geo - ==========查询距离杭州不超过1000km的城市==========</span><br><span class="line">20:21:02.724 [main] INFO top.parak.jedis.Geo - 城市名称：shanghai, 经纬度：(121.49295061826706,31.22337074392616)，距离：165.0KM</span><br><span class="line">20:21:02.724 [main] INFO top.parak.jedis.Geo - 城市名称：hefei, 经纬度：(117.26104170084,31.851170480671236)，距离：325.8468KM</span><br><span class="line">20:21:02.725 [main] INFO top.parak.jedis.Geo - 城市名称：huanggang, 经纬度：(115.94427019357681,30.070331157985194)，距离：405.4241KM</span><br><span class="line">20:21:02.725 [main] INFO top.parak.jedis.Geo - 城市名称：wuhan, 经纬度：(114.31589037179947,30.55389005243692)，距离：560.6357KM</span><br><span class="line">20:21:02.725 [main] INFO top.parak.jedis.Geo - 城市名称：dalian, 经纬度：(121.64465099573135,38.91858901014995)，距离：969.6213KM</span><br><span class="line">20:21:02.725 [main] INFO top.parak.jedis.Geo - ==========查询距离武汉不超过1000KM的城市==========</span><br><span class="line">20:21:02.725 [main] INFO top.parak.jedis.Geo - 城市名称：wuhan, 经纬度：(114.31589037179947,30.55389005243692)，距离：0.0KM</span><br><span class="line">20:21:02.725 [main] INFO top.parak.jedis.Geo - 城市名称：huanggang, 经纬度：(115.94427019357681,30.070331157985194)，距离：165.3475KM</span><br><span class="line">20:21:02.726 [main] INFO top.parak.jedis.Geo - 城市名称：hefei, 经纬度：(117.26104170084,31.851170480671236)，距离：315.1437KM</span><br><span class="line">20:21:02.726 [main] INFO top.parak.jedis.Geo - 城市名称：shanghai, 经纬度：(121.49295061826706,31.22337074392616)，距离：688.9652KM</span><br><span class="line">20:21:02.726 [main] INFO top.parak.jedis.Geo - 城市名称：guangzhou, 经纬度：(113.36112052202225,23.12467049411648)，距离：831.7263KM</span><br><span class="line">20:21:02.726 [main] INFO top.parak.jedis.Geo - 城市名称：shenzhen, 经纬度：(113.93029063940048,22.53290942281489)，距离：892.9663KM</span><br></pre></td></tr></table></figure>



<h4 id="9-2-2-Hyper-api测试"><a href="#9-2-2-Hyper-api测试" class="headerlink" title="9.2.2 Hyper-api测试"></a>9.2.2 Hyper-api测试</h4><blockquote>
<p>Hyper.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j2;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/11 20:26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: 测试hyper</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hyper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        jedis.pfadd(<span class="string">&quot;hyper1&quot;</span>, <span class="string">&quot;K&quot;</span>, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;I&quot;</span>, <span class="string">&quot;G&quot;</span>, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;N&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;S&quot;</span>, <span class="string">&quot;S&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;hyper1中的元素基数：&#123;&#125;&quot;</span>, jedis.pfcount(<span class="string">&quot;hyper1&quot;</span>));</span><br><span class="line">        jedis.pfadd(<span class="string">&quot;hyper2&quot;</span>, <span class="string">&quot;P&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;K&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;hyper2中的元素基数：&#123;&#125;&quot;</span>, jedis.pfcount(<span class="string">&quot;hyper2&quot;</span>));</span><br><span class="line">        jedis.pfmerge(<span class="string">&quot;hyper&quot;</span>, <span class="string">&quot;hyper1&quot;</span>, <span class="string">&quot;hyper2&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;hyper1和hyper2合并后的元素基数：&#123;&#125;&quot;</span>, jedis.pfcount(<span class="string">&quot;hyper&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">20:36:20.386 [main] INFO top.parak.jedis.Hyper - hyper1中的元素基数：7</span><br><span class="line">20:36:20.390 [main] INFO top.parak.jedis.Hyper - hyper2中的元素基数：4</span><br><span class="line">20:36:20.390 [main] INFO top.parak.jedis.Hyper - hyper1和hyper2合并后的元素基数：10</span><br></pre></td></tr></table></figure>



<h4 id="9-2-3-Bitmaps-api测试"><a href="#9-2-3-Bitmaps-api测试" class="headerlink" title="9.2.3 Bitmaps-api测试"></a>9.2.3 Bitmaps-api测试</h4><blockquote>
<p>Bit.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j2;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.BitOP;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/11 20:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: 测试Bitmaps</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getChineseExpression</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">return</span> <span class="string">&quot;星期一&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> <span class="string">&quot;星期二&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">return</span> <span class="string">&quot;星期三&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">return</span> <span class="string">&quot;星期四&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>: <span class="keyword">return</span> <span class="string">&quot;星期五&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>: <span class="keyword">return</span> <span class="string">&quot;星期六&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>: <span class="keyword">return</span> <span class="string">&quot;星期日&quot;</span>;</span><br><span class="line">            <span class="keyword">default</span>: <span class="keyword">return</span> <span class="string">&quot;Error&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">// 模拟两周的打卡情况</span></span><br><span class="line">        <span class="keyword">boolean</span>[] bool1 = <span class="keyword">new</span> <span class="keyword">boolean</span>[]&#123;<span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>&#125;;</span><br><span class="line">        <span class="keyword">boolean</span>[] bool2 = <span class="keyword">new</span> <span class="keyword">boolean</span>[]&#123;<span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">false</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bool1.length; i++) &#123; jedis.setbit(<span class="string">&quot;2020:week:1&quot;</span>, i, bool1[i]); &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bool2.length; i++) &#123; jedis.setbit(<span class="string">&quot;2020:week:2&quot;</span>, i, bool2[i]); &#125;</span><br><span class="line">        log.info(<span class="string">&quot;2020年第一周的打卡天数：&#123;&#125;&quot;</span>, jedis.bitcount(<span class="string">&quot;2020:week:1&quot;</span>));</span><br><span class="line">        log.info(<span class="string">&quot;2020年第一周具体打卡情况&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bool1.length; i++) &#123; log.info(getChineseExpression(i) + <span class="string">&quot;: &quot;</span> + (jedis.getbit(<span class="string">&quot;2020:week:1&quot;</span>, i) ? <span class="string">&quot;已打卡&quot;</span> : <span class="string">&quot;未打卡&quot;</span>)); &#125;</span><br><span class="line">        log.info(<span class="string">&quot;2020年第二周的打卡天数：&#123;&#125;&quot;</span>, jedis.bitcount(<span class="string">&quot;2020:week:2&quot;</span>));</span><br><span class="line">        log.info(<span class="string">&quot;2020年第二周具体打卡情况&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bool2.length; i++) &#123; log.info(getChineseExpression(i) + <span class="string">&quot;: &quot;</span> + (jedis.getbit(<span class="string">&quot;2020:week:2&quot;</span>, i) ? <span class="string">&quot;已打卡&quot;</span> : <span class="string">&quot;未打卡&quot;</span>)); &#125;</span><br><span class="line">        jedis.bitop(BitOP.AND, <span class="string">&quot;2020:week:1and2&quot;</span>, <span class="string">&quot;2020:week:1&quot;</span>, <span class="string">&quot;2020:week:2&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;2020年第一周和第二周两天都打卡的天数：&#123;&#125;&quot;</span>, jedis.bitcount(<span class="string">&quot;2020:week:1and2&quot;</span>));</span><br><span class="line">        jedis.bitop(BitOP.OR, <span class="string">&quot;2020:week:1or2&quot;</span>, <span class="string">&quot;2020:week:1&quot;</span>, <span class="string">&quot;2020:week:2&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;2020年第一周和第二周至少有一天打卡的天数：&#123;&#125;&quot;</span>, jedis.bitcount(<span class="string">&quot;2020:week:1or2&quot;</span>));</span><br><span class="line">        jedis.bitop(BitOP.XOR,<span class="string">&quot;2020:week:1xor2&quot;</span>, <span class="string">&quot;2020:week:1&quot;</span>, <span class="string">&quot;2020:week:2&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;2020年第一周和第二周仅有一天打卡的天数：&#123;&#125;&quot;</span>, jedis.bitcount(<span class="string">&quot;2020:week:1xor2&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">21:07:40.042 [main] INFO top.parak.jedis.Bit - 2020年第一周的打卡天数：5</span><br><span class="line">21:07:40.046 [main] INFO top.parak.jedis.Bit - 2020年第一周具体打卡情况</span><br><span class="line">21:07:40.046 [main] INFO top.parak.jedis.Bit - 星期一: 已打卡</span><br><span class="line">21:07:40.046 [main] INFO top.parak.jedis.Bit - 星期二: 已打卡</span><br><span class="line">21:07:40.046 [main] INFO top.parak.jedis.Bit - 星期三: 已打卡</span><br><span class="line">21:07:40.046 [main] INFO top.parak.jedis.Bit - 星期四: 已打卡</span><br><span class="line">21:07:40.046 [main] INFO top.parak.jedis.Bit - 星期五: 已打卡</span><br><span class="line">21:07:40.046 [main] INFO top.parak.jedis.Bit - 星期六: 未打卡</span><br><span class="line">21:07:40.047 [main] INFO top.parak.jedis.Bit - 星期日: 未打卡</span><br><span class="line">21:07:40.047 [main] INFO top.parak.jedis.Bit - 2020年第二周的打卡天数：3</span><br><span class="line">21:07:40.047 [main] INFO top.parak.jedis.Bit - 2020年第二周具体打卡情况</span><br><span class="line">21:07:40.047 [main] INFO top.parak.jedis.Bit - 星期一: 未打卡</span><br><span class="line">21:07:40.047 [main] INFO top.parak.jedis.Bit - 星期二: 未打卡</span><br><span class="line">21:07:40.047 [main] INFO top.parak.jedis.Bit - 星期三: 未打卡</span><br><span class="line">21:07:40.047 [main] INFO top.parak.jedis.Bit - 星期四: 已打卡</span><br><span class="line">21:07:40.047 [main] INFO top.parak.jedis.Bit - 星期五: 已打卡</span><br><span class="line">21:07:40.047 [main] INFO top.parak.jedis.Bit - 星期六: 已打卡</span><br><span class="line">21:07:40.047 [main] INFO top.parak.jedis.Bit - 星期日: 未打卡</span><br><span class="line">21:07:40.048 [main] INFO top.parak.jedis.Bit - 2020年第一周和第二周两天都打卡的天数：2</span><br><span class="line">21:07:40.048 [main] INFO top.parak.jedis.Bit - 2020年第一周和第二周至少有一天打卡的天数：6</span><br><span class="line">21:07:40.048 [main] INFO top.parak.jedis.Bit - 2020年第一周和第二周仅有一天打卡的天数：4</span><br></pre></td></tr></table></figure>



<h4 id="9-2-4-事务测试"><a href="#9-2-4-事务测试" class="headerlink" title="9.2.4 事务测试"></a>9.2.4 事务测试</h4><blockquote>
<p>Affair.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j2;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/11 21:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: 测试事务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Affair</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建json数据</span></span><br><span class="line">        JSONObject jsonObject1 = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        jsonObject1.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;KHighness&quot;</span>);</span><br><span class="line">        jsonObject1.put(<span class="string">&quot;age&quot;</span>, <span class="number">19</span>);</span><br><span class="line">        jsonObject1.put(<span class="string">&quot;constellation&quot;</span>, <span class="string">&quot;Virgo&quot;</span>);</span><br><span class="line">        jsonObject1.put(<span class="string">&quot;Hobby&quot;</span>, <span class="string">&quot;Jay&quot;</span>);</span><br><span class="line">        String json1 = jsonObject1.toJSONString();</span><br><span class="line">        JSONObject jsonObject2 = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        jsonObject2.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;BingYao&quot;</span>);</span><br><span class="line">        jsonObject2.put(<span class="string">&quot;age&quot;</span>, <span class="number">16</span>);</span><br><span class="line">        jsonObject2.put(<span class="string">&quot;constellation&quot;</span>, <span class="string">&quot;Taurus&quot;</span>);</span><br><span class="line">        jsonObject2.put(<span class="string">&quot;Hobby&quot;</span>, <span class="string">&quot;Czk&quot;</span>);</span><br><span class="line">        String json2 = jsonObject2.toJSONString();</span><br><span class="line">        jedis.set(<span class="string">&quot;user1&quot;</span>, json1);</span><br><span class="line">        jedis.set(<span class="string">&quot;user2&quot;</span>, json2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加入乐观锁</span></span><br><span class="line">        jedis.watch(<span class="string">&quot;user1&quot;</span>, <span class="string">&quot;user2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启事务</span></span><br><span class="line">        Transaction multi = jedis.multi();</span><br><span class="line">        <span class="keyword">new</span> Thread( () -&gt; &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">               multi.set(<span class="string">&quot;user1&quot;</span>, json1);</span><br><span class="line">               multi.set(<span class="string">&quot;user2&quot;</span>, json2);</span><br><span class="line">               <span class="comment">// 执行事务</span></span><br><span class="line">               multi.exec();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               <span class="comment">// 发生异常</span></span><br><span class="line">               <span class="comment">// 放弃事务</span></span><br><span class="line">               multi.discard();</span><br><span class="line">               log.info(e.getMessage());</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               <span class="comment">// 输出数据</span></span><br><span class="line">               log.info(<span class="string">&quot;user1: [&#123;&#125;]&quot;</span>, jedis.get(<span class="string">&quot;user1&quot;</span>));</span><br><span class="line">               log.info(<span class="string">&quot;user2: [&#123;&#125;]&quot;</span>, jedis.get(<span class="string">&quot;user2&quot;</span>));</span><br><span class="line">               jedis.close();</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;Multi&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 另一线程</span></span><br><span class="line">        <span class="comment">// 开启在事务之前</span></span><br><span class="line">        <span class="keyword">new</span> Thread( () -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">new</span> Affair().resetInfo1(jedis);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                log.info(e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;Other&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resetInfo1</span><span class="params">(Jedis jedis)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        JSONObject jsonObject1 = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        jsonObject1.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;KHighness&quot;</span>);</span><br><span class="line">        jsonObject1.put(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        jsonObject1.put(<span class="string">&quot;constellation&quot;</span>, <span class="string">&quot;Leo&quot;</span>);</span><br><span class="line">        jsonObject1.put(<span class="string">&quot;Hobby&quot;</span>, <span class="string">&quot;BingYao&quot;</span>);</span><br><span class="line">        String json1 = jsonObject1.toJSONString();</span><br><span class="line">        jedis.set(<span class="string">&quot;user1&quot;</span>, json1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;Other&quot; redis.clients.jedis.exceptions.JedisDataException: Cannot use Jedis when in Multi. Please use Transaction or reset jedis state.</span><br><span class="line">	at redis.clients.jedis.BinaryJedis.checkIsInMultiOrPipeline(BinaryJedis.java:1895)</span><br><span class="line">	at redis.clients.jedis.Jedis.set(Jedis.java:152)</span><br><span class="line">	at top.parak.jedis.Affair.resetInfo1(Affair.java:82)</span><br><span class="line">	at top.parak.jedis.Affair.lambda$main$1(Affair.java:66)</span><br><span class="line">	at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">22:05:18.651 [Multi] INFO top.parak.jedis.Affair - user1: [&#123;&quot;constellation&quot;:&quot;Virgo&quot;,&quot;name&quot;:&quot;KHighness&quot;,&quot;Hobby&quot;:&quot;Jay&quot;,&quot;age&quot;:19&#125;]</span><br><span class="line">22:05:18.654 [Multi] INFO top.parak.jedis.Affair - user2: [&#123;&quot;constellation&quot;:&quot;Taurus&quot;,&quot;name&quot;:&quot;BingYao&quot;,&quot;Hobby&quot;:&quot;Czk&quot;,&quot;age&quot;:16&#125;]</span><br></pre></td></tr></table></figure>



<h2 id="10-Springboot整合"><a href="#10-Springboot整合" class="headerlink" title="10. Springboot整合"></a>10. Springboot整合</h2><blockquote>
<p>⚠️notice</p>
</blockquote>
<p>在SpringBoot2.X之后，原来使用的jedis被替换为了lettuce，在windows下lettuce连接池仅支持3.2.100版本的Redis</p>
<ul>
<li><p>jedis：采用的直连，多个线程操作的话，是不安全的，如果想要避免不安全，需要使用jedis pool连接池，更像BIO模式</p>
</li>
<li><p>lettuce：底层整合Netty，实例可以在多个线程中共享，不存在线程不安全的情况，可以减少线程数据，更像NIO模式</p>
</li>
</ul>
<h3 id="10-1-源码分析"><a href="#10-1-源码分析" class="headerlink" title="10.1 源码分析"></a>10.1 源码分析</h3><blockquote>
<p>自动配置类：RedisAutoConfiguration.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(</span></span><br><span class="line"><span class="meta">    proxyBeanMethods = false</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;RedisOperations.class&#125;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;RedisProperties.class&#125;)</span></span><br><span class="line"><span class="meta">@Import(&#123;LettuceConnectionConfiguration.class, JedisConnectionConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisAutoConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(name = &#123;&quot;redisTemplate&quot;&#125;)</span> </span><br><span class="line">    <span class="comment">// ==&gt; 这个注解说明，不存在我们自定义名为redisTemplate的Bean的情况下，这个Bean才生效</span></span><br><span class="line">    <span class="comment">// ==&gt; 因此我们可以使用自定义的RedisTemplate，SpringBoot会优先使用自定义RedisTemplate</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        <span class="comment">// 默认的RedisTemplate没有过多的配置，Redis对象都需要序列化和反序列化</span></span><br><span class="line">        <span class="comment">// 两个泛型都是 Object, Obeject 的类型，我们以后使用需要强制转换成 String, Object</span></span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> RedisTemplate();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="comment">// 由于String是Redis中最常使用的类型，所以单独一个StringRedisTemplate</span></span><br><span class="line">    <span class="comment">// 所以操作String类型，直接使用StringRedisTemplate即可</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="10-2-整合使用"><a href="#10-2-整合使用" class="headerlink" title="10.2 整合使用"></a>10.2 整合使用</h3><blockquote>
<p>导入依赖：pom.xml(见上jedis)</p>
</blockquote>
<blockquote>
<p>配置环境：application.properties</p>
</blockquote>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Redis数据库索引（默认为0）</span></span><br><span class="line"><span class="meta">spring.redis.database</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"># Redis服务器地址</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="comment"># Redis服务器连接端口</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="comment"># Redis服务器连接密码（默认为空）</span></span><br><span class="line"><span class="meta">spring.redis.password</span>=<span class="string"></span></span><br><span class="line"><span class="comment"># 连接超时时间（毫秒）</span></span><br><span class="line"><span class="meta">spring.redis.timeout</span>=<span class="string">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Spring 2.X以后，使用lettuce连接池</span></span><br><span class="line"><span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.max-active</span>=<span class="string">100</span></span><br><span class="line"><span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.max-idle</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 连接池中的最小空闲连接</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.min-idle</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"># 连接超时时间</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.shutdown-timeout</span>=<span class="string">100ms</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>自定义RedisTemplate：RedisConfig.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.GenericToStringSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/7 20:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: 自定义RedisTemplate</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;redisTemplate&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Jackson2JsonRedisSerializer: 序列化object对象为json字符串</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 创建 redisTemplate 模版</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        <span class="comment">// 关联 redisConnectionFactory</span></span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="comment">// Json序列化配置</span></span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        redisTemplate.setKeySerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        objectMapper.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line">        <span class="comment">// String序列化配置</span></span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        <span class="comment">// 设置 key 的序列化方式</span></span><br><span class="line">        redisTemplate.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// 设置 value 的序列化方式</span></span><br><span class="line">        redisTemplate.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// 设置 hash 的 key 的序列化方式</span></span><br><span class="line">        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// 设置 hash 的 value 的序列化方式</span></span><br><span class="line">        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        redisTemplate.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Redis工具类：RedisUtil.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j2;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/7 21:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: Redis操作工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*==================================================================</span></span><br><span class="line"><span class="comment">    //                            common                              //</span></span><br><span class="line"><span class="comment">    ==================================================================*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功，false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(String key, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回0代表永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getExpire</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*==================================================================</span></span><br><span class="line"><span class="comment">    //                            String                              //</span></span><br><span class="line"><span class="comment">    ==================================================================*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在，false 不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 可以传一个或多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(String... key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="keyword">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.length == <span class="number">1</span>) &#123;</span><br><span class="line">                redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                redisTemplate.delete(CollectionUtils.arrayToList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key == <span class="keyword">null</span> ? <span class="keyword">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功，false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功，false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 增量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 递增后的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">incr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;增量必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 减量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 递减后的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">decr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;减量必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().decrement(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*==================================================================</span></span><br><span class="line"><span class="comment">    //                              map                               //</span></span><br><span class="line"><span class="comment">    ==================================================================*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为NULL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为NULL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hget</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title">hmget</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应的多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功，false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功，false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据，如果不存在则创建</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功，false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据，并设置时间，如果不存在则创建</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) 如果已存在的hash表有时间，这里会更新原值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功，false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash表中的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为NULL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 可以使多个 不能为NULL</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hdel</span><span class="params">(String key, Object... item)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为NULL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为NULL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在，false 不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hHasKey</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递增 如果不存在，就会创建一个，并把递增后的值返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   增量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 递增后的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hincr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   减量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 递减后的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hdecr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*==================================================================</span></span><br><span class="line"><span class="comment">    //                              set                               //</span></span><br><span class="line"><span class="comment">    ==================================================================*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> set中的所有值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">sGet</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据value从一个set中查询是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在，false 不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sHasKey</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSet</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将set数据放入缓存，并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time   时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSetAndTime</span><span class="params">(String key, <span class="keyword">long</span> time, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().add(key, values);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> set的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sGetSetSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*==================================================================</span></span><br><span class="line"><span class="comment">    //                             list                               //</span></span><br><span class="line"><span class="comment">    ==================================================================*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> list的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lGetListSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引获取list中的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引 index &gt;= 0时，0 表头，1 第二个元素，依次类推；index &lt; 0时，-1 表尾，-2 倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">lGetIndex</span><span class="params">(String key, <span class="keyword">long</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功，false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存，并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功，false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lUpdateIndex</span><span class="params">(String key, <span class="keyword">long</span> index, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除N个值为value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 移除数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lRemove</span><span class="params">(String key, <span class="keyword">long</span> count ,Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long remove = redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="10-3-api测试"><a href="#10-3-api测试" class="headerlink" title="10.3 api测试"></a>10.3 api测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> top.parak.common.RedisUtil;</span><br><span class="line"><span class="keyword">import</span> top.parak.entity.User;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j2;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringbootRedisApplicationTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;K殿下&quot;</span>);</span><br><span class="line">        log.info(redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(<span class="string">&quot;Knum&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">        log.info(stringRedisTemplate.opsForValue().increment(<span class="string">&quot;Knum&quot;</span>, <span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;KHighness&quot;</span>, <span class="number">19</span>);</span><br><span class="line">        String jsonUser = <span class="keyword">new</span> ObjectMapper().writeValueAsString(user);</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">        log.info(redisTemplate.opsForValue().get(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HashMap hashMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;name1&quot;</span>, <span class="string">&quot;KHighness&quot;</span>);</span><br><span class="line">        hashMap.put(<span class="string">&quot;name2&quot;</span>, <span class="string">&quot;ParaK&quot;</span>);</span><br><span class="line">        hashMap.put(<span class="string">&quot;name3&quot;</span>, <span class="string">&quot;FlowerK&quot;</span>);</span><br><span class="line">        redisUtil.hmset(<span class="string">&quot;K&quot;</span>, hashMap);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry k : redisUtil.hmget(<span class="string">&quot;K&quot;</span>).entrySet()) &#123;</span><br><span class="line">            log.info(k.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">                        __ __ __    _       __</span><br><span class="line">                       / <span class="comment">//_// /_  (_)___ _/ /_  ____  ___  __________</span></span><br><span class="line">                      / ,&lt;  / __ \/ / __ `/ __ \/ __ \/ _ \/ ___/ ___/</span><br><span class="line">                     / /| |/ / / / / /_/ / / / / / / /  __(__  |__  )</span><br><span class="line">                    /_/ |_/_/ /_/_/\__, /_/ /_/_/ /_/\___/____/____/</span><br><span class="line">                                  /____/</span><br><span class="line"></span><br><span class="line">                     Copyright © <span class="number">2020</span> KHighness. All Rights Reserved</span><br><span class="line"></span><br><span class="line"><span class="number">2020</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">13</span>:<span class="number">36</span>:<span class="number">35.073</span>  INFO <span class="number">18840</span> --- [           main] t.parak.SpringbootRedisApplicationTest   : No active profile set, falling back to <span class="keyword">default</span> profiles: <span class="keyword">default</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">13</span>:<span class="number">36</span>:<span class="number">35.417</span>  INFO <span class="number">18840</span> --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!</span><br><span class="line"><span class="number">2020</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">13</span>:<span class="number">36</span>:<span class="number">35.420</span>  INFO <span class="number">18840</span> --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.</span><br><span class="line"><span class="number">2020</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">13</span>:<span class="number">36</span>:<span class="number">35.445</span>  INFO <span class="number">18840</span> --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in <span class="number">10</span>ms. Found <span class="number">0</span> Redis repository interfaces.</span><br><span class="line"><span class="number">2020</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">13</span>:<span class="number">36</span>:<span class="number">35.534</span>  INFO <span class="number">18840</span> --- [           main] o.s.cloud.context.scope.GenericScope     : BeanFactory id=<span class="number">8d</span>774ca9-<span class="number">71</span>ca-<span class="number">37</span>a9-<span class="number">91e1</span>-<span class="number">35</span>cd9af79e44</span><br><span class="line"><span class="number">2020</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">13</span>:<span class="number">36</span>:<span class="number">35.699</span>  INFO <span class="number">18840</span> --- [           main] trationDelegate$BeanPostProcessorChecker : Bean <span class="string">&#x27;org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration&#x27;</span> of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$<span class="number">67</span>ea5b63] <span class="function">is not eligible <span class="keyword">for</span> getting processed by all <span class="title">BeanPostProcessors</span> <span class="params">(<span class="keyword">for</span> example: not eligible <span class="keyword">for</span> auto-proxying)</span></span></span><br><span class="line"><span class="function">2020-10-12 13:36:36.483  INFO 18840 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService &#x27;applicationTaskExecutor&#x27;</span></span><br><span class="line"><span class="function">2020-10-12 13:36:36.818  INFO 18840 --- [           main] t.parak.SpringbootRedisApplicationTest   : Started SpringbootRedisApplicationTest in 2.287 <span class="title">seconds</span> <span class="params">(JVM running <span class="keyword">for</span> <span class="number">3.29</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2020-10-12 13:36:37.191  INFO 18840 --- [           main] io.lettuce.core.EpollProvider            : Starting without optional epoll library</span></span><br><span class="line"><span class="function">2020-10-12 13:36:37.192  INFO 18840 --- [           main] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library</span></span><br><span class="line"><span class="function">2020-10-12 13:36:37.740  INFO 18840 --- [           main] t.parak.SpringbootRedisApplicationTest   : K殿下</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2020-10-12 13:36:37.762  INFO 18840 --- [           main] t.parak.SpringbootRedisApplicationTest   : 6</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2020-10-12 13:36:37.802  INFO 18840 --- [           main] t.parak.SpringbootRedisApplicationTest   : <span class="title">User</span><span class="params">(name=KHighness, age=<span class="number">19</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2020-10-12 13:36:37.836  INFO 18840 --- [           main] t.parak.SpringbootRedisApplicationTest   : name3</span>=FlowerK</span><br><span class="line"><span class="number">2020</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">13</span>:<span class="number">36</span>:<span class="number">37.836</span>  INFO <span class="number">18840</span> --- [           main] t.parak.SpringbootRedisApplicationTest   : name2=ParaK</span><br><span class="line"><span class="number">2020</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">13</span>:<span class="number">36</span>:<span class="number">37.836</span>  INFO <span class="number">18840</span> --- [           main] t.parak.SpringbootRedisApplicationTest   : name1=KHighness</span><br></pre></td></tr></table></figure>



<h2 id="11-Redis持久化"><a href="#11-Redis持久化" class="headerlink" title="11. Redis持久化"></a>11. Redis持久化</h2><p>Redis是内存数据库，如果不将内存中的数据库状态保存在磁盘，那么一旦服务器进程退出，服务器中的数据库状态也会消失。所以Redis提供了持久化功能。</p>
<ul>
<li><p>Redis默认是按照快照RDB的持久化方式</p>
</li>
<li><p>Redis重启的时候会优先使用AOF文件还原数据库状态</p>
</li>
</ul>
<h3 id="11-1-RDB"><a href="#11-1-RDB" class="headerlink" title="11.1 RDB"></a>11.1 RDB</h3><blockquote>
<p>RDB = Redis Database</p>
</blockquote>
<p>将内存中的数据以快照”RDB”的形式将数据持久化到磁盘的一个二进制文件dump.rdb，定时保存。</p>
<blockquote>
<p>配置</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">save 900 1    # 15分钟备份一次</span><br><span class="line">save 300 10   # 如果在300s内，至少有10个key进行了修改，就进行持久化操作</span><br><span class="line">save 60 10000 # 如果在60s内，至少有10000个key进行了修改，就进行持久化操作</span><br></pre></td></tr></table></figure>

<p>可以在24小时内，每小时备份一次，并且在每个月的每一天也备份一个RDB文件。</p>
<p>这样的话，即使遇上问题，也可以随时将数据集恢复到不同的版本。</p>
<blockquote>
<p>工作机制</p>
</blockquote>
<p>Redis会单独创建(fork)一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何I/O操作的。这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加高效。RDB的<strong>缺点是最后一次持久化后的数据可能丢失</strong>。我们默认的就是RDB，一般情况下不需要修改这个配置。</p>
<blockquote>
<p>触发机制</p>
</blockquote>
<ul>
<li>save的规则满足的情况下，会自动触发rdb规则</li>
<li>执行flushall命令，也会触发rdb规则</li>
<li>退出redis，也会产生rdb文件</li>
</ul>
<blockquote>
<p>恢复rdb</p>
</blockquote>
<ul>
<li><p>将rdb文件放在redis启动目录，redis服务器启动的时候就会自动检查dump.rdb，恢复其中的数据</p>
</li>
<li><p>查看需要存在的位置</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config get dir</span><br><span class="line">1) &quot;dir&quot;</span><br><span class="line">2) &quot;/usr/local/bin&quot; # 如果在这个目录下存在dump.rdb文件，启动就会自动恢复其中的数据</span><br></pre></td></tr></table></figure>



<blockquote>
<p>优点缺点</p>
</blockquote>
<p>优点：</p>
<ul>
<li><p>适合大规模的数据恢复(适合文件备份)</p>
</li>
<li><p>对数据的完整性要求不高</p>
</li>
</ul>
<p>缺点：</p>
<ul>
<li><p>Redis服务器宕机时会丢失数据</p>
</li>
<li><p>fork进程会占用一定的内容空间</p>
</li>
</ul>
<h3 id="11-2-AOF"><a href="#11-2-AOF" class="headerlink" title="11.2 AOF"></a>11.2 AOF</h3><blockquote>
<p>AOF = Append Only Mode</p>
</blockquote>
<p>把所有的对Redis的服务器进行修改的命令都存到一个文件(默认为appendonly.aof)里，命令的集合。</p>
<blockquote>
<p>配置</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">appendonly yes # 开启AOF</span><br><span class="line">appendfsync yes # 默认开启同步</span><br><span class="line">appendfsync always # 每次数据修改发生时候都会写入AOF文件</span><br><span class="line">appendfsync everysec # 每秒钟同步一次，这个死AOF的缺省策略</span><br></pre></td></tr></table></figure>



<blockquote>
<p>AOF重写</p>
</blockquote>
<ul>
<li>AOF文件的大小随着时间的流逝一定越来越大，影响包括但不限于：对于Redis服务器计算机的存储压力；AOF还原数据库状态的时间增加</li>
<li>为了解决AOF文件体积膨胀的问题，Redis提供了AOF重写功能：Redis服务器可以创建一个新的AOF文件来替代现有的AOF文件，新旧两个文件所保存的数据库状态是相同的，但是新的AOF 文件不会包含任何浪费空间的冗余命令，通常会较旧AOF文件小很多</li>
</ul>
<p>Redis会在最近一次重写后记住AOF文件的大小，将次基本大小与当前大小进行比较，如果当前大小大于指定的百分比，则触发重写。</p>
<p>指定零百分比可以禁用重写功能。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">auto-aof-rewrite-percentage 100 </span><br><span class="line">auto-aof-rewrite-min-size 64mb # 触发重写的AOF文件的最小大小</span><br></pre></td></tr></table></figure>



<blockquote>
<p>产生问题</p>
</blockquote>
<p>每次重启Redis的时候，会优先使用AOF文件还原数据。</p>
<p>如果AOF文件以外产生错位，或者人工意外改写，可以通过<code>redis-check-aof --fix appendonly.aof</code>修复文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master bin]# redis-check-aof --fix appendonly.aof </span><br><span class="line">&#x27;x              3f: Expected prefix &#x27;*&#x27;, got: &#x27;</span><br><span class="line">AOF analyzed: size=114, ok_up_to=63, diff=51</span><br><span class="line">This will shrink the AOF from 114 bytes, with 51 bytes, to 63 bytes</span><br><span class="line">Continue? [y/N]: y</span><br><span class="line">Successfully truncated AOF</span><br></pre></td></tr></table></figure>



<blockquote>
<p>优点缺点</p>
</blockquote>
<p>优点：</p>
<ul>
<li>AOF会让redis变得非常耐久，AOF的默认策略是每秒同步一次，在这种配置下，就算Redis服务器宕机，也最多丢失一秒钟的数据</li>
</ul>
<p>缺点：</p>
<ul>
<li>对于相同的数据集来说，AOF的文件体积要大于RDB的文件体积，数据恢复的速度更慢</li>
<li>根据所使用的sync策略，AOF的速度可能慢于RDB</li>
</ul>
<h2 id="12-Redis发布订阅"><a href="#12-Redis发布订阅" class="headerlink" title="12. Redis发布订阅"></a>12. Redis发布订阅</h2><p>Redis 发布订阅 (pub/sub) 是一种消息通信模式：发送者(pub) 发送方消息，订阅者(sub)接收消息。</p>
<p>Redis客户端可以订阅任意数量的频道。</p>
<blockquote>
<p>订阅模型</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    B(Client1) --&gt; |Subscrible| A((Channel1))</span><br><span class="line">    C(Client2) --&gt; |Subscrible| A((Channel1))</span><br><span class="line">    D(Client3) --&gt; |Subscrible| A((Channel1))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>消息模型</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A((Channel1)) --&gt; |Message| B(Client1)</span><br><span class="line">    A((Channel1)) --&gt; |Message| C(Client2)</span><br><span class="line">    A((Channel1)) --&gt; |Message| D(Client3)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>发布订阅命令</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">psubscribe pattern [pattern …]</td>
<td align="center">订阅一个或多个符合给定模式的频道</td>
</tr>
<tr>
<td align="center">pubsub subcommand [argument [argument …]]</td>
<td align="center">查看订阅与发布系统状态</td>
</tr>
<tr>
<td align="center">publish channel message</td>
<td align="center">将消息发送到指定的频道</td>
</tr>
<tr>
<td align="center">punsubscribe channel [channel …]</td>
<td align="center">退订所有给定模式的频道</td>
</tr>
<tr>
<td align="center">subscribe channel [channel …]</td>
<td align="center">订阅给定的一个或多个频道的信息</td>
</tr>
<tr>
<td align="center">unsubscribe [channel [channel …]]</td>
<td align="center">退订给定的频道</td>
</tr>
</tbody></table>
<blockquote>
<p>演示</p>
</blockquote>
<p>开启三个redis-cli</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 第一个客户端，订阅频道：Khighness</span></span><br><span class="line">127.0.0.1:6379&gt; subscribe Khighness</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;Khighness&quot;</span><br><span class="line">3) (integer) 1</span><br><span class="line">1) &quot;message&quot;</span><br><span class="line">2) &quot;Khighness&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二个客户端，在频道Khighness发布消息</span></span><br><span class="line">127.0.0.1:6379&gt; publish Khighness &quot;Client1: Hello, Khighness&quot;</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第三个客户端，在频道Khighness发布消息</span></span><br><span class="line">127.0.0.1:6379&gt; publish Khighness &quot;Client3: Hello, Khighness&quot;</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 订阅频道的第一个客户端就能收到消息</span></span><br><span class="line">1) &quot;message&quot;</span><br><span class="line">2) &quot;Khighness&quot;</span><br><span class="line">3) &quot;Client2: Hello, Khighness&quot;</span><br><span class="line">1) &quot;message&quot;</span><br><span class="line">2) &quot;Khighness&quot;</span><br><span class="line">3) &quot;Client3: Hello, Khighness&quot;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>原理</p>
</blockquote>
<p>Redis是C语言编写的，通过分析Redis源代码里面的pubsub.c文件，了解发布和订阅机制的底层实现。</p>
<p>通过subscribe命令订阅某频道后，redis-server里维护了一个字典，字典的键就是一个个频道channel，而字典的值则是一个个链表，链表中保存了所有订阅这个频道的客户端client。subscribe命令的关键，就是将client添加到给定channel的订阅链中。</p>
<p>通过publish命令向订阅者发送消息，redis-server会使用给定的频道作为键，在它所维护的channel字典查找记录了订阅这个频道的所有客户端的链表，遍历这个链表，将消息发布给所有订阅者。</p>
<p>在Redis中，可以设定对某一个key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到响应的消息。这一功能最明显的用法就是用作实时消息系统，普通的即时聊天和群聊功能。</p>
<h2 id="13-Redis主从复制"><a href="#13-Redis主从复制" class="headerlink" title="13. Redis主从复制"></a>13. Redis主从复制</h2><blockquote>
<p>概念</p>
</blockquote>
<p>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主结点(master)，后者称为从结点(slave)；数据的复制是单向的，只能由主节点到从结点。master以写为主，salve以读为主。</p>
<p>默认情况下，每台Redis服务器都是主结点；且一个主结点可以有多个从结点(或没有从结点)，但一个从结点只能有一个主节点。</p>
<blockquote>
<p>作用</p>
</blockquote>
<ol>
<li>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式</li>
<li>故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复，实际上是一种服务的冗余</li>
<li>负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供读服务，分担服务器负载；尤其是在写少读多的场景下，通过多个从结点分担读负载，可以大大提高Redis服务器的并发量</li>
<li>高可用基石：主从复制是哨兵和集群可实施的基础，因此说主从复制是Redis高可用的基础</li>
</ol>
<blockquote>
<p>复制原理</p>
</blockquote>
<p>slave启动成功连接到master后会发送一个sync同步命令。</p>
<p>master接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave，并完成一次完全同步。</p>
<p><strong>全量复制</strong>：slave服务在接收到数据库文件后，将其存盘并加载到内存中。</p>
<p><strong>增量复制</strong>：master继续将新的所有收集到的修改命令依次传给slave，完成同步。</p>
<p>但是只要是重新连接master，一次完全同步(全量复制)将被自动执行。</p>
<h2 id="14-Redis集群搭建"><a href="#14-Redis集群搭建" class="headerlink" title="14. Redis集群搭建"></a>14. Redis集群搭建</h2><blockquote>
<p>方法</p>
</blockquote>
<p>==搭建临时伪集群，命令操作即可==</p>
<p>主要操作：<strong>操作从机，认老大。</strong></p>
<p>查看redis服务器信息：<code>info replication</code></p>
<p>在从机上认老大master：<code>slaveof &lt;master-ip&gt; &lt;master-port&gt;</code></p>
<p>==搭建永久集群，修改配置文件==</p>
<p>主要操作：修改redis-conf文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">replicaof &lt;masterip&gt; &lt;masterport&gt;  # 配置master的ip和端口号</span><br><span class="line">masterauth &lt;master-passwordd&gt;      # 如果master有密码则配置密码</span><br></pre></td></tr></table></figure>



<p>==master关机解决——谋权篡位==</p>
<p>通过<code>slaveof no one</code>让slave自己变成master</p>
<blockquote>
<p>操作</p>
</blockquote>
<ol>
<li>复制三份redis.conf文件，修改信息<ul>
<li>port</li>
<li>logfile</li>
<li>pidfile</li>
<li>dbfilename</li>
</ul>
</li>
<li>分别在三个配置文件下启动redis服务</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master bin]# ps -ef | grep redis</span><br><span class="line">root      18914      1  0 00:54 ?        00:01:38 redis-server 127.0.0.1:6379</span><br><span class="line">root      31612      1  0 11:51 ?        00:00:00 redis-server 127.0.0.1:6380</span><br><span class="line">root      31623      1  0 11:51 ?        00:00:00 redis-server 127.0.0.1:6381</span><br><span class="line">root      31634  31340  0 11:51 pts/2    00:00:00 grep --color=auto redis</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>开启三个终端开启三个redis客户端分别连接三个redis服务器</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Terminal1</span></span><br><span class="line">[parak@master bin]$ redis-cli -p 6379</span><br><span class="line"><span class="meta">#</span><span class="bash"> Terminal2</span></span><br><span class="line">[parak@master bin]$ redis-cli -p 6380</span><br><span class="line"><span class="meta">#</span><span class="bash"> Terminal3</span></span><br><span class="line">[parak@master bin]$ redis-cli -p 6381</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>将6379端口的服务的配置成master，另外两个配置成slave</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 6380</span></span><br><span class="line">127.0.0.1:6380&gt; slaveof 127.0.0.1 6379</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6380&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:3</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:14</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:9c3e61afce386f90c00db9ee4e9a2e7b4b265297</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:14</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:14</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6381</span></span><br><span class="line">127.0.0.1:6381&gt; slaveof 127.0.0.1 6379</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6381&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:8</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:42</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:9c3e61afce386f90c00db9ee4e9a2e7b4b265297</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:42</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:43</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6379</span></span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=127.0.0.1,port=6380,state=online,offset=2087,lag=0</span><br><span class="line">slave1:ip=127.0.0.1,port=6381,state=online,offset=2087,lag=0</span><br><span class="line">master_replid:9c3e61afce386f90c00db9ee4e9a2e7b4b265297</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:2087</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:2087</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>在master上写入值，在slave上读取值</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 6379</span></span><br><span class="line">127.0.0.1:6379&gt; hmset student:1 name Khighness gender male age 19</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hmset student:2 name bingyao gender female age 16</span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span><span class="bash"> 6380</span></span><br><span class="line">127.0.0.1:6380&gt; hmget student:1 name gender age</span><br><span class="line">1) &quot;Khighness&quot;</span><br><span class="line">2) &quot;male&quot;</span><br><span class="line">3) &quot;19&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 6381</span></span><br><span class="line">127.0.0.1:6381&gt; hmget student:2 name gender age</span><br><span class="line">1) &quot;bingyao&quot;</span><br><span class="line">2) &quot;female&quot;</span><br><span class="line">3) &quot;16&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> slave只能读取，不能写入</span></span><br><span class="line">127.0.0.1:6380&gt; set K2 V2</span><br><span class="line">(error) READONLY You can&#x27;t write against a read only replica</span><br></pre></td></tr></table></figure>



<h2 id="14-Redis哨兵模式"><a href="#14-Redis哨兵模式" class="headerlink" title="14. Redis哨兵模式"></a>14. Redis哨兵模式</h2><p>驾校手动挡=&gt;上路自动挡</p>
<blockquote>
<p>概述</p>
</blockquote>
<p>主从切换技术的方法：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑哨兵模式。Redis从2.8开始正式提供了Sentinel(哨兵)架构来解决这个问题。</p>
<p>简单来说，哨兵模式就是谋权篡位的自动版，能够后台监控主机是否故障，如果发生故障则根据投票数自动将库转换为主库。</p>
<p>哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。</p>
<p>原理：哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">	A((哨兵))</span><br><span class="line">	B(主Redis服务器)</span><br><span class="line">	C(从Redis服务器1)</span><br><span class="line">	D(从Redis服务器2)</span><br><span class="line">	S[以独立的进程监控3台服务器Redis是否正常运行] </span><br><span class="line">	S --&gt; A</span><br><span class="line">	A --&gt; C</span><br><span class="line">	A --&gt; B</span><br><span class="line">	A --&gt; D</span><br><span class="line">	B --&gt; C</span><br><span class="line">	B --&gt; D</span><br></pre></td></tr></table></figure>



<p>这里的哨兵有两个作用：</p>
<ul>
<li>通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器</li>
<li>当哨兵监测到master宕机，会自动将slave切换为master，然后通过发布订阅模式通知其他的从服务器，修改配置文件，让它们切换主机</li>
</ul>
<p>一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控，各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</p>
<img src="/2020/10/08/Redis/sentinel.jpg" class="" title="sentinel">



<p>假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行failover过程，仅仅是哨兵1主管的认为主服务器不可用，仅仅是哨兵1主观的认为主服务器不可用，这个现象称为主观下线，当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover[故障转移]操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为客观下线。</p>
<blockquote>
<p>测试</p>
</blockquote>
<p>准备三个redis服务，6379-master、6380-slave、6381-slave</p>
<p>修改配置文件sentinel.conf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sentinel monitor mymaster 127.0.0.1 6379 1</span><br></pre></td></tr></table></figure>

<p>启动哨兵</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">34055:X 20 Oct 2020 14:39:15.404 * Increased maximum number of open files to 10032 (it was originally set to 1024).</span><br><span class="line">                _._                                                  </span><br><span class="line">           _.-``__ &#x27;&#x27;-._                                             </span><br><span class="line">      _.-``    `.  `_.  &#x27;&#x27;-._           Redis 5.0.8 (00000000/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ &#x27;&#x27;-._                                   </span><br><span class="line"> (    &#x27;      ,       .-`  | `,    )     Running in sentinel mode</span><br><span class="line"> |`-._`-...-` __...-.``-._|&#x27;` _.-&#x27;|     Port: 26379</span><br><span class="line"> |    `-._   `._    /     _.-&#x27;    |     PID: 34055</span><br><span class="line">  `-._    `-._  `-./  _.-&#x27;    _.-&#x27;                                   </span><br><span class="line"> |`-._`-._    `-.__.-&#x27;    _.-&#x27;_.-&#x27;|                                  </span><br><span class="line"> |    `-._`-._        _.-&#x27;_.-&#x27;    |           http://redis.io        </span><br><span class="line">  `-._    `-._`-.__.-&#x27;_.-&#x27;    _.-&#x27;                                   </span><br><span class="line"> |`-._`-._    `-.__.-&#x27;    _.-&#x27;_.-&#x27;|                                  </span><br><span class="line"> |    `-._`-._        _.-&#x27;_.-&#x27;    |                                  </span><br><span class="line">  `-._    `-._`-.__.-&#x27;_.-&#x27;    _.-&#x27;                                   </span><br><span class="line">      `-._    `-.__.-&#x27;    _.-&#x27;                                       </span><br><span class="line">          `-._        _.-&#x27;                                           </span><br><span class="line">              `-.__.-&#x27;                                               </span><br><span class="line"></span><br><span class="line">34055:X 20 Oct 2020 14:39:15.407 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span><br><span class="line">34055:X 20 Oct 2020 14:39:15.408 # Sentinel ID is dbfb304470e8ed2bb81b4be42f847e21ff5d9519</span><br><span class="line">34055:X 20 Oct 2020 14:39:15.408 # +monitor master mymaster 127.0.0.1 6379 quorum 1</span><br><span class="line">34055:X 20 Oct 2020 14:40:15.646 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:40:25.731 * +slave slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br></pre></td></tr></table></figure>

<p>关闭master服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 6379: master -&gt; shutdown</span></span><br><span class="line">127.0.0.1:6379&gt; SHUTDOWN</span><br><span class="line">not connected&gt; exit</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> sentinel</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 监控到master宕机</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选出6380为master</span></span><br><span class="line">34055:X 20 Oct 2020 14:43:47.509 # +sdown master mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:47.509 # +odown master mymaster 127.0.0.1 6379 #quorum 1/1</span><br><span class="line">34055:X 20 Oct 2020 14:43:47.509 # +new-epoch 1</span><br><span class="line">34055:X 20 Oct 2020 14:43:47.509 # +try-failover master mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:47.510 # +vote-for-leader dbfb304470e8ed2bb81b4be42f847e21ff5d9519 1</span><br><span class="line">34055:X 20 Oct 2020 14:43:47.510 # +elected-leader master mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:47.510 # +failover-state-select-slave master mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:47.594 # +selected-slave slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:47.594 * +failover-state-send-slaveof-noone slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:47.678 * +failover-state-wait-promotion slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:48.296 # +promoted-slave slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:48.296 # +failover-state-reconf-slaves master mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:48.371 * +slave-reconf-sent slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:49.310 * +slave-reconf-inprog slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:49.310 * +slave-reconf-done slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:49.362 # +failover-end master mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:49.362 # +switch-master mymaster 127.0.0.1 6379 127.0.0.1 6380</span><br><span class="line">34055:X 20 Oct 2020 14:43:49.362 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6380</span><br><span class="line">34055:X 20 Oct 2020 14:43:49.362 * +slave slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6380</span><br><span class="line">34055:X 20 Oct 2020 14:44:19.365 # +sdown slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6380</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6380: 新王登基</span></span><br><span class="line">127.0.0.1:6380&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:1</span><br><span class="line">slave0:ip=127.0.0.1,port=6381,state=online,offset=42337,lag=1</span><br><span class="line">master_replid:12a540accf0c9347d3e45fad83ccddea86f3b3c3</span><br><span class="line">master_replid2:b80e4fbbe06a83ac070f38e89267bd81b26ec5ca</span><br><span class="line">master_repl_offset:42351</span><br><span class="line">second_repl_offset:20188</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:8342</span><br><span class="line">repl_backlog_histlen:34010</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6381: 参拜新王</span></span><br><span class="line">127.0.0.1:6381&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6380</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:0</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:63969</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:12a540accf0c9347d3e45fad83ccddea86f3b3c3</span><br><span class="line">master_replid2:b80e4fbbe06a83ac070f38e89267bd81b26ec5ca</span><br><span class="line">master_repl_offset:63969</span><br><span class="line">second_repl_offset:20188</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:8053</span><br><span class="line">repl_backlog_histlen:55917</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启6379的服务</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启之后俯首称臣</span></span><br><span class="line">[root@master bin]# redis-server kconfig/redis6379.conf </span><br><span class="line">[root@master bin]# redis-cli -p 6379</span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; info relplication</span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6380</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:2</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:50522</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:12a540accf0c9347d3e45fad83ccddea86f3b3c3</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:50522</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:48596</span><br><span class="line">repl_backlog_histlen:1927</span><br></pre></td></tr></table></figure>



<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>哨兵集群，基于主从复制模式，继承了主从的所有优点</li>
<li>主从可以切换，故障可以转移，增强系统的可用性</li>
<li>哨兵模式是主从模式的升级版，手动到自动，更加健壮</li>
</ul>
<blockquote>
<p>配置</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> sentinel.conf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 哨兵sentinel实例运行的端口，默认26379</span></span><br><span class="line">port 26379</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 守护进程 </span></span><br><span class="line">daemonize no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进程文件</span></span><br><span class="line">pidfile &quot;/var/run/redis-sentinel.pid&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进程文件</span></span><br><span class="line">logfile &quot;&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 工作目录</span></span><br><span class="line">dir &quot;/tmp&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 哨兵sentinel监控的master的IP和Port</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> quorum配置多少个哨兵统一认为master失联。那么这时客观上认为主结点失联</span></span><br><span class="line">sentinel monitor &lt;master-name&gt; &lt;master-ip&gt; &lt;redis-ip&gt; &lt;quorum&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在redis实例中开启了授权密码</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置哨兵senti的连接密码</span></span><br><span class="line">sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置指定在发生failover主从切换时最多可以有多少个slave同时对新的master同步</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> numreplicas越小，完成failover的事件就越长</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> numreplicas越大，就意味着越多的slave因为replication(复制)而不可用</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> numreplicas设置为1，保证每次只有slave处于不能处理命令请求的状态</span></span><br><span class="line">sentinel parallel-syncs &lt;master-name&gt; &lt;numreplicas&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置指定多milliseconds毫秒之后，master没有响应sentinel</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 此时，哨兵主观上认为master下线，默认30秒</span></span><br><span class="line">sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置故障转移的超时时间，默认2分钟</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以用于以下方面</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1. 同一sentinel对同一个master两次failo ver的间隔时间</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 当一个slave从一个错误的master那里同步数据开始计算时间，直至slave被纠正为向正确的master那里同步数据</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. 当想要取消一个正在进行的failover需要的时间</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4. 当进行failover时，配置所有slaves指向新的master所需的最大时间</span></span><br><span class="line">sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通知脚本</span></span><br><span class="line">sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端重新配置主节点参数脚本</span></span><br><span class="line">sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</span><br></pre></td></tr></table></figure>





<h2 id="15-Redis穿透、击穿和雪崩"><a href="#15-Redis穿透、击穿和雪崩" class="headerlink" title="15. Redis穿透、击穿和雪崩"></a>15. Redis穿透、击穿和雪崩</h2><blockquote>
<p>缓存穿透</p>
</blockquote>
<p>查询的key对应的数据不在redis缓存中，即缓存没有命中，于是向持久层数据库查询，数据库也没有，当请求量过大的时候，可能压垮数据库。</p>
<p>即大面积的缓存失效，大并发请求打崩DB。</p>
<blockquote>
<p>缓存击穿</p>
</blockquote>
<p>查询的一个key非常热点，在不停地扛着大量的请求，大并发集中对这一个点进行访问，当这个key在失效的瞬间，持续的大并发直接落到了数据库上，就在这个Key的点上击穿了缓存。</p>
<p>即单个key的缓存失效，大并发请求击穿redis直落DB。</p>
<blockquote>
<p>缓存雪崩</p>
</blockquote>
<p>当redis服务器重启或则大量缓存集中在某一个时间段失效，瞬间Redis跟没有一样，那这个数量级别的请求直接打到数据库几乎是灾难性的</p>
<blockquote>
<p>穿透解决</p>
</blockquote>
<p>==<strong>参数校验</strong>==</p>
<p>在接口层增加校验，不合法的参数直接return，比如id&lt;0直接拦截。</p>
<p>==<strong>布隆过滤器</strong>==</p>
<p>利用高效的数据结构和算法快速判断出你这个Key是否在数据库中存在，不存在你return就好了，存在你就去查DB刷新KV再return。</p>
<p>==<strong>缓存空对象</strong>==</p>
<p>当存储层不命中后，即使返回的空对象也将其缓存起来，同时会设置一个过期时间，之后再访问这个数据将会从缓存中获取，保护数据库。</p>
<blockquote>
<p>击穿解决</p>
</blockquote>
<p>设置热点数据永不过期，或者加上互斥锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getData</span><span class="params">(String key)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//从Redis查询数据</span></span><br><span class="line">        String result = getDataByKV(key);</span><br><span class="line">        <span class="comment">//参数校验</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(result)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//获得锁</span></span><br><span class="line">                <span class="keyword">if</span> (reenLock.tryLock()) &#123;</span><br><span class="line">                    <span class="comment">//去数据库查询</span></span><br><span class="line">                    result = getDataByDB(key);</span><br><span class="line">                    <span class="comment">//校验</span></span><br><span class="line">                    <span class="keyword">if</span> (StringUtils.isNotBlank(result)) &#123;</span><br><span class="line">                        <span class="comment">//插进缓存</span></span><br><span class="line">                        setDataToKV(key, result);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//睡一会再拿</span></span><br><span class="line">                    Thread.sleep(<span class="number">100L</span>);</span><br><span class="line">                    result = getData(key);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//释放锁</span></span><br><span class="line">                reenLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>雪崩解决</p>
</blockquote>
<p>==<strong>redis高可用</strong>==</p>
<p>搭建集群，异地多活</p>
<p>==<strong>限流降级</strong>==</p>
<p>在缓存失效后，通过加锁或者队列哎控制读数据库写缓存的线程数量</p>
<p>==<strong>数据预热</strong>==</p>
<p>在正式部署之前，先把可能的数据预先访问一遍，让可能的数据加载到缓存中。</p>
<p>在即将发生大并发访问写入key的时候，设置不同的缓存时间，让缓存失效的时间点尽量均匀。</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>NoSQL</tag>
        <tag>Cache</tag>
      </tags>
  </entry>
</search>
