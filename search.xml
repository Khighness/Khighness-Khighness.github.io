<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java-Serilizable</title>
    <url>/posts/29446/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a name="YYYCK"></a></p>
<h2 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><p><br />序列化：将Java对象转换为字节序列，以便持久化到磁盘或者网络传输。<br />反序列化：将磁盘文件或者网络文件中的字节序列恢复为原先的Java对象。<br /><br><br />Java对象的序列化的方式有两种：</p>
<ul>
<li>实现<code>Serilizable</code>接口，比较方便。</li>
<li>实现<code>Exteranlizable</code>接口，需要重写<code>writeExternal</code>和<code>readExterna</code>方法。</li>
</ul>
<p><br />定义User：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// AllArgsConstructor</span></span><br><span class="line">    <span class="comment">// ToString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>序列化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    ObjectOutputStream output = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(</span><br><span class="line">        <span class="keyword">new</span> File(System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;/src/main/resources/public/&quot;</span> + <span class="string">&quot;user.txt&quot;</span>)));</span><br><span class="line">    output.writeObject(obj);</span><br><span class="line">    output.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>反序列化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">deserialize</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    ObjectInputStream input = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(</span><br><span class="line">        <span class="keyword">new</span> File(System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;/src/main/resources/public/&quot;</span> + <span class="string">&quot;user.txt&quot;</span>)));</span><br><span class="line">    <span class="keyword">return</span> (User) input.readObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;Khighness&quot;</span>, <span class="keyword">new</span> Date());</span><br><span class="line">    serialize(user);</span><br><span class="line">    User des = deserialize();</span><br><span class="line">    System.out.println(des);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>控制台输出：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">User[<span class="type">id</span>=<span class="number">1</span>, <span class="type">username</span>=<span class="string">&#x27;Khighness&#x27;</span>, <span class="type">birth</span>=<span class="type">Thu</span> <span class="type">Apr</span> <span class="number">22</span> <span class="number">12</span>:<span class="number">12</span>:<span class="number">48</span> <span class="type">CST</span> <span class="number">2021</span>]</span><br></pre></td></tr></table></figure>

<p><a name="P1aos"></a><br></p>
<h2 id="Serializable"><a href="#Serializable" class="headerlink" title="Serializable"></a>Serializable</h2><p><br />看一下源代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>发现只是个空接口，因此这只是个标示性接口。<br />那我们点进刚才使用的<code>writeObject</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (enableOverride) &#123;           <span class="comment">// 表示是否可覆写，默认false</span></span><br><span class="line">        writeObjectOverride(obj);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        writeObject0(obj, <span class="keyword">false</span>); <span class="comment">// 主要执行的方法</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">        <span class="keyword">if</span> (depth == <span class="number">0</span>) &#123;</span><br><span class="line">            writeFatalException(ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到它调用的是<code>writeObject0</code>方法，再进入这个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// remaining cases 判断对象</span></span><br><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String) &#123;              <span class="comment">// 是否为字符串</span></span><br><span class="line">    writeString((String) obj, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (cl.isArray()) &#123;                <span class="comment">// 是否为数组</span></span><br><span class="line">    writeArray(obj, desc, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Enum) &#123;         <span class="comment">// 是否为枚举类</span></span><br><span class="line">    writeEnum((Enum&lt;?&gt;) obj, desc, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Serializable) &#123; <span class="comment">// 是否实现了Serializable接口</span></span><br><span class="line">    writeOrdinaryObject(obj, desc, unshared);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;                                  <span class="comment">// 四非则抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (extendedDebugInfo) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotSerializableException(</span><br><span class="line">            cl.getName() + <span class="string">&quot;\n&quot;</span> + debugInfoStack.toString());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotSerializableException(cl.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a name="fYvZd"></a><br></p>
<h2 id="serialVersionUID"><a href="#serialVersionUID" class="headerlink" title="serialVersionUID"></a>serialVersionUID</h2><p><br />继续测试，给User类添加字段：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String email;</span><br></pre></td></tr></table></figure>
<p>将测试代码改为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    User des = deserialize();</span><br><span class="line">    System.out.println(des);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">&quot;main&quot;</span> java.io.InvalidClassException: top.parak.entity.User; local <span class="class"><span class="keyword">class</span> <span class="title">incompatible</span>: <span class="title">stream</span> <span class="title">classdesc</span> <span class="title">serialVersionUID</span> = -5676367428859465228, <span class="title">local</span> <span class="title">class</span> <span class="title">serialVersionUID</span> = -1182591043963610802</span></span><br></pre></td></tr></table></figure>
<p>发现报错，并且抛出<code>InvalidClassException</code>异常，提示信息：本地类不兼容，序列化前后的<code>serialVersionUID</code>不同。<br />因此，有两个重要结论：</p>
<ul>
<li><code>serialVersionUID</code>是序列化前后的唯一标识符。</li>
<li>默认如果没有显示定义<code>serialVersionUID</code>，则编译器会为它自动声明一个。</li>
</ul>
<p>扩展：</p>
<ul>
<li><code>serialVersionUID</code>序列化ID，可以看成是序列化和反序列化过程中的暗号（连上彼此的讯号才有个依靠），在反序列化时，JVM会把字节流中的序列化ID和被序列号类中的序列化ID做对比，只有两者一致，才能重新反序列化，否则抛出异常终止反序列化的过程。</li>
<li>如果在定义一个可序列化的类时，没有人为显示地给它定义一个<code>serialVersionUID</code>的话，则Java运行时环境会根据该类的各方面信息自动地为它生成一个默认的<code>serialVersionUID</code>，一旦更改了类的结构或者信息，则类的<code>serialVersionUID</code>也会跟着变化。</li>
</ul>
<p><a name="B8uH5"></a><br></p>
<h2 id="static-amp-transient"><a href="#static-amp-transient" class="headerlink" title="static&amp;transient"></a>static&amp;transient</h2><p><br />继续测试，将<code>User</code>类的<code>email</code>字段添加修饰符<code>static</code>或者<code>transient</code>，发现测试成功。<br />于是可以得出结论，对于<code>Serilizable</code>接口：</p>
<ol>
<li>凡是被<code>static</code>修饰的字段是不会被序列化的</li>
<li>凡是被<code>transient</code>修饰的字段是不会被序列化的</li>
</ol>
<blockquote>
<p>transient</p>
</blockquote>
<p><code>transient</code>关键字的作用就是把被修饰的字段的生命周期仅存于调用者的内存而不会持久化到磁盘中。<br /></p>
<blockquote>
<p>注意</p>
</blockquote>
<p>实现<code>Exteranlizable</code>接口时，<code>transient</code>是无效的。<br /></p>
<p><a name="PzCRj"></a><br></p>
<h2 id="单例模式增强"><a href="#单例模式增强" class="headerlink" title="单例模式增强"></a>单例模式增强</h2><p><br />静态内部类的单例模式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">3992737853791586260L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后写一个测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">// 序列化</span></span><br><span class="line">    Singleton instance = Singleton.getInstance();</span><br><span class="line">    ObjectOutputStream output = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(</span><br><span class="line">        <span class="keyword">new</span> File(System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;/src/main/resources/public/&quot;</span> + <span class="string">&quot;singleton.txt&quot;</span>)));</span><br><span class="line">    output.writeObject(instance);</span><br><span class="line">    output.close();</span><br><span class="line">    <span class="comment">// 反序列化</span></span><br><span class="line">    ObjectInputStream input = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(</span><br><span class="line">        <span class="keyword">new</span> File(System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;/src/main/resources/public/&quot;</span> + <span class="string">&quot;singleton.txt&quot;</span>)));</span><br><span class="line">    Singleton singleton = (Singleton) input.readObject();</span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    System.out.println(instance == singleton);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行之后，发现控制台打印的是<code>false</code>。<br />解决方法：在单例中手写<code>readResolve</code>函数，直接返回单例对象，来规避之。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> SingletonHolder.singleton;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang-MySQL</title>
    <url>/posts/52018/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a name="YjY2v"></a></p>
<h2 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h2><p>方式一：设置代理并安装驱动</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> go env <span class="literal">-w</span> GOPROXY=https://goproxy.cn</span><br><span class="line"><span class="variable">$</span> go get github.com/go<span class="literal">-sql</span><span class="literal">-driver</span>/mysql</span><br><span class="line"><span class="variable">$</span> go get github.com/jmoiron/sqlx</span><br></pre></td></tr></table></figure>
<p>方式二：使用mod创建项目</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化</span></span><br><span class="line"><span class="variable">$</span> go mod init go<span class="literal">-mysql</span></span><br><span class="line"><span class="comment"># 在go.mod中添加</span></span><br><span class="line">require github.com/go<span class="literal">-sql</span><span class="literal">-driver</span>/mysql v1.<span class="number">6.0</span></span><br><span class="line"><span class="comment"># 下载依赖</span></span><br><span class="line"><span class="variable">$</span> go mod download</span><br></pre></td></tr></table></figure>


<p><a name="Zwglm"></a></p>
<h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><blockquote>
<p>建表语句</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `user` (</span><br><span class="line">  `id` int NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(<span class="number">25</span>) CHARACTER <span class="built_in">SET</span> utf8 COLLATE utf8_general_ci NOT NULL,</span><br><span class="line">  `age` tinyint unsigned NOT NULL DEFAULT <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=<span class="number">16</span> DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>初始数据</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`demo`</span>.<span class="string">`user`</span>(<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;Khighness&#x27;</span>, <span class="number">19</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`demo`</span>.<span class="string">`user`</span>(<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;RabbishK&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`demo`</span>.<span class="string">`user`</span>(<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`age`</span>) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;UnknownK&#x27;</span>, <span class="number">17</span>);</span><br></pre></td></tr></table></figure>


<p><a name="GiUqc"></a></p>
<h2 id="MySQL连接池"><a href="#MySQL连接池" class="headerlink" title="MySQL连接池"></a>MySQL连接池</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;database/sql&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author KHighness</span></span><br><span class="line"><span class="comment"> * @since 2021-04-20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> MysqlDB *sql.DB</span><br><span class="line"><span class="keyword">var</span> MysqlDBERR error</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	USERNAME = <span class="string">&quot;root&quot;</span></span><br><span class="line">	PASSWORD = <span class="string">&quot;KAG1823&quot;</span></span><br><span class="line">	HOST     = <span class="string">&quot;8.133.183.149&quot;</span></span><br><span class="line">	PORT     = <span class="string">&quot;3306&quot;</span></span><br><span class="line">	DATABASE = <span class="string">&quot;demo&quot;</span></span><br><span class="line">	CHARSET  = <span class="string">&quot;utf8&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化链接</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	dbDSN := fmt.Sprintf(<span class="string">&quot;%s:%s@tcp(%s:%s)/%s?charset=%s&quot;</span>, USERNAME, PASSWORD, HOST, PORT, DATABASE, CHARSET)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 打开连接失败</span></span><br><span class="line">	MysqlDB, MysqlDBERR = sql.Open(<span class="string">&quot;mysql&quot;</span>, dbDSN)</span><br><span class="line">	<span class="keyword">if</span> MysqlDBERR != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(<span class="string">&quot;dbDSN: &quot;</span> + dbDSN)</span><br><span class="line">		<span class="built_in">panic</span>(<span class="string">&quot;数据源配置错误: &quot;</span> + MysqlDBERR.Error())</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 最大连接数</span></span><br><span class="line">	MysqlDB.SetMaxOpenConns(<span class="number">100</span>)</span><br><span class="line">	<span class="comment">// 闲置连接数</span></span><br><span class="line">	MysqlDB.SetMaxIdleConns(<span class="number">20</span>)</span><br><span class="line">	<span class="comment">// 最大连接周期</span></span><br><span class="line">	MysqlDB.SetConnMaxLifetime(<span class="number">100</span> * time.Second)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> MysqlDBERR = MysqlDB.Ping(); <span class="literal">nil</span> != MysqlDBERR &#123;</span><br><span class="line">		<span class="built_in">panic</span>(<span class="string">&quot;数据库连接失败: &quot;</span> + MysqlDBERR.Error())</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><a name="XC3Ft"></a></p>
<h2 id="用户结构体"><a href="#用户结构体" class="headerlink" title="用户结构体"></a>用户结构体</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author KHighness</span></span><br><span class="line"><span class="comment"> * @since 2021-04-20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户结构体</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">	Id <span class="keyword">int64</span> <span class="string">`db:&quot;id&quot;`</span></span><br><span class="line">	Name <span class="keyword">string</span> <span class="string">`db:&quot;name&quot;`</span></span><br><span class="line">	Age <span class="keyword">int</span> <span class="string">`db:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><a name="NyzT5"></a></p>
<h2 id="INSERT操作"><a href="#INSERT操作" class="headerlink" title="INSERT操作"></a>INSERT操作</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author KHighness</span></span><br><span class="line"><span class="comment"> * @since 2021-04-20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存用户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SaveUser</span><span class="params">(user User)</span></span>  &#123;</span><br><span class="line">	res, _ := MysqlDB.Exec(<span class="string">&quot;INSERT INTO user(name, age) VALUES (?, ?)&quot;</span>, user.Name, user.Age)</span><br><span class="line">	lastInsertId, _ := res.LastInsertId()</span><br><span class="line">	rowsAffected, _ := res.RowsAffected()</span><br><span class="line">	log.Printf(<span class="string">&quot;插入ID =&gt; [%d], 影响行数 =&gt; [%d]&quot;</span>, lastInsertId, rowsAffected)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><a name="LlPDB"></a></p>
<h2 id="SELECT操作"><a href="#SELECT操作" class="headerlink" title="SELECT操作"></a>SELECT操作</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author KHighness</span></span><br><span class="line"><span class="comment"> * @since 2021-04-20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据ID查询</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QueryById</span><span class="params">(id <span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">	user := <span class="built_in">new</span>(User)</span><br><span class="line">	row := MysqlDB.QueryRow(<span class="string">&quot;SELECT * FROM user WHERE id = ?&quot;</span>, id)</span><br><span class="line">	<span class="keyword">if</span> err :=row.Scan(&amp;user.Id,&amp;user.Name,&amp;user.Age); err != <span class="literal">nil</span>&#123;</span><br><span class="line">		log.Printf(<span class="string">&quot;scan failed, err:%v&quot;</span>,err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	log.Printf(<span class="string">&quot;query result =&gt; [%s]\n&quot;</span>, user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询所有</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QueryList</span><span class="params">()</span></span> &#123;</span><br><span class="line">	users := <span class="built_in">make</span>([]User, <span class="number">0</span>)</span><br><span class="line">	rows, _ := MysqlDB.Query(<span class="string">&quot;SELECT * FROM user&quot;</span>)</span><br><span class="line">	<span class="comment">// 遍历</span></span><br><span class="line">	<span class="keyword">var</span> user User</span><br><span class="line">	<span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">		_ = rows.Scan(&amp;user.Id, &amp;user.Name, &amp;user.Age)</span><br><span class="line">		users = <span class="built_in">append</span>(users, user)</span><br><span class="line">	&#125;</span><br><span class="line">	log.Printf(<span class="string">&quot;query result =&gt; [%s]\n&quot;</span>, users)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><a name="cfsFt"></a></p>
<h2 id="UPDATE操作"><a href="#UPDATE操作" class="headerlink" title="UPDATE操作"></a>UPDATE操作</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author KHighness</span></span><br><span class="line"><span class="comment"> * @since 2021-04-20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新用户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UpdateById</span><span class="params">(user User)</span></span>  &#123;</span><br><span class="line">	res, _ := MysqlDB.Exec(<span class="string">&quot;UPDATE user SET name = ?, age = ? WHERE id = ? &quot;</span>, user.Name, user.Age, user.Id)</span><br><span class="line">	lastInsertId, _ := res.LastInsertId()</span><br><span class="line">	rowsAffected, _ := res.RowsAffected()</span><br><span class="line">	log.Printf(<span class="string">&quot;更新ID =&gt; [%d], 影响行数 =&gt; [%d]&quot;</span>, lastInsertId, rowsAffected)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><a name="YwS8Z"></a></p>
<h2 id="DELETE操作"><a href="#DELETE操作" class="headerlink" title="DELETE操作"></a>DELETE操作</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> db</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author KHighness</span></span><br><span class="line"><span class="comment"> * @since 2021-04-20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除用户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DeleteById</span><span class="params">(id <span class="keyword">int</span>)</span></span>  &#123;</span><br><span class="line">	res, _ := MysqlDB.Exec(<span class="string">&quot;DELETE FROM user WHERE id = ?&quot;</span>, id)</span><br><span class="line">	lastInsertId, _ := res.LastInsertId()</span><br><span class="line">	rowsAffected, _ := res.RowsAffected()</span><br><span class="line">	log.Printf(<span class="string">&quot;删除ID =&gt; [%d], 影响行数 =&gt; [%d]&quot;</span>, lastInsertId, rowsAffected)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><a name="jNjoQ"></a></p>
<h2 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author KHighness</span></span><br><span class="line"><span class="comment"> * @since 2021-04-20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 事务: 批量插入5个用户</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BatchSaveUser</span><span class="params">(users [5]User)</span></span>  &#123;</span><br><span class="line">	<span class="comment">// 开始事务</span></span><br><span class="line">	tx, _ := MysqlDB.Begin()</span><br><span class="line">	<span class="keyword">var</span> total <span class="keyword">int64</span> = <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> _, user := <span class="keyword">range</span> users &#123;</span><br><span class="line">		res, _ := MysqlDB.Exec(<span class="string">&quot;INSERT INTO user(name, age) VALUES(?, ?)&quot;</span>, user.Name, user.Age)</span><br><span class="line">		aff, _ := res.RowsAffected()</span><br><span class="line">		total += aff</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 转字符串比较</span></span><br><span class="line">	<span class="keyword">if</span>  strconv.FormatInt(total, <span class="number">10</span>) == strconv.Itoa(<span class="built_in">len</span>(users)) &#123; 	<span class="comment">// 提交事务</span></span><br><span class="line">		_ = tx.Commit()</span><br><span class="line">		log.Print(<span class="string">&quot;事务提交&quot;</span>)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123; <span class="comment">// 回滚</span></span><br><span class="line">		_ = tx.Rollback()</span><br><span class="line">		log.Print(<span class="string">&quot;事务回滚&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><a name="NamaE"></a></p>
<h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;go-mysql/db&quot;</span></span><br><span class="line">	<span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author KHighness</span><br><span class="line"> * @since <span class="number">2021</span><span class="literal">-04</span><span class="literal">-20</span></span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 测试查询</span><br><span class="line">func TestQueryById(t *testing.T) &#123;</span><br><span class="line">	db.QueryById(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 测试查询所有</span><br><span class="line">func TestQueryList(t *testing.T) &#123;</span><br><span class="line">	db.QueryList()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 测试保存</span><br><span class="line">func TestSaveUser(t *testing.T) &#123;</span><br><span class="line">	user := db.User&#123;Name: <span class="string">&quot;FlowerK&quot;</span>, Age: <span class="number">16</span>&#125;</span><br><span class="line">	db.SaveUser(user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 测试更新</span><br><span class="line">func TestUpdateById(t *testing.T)  &#123;</span><br><span class="line">	user := db.User&#123;Id: <span class="number">1</span>, Name: <span class="string">&quot;K&quot;</span>, Age: <span class="number">20</span>&#125;</span><br><span class="line">	db.UpdateById(user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 测试删除</span><br><span class="line">func TestDeleteById(t *testing.T)  &#123;</span><br><span class="line">	db.DeleteById(<span class="number">4</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 测试事务</span><br><span class="line">func TestBatchSaveUser(t *testing.T)  &#123;</span><br><span class="line">	var users [<span class="number">5</span>]db.User</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">		users[<span class="type">i</span>] = db.User&#123;Name: fmt.Sprintf(<span class="string">&quot;%s-%d&quot;</span>, <span class="string">&quot;K&quot;</span>, i + <span class="number">1</span>), Age: i + <span class="number">1</span>&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	db.BatchSaveUser(users)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang-Module</title>
    <url>/posts/58003/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a name="PrxUV"></a></p>
<h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p>modules的wiki: <a href="https://github.com/golang/go/wiki/Modules">https://github.com/golang/go/wiki/Modules</a></p>
<blockquote>
<p>go 1.14</p>
</blockquote>
<p>模块支持已经准备好用于生产，并且鼓励所有用户从其他依赖管理系统迁移到模块。</p>
<blockquote>
<p>go 1.16</p>
</blockquote>
<p>模块模式默认开启，即GO111MODULE=on。<br /></p>
<p><a name="vsK82"></a></p>
<h2 id="GO111MODULE"><a href="#GO111MODULE" class="headerlink" title="GO111MODULE"></a>GO111MODULE</h2><p>GO111MODULE有三个值：off、on和auto，不同版本的默认值不尽相同。</p>
<ol>
<li>off：go命令行将不会支持module功能，寻找依赖包的方式将会沿用旧版本通过vendor目录或者GOPATH模式查找。</li>
<li>on：go命令行会使用modules，而且一点也不会去GOPATH目录下查找。</li>
<li>auto：go命令行将会根据当前目录来决定是否启用module功能，分为两种情形：<ol>
<li>当前目录在$GOPATH/src之外且该目录包含go.mod文件</li>
<li>当前文件在包含go.mod文件的目录下面</li>
</ol>
</li>
</ol>
<p><br />说明：当modules 功能启用时，依赖包的存放位置变更为$GOPATH/pkg，允许同一个package多个版本并存，且多个项目可以共享缓存的 module。<br /></p>
<p><a name="sKlFC"></a></p>
<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><p>golang提供了<code>go mod</code>命令来管理包，后置参数如下</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>download</td>
<td>下载依赖包</td>
</tr>
<tr>
<td>edit</td>
<td>编辑go.mod</td>
</tr>
<tr>
<td>graph</td>
<td>打印模块依赖图</td>
</tr>
<tr>
<td>init</td>
<td>在当前目录初始化mod</td>
</tr>
<tr>
<td>tidy</td>
<td>拉取缺少的模块，移除不用的模块</td>
</tr>
<tr>
<td>vendor</td>
<td>将依赖复制到vendor下</td>
</tr>
<tr>
<td>verify</td>
<td>验证依赖是否正确</td>
</tr>
<tr>
<td>why</td>
<td>解释为什么需要依赖</td>
</tr>
</tbody></table>
<p><a name="hkrPo"></a></p>
<h2 id="mod文件"><a href="#mod文件" class="headerlink" title="mod文件"></a>mod文件</h2><p>go.mod文件中提供了四个命令：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>module</td>
<td>指定包的名称</td>
</tr>
<tr>
<td>require</td>
<td>指定依赖项模块</td>
</tr>
<tr>
<td>replace</td>
<td>替换依赖项模块</td>
</tr>
<tr>
<td>exclude</td>
<td>忽略依赖项模块</td>
</tr>
</tbody></table>
<p><a name="npq32"></a></p>
<h2 id="项目案例"><a href="#项目案例" class="headerlink" title="项目案例"></a>项目案例</h2><p>环境：go 1.16.3<br /></p>
<blockquote>
<p>创建项目</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> mkdir go<span class="literal">-mod</span> &amp;&amp; <span class="built_in">cd</span> go<span class="literal">-mod</span></span><br><span class="line"><span class="variable">$</span> go mod init hello</span><br><span class="line"><span class="variable">$</span> touch server.go</span><br><span class="line"><span class="variable">$</span> mkdir api &amp;&amp; <span class="built_in">cd</span> api</span><br><span class="line"><span class="variable">$</span> touch hello.go &amp;&amp; touch print.go</span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目结构</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">go<span class="literal">-mod</span></span><br><span class="line">├── go.mod</span><br><span class="line">├── server.go</span><br><span class="line">└── api</span><br><span class="line">    ├── hello.mod</span><br><span class="line">    └── print.go</span><br></pre></td></tr></table></figure>
<p>其中server需要调用api中的hello的<code>_HelloKHighness_</code>和print的<code>_ConsolePrint_</code>接口。<br />初始化的go-mod中内容如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">module hello</span><br><span class="line"></span><br><span class="line">go <span class="number">1.16</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>hello.go</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author KHighness</span></span><br><span class="line"><span class="comment"> * @since 2021-04-20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/labstack/echo&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HelloKHighness</span><span class="params">(c echo.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> c.JSON(http.StatusOK, <span class="string">&quot;Hello KHighness!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>print.go</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> api</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author KHighness</span></span><br><span class="line"><span class="comment"> * @since 2021-04-20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ConsolePrint</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Hello, KHighness!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>server.go</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author KHighness</span></span><br><span class="line"><span class="comment"> * @since 2021-04-20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/labstack/echo&quot;</span></span><br><span class="line">	helloAPI <span class="string">&quot;hello/api&quot;</span> </span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	helloAPI.ConsolePrint()</span><br><span class="line">	e := echo.New()</span><br><span class="line">	e.GET(<span class="string">&quot;/&quot;</span>, helloAPI.HelloKHighness)</span><br><span class="line">	e.Logger.Fatal(e.Start(<span class="string">&quot;:3333&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>安装依赖</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> go mod tidy</span><br><span class="line">go: finding module <span class="keyword">for</span> package github.com/labstack/<span class="built_in">echo</span></span><br><span class="line">go: found github.com/labstack/<span class="built_in">echo</span> <span class="keyword">in</span> github.com/labstack/<span class="built_in">echo</span> v3.<span class="number">3.10</span>+incompatible</span><br><span class="line">go: finding module <span class="keyword">for</span> package github.com/stretchr/testify/assert</span><br><span class="line">go: finding module <span class="keyword">for</span> package github.com/labstack/gommon/color</span><br><span class="line">go: finding module <span class="keyword">for</span> package github.com/labstack/gommon/log</span><br><span class="line">go: finding module <span class="keyword">for</span> package golang.org/x/crypto/acme/autocert</span><br><span class="line">go: found github.com/labstack/gommon/color <span class="keyword">in</span> github.com/labstack/gommon v0.<span class="number">3.0</span></span><br><span class="line">go: found github.com/labstack/gommon/log <span class="keyword">in</span> github.com/labstack/gommon v0.<span class="number">3.0</span></span><br><span class="line">go: found golang.org/x/crypto/acme/autocert <span class="keyword">in</span> golang.org/x/crypto v0.<span class="number">0.0</span><span class="literal">-20210415154028</span><span class="literal">-4f45737414dc</span></span><br><span class="line">go: found github.com/stretchr/testify/assert <span class="keyword">in</span> github.com/stretchr/testify v1.<span class="number">7.0</span></span><br></pre></td></tr></table></figure>
<p>安装后可以看到go.mod文件如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module hello</span><br><span class="line"></span><br><span class="line">go 1.16</span><br><span class="line"></span><br><span class="line">require (</span><br><span class="line">	github.com&#x2F;labstack&#x2F;echo v3.3.10+incompatible</span><br><span class="line">	github.com&#x2F;labstack&#x2F;gommon v0.3.0 &#x2F;&#x2F; indirect</span><br><span class="line">	github.com&#x2F;stretchr&#x2F;testify v1.7.0 &#x2F;&#x2F; indirect</span><br><span class="line">	golang.org&#x2F;x&#x2F;crypto v0.0.0-20210415154028-4f45737414dc &#x2F;&#x2F; indirect</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>运行项目</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> go run server.go</span><br><span class="line">Hello, KHighness!</span><br><span class="line"></span><br><span class="line">   ____    __</span><br><span class="line">  / __/___/ /  ___</span><br><span class="line"> / _// __/ _ \/ _ \</span><br><span class="line">/___/\__/_//_/\___/ v3.<span class="number">3.10</span><span class="literal">-dev</span></span><br><span class="line">High performance, minimalist Go web framework</span><br><span class="line">https://echo.labstack.com</span><br><span class="line">____________________________________O/_______</span><br><span class="line">                                    O\</span><br><span class="line">⇨ http server started on [::]:<span class="number">3333</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目测试</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"> <span class="variable">$</span> <span class="built_in">curl</span> <span class="literal">-X</span> GET http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">3333</span></span><br><span class="line"><span class="string">&quot;Hello KHighness!&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>项目打包</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> go build</span><br></pre></td></tr></table></figure>
<p>打包后在项目根目录下可以看到hello.exe可执行文件。<br /></p>
<p><a name="WluSR"></a></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>[1] modules wiki: <a href="https://github.com/golang/go/wiki/Modules">https://github.com/golang/go/wiki/Modules</a><br />[2] go mod 使用: <a href="https://juejin.cn/post/6844903798658301960">https://juejin.cn/post/6844903798658301960</a><br />[3] 再探go modules: <a href="https://www.cnblogs.com/apocelipes/p/10295096.html">https://www.cnblogs.com/apocelipes/p/10295096.html</a></p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>RMI &amp; RPC</title>
    <url>/posts/18721/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a name="a35Xi"></a></p>
<h2 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h2><p>Remote Method Invocation：远程方法调用<br /></p>
<p><a name="f5ijZ"></a></p>
<h3 id="调用过程"><a href="#调用过程" class="headerlink" title="调用过程"></a>调用过程</h3><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/18721/rmi.png" class="" title="rmi">

<ul>
<li>Client调用Client Stub上的方法</li>
<li>Client Stub将方法和参数进行序列化（编码）成可传输消息体</li>
<li>消息通过网络传输到Server</li>
<li>Server Stub将消息进行反序列化（解码）</li>
<li>Server根据解码结果调用方法，并将结果返回给Server Stub</li>
<li>Server Stub对返回结果进行序列化（编码）成可传输消息体</li>
<li>消息网络传输到Client</li>
<li>Client Stub对消息进行反序列化（解码）</li>
<li>Client Stub将解码结果返回给Client</li>
</ul>
<br />

<p><a name="bxgrO"></a></p>
<h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><p>Remote Procedure Call：远程过程调用<br /></p>
<p><a name="zBw3W"></a></p>
<h3 id="框架组成"><a href="#框架组成" class="headerlink" title="框架组成"></a>框架组成</h3><ul>
<li>客户端（Client）：服务调用方</li>
<li>客户端存根（Client Stub）：存放服务端地址信息，将客户端的请求参数数据信息打包成网络消息，再通过网络传输发送给服务端</li>
<li>服务端存根（Server Stub）：接收客户端发送过来的请求消息并进行解包，然后再调用本地服务进行处理</li>
<li>服务端（Server）：服务的真正提供者</li>
<li>Network Service：底层传输，可以是 TCP 或 HTTP</li>
</ul>
<br />

<p><a name="40eNr"></a></p>
<h3 id="调用过程-1"><a href="#调用过程-1" class="headerlink" title="调用过程"></a>调用过程</h3><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/18721/rpc.png" class="" title="rpc"><br />

<ul>
<li>Client通过本地调用的方式调用服务</li>
<li>Client Stub接收到调用请求后负责将方法、参数等编码成可传输消息体</li>
<li>Client Stub找到远程的服务地址，并且将消息通过网络发送给Server</li>
<li>Server Stub收到消息后进行解码操作</li>
<li>Server Stub根据解码结果调用本地的服务进行相关处理</li>
<li>Server进行业务逻辑处理</li>
<li>Server将处理结果返回给Server Stub</li>
<li>Server Stub将返回结果进行编码</li>
<li>Server Stub将结果通过网络发送至消费方</li>
<li>Client Stub接收到消息，并进行解码</li>
<li>Client得到最终结果</li>
</ul>
<p><a name="iDmiD"></a></p>
<h3 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h3><ul>
<li>服务寻址</li>
<li>数据流的序列化和反序列化</li>
<li>网络传输</li>
</ul>
<br />

<p><a name="z05rV"></a></p>
<h2 id="RPC-VS-PMI"><a href="#RPC-VS-PMI" class="headerlink" title="RPC VS PMI"></a>RPC VS PMI</h2><p>不同点：<br />（1）方法调用方式不同<br />RMI中是通过在客户端的Stub对象作为远程接口进行远程方法的调用。每个远程方法都具有方法签名。如果服务器上添加了一个可执行方法，但是没有相匹配的签名被添加到这个远程接口Stub对象上，那么这个新方法就不能被客户端调用。<br />RPC是通过网络服务协议向远程主机发送请求，请求包含了一个参数集和文本值，通常形成”classname.methodname”的形式，服务器就去搜索与之相匹配的类和方法，找到后就执行方法并把结果编码，通过网络协议返回。<br />（2）使用语言范围不同<br />RMI是J2EE的13大规范之一，只适用于Java；RPC是网络协议，与操作系统和语言无关。<br />（5）调用结果的返回形式不同<br />RMI的调用结果可以是Java的对象类型或者基本数据类型；RPC的调用结果统一由外部数据表示。</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>RPC</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot-json</title>
    <url>/posts/22416/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>前言</p>
</blockquote>
<p>平日里项目中处理JSON一般用的都是阿里巴巴的fastjson，现在发现使用SpringBoot内置的Jackson的序列化和反序列化也挺方便的。Jackson不但可以完成简单的序列化和反序列化操作，也能实现复杂的个性化的序列化和反序列化操作。<br />——以上文案皆盗于鸟叔博客，勿怪勿怪。<br /></p>
<blockquote>
<p>准备</p>
</blockquote>
<p>实体类User</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">3180230416244251692L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// NoArgsConstructor</span></span><br><span class="line">    <span class="comment">// AllArgsConstructor</span></span><br><span class="line">    <span class="comment">// Getter and Setter</span></span><br><span class="line">    <span class="comment">// ToString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><a name="AC50G"></a></p>
<h2 id="ObjectMapper-API"><a href="#ObjectMapper-API" class="headerlink" title="ObjectMapper API"></a>ObjectMapper API</h2><p><br /><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/22416/objectmapper.png" class="" title="objectmapper"><br /><br><br /></p>
<p><a name="UY4x1"></a></p>
<h2 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><p><br />序列化属性SerializationFeature</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WRAP_ROOT_VALUE(<span class="keyword">false</span>),                   </span><br><span class="line">INDENT_OUTPUT(<span class="keyword">false</span>),</span><br><span class="line">FAIL_ON_EMPTY_BEANS(<span class="keyword">true</span>),</span><br><span class="line">FAIL_ON_SELF_REFERENCES(<span class="keyword">true</span>),</span><br><span class="line">WRAP_EXCEPTIONS(<span class="keyword">true</span>),</span><br><span class="line">FAIL_ON_UNWRAPPED_TYPE_IDENTIFIERS(<span class="keyword">true</span>),</span><br><span class="line">CLOSE_CLOSEABLE(<span class="keyword">false</span>),</span><br><span class="line">FLUSH_AFTER_WRITE_VALUE(<span class="keyword">true</span>),</span><br><span class="line">WRITE_DATES_AS_TIMESTAMPS(<span class="keyword">true</span>),</span><br><span class="line">WRITE_DATE_KEYS_AS_TIMESTAMPS(<span class="keyword">false</span>),</span><br><span class="line">WRITE_DATES_WITH_ZONE_ID(<span class="keyword">false</span>),</span><br><span class="line">WRITE_DURATIONS_AS_TIMESTAMPS(<span class="keyword">true</span>),</span><br><span class="line">WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS(<span class="keyword">false</span>),</span><br><span class="line">WRITE_ENUMS_USING_TO_STRING(<span class="keyword">false</span>),</span><br><span class="line">WRITE_ENUMS_USING_INDEX(<span class="keyword">false</span>),</span><br><span class="line">WRITE_ENUM_KEYS_USING_INDEX(<span class="keyword">false</span>),</span><br><span class="line">WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED(<span class="keyword">false</span>),</span><br><span class="line">WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS(<span class="keyword">true</span>),</span><br><span class="line">ORDER_MAP_ENTRIES_BY_KEYS(<span class="keyword">false</span>),</span><br><span class="line">EAGER_SERIALIZER_FETCH(<span class="keyword">true</span>),</span><br><span class="line">USE_EQUALITY_FOR_OBJECT_ID(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>
<p>反序列化属性DeserializationFeature</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">USE_BIG_DECIMAL_FOR_FLOATS(<span class="keyword">false</span>),</span><br><span class="line">USE_BIG_INTEGER_FOR_INTS(<span class="keyword">false</span>),</span><br><span class="line">USE_LONG_FOR_INTS(<span class="keyword">false</span>),</span><br><span class="line">USE_JAVA_ARRAY_FOR_JSON_ARRAY(<span class="keyword">false</span>),</span><br><span class="line">FAIL_ON_UNKNOWN_PROPERTIES(<span class="keyword">true</span>),</span><br><span class="line">FAIL_ON_NULL_FOR_PRIMITIVES(<span class="keyword">false</span>),</span><br><span class="line">FAIL_ON_NUMBERS_FOR_ENUMS(<span class="keyword">false</span>),</span><br><span class="line">FAIL_ON_INVALID_SUBTYPE(<span class="keyword">true</span>),</span><br><span class="line">FAIL_ON_READING_DUP_TREE_KEY(<span class="keyword">false</span>),</span><br><span class="line">FAIL_ON_IGNORED_PROPERTIES(<span class="keyword">false</span>),</span><br><span class="line">FAIL_ON_UNRESOLVED_OBJECT_IDS(<span class="keyword">true</span>),</span><br><span class="line">FAIL_ON_MISSING_CREATOR_PROPERTIES(<span class="keyword">false</span>),</span><br><span class="line">FAIL_ON_NULL_CREATOR_PROPERTIES(<span class="keyword">false</span>),</span><br><span class="line">FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY(<span class="keyword">true</span>),</span><br><span class="line">FAIL_ON_TRAILING_TOKENS(<span class="keyword">false</span>),</span><br><span class="line">WRAP_EXCEPTIONS(<span class="keyword">true</span>),</span><br><span class="line">ACCEPT_SINGLE_VALUE_AS_ARRAY(<span class="keyword">false</span>),</span><br><span class="line">UNWRAP_SINGLE_VALUE_ARRAYS(<span class="keyword">false</span>),</span><br><span class="line">UNWRAP_ROOT_VALUE(<span class="keyword">false</span>),</span><br><span class="line">ACCEPT_EMPTY_STRING_AS_NULL_OBJECT(<span class="keyword">false</span>),</span><br><span class="line">ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT(<span class="keyword">false</span>),</span><br><span class="line">ACCEPT_FLOAT_AS_INT(<span class="keyword">true</span>),</span><br><span class="line">READ_ENUMS_USING_TO_STRING(<span class="keyword">false</span>),</span><br><span class="line">READ_UNKNOWN_ENUM_VALUES_AS_NULL(<span class="keyword">false</span>),</span><br><span class="line">READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE(<span class="keyword">false</span>),</span><br><span class="line">READ_DATE_TIMESTAMPS_AS_NANOSECONDS(<span class="keyword">true</span>),</span><br><span class="line">ADJUST_DATES_TO_CONTEXT_TIME_ZONE(<span class="keyword">true</span>),</span><br><span class="line">EAGER_DESERIALIZER_FETCH(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>

<br>

<h2 id="environment配置"><a href="#environment配置" class="headerlink" title="environment配置"></a>environment配置</h2><p>可配置</p>
<ul>
<li>spring.jackson.deserialization.<feature_name>=true|false</li>
<li>spring.jackson.generator.<feature_name>=true|false</li>
<li>spring.jackson.mapper.<feature_name>=true|false</li>
<li>spring.jackson.parser.<feature_name>=true|false</li>
<li>spring.jackson.serialization.<feature_name>=true|false</li>
<li>spring.jackson.serialization-inclusion=always|non_null|non_absent|non_default|non_empty</li>
</ul>
<p><br />application.yml：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="comment"># 日期格式化</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">    <span class="comment"># 设置空属性何如序列化</span></span><br><span class="line">    <span class="attr">default-property-inclusion:</span> <span class="string">non_empty</span></span><br><span class="line">    <span class="comment"># 序列化</span></span><br><span class="line">    <span class="attr">serialization:</span></span><br><span class="line">    <span class="comment"># 反序列化</span></span><br><span class="line">    <span class="attr">deserialization:</span></span><br><span class="line">    <span class="comment"># 解析    </span></span><br><span class="line">    <span class="attr">parser:</span> </span><br></pre></td></tr></table></figure>


<br>
## configuration配置
在@Configuration类中生成bean：
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JacksonConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(ObjectMapper.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ObjectMapper <span class="title">objectMapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">// 序列化日期格式</span></span><br><span class="line">        objectMapper.setDateFormat(<span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>));</span><br><span class="line">        <span class="comment">// 没有匹配的属性名称时不作处理</span></span><br><span class="line">        objectMapper.configure(MapperFeature.AUTO_DETECT_FIELDS, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        <span class="comment">//禁止序列化空值</span></span><br><span class="line">        objectMapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, <span class="keyword">false</span>);</span><br><span class="line">        objectMapper.configure(SerializationFeature.WRITE_ENUMS_USING_TO_STRING, <span class="keyword">true</span>);</span><br><span class="line">        objectMapper.configure(SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS, <span class="keyword">true</span>);</span><br><span class="line">        objectMapper.configure(SerializationFeature.FLUSH_AFTER_WRITE_VALUE, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 不包含空值属性</span></span><br><span class="line">        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_EMPTY);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反序列化</span></span><br><span class="line">        <span class="comment">//禁止遇到空原始类型时抛出异常，用默认值代替</span></span><br><span class="line">        objectMapper.configure(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES, <span class="keyword">false</span>);</span><br><span class="line">        objectMapper.configure(DeserializationFeature.READ_ENUMS_USING_TO_STRING, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 禁止遇到未知（新）属性时报错，支持兼容扩展</span></span><br><span class="line">        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="keyword">false</span>);</span><br><span class="line">        objectMapper.configure(DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES, <span class="keyword">false</span>);</span><br><span class="line">        objectMapper.configure(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT, <span class="keyword">true</span>);</span><br><span class="line">        objectMapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, <span class="keyword">true</span>);</span><br><span class="line">        objectMapper.configure(DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS, <span class="keyword">true</span>);</span><br><span class="line">        objectMapper.configure(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL, <span class="keyword">true</span>);</span><br><span class="line">        objectMapper.configure(DeserializationFeature.READ_ENUMS_USING_TO_STRING, <span class="keyword">true</span>);</span><br><span class="line">        objectMapper.configure(DeserializationFeature.READ_ENUMS_USING_TO_STRING, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> objectMapper;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
Rest接口：
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(UserController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 序列化接口</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/get&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;KHighness&quot;</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">return</span> objectMapper.writeValueAsString(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反序列化接口</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(<span class="meta">@RequestBody</span> String userJsonList)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = objectMapper.readValue(userJsonList, <span class="keyword">new</span> TypeReference&lt;List&lt;User&gt;&gt;() &#123;&#125;);</span><br><span class="line">        userList.forEach(e -&gt; &#123;log.info(e.toString());&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
CURL测试（windows下建议使用cmd进行测试，用powershell会到导致POST错误）<br />序列化测试：
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">curl</span> <span class="literal">-X</span> GET http://localhost:<span class="number">3333</span>/user/get</span><br></pre></td></tr></table></figure>
序列化测试结果：
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;id&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;KHighness&quot;</span>,<span class="attr">&quot;birth&quot;</span>:<span class="string">&quot;2021-04-15&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
反序列化测试：
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">curl</span> <span class="literal">-H</span> <span class="string">&quot;Content-Type:application/json&quot;</span> <span class="literal">-X</span> POST -<span class="literal">-data</span> <span class="string">&quot;[&#123;\&quot;</span>id\<span class="string">&quot;:1, \&quot;</span>name\<span class="string">&quot;:\&quot;</span>Khighness\<span class="string">&quot;, \&quot;</span>birth\<span class="string">&quot;:\&quot;</span><span class="number">2001</span><span class="literal">-09</span><span class="literal">-11</span>\<span class="string">&quot;&#125;, &#123;\&quot;</span>id\<span class="string">&quot;:2, \&quot;</span>name\<span class="string">&quot;:\&quot;</span>FlowerK\<span class="string">&quot;, \&quot;</span>birth\<span class="string">&quot;:\&quot;</span><span class="number">2003</span><span class="literal">-07</span><span class="literal">-24</span>\<span class="string">&quot;&#125;]&quot;</span>  http://localhost:<span class="number">3333</span>/user/save</span><br></pre></td></tr></table></figure>
反序列化测试结果：
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[&#123;<span class="attr">&quot;id&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;Khighness&quot;</span>,<span class="attr">&quot;birth&quot;</span>:<span class="string">&quot;2001-09-11&quot;</span>&#125;,&#123;<span class="attr">&quot;id&quot;</span>:<span class="number">2</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;FlowerK&quot;</span>,<span class="attr">&quot;birth&quot;</span>:<span class="string">&quot;2003-07-24&quot;</span>&#125;]</span><br></pre></td></tr></table></figure>

<br>

<h2 id="Jackson注解"><a href="#Jackson注解" class="headerlink" title="Jackson注解"></a>Jackson注解</h2><p><br />（1）@JsonProperty<br>作用在属性上，用于序列化和反序列化时为JSON key指定一个别名。<br><br />例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonProperty(&quot;bth&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Date birth;</span><br></pre></td></tr></table></figure>
<p>此时序列化测试结果为：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;id&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;KHighness&quot;</span>,<span class="attr">&quot;bth&quot;</span>:<span class="string">&quot;2021-04-16&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p><br />（2）@JsonIgnore<br>作用在属性上，用于在序列化和反序列化时忽略此属性。<br><br />例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonIgnore</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure>
<p>此时序列化测试结果为：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;id&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;birth&quot;</span>:<span class="string">&quot;2021-04-16&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p><br />（3）@JsonIgnoreProperties<br>作用在类上，用于忽略一组属性。<br><br />例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonIgnoreProperties(&#123;&quot;id&quot;, &quot;birth&quot;&#125;)</span></span><br></pre></td></tr></table></figure>
<p>此时序列化测试结果为：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;KHighness&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p><br />（4）@JsonFormat<br>作用在日期属性上，用于格式化。<br><br />例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy.MM.dd&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Date birth;</span><br></pre></td></tr></table></figure>
<p>此时序列化测试结果为：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;id&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;userName&quot;</span>:<span class="string">&quot;KHighness&quot;</span>,<span class="attr">&quot;birth&quot;</span>:<span class="string">&quot;2021.04.16&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p><br />（5）@JsonNaming<br>作用在类上，用于指定一个命名策略。</p>
<p>Jackson自带了五种(两种)命名策略，使用方式，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonNaming(PropertyNamingStrategy.&lt;Strategy&gt;.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"> 	<span class="keyword">private</span> String userName;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>命名策略</th>
<th>中文描述</th>
<th>作用结果</th>
</tr>
</thead>
<tbody><tr>
<td>KebabCaseStrategy</td>
<td>中划线</td>
<td>user-name</td>
</tr>
<tr>
<td>SnakeCaseStrategy</td>
<td>下划线</td>
<td>user_name</td>
</tr>
<tr>
<td>UpperCamelCaseStrategy</td>
<td>大驼峰</td>
<td>UserName</td>
</tr>
<tr>
<td>LowerCaseStrategy</td>
<td>全小写</td>
<td>username</td>
</tr>
<tr>
<td>LowerDotCaseStrategy</td>
<td>小写点</td>
<td>user.name</td>
</tr>
</tbody></table>
<p><br />（6）@JsonSerialize<br>作用在类上，指定一个类来自定义序列化，该类必须实现<code>JsonSerializer</code>接口。<br><br />例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserSerializer</span> <span class="keyword">extends</span> <span class="title">JsonSerializer</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(User user, JsonGenerator jsonGenerator, </span></span></span><br><span class="line"><span class="function"><span class="params">                          SerializerProvider serializerProvider)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        jsonGenerator.writeStartObject();</span><br><span class="line">        jsonGenerator.writeStringField(<span class="string">&quot;USER-NAME&quot;</span>, user.getUserName());</span><br><span class="line">        jsonGenerator.writeEndObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonSerialize(using = UserSerializer.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">3180230416244251692L</span>;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时序列化接口测试结果为：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;USER-NAME&quot;</span>:<span class="string">&quot;KHighness&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p><br />（7）@JsonDeserialize<br>作用在类上，指定一个类来自定义反序列化，该类必须实现<code>JsonDeserializer</code>接口。<br><br />例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDeserializer</span> <span class="keyword">extends</span> <span class="title">JsonDeserializer</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">deserialize</span><span class="params">(JsonParser jsonParser, DeserializationContext deserializationContext)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, JsonProcessingException </span>&#123;</span><br><span class="line">        JsonNode node = jsonParser.getCodec().readTree(jsonParser);</span><br><span class="line">        String userName = node.get(<span class="string">&quot;user-name&quot;</span>).asText();</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUserName(userName);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonDeserialize(using = UserDeserializer.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">3180230416244251692L</span>;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>反序列化测试：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">curl -H &quot;Content-Type:application/json&quot; -X POST --data &quot;[&#123;\&quot;user-name\&quot;:\&quot;Khighness\&quot;&#125;, &#123;\&quot;user-name\&quot;:\&quot;FlowerK\&quot;&#125;]&quot;  http://localhost:3333/user/save</span><br><span class="line">[&#123;<span class="attr">&quot;userName&quot;</span>:<span class="string">&quot;Khighness&quot;</span>&#125;,&#123;<span class="attr">&quot;userName&quot;</span>:<span class="string">&quot;FlowerK&quot;</span>&#125;]</span><br></pre></td></tr></table></figure>
<p>反序列化测试结果为：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[&#123;<span class="attr">&quot;userName&quot;</span>:<span class="string">&quot;Khighness&quot;</span>&#125;,&#123;<span class="attr">&quot;userName&quot;</span>:<span class="string">&quot;FlowerK&quot;</span>&#125;]</span><br></pre></td></tr></table></figure>

<p><br />（8）@JsonView<br>作用在类、属性和方法上，用来序列化组。<br><br />比如对于User对象，某些情况下只返回userName即可，</p>
<p>而某些情况下需要返回全部属性。因此User对象可以这样定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">3180230416244251692L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 仅包含userName</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserNameView</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 包含全部属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AllUserFieldView</span> <span class="keyword">extends</span> <span class="title">UserNameView</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonView(AllUserFieldView.class)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonView(UserNameView.class)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonView(AllUserFieldView.class)</span></span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在controller的方法上使用@JsonView，可以指定序列化组名。<br />使用组名UserNameView：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonView(User.UserNameView.class)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/get&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;KHighness&quot;</span>, <span class="keyword">new</span> Date());</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>序列化测试结果为：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;userName&quot;</span>:<span class="string">&quot;KHighness&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>当组名指定为<code>AllUserFieldView</code>时，序列化测试结果为：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;id&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;userName&quot;</span>:<span class="string">&quot;KHighness&quot;</span>,<span class="attr">&quot;birth&quot;</span>:<span class="string">&quot;2021-04-17&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<br />
参考：

<ul>
<li><a href="https://www.kancloud.cn/ahutchen/spring-boot-reference-guide/333370">自定义Jackson ObjectMapper</a></li>
<li><a href="https://mrbird.cc/Spring-Boot%20JSON.html">SpringBoot中的JSON技术</a></li>
</ul>
<br />

]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>Chartjs</title>
    <url>/posts/50163/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>前言</p>
</blockquote>
<p>四月了，水一篇博客吧，关于<code>hexo-tag-chart</code>插件的使用，文档只有一个案例，官方文档只给出<code>js</code>用法，至于怎么使用以及用到何种程度，就看自己的造化吧。</p>
<p>示例：<a href="https://shen-yu.gitee.io/2020/chartjs">沈宇大佬博客</a></p>
<p>文档：<a href="https://chartjs.bootcss.com/">中文官方文档</a></p>
<h3 id="每月明细"><a href="#每月明细" class="headerlink" title="每月明细"></a>每月明细</h3><div style="width: 80%;margin: 0 auto">
    <canvas id="chart1932" style="height: 120px"></canvas>
</div>
<script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script>
<script type="text/javascript">
    var ctx = document.getElementById('chart1932').getContext('2d');
    var options = {
    type: 'line',
    data: {
        labels: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],
        datasets: [{
        	label: '2020',
            borderColor: 'orange',
            backgroundColor: 'yellow',
			data: [0, 0, 0, 0, 0, 1, 0, 0, 1, 6, 5, 1], 
		},{
			label: '2021',
            borderColor: 'blue',
            backgroundColor: 'lightBlue',
			data: [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], 
		}]
    },
    options: {
        responsive: true,
        title: {
            display: true,
            text: '每月明细'
        }
    }
};;
    new Chart(ctx, options);
</script>



<a id="more"></a>




<h3 id="年度统计"><a href="#年度统计" class="headerlink" title="年度统计"></a>年度统计</h3><div style="width: 100%;margin: 0 auto">
    <canvas id="chart6126" style="height: 100px"></canvas>
</div>
<script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script>
<script type="text/javascript">
    var ctx = document.getElementById('chart6126').getContext('2d');
    var options = {
    type: 'polarArea',
    data: {
        labels: ['2020', '2021'],
        datasets: [{
            backgroundColor: ['orange', 'blue'],
			data: [14, 1], 
		}]
    },
    options: {
        responsive: true,
        title: {
            display: true,
            text: '博客统计'
        }
    }
};;
    new Chart(ctx, options);
</script>



<h3 id="能力雷达"><a href="#能力雷达" class="headerlink" title="能力雷达"></a>能力雷达</h3><div style="width: 100%;margin: 0 auto">
    <canvas id="chart8388" style="height: 100px"></canvas>
</div>
<script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script>
<script type="text/javascript">
    var ctx = document.getElementById('chart8388').getContext('2d');
    var options = {
    type: 'radar',
    data: {
        labels: ['Java', 'MySQL', 'Redis', 'Spring', 'SpringBoot', 'SpringCloud Alibaba', 'Vue', 'TCP/IP', 'OS'],
        datasets: [{
            label: '2020',
            fill: true,
            borderColor: 'rgb(253, 100, 131)',
			pointHoverBackgroundColor: 'red',
			data: [0.5, 0.4, 0.4, 0.1, 0.5, 0.2, 0.2, 0.5, 0.3]
		},
		{
			label: '2021',
			fill: true,
			borderColor: 'rgb(100, 147, 208)',
			pointHoverBackgroundColor: 'blue', 
			data: [0.7, 0.7, 0.5, 0.5, 0.7, 0.5, 0.1, 0.6, 0.2]
        }]
    },
    options: {
        responsive: true,
        title: {
            display: true,
            text: '能力雷达'
        }
    }
};;
    new Chart(ctx, options);
</script>

]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>Chartjs</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/posts/c24675b4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="MySQL概述"><a href="#MySQL概述" class="headerlink" title="MySQL概述"></a>MySQL概述</h2><h3 id="CentOS7安装"><a href="#CentOS7安装" class="headerlink" title="CentOS7安装"></a>CentOS7安装</h3><blockquote>
<p>下载RPM安装包</p>
</blockquote>
<p>下载: <a href="https://downloads.mysql.com/archives/community/">mysql download</a></p>
<p>将四个包下载后移动到opt文件夹下</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/c24675b4/image-20210314104200636.png" class="" title="s">



<a id="more"></a>



<blockquote>
<p>检查是否已安装MySQL</p>
</blockquote>
<p>如果没有信息显示则表示未安装MySQL</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rpm -qa | grep -i mysql</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>安装MySQL</p>
</blockquote>
<p><code>-i</code>：显示套件的文件列表</p>
<p><code>-v</code>：显示指令执行过程</p>
<p><code>-h</code>：套件安装时列出标记</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rpm -ivh &lt;包名&gt;</span></span><br></pre></td></tr></table></figure>

<p>安装顺序：</p>
<ol>
<li>common</li>
<li>libs</li>
<li>client</li>
<li>server</li>
</ol>
<p>依赖冲突：</p>
<p>直接卸载mariadb</p>
<p>详情如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@parak opt]# rpm -ivh mysql-community-common-8.0.20-1.el7.x86_64.rpm </span><br><span class="line">警告：mysql-community-common-8.0.20-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY</span><br><span class="line">准备中...                          ################################# [100%]</span><br><span class="line">正在升级/安装...</span><br><span class="line">   1:mysql-community-common-8.0.20-1.e################################# [100%]</span><br><span class="line">[root@parak opt]# rpm -ivh mysql-community-libs-8.0.20-1.el7.x86_64.rpm </span><br><span class="line">警告：mysql-community-libs-8.0.20-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY</span><br><span class="line">错误：依赖检测失败：</span><br><span class="line">	mariadb-libs 被 mysql-community-libs-8.0.20-1.el7.x86_64 取代</span><br><span class="line">[root@parak opt]# rpm -qa | grep mariadb</span><br><span class="line">mariadb-libs-5.5.68-1.el7.x86_64</span><br><span class="line">[root@parak opt]# rpm -e mariadb-libs-5.5.68-1.el7.x86_64</span><br><span class="line">错误：依赖检测失败：</span><br><span class="line">	libmysqlclient.so.18()(64bit) 被 (已安裝) postfix-2:2.10.1-9.el7.x86_64 需要</span><br><span class="line">	libmysqlclient.so.18(libmysqlclient_18)(64bit) 被 (已安裝) postfix-2:2.10.1-9.el7.x86_64 需要</span><br><span class="line">[root@parak opt]# rpm -e --nodeps mariadb-libs-5.5.68-1.el7.x86_64</span><br><span class="line">[root@parak opt]# rpm -ivh mysql-community-libs-8.0.20-1.el7.x86_64.rpm </span><br><span class="line">警告：mysql-community-libs-8.0.20-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY</span><br><span class="line">准备中...                          ################################# [100%]</span><br><span class="line">正在升级/安装...</span><br><span class="line">   1:mysql-community-libs-8.0.20-1.el7################################# [100%]</span><br><span class="line">[root@parak opt]# rpm -ivh mysql-community-client-8.0.20-1.el7.x86_64.rpm </span><br><span class="line">警告：mysql-community-client-8.0.20-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY</span><br><span class="line">准备中...                          ################################# [100%]</span><br><span class="line">正在升级/安装...</span><br><span class="line">   1:mysql-community-client-8.0.20-1.e################################# [100%]</span><br><span class="line">[root@parak opt]# rpm -ivh mysql-community-server-8.0.20-1.el7.x86_64.rpm </span><br><span class="line">警告：mysql-community-server-8.0.20-1.el7.x86_64.rpm: 头V3 DSA/SHA1 Signature, 密钥 ID 5072e1f5: NOKEY</span><br><span class="line">准备中...                          ################################# [100%]</span><br><span class="line">正在升级/安装...</span><br><span class="line">   1:mysql-community-server-8.0.20-1.e################################# [100%]</span><br></pre></td></tr></table></figure>



<blockquote>
<p>查看是否安装成功</p>
</blockquote>
<ul>
<li>方式一：查看mysql版本号<code>mysqladmin --version</code></li>
<li>方式二：查看是否创建了mysql用户(组)<code>cat /etc/passwd | grep mysql</code></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@parak opt]# mysqladmin --version</span><br><span class="line">mysqladmin  Ver 8.0.20 for Linux on x86_64 (MySQL Community Server - GPL)</span><br><span class="line">[root@parak opt]# cat /etc/passwd | grep mysql</span><br><span class="line">mysql:x:27:27:MySQL Server:/var/lib/mysql:/bin/false</span><br></pre></td></tr></table></figure>



<blockquote>
<p>启动MySQL服务</p>
</blockquote>
<ul>
<li>启动MySQL：<code>systemctl start mysqld</code></li>
<li>停止MySQL：<code>systemctl stop mysqld</code></li>
</ul>
<blockquote>
<p>登录MySQL</p>
</blockquote>
<p>两种方式：</p>
<ul>
<li>方式一：查看MySQL初始密码<code> cat /var/log/mysqld.log | grep password</code></li>
<li>方式二：修改<code>my.cnf</code>配置文件用于跳过密码，在<code>[mysqld]</code>下添加<code> skip-grant-tables</code></li>
</ul>
<p>推荐使用第一种，因为在MySQL8在跳过登录的状态下是不允许修改登录密码的。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 登录mysql</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysql -uroot -p</span></span><br><span class="line">Enter password:</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改校验密码策略等级</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysql&gt; <span class="built_in">set</span> global validate_password.policy=LOW;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置密码最小长度</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysql&gt; <span class="built_in">set</span> global validate_password.length=1;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 最后设置密码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY &lt;password&gt;;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>Navicat连接产生问题</p>
</blockquote>
<p>（1）HOST <IP> is not allowed to connect to this mysql server</p>
<p>解决：关闭防火墙，更新可连接IP</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看防火墙状态</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl status firewalld.service</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭防火墙</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl stop firewalld.service</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 禁止自启动</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">disable</span> firewalld.service</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 让所有IP都可以连接MySQL</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysql&gt; update user <span class="built_in">set</span> host=<span class="string">&#x27;%&#x27;</span> <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span>;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 刷新权限</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysql&gt; flush privileges;</span></span><br></pre></td></tr></table></figure>



<p>（2）Client does not support authentication protocol requested by server</p>
<p>解决：更改加密规则，更新用户密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment">#更改加密方式</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysql&gt; ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;password&#x27;</span> PASSWORD EXPIRE NEVER; </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新用户密码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysql&gt; ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;&lt;password&gt;&#x27;</span>;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>设置开机自启动</p>
</blockquote>
<p>按照以上安装方式mysql服务是默认开机自启动的，可以通过<code>systemctl list-unit-files </code>查看开机启动项</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@parak mysql]# systemctl list-unit-files | grep mysql</span><br><span class="line">mysqld.service                                enabled </span><br><span class="line">mysqld@.service                               disabled</span><br></pre></td></tr></table></figure>

<p>如果不是开机自启动，可以通过<code>ntsysv</code>启用服务，<code>[]</code>中设置<code>*</code>即可使其开机自启动：</p>
<ul>
<li>上下键：可以在中间的方框当中，在各个服务之间移动</li>
<li>空格键：可以用来选择你所需要的服务，[*]表示开起启动</li>
<li>tab键：可以在方框、OK、Cancel之间移动</li>
<li>F1键：可以显示该服务的说明</li>
</ul>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/c24675b4/image-20210314131906998.png" class="" title="image-20210314131906998">



<h3 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h3><blockquote>
<p>拉取镜像</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull mysql:8.0.20</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>创建挂载的数据和配置文件夹</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir -p /home/mysql/data /home/mysql/conf</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>先启动MySQL容器</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --name mysql -d -p 3306:3306 \</span></span><br><span class="line">-e MYSQL_ROOT_PASSWORD=&lt;password&gt; mysql:8.0.20</span><br></pre></td></tr></table></figure>



<blockquote>
<p>进入容器查看配置文件位置</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it mysql bash</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysql --<span class="built_in">help</span> | grep my.cnf</span></span><br><span class="line">                      order of preference, my.cnf, $MYSQL_TCP_PORT,</span><br><span class="line">/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf </span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">exit</span></span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>将配置文件复制到挂载配置文件夹</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker cp mysql:/etc/mysql/my.cnf /home/mysql/conf</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>在配置文件中添加</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 表名称大小写不敏感</span></span><br><span class="line">lower_case_table_names=1</span><br></pre></td></tr></table></figure>



<blockquote>
<p>先停止并删除容器</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker stop mysql &amp;&amp; docker rm mysql</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>重新运行MySQL容器</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --name mysql \</span></span><br><span class="line">-d -p 3306:3306  \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=&lt;password&gt; \</span><br><span class="line">--mount type=bind,src=/home/mysql/conf/my.cnf,dst=/etc/mysql/my.cnf \</span><br><span class="line">--mount type=bind,src=/home/mysql/data,dst=/var/lib/mysql \</span><br><span class="line">--restart=on-failure:3 \</span><br><span class="line"> mysql:8.0.20</span><br></pre></td></tr></table></figure>



<blockquote>
<p>Navicat无法连接</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it mysql bash</span><br><span class="line">$ mysql -u root -p&lt;password&gt;</span><br><span class="line">$ ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;&lt;password&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure>



<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><blockquote>
<p>安装目录</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">路径</th>
<th align="center">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">/var/lib/mysql/</td>
<td align="center">数据库文件的存放位置</td>
</tr>
<tr>
<td align="center">/usr/share/mysql-8.0/</td>
<td align="center">配置文件目录</td>
</tr>
<tr>
<td align="center">/usr/bin/</td>
<td align="center">相关命令目录</td>
</tr>
</tbody></table>
<blockquote>
<p>查看编码</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show variables like <span class="string">&#x27;character%&#x27;</span>;</span></span><br><span class="line">+--------------------------+--------------------------------+</span><br><span class="line">| Variable_name            | Value                          |</span><br><span class="line">+--------------------------+--------------------------------+</span><br><span class="line">| character_set_client     | utf8mb4                        |</span><br><span class="line">| character_set_connection | utf8mb4                        |</span><br><span class="line">| character_set_database   | utf8mb4                        |</span><br><span class="line">| character_set_filesystem | binary                         |</span><br><span class="line">| character_set_results    | utf8mb4                        |</span><br><span class="line">| character_set_server     | utf8mb4                        |</span><br><span class="line">| character_set_system     | utf8                           |</span><br><span class="line">| character_sets_dir       | /usr/share/mysql-8.0/charsets/ |</span><br><span class="line">+--------------------------+--------------------------------+</span><br></pre></td></tr></table></figure>

<p>可以看到，MySQL 8的默认编码格式除了文件系统是二进制编码以外，已经全部改为utf8和utf8mb4(拥有比utf8更好的兼容性)，因此我们不需要再修改。</p>
<p>注意：使用Navicat连接MySQL时编码应设置为自动，切勿设置为utf8，否则会中文乱码。</p>
<h3 id="逻辑架构"><a href="#逻辑架构" class="headerlink" title="逻辑架构"></a>逻辑架构</h3><blockquote>
<p>优势</p>
</blockquote>
<p>和其他数据库相比，MySQL有点与众不同，它的架构可以在多种不同场景中应用并发挥良好作用和。主要体现在存储引擎的架构上，插件式的存储引擎架构将查询处理和其他的系统任务以及数据的存储提取相分离。这种架构可以根据业务的需求和实际需要选择合适的存储引擎。</p>
<blockquote>
<p>图示</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/c24675b4/image-20210324110838854.png" class="" title="image-20210324110838854">



<blockquote>
<p>详解</p>
</blockquote>
<ul>
<li>连接层：最上层是一些客户端和连接服务，包含本地sock通信和大多数基于客户端/服务端工具实现的类似于TCP/IP通信。主要完成一些类似于连接处理、授权认证及相关的安全方案。在该层上引入了线程池的概念，未通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全连接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。</li>
<li>服务层：第二层架构主要完成大多数的核心功能，如SQL接口，并完成缓存的查询，SQL的分析和优化及部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如过程、函数等。在该层，服务器会解析查询并创建相应的内部解析树，并对其完成相应的优化如确定查询表的顺序，是否利用索引等，最后生成相应的执行操作。如果是select语句，服务器还会查询内部的缓存。如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。</li>
<li>引擎层：存储引擎层，存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API与存储引擎进行通信。不同的存储引擎具有的功能不同，这样我们可以根据自己的实际需要进行选取。</li>
<li>存储层：数据存储层，主要是将数据存储在运行于裸设备的文件系统之上，并完成与存储引擎的交互。</li>
</ul>
<h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><blockquote>
<p>查看存储引擎</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mysql&gt;show engines;</span></span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/c24675b4/image-20210314164337734.png" class="" title="image-20210314164337734">



<blockquote>
<p>MyISAM和InnoDB</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">对比项</th>
<th align="center">MyISAM</th>
<th align="center">InnoDB</th>
</tr>
</thead>
<tbody><tr>
<td align="center">主外键</td>
<td align="center">不支持</td>
<td align="center">支持</td>
</tr>
<tr>
<td align="center">事务</td>
<td align="center">不支持</td>
<td align="center">支持</td>
</tr>
<tr>
<td align="center">行表锁</td>
<td align="center">表锁，即使操作一条记录也会锁住整个表，不合适高并发的操作</td>
<td align="center">行锁，操作时只锁住某一行，不对其他行有影响，适合高并发的操作</td>
</tr>
<tr>
<td align="center">缓存</td>
<td align="center">只缓存索引，不缓存真实数据</td>
<td align="center">不仅缓存索引还要缓存真实数据，对内存要求较高，而且内存大小对性能有决定性的影响。</td>
</tr>
<tr>
<td align="center">表空间</td>
<td align="center">小</td>
<td align="center">大</td>
</tr>
<tr>
<td align="center">关注点</td>
<td align="center">性能</td>
<td align="center">事务</td>
</tr>
<tr>
<td align="center">默认安装</td>
<td align="center">Y</td>
<td align="center">Y</td>
</tr>
</tbody></table>
<blockquote>
<p>说明</p>
</blockquote>
<p>MySQL 8.0：不再支持查询缓存。</p>
<p>MySQL团队博客：<a href="https://mysqlserverteam.com/mysql-8-0-retiring-support-for-the-query-cache/">https://mysqlserverteam.com/mysql-8-0-retiring-support-for-the-query-cache/</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">尽管MySQL Query Cache旨在提高性能，但它存在严重的可伸缩性问题，并且很容易成为严重的瓶颈。</span><br><span class="line"></span><br><span class="line">自MySQL 5.6（2013）以来，默认情况下已禁用查询缓存，因为众所周知，它不能与多核计算机上在高吞吐量工作负载情况下进行扩展。</span><br><span class="line"></span><br><span class="line">我们考虑了可以对查询缓存进行哪些改进，以及我们可以进行的优化，这些优化可以改善所有工作负载。</span><br><span class="line"></span><br><span class="line">虽然这些选择本身是正交的，但工程资源是有限的。也就是说，我们正在转变战略，投资于更普遍适用于所有工作负载的改进。</span><br><span class="line"></span><br><span class="line">建议把缓存放到客户端。</span><br></pre></td></tr></table></figure>



<blockquote>
<p>Alibaba选择</p>
</blockquote>
<ul>
<li>Percona为MySQL数据库服务进行了改进，在功能和性能上较MySQL有着很显著的提升。该版本提升了在高负载情况下的InnoDB的性能、为DBA提供了一些非常有用的性能诊断工具；另外有更多的参数和命令来控制服务器行为。</li>
<li>阿里巴巴大部分MySQL数据库其实使用的时percona的原型加以修改。阿里新建了一款存储引擎叫xtradb完全可以替代innodb，并且在性能和并发上做得更好。</li>
</ul>
<h2 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h2><h3 id="索引简介"><a href="#索引简介" class="headerlink" title="索引简介"></a>索引简介</h3><blockquote>
<p>定义</p>
</blockquote>
<p>MySQL官方对索引的定义为：索引是帮助MySQL高效获取数据的数据结构。</p>
<p>可以得到索引的本质：索引是数据结构。</p>
<p>简单理解：排好序的快速查找数据结构。</p>
<p>一般来说索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储在磁盘上。</p>
<p>我们平常所说的索引，如果没有特别指明，都是指B树（多路搜索树，不一定是二叉树）结构的索引。</p>
<p>其中聚集索引，次要索引，复合索引，前缀索引，唯一索引默认都是使用B+树索引，统称索引。除了B+树这种类型的索引之外，还有哈希索引等。</p>
<blockquote>
<p>优势</p>
</blockquote>
<p>类似于大学图书馆建数目索引，提高数据检索的效率，降低数据库的IO成本。</p>
<p>通过索引列队数据进行排序，降低数据排序的成本，降低了CPU的消耗。</p>
<blockquote>
<p>劣势</p>
</blockquote>
<p>虽然索引大大提高了查询速度，同时会降低表的更新速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段，都会调整因为更新所带来的键值变化后的索引信息。</p>
<p>索引只是提高效率的一个因素，如果你的MySQL有大数据量的表，就需要花时间研究建立最优秀的索引，或优化查询。</p>
<h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><blockquote>
<p>单值索引</p>
</blockquote>
<p>一个索引列只包含单个列，一个表可以有多个索引。</p>
<blockquote>
<p>唯一索引</p>
</blockquote>
<p>索引列的值必须唯一，但允许有空值。</p>
<blockquote>
<p>复合索引</p>
</blockquote>
<p>一个索引包含多个列。</p>
<blockquote>
<p>覆盖索引</p>
</blockquote>
<p>SQL只需要通过索引就可以返回查询所需要的数据，而不必通过二级索引查到主键之后再去查询数据，即查询字段为索引字段。</p>
<blockquote>
<p>基本语法</p>
</blockquote>
<ul>
<li>创建</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE [UNIQUE] INDEX &lt;index_name&gt; ON &lt;table_name&gt;(&lt;column_name&gt;(length));</span><br><span class="line">ALTER &lt;table_name&gt; ADD [UNIQUE] INDEX &lt;index_name&gt; ON (&lt;column_name&gt;(length));</span><br></pre></td></tr></table></figure>

<ul>
<li>删除</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP INDEX &lt;index_name&gt; ON &lt;table_name&gt;;</span><br></pre></td></tr></table></figure>

<ul>
<li>查看</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">INDEX</span> <span class="keyword">FROM</span> &lt;table_name&gt;;</span><br></pre></td></tr></table></figure>

<ul>
<li>ALTER</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 添加主键，即唯一索引</span><br><span class="line">ALTER TABLE &lt;table_name&gt; PRIMARY KEY (column_list);</span><br><span class="line">-- 创建唯一索引</span><br><span class="line">ALTER TABLE &lt;table_name&gt; UNIQUE &lt;index_name&gt;(column_list);</span><br><span class="line">-- 添加普通索引</span><br><span class="line">ALTER TABLE &lt;table_name&gt; INDEX &lt;index_name&gt;(column_list);</span><br><span class="line">-- 指定全文索引</span><br><span class="line">ALTER TABLE &lt;table_name&gt; FULLTEXT index_name&gt;(column_list);</span><br></pre></td></tr></table></figure>



<h3 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h3><blockquote>
<p>索引</p>
</blockquote>
<ul>
<li>BTREE </li>
<li>HASH</li>
<li>FULL-TEXT</li>
<li>R-TREE</li>
</ul>
<blockquote>
<p>需要建立索引的情况</p>
</blockquote>
<ul>
<li>主键自动建立唯一索引</li>
<li>频繁作为查询条件的字段应该创建索引</li>
<li>查询中与其它表关联的字段，外键关系建立索引</li>
<li>频繁更新的字段不适合创建索引</li>
<li>Where条件里用不到的字段不创建索引</li>
<li>单值/组合索引的选择，在高并发下倾向创建组合索引</li>
<li>查询中排序的字段，排序字段若通过索引去访问将大大提高排序速度</li>
<li>查询中统计或者分组字段</li>
</ul>
<blockquote>
<p>不需要建立索引的情况</p>
</blockquote>
<ul>
<li>表记录太少  [原因：低于百万数的表MySQL还是扛得住的。]</li>
<li>经常增删改的表  [原因：提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。]</li>
<li>数据重复且分布均匀的表字段，因此应该只为最经常查询和最经常排序的数据列建立索引。注意，如果某个数据列包含许多重复的内容，为它建立索引就没有太大的实际效果  [例如：性别等字段。]</li>
</ul>
<h3 id="Join查询"><a href="#Join查询" class="headerlink" title="Join查询"></a>Join查询</h3><blockquote>
<p>join说明</p>
</blockquote>
<ul>
<li>LEFT JOIN：返回左表中的所有记录和右表中联结字段相等的记录。<ul>
<li>格式：<code>SELECT ... table1 LEFT JOIN table2 ON ...</code></li>
<li>说明：会取得table1全部记录，即使table2没有匹配记录</li>
</ul>
</li>
<li>RIGHT JOIN：返回右表中的所有记录和左表中联结字段相等的记录。<ul>
<li>格式：<code>SELECT ... table1 RIGHT JOIN table2 ON ...</code></li>
<li>说明：会取得table2全部记录，即使table1没有匹配记录</li>
</ul>
</li>
<li>INNER JOIN：只返回两个表中联结字段相等的记录。<ul>
<li>格式：<code>SELECT ... table1 INNER JOIN table2 ON ...</code></li>
<li>说明：会取得table1table2联结字段相等的记录</li>
</ul>
</li>
</ul>
<blockquote>
<p>join图示</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT &lt;select_list&gt; from table_a a LEFT JOIN table_b b ON a.key &#x3D; b.key</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/c24675b4/image-20210314221223407.png" class="" title="image-20210314221223407">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT &lt;select_list&gt; from table_a a LEFT JOIN table_b ON a.key &#x3D;&#x3D; b.key and b.key is NULL</span><br></pre></td></tr></table></figure>



<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/c24675b4/image-20210314222433261.png" class="" title="image-20210314222433261">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT &lt;select_list&gt; from table_a a INNER JOIN table_b b ON a.key &#x3D; b.key</span><br></pre></td></tr></table></figure>



<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/c24675b4/image-20210314221536479.png" class="" title="image-20210314221536479">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT &lt;select_list&gt; from table_a a RIGHT JOIN table_b b ON a.key &#x3D; b.key</span><br></pre></td></tr></table></figure>



<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/c24675b4/image-20210314221440655.png" class="" title="image-20210314221440655">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT &lt;select_list&gt; from table_a a RIGHT JOIN table_b ON a.key &#x3D; b.key and a.key is NULL</span><br></pre></td></tr></table></figure>


<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/c24675b4/image-20210314222235183.png" class="" title="image-20210314222235183">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Oracle支持 FULL OUTER JOIN，但是MySQL不支持</span><br><span class="line"># Oracle</span><br><span class="line">SELECT &lt;select_list&gt; FROM table_a a FULL OUTER JOIN table_b b ON a.key &#x3D; b.key</span><br><span class="line"># MySQL</span><br><span class="line">SELECT &lt;select_list&gt; from table_a a LEFT JOIN table_b b ON a.key &#x3D; b.key</span><br><span class="line">union</span><br><span class="line">SELECT &lt;select_list&gt; from table_a a RIGHT JOIN table_b b ON a.key &#x3D; b.key</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/c24675b4/image-20210314222826674.png" class="" title="image-20210314222826674">

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Oracle</span><br><span class="line">SELECT &lt;select_list&gt; FROM table_a a FULL OUTER JOIN table_b b ON a.key &#x3D; b.key WHERE a.key is NULL or b.key is NULL</span><br><span class="line"># MySQL</span><br><span class="line">SELECT &lt;select_list&gt; from table_a a LEFT JOIN table_b b ON a.key &#x3D; b.key where b.id is null</span><br><span class="line">union</span><br><span class="line">SELECT &lt;select_list&gt; from table_a a RIGHT JOIN table_b b ON a.key &#x3D; b.key where a.id is null</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/c24675b4/image-20210314222858303.png" class="" title="image-20210314222858303">





<blockquote>
<p>SQL执行顺序</p>
</blockquote>
<ul>
<li>手写</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span></span><br><span class="line">	&lt;select_list&gt;</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	&lt;left_table&gt; &lt;join_table&gt;</span><br><span class="line"><span class="keyword">JOIN</span> &lt;right_table&gt; <span class="keyword">ON</span> &lt;join_condetion&gt;</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	&lt;where_condition&gt;</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">	&lt;group_by_list&gt;</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">	&lt;having_condition&gt;</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">	&lt;order_by_condition&gt;</span><br><span class="line"><span class="keyword">LIMIT</span> &lt;limit_number&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>机读</li>
</ul>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/c24675b4/image-20210314215216629.png" class="" title="image-20210314215216629">





<h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><blockquote>
<p>MySQL Query Optimizer</p>
</blockquote>
<p>MySQL中有专门负责优化SELECT语句的优化器模块，主要功能：通过计算分析系统中收集到的统计信息，为客户端请求的Query提供他认为最优的执行计划(它认为最优的数据检索方式，但不见得是DBA认为是最优的，这部分最耗费时间)<br>当客户端向MySQL请求一条Query，命令解析器模块完成请求分类，区别出是SELECT并转发给MySQL Query Optimizer时，MySQL Query Optimizer 首先会对整条Query进行优化，处理掉一些常量表达式的预算，直接换算成常量值。并对Query 中的查询条件进行简化和转换，如去掉一些无用或显而易见的条件、结构调整等。然后分析Query 中的Hint 信息(如果有)，看显示Hint信息是否可以完全确定该Query的执行计划。如果没有Hint或Hint信息还不足以完全确定执行计划，则会读取所涉及对象的统计信息，根据Query进行写相应的计算分析，然后再得出最后的执行计划。</p>
<blockquote>
<p>MySQL性能瓶颈</p>
</blockquote>
<p>CPU: CPU在饱和的时候一般发生在数据装入内存或从磁盘上读取数据的时候</p>
<p>IO: 磁盘I/O瓶颈发生在装入数据远大于内存容量的时候</p>
<p>服务器硬件的性能瓶颈：<code>top</code>、<code>free</code>、<code>iostat</code>、<code>vmstat</code>来查看系统的性能状态</p>
<blockquote>
<p>Explain</p>
</blockquote>
<p>官网介绍：<a href="https://dev.mysql.com/doc/refman/8.0/en/explain-output.html">https://dev.mysql.com/doc/refman/8.0/en/explain-output.html</a></p>
<p>使用目的：</p>
<ul>
<li>表的读取顺序</li>
<li>数据读取操作的操作类型</li>
<li>可以使用的索引</li>
<li>实际使用的索引</li>
<li>表之间的引用</li>
<li>每张表被优化器查询的行数</li>
</ul>
<p>使用方法：<code>explain + sql语句</code></p>
<blockquote>
<p>字段解释</p>
</blockquote>
<p>（1）id</p>
<p>解释：</p>
<p>select查询的序列号，包含一组数字，表示查询中执行的select子句或操作表的顺序。</p>
<p>说明：</p>
<ul>
<li>id相同，执行顺序由上至下；</li>
<li>id不同，如果是子查询，id递增，id值越大优先级越高，越先被执行；</li>
<li>id相同不同，同时存在，id如果相同，可以认为是一组，从上往下顺序执行，在所有组中，id值越大，优先级越高。</li>
</ul>
<p>（2）select_type</p>
<p>解释：</p>
<p>查询的类型：SIMPLE、PRIMARY、SUBQUERY、DERIVED、UNION、UNION RESULT。查询的类型，主要是用于区别普通查询、联合查询、子查询等的复杂查询。</p>
<p>说明：</p>
<ul>
<li>SIMPLE：简单的select查询，查询中不包含子查询或者UNION；</li>
<li>PRIMARY：查询中若包含任何复杂的子部分，最外层查询责则被标记为PRIMARY；</li>
<li>SUBQUERY：在SELECT或WHERE列表中包含了子查询；</li>
<li>DERIVED：在FROM列表中包含的子查询被标记为DERIVED(衍生)，MySQL会递归执行这些子查询，把结果放在临时表里；</li>
<li>UNION：若第二个SELECT出现在UNION之后，则被标记为UNION；若UNION包含在FROM子句的子查询中，外层SELECT将被被标记为：DERIVED；</li>
<li>UNION RESULT：从UNION表获取结果的SELECT。</li>
</ul>
<p>（3）table</p>
<p>解释：显示这一行数据是关于哪一张表的。</p>
<p>（4）type</p>
<p>解释：显示查询了何种类型。</p>
<p>说明：</p>
<p>从最好到最差依次是：<code>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</code>。</p>
<p>常见的是：<code>system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL</code>。</p>
<p>一般来说，得保证查询至少达到range级别，最好能到ref。</p>
<ul>
<li>system：表只有一行记录（等于系统表），这是const类型的特例，平时不会出现，这个也可以忽略不计。</li>
<li>const：表示通过索引一次就找到了，const用于比较primary key或者unique索引。因为只匹配一行数据，所以很快。如将主键置于where列表中，MySQL就能将该查询转换为一个常量。</li>
<li>eq_ref：唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配。常见于主键或唯一索引扫描。</li>
<li>ref：非唯一性索引扫描，返回匹配某个单独值的所有行。本质上也是一种索引访问，它返回所有匹配某个单独值的行，然而，它可能会找到多个符合条件的行，所以他应该属于查找和扫描的混合体。</li>
<li>range：只检索给定范围的行，使用一个索引来选择行。key列显示使用了哪个索引，一般就是在你的where语句中出现了between、&lt;、&gt;、in等的查询这种范围扫描索引会比全表扫描要好，因为它只需要开始于索引的某一点，而结束于另一点，不用扫描全部索引。</li>
<li>index：Full Index Scan，index与ALL区别为index类型只遍历索引树。这通常比ALL快，因为索引文件通常比数据文件小。（也就是说虽然ALL和index都是全表，但index是从索引出发的，而ALL是从硬盘读取的。）</li>
<li>ALL：Full Table Scan，将扫描全表以找到匹配的行。</li>
</ul>
<p>（5）possible_keys</p>
<p>解释：</p>
<p>显示可能应用在这张表中的索引，一个或多个。</p>
<p>查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询实际使用。</p>
<p>（6）key</p>
<p>解释：实际使用的索引。如果为NULL，则没有使用索引。查询中若使用了覆盖索引，则该索引仅出现在key列表中。</p>
<p>（7）key_len</p>
<p>解释：表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。在不损失精确性的情况下，长度越短越好。key_len显示的值为索引字段的最大可能长度，并非实际使用长度，即key_len时根据表定义计算而得，不是通过表内检索出的。</p>
<p>计算：</p>
<ul>
<li>字符串 <ul>
<li>char(n)：n字节长度</li>
<li>varchar(n)：2字节存储字符串长度，如果是utf-8，则长度 3n + 2</li>
</ul>
</li>
<li>数值类型 <ul>
<li>tinyint：1字节</li>
<li>smallint：2字节</li>
<li>int：4字节</li>
<li>bigint：8字节　　</li>
</ul>
</li>
<li>时间类型　 <ul>
<li>date：3字节</li>
<li>timestamp：4字节</li>
<li>datetime：8字节</li>
</ul>
</li>
<li>如果字段允许为 NULL，需要1字节记录是否为 NULL</li>
</ul>
<p>索引最大长度是768字节，当字符串过长时，mysql会做一个类似左前缀索引的处理，将前半部分的字符提取出来做索引。</p>
<p>（8）ref</p>
<p>解释：</p>
<p>显示索引的哪一列被使用了，如果可能的话，是一个常数。哪些列或常量被用于查找索引列上的值。</p>
<p>（9）rows</p>
<p>解释：</p>
<p>这一列是mysql估计要读取并检测的行数，注意这个不是结果集里的行数。</p>
<p>（10）extra</p>
<p>解释：</p>
<p>包含不适合在其他列中显示但十分重要的额外信息。</p>
<p>说明：</p>
<ul>
<li><code>using index</code>：这发生在对表的请求列都是同一索引的部分的时候，返回的列数据只使用了索引中的信息，而没有再去访问表中的行记录，是性能高的表现。如果同时出现using where，表明索引被用来执行索引键值的查找；如果没有同时出现using where，表明索引用来读取数据而非执行查找动作。</li>
<li><code>using filesort</code>：MySQL会对结果使用一个外部索引排序，而不是按索引次序从表里读取行。此时MySQL会根据联接类型浏览所有符合条件的记录，并保存排序关键字和行指针，然后排序关键字并按顺序检索行信息。这种情况一般是很危险的，九死一生。</li>
<li><code>using temporary</code>：MySQL需要创建一张临时表来处理查询，对于查询结果排序时使用临时表，常见于排序order by和分组查询group by。常见于这种情况就更加危险了，十死无生。</li>
<li><code>using where</code>：使用where过滤。</li>
<li><code>using join buffer</code>：使用连接缓存。</li>
<li><code>impossible where</code>：where子句总是false，不能用来获取任何元组。</li>
<li><code>select tables optimized away</code>：在没有GROUP BY子句的情况下，基于索引优化MIN/MAX或者对于MyISAM存储引擎优化COUNT(*)操作，不必等到执行阶段再进行计算，查询执行计划生成的阶段即完成优化。</li>
<li><code>distinct</code>：一旦MySQL找到了与行相联合匹配的行，就停止搜索。</li>
</ul>
<h3 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h3><blockquote>
<p>案例1</p>
</blockquote>
<p>建表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;tb2_article&#96; (</span><br><span class="line">  &#96;id&#96; int NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;author_id&#96; int NOT NULL,</span><br><span class="line">  &#96;category_id&#96; int NOT NULL,</span><br><span class="line">  &#96;views&#96; int NOT NULL,</span><br><span class="line">  &#96;comments&#96; int NOT NULL,</span><br><span class="line">  &#96;title&#96; varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,</span><br><span class="line">  &#96;content&#96; text NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;4 DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci;</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;tb2_article&#96; VALUES (1, 1, 1, 1, 1, &#39;1&#39;, &#39;1&#39;);</span><br><span class="line">INSERT INTO &#96;tb2_article&#96; VALUES (2, 2, 2, 2, 2, &#39;2&#39;, &#39;2&#39;);</span><br><span class="line">INSERT INTO &#96;tb2_article&#96; VALUES (3, 3, 3, 3, 3, &#39;3&#39;, &#39;3&#39;);</span><br></pre></td></tr></table></figure>

<p>第一次explain：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT id, author_id FROM tb2_article WHERE category_id &#x3D; 1 AND comments &gt; 1 order by views desc limit 1;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+-------------+-------------+------------+------+---------------+------+---------+------+------+----------+-----------------------------+</span><br><span class="line">| id | select_type | table       | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                       |</span><br><span class="line">+----+-------------+-------------+------------+------+---------------+------+---------+------+------+----------+-----------------------------+</span><br><span class="line">|  1 | SIMPLE      | tb2_article | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    2 |    50.00 | Using where; Using filesort |</span><br><span class="line">+----+-------------+-------------+------------+------+---------------+------+---------+------+------+----------+-----------------------------+</span><br></pre></td></tr></table></figure>

<p>建立索引：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE INDEX idx_article_ccv on tb2_article(category_id,comments, views);</span><br></pre></td></tr></table></figure>

<p>第二次explain：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT id, author_id FROM tb2_article WHERE category_id &#x3D; 1 AND comments &gt; 1 order by views desc limit 1;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+-------------+-------------+------------+-------+-----------------+-----------------+---------+------+------+----------+---------------------------------------+</span><br><span class="line">| id | select_type | table       | partitions | type  | possible_keys   | key             | key_len | ref  | rows | filtered | Extra                                 |</span><br><span class="line">+----+-------------+-------------+------------+-------+-----------------+-----------------+---------+------+------+----------+---------------------------------------+</span><br><span class="line">|  1 | SIMPLE      | tb2_article | NULL       | range | idx_article_ccv | idx_article_ccv | 8       | NULL |    1 |   100.00 | Using index condition; Using filesort |</span><br><span class="line">+----+-------------+-------------+------------+-------+-----------------+-----------------+---------+------+------+----------+---------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>发现key中已经显示了刚刚建立的索引，但是依然使用了文件排序。</p>
<p>第三次explain：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT id, author_id FROM tb2_article WHERE category_id &#x3D; 1 AND comments &#x3D; 1 order by views desc limit 1;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+-------------+-------------+------------+------+-----------------+-----------------+---------+-------------+------+----------+---------------------+</span><br><span class="line">| id | select_type | table       | partitions | type | possible_keys   | key             | key_len | ref         | rows | filtered | Extra               |</span><br><span class="line">+----+-------------+-------------+------------+------+-----------------+-----------------+---------+-------------+------+----------+---------------------+</span><br><span class="line">|  1 | SIMPLE      | tb2_article | NULL       | ref  | idx_article_ccv | idx_article_ccv | 8       | const,const |    1 |   100.00 | Backward index scan |</span><br><span class="line">+----+-------------+-------------+------------+------+-----------------+-----------------+---------+-------------+------+----------+---------------------+</span><br></pre></td></tr></table></figure>

<p>当把查询条件修改为等于时，发现ref中出现两个常量，即两个查询常量，并且没有使用文件排序。说明当查询条件为大于号时，索引失效。</p>
<p>浅析第二次加了索引之后explain依然使用<code>filesort</code>：</p>
<p>按照BTree的工作原理，先排序<code>category_id</code>，如果遇到相同的<code>category_id</code>则再排序<code>comments</code>，如果遇到相同的<code>commnents</code>则再排序<code>views</code>。当<code>comments</code>字段在联合索引里处于中间位置时，因<code>comments &gt; 1</code>条件是一个范围值(range)，MySQL无法利用索引再对后面的views部分进行检索，即range类型查询字段后面的索引无效。</p>
<p>删除索引：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP INDEX idx_article_ccv ON tb2_article;</span><br></pre></td></tr></table></figure>

<p>新建索引：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE INDEX idx_article_cv ON  tb2_article(category_id, views);</span><br></pre></td></tr></table></figure>

<p>再次explain：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT id, author_id FROM tb2_article WHERE category_id &#x3D; 1 AND comments &gt; 1 order by views desc limit 1;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+-------------+-------------+------------+------+----------------+----------------+---------+-------+------+----------+----------------------------------+</span><br><span class="line">| id | select_type | table       | partitions | type | possible_keys  | key            | key_len | ref   | rows | filtered | Extra                            |</span><br><span class="line">+----+-------------+-------------+------------+------+----------------+----------------+---------+-------+------+----------+----------------------------------+</span><br><span class="line">|  1 | SIMPLE      | tb2_article | NULL       | ref  | idx_article_cv | idx_article_cv | 4       | const |    1 |    50.00 | Using where; Backward index scan |</span><br><span class="line">+----+-------------+-------------+------------+------+----------------+----------------+---------+-------+------+----------+----------------------------------+</span><br></pre></td></tr></table></figure>

<p>可以看到type变成了<code>ref</code>，Extra中的<code>using filesort</code>也消失了，结果非常理想。</p>
<p>结论：建立复合索引的时候最好不要带上含有范围查询的字段。</p>
<blockquote>
<p>案例2</p>
</blockquote>
<p>继续建表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;tb2_class&#96; (</span><br><span class="line">  &#96;id&#96; int NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;card&#96; int NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;2 DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci;</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;tb2_book&#96; (</span><br><span class="line">  &#96;bookid&#96; int NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;card&#96; int NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;bookid&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci;</span><br><span class="line"></span><br><span class="line">INSERT INTO tb2_class(card) VALUES(FLOOR(1 + RAND() * 20));</span><br><span class="line">INSERT INTO tb2_book(card) VALUES(FLOOR(1 + RAND() * 20));</span><br></pre></td></tr></table></figure>

<p>第一次explain：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM tb2_class LEFT JOIN tb2_book on tb2_class.card &#x3D; tb2_book.card;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+</span><br><span class="line">| id | select_type | table     | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                      |</span><br><span class="line">+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+</span><br><span class="line">|  1 | SIMPLE      | tb2_class | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    9 |   100.00 | NULL                                       |</span><br><span class="line">|  1 | SIMPLE      | tb2_book  | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    9 |   100.00 | Using where; Using join buffer (hash join) |</span><br><span class="line">+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+</span><br></pre></td></tr></table></figure>

<p>可以看到type都为ALL。</p>
<p>建立右表tb2_book索引：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE tb2_book ADD INDEX(card);</span><br></pre></td></tr></table></figure>

<p>第二次explain：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM tb2_class LEFT JOIN tb2_book on tb2_class.card &#x3D; tb2_book.card;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+-------------+-----------+------------+------+---------------+------+---------+----------------------------+------+----------+-------------+</span><br><span class="line">| id | select_type | table     | partitions | type | possible_keys | key  | key_len | ref                        | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+-----------+------------+------+---------------+------+---------+----------------------------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | tb2_class | NULL       | ALL  | NULL          | NULL | NULL    | NULL                       |    9 |   100.00 | NULL        |</span><br><span class="line">|  1 | SIMPLE      | tb2_book  | NULL       | ref  | card          | card | 4       | mysql_learn.tb2_class.card |    1 |   100.00 | Using index |</span><br><span class="line">+----+-------------+-----------+------------+------+---------------+------+---------+----------------------------+------+----------+-------------+</span><br></pre></td></tr></table></figure>

<p>可以看到tb2_class的type依然是ALL，tb2_book的type优化为ref。</p>
<p>删除tb2_book的索引：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP INDEX card ON tb2_book;</span><br></pre></td></tr></table></figure>

<p>建立左表tb2_class索引：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE tb2_class ADD INDEX(card);</span><br></pre></td></tr></table></figure>

<p>第三次explain：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM tb2_class LEFT JOIN tb2_book on tb2_class.card &#x3D; tb2_book.card;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+-------------+-----------+------------+-------+---------------+------+---------+------+------+----------+--------------------------------------------+</span><br><span class="line">| id | select_type | table     | partitions | type  | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                      |</span><br><span class="line">+----+-------------+-----------+------------+-------+---------------+------+---------+------+------+----------+--------------------------------------------+</span><br><span class="line">|  1 | SIMPLE      | tb2_class | NULL       | index | NULL          | card | 4       | NULL |    9 |   100.00 | Using index                                |</span><br><span class="line">|  1 | SIMPLE      | tb2_book  | NULL       | ALL   | NULL          | NULL | NULL    | NULL |    9 |   100.00 | Using where; Using join buffer (hash join) |</span><br><span class="line">+----+-------------+-----------+------------+-------+---------------+------+---------+------+------+----------+--------------------------------------------+</span><br></pre></td></tr></table></figure>

<p>可以看到tb2_class的type为index，tb2_book的type下降为ALL。</p>
<p>最后再次建立tb2_book的索引：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE tb2_book ADD INDEX(card);</span><br></pre></td></tr></table></figure>

<p>第四次explain：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM tb2_class LEFT JOIN tb2_book on tb2_class.card &#x3D; tb2_book.card;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+-------------+-----------+------------+-------+---------------+------+---------+----------------------------+------+----------+-------------+</span><br><span class="line">| id | select_type | table     | partitions | type  | possible_keys | key  | key_len | ref                        | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+-----------+------------+-------+---------------+------+---------+----------------------------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | tb2_class | NULL       | index | NULL          | card | 4       | NULL                       |    9 |   100.00 | Using index |</span><br><span class="line">|  1 | SIMPLE      | tb2_book  | NULL       | ref   | card          | card | 4       | mysql_learn.tb2_class.card |    1 |   100.00 | Using index |</span><br><span class="line">+----+-------------+-----------+------------+-------+---------------+------+---------+----------------------------+------+----------+-------------+</span><br></pre></td></tr></table></figure>

<p>发现type都提升了，index和ref，结果很理想。</p>
<p>结论：对于JOIN连接查询的两张表最好都在联结字段建立单值索引。</p>
<blockquote>
<p>案例3</p>
</blockquote>
<p>继续建表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;tb2_phone&#96; (</span><br><span class="line">  &#96;phoneid&#96; int NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;card&#96; int DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;phoneid&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci;</span><br><span class="line"></span><br><span class="line">INSERT INTO tb2_phone(card) VALUES(FLOOR(1 + (RAND()*20)));</span><br></pre></td></tr></table></figure>

<p>第一次explain：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM tb2_class LEFT JOIN tb2_book ON tb2_class.card &#x3D; tb2_book.card LEFT JOIN tb2_phone ON tb2_book.card &#x3D; tb2_phone.card ;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+</span><br><span class="line">| id | select_type | table     | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                      |</span><br><span class="line">+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+</span><br><span class="line">|  1 | SIMPLE      | tb2_class | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    9 |   100.00 | NULL                                       |</span><br><span class="line">|  1 | SIMPLE      | tb2_book  | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    9 |   100.00 | Using where; Using join buffer (hash join) |</span><br><span class="line">|  1 | SIMPLE      | tb2_phone | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    9 |   100.00 | Using where; Using join buffer (hash join) |</span><br><span class="line">+----+-------------+-----------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------+</span><br></pre></td></tr></table></figure>

<p>发现三张表的type都是ALL。</p>
<p>建立tb2_phone和tb2_book的索引：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE tb2_phone INDEX(card);</span><br><span class="line">ALTER TABLE tb2_book ADD INDEX(card);</span><br></pre></td></tr></table></figure>

<p>第二次explain：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM tb2_class LEFT JOIN tb2_book ON tb2_class.card &#x3D; tb2_book.card LEFT JOIN tb2_phone ON tb2_book.card &#x3D; tb2_phone.card ;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----+-------------+-----------+------------+------+---------------+------+---------+----------------------------+------+----------+-------------+</span><br><span class="line">| id | select_type | table     | partitions | type | possible_keys | key  | key_len | ref                        | rows | filtered | Extra       |</span><br><span class="line">+----+-------------+-----------+------------+------+---------------+------+---------+----------------------------+------+----------+-------------+</span><br><span class="line">|  1 | SIMPLE      | tb2_class | NULL       | ALL  | NULL          | NULL | NULL    | NULL                       |    9 |   100.00 | NULL        |</span><br><span class="line">|  1 | SIMPLE      | tb2_book  | NULL       | ref  | card          | card | 4       | mysql_learn.tb2_class.card |    1 |   100.00 | Using index |</span><br><span class="line">|  1 | SIMPLE      | tb2_phone | NULL       | ref  | card          | card | 5       | mysql_learn.tb2_book.card  |    1 |   100.00 | Using index |</span><br><span class="line">+----+-------------+-----------+------------+------+---------------+------+---------+----------------------------+------+----------+-------------+</span><br></pre></td></tr></table></figure>

<p>发现tb2_phone和tb2_book的type被优化为ref，并且rows也优化的很好。</p>
<p>结论：</p>
<ul>
<li><strong>永远用小结果集驱动大结果集</strong></li>
<li>尽可能减少Join语句中的NestedLoop的循环总次数</li>
<li>优先优化NestedLoop的内存循环</li>
<li>保证Join语句中被驱动表上Join条件字段已经被索引</li>
<li>当无法保证被驱动表的Join条件字段被索引且内存资源充足的前提下，不要太吝啬JoinBuffer的设置</li>
</ul>
<h3 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h3><blockquote>
<p>SQL脚本</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;tb3_staff&#96; (</span><br><span class="line">  &#96;id&#96; int NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;name&#96; varchar(20) DEFAULT NULL,</span><br><span class="line">  &#96;age&#96; int DEFAULT NULL,</span><br><span class="line">  &#96;pos&#96; varchar(20) DEFAULT NULL,</span><br><span class="line">  &#96;add_time&#96; timestamp NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;5 DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci;</span><br><span class="line"></span><br><span class="line">INSERT INTO tb3_staff(name, age, pos, add_time) VALUES ( &#39;KHighness&#39;, 19, &#39;manager&#39;, NOW());</span><br><span class="line">INSERT INTO tb3_staff(name, age, pos, add_time) VALUES ( &#39;FlowerK&#39;, 18, &#39;dev&#39;, NOW());</span><br><span class="line">INSERT INTO tb3_staff(name, age, pos, add_time) VALUES ( &#39;UnknownK&#39;, 17, &#39;dev&#39;, NOW());</span><br><span class="line"></span><br><span class="line">ALTER TABLE tb3_staff ADD INDEX id_staff_nameagepos(name, age, pos);</span><br></pre></td></tr></table></figure>



<blockquote>
<p>生效场景</p>
</blockquote>
<ul>
<li><code>EXPLAIN SELECT * FROM tb3_staff WHERE name = &#39;KHighness&#39;;</code></li>
<li><code>EXPLAIN SELECT * FROM tb3_staff WHERE name = &#39;KHighness&#39; and age = 19;</code></li>
<li><code>EXPLAIN SELECT * FROM tb3_staff WHERE name = &#39;KHighness&#39; and age = 19 and pos = &quot;dev&quot;;</code></li>
</ul>
<blockquote>
<p>失效场景</p>
</blockquote>
<ul>
<li><code>EXPLAIN SELECT * FROM tb3_staff WHERE age = 19 and pos = &quot;dev&quot;;</code></li>
<li> <code>EXPLAIN SELECT * FROM tb3_staff WHERE  pos = &quot;dev&quot;;</code></li>
</ul>
<blockquote>
<p>部分失效</p>
</blockquote>
<ul>
<li><code>EXPLAIN SELECT * FROM tb3_staff WHERE name = &#39;KHighness&#39; and pos = &quot;dev&quot;;</code></li>
</ul>
<blockquote>
<p>总结</p>
</blockquote>
<p>1、最理想的情况就是查询字段与索引字段相同</p>
<p>2、最佳左前缀法则</p>
<p>3、不在索引列上做任何操作（计算、函数、（自动or手动）类型转换），会导致索引失效而转向全表扫描</p>
<p>4、存储引擎不能使用索引中范围条件右边的列</p>
<p>5、尽量使用覆盖索引（只访问索引的查询（索引列和查询列一致）），减少select *</p>
<p>6、使用不等于(!= 或者 &lt;&gt;)的时候索引失效会导致range（MySQL5中是ALL）</p>
<p>7、使用is null或者is not null的时候索引失效会导致range（MySQL5中是ALL）</p>
<p>8、like以通配符开头索引失效会导致ALL，建立覆盖索引可以防止</p>
<p>9、MySQL5中字符串不加单引号索引失效会导致ALL，MySQL8中直接报错</p>
<p>10、使用or连接索引失效会导致ALL</p>
<h3 id="索引面试"><a href="#索引面试" class="headerlink" title="索引面试"></a>索引面试</h3><blockquote>
<p>SQL语句</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;tb4_test&#96; (</span><br><span class="line">  &#96;id&#96; int NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;c1&#96; char(10) DEFAULT NULL,</span><br><span class="line">  &#96;c2&#96; char(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,</span><br><span class="line">  &#96;c3&#96; char(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,</span><br><span class="line">  &#96;c4&#96; char(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,</span><br><span class="line">  &#96;c5&#96; char(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci;</span><br><span class="line"></span><br><span class="line">CREATE INDEX idx_tb4_test_c1234 ON tb4_test(c1, c2, c3, c4);</span><br><span class="line"></span><br><span class="line">INSERT INTO &#96;mysql_learn&#96;.&#96;tb4_test&#96;(&#96;id&#96;, &#96;c1&#96;, &#96;c2&#96;, &#96;c3&#96;, &#96;c4&#96;, &#96;c5&#96;) VALUES (1, &#39;a1&#39;, &#39;a2&#39;, &#39;a3&#39;, &#39;a4&#39;, &#39;a5&#39;);</span><br><span class="line">INSERT INTO &#96;mysql_learn&#96;.&#96;tb4_test&#96;(&#96;id&#96;, &#96;c1&#96;, &#96;c2&#96;, &#96;c3&#96;, &#96;c4&#96;, &#96;c5&#96;) VALUES (2, &#39;b1&#39;, &#39;b2&#39;, &#39;b3&#39;, &#39;b4&#39;, &#39;b5&#39;);</span><br><span class="line">INSERT INTO &#96;mysql_learn&#96;.&#96;tb4_test&#96;(&#96;id&#96;, &#96;c1&#96;, &#96;c2&#96;, &#96;c3&#96;, &#96;c4&#96;, &#96;c5&#96;) VALUES (3, &#39;c1&#39;, &#39;c2&#39;, &#39;c3&#39;, &#39;c4&#39;, &#39;c5&#39;);</span><br><span class="line">INSERT INTO &#96;mysql_learn&#96;.&#96;tb4_test&#96;(&#96;id&#96;, &#96;c1&#96;, &#96;c2&#96;, &#96;c3&#96;, &#96;c4&#96;, &#96;c5&#96;) VALUES (4, &#39;d1&#39;, &#39;d2&#39;, &#39;d3&#39;, &#39;d4&#39;, &#39;d5&#39;);</span><br><span class="line">INSERT INTO &#96;mysql_learn&#96;.&#96;tb4_test&#96;(&#96;id&#96;, &#96;c1&#96;, &#96;c2&#96;, &#96;c3&#96;, &#96;c4&#96;, &#96;c5&#96;) VALUES (5, &#39;e1&#39;, &#39;e2&#39;, &#39;e3&#39;, &#39;e4&#39;, &#39;e5&#39;);</span><br></pre></td></tr></table></figure>



<blockquote>
<p>EXPLAIN测试</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* 最好索引怎么创建的，就怎么用，按照顺序使用，避免让MySQL再自己去翻译一次 *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;* 1.全值匹配 用到索引c1 c2 c3 c4全字段 *&#x2F;</span><br><span class="line">EXPLAIN SELECT * FROM &#96;test03&#96; WHERE &#96;c1&#96; &#x3D; &#39;a1&#39; AND &#96;c2&#96; &#x3D; &#39;a2&#39; AND &#96;c3&#96; &#x3D; &#39;a3&#39; AND &#96;c4&#96; &#x3D; &#39;a4&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;* 2.用到索引c1 c2 c3 c4全字段 MySQL的查询优化器会优化SQL语句的顺序*&#x2F;</span><br><span class="line">EXPLAIN SELECT * FROM &#96;test03&#96; WHERE &#96;c1&#96; &#x3D; &#39;a1&#39; AND &#96;c2&#96; &#x3D; &#39;a2&#39; AND &#96;c4&#96; &#x3D; &#39;a4&#39; AND &#96;c3&#96; &#x3D; &#39;a3&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;* 3.用到索引c1 c2 c3 c4全字段 MySQL的查询优化器会优化SQL语句的顺序*&#x2F;</span><br><span class="line">EXPLAIN SELECT * FROM &#96;test03&#96; WHERE &#96;c4&#96; &#x3D; &#39;a4&#39; AND &#96;c3&#96; &#x3D; &#39;a3&#39; AND &#96;c2&#96; &#x3D; &#39;a2&#39; AND &#96;c1&#96; &#x3D; &#39;a1&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;* 4.用到索引c1 c2 c3字段，c4字段失效，范围之后全失效 *&#x2F;</span><br><span class="line">EXPLAIN SELECT * FROM &#96;test03&#96; WHERE &#96;c1&#96; &#x3D; &#39;a1&#39; AND &#96;c2&#96; &#x3D; &#39;a2&#39; AND &#96;c3&#96; &gt; &#39;a3&#39; AND &#96;c4&#96; &#x3D; &#39;a4&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;* 5.用到索引c1 c2 c3 c4全字段 MySQL的查询优化器会优化SQL语句的顺序*&#x2F;</span><br><span class="line">EXPLAIN SELECT * FROM &#96;test03&#96; WHERE &#96;c1&#96; &#x3D; &#39;a1&#39; AND &#96;c2&#96; &#x3D; &#39;a2&#39; AND &#96;c4&#96; &gt; &#39;a4&#39; AND &#96;c3&#96; &#x3D; &#39;a3&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;* </span><br><span class="line">   6.用到了索引c1 c2 c3三个字段, c1和c2两个字段用于查找,  c3字段用于排序了但是没有统计到key_len中，c4字段失效</span><br><span class="line">*&#x2F;</span><br><span class="line">EXPLAIN SELECT * FROM &#96;test03&#96; WHERE &#96;c1&#96; &#x3D; &#39;a1&#39; AND &#96;c2&#96; &#x3D; &#39;a2&#39; AND &#96;c4&#96; &#x3D; &#39;a4&#39; ORDER BY &#96;c3&#96;;</span><br><span class="line"></span><br><span class="line">&#x2F;* 7.用到了索引c1 c2 c3三个字段，c1和c2两个字段用于查找, c3字段用于排序了但是没有统计到key_len中*&#x2F;</span><br><span class="line">EXPLAIN SELECT * FROM &#96;test03&#96; WHERE &#96;c1&#96; &#x3D; &#39;a1&#39; AND &#96;c2&#96; &#x3D; &#39;a2&#39; ORDER BY &#96;c3&#96;;</span><br><span class="line"></span><br><span class="line">&#x2F;* </span><br><span class="line">   8.用到了索引c1 c2两个字段，c4失效，c1和c2两个字段用于查找，c4字段排序产生了Using filesort说明排序没有用到c4字段 </span><br><span class="line">*&#x2F;</span><br><span class="line">EXPLAIN SELECT * FROM &#96;test03&#96; WHERE &#96;c1&#96; &#x3D; &#39;a1&#39; AND &#96;c2&#96; &#x3D; &#39;a2&#39; ORDER BY &#96;c4&#96;;</span><br><span class="line"></span><br><span class="line">&#x2F;* 9.用到了索引c1 c2 c3三个字段，c1用于查找，c2和c3用于排序 *&#x2F;</span><br><span class="line">EXPLAIN SELECT * FROM &#96;test03&#96; WHERE &#96;c1&#96; &#x3D; &#39;a1&#39; AND &#96;c5&#96; &#x3D; &#39;a5&#39; ORDER BY &#96;c2&#96;, &#96;c3&#96;;</span><br><span class="line"></span><br><span class="line">&#x2F;* 10.用到了c1一个字段，c1用于查找，c3和c2两个字段索引失效，产生了Using filesort *&#x2F;</span><br><span class="line">EXPLAIN SELECT * FROM &#96;test03&#96; WHERE &#96;c1&#96; &#x3D; &#39;a1&#39; AND &#96;c5&#96; &#x3D; &#39;a5&#39; ORDER BY &#96;c3&#96;, &#96;c2&#96;;</span><br><span class="line"></span><br><span class="line">&#x2F;* 11.用到了c1 c2 c3三个字段，c1 c2用于查找，c2 c3用于排序 *&#x2F;</span><br><span class="line">EXPLAIN SELECT * FROM &#96;test03&#96; WHERE &#96;c1&#96; &#x3D; &#39;a1&#39; AND  &#96;c2&#96; &#x3D; &#39;a2&#39; ORDER BY c2, c3;</span><br><span class="line"></span><br><span class="line">&#x2F;* 12.用到了c1 c2 c3三个字段，c1 c2用于查找，c2 c3用于排序 *&#x2F;</span><br><span class="line">EXPLAIN SELECT * FROM &#96;test03&#96; WHERE &#96;c1&#96; &#x3D; &#39;a1&#39; AND  &#96;c2&#96; &#x3D; &#39;a2&#39; AND &#96;c5&#96; &#x3D; &#39;a5&#39; ORDER BY c2, c3;</span><br><span class="line"></span><br><span class="line">&#x2F;* </span><br><span class="line">   13.用到了c1 c2 c3三个字段，c1 c2用于查找，c2 c3用于排序 没有产生Using filesort </span><br><span class="line">      因为之前c2这个字段已经确定了是&#39;a2&#39;了，这是一个常量，再去ORDER BY c3,c2 这时候c2已经不用排序了！</span><br><span class="line">      所以没有产生Using filesort 和(10)进行对比学习！</span><br><span class="line">*&#x2F;</span><br><span class="line">EXPLAIN SELECT * FROM &#96;test03&#96; WHERE &#96;c1&#96; &#x3D; &#39;a1&#39; AND &#96;c2&#96; &#x3D; &#39;a2&#39; AND &#96;c5&#96; &#x3D; &#39;a5&#39; ORDER BY c3, c2;</span><br><span class="line"></span><br><span class="line">&#x2F;* GROUP BY 表面上是叫做分组，但是分组之前必定排序。 *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;* 14.用到c1 c2 c3三个字段，c1用于查找，c2 c3用于排序，c4失效 *&#x2F;</span><br><span class="line">EXPLAIN SELECT * FROM &#96;test03&#96; WHERE &#96;c1&#96; &#x3D; &#39;a1&#39; AND &#96;c4&#96; &#x3D; &#39;a4&#39; GROUP BY &#96;c2&#96;,&#96;c3&#96;;</span><br><span class="line"></span><br><span class="line">&#x2F;* 15.用到c1这一个字段，c4失效，c2和c3排序失效产生了Using filesort *&#x2F;</span><br><span class="line">EXPLAIN SELECT * FROM &#96;test03&#96; WHERE &#96;c1&#96; &#x3D; &#39;a1&#39; AND &#96;c4&#96; &#x3D; &#39;a4&#39; GROUP BY &#96;c3&#96;,&#96;c2&#96;;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>总结</p>
</blockquote>
<ul>
<li>定值、范围还是排序，一般order by是给个范围。</li>
<li>group by基本上都需要进行排序，会有临时表产生。</li>
<li>like匹配%在字符串最右边会使用使用，%在字符串最左边不会使用。</li>
</ul>
<blockquote>
<p>一般性建议</p>
</blockquote>
<ul>
<li><p>对于单键索引，尽量选择针对当前query过滤性更好的索引。</p>
</li>
<li><p>在选择组合索引的时候，当前query中过滤性最好的字段在索引字段顺序中，位置越靠前越好。</p>
</li>
<li><p>在选择组合索引的时候，尽量选择可以能够包含当前query中的where子句中更多字段的索引。</p>
</li>
<li><p>尽可能通过分析统计信息和调整query的写法来达到选择合适索引的目的。</p>
</li>
</ul>
<blockquote>
<p>优化口诀</p>
</blockquote>
<p>带头大哥不能死，中间兄弟不能断；</p>
<p>覆盖索引不写星，索引列上少计算；</p>
<p>不等有时会失效，范围之后全失效；</p>
<p>LIKE百分写最右，一般SQL少用OR。</p>
<h2 id="查询截取"><a href="#查询截取" class="headerlink" title="查询截取"></a>查询截取</h2><h3 id="查询优化-1"><a href="#查询优化-1" class="headerlink" title="查询优化-1"></a>查询优化-1</h3><blockquote>
<p>优化策略</p>
</blockquote>
<p>永远小表驱动大表。</p>
<blockquote>
<p>IN</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM A WHERE id IN (SELECT id FROM B)</span><br></pre></td></tr></table></figure>

<p>等价于：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for select id from B</span><br><span class="line">	for select * from A where A.id &#x3D; B.id</span><br></pre></td></tr></table></figure>

<p>当A表的数据集大于B表的数据集时，用in优先exists。</p>
<blockquote>
<p>EXISTS</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT * FROM A WHERE EXISTS (SELECT 1 FROM B WHERE B.id &#x3D; A.id)</span><br></pre></td></tr></table></figure>

<p>等价于</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for select id from A</span><br><span class="line">	for select * from B &#x3D; B.id &#x3D; A.id</span><br></pre></td></tr></table></figure>

<p>当A表的数据集小于B表的数据集时，用exists优先in。</p>
<h3 id="查询优化-2"><a href="#查询优化-2" class="headerlink" title="查询优化-2"></a>查询优化-2</h3><blockquote>
<p>优化策略</p>
</blockquote>
<p>Order By关键字优化：</p>
<p>Order By子句，尽量使用Index方式排序，避免使用FileSort方式排序。</p>
<p>尽可能在索引列上完成排序操作，遵照索引建的最佳左前缀。</p>
<p>如果不在索引列上，FileSort有两种算法：MySQL就要启动双路排序和单路排序。</p>
<blockquote>
<p>案例</p>
</blockquote>
<p>SQL脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;tb5_a&#96; (</span><br><span class="line">  &#96;age&#96; int NOT NULL,</span><br><span class="line">  &#96;birth&#96; timestamp NOT NULL</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci;</span><br><span class="line"></span><br><span class="line">INSERT INTO tb5_a(age, birth) VALUES(17, NOW());</span><br><span class="line">INSERT INTO tb5_a(age, birth) VALUES(18, NOW());</span><br><span class="line">INSERT INTO tb5_a(age, birth) VALUES(19, NOW());</span><br><span class="line"></span><br><span class="line">CREATE INDEX idx_a_agebirth ON tb5_a(age, birth);</span><br></pre></td></tr></table></figure>

<p>八个case：</p>
<ul>
<li><code>EXPLAIN SELECT * FROM tb5_a WHERE age &gt; 20 ORDER BY age;</code> =&gt; 正常</li>
<li><code>EXPLAIN SELECT * FROM tb5_a WHERE age &gt; 20 ORDER BY birth;</code> =&gt; using filesort</li>
<li><code>EXPLAIN SELECT * FROM tb5_a WHERE age &gt; 20 ORDER BY age, birth;</code> =&gt; 正常</li>
<li><code> EXPLAIN SELECT * FROM tb5_a WHERE age &gt; 20 ORDER BY birth，age;</code> =&gt; using filesprt</li>
<li><code>EXPLAIN SELECT * FROM tb5_a WHERE birth &gt; &#39;2020-3:23 00:00:00&#39; ORDER BY age;</code> =&gt; 正常</li>
<li><code>EXPLAIN SELECT * FROM tb5_a WHERE birth &gt; &#39;2020-3:23 00:00:00&#39; ORDER BY birth;</code> =&gt; using filesort</li>
<li><code>EXPLAIN SELECT * FROM tb5_a WHERE birth &gt; &#39;2020-3:23 00:00:00&#39; ORDER BY age,birth;</code> =&gt; 正常</li>
<li><code>EXPLAIN SELECT * FROM tb5_a WHERE birth &gt; &#39;2020-3:23 00:00:00&#39; ORDER BY birth,age;</code> =&gt; using filesort</li>
<li><code>EXPLAIN SELECT * FROM tb5_a ORDER BY age ASC,birth ASC;</code> =&gt; 正常</li>
<li><code>EXPLAIN SELECT * FROM tb5_a ORDER BY age DESC,birth DESC;</code> =&gt; 正常</li>
<li><code>EXPLAIN SELECT * FROM tb5_a ORDER BY age ASC,birth DESC;</code> =&gt; using filesort</li>
<li><code>EXPLAIN SELECT * FROM tb5_a ORDER BY age DESC,birth ASC;</code> =&gt; using filesort</li>
</ul>
<blockquote>
<p>总结</p>
</blockquote>
<p>总结：Order By满足两种情况，会使用Index方式排序：</p>
<ul>
<li>Order By语句使用索引最左前列</li>
<li>使用Where子句与Order By子句条件列组合满足索引最左前列</li>
</ul>
<p>注意：如果不在索引列上，filesort有两种算法：</p>
<ul>
<li>双路排序：两次扫描磁盘获取数据，读取行指针和order by列，对它们进行排序，然后扫描已经排序号的列表，按照列表中的值重新从列表中读取对应的数据输出。</li>
<li>单路排序：从磁盘读取查询需要的所有列，按照order by列在buffer对它们进行排序，然后扫描排序后的列表进行输出，它的效率更快一些，避免了第二次读取数据。并且把随机IO变成了顺序IO，但是它会使用更多的空间，因为它把每一行都保存在内存中了。</li>
<li>单路问题：在单路排序中，要占用很多空间，因为需要把所有字段都取出，所以有可能取出的数据的总大小超出了sort_buffer的容量，导致每次只能取sort_buffer容量大小的数据，进行排序（创建tmp文件，多路合并），排完再取sort_buffer容量大小，再排，从而导致多次I/O。</li>
<li>优化策略：SQL服务器参数调优，增大sort_buffer_size参数的设置，增大max_length_for_sort_data参数的设置。</li>
</ul>
<p>提高Order By的速度：</p>
<p>（1）Order By时select *是一个大忌，只查询需要字段，这点非常重要。</p>
<p>（2）尝试提高sort_buffer_size。</p>
<p>（3）尝试提高max_length_for_sort_data。</p>
<blockquote>
<p>排序案例</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">index a_b_c(a, b, c);</span><br><span class="line"></span><br><span class="line">-- 使用索引最左前缀</span><br><span class="line">ORDER BY a</span><br><span class="line">ORDER BY a, b</span><br><span class="line">ORDER BY a, b, c</span><br><span class="line">ORDER BY a DESC, b DESC, c DESC</span><br><span class="line"></span><br><span class="line">-- WHERE使用索引的最左前缀定义为常量</span><br><span class="line">WHERE a &#x3D; const ORDER BY b, c</span><br><span class="line">WHERE a &#x3D; const AND b &#x3D; const ORDER BY c</span><br><span class="line">WHERE a &#x3D; const ORDER BY b, c</span><br><span class="line">WHERE a &#x3D; count AND b &gt; const ORDER BY b, c</span><br><span class="line"></span><br><span class="line">-- 不能使用户索引进行排序</span><br><span class="line">ORDER BY a ASC, b DESC, c DESC  -- 排序不一致</span><br><span class="line">WHERE g &#x3D; const ORDER BY b, c   -- 丢失a索引</span><br><span class="line">WHERE a &#x3D; const ORDER BY  c     -- 丢失b索引</span><br><span class="line">WHERE a &#x3D; const ORDER BY a, d   -- d不是索引的一部分</span><br><span class="line">WHERE a IN (...) ORDER BY b, c  -- 对于排序来说，多个相等条件也是范围查询</span><br></pre></td></tr></table></figure>



<h3 id="查询优化-3"><a href="#查询优化-3" class="headerlink" title="查询优化-3"></a>查询优化-3</h3><blockquote>
<p>优化策略</p>
</blockquote>
<p>Group By关键字优化：</p>
<p>优化策略与Order By相似。</p>
<p>Group By实质是先排序后进行分组，遵照索引建的最佳左前缀。</p>
<p>当无法使用索引列，增大max_length_for_sort_data参数设置，增大sort_buffer_size参数的设置。</p>
<p>where高于having，能卸载where限定的条件就不要去having限定了。</p>
<h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3><blockquote>
<p>简介</p>
</blockquote>
<ul>
<li><p>MySQL的慢查询日志是MySQL提供的一种日志记录，它用来记录在MySQL中响应时间超过阈值的语句，具体指运行时间超过long_query_time值的SQL，则会被记录到慢查询日志中。</p>
</li>
<li><p>具体指运行时间超过long_query_time值的SQL，则会被记录到慢查询日志中。long_query_time的默认值为10，意思是运行10秒以上的语句。</p>
</li>
<li><p>默认情况下，MySQL数据库没有开启慢查询日志，需要我们手动来设置这个参数。</p>
</li>
<li><p>当然，如果不是调优需要的话，一般不建议启动该参数，因为开启漫长哈讯日志会或多或少带来一定的性能影响。慢查询日志支持将日志记录写入文件。</p>
</li>
</ul>
<blockquote>
<p>配置</p>
</blockquote>
<p>查看是否开启慢查询日志和文件位置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE &#39;%SLOW_QUERY_LOG%&#39;;</span><br><span class="line">+---------------------+-------------------------------+</span><br><span class="line">| Variable_name       | Value                         |</span><br><span class="line">+---------------------+-------------------------------+</span><br><span class="line">| slow_query_log      | OFF                           |</span><br><span class="line">| slow_query_log_file | &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;parak-slow.log |</span><br><span class="line">+---------------------+-------------------------------+</span><br></pre></td></tr></table></figure>

<p>开启慢查询日志（只对本次生效，重启后失效）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET global slow_query_log &#x3D; 1;</span><br></pre></td></tr></table></figure>

<p>查看慢查询阈值（默认为10s）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE &#39;long_query_time%&#39;;</span><br><span class="line">+-----------------+-----------+</span><br><span class="line">| Variable_name   | Value     |</span><br><span class="line">+-----------------+-----------+</span><br><span class="line">| long_query_time | 10.000000 |</span><br><span class="line">+-----------------+-----------+</span><br></pre></td></tr></table></figure>

<p>设置慢查询阈值（3s）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET global long_query_time &#x3D; 3;</span><br></pre></td></tr></table></figure>

<p>查看慢查询记录数量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW global STATUS LIKE &#39;%SLOW_QUERIES%&#39;;</span><br></pre></td></tr></table></figure>

<p>永久生效需要修改配置文件/etc/my.cnf，需要在[mysqld]下增加或修改参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">slow_query_log &#x3D; 1</span><br><span class="line">slow_query_log_file &#x3D; &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;&lt;hostname&gt;-slow.log</span><br><span class="line">long_query_time  &#x3D; &lt;time&gt;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>mysqldumpslow</p>
</blockquote>
<p>参数：</p>
<ul>
<li>s：表示按照何种方式排序</li>
<li>c：访问次数</li>
<li>l：锁定时间</li>
<li>r：返回记录</li>
<li>t：查询时间</li>
<li>al：平均锁定时间</li>
<li>ar：平均返回记录数量</li>
<li>at：平均查询时间</li>
<li>t：返回数据数量</li>
<li>g：正则匹配，大小写不敏感</li>
</ul>
<p>得到返回记录最多的10个SQL：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldumpslow -s r -t 10 &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;parak-slow.log</span><br></pre></td></tr></table></figure>

<p>得到访问次数最多的10个SQL：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldumpslow -s c -t 10 &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;parak-slow.log</span><br></pre></td></tr></table></figure>

<p>得到按照时间排序的前10条里面含有左连接的查询语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldumpslow -s t -t 10 -g &quot;left join&quot; &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;parak-slow.log</span><br></pre></td></tr></table></figure>

<p>建议在使用这些命令时结合 | 和 more使用，防止爆屏。</p>
<h3 id="批量数据脚本"><a href="#批量数据脚本" class="headerlink" title="批量数据脚本"></a>批量数据脚本</h3><blockquote>
<p>配置</p>
</blockquote>
<p>变量<code>log_bin_trust_function_creators</code>：控制是否可以信任存储函数创建者，不会创建写入二进制日志引起不安全事件的存储函数。</p>
<p>查看是否开启：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE &#39;log_bin_trust_function_creators&#39;;</span><br><span class="line">+---------------------------------+-------+</span><br><span class="line">| Variable_name                   | Value |</span><br><span class="line">+---------------------------------+-------+</span><br><span class="line">| log_bin_trust_function_creators | OFF   |</span><br><span class="line">+---------------------------------+-------+</span><br></pre></td></tr></table></figure>

<p>开启（暂时性开启，永久性依然是修改my.cnf）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET global log_bin_trust_function_creators &#x3D; 1;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>数据准备</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE &#96;tb6_dept&#96; (</span><br><span class="line">  &#96;id&#96; int NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;deptno&#96; mediumint NOT NULL DEFAULT &#39;0&#39;,</span><br><span class="line">  &#96;dname&#96; varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,</span><br><span class="line">  &#96;loc&#96; varchar(13) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci;</span><br><span class="line"></span><br><span class="line">CREATE TABLE &#96;tb6_emp&#96; (</span><br><span class="line">  &#96;id&#96; int NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;empno&#96; mediumint NOT NULL DEFAULT &#39;0&#39;,</span><br><span class="line">  &#96;ename&#96; varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,</span><br><span class="line">  &#96;job&#96; varchar(9) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,</span><br><span class="line">  &#96;mgr&#96; mediumint NOT NULL DEFAULT &#39;0&#39;,</span><br><span class="line">  &#96;hiredate&#96; date NOT NULL,</span><br><span class="line">  &#96;sal&#96; decimal(7,2) NOT NULL,</span><br><span class="line">  &#96;comm&#96; decimal(7,2) DEFAULT NULL,</span><br><span class="line">  &#96;deptno&#96; mediumint NOT NULL DEFAULT &#39;0&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;)</span><br><span class="line">) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_0900_ai_ci;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>创建函数</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 随机产生字符串</span><br><span class="line">DELIMITER $$</span><br><span class="line">CREATE FUNCTION rand_string(n INT) RETURNS VARCHAR(255)</span><br><span class="line">BEGIN</span><br><span class="line">    DECLARE chars_str VARCHAR(100) DEFAULT &#39;abcdefghijklmnopqrstuvwsyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;;</span><br><span class="line">    DECLARE return_str VARCHAR(255) DEFAULT &#39;&#39;;</span><br><span class="line">    DECLARE i INT DEFAULT 0;</span><br><span class="line">    WHILE i &lt; n DO</span><br><span class="line">    SET return_str &#x3D; CONCAT(return_str,SUBSTRING(chars_str,FLOOR(1+RAND()*52),1));</span><br><span class="line">    SET i &#x3D; i + 1;</span><br><span class="line">    END WHILE;</span><br><span class="line">    RETURN return_str;</span><br><span class="line">END $$</span><br><span class="line"></span><br><span class="line"># 随机产生部门编号</span><br><span class="line">DELIMITER $$</span><br><span class="line">CREATE FUNCTION rand_num() RETURNS INT(5)</span><br><span class="line">BEGIN</span><br><span class="line">    DECLARE i INT DEFAULT 0;</span><br><span class="line">    SET i &#x3D; FLOOR(100 + RAND() * 10);</span><br><span class="line">    RETURN i;</span><br><span class="line">END $$</span><br></pre></td></tr></table></figure>



<blockquote>
<p>创建存储过程</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 向tb6_dept表批量插入</span><br><span class="line">DELIMITER $$</span><br><span class="line">CREATE PROCEDURE insert_dept(IN START INT(10),IN max_num INT(10))</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE i INT DEFAULT 0;</span><br><span class="line">    SET autocommit &#x3D; 0;</span><br><span class="line">    REPEAT</span><br><span class="line">    SET i &#x3D; i + 1;</span><br><span class="line">    INSERT INTO dept(deptno,dname,loc) VALUES((START + i),rand_string(10),rand_string(8));</span><br><span class="line">    UNTIL i &#x3D; max_num</span><br><span class="line">    END REPEAT;</span><br><span class="line">    COMMIT;</span><br><span class="line">END $$</span><br><span class="line"></span><br><span class="line"># 向tb6_emp表批量插入</span><br><span class="line">DELIMITER $$</span><br><span class="line">CREATE PROCEDURE insert_emp(IN START INT(10),IN max_num INT(10))</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE i INT DEFAULT 0;</span><br><span class="line">    SET autocommit &#x3D; 0;</span><br><span class="line">    REPEAT</span><br><span class="line">    SET i &#x3D; i + 1;</span><br><span class="line">    INSERT INTO emp(empno,ename,job,mgr,hiredata,sal,comm,deptno) VALUES((START + i),rand_string(6),&#39;SALESMAN&#39;,0001,CURDATE(),2000,400,rand_num());</span><br><span class="line">    UNTIL i &#x3D; max_num</span><br><span class="line">    END REPEAT;</span><br><span class="line">    COMMIT;</span><br><span class="line">END $$</span><br></pre></td></tr></table></figure>



<blockquote>
<p>批量插入数据</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 向tb6_dept中插入10条数据</span><br><span class="line">DELIMITER ;</span><br><span class="line">CALL insert_dept(100, 10);</span><br><span class="line"></span><br><span class="line"># 向tb6_emp中插入50万条数据</span><br><span class="line">DELIMITER ;</span><br><span class="line">CALL insert_emp(100001, 500000);</span><br></pre></td></tr></table></figure>



<h3 id="Show-Profile"><a href="#Show-Profile" class="headerlink" title="Show Profile"></a>Show Profile</h3><blockquote>
<p>概述</p>
</blockquote>
<p>MySQL提供的可以用来分析当前会话中语句执行的资源消耗情况，可以用于SQL调优的测量。</p>
<p>官网：<a href="https://dev.mysql.com/doc/refman/8.0/en/show-profile.html">https://dev.mysql.com/doc/refman/8.0/en/show-profile.html</a></p>
<p>默认情况下，参数处于关闭状态，并保存最近15次的运行结果。</p>
<blockquote>
<p>配置</p>
</blockquote>
<p>查看开启状态：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE &#39;profiling&#39;;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| profiling     | OFF   |</span><br><span class="line">+---------------+-------+</span><br></pre></td></tr></table></figure>

<p>开启：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET global profiling &#x3D; 1;</span><br></pre></td></tr></table></figure>

<p>MySQL8需要关闭依赖检测，即从sql_mode中移除<code>ONLY_FULL_GROUP_BY</code>：</p>
<p>查看sql_mode：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT @@global.sql_mode;</span><br><span class="line">+-----------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| @@global.sql_mode                                                                                                     |</span><br><span class="line">+-----------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION |</span><br><span class="line">+-----------------------------------------------------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure>

<p>移除<code>ONLY_FULL_GROUP_BY</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET global @@sql_mode &#x3D; &#96;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&#96;;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>相关命令</p>
</blockquote>
<p>查看SQL：<code>SHOW PROFILES</code></p>
<p>诊断SQL：<code>SHOW PROFILE &lt;type ...&gt; FOR QUERY &lt;Query_ID&gt;</code></p>
<p>可选参数如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| ALL                -- 显示所有的开销信息</span><br><span class="line">| BLOCK IO           -- 显示块IO相关开销</span><br><span class="line">| CONTEXT SWITCHES   -- 上下文切换相关开销</span><br><span class="line">| CPU                -- 显示CPU相关开销信息</span><br><span class="line">| IPC                -- 显示内存相关开销信息</span><br><span class="line">| MEMORY             -- 显示内存相关开销信息</span><br><span class="line">| PAGE FAULTS        -- 显示页面错误相关开销信息</span><br><span class="line">| SOURCE             -- 显示和Source_function, Source_file, Source_line相关的开销信息</span><br><span class="line">| SWAPS              -- 显示交换次数相关开销的信息</span><br></pre></td></tr></table></figure>



<blockquote>
<p>日常开发需要注意</p>
</blockquote>
<ul>
<li>converting HEAP to MyISAM 查询结果太大，内存都不够用了王磁盘上搬了</li>
<li>Creating tmp table 拷贝数据到临时表，用完再删除</li>
<li>Copying to tmp table on disk 吧内存中临时表复制到磁盘，危险</li>
<li>locked 死锁</li>
</ul>
<h3 id="全局查询日志"><a href="#全局查询日志" class="headerlink" title="全局查询日志"></a>全局查询日志</h3><blockquote>
<p>永久启用</p>
</blockquote>
<p>修改my.cnf，设置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 开启</span><br><span class="line">general_log &#x3D; 1</span><br><span class="line"># 记录日志文件的路径</span><br><span class="line">general_log_file &#x3D; &#x2F;&lt;path&gt;&#x2F;&lt;name&gt;</span><br><span class="line"># 输出格式</span><br><span class="line">log_output &#x3D; &lt;.extension&gt;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>临时启用</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set global general_log &#x3D; 1;</span><br><span class="line">set global log_output &#x3D; &#39;TABLE&#39;;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>注意</p>
</blockquote>
<p>永远不要在生产环境开启这个功能。</p>
<h2 id="锁机制"><a href="#锁机制" class="headerlink" title="锁机制"></a>锁机制</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>前言</p>
</blockquote>
<p>锁是计算机协调多个进程或线程并发访问某一资源的机制。</p>
<p>在数据库中，除传统的计算资源（如CPU、RAM、I/O等）的争用，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。</p>
<blockquote>
<p>分类</p>
</blockquote>
<p>从对数据操作的类型分：</p>
<ul>
<li>读锁（共享锁）：针对同一份数据，多个读操作可以同时进行而不会相互影响。</li>
<li>写锁（排他锁）：当前写操作没有完成之前，它会阻断其他写锁和读锁。</li>
</ul>
<p>从对数据操作的粒度分：</p>
<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><blockquote>
<p>概述</p>
</blockquote>
<p>事务是由一组SQL语句组成的逻辑处理单元，事务具有以下4个属性，通常简称为事务的ACID属性。</p>
<ul>
<li><p>A(atomicity/原子性)：事务是一个原子操作单元，其对数据的修改，要么全都执行，要么全都不执行。</p>
</li>
<li><p>C(consistency/一致性)：在事务开始和完成时，数据都必须保持一致状态。这意味着所有相关的数据规则都必须应用于事务的修改，以保持数据的完整性；事务结束时，所有的内部数据结构（如B树索引或双向链表）也都必须是正确的。</p>
</li>
<li><p>I(isolation/隔离性)：数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的“独立”环境执行。这意味着事务处理过程中的中间状态对外部是不可见的，反之亦然。</p>
</li>
<li><p>D(durability/持久性)：事务完成之后，它对于数据的修改是永久性的，即时出现系统故障也能够保持。</p>
</li>
</ul>
<blockquote>
<p>并发事务处理带来的问题</p>
</blockquote>
<p><strong>更新丢失（Lost Update）</strong></p>
<p>当两个或多个事务选择同一行，然后基于最初选定的值更新该行时，由于每个事务都不知道其他事务的存在，就会发生丢失更新问题——最后的更新覆盖了由其他事务所做的更新。</p>
<p>例如，两个程序员修改同一Java文件。每程序员独立地更改其副本，然后保存更改的副本后，这样就覆盖了原始文档。最后保存其更改副本的编辑人员覆盖前一个程序员所做的更改。</p>
<p>如果一个在一个程序员完成并提交事务之前，另一个程序员不能访问同一文件，则可避免此问题。</p>
<p><strong>脏读（Dirty Reads）</strong></p>
<p>一个事务正在对一条记录做修改，在这个事务完成并提交前，这条记录的数据就处于不一致状态；这时，另一个事务也来读取同一条记录，如果不加控制，第二个事务读取了这些“脏”数据，并据此做进一步的处理，就会产生未提交的数据依赖关系。这种现象被形象地叫做“脏读”。</p>
<p>事务A读取到事务B已修改但未提交的数据，还在这个数据基础上做了操作。此时，如果B事务回滚，A读取的数据无效，不符合一致性要求。</p>
<p><strong>不可重复读（Non-Repeatable Reads）</strong></p>
<p>一个事务在服务某些数据后的某个时间，再次读取以前读过的数据，却发现其读出的数据已经发生了改变、或某些记录已经被删除，这种现象就叫做不可重复读。</p>
<p>事务A读取到了事务B已经提交的修改数据，不符合隔离性。</p>
<p><strong>幻读（Phantom Reads）</strong></p>
<p>一个事务按相同的查询条件重新读取以前检索过的数据，却发现其他事务插入了满足其查询条件的新数据，这种现象就称为“幻读”。</p>
<p>事务A读取到事务B提交的新增数据，不符合隔离性。</p>
<blockquote>
<p>事务隔离级别</p>
</blockquote>
<p>“脏读”、“不可重复读”和“幻读”，其实都是数据库读一致性问题，必须由数据库提供一定的书屋隔离级别来解决。</p>
<p>数据库实现事务隔离的方式，基本上可分为以下两种：</p>
<ul>
<li>一种是在读取数据前，对其加锁，阻止其他事物对数据修改。</li>
<li>另一种是不用加任何锁，通过一定机制生成一个数据请求时间点的一致性数据快照（Snapshot），并用这个快照来提供一定级别（语句级或事务级）的一致性读取。同用户的角度来看，好像是数据库可以提供统一数据的多个版本，因此，这种技术叫数据多版本并发控制（MultiVersion Concurrency Control，简称MVCC或MCC），也经常称为多版本数据库。</li>
</ul>
<p>为了解决“隔离”与“并发”的矛盾，ISO/ANSI SQL92定义了4个事务隔离级别，每个级别的隔离程度不同，允许出现的副作用也不同，允许出现的副作用也不同，应用可以根据自己的业务逻辑需求，通过选择不同的隔离级别来平衡“隔离”与“并发”的矛盾。</p>
<table>
<thead>
<tr>
<th>读数据一致性及允许的并发副作用隔离级别</th>
<th>读数据一致性</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>未提交读（Read uncommitted）</td>
<td>最低级别，只能保证不读取物理上损坏的数据</td>
<td>是</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>已提交读（Read committed）</td>
<td>语句级</td>
<td>否</td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td>可重复读（Repeatable read）</td>
<td>事务级</td>
<td>否</td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td>可序列化（Serializable）</td>
<td>最高级别，事务级</td>
<td>否</td>
<td>否</td>
<td>否</td>
</tr>
</tbody></table>
<p>数据库的事务隔离越严格，并发副作用越小，但付出的代价也玖越大，因为事务隔离实质上就是使事务在一定程度上“串行化”进行，这显然与“并发”是矛盾的。同时，不同的应用对读一致性和事务隔离程度的要求也是不同的，比如许多应用对“不可重复读”和“幻读”并不敏感，可能更关心数据并发访问的能力。</p>
<blockquote>
<p>配置</p>
</blockquote>
<p>查看的事务隔离级别（默认为可重复读）：<code>SELECT @@transaction_isolation;</code>  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SELECT @@transaction_isolation;</span><br><span class="line">+-------------------------+</span><br><span class="line">| @@transaction_isolation |</span><br><span class="line">+-------------------------+</span><br><span class="line">| REPEATABLE-READ         |</span><br><span class="line">+-------------------------+</span><br></pre></td></tr></table></figure>

<p>设置读未提交: <code>SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</code></p>
<p>设置读已提交：<code>SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;</code></p>
<p>设置可重复读：<code>SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;</code></p>
<p>设置可序列化：<code> SET SESSION TRANSACTION ISOLATION LEVEL SERIALIZABLE;</code></p>
<blockquote>
<p>SQL命令</p>
</blockquote>
<p>事务开始：<code>BEGIN</code> 或者 <code>START TRANSACTION</code></p>
<p>事务结束：<code>COMMIT</code>或者<code>COMMIT WORK</code></p>
<p>事务回滚：<code>ROLLBACK</code>或者<code>ROLLBACK WORK</code></p>
<h3 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h3><blockquote>
<p>特点</p>
</blockquote>
<p>表锁（偏读）：偏向MyISAM存储引擎，开销小，加锁快；无死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。</p>
<blockquote>
<p>操作</p>
</blockquote>
<p>手动增加表锁：<code>LOCK TABLE &lt;tablename_1&gt; read(write),&lt;tablename_1&gt; read(write) ... </code></p>
<p>查看表上的锁：<code>SHOW OPEN TABLES;</code></p>
<p>解锁：<code>UNLOCK TABLES;</code></p>
<blockquote>
<p>分析</p>
</blockquote>
<p>分析表锁定：<code>SHOW STATUS LIKE &#39;table%&#39;;</code></p>
<p>有两个状态变量记录MySQL内部表级锁定的情况，两个变量说下：</p>
<p><code>Table_locs_immediate</code>：产生表级锁定的次数，表示可以立即获取锁的查询次数，每立即获取锁值+1;</p>
<p><code>Table_locks_waited</code>：出现表级锁定争用而发生等待的次数（不能立即获取锁的次数，每等待一次锁值+1），此值高则说明存在着比较严重的表级锁争用情况。</p>
<p>此外，MyISAM的读写锁调度是写优先，这也是MyISAM不适合做写为主表的引擎，因为写锁后，其他线程不能做任何操作，大量的更新会使查询很难得到锁，从而造成永远阻塞。</p>
<blockquote>
<p>总结</p>
</blockquote>
<p>当前线程给一个表加上读锁时，当前线程和其他线程都可以读这个表，但是当前线程线程读其他表时会报错，当前线程写该表时会报错，其他线程写该表时会阻塞。</p>
<p>当前线程给一个表加上写锁时，当前线程可以对该表进行读和写操作，但是当前线程对其他表进行读和写操作时会报错，其他线程对该表进行读和写时会阻塞。</p>
<p>读锁阻塞写，写锁都阻塞。</p>
<h3 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h3><blockquote>
<p>特点</p>
</blockquote>
<p>行锁（偏写）：偏向InnoDB存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。</p>
<p>InnoDB与MyISAM的最大不同有两点：一是支持事务；二是采用了行级锁。</p>
<blockquote>
<p>InnoDB行锁实现方式</p>
</blockquote>
<p>InnoDB行锁是通过索引上的索引项加锁来实现的，这一点MySQL与Oracle不同，后者是通过在数据块中对相应数据行加锁来实现的。InnoDB这种行锁实现特点意味着：只有通过索引条件来检索数据，InnoDB才使用行级锁，否则InnoDB将使用表锁。</p>
<blockquote>
<p>总结</p>
</blockquote>
<p>当前线程<code>begin</code>以后对一张表进行写操作，其他线程对该表进行写操作时会阻塞。当前线程写操作完毕后仅当前线程可见，其他线程只能读更新之前的数据，只有当前线程<code>commit;</code>之后其他线程才可读更新数据。</p>
<blockquote>
<p>间隙锁</p>
</blockquote>
<p>当我们用范围条件而不是相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据记录的索引项加锁；对于键值在条件范围内但并不存在的记录，叫做间隙。</p>
<p>InnoDB也会对这个间隙加锁，这种锁机制就是所谓的间隙锁。</p>
<p>危害：因为Query执行过程中通过范围查找的话，它会锁定整个范围内的所有索引键值，即使这个键值并不存在。间隙所有一个比较致命的弱点，就是当锁定一个范围键值之后，即时某些不存在的键值也会被无辜的锁定，而造成在锁定的时候无法插入锁定键值范围内的任何数据。在某些场景下这可能会对性能造成很大的危害。</p>
<blockquote>
<p>如何锁定一行</p>
</blockquote>
<p><code>SELECT .....FOR UPDATE</code>在锁定某一行后，其他写操作会被阻塞，直到锁定的行被<code>COMMIT</code>。</p>
<p>结论：</p>
<p>InnoDB存储引擎由于实现了行级锁定，虽然在锁定机制的实现方面所带来的性能损耗可能比表级锁定会要更高一些，但是在整体并发处理能力方面要远远优于MyISAM的表级锁定的。当系统并发量较高的时候，InnoDB的整体性能和MyISAM相比就会有比较明显的优势了。</p>
<p>但是，InnoDB的行级锁定同样有其脆弱的一面，当我们使用不当的时候，可能会让InnoDB的整体性能表现不仅不能比MyISAM高，甚至可能更差。</p>
<blockquote>
<p>分析行锁定</p>
</blockquote>
<p>通过检查InnoDB_row_lock状态变量来分析系统上的行锁的争夺情况：<code>SHOW STATUS LIKE &#39;innodb_row_lock;&#39;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW STATUS LIKE &#39;innodb_row_lock%&#39;;</span><br><span class="line">+-------------------------------+-------+</span><br><span class="line">| Variable_name                 | Value |</span><br><span class="line">+-------------------------------+-------+</span><br><span class="line">| Innodb_row_lock_current_waits | 0     |</span><br><span class="line">| Innodb_row_lock_time          | 38921 |</span><br><span class="line">| Innodb_row_lock_time_avg      | 9730  |</span><br><span class="line">| Innodb_row_lock_time_max      | 14962 |</span><br><span class="line">| Innodb_row_lock_waits         | 4     |</span><br><span class="line">+-------------------------------+-------+</span><br></pre></td></tr></table></figure>

<p>对各个状态量的说明如下：</p>
<ul>
<li><code>Innodb_row_lock_current_waits</code>：当前正在等待锁定的数量</li>
<li><code>Innodb_row_lock_time</code>：从系统启动到现在锁定总时间长度</li>
<li><code>Innodb_row_lock_time_avg</code>：每次等待所花平均时间</li>
<li><code>Innodb_row_lock_time_max</code>：从系统启动到现在等待最长的一次所花的时间</li>
<li><code>Innodb_row_lock_waits</code>：系统启动后到现在总共等待的次数</li>
</ul>
<p>注意waits金额time_avg比较高的，就要分析系统并制定优化方案。</p>
<blockquote>
<p>优化建议</p>
</blockquote>
<ul>
<li>尽可能让所有数据检索都通过索引来完成，避免无索引行锁升级为表锁</li>
<li>合理设计索引，尽量缩小锁的范围</li>
<li>尽可能减少检索条件，避免间隙锁</li>
<li>尽量控制事务大小，减少锁定资源量和时间长度</li>
<li>尽可能低级别事务隔离</li>
</ul>
<h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><h3 id="复制的基本原则"><a href="#复制的基本原则" class="headerlink" title="复制的基本原则"></a>复制的基本原则</h3><p>MySQL复制过程分为三步：</p>
<ul>
<li>Master将改变记录到二进制日志(Binary Log)。这些记录过程叫做二进制日志事件，<code>Binary Log Events</code>；</li>
<li>Slave将Master的<code>Binary Log Events</code>拷贝到它的中继日志(Replay Log);</li>
<li>Slave重做中继日志中的事件，将改变应用到自己的数据库中。MySQL复制是异步且串行化的。</li>
</ul>
<h3 id="复制的最大问题"><a href="#复制的最大问题" class="headerlink" title="复制的最大问题"></a>复制的最大问题</h3><ul>
<li>每个Slave只有一个Master。</li>
<li>每个Slave只能有一个唯一的服务器ID。</li>
<li>每个Master可以有多个Salve。</li>
</ul>
<h3 id="一主一从配置"><a href="#一主一从配置" class="headerlink" title="一主一从配置"></a>一主一从配置</h3><blockquote>
<p>基本准备</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@parak home]# mkdir -p mysql-3307/conf mysql-3307/data mysql-3308/conf mysql-3308/data</span><br><span class="line">[root@parak home]# touch mysql-3307/conf/my.cnf mysql-3308/conf/my.cnf</span><br><span class="line"><span class="meta">#</span><span class="bash"> Master配置文件</span></span><br><span class="line">[root@parak home]# vi mysql-3307/conf/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">datadir = /var/lib/mysql</span><br><span class="line">server-id = 1</span><br><span class="line">log-bin = mysql-bin</span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION</span><br><span class="line"><span class="meta">#</span><span class="bash"> Slave配置文件</span></span><br><span class="line">[root@parak home]# vi mysql-3308/conf/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">datadir = /var/lib/mysql</span><br><span class="line">server-id = 2</span><br><span class="line">log-bin = mysql-bin</span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION</span><br></pre></td></tr></table></figure>



<blockquote>
<p>Docker启动</p>
</blockquote>
<p>mysql-3307用作Master</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-v /home/mysql-3307/conf/my.cnf:/etc/my.cnf \</span><br><span class="line">-v /home/mysql-3307/data:/var/lib/mysql \</span><br><span class="line">-p 3307:3306 \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=KAG1823 \</span><br><span class="line">--restart=always \</span><br><span class="line">--name mysql-3307 \</span><br><span class="line">mysql:8.0.20</span><br></pre></td></tr></table></figure>

<p>mysql-3308用作Slave</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-v /home/mysql-3308/conf/my.cnf:/etc/my.cnf \</span><br><span class="line">-v /home/mysql-3308/data:/var/lib/mysql \</span><br><span class="line">-p 3308:3306 \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=KAG1823 \</span><br><span class="line">--restart=always \</span><br><span class="line">--name mysql-3308 \</span><br><span class="line">mysql:8.0.20</span><br></pre></td></tr></table></figure>



<blockquote>
<p>查看网络</p>
</blockquote>
<p>查看bridge网络的所有容器：<code>docker inspect bridgr</code></p>
<p>根据容器ID或者容器名称查询：<code>docker inspect --format=&#39;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#39; 容器名称 | 容器id</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@parak ~]# docker inspect --format=&#x27;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#x27; mysql-3307</span><br><span class="line">172.17.0.5</span><br><span class="line">[root@parak ~]# docker inspect --format=&#x27;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#x27; mysql-3308</span><br><span class="line">172.17.0.6</span><br></pre></td></tr></table></figure>

<p>mysql-3307的IP为：<code>172.17.0.5</code></p>
<p>mysql-3308的IP为：<code>172.17.0.6</code></p>
<blockquote>
<p>Master配置</p>
</blockquote>
<p>进入Master内部</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建用户，用于Slave访问Master</span><br><span class="line">mysql&gt; CREATE USER &#39;Khighness&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;KAG1823&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; GRANT REPLICATION SLAVE ON *.* TO &#39;Khighness&#39;@&#39;%&#39;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 记录File和Position</span><br><span class="line">mysql&gt; SHOW MASTER STATUS\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">             File: mysql-bin.000003</span><br><span class="line">         Position: 4440</span><br><span class="line">     Binlog_Do_DB:</span><br><span class="line"> Binlog_Ignore_DB:</span><br><span class="line">Executed_Gtid_Set:</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR:</span><br><span class="line">No query specified</span><br></pre></td></tr></table></figure>

<p>用户名：<code>slave</code></p>
<p>File：<code>mysql-bin.000003</code></p>
<p>Position：<code>4440</code></p>
<blockquote>
<p>Slave配置</p>
</blockquote>
<p>进入Slave内部</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; CHANGE MASTER TO</span><br><span class="line">    -&gt; MASTER_HOST&#x3D;&#39;172.17.0.5&#39;,</span><br><span class="line">    -&gt; MASTER_PORT&#x3D;3307,</span><br><span class="line">    -&gt; MASTER_USER&#x3D;&#39;Khighness&#39;,</span><br><span class="line">    -&gt; MASTER_PASSWORD&#x3D;&#39;KAG1823&#39;,</span><br><span class="line">    -&gt; MASTER_LOG_FILE&#x3D;&#39;mysql-bin.000003&#39;,</span><br><span class="line">    -&gt; MASTER_LOG_POS&#x3D;4440;</span><br><span class="line">Query OK, 0 rows affected, 2 warnings (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; START SLAVE;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/posts/f5f9fa9b/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="📖概述"><a href="#📖概述" class="headerlink" title="📖概述"></a>📖概述</h2>

<blockquote>
<p>故事</p>
</blockquote>
<p>2010年，几个搞 IT 的年轻人，在美国旧金山成立了一家名叫 <code>dotCloud </code>的公司。<code>dotCloud </code>的平台即服务（Platform-as-a-Service）提供商。底层技术上，<code>dotCloud</code> 平台利用了<code>Linux</code>的 <code>LXC </code>容器技术。为了方便创建和管理这些容器，<code>dotCloud </code>基于 Google 公司推出的 <code>Go </code>语言开发了一套内部工具，之后被命名为 <code>Docker</code>。<code>Docker </code>就是这样诞生的。</p>
<p>2013年的后端技术领域已经太久没有出现让人振奋的东西了。当然<code>Docker</code>在发行之后也没用引起行业的关注。在开源之后才爆火。</p>
<p><code>Docker</code>定义容器技术标砖使得容器技术的落地变得十分简单，应用可以稳定便携的运行在容器中。</p>
<a id="more"></a>



<blockquote>
<p>特点</p>
</blockquote>
<ul>
<li><strong>更快速的应用交付和部署</strong></li>
<li><strong>更便捷的升级和扩缩容</strong></li>
<li><strong>更高效的计算资源利用</strong></li>
<li><strong>更简单的系统运维</strong></li>
</ul>
<blockquote>
<p>架构</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/f5f9fa9b/Docker%E6%9E%B6%E6%9E%84.jpg" class="" title="Docker">

<p><strong>镜像（image）：</strong> 相当于一个模板，可以通过这个模板来创建容器服务</p>
<p><strong>容器（container）：</strong> 独立运行一个或者一个组应用</p>
<p><strong>仓库（repository）：</strong> 存放镜像的地方</p>
<br>

<h2 id="🔨安装"><a href="#🔨安装" class="headerlink" title="🔨安装"></a>🔨安装</h2><blockquote>
<p>官方文档</p>
</blockquote>
<p>CentOS 7安装：<a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p>
<blockquote>
<p>卸载旧版本</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum remove docker \</span></span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>



<blockquote>
<p>设置存储库</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install -y yum-utils</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>更换镜像源</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>更新YUM包</p>
<p>更新YUM索引</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum makecache fast</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>安装docker引擎和容器</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install docker-ce docker-ce-cli containerd.io</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>启动Docker并测试hello-world</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start docker</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo docker run hello-world</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>卸载方式</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum remove docker-ce docker-ce-cli containerd.io</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo rm -rf /var/lib/docker</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>镜像加速</p>
</blockquote>
<p>1️⃣使用阿里镜像加速器</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/f5f9fa9b/image-20201206122604398.png" class="" title="image-20201206122604398">

<p>2️⃣使用中科大或者网易镜像加速</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加daemon.json</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> touch /etc/docker/daemon.json</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 写入内容并保存</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 科大源: https://docker.mirrors.ustc.edu.cn/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 网易源：http://hub-mirror.c.163.com</span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://docker.mirrors.ustc.edu.cn/&quot;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启Dicker</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl restart docker</span></span><br></pre></td></tr></table></figure>

<br>

<h2 id="🚀原理"><a href="#🚀原理" class="headerlink" title="🚀原理"></a>🚀原理</h2><blockquote>
<p>docker run的执行流程</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="Docker/image-20201203233730702.png" alt="image-20201203233730702" style="zoom:88%;" />

<blockquote>
<p>Docker的工作</p>
</blockquote>
<p>Docker是一个Client-Server结构的系统，Docker的守护进程运行在主机上。通过Socket从客户端访问。</p>
<p><strong>为什么Docker比VM快？</strong></p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/f5f9fa9b/image-20201204003500802.png" class="" title="image-20201204003500802">

<p>1、Docker有比虚拟机更少的抽象层。Docker不需要Hypervisor实现硬件资源虚拟化，运行在Docker容器上的程序直接使用的是实际物理机的硬件资源，因此在CPU、内存利用率上Docker将会在效率上有明显的优势。</p>
<p>2、Docker利用的是宿主机的内核，而不需要Guest OS。因此创建一个容器时，不需要和虚拟机一样重新加载一个操作系统内核。从而避免引寻、加载操作系统内核返回时耗时耗资源的过程，当新建一个虚拟机时，虚拟机软件需要加载Guest OS，返回新建过程是分钟级别的。而新建一个Docker容器只需要几秒钟。</p>
<p>3、Docker与VM相比：</p>
<ul>
<li>Docker灵活，VM笨重</li>
<li>Docker存储的镜像小，便于存储和传输，VM镜像庞大</li>
</ul>
<br>

<h2 id="🔰命令"><a href="#🔰命令" class="headerlink" title="🔰命令"></a>🔰命令</h2><blockquote>
<p>🌐官方文档</p>
</blockquote>
<p>Command-line reference：<a href="https://docs.docker.com/reference/">https://docs.docker.com/reference/</a></p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/f5f9fa9b/image-20201204225734966.png" class="" title="image-20201204225734966">

<br>

<h3 id="1️⃣帮助命令"><a href="#1️⃣帮助命令" class="headerlink" title="1️⃣帮助命令"></a>1️⃣帮助命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker version    <span class="comment"># 显示Docker版本信息</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker info       <span class="comment"># 显示Docker系统信息</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker --<span class="built_in">help</span>     <span class="comment"># Docker命令帮助信息</span></span></span><br></pre></td></tr></table></figure>

<br>

<h3 id="2️⃣镜像命令"><a href="#2️⃣镜像命令" class="headerlink" title="2️⃣镜像命令"></a>2️⃣镜像命令</h3><blockquote>
<p>查看镜像</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker images</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可选项</span></span><br><span class="line">-a, --all             # 列出所有镜像</span><br><span class="line">    --digests         # 显示镜像的摘要信息</span><br><span class="line">-q, --quiet           # 只显示镜像的ID</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行</span></span><br><span class="line">[root@parak khighness]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              bf756fb1ae65        11 months ago       13.3kB</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解释</span></span><br><span class="line">REPOSITORY  镜像的仓库源</span><br><span class="line">TAG         镜像的标签</span><br><span class="line">IMAGE ID    镜像的ID</span><br><span class="line">CREATED     镜像的创建时间</span><br><span class="line">SIZE        镜像的大小</span><br></pre></td></tr></table></figure>



<blockquote>
<p>搜索镜像</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker search &lt;IMAGE&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可选项</span></span><br><span class="line">--filter=STARS=1000 # 镜像的STARS大于1000</span><br></pre></td></tr></table></figure>



<blockquote>
<p>下载镜像</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull &lt;IMAGE&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker pull .io/library/mysql:latest</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果不写tag，默认就是最新的</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定版本下载</span></span><br><span class="line">[root@parak khighness]# docker pull mysql:8.0.20</span><br><span class="line">8.0.20: Pulling from library/mysql  # 分层下载</span><br><span class="line">8559a31e96f4: Pull complete </span><br><span class="line">d51ce1c2e575: Pull complete </span><br><span class="line">c2344adc4858: Pull complete </span><br><span class="line">fcf3ceff18fc: Pull complete </span><br><span class="line">16da0c38dc5b: Pull complete </span><br><span class="line">b905d1797e97: Pull complete </span><br><span class="line">4b50d1c6b05c: Pull complete </span><br><span class="line">c75914a65ca2: Pull complete </span><br><span class="line">1ae8042bdd09: Pull complete </span><br><span class="line">453ac13c00a3: Pull complete </span><br><span class="line">9e680cd72f08: Pull complete </span><br><span class="line">a6b5dc864b6c: Pull complete </span><br><span class="line">Digest: sha256:8b7b328a7ff6de46ef96bcf83af048cb00a1c86282bfca0cb119c84568b4caf6</span><br><span class="line">Status: Downloaded newer image for mysql:8.0.20</span><br><span class="line">docker.io/library/mysql:8.0.20</span><br></pre></td></tr></table></figure>



<blockquote>
<p>删除镜像</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通过镜像ID删除</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker rmi -f &lt;IMAGE ID&gt; ...</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除所有镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker rmi -f $(docker images -aq)0</span></span><br></pre></td></tr></table></figure>

<br>

<h3 id="3️⃣容器命令"><a href="#3️⃣容器命令" class="headerlink" title="3️⃣容器命令"></a>3️⃣容器命令</h3><blockquote>
<p>下载一个CentOS镜像来测试学(套)习(娃)</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@parak khighness]# docker pull centos</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/centos</span><br><span class="line">3c72a8ed6814: Pull complete </span><br><span class="line">Digest: sha256:76d24f3ba3317fa945743bb3746fbaf3a0b752f10b10376960de01da70685fbd</span><br><span class="line">Status: Downloaded newer image for centos:latest</span><br><span class="line">docker.io/library/centos:latest</span><br></pre></td></tr></table></figure>



<blockquote>
<p>新建容器并启动</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run [可选参数] &lt;IMAGE&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 参数说明</span></span><br><span class="line">--name=&quot;NAME&quot;   容器名字，用于区分容器</span><br><span class="line">-d              后台方式运行</span><br><span class="line">-it             使用交互方式运行，进如容器查看内容</span><br><span class="line">-p              指定容器端口  -p 8080:8080</span><br><span class="line">	-p ip:主机端口:容器端口</span><br><span class="line">	-p 主机端口:容器端口</span><br><span class="line">	-p 容器端口</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试，启动并进入容器</span></span><br><span class="line">[root@parak khighness]# docker run -it centos /bin/bash</span><br><span class="line">[root@e4efa1c507b8 /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line"><span class="meta">#</span><span class="bash"> 从容器中退回主机</span></span><br><span class="line">[root@e4efa1c507b8 /]# exit</span><br><span class="line">exit</span><br><span class="line">[root@parak khighness]# ls</span><br><span class="line">公共  模板  视频  图片  文档  下载  音乐  桌面</span><br></pre></td></tr></table></figure>



<blockquote>
<p>查看容器</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps  <span class="comment"># 显示所有正在运行的容器</span></span></span><br><span class="line">-a           # 显示所有正在运行的容器+历史运行过的容器</span><br><span class="line">-n=?         # 显示最近创建的n个容器</span><br><span class="line">-q           # 只显示容器的编号</span><br></pre></td></tr></table></figure>



<blockquote>
<p>退出容器</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">exit</span>        </span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>删除容器</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker rm &lt;Container ID/NAME&gt;    <span class="comment"># 删除指定的容器，不能删除只在运行的容器</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker rm -f $(docker ps -aq)    <span class="comment"># 删除所有的容器</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker ps -a -q|xargs docker rm  <span class="comment"># 删除所有的容器 </span></span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>容器操作</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker start   &lt;Container ID/NAME&gt;  <span class="comment"># 启动容器 </span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker restart &lt;Container ID/NAME&gt;  <span class="comment"># 重启容器</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker stop    &lt;Container ID/NAME&gt;  <span class="comment"># 停止当前正在运行的容器</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">kill</span>    &lt;Container ID/NAME&gt;  <span class="comment"># 强制停止当前容器</span></span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>查看日志</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker logs -tf --tail &lt;n&gt; &lt;Container ID/NAME&gt; <span class="comment"># 显示指定行数的日志</span></span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>查看容器中进程信息</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker top &lt;Container ID/NAME&gt;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>查看镜像的元数据</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker inspect</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>进入当前正在运行的容器</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it &lt;Container ID&gt; bashShell  </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入容器后开启一个新的终端，可以在里面操作；</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">exec</span>之后不会终结当前容器进程</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker attach &lt;Container ID&gt;              </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入容器中正在执行的终端，不会启动新的进程</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">exec</span>之后终结当前容器进程</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>从容器拷贝新的东西到主机</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 开启CentOS容器</span></span><br><span class="line">[root@parak khighness]# docker start b9ace468ea7d</span><br><span class="line">b9ace468ea7d</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入CentOS容器</span></span><br><span class="line">[root@parak khighness]# docker attach b9ace468ea7d</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建文件夹和文件</span></span><br><span class="line">[root@b9ace468ea7d /]# cd home/</span><br><span class="line">[root@b9ace468ea7d home]# mkdir document </span><br><span class="line">[root@b9ace468ea7d home]# vi K1.java</span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出容器</span></span><br><span class="line">[root@b9ace468ea7d document]# exit</span><br><span class="line">exit</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将容器文件复制到主机上</span></span><br><span class="line">[root@parak khighness]# docker cp b9ace468ea7d:/home/document/K1.java document/</span><br><span class="line">[root@parak khighness]# cd document/</span><br><span class="line">[root@parak document]# ll</span><br><span class="line">总用量 4</span><br><span class="line">-rw-r--r--. 1 root root 186 12月  5 11:33 K1.java</span><br></pre></td></tr></table></figure>

<br>

<h2 id="🔱练习"><a href="#🔱练习" class="headerlink" title="🔱练习"></a>🔱练习</h2><br>

<h3 id="🌠-安装Nginx"><a href="#🌠-安装Nginx" class="headerlink" title="🌠 安装Nginx"></a>🌠 安装Nginx</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 搜索镜像</span></span><br><span class="line">[root@parak khighness]# docker search nginx</span><br><span class="line">NAME                               DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">nginx                              Official build of Nginx.                        14063               [OK]                </span><br><span class="line">jwilder/nginx-proxy                Automated Nginx reverse proxy for docker con…   1912                                    [OK]</span><br><span class="line">richarvey/nginx-php-fpm            Container running Nginx + PHP-FPM capable of…   795                                     [OK]</span><br><span class="line">linuxserver/nginx                  An Nginx container, brought to you by LinuxS…   131                                     </span><br><span class="line">jc21/nginx-proxy-manager           Docker container for managing Nginx proxy ho…   115                                     </span><br><span class="line">tiangolo/nginx-rtmp                Docker image with Nginx using the nginx-rtmp…   105                                     [OK]</span><br><span class="line">bitnami/nginx                      Bitnami nginx Docker Image                      90                                      [OK]</span><br><span class="line">alfg/nginx-rtmp                    NGINX, nginx-rtmp-module and FFmpeg from sou…   80                                      [OK]</span><br><span class="line">jlesage/nginx-proxy-manager        Docker container for Nginx Proxy Manager        72                                      [OK]</span><br><span class="line">nginxdemos/hello                   NGINX webserver that serves a simple page co…   63                                      [OK]</span><br><span class="line">nginx/nginx-ingress                NGINX Ingress Controller for Kubernetes         45                                      </span><br><span class="line">privatebin/nginx-fpm-alpine        PrivateBin running on an Nginx, php-fpm &amp; Al…   42                                      [OK]</span><br><span class="line">nginxinc/nginx-unprivileged        Unprivileged NGINX Dockerfiles                  21                                      </span><br><span class="line">schmunk42/nginx-redirect           A very simple container to redirect HTTP tra…   19                                      [OK]</span><br><span class="line">nginx/nginx-prometheus-exporter    NGINX Prometheus Exporter                       15                                      </span><br><span class="line">centos/nginx-112-centos7           Platform for running nginx 1.12 or building …   15                                      </span><br><span class="line">staticfloat/nginx-certbot          Opinionated setup for automatic TLS certs lo…   14                                      [OK]</span><br><span class="line">raulr/nginx-wordpress              Nginx front-end for the official wordpress:f…   13                                      [OK]</span><br><span class="line">centos/nginx-18-centos7            Platform for running nginx 1.8 or building n…   13                                      </span><br><span class="line">mailu/nginx                        Mailu nginx frontend                            8                                       [OK]</span><br><span class="line">bitwarden/nginx                    The Bitwarden nginx web server acting as a r…   7                                       </span><br><span class="line">flashspys/nginx-static             Super Lightweight Nginx Image                   7                                       [OK]</span><br><span class="line">bitnami/nginx-ingress-controller   Bitnami Docker Image for NGINX Ingress Contr…   6                                       [OK]</span><br><span class="line">wodby/nginx                        Generic nginx                                   1                                       [OK]</span><br><span class="line">ansibleplaybookbundle/nginx-apb    An APB to deploy NGINX                          1                                       [OK]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载镜像</span></span><br><span class="line">[root@parak khighness]# docker pull nginx</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">852e50cd189d: Pull complete </span><br><span class="line">571d7e852307: Pull complete </span><br><span class="line">addb10abd9cb: Pull complete </span><br><span class="line">d20aa7ccdb77: Pull complete </span><br><span class="line">8b03f1e11359: Pull complete </span><br><span class="line">Digest: sha256:6b1daa9462046581ac15be20277a7c75476283f969cb3a61c8725ec38d3b01c3</span><br><span class="line">Status: Downloaded newer image for nginx:latest</span><br><span class="line">docker.io/library/nginx:latest</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看镜像</span></span><br><span class="line">[root@parak khighness]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">nginx               latest              bc9a0695f571        10 days ago         133MB</span><br><span class="line">centos              latest              0d120b6ccaa8        3 months ago        215MB</span><br><span class="line">mysql               8.0.20              be0dbf01a0f3        5 months ago        541MB</span><br><span class="line">hello-world         latest              bf756fb1ae65        11 months ago       13.3kB</span><br><span class="line"><span class="meta">#</span><span class="bash"> 后台启动80端口nginx，对外开放3355端口</span></span><br><span class="line">[root@parak khighness]# docker run -d --name nginx1 -p 3355:80 nginx </span><br><span class="line">b6072408f44cd78594f01c95bc63da6baf911f74d62bf232ec42c1cd8b08b4d0</span><br><span class="line">[root@parak khighness]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES</span><br><span class="line">b6072408f44c        nginx               &quot;/docker-entrypoint.…&quot;   6 seconds ago       Up 4 seconds        0.0.0.0:3355-&gt;80/tcp   nginx1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试，可以用ip:3355在浏览器访问</span></span><br><span class="line">[root@parak khighness]# curl localhost:3355</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        width: 35em;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="🌠-安装Tomcat"><a href="#🌠-安装Tomcat" class="headerlink" title="🌠 安装Tomcat"></a>🌠 安装Tomcat</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@parak khighness]# docker pull tomcat:9.0</span><br><span class="line">9.0: Pulling from library/tomcat</span><br><span class="line">756975cb9c7e: Pull complete </span><br><span class="line">d77915b4e630: Pull complete </span><br><span class="line">5f37a0a41b6b: Pull complete </span><br><span class="line">96b2c1e36db5: Pull complete </span><br><span class="line">27a2d52b526e: Pull complete </span><br><span class="line">a867dba77389: Pull complete </span><br><span class="line">0939c055fb79: Pull complete </span><br><span class="line">0b0694ce0ae2: Pull complete </span><br><span class="line">81a5f8099e05: Pull complete </span><br><span class="line">c3d7917d545e: Pull complete </span><br><span class="line">Digest: sha256:a319b10d8729817c7ce0bcc2343a6f97711c7870395019340d96b6aafd6ccbea</span><br><span class="line">Status: Downloaded newer image for tomcat:9.0</span><br><span class="line">docker.io/library/tomcat:9.0</span><br><span class="line"></span><br><span class="line">[root@parak khighness]# docker run -d -p 3355:8080 --name tomcat1 tomcat</span><br><span class="line">48c7de09007af158b13a9bef1f2d2b77bed0c4bc2f93a4887eac427911118a9b</span><br><span class="line">[root@parak khighness]# docker exec -it tomcat1 /bin/bash</span><br><span class="line">root@48c7de09007a:/usr/local/tomcat# ls -al</span><br><span class="line">total 128</span><br><span class="line">drwxr-xr-x. 1 root root    30 Nov 19 06:16 .</span><br><span class="line">drwxr-xr-x. 1 root root    20 Nov 19 06:12 ..</span><br><span class="line">-rw-r--r--. 1 root root 18982 Nov 12 15:41 BUILDING.txt</span><br><span class="line">-rw-r--r--. 1 root root  5409 Nov 12 15:41 CONTRIBUTING.md</span><br><span class="line">-rw-r--r--. 1 root root 57092 Nov 12 15:41 LICENSE</span><br><span class="line">-rw-r--r--. 1 root root  2333 Nov 12 15:41 NOTICE</span><br><span class="line">-rw-r--r--. 1 root root  3257 Nov 12 15:41 README.md</span><br><span class="line">-rw-r--r--. 1 root root  6898 Nov 12 15:41 RELEASE-NOTES</span><br><span class="line">-rw-r--r--. 1 root root 16507 Nov 12 15:41 RUNNING.txt</span><br><span class="line">drwxr-xr-x. 2 root root  4096 Nov 19 06:16 bin</span><br><span class="line">drwxr-xr-x. 1 root root    22 Dec  5 13:15 conf</span><br><span class="line">drwxr-xr-x. 2 root root  4096 Nov 19 06:16 lib</span><br><span class="line">drwxrwxrwx. 1 root root   177 Dec  5 13:15 logs</span><br><span class="line">drwxr-xr-x. 2 root root   134 Nov 19 06:16 native-jni-lib</span><br><span class="line">drwxrwxrwx. 2 root root    30 Nov 19 06:16 temp</span><br><span class="line">drwxr-xr-x. 2 root root     6 Nov 19 06:16 webapps</span><br><span class="line">drwxr-xr-x. 7 root root    81 Nov 12 15:38 webapps.dist</span><br><span class="line">drwxrwxrwx. 2 root root     6 Nov 12 15:35 work</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以发现webapps目录为空</span></span><br><span class="line">root@48c7de09007a:/usr/local/tomcat# cd webapps</span><br><span class="line">root@48c7de09007a:/usr/local/tomcat/webapps# ls -l</span><br><span class="line">total 0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将webapps.list目录下的内容拷贝到webapps下，再用浏览器测试访问</span></span><br><span class="line">root@48c7de09007a:/usr/local/tomcat/webapps# cd ..</span><br><span class="line">root@48c7de09007a:/usr/local/tomcat# cd webapps.dist/</span><br><span class="line">root@48c7de09007a:/usr/local/tomcat/webapps.dist# ls</span><br><span class="line">ROOT  docs  examples  host-manager  manager</span><br><span class="line">root@48c7de09007a:/usr/local/tomcat/webapps.dist# cd ..</span><br><span class="line">root@48c7de09007a:/usr/local/tomcat# cp -r webapps.dist/* webapps/</span><br><span class="line">root@48c7de09007a:/usr/local/tomcat# cd webapps</span><br><span class="line">root@48c7de09007a:/usr/local/tomcat/webapps# ls</span><br><span class="line">ROOT  docs  examples  host-manager  manager</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试访问 <a href="http://192.168.117.155:3355/">http://192.168.117.155:3355/</a></p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/f5f9fa9b/image-20201205214537503.png" class="" title="image-20201205214537503">

<br>

<h3 id="🌠安装es-kibana"><a href="#🌠安装es-kibana" class="headerlink" title="🌠安装es + kibana"></a>🌠安装es + kibana</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> --net somenetwork 网络配置</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d --name es1 -p 9200:9200 -p 9300:9300 -e <span class="string">&quot;discovery.type=single-node&quot;</span> elasticsearch:7.6.2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看主机状态</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> doucker stats</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载并运行ES</span></span><br><span class="line">[root@parak khighness]#  docker run -d --name es1 -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; elasticsearch:7.6.2</span><br><span class="line">Unable to find image &#x27;elasticsearch:7.6.2&#x27; locally</span><br><span class="line">7.6.2: Pulling from library/elasticsearch</span><br><span class="line">ab5ef0e58194: Pull complete </span><br><span class="line">c4d1ca5c8a25: Pull complete </span><br><span class="line">941a3cc8e7b8: Pull complete </span><br><span class="line">43ec483d9618: Pull complete </span><br><span class="line">c486fd200684: Pull complete </span><br><span class="line">1b960df074b2: Pull complete </span><br><span class="line">1719d48d6823: Pull complete </span><br><span class="line">Digest: sha256:1b09dbd93085a1e7bca34830e77d2981521a7210e11f11eda997add1c12711fa</span><br><span class="line">Status: Downloaded newer image for elasticsearch:7.6.2</span><br><span class="line">51441d9abfb966c4baa0402ceb99e702f58ec68cd427710a2b8c8043983412e9</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看主机状态</span></span><br><span class="line">[root@parak khighness]# docker stats</span><br><span class="line">CONTAINER ID    NAME   CPU %   MEM USAGE/LIMIT  MEM %     NET I/O    BLOCK I/O      PIDS</span><br><span class="line">51441d9abfb9    es1   42.74%  495.6MiB/972.4MiB 50.97%    656B/0B   4.76GB/629MB     46</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止es1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker stop es1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除es1</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker rm es1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 限制内存，启动ES</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d --name es1 -p 9200:9200 -p 9300:9300 -e <span class="string">&quot;discovery.type=single-node&quot;</span> -e ES_JAVA_OPTS=<span class="string">&quot;-Xms64m -Xmx512m&quot;</span> elasticsearch:7.6.2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重新启动es1</span></span><br><span class="line">[root@parak khighness]# docker run -d --name es1 -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; -e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot; elasticsearch:7.6.2</span><br><span class="line">ca4494f52e5642d5992c49816b636b1858f2e2f5c1aaf38621c76001262e8e4d</span><br><span class="line"><span class="meta">#</span><span class="bash"> 再次查看状态</span></span><br><span class="line">[root@parak khighness]# docker stats</span><br><span class="line">CONTAINER ID    NAME   CPU %   MEM USAGE/LIMIT   MEM %     NET I/O   BLOCK I/O       PIDS</span><br><span class="line">ca4494f52e56    es1    0.68%   357.5MiB/972.4MiB 36.77%    737B/0B   476MB/1.78MB     45</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试访问</span></span><br><span class="line">[root@parak khighness]# curl localhost:9200</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;ca4494f52e56&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;docker-cluster&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;aDKZlZW_T7Ss3Dr0CXZQlQ&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;7.6.2&quot;,</span><br><span class="line">    &quot;build_flavor&quot; : &quot;default&quot;,</span><br><span class="line">    &quot;build_type&quot; : &quot;docker&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;ef48eb35cf30adf4db14086e8aabd07ef6fb113f&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2020-03-26T06:34:37.794943Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;8.4.0&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="📈可视化"><a href="#📈可视化" class="headerlink" title="📈可视化"></a>📈可视化</h2><p>Y1S1可视化面板的前端写的真好看，我爱了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装运行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 8088:9000 --name=pt --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=<span class="literal">true</span> portainer/portainer</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>访问测试 <a href="http://192.168.117.155:8088/">http://192.168.117.155:8088/</a></p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="Docker/image-20201205232646075.png" alt="image-20201205232646075"  />

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="Docker/image-20201206105337297.png" alt="image-20201206105337297"  />





<h2 id="📑DockerFile"><a href="#📑DockerFile" class="headerlink" title="📑DockerFile"></a>📑DockerFile</h2><p>DockerFile就是用来构建docker镜像的构建文件-命令脚本。</p>
<blockquote>
<p>命令</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">描述</th>
<th align="center">理解</th>
</tr>
</thead>
<tbody><tr>
<td align="center">FROM</td>
<td align="center">指定基础镜像</td>
<td align="center">公司的父公司</td>
</tr>
<tr>
<td align="center">MAINTAINER</td>
<td align="center">指定维护者信息</td>
<td align="center">公司注册信息</td>
</tr>
<tr>
<td align="center">RUN</td>
<td align="center">把命令前面加上RUN即可</td>
<td align="center">公司注册流程</td>
</tr>
<tr>
<td align="center">ADD</td>
<td align="center">COPY文件，会自动解压</td>
<td align="center">公司注册资金</td>
</tr>
<tr>
<td align="center">WORKDIR</td>
<td align="center">设置当前工作目录</td>
<td align="center">公司大楼仓库</td>
</tr>
<tr>
<td align="center">VOLUMN</td>
<td align="center">挂载主机目录</td>
<td align="center">公司的主仓库</td>
</tr>
<tr>
<td align="center">EXPOSE</td>
<td align="center">指定对外端口</td>
<td align="center">公司开放大门</td>
</tr>
<tr>
<td align="center">RUN</td>
<td align="center">进程要一直运行下去</td>
<td align="center">公司永不倒闭</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CMD</td>
<td align="center">指定这容器启动的时候要运行的命令只有最后一个会生效，可被替代。</td>
</tr>
<tr>
<td align="center">ENTRYPOINT</td>
<td align="center">指定这个容器启动的时候要运行的命令，可以追加命令。</td>
</tr>
<tr>
<td align="center">ONBUILD</td>
<td align="center">当构建一个被继承DockerFile这就会运行ONBUILD指令。触发指令.</td>
</tr>
<tr>
<td align="center">COPY</td>
<td align="center">类似ADD，将文件拷贝到镜像中。</td>
</tr>
<tr>
<td align="center">ENV</td>
<td align="center">构建的时候设置环境变量。</td>
</tr>
</tbody></table>
<blockquote>
<p>实例1-测试</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@parak home]# mkdir volume</span><br><span class="line">[root@parak home]# cd volume/</span><br><span class="line">[root@parak volume]# vim dockerfile1</span><br><span class="line">[root@parak volume]# cat dockerfile1 </span><br><span class="line">FROM centos</span><br><span class="line">VOLUME [&quot;volume01&quot;,&quot;volume02&quot;]</span><br><span class="line">CMD echo &quot;---end---&quot;</span><br><span class="line">CMD /bin/bash</span><br><span class="line">[root@parak volume]# docker build -f /home/volume/dockerfile1 -t khighness/centos:1.0 .</span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/4 : FROM centos</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 0d120b6ccaa8</span></span><br><span class="line">Step 2/4 : VOLUME [&quot;volume01&quot;,&quot;volume02&quot;]</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 79dc7b449286</span></span><br><span class="line">Removing intermediate container 79dc7b449286</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 9a6608557c9a</span></span><br><span class="line">Step 3/4 : CMD echo &quot;---end---&quot;</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 8b8c40056f99</span></span><br><span class="line">Removing intermediate container 8b8c40056f99</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 2158b18dedff</span></span><br><span class="line">Step 4/4 : CMD /bin/bash</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 9d76c3598d69</span></span><br><span class="line">Removing intermediate container 9d76c3598d69</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 240a84cdfbef</span></span><br><span class="line">Successfully built 240a84cdfbef</span><br><span class="line">Successfully tagged khighness/centos:1.0</span><br></pre></td></tr></table></figure>



<blockquote>
<p>实例2-构建自己的centos</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1、编写DockerFile文件</span></span><br><span class="line">[root@parak dockerfile]# vim mydockerfile-centos</span><br><span class="line">[root@parak dockerfile]# cat mydockerfile-centos </span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER khighness&lt;1823676372@qq.com&gt;</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH </span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo &quot;---end---&quot;</span><br><span class="line">CMD /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、通过DockerFile构建镜像</span></span><br><span class="line">[root@parak dockerfile]# docker build -f mydockerfile-centos  -t mycentos:1.0 .</span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/10 : FROM centos</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 0d120b6ccaa8</span></span><br><span class="line">Step 2/10 : MAINTAINER khighness&lt;1823676372@qq.com&gt;</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 024da1b1d4cc</span></span><br><span class="line">Removing intermediate container 024da1b1d4cc</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 6c9b636504d2</span></span><br><span class="line">Step 3/10 : ENV MYPATH /usr/local</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 4046d4e257ac</span></span><br><span class="line">Removing intermediate container 4046d4e257ac</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> a5710fdc760e</span></span><br><span class="line">Step 4/10 : WORKDIR $MYPATH</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 252416d49e94</span></span><br><span class="line">Removing intermediate container 252416d49e94</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> fdbae7da4ca4</span></span><br><span class="line">Step 5/10 : RUN yum -y install vim</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 9eb786294022</span></span><br><span class="line">CentOS-8 - AppStream                            288 kB/s | 6.2 MB     00:22    </span><br><span class="line">CentOS-8 - Base                                 703 kB/s | 2.3 MB     00:03    </span><br><span class="line">CentOS-8 - Extras                               1.3 kB/s | 8.1 kB     00:06    </span><br><span class="line">Dependencies resolved.</span><br><span class="line">================================================================================</span><br><span class="line"> Package             Arch        Version                   Repository      Size</span><br><span class="line">================================================================================</span><br><span class="line">Installing:</span><br><span class="line"> vim-enhanced        x86_64      2:8.0.1763-15.el8         AppStream      1.4 M</span><br><span class="line">Installing dependencies:</span><br><span class="line"> gpm-libs            x86_64      1.20.7-15.el8             AppStream       39 k</span><br><span class="line"> vim-common          x86_64      2:8.0.1763-15.el8         AppStream      6.3 M</span><br><span class="line"> vim-filesystem      noarch      2:8.0.1763-15.el8         AppStream       48 k</span><br><span class="line"> which               x86_64      2.21-12.el8               BaseOS          49 k</span><br><span class="line"></span><br><span class="line">Transaction Summary</span><br><span class="line">================================================================================</span><br><span class="line">Install  5 Packages</span><br><span class="line"></span><br><span class="line">Total download size: 7.8 M</span><br><span class="line">Installed size: 30 M</span><br><span class="line">Downloading Packages:</span><br><span class="line">(1/5): gpm-libs-1.20.7-15.el8.x86_64.rpm        340 kB/s |  39 kB     00:00    </span><br><span class="line">(2/5): vim-filesystem-8.0.1763-15.el8.noarch.rp 664 kB/s |  48 kB     00:00    </span><br><span class="line">(3/5): which-2.21-12.el8.x86_64.rpm             315 kB/s |  49 kB     00:00    </span><br><span class="line">(4/5): vim-enhanced-8.0.1763-15.el8.x86_64.rpm  543 kB/s | 1.4 MB     00:02    </span><br><span class="line">(5/5): vim-common-8.0.1763-15.el8.x86_64.rpm    387 kB/s | 6.3 MB     00:16    </span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">Total                                           448 kB/s | 7.8 MB     00:17     </span><br><span class="line">warning: /var/cache/dnf/AppStream-02e86d1c976ab532/packages/gpm-libs-1.20.7-15.el8.x86_64.rpm: Header V3 RSA/SHA256 Signature, key ID 8483c65d: NOKEY</span><br><span class="line">CentOS-8 - AppStream                            1.6 MB/s | 1.6 kB     00:00    </span><br><span class="line">Importing GPG key 0x8483C65D:</span><br><span class="line"> Userid     : &quot;CentOS (CentOS Official Signing Key) &lt;security@centos.org&gt;&quot;</span><br><span class="line"> Fingerprint: 99DB 70FA E1D7 CE22 7FB6 4882 05B5 55B3 8483 C65D</span><br><span class="line"> From       : /etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial</span><br><span class="line">Key imported successfully</span><br><span class="line">Running transaction check</span><br><span class="line">Transaction check succeeded.</span><br><span class="line">Running transaction test</span><br><span class="line">Transaction test succeeded.</span><br><span class="line">Running transaction</span><br><span class="line">  Preparing        :                                                        1/1 </span><br><span class="line">  Installing       : which-2.21-12.el8.x86_64                               1/5 </span><br><span class="line">  Installing       : vim-filesystem-2:8.0.1763-15.el8.noarch                2/5 </span><br><span class="line">  Installing       : vim-common-2:8.0.1763-15.el8.x86_64                    3/5 </span><br><span class="line">  Installing       : gpm-libs-1.20.7-15.el8.x86_64                          4/5 </span><br><span class="line">  Running scriptlet: gpm-libs-1.20.7-15.el8.x86_64                          4/5 </span><br><span class="line">  Installing       : vim-enhanced-2:8.0.1763-15.el8.x86_64                  5/5 </span><br><span class="line">  Running scriptlet: vim-enhanced-2:8.0.1763-15.el8.x86_64                  5/5 </span><br><span class="line">  Running scriptlet: vim-common-2:8.0.1763-15.el8.x86_64                    5/5 </span><br><span class="line">  Verifying        : gpm-libs-1.20.7-15.el8.x86_64                          1/5 </span><br><span class="line">  Verifying        : vim-common-2:8.0.1763-15.el8.x86_64                    2/5 </span><br><span class="line">  Verifying        : vim-enhanced-2:8.0.1763-15.el8.x86_64                  3/5 </span><br><span class="line">  Verifying        : vim-filesystem-2:8.0.1763-15.el8.noarch                4/5 </span><br><span class="line">  Verifying        : which-2.21-12.el8.x86_64                               5/5 </span><br><span class="line"></span><br><span class="line">Installed:</span><br><span class="line">  gpm-libs-1.20.7-15.el8.x86_64         vim-common-2:8.0.1763-15.el8.x86_64    </span><br><span class="line">  vim-enhanced-2:8.0.1763-15.el8.x86_64 vim-filesystem-2:8.0.1763-15.el8.noarch</span><br><span class="line">  which-2.21-12.el8.x86_64             </span><br><span class="line"></span><br><span class="line">Complete!</span><br><span class="line">Removing intermediate container 9eb786294022</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 491907dac3e2</span></span><br><span class="line">Step 6/10 : RUN yum -y install net-tools</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 3a13d71952e5</span></span><br><span class="line">Last metadata expiration check: 0:00:24 ago on Mon Dec  7 11:45:38 2020.</span><br><span class="line">Dependencies resolved.</span><br><span class="line">================================================================================</span><br><span class="line"> Package         Architecture Version                        Repository    Size</span><br><span class="line">================================================================================</span><br><span class="line">Installing:</span><br><span class="line"> net-tools       x86_64       2.0-0.52.20160912git.el8       BaseOS       322 k</span><br><span class="line"></span><br><span class="line">Transaction Summary</span><br><span class="line">================================================================================</span><br><span class="line">Install  1 Package</span><br><span class="line"></span><br><span class="line">Total download size: 322 k</span><br><span class="line">Installed size: 942 k</span><br><span class="line">Downloading Packages:</span><br><span class="line">net-tools-2.0-0.52.20160912git.el8.x86_64.rpm   1.0 MB/s | 322 kB     00:00    </span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">Total                                           141 kB/s | 322 kB     00:02     </span><br><span class="line">Running transaction check</span><br><span class="line">Transaction check succeeded.</span><br><span class="line">Running transaction test</span><br><span class="line">Transaction test succeeded.</span><br><span class="line">Running transaction</span><br><span class="line">  Preparing        :                                                        1/1 </span><br><span class="line">  Installing       : net-tools-2.0-0.52.20160912git.el8.x86_64              1/1 </span><br><span class="line">  Running scriptlet: net-tools-2.0-0.52.20160912git.el8.x86_64              1/1 </span><br><span class="line">  Verifying        : net-tools-2.0-0.52.20160912git.el8.x86_64              1/1 </span><br><span class="line"></span><br><span class="line">Installed:</span><br><span class="line">  net-tools-2.0-0.52.20160912git.el8.x86_64                                     </span><br><span class="line"></span><br><span class="line">Complete!</span><br><span class="line">Removing intermediate container 3a13d71952e5</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 0d095f331d4a</span></span><br><span class="line">Step 7/10 : EXPOSE 80</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 66d8aceea20c</span></span><br><span class="line">Removing intermediate container 66d8aceea20c</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> a86402c5f9b7</span></span><br><span class="line">Step 8/10 : CMD echo $MYPATH</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> b6af3ea8ff6a</span></span><br><span class="line">Removing intermediate container b6af3ea8ff6a</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 17533352607f</span></span><br><span class="line">Step 9/10 : CMD echo &quot;---end---&quot;</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> f015d24c9277</span></span><br><span class="line">Removing intermediate container f015d24c9277</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> cf7d78851a04</span></span><br><span class="line">Step 10/10 : CMD /bin/bash</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> d0f70eaa39ec</span></span><br><span class="line">Removing intermediate container d0f70eaa39ec</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> d59930f07e43</span></span><br><span class="line">Successfully built d59930f07e43</span><br><span class="line">Successfully tagged mycentos:1.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、测试运行，官方的centos镜像中是没有网络命令和VIM命令的，而自己构建的centos中已经有</span></span><br><span class="line">[root@parak dockerfile]# docker run -it --name=mycen mycentos:1.0 </span><br><span class="line">[root@43b0b7eb76d8 local]# pwd</span><br><span class="line">/usr/local</span><br><span class="line">[root@43b0b7eb76d8 local]# vim test</span><br><span class="line">[root@43b0b7eb76d8 local]# cat test </span><br><span class="line">Khighness</span><br><span class="line">[root@43b0b7eb76d8 local]# ifconfig</span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.4  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class="line">        ether 02:42:ac:11:00:04  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 8  bytes 656 (656.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0    </span><br><span class="line">[root@43b0b7eb76d8 local]# exit</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4、查看镜像的变更历史</span></span><br><span class="line">[root@parak dockerfile]# docker history mycentos:1.0 </span><br><span class="line">IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT</span><br><span class="line">d59930f07e43        23 minutes ago      /bin/sh -c #(nop)  CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;/bin…   0B          </span><br><span class="line">cf7d78851a04        23 minutes ago      /bin/sh -c #(nop)  CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;echo…   0B               </span><br><span class="line">17533352607f        23 minutes ago      /bin/sh -c #(nop)  CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;echo…   0B                  </span><br><span class="line">a86402c5f9b7        23 minutes ago      /bin/sh -c #(nop)  EXPOSE 80                    0B                  </span><br><span class="line">0d095f331d4a        23 minutes ago      /bin/sh -c yum -y install net-tools             23.2MB              </span><br><span class="line">491907dac3e2        23 minutes ago      /bin/sh -c yum -y install vim                   57.7MB              </span><br><span class="line">fdbae7da4ca4        24 minutes ago      /bin/sh -c #(nop) WORKDIR /usr/local            0B                  </span><br><span class="line">a5710fdc760e        24 minutes ago      /bin/sh -c #(nop)  ENV MYPATH=/usr/local        0B                  </span><br><span class="line">6c9b636504d2        24 minutes ago      /bin/sh -c #(nop)  MAINTAINER khighness&lt;1823…   0B                  </span><br><span class="line">0d120b6ccaa8        3 months ago        /bin/sh -c #(nop)  CMD [&quot;/bin/bash&quot;]            0B                  </span><br><span class="line">&lt;missing&gt;           3 months ago        /bin/sh -c #(nop)  LABEL org.label-schema.sc…   0B                  </span><br><span class="line">&lt;missing&gt;           3 months ago        /bin/sh -c #(nop) ADD file:538afc0c5c964ce0d…   215MB         </span><br></pre></td></tr></table></figure>



<blockquote>
<p>CMD和ENTRYPOINT的区别</p>
</blockquote>
<p><strong>测试CMD</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编写测试CMD的dockerfile</span></span><br><span class="line">[root@parak dockerfile]# vim dockerfile-cmd-test1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 内容就是一个CMD命令</span></span><br><span class="line">[root@parak dockerfile]# cat dockerfile-cmd-test1 </span><br><span class="line">FROM centos</span><br><span class="line">CMD [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建镜像</span></span><br><span class="line">[root@parak dockerfile]# docker build -f dockerfile-cmd-test1 -t cmdtest .</span><br><span class="line">Sending build context to Docker daemon  3.072kB</span><br><span class="line">Step 1/2 : FROM centos</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 0d120b6ccaa8</span></span><br><span class="line">Step 2/2 : CMD [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> e4df49ad7ca4</span></span><br><span class="line">Removing intermediate container e4df49ad7ca4</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 4be395747805</span></span><br><span class="line">Successfully built 4be395747805</span><br><span class="line">Successfully tagged cmdtest:latest</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行镜像就相当于运行CMD命令：ls -a</span></span><br><span class="line">[root@parak dockerfile]# docker run cmdtest</span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">lost+found</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br><span class="line"><span class="meta">#</span><span class="bash"> 追加命令-l，即ls -al</span></span><br><span class="line">[root@parak dockerfile]# docker run cmdtest -l</span><br><span class="line">docker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused &quot;exec: \&quot;-l\&quot;: executable file not found in $PATH&quot;: unknown.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>测试ENTRYPOINT</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编写测试ENTRYPOINT的dockerfile</span></span><br><span class="line">[root@parak dockerfile]# vim dockerfile-entrypoint-test1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 内容就是一个ENTRYPOINT命令</span></span><br><span class="line">[root@parak dockerfile]# cat dockerfile-entrypoint-test1 </span><br><span class="line">FROM centos</span><br><span class="line">ENTRYPOINT [&quot;ls&quot;, &quot;-a&quot;]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建镜像</span></span><br><span class="line">[root@parak dockerfile]# docker build -f dockerfile-entrypoint-test1 -t entrypointtest .</span><br><span class="line">Sending build context to Docker daemon  4.096kB</span><br><span class="line">Step 1/2 : FROM centos</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 0d120b6ccaa8</span></span><br><span class="line">Step 2/2 : ENTRYPOINT [&quot;ls&quot;, &quot;-a&quot;]</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 0aa9b4c97293</span></span><br><span class="line">Removing intermediate container 0aa9b4c97293</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 472d86e826d8</span></span><br><span class="line">Successfully built 472d86e826d8</span><br><span class="line">Successfully tagged entrypointtest:latest</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行镜像</span></span><br><span class="line">[root@parak dockerfile]# docker run entrypointtest</span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">lost+found</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br><span class="line"><span class="meta">#</span><span class="bash"> 追击命令-l，即ls -al</span></span><br><span class="line">[root@parak dockerfile]# docker run entrypointtest -l</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x.   1 root root   6 Dec  7 12:27 .</span><br><span class="line">drwxr-xr-x.   1 root root   6 Dec  7 12:27 ..</span><br><span class="line">-rwxr-xr-x.   1 root root   0 Dec  7 12:27 .dockerenv</span><br><span class="line">lrwxrwxrwx.   1 root root   7 May 11  2019 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x.   5 root root 340 Dec  7 12:27 dev</span><br><span class="line">drwxr-xr-x.   1 root root  66 Dec  7 12:27 etc</span><br><span class="line">drwxr-xr-x.   2 root root   6 May 11  2019 home</span><br><span class="line">lrwxrwxrwx.   1 root root   7 May 11  2019 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx.   1 root root   9 May 11  2019 lib64 -&gt; usr/lib64</span><br><span class="line">drwx------.   2 root root   6 Aug  9 21:40 lost+found</span><br><span class="line">drwxr-xr-x.   2 root root   6 May 11  2019 media</span><br><span class="line">drwxr-xr-x.   2 root root   6 May 11  2019 mnt</span><br><span class="line">drwxr-xr-x.   2 root root   6 May 11  2019 opt</span><br><span class="line">dr-xr-xr-x. 259 root root   0 Dec  7 12:27 proc</span><br><span class="line">dr-xr-x---.   2 root root 162 Aug  9 21:40 root</span><br><span class="line">drwxr-xr-x.  11 root root 163 Aug  9 21:40 run</span><br><span class="line">lrwxrwxrwx.   1 root root   8 May 11  2019 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x.   2 root root   6 May 11  2019 srv</span><br><span class="line">dr-xr-xr-x.  13 root root   0 Dec  6 08:24 sys</span><br><span class="line">drwxrwxrwt.   7 root root 145 Aug  9 21:40 tmp</span><br><span class="line">drwxr-xr-x.  12 root root 144 Aug  9 21:40 usr</span><br><span class="line">drwxr-xr-x.  20 root root 262 Aug  9 21:40 var</span><br></pre></td></tr></table></figure>

<br>

<h2 id="🔍镜像"><a href="#🔍镜像" class="headerlink" title="🔍镜像"></a>🔍镜像</h2><blockquote>
<p>概念</p>
</blockquote>
<p>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p>
<blockquote>
<p>UnionFS(联合文件系统)</p>
</blockquote>
<p>UnionFS: 联合文件系统是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(Unite several directions into a single virtual file system)。Union文件系统是Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像(没有父镜像)，可以制作各种具体的应用镜像。</p>
<p>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p>
<blockquote>
<p>Docker镜像加载原理</p>
</blockquote>
<p>Docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。</p>
<p>bootfs(boot file system)主要包含bootloader和kernel，bootloader主要是引导加载kernel，Linux刚启动时会在家bootfs文件系统，在Docker镜像的最底层是bootfs。这一层与我们典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存和使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</p>
<p>rootfs(root file system)，在bootfs之后。包含的就是典型Linux系统/dev，/proc，/bin，/etc等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu、CentOS等等。</p>
<blockquote>
<p>commit镜像</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker commit -m=<span class="string">&quot;&lt;messahe&gt;&quot;</span> -a=<span class="string">&quot;&lt;author&gt;&quot;</span> &lt;Container ID/NAME&gt; &lt;Target&gt;:&lt;Tag&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如，改装tomcat:9.0的镜像打包成自己的镜像k-tom:1.0</span></span><br><span class="line">[root@parak khighness]# docker commit -a=&quot;Khighness&quot; -m=&quot;Add web application&quot; tom1 k-tom:1.0</span><br><span class="line">sha256:fa4617c8771c81b890dc2a87c7be1d2b851c6ba92b053d0d1d8730b2006550c5</span><br><span class="line">[root@parak khighness]# docker images</span><br><span class="line">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">k-tom                 1.0                 fa4617c8771c        26 seconds ago      654MB</span><br><span class="line">nginx                 latest              bc9a0695f571        11 days ago         133MB</span><br><span class="line">tomcat                9.0                 e0bd8b34b4ea        2 weeks ago         649MB</span><br><span class="line">redis                 latest              74d107221092        2 weeks ago         104MB</span><br><span class="line">portainer/portainer   latest              62771b0b9b09        4 months ago        79.1MB</span><br><span class="line">elasticsearch         7.6.2               f29a1ee41030        8 months ago        791MB</span><br><span class="line">hello-world           latest              bf756fb1ae65        11 months ago       13.3kB</span><br></pre></td></tr></table></figure>

<br>

<h2 id="🌀容器数据卷"><a href="#🌀容器数据卷" class="headerlink" title="🌀容器数据卷"></a>🌀容器数据卷</h2><blockquote>
<p>概念</p>
</blockquote>
<p>目录挂载，将容器内的目录挂载在CentOS上</p>
<ul>
<li>Docker容器产生的数据同步到宿主机</li>
<li>数据卷可以在容器之间共享或重用数据</li>
</ul>
<blockquote>
<p>命令行挂载</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -it -v -p &lt;主机目录&gt;:&lt;容器目录&gt; </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如，将docker的centos容器目录/home/<span class="built_in">test</span>与宿主centos的/home/<span class="built_in">test</span>挂载起来</span></span><br><span class="line">[root@parak khighness]# docker run -it --name=cen -v /home/test:/home/test centos  /bin/bash</span><br><span class="line">Unable to find image &#x27;centos:latest&#x27; locally</span><br><span class="line">latest: Pulling from library/centos</span><br><span class="line">3c72a8ed6814: Pull complete </span><br><span class="line">Digest: sha256:76d24f3ba3317fa945743bb3746fbaf3a0b752f10b10376960de01da70685fbd</span><br><span class="line">Status: Downloaded newer image for centos:latest</span><br><span class="line">[root@4410a5c86528 /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@4410a5c86528 /]# cd home/</span><br><span class="line">[root@4410a5c86528 home]# ls</span><br><span class="line">test</span><br><span class="line">[khighness@parak ~]$ cd /home/</span><br><span class="line">[khighness@parak home]$ ls</span><br><span class="line">khighness  test</span><br><span class="line">[root@parak home]# docker inspect cen</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如下是挂载信息</span></span><br><span class="line">        &quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;bind&quot;,              # 类型：绑定</span><br><span class="line">                &quot;Source&quot;: &quot;/home/test&quot;,      # 容器目录</span><br><span class="line">                &quot;Destination&quot;: &quot;/home/test&quot;, # 主机目录</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;rprivate&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在容器的挂载目录下新建K1.java，在宿主机的挂载目录中可以直接看到</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/f5f9fa9b/image-20201206183841366.png" class="" title="image-20201206183841366">



<blockquote>
<p>安装MySQL</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载8.0.20版本的mysql镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker pull mysql:8.0.20</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动mysql服务</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -d 后台运行</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -v 挂载配置和数据</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -e MYSQL_ROOT)PASSWORD 设置密码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run --name ksql -d -p 3306:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=KAG1823 mysql:8.0.20</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决windows的navicat无法连接的问题</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入mysql客户端</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it ksql  bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 登录mysql</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysql -u root -pKAG1823</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重置密码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;KAG1823&#x27;</span>;</span></span><br></pre></td></tr></table></figure>

<br>

<h2 id="🌐Docker网络"><a href="#🌐Docker网络" class="headerlink" title="🌐Docker网络"></a>🌐Docker网络</h2><blockquote>
<p>实现原理</p>
</blockquote>
<p>Docker使用Linux桥接，在宿主机虚拟一个Docker容器网桥(Docker0)，Docker启动一个容器时会根据Docker网桥的网段分配给容器一个IP地址，称为Container-IP，同时Docker网桥是每个容器的默认网关。因为在同一宿主机内的容器都接入同一网桥。这样容器之间就能够通过容器的Contain-IP直接通信。</p>
<p>Docker网桥是宿主机虚拟出来的，并不是真实存在的网络设备，外部设备是无法寻址到的，这也意味着外部设备无法通过直接Container-IP访问到容器。如果容器希望外部访问到，可以通过映射容器端口到宿主主机（端口映射），即docker run创建容器时候通过-p或者-P参数来启动，访问容器的时候就通过[宿主机IP]:[容器端口]访问容器。</p>
<blockquote>
<p>网络模式</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">模式</th>
<th align="center">配置</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Bridge模式</td>
<td align="center">-net=bridge</td>
<td align="center">默认模式</td>
</tr>
<tr>
<td align="center">Host模式</td>
<td align="center">-net=host</td>
<td align="center">容器和宿主机共享Network NameSpace</td>
</tr>
<tr>
<td align="center">Container模式</td>
<td align="center">-net=container : NAME OR ID</td>
<td align="center">容器和另外一个容器共享Network NameSpace</td>
</tr>
<tr>
<td align="center">None模式</td>
<td align="center">-net=none</td>
<td align="center">容器有独立的Network NameSpace，但并没有对其进行任何网络设置，如分配veth pair 和网桥连接，配置IP等</td>
</tr>
</tbody></table>
<br>

<h3 id="1️⃣host模式"><a href="#1️⃣host模式" class="headerlink" title="1️⃣host模式"></a>1️⃣host模式</h3><p>如果启动容器的时候使用host模式，那么这个容器将不会获得一个独立的Network NameSpace，而是和宿主机共用一个Network NameSpace。容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口。但是，容器的其他方面，如文件系统、进程列表等还是和宿主机隔离的。</p>
<p>使用host模式的容器可以直接使用宿主机的IP地址与外界通信，容器内部的服务端口也可以使用宿主机的端口，不需要进行NAT，host最大的优势就是网络性能比较好，但是docker host上已经使用的端口就不能再用了，网络的隔离性不好。</p>
<br>

<h3 id="2️⃣container模式"><a href="#2️⃣container模式" class="headerlink" title="2️⃣container模式"></a>2️⃣container模式</h3><p>这个模式指定新创建的容器和已经存在的一个容器共享一个 Network NameSpace，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过 lo 网卡设备通信。</p>
<br>

<h3 id="3️⃣none模式"><a href="#3️⃣none模式" class="headerlink" title="3️⃣none模式"></a>3️⃣none模式</h3><p>使用none模式，Docker容器拥有自己的Network NameSpace，但是，并不为Docker容器进行任何网络配置。也就是说，这个Docker容器没有网卡、IP、路由等信息。需要我们自己为Docker容器添加网卡、配置IP等。</p>
<p>这种网络模式下容器只有lo回环网络，没有其他网卡。none模式可以在容器创建时通过–network=none来指定。这种类型的网络没有办法联网，封闭的网络能很好的保证容器的安全性。</p>
<br>

<h3 id="4️⃣bridge模式"><a href="#4️⃣bridge模式" class="headerlink" title="4️⃣bridge模式"></a>4️⃣bridge模式</h3><p>当Docker进程启动时，会在主机上创建一个名为docker0的虚拟网桥，此主机上启动的Docker容器会连接到这个虚拟网桥上。虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。</p>
<p>从docker0子网中分配一个IP给容器使用，并设置docker0的IP地址为容器的默认网关。在主机上创建一对虚拟网卡veth pair设备，Docker将veth pair设备的一端放在新创建的容器中，并命名为eth0（容器的网卡），另一端放在主机中，以vethxxx这样类似的名字命名，并将这个网络设备加入到docker0网桥中。可以通过brctl show命令查看。</p>
<p>bridge模式是docker的默认网络模式，不写–net参数，就是bridge模式。使用docker run -p时，docker实际是在iptables做了DNAT规则，实现端口转发功能。可以使用iptables -t nat -vnL查看。</p>
<blockquote>
<p>–link探究</p>
</blockquote>
<p>官方已经不推荐使用，我们可以了解一下。</p>
<p>2个容器之间互相访问通信：<code>docker run &lt;container1-id/name&gt; --link &lt;container2-id/name&gt; &lt;image&gt;</code></p>
<p>使用这个命令启动容器2的时候，容器便可以ping通容器1，但是反向ping不通。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建容器tom1</span></span><br><span class="line">[root@parak khighness]# docker run -d -p 3356:8080 --name tom1 tomcat:9.0 </span><br><span class="line">dd615d6d2ccb9467aad8ba008ece995588680d849b9f61945b10de5c3475f671</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用--link创建容器2</span></span><br><span class="line">[root@parak khighness]# docker run -d -p 3357:8081 --name tom2 --link tom1  tomcat:9.0 </span><br><span class="line">b2c17969a2cb4407bb1a61a53703a38998a11db01ce516feb70e397b42af6ad3</span><br><span class="line"><span class="meta">#</span><span class="bash"> tom1不能ping通tom2</span></span><br><span class="line">[root@parak khighness]# docker exec -it tom1 ping tom2</span><br><span class="line">ping: tom2: Name or service not known</span><br><span class="line"><span class="meta">#</span><span class="bash"> tom2可以ping通tom1</span></span><br><span class="line">[root@parak khighness]# docker exec -it tom2 ping tom1</span><br><span class="line">PING tom1 (172.17.0.4) 56(84) bytes of data.</span><br><span class="line">64 bytes from tom1 (172.17.0.4): icmp_seq=1 ttl=64 time=0.161 ms</span><br><span class="line">64 bytes from tom1 (172.17.0.4): icmp_seq=2 ttl=64 time=0.108 ms</span><br><span class="line">64 bytes from tom1 (172.17.0.4): icmp_seq=3 ttl=64 time=0.122 ms</span><br><span class="line">^C</span><br><span class="line">--- tom1 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 4ms</span><br><span class="line">rtt min/avg/max/mdev = 0.108/0.130/0.161/0.024 ms</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看tom2内部的hosts文件</span></span><br><span class="line">[root@parak khighness]# docker exec -it tom2 cat /etc/hosts</span><br><span class="line">127.0.0.1	localhost</span><br><span class="line">::1	localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0	ip6-localnet</span><br><span class="line">ff00::0	ip6-mcastprefix</span><br><span class="line">ff02::1	ip6-allnodes</span><br><span class="line">ff02::2	ip6-allrouters</span><br><span class="line">172.17.0.4	tom1 dd615d6d2ccb # ==&gt; 根源：本质就是tom2就是在本地配置了tom1的域名IP解析。</span><br><span class="line">172.17.0.5	b2c17969a2cb</span><br></pre></td></tr></table></figure>



<blockquote>
<p>自定义网络</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建网络</span></span><br><span class="line">[root@parak khighness]# docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span><br><span class="line">abaebdc493149a140ee77965274885adea3882bf117c4f8e61e4034730c3b890</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看网络</span></span><br><span class="line">[root@parak khighness]# docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">4399361ba4a9        bridge              bridge              local</span><br><span class="line">65f0ec2bfb42        host                host                local</span><br><span class="line">abaebdc49314        mynet               bridge              local</span><br><span class="line">feab1dfce431        none                null                local</span><br><span class="line"><span class="meta">#</span><span class="bash"> 详细信息</span></span><br><span class="line">[root@parak khighness]# docker network inspect mynet </span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;mynet&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;abaebdc493149a140ee77965274885adea3882bf117c4f8e61e4034730c3b890&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2020-12-10T16:12:08.563828418+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;192.168.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;192.168.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在mynet下启动tomcat1</span></span><br><span class="line">[root@parak khighness]# docker run -d -it -p 8080:3355 --net mynet --name mynet-tom1 tomcat:9.0 </span><br><span class="line">4d799757f01f560af7fd44d610b7fdabd1e0f66ef528bf1259f09242bddbb636</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在mynet下启动tomcat2</span></span><br><span class="line">[root@parak khighness]# docker run -d -it -p 8081:3356 --net mynet --name mynet-tom2 tomcat:9.0 </span><br><span class="line">15c045f96d5b7b2ee2e470cb69e5b1f86511929f7ed05ed8f20db26ef4b975af</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用mynet-tom2 ping mynet-tom1</span></span><br><span class="line">[root@parak khighness]# docker exec -it mynet-tom2 ping mynet-tom1</span><br><span class="line">PING mynet-tom1 (192.168.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from mynet-tom1.mynet (192.168.0.2): icmp_seq=1 ttl=64 time=0.068 ms</span><br><span class="line">64 bytes from mynet-tom1.mynet (192.168.0.2): icmp_seq=2 ttl=64 time=0.042 ms</span><br><span class="line">64 bytes from mynet-tom1.mynet (192.168.0.2): icmp_seq=3 ttl=64 time=0.055 ms</span><br><span class="line">--- mynet-tom1 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 4ms</span><br><span class="line">rtt min/avg/max/mdev = 0.042/0.055/0.068/0.010 ms</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用mynet-tom1 ping mynet-tom2</span></span><br><span class="line">[root@parak khighness]# docker exec -it mynet-tom1 ping mynet-tom2</span><br><span class="line">PING mynet-tom2 (192.168.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from mynet-tom2.mynet (192.168.0.3): icmp_seq=1 ttl=64 time=0.036 ms</span><br><span class="line">64 bytes from mynet-tom2.mynet (192.168.0.3): icmp_seq=2 ttl=64 time=0.048 ms</span><br><span class="line">64 bytes from mynet-tom2.mynet (192.168.0.3): icmp_seq=3 ttl=64 time=0.058 ms</span><br><span class="line">--- mynet-tom2 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 2ms</span><br><span class="line">rtt min/avg/max/mdev = 0.036/0.047/0.058/0.010 ms</span><br></pre></td></tr></table></figure>

<p>自定义网络自动维护好容器的网络关系！</p>
<blockquote>
<p>网络连通</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在Docker0网络启动tomcat</span></span><br><span class="line">[root@parak khighness]# docker run -d -it -p 8082:3357 --name tom1 tomcat:9.0 </span><br><span class="line">0344f04baab2eaeaac0118dac7a93d8b2d77946636c76ed3bde804cbeda836be</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试tom1 ping mynet—tom1</span></span><br><span class="line">[root@parak khighness]# docker exec tom1 ping mynet-tom1</span><br><span class="line">ping: mynet-tom1: Name or service not known</span><br><span class="line"><span class="meta">#</span><span class="bash"> 连通mynet - tom1</span></span><br><span class="line">[root@parak khighness]# docker network connect mynet tom1 </span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看mynet1的详细信息</span></span><br><span class="line">[root@parak khighness]# docker inspect mynet</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;mynet&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;abaebdc493149a140ee77965274885adea3882bf117c4f8e61e4034730c3b890&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2020-12-10T16:12:08.563828418+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;192.168.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;192.168.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">        	# 发现mynet将tom1放到了mynet网络下，即一个容器，两个IP</span><br><span class="line">            &quot;0344f04baab2eaeaac0118dac7a93d8b2d77946636c76ed3bde804cbeda836be&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;tom1&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;8911ad05a9b0d7d0effbf50c82659f36b82d21e18f992359b09494073dddd969&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:04&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;192.168.0.4/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;15c045f96d5b7b2ee2e470cb69e5b1f86511929f7ed05ed8f20db26ef4b975af&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;mynet-tom2&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;907f16284e90be0d880a999b29210d1cd82adb2c79b4179eeb1d70d75130362a&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:03&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;192.168.0.3/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;4d799757f01f560af7fd44d610b7fdabd1e0f66ef528bf1259f09242bddbb636&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;mynet-tom1&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;6529ef4fc05dffe65fe875fdf15f2f4a61665c4d969767db94dd828baf88b323&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;192.168.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 再次测试tom1 ping mynet—tom1</span></span><br><span class="line">[root@parak khighness]# docker exec -it tom1 ping mynet-tom1</span><br><span class="line">PING mynet-tom1 (192.168.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from mynet-tom1.mynet (192.168.0.2): icmp_seq=1 ttl=64 time=0.097 ms</span><br><span class="line">64 bytes from mynet-tom1.mynet (192.168.0.2): icmp_seq=2 ttl=64 time=0.052 ms</span><br><span class="line">64 bytes from mynet-tom1.mynet (192.168.0.2): icmp_seq=3 ttl=64 time=0.053 ms</span><br><span class="line">--- mynet-tom1 ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 3ms</span><br><span class="line">rtt min/avg/max/mdev = 0.052/0.067/0.097/0.022 ms</span><br></pre></td></tr></table></figure>

<br>

<h2 id="💠Redis集群部署"><a href="#💠Redis集群部署" class="headerlink" title="💠Redis集群部署"></a>💠Redis集群部署</h2><blockquote>
<p>shell脚本</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建网卡</span></span><br><span class="line">docker network create redis --subnet 172.38.0.0/16</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过脚本创建六个redis配置</span></span><br><span class="line">for port in $(seq 1 6); \</span><br><span class="line">do \</span><br><span class="line">mkdir -p /mydata/redis/node-$&#123;port&#125;/conf</span><br><span class="line">touch /mydata/redis/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="line">cat &lt;&lt; EOF &gt;&gt;/mydata/redis/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="line">port 6379</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">cluster-announce-ip 172.38.0.1$&#123;port&#125;</span><br><span class="line">cluster-announce-port 6379</span><br><span class="line">cluster-announce-bus-port 16379</span><br><span class="line">appendonly yes</span><br><span class="line">EOF</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行redis</span></span><br><span class="line">for port in $(seq 1 6); \</span><br><span class="line">do</span><br><span class="line">docker run -p 637$&#123;port&#125;:6379 -p 1637$&#123;port&#125;:16379 --name redis-$&#123;port&#125; \</span><br><span class="line">-v /mydata/redis/node-$&#123;port&#125;/data:/data \</span><br><span class="line">-v /mydata/redis/node-$&#123;port&#125;/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.1$&#123;port&#125; redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入redis-1</span></span><br><span class="line">docker exec -it redis-1 /bin/sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 搭建集群</span></span><br><span class="line">redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止集群</span></span><br><span class="line">for port in $(seq 1 6); \</span><br><span class="line">do</span><br><span class="line">docker stop redis-$&#123;port&#125; </span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动集群</span></span><br><span class="line">for port in $(seq 1 6); \</span><br><span class="line">do </span><br><span class="line">docker start redis-$&#123;port&#125; </span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<br>

<h2 id="💨SpringBoot测试"><a href="#💨SpringBoot测试" class="headerlink" title="💨SpringBoot测试"></a>💨SpringBoot测试</h2><blockquote>
<p>步骤</p>
</blockquote>
<ul>
<li>构建SpringBoot项目</li>
<li>打包web应用</li>
<li>编写dockerfile</li>
<li>构建镜像</li>
<li>发布运行</li>
</ul>
<blockquote>
<p>编写Controller</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(<span class="meta">@PathVariable(&quot;name&quot;)</span> String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot;\n\n&quot;</span> + <span class="string">&quot; -from KHighness&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过maven的package打包</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[INFO] Scanning for projects...</span><br><span class="line">[INFO] </span><br><span class="line">[INFO] --------------------------&lt; top.parak:hello &gt;---------------------------</span><br><span class="line">[INFO] Building hello 1.0-SNAPSHOT</span><br><span class="line">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class="line">[INFO] --- maven-resources-plugin:3.1.0:resources (default-resources) @ hello ---</span><br><span class="line">[INFO] Using &#x27;UTF-8&#x27; encoding to copy filtered resources.</span><br><span class="line">[INFO] Copying 0 resource</span><br><span class="line">[INFO] Copying 0 resource</span><br><span class="line">[INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ hello ---</span><br><span class="line">[INFO] Changes detected - recompiling the module!</span><br><span class="line">[INFO] Compiling 2 source files to C:\Users\18236\Desktop\Recent\hello\target\classes</span><br><span class="line">[INFO] --- maven-resources-plugin:3.1.0:testResources (default-testResources) @ hello ---</span><br><span class="line">[INFO] Using &#x27;UTF-8&#x27; encoding to copy filtered resources.</span><br><span class="line">[INFO] skip non existing resourceDirectory C:\Users\18236\Desktop\Recent\hello\src\test\resources</span><br><span class="line">[INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ hello ---</span><br><span class="line">[INFO] No sources to compile</span><br><span class="line">[INFO] --- maven-surefire-plugin:2.22.2:test (default-test) @ hello ---</span><br><span class="line">[INFO] No tests to run.</span><br><span class="line">[INFO] --- maven-jar-plugin:3.1.2:jar (default-jar) @ hello ---</span><br><span class="line">[INFO] Building jar: C:\Users\18236\Desktop\Recent\hello\target\hello-1.0-SNAPSHOT.jar</span><br><span class="line">[INFO] --- spring-boot-maven-plugin:2.2.5.RELEASE:repackage (repackage) @ hello ---</span><br><span class="line">[INFO] Replacing main artifact with repackaged archive</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  5.534 s</span><br><span class="line">[INFO] Finished at: 2020-12-10T17:54:11+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>

<blockquote>
<p>编写Dockerfile</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM java:8</span><br><span class="line"></span><br><span class="line">COPY *.jar /app.jar</span><br><span class="line"></span><br><span class="line">CMD [&quot;--server.port=8080&quot;]</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;/app.jar&quot;]</span><br></pre></td></tr></table></figure>

<p>通过Xftp将构建好的jar包和DockerFile发送到虚拟机</p>
<blockquote>
<p>构建镜像</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@parak hello]# docker build -t hello .</span><br><span class="line">Sending build context to Docker daemon   17.6MB</span><br><span class="line">Step 1/5 : FROM java:8</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> d23bdf5b1b1b</span></span><br><span class="line">Step 2/5 : COPY *.jar /app.jar</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 34774df7a107</span></span><br><span class="line">Step 3/5 : CMD [&quot;--server.port=8080&quot;]</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> [Warning] IPv4 forwarding is disabled. Networking will not work.</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 11d95474e047</span></span><br><span class="line">Removing intermediate container 11d95474e047</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> e8b6fa21a3a0</span></span><br><span class="line">Step 4/5 : EXPOSE 8080</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> [Warning] IPv4 forwarding is disabled. Networking will not work.</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 896cc7d50875</span></span><br><span class="line">Removing intermediate container 896cc7d50875</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> b139242b232d</span></span><br><span class="line">Step 5/5 : ENTRYPOINT [&quot;java&quot;, &quot;-jar&quot;, &quot;/app.jar&quot;]</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> [Warning] IPv4 forwarding is disabled. Networking will not work.</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 562f3bb605a0</span></span><br><span class="line">Removing intermediate container 562f3bb605a0</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 1d28463205d5</span></span><br><span class="line">Successfully built 1d28463205d5</span><br><span class="line">Successfully tagged hello:latest</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行镜像</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@parak hello]# docker run -d -it -p 8001:8080 hello</span><br><span class="line">7e19b364789de18c736c51e5c84d611e7474d3a733f188220dfd7cc011e55729</span><br><span class="line">[root@parak hello]# curl http://192.168.117.155:8001/hello/KKK</span><br><span class="line">Hello, KKK</span><br><span class="line"></span><br><span class="line"> -from KHighness</span><br></pre></td></tr></table></figure>

<br>

<h2 id="⭕相关问题"><a href="#⭕相关问题" class="headerlink" title="⭕相关问题"></a>⭕相关问题</h2><blockquote>
<p>解决问题1: WARNING: IPv4 forwarding is disabled. Networking will not work.</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;net.ipv4.ip_forward=1&quot;</span> &gt;&gt;/usr/lib/sysctl.d/00-system.conf</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl restart network &amp;&amp; systemctl restart docker</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>解决问题2: 使用阿里云服务器运行一个容器，外部IP不能访问</p>
</blockquote>
<p>需要在阿里云服务器配置防火墙相关端口对外开放。</p>
<p>比如跑一个开放端口为3333的springboot应用需要在阿里云服务器控制台的防火墙添加规则:</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/f5f9fa9b/image-20201211233834182.png" class="" title="image-20201211233834182">



]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>负距离</title>
    <url>/posts/33422a09/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/33422a09/bg.jpg" class="" title="bg">



<p>想是因为久了所以记不起了，想是因为空气湿了不是眼眶红了。</p>
<p>我看见凋零的枫，天空的颜色比油彩更凝重，大块白色的浮云掠过，那栋灰色的建筑闪烁香槟色的光芒，我从未怀疑过自己在梦里。</p>
<a id="more"></a>



<p>两年以来，自己是否成长，又是否改变？当初懵懂的选择，中间努力的迷茫，而今这已是一条不归路。</p>
<p>每个人的身体和意志，总有被环境的牢笼禁锢那一部分，想施展拳脚就各种Error。</p>
<p>或许人都应该做到张弛有度，速度不缓不急，自有安排妥当的节奏，该收敛的时候不逞强，该出击的时候不犹豫，该保留的时候不盲目，该竭力的时候不气短。</p>
<p>2020，惟愿信念使自己超越。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT</title>
    <url>/posts/1bb08f7a/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="📖官方文档"><a href="#📖官方文档" class="headerlink" title="📖官方文档"></a>📖官方文档</h2><blockquote>
<p>🌐官方文档</p>
</blockquote>
<p>👉<a href="https://jwt.io/introduction/">JWT</a></p>
<blockquote>
<p>💰JWT概述</p>
</blockquote>
<p><strong>JSON Web Token</strong>是一个开放标准（RFC 7519），它定义了一种紧凑且包含的方式，用于在各方之间安全地传输信息作为JSON对象。由于此信息是经过数字签名的，用于在各方面之间安全地传输信息作为JSON对象。由于此信息是经过数字签名地，因此可以被验证和信任。可以使用秘密（或者<strong>HMAC</strong>算法）或使用<strong>RSA</strong>或<strong>ECDSA</strong>的公钥/私钥对对JWT进行签名。</p>
<p>尽管可以对JWT进行加密以提供双方之间的保密性，但我们将重点关注已签名的令牌。签名的令牌可以验证其中包含的声明的完整性，而加密的令牌则将这些声明隐藏在其他方的面前。当使用公钥/私钥对对令牌进行签名时，签名还证明只有持有私钥的一方才是对其进行签名的一方。</p>
<br>

<a id="more"></a>



<blockquote>
<p>🔱应用场景</p>
</blockquote>
<ul>
<li>授权认证：使用JWT的最常见方案。一旦用户登录，每个后续请求将包括令牌，从而允许用户访问该令牌允许的路由、服务和资源。单点登录是当今广泛使用JWT的一项功能，因为它的开销很小并且可以在不同的域中轻松使用。</li>
<li>信息交换：JWT是在各方之间安全地传输信息的一种好方法。因为可以对JWT进行签名，例如使用公钥/私钥对。此外。由于签名是使用标头和有效负载计算的，因此还可以验证内容是否遭到篡改。</li>
</ul>
<br>

<h2 id="🚀认证流程"><a href="#🚀认证流程" class="headerlink" title="🚀认证流程"></a>🚀认证流程</h2><blockquote>
<p>⛔️session认证</p>
</blockquote>
<p>传统方式：用户第一次请求登录时候设置session，此后每次访问携带cookie。</p>
<p>问题：</p>
<ul>
<li>每个用户经过我们的应用认证之后，我们的应用都要在服务端做一次记录，以方便用户下次请求的鉴别，通常而言session都是保存在内存中，而随着用户的增多，服务端的开销会明显增大。</li>
<li>用户认证之后，服务端做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须要请求在这台服务器上，这样才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡器的能力，这也意味着限制了应用的扩展能力。</li>
<li>因为是基于cookie来进行用户识别的，cookie如何被截获，用户很容易受到跨站请求伪造的攻击。</li>
</ul>
<br>

<blockquote>
<p>🔰JWT认证</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/1bb08f7a/JWT%E8%AE%A4%E8%AF%81%E6%B5%81%E7%A8%8B.png" class="" title="JWT认证">

<p>认证流程：</p>
<p>首先，前端通过web表单将自己的用户名和密码发送到后端的接口，这一过程一般是一个Http POST请求。</p>
<p>后端核对用户名和密码成功后，将用户的id等其他信息作为JWT payload(负载)，将其与头部分别进行Based64编码拼接后签名，形成一个JWT。形成的JWT就形同xxx.yyy.zzz的字符串。</p>
<p>后端将JWT字符串作为登陆成功的返回结果返回给前端，前端可以将返回的结果保存在localStorage上，退出登录时前端删除保存的JWT即可。</p>
<p>前端在每次请求时将JWT放入HTTP Header的Authorization位。（解决XSS和XSRF问题）</p>
<p>后端检查是否存在，如存在验证JWT的有效性。（签名是否正确，Token是否过期等）</p>
<p>验证通过后后端使用JWT中包含的用户信息进行其他逻辑操作，并返回相应结果。</p>
<p>优势：</p>
<ul>
<li>简洁，可以通过URL，POST参数或者在HTTP Header发送，因为数据量小，传输速度也很快</li>
<li>自包含：负载中包含了所有用户所需要的信息，避免了多次查询数据库</li>
<li>因为Token是JSON加密的形式保存在客户端的，所以JWT是跨语言的，原则上任何web形式都支持</li>
<li>不需要再服务端保存会话信息，特别适合用于分布式微服务</li>
</ul>
<br>

<blockquote>
<p>⛓令牌结构</p>
</blockquote>
<p>JSON Web Token以紧凑的形式由三部分组成，三部分由<code>.</code>分隔，即<code>xxxxx.yyyyy.zzzzz</code></p>
<ul>
<li><p>标头(Header)  : Base64编码，由令牌类型和签名算法组成</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;alg&quot;</span>: <span class="string">&quot;HS256&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>负载(Payload) : Base64编码，用于放置携带信息，不能放敏感信息</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;Khighness&quot;</span></span><br><span class="line">    <span class="string">&quot;admin&quot;</span>:<span class="literal">true</span></span><br><span class="line">    <span class="string">&quot;gender&quot;</span>:<span class="string">&quot;male&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>签名(Signature) : 对标头和负载进行签名，防止内容被篡改</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">HMACSHA256(baseUrlEncode(header)) + &quot;.&quot; + base64UrlEncode(payload).secret)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<br>

<h2 id="💻JWT-Demo"><a href="#💻JWT-Demo" class="headerlink" title="💻JWT-Demo"></a>💻JWT-Demo</h2><blockquote>
<p>➕添加依赖</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JWT --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jwt.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>📑Java代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">generateToken</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    Calendar calendar = Calendar.getInstance();</span><br><span class="line">    calendar.add(Calendar.SECOND, <span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">    String token = JWT.create()</span><br><span class="line">            .withHeader(map)                                     <span class="comment">// Header</span></span><br><span class="line">            .withClaim(<span class="string">&quot;userID&quot;</span>, <span class="number">1011</span>)              <span class="comment">// Payload</span></span><br><span class="line">            .withClaim(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;KHighness&quot;</span>)</span><br><span class="line">            .withExpiresAt(calendar.getTime())                  <span class="comment">// 指定令牌过期时间: 60S</span></span><br><span class="line">            .sign(Algorithm.HMAC256(<span class="string">&quot;PARAK&quot;</span>));                 <span class="comment">// Signature，设置密钥PARAK</span></span><br><span class="line"></span><br><span class="line">    System.out.println(token);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;验证令牌&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">verifyToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    JWTVerifier jwtVerifier = JWT.require(Algorithm.HMAC512(<span class="string">&quot;PARAK&quot;</span>)).build();</span><br><span class="line">    String token = <span class="string">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2MDU5NDU0ODQsInVzZXJJRCI6MTAxMSwidXNlcm5hbWUiOiJLSGlnaG5lc3MifQ.Gvwa3vu_LYogcEPFxKOgFgaH6WnTKoo-UDW977W1GAw&quot;</span>;</span><br><span class="line">    DecodedJWT verify = jwtVerifier.verify(token);</span><br><span class="line">    System.out.println(verify.getClaim(<span class="string">&quot;userID&quot;</span>).asInt());</span><br><span class="line">    System.out.println(verify.getClaim(<span class="string">&quot;username&quot;</span>).asString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>❗️ 常见异常</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">异常</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">TokenExpiredException</td>
<td align="center">令牌过期异常</td>
</tr>
<tr>
<td align="center">SignatureVerificationException</td>
<td align="center">签名不一致异常</td>
</tr>
<tr>
<td align="center">AlgorithmMismatchException</td>
<td align="center">加密算法不匹配异常</td>
</tr>
<tr>
<td align="center">InvalidClaimException</td>
<td align="center">失效的负载异常</td>
</tr>
</tbody></table>
<br>

<h2 id="🍃整合Springboot"><a href="#🍃整合Springboot" class="headerlink" title="🍃整合Springboot"></a>🍃整合Springboot</h2><blockquote>
<p>💬说明</p>
</blockquote>
<p>用户在第一次登陆的时候，后台生成token返回给前端存储在sessionStorage中，此后每次前端需要调用后端需要认证的接口时都把token取出来携带在http header中。后台设置拦截器，设置需要认证才能访问的接口，每次处理请求时，先从request的http header中取出token进行认证，通过后才进行相关接口处理。</p>
<br>

<blockquote>
<p>🔧封装工具类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWT;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWTCreator;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: Springboot-JWT &lt;/P&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.common &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: KKJWTUtil &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: JWT工具类 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KKJWTUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;签名的密钥[<span class="doctag">@NAME</span>]&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String secret = <span class="string">&quot;@KHIGHNESS&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;签名的过期时间[A Week]&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> accessTokenExpireTime = <span class="number">604800</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;令牌颁布者身份标识[DOMAIN]&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String issuer = <span class="string">&quot;parak.top&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;生成Token&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chaims</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateToken</span><span class="params">(Map&lt;String, String&gt; chaims)</span> </span>&#123;</span><br><span class="line">        JWTCreator.Builder builder = JWT.create();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 添加负载 */</span></span><br><span class="line">        chaims.forEach((k, v) -&gt; &#123;</span><br><span class="line">            builder.withClaim(k, v);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 设置过期时间 */</span></span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        calendar.add(Calendar.SECOND, accessTokenExpireTime);</span><br><span class="line">        builder.withExpiresAt(calendar.getTime());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 设置颁发者身份 */</span></span><br><span class="line">        builder.withIssuer(issuer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 设置加密算法以及密钥 */</span></span><br><span class="line">        String token = builder.sign(Algorithm.HMAC256(secret));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;解析token&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DecodedJWT <span class="title">verifyToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JWT.require(Algorithm.HMAC256(secret)).build().verify(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>用户控制器</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.ObjectUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> top.parak.common.KKCondition;</span><br><span class="line"><span class="keyword">import</span> top.parak.common.KKDataResponse;</span><br><span class="line"><span class="keyword">import</span> top.parak.common.KKJWTUtil;</span><br><span class="line"><span class="keyword">import</span> top.parak.entity.User;</span><br><span class="line"><span class="keyword">import</span> top.parak.service.UserService;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     用户控制层</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-11-19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;用户注册&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/register&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KKDataResponse <span class="title">register</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> User user)</span> </span>&#123;</span><br><span class="line">        String username = user.getUsername();</span><br><span class="line">        String password = user.getPassword();</span><br><span class="line">        log.info(<span class="string">&quot;用户注册 =&gt; [&#123;&#125;]&quot;</span>, username);</span><br><span class="line">        KKCondition condition = <span class="keyword">new</span> KKCondition();</span><br><span class="line">        condition.setName(username);</span><br><span class="line">        <span class="keyword">if</span> (!ObjectUtils.isEmpty(userService.queryUserInCondition(condition))) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;用户名&#123;&#125;已被注册，不可重复注册&quot;</span>, username);</span><br><span class="line">            <span class="keyword">return</span> KKDataResponse.errorResponse(<span class="string">&quot;该用户名已被注册，不可重复注册&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userService.saveUser(username, password) == <span class="number">1</span> ? KKDataResponse.successResponse(<span class="keyword">true</span>) : KKDataResponse.errorResponse(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;用户登录&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loginDataJson</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KKDataResponse <span class="title">login</span><span class="params">(<span class="meta">@RequestBody</span> String loginDataJson)</span> </span>&#123;</span><br><span class="line">        JSONObject loginData = JSON.parseObject(loginDataJson);</span><br><span class="line">        String username = loginData.get(<span class="string">&quot;username&quot;</span>).toString();</span><br><span class="line">        String password = loginData.get(<span class="string">&quot;password&quot;</span>).toString();</span><br><span class="line">        log.info(<span class="string">&quot;用户登录 =&gt; [&#123;&#125;]&quot;</span>, username);</span><br><span class="line">        Map&lt;String, Object&gt; response = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (userService.authenticate(username, password)) &#123;</span><br><span class="line">            response.put(<span class="string">&quot;loginState&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">/* 生成令牌 */</span></span><br><span class="line">            Map&lt;String, String&gt; payload = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            payload.put(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line">            String token = KKJWTUtil.generateToken(payload);</span><br><span class="line">            response.put(<span class="string">&quot;kktoken&quot;</span>, token);</span><br><span class="line">            <span class="keyword">return</span> KKDataResponse.successResponse(response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response.put(<span class="string">&quot;loginState&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">            response.put(<span class="string">&quot;kktoken&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> KKDataResponse.errorResponse(response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KKDataResponse <span class="title">test</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String kktoken = (String) request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        DecodedJWT verify = KKJWTUtil.verifyToken(kktoken);</span><br><span class="line">        String username = verify.getClaim(<span class="string">&quot;username&quot;</span>).asString();</span><br><span class="line">        log.info(<span class="string">&quot;请求用户 =&gt; [&#123;&#125;]&quot;</span>, username);</span><br><span class="line">        <span class="keyword">return</span> KKDataResponse.successResponse(<span class="string">&quot;请求成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>设置拦截器</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.AlgorithmMismatchException;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.InvalidClaimException;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.SignatureVerificationException;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.TokenExpiredException;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> top.parak.common.JwtTokenUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: Springboot-JWT &lt;/P&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.interceptor &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: JWTInterceptor &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 令牌拦截器 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JWTInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String kktoken = request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;请求令牌 =&gt; [&#123;&#125;]&quot;</span>, kktoken);</span><br><span class="line">            DecodedJWT decodedJWT = KKJWTUtil.verifyToken(kktoken);</span><br><span class="line">            log.info(<span class="string">&quot;验证结果 =&gt; [&#123;&#125;]&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TokenExpiredException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;发成异常 =&gt; [&#123;&#125;]&quot;</span>, e.getMessage());</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;令牌过期&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SignatureVerificationException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;发成异常 =&gt; [&#123;&#125;]&quot;</span>, e.getMessage());</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;签名错误&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlgorithmMismatchException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;发成异常 =&gt; [&#123;&#125;]&quot;</span>, e.getMessage());</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;加密算法不匹配&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidClaimException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;发成异常 =&gt; [&#123;&#125;]&quot;</span>, e.getMessage());</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;失效负载&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;发成异常 =&gt; [&#123;&#125;]&quot;</span>, e.getMessage());</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;令牌为空&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;发成异常 =&gt; [&#123;&#125;]&quot;</span>, e.getMessage());</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        log.error(<span class="string">&quot;验证结果 =&gt; [&#123;&#125;]&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">        map.put(<span class="string">&quot;state&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">/* map转json */</span></span><br><span class="line">        String json = <span class="keyword">new</span> ObjectMapper().writeValueAsString(map);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        PrintWriter writer = response.getWriter();</span><br><span class="line">        writer.println(json);</span><br><span class="line">        writer.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>拦截器配置</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"><span class="keyword">import</span> top.parak.intercepter.JWTIntercepter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: Springboot-JWT &lt;/P&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.config &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: IntercepterConfig &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> JWTInterceptor())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/api/**/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/api/user/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>JWT</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis-plus</title>
    <url>/posts/fd1960c6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="📖-官方文档"><a href="#📖-官方文档" class="headerlink" title="📖 官方文档"></a>📖 官方文档</h2><blockquote>
<p>🌐文档</p>
</blockquote>
<p>👉 <a href="https://mybatis.plus/">mybatis-plus</a></p>
<blockquote>
<p>☄️特性</p>
</blockquote>
<ul>
<li>润物无声：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑。</li>
<li>效率至上：只需简单配置，即可快速进行单表 CRUD 操作，从而节省大量时间。</li>
<li>丰富功能：代码生成、物理分页、性能分析等功能一应俱全。</li>
</ul>
<blockquote>
<p>⛓结构</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/fd1960c6/mybatis-plus-framework.jpg" class="" title="mybatis-plus-framework">

<br>

<a id="more"></a>



<h2 id="➕-添加依赖"><a href="#➕-添加依赖" class="headerlink" title="➕ 添加依赖"></a>➕ 添加依赖</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml</span> <span class="string">version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;project</span> <span class="string">xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="line">         <span class="attr">xmlns</span>:<span class="string">xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">         <span class="attr">xsi</span>:<span class="string">schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span></span><br><span class="line">    <span class="attr">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&lt;groupId&gt;top.parak&lt;/groupId&gt;</span></span><br><span class="line">    <span class="attr">&lt;artifactId&gt;Mybatis-plus&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="meta">&lt;description&gt;Mybatis-plus</span> <span class="string">Learning&lt;/description&gt;</span></span><br><span class="line">    <span class="attr">&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&lt;developers&gt;</span></span><br><span class="line">        <span class="attr">&lt;developer&gt;</span></span><br><span class="line">            <span class="attr">&lt;name&gt;KHighness&lt;/name&gt;</span></span><br><span class="line">            <span class="attr">&lt;email&gt;parakovo@gmail.com&lt;/email&gt;</span></span><br><span class="line">        <span class="attr">&lt;/developer&gt;</span></span><br><span class="line">    <span class="attr">&lt;/developers&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&lt;parent&gt;</span></span><br><span class="line">        <span class="attr">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">        <span class="attr">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span></span><br><span class="line">        <span class="attr">&lt;version&gt;2.2.5.RELEASE&lt;/version&gt;</span></span><br><span class="line">    <span class="attr">&lt;/parent&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&lt;properties&gt;</span></span><br><span class="line">        <span class="attr">&lt;mysql.version&gt;8.0.20&lt;/mysql.version&gt;</span></span><br><span class="line">        <span class="attr">&lt;fastjson.version&gt;1.2.58&lt;/fastjson.version&gt;</span></span><br><span class="line">        <span class="attr">&lt;gson.version&gt;2.8.6&lt;/gson.version&gt;</span></span><br><span class="line">        <span class="attr">&lt;mybatis-plus.version&gt;3.4.0&lt;/mybatis-plus.version&gt;</span></span><br><span class="line">        <span class="attr">&lt;common-io.version&gt;2.6&lt;/common-io.version&gt;</span></span><br><span class="line">        <span class="attr">&lt;common-fileupload.version&gt;1.4&lt;/common-fileupload.version&gt;</span></span><br><span class="line">        <span class="attr">&lt;mybatis-plus-generate.version&gt;2.3.3&lt;/mybatis-plus-generate.version&gt;</span></span><br><span class="line">    <span class="attr">&lt;/properties&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&lt;dependencies&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">&lt;!--</span> <span class="string">Spring Web --&gt;</span></span><br><span class="line">        <span class="attr">&lt;dependency&gt;</span></span><br><span class="line">            <span class="attr">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">            <span class="attr">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span></span><br><span class="line">        <span class="attr">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">&lt;!--</span> <span class="string">Spring Aop --&gt;</span></span><br><span class="line">        <span class="attr">&lt;dependency&gt;</span></span><br><span class="line">            <span class="attr">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">            <span class="attr">&lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span></span><br><span class="line">        <span class="attr">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">&lt;!--</span> <span class="string">Spring Test --&gt;</span></span><br><span class="line">        <span class="attr">&lt;dependency&gt;</span></span><br><span class="line">            <span class="attr">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">            <span class="attr">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span></span><br><span class="line">            <span class="attr">&lt;scope&gt;test&lt;/scope&gt;</span></span><br><span class="line">            <span class="attr">&lt;exclusions&gt;</span></span><br><span class="line">                <span class="attr">&lt;exclusion&gt;</span></span><br><span class="line">                    <span class="attr">&lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;</span></span><br><span class="line">                    <span class="attr">&lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;</span></span><br><span class="line">                <span class="attr">&lt;/exclusion&gt;</span></span><br><span class="line">            <span class="attr">&lt;/exclusions&gt;</span></span><br><span class="line">        <span class="attr">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">&lt;!--</span> <span class="string">Spring Configuration --&gt;</span></span><br><span class="line">        <span class="attr">&lt;dependency&gt;</span></span><br><span class="line">            <span class="attr">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">            <span class="attr">&lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span></span><br><span class="line">            <span class="attr">&lt;optional&gt;true&lt;/optional&gt;</span></span><br><span class="line">        <span class="attr">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">&lt;!--</span> <span class="string">Mybatis-plus --&gt;</span></span><br><span class="line">        <span class="attr">&lt;dependency&gt;</span></span><br><span class="line">            <span class="attr">&lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span></span><br><span class="line">            <span class="attr">&lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span></span><br><span class="line">            <span class="attr">&lt;version&gt;$&#123;mybatis-plus.version&#125;&lt;/version&gt;</span></span><br><span class="line">        <span class="attr">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">&lt;!--</span> <span class="string">mybatis-plus-generator --&gt;</span></span><br><span class="line">        <span class="attr">&lt;dependency&gt;</span></span><br><span class="line">            <span class="attr">&lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span></span><br><span class="line">            <span class="attr">&lt;artifactId&gt;mybatis-plus-generate&lt;/artifactId&gt;</span></span><br><span class="line">            <span class="attr">&lt;version&gt;$&#123;mybatis-plus-generate.version&#125;&lt;/version&gt;</span></span><br><span class="line">        <span class="attr">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">&lt;!--</span> <span class="string">Mysql --&gt;</span></span><br><span class="line">        <span class="attr">&lt;dependency&gt;</span></span><br><span class="line">            <span class="attr">&lt;groupId&gt;mysql&lt;/groupId&gt;</span></span><br><span class="line">            <span class="attr">&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span></span><br><span class="line">            <span class="attr">&lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt;</span></span><br><span class="line">        <span class="attr">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">&lt;!--</span> <span class="string">Unit Test --&gt;</span></span><br><span class="line">        <span class="attr">&lt;dependency&gt;</span></span><br><span class="line">            <span class="attr">&lt;groupId&gt;junit&lt;/groupId&gt;</span></span><br><span class="line">            <span class="attr">&lt;artifactId&gt;junit&lt;/artifactId&gt;</span></span><br><span class="line">            <span class="attr">&lt;scope&gt;test&lt;/scope&gt;</span></span><br><span class="line">        <span class="attr">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">&lt;!--</span> <span class="string">Lombok --&gt;</span></span><br><span class="line">        <span class="attr">&lt;dependency&gt;</span></span><br><span class="line">            <span class="attr">&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span></span><br><span class="line">            <span class="attr">&lt;artifactId&gt;lombok&lt;/artifactId&gt;</span></span><br><span class="line">            <span class="attr">&lt;scope&gt;provided&lt;/scope&gt;</span></span><br><span class="line">        <span class="attr">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">&lt;!--</span> <span class="string">FastJSON --&gt;</span></span><br><span class="line">        <span class="attr">&lt;dependency&gt;</span></span><br><span class="line">            <span class="attr">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span></span><br><span class="line">            <span class="attr">&lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span></span><br><span class="line">            <span class="attr">&lt;version&gt;$&#123;fastjson.version&#125;&lt;/version&gt;</span></span><br><span class="line">        <span class="attr">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&lt;/dependencies&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&lt;build&gt;</span></span><br><span class="line">        <span class="attr">&lt;plugins&gt;</span></span><br><span class="line">            <span class="attr">&lt;plugin&gt;</span></span><br><span class="line">                <span class="attr">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line">                <span class="attr">&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span></span><br><span class="line">                <span class="attr">&lt;configuration&gt;</span></span><br><span class="line">                    <span class="attr">&lt;mainClass&gt;top.parak.KHighnessApplication&lt;/mainClass&gt;</span></span><br><span class="line">                <span class="attr">&lt;/configuration&gt;</span></span><br><span class="line">            <span class="attr">&lt;/plugin&gt;</span></span><br><span class="line">        <span class="attr">&lt;/plugins&gt;</span></span><br><span class="line">    <span class="attr">&lt;/build&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&lt;/project&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<h2 id="💥配置日志"><a href="#💥配置日志" class="headerlink" title="💥配置日志"></a>💥配置日志</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Server</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">3333</span></span><br><span class="line"><span class="meta">server.tomcat.uri-encoding</span>=<span class="string">UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Database</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/test?serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;allowMultiQueries=true</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">KAG1823</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mybatis-plus</span></span><br><span class="line"><span class="meta">mybatis-plus.mapper-locations</span>=<span class="string">classpath*:/mapper/**/*.xml</span></span><br><span class="line"><span class="meta">mybatis-plus.type-aliases-package</span>=<span class="string">top.parak.entity</span></span><br><span class="line"><span class="meta">mybatis-plus.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.banner</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">mybatis-plus.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"><span class="comment"># Logic-Delete</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.db-config.logic-delete-value</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.db-config.logic-not-delete-value</span>=<span class="string">0</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># Log</span></span><br><span class="line"><span class="meta">logging.level.top.parak.mapper</span>=<span class="string">debug</span></span><br><span class="line"><span class="meta">logging.level.top.parak.controller</span>=<span class="string">debug</span></span><br></pre></td></tr></table></figure>

<br>

<h2 id="🌀主键生成策略"><a href="#🌀主键生成策略" class="headerlink" title="🌀主键生成策略"></a>🌀主键生成策略</h2><blockquote>
<p>❄️Snowflake</p>
</blockquote>
<p><code>SnowFlake</code>是<code>Twitter</code>开源的分布式<code>ID</code>生成算法。</p>
<blockquote>
<p>🆔ID结构</p>
</blockquote>
<p><code>SnowFlake</code>生成<code>ID</code>固定是一个<code>long</code>型的数字，一个<code>long</code>型占8个字节，也就是64个<code>bit</code>，分配如下：</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/fd1960c6/SnowFlakeID.jpg" class="" title="SnowFlake">

<ol>
<li>第一个bit是标识位部分，在<code>Java</code>中由于<code>long</code>的最高位是符号位，正数是<code>0</code>，负数是<code>1</code>，一般生成的<code>ID</code>为正数，所以固定为<code>0</code>。</li>
<li>时间戳部分占<code>41bit</code>，这个是毫秒级的时间，一般实现上不会存储当前的时间戳，而是时间戳的差值(当前时间-固定的开始时间)，这样可以使产生的<code>ID</code>从更小值开始。<code>41</code>位的时间戳可以使用<code>69</code>年。</li>
<li>工作机器<code>ID</code>占<code>10bit</code>，这里比较灵活，比如，可以使用前<code>5</code>位作为数据中心机房标识，后<code>5</code>位作为单机房机器标识，可以部署<code>1024</code>个节点。</li>
<li>序列号部分占<code>12bit</code>，支持同一毫秒内同一个节点可以生成2^12^=<code>4096</code>个<code>ID</code>。</li>
</ol>
<blockquote>
<p>🌠 优点和缺点</p>
</blockquote>
<p>优点：</p>
<ul>
<li>毫秒数在高位，自增序列在低位，<code>ID</code>趋势递增。</li>
<li>以服务方式部署，可以做高可用。</li>
<li>根据业务分配<code>bit</code>位，灵活。</li>
</ul>
<p>缺点：</p>
<ul>
<li>每台机器的时钟不同，当时钟回拨可能会发生重复ID。</li>
<li>当数据量大时，需要对<code>ID</code>取模分库分表，在跨毫秒时，序列号总是归<code>0</code>，会发生取模后分布不均衡。</li>
</ul>
<blockquote>
<p>💻 Java实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: Mybatis-plus &lt;/P&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.common &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: SnowShakeUntil &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 雪花算法 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SnowFlakeUntil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;开始时间戳&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> START_STMP;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        String startDateTime = <span class="string">&quot;2001-09-11 00:00:00&quot;</span>;</span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/* 13位时间戳 */</span></span><br><span class="line">            START_STMP = simpleDateFormat.parse(startDateTime).getTime();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;序列号占用的位数&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> SEQUENCE_BIT = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;数据中心标识占用的位数&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> MACHINE_BIT = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;机器标识占用的位数&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> DATACENTER_BIT = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 每一部分的最大值：先进行左移运算，再同-1进行异或运算 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;用位运算计算出最大支持的数据中心数量：31&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> MAX_DATACENTER_NUM = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; DATACENTER_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;用位运算计算出最大支持的机器数量&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> MAX_MACHINE_NUM = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; MACHINE_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;用位运算计算出最大支持的最大正整数4095&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> MAX_SEQUENCE = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; SEQUENCE_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;机器标志较序列号的偏移量&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> MACHINE_LEFT = SEQUENCE_BIT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;数据中心较机器标志的偏移量&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> DATACENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;时间戳较数据中心的偏移量&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> TIMESTMP_LEFT = DATACENTER_LEFT + DATACENTER_BIT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;数据中心&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> dataCenterId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;机器标识&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> machineId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;序列号&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> sequence = <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 4&lt;p&gt;上一次时间戳&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> lastStmp = -<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;此处无参构造私有，同时没有给出有参构造，在于避免以下两点问题：&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;1. 私有化避免了通过new的方式进行调用，主要是解决了在for循环中通过new的方式调用产生的id不一定唯一问题问题，因为用于记录上一次时间戳的lastStmp永远无法得到比对&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;2. 没有给出有参构造在第一点的基础上考虑了一套分布式系统产生的唯一序列号应该是基于相同的参数&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SnowFlakeUntil</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;生成ID&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">long</span> <span class="title">nextID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 获取当前时间戳*/</span></span><br><span class="line">        <span class="keyword">long</span> currStmp = getNewStmp();</span><br><span class="line">        <span class="comment">/* 如果当前时间戳小于上次时间戳则抛出异常 */</span></span><br><span class="line">        <span class="keyword">if</span> (currStmp &lt; lastStmp) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Clock moved backwards. Refusing to generate id&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 相同毫秒内，序列号自增 */</span></span><br><span class="line">        <span class="keyword">if</span> (currStmp == lastStmp) &#123;</span><br><span class="line">            sequence = (sequence + <span class="number">1</span>) &amp; MAX_SEQUENCE;</span><br><span class="line">            <span class="comment">/* 同一毫秒的序列数已经达到最大*/</span></span><br><span class="line">            <span class="keyword">if</span> (sequence == <span class="number">0L</span>) &#123;</span><br><span class="line">                currStmp = getNextStmp();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 不同毫秒内，序列号设为0 */</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            sequence = <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 当前时间戳存档记录*/</span></span><br><span class="line">        lastStmp = currStmp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (currStmp - START_STMP) &lt;&lt; TIMESTMP_LEFT  <span class="comment">// 时间戳部分</span></span><br><span class="line">                | dataCenterId &lt;&lt; DATACENTER_LEFT        <span class="comment">// 数据中心部分</span></span><br><span class="line">                | machineId &lt;&lt; MACHINE_LEFT              <span class="comment">// 机器标识部分</span></span><br><span class="line">                | sequence;                              <span class="comment">// 序列号部分</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;当前时间戳&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getNewStmp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;下一时间的时间戳&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getNextStmp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> mill = getNewStmp();</span><br><span class="line">        <span class="keyword">while</span> (mill &lt;= lastStmp) &#123;</span><br><span class="line">            mill = getNewStmp();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mill;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>🔱在Mybatis-plus中自定义ID生成器</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomIdGenerator</span> <span class="keyword">implements</span> <span class="title">IdentifierGenerator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">nextId</span><span class="params">(Object entity)</span> </span>&#123;</span><br><span class="line">      	<span class="comment">// 可以将当前传入的class全类名来作为bizKey,或者提取参数来生成bizKey进行分布式Id调用生成.</span></span><br><span class="line">      	String bizKey = entity.getClass().getName();</span><br><span class="line">        <span class="comment">// 根据bizKey调用分布式ID生成</span></span><br><span class="line">        <span class="keyword">long</span> id = ....;</span><br><span class="line">      	<span class="comment">// 返回生成的id值即可.</span></span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="🚀-CRUD拓展"><a href="#🚀-CRUD拓展" class="headerlink" title="🚀 CRUD拓展"></a>🚀 CRUD拓展</h2><blockquote>
<p>建表</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">tinyint</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">18</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_bin;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>实体</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="🌌自动填充"><a href="#🌌自动填充" class="headerlink" title="🌌自动填充"></a>🌌自动填充</h3><p>对于普通字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">FieldFill</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 默认不处理 */</span></span><br><span class="line">    DEFAULT,</span><br><span class="line">    <span class="comment">/* 插入填充字段 */</span></span><br><span class="line">    INSERT,</span><br><span class="line">    <span class="comment">/*更新填充字段 */</span></span><br><span class="line">    UPDATE,</span><br><span class="line">    <span class="comment">/* 插入和更新填充字段 */</span></span><br><span class="line">    INSERT_UPDATE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>所有的数据库表都应该包含创建时间gmt_create和修改时间gmt_modified，而且需要自动化。——《阿里巴巴开发手册》</p>
<blockquote>
<p>🛢数据库级别</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> update_time DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> create_time DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>⌨️代码级别</p>
</blockquote>
<ul>
<li>数据表添加字段</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> update_time DATETIME;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> create_time DATETIME;</span><br></pre></td></tr></table></figure>

<ul>
<li>实体类添加字段和注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> Date createTime;</span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> Date updateTime;</span><br></pre></td></tr></table></figure>

<ul>
<li>编写处理器处理注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: Mybatis-plus &lt;/P&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.handler &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: DataObjectHandler &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 自动填充处理器 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/9</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;插入时的填充策略&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;createTime&quot;</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;更新时的填充策略&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="🔏悲观锁"><a href="#🔏悲观锁" class="headerlink" title="🔏悲观锁"></a>🔏悲观锁</h3><blockquote>
<p>📖理解</p>
</blockquote>
<p>当要对数据库的一条数据进行修改的时候，为了避免同时被其他人修改，最好的办法就是直接对数据进行加锁防止并发。</p>
<p>这种借助数据库锁机制，在修改数据之前先锁定，再修改的方式被称为悲观并发控制(Pessimistic Concurrency Control，缩写PCC，又名悲观锁)。</p>
<blockquote>
<p>💠实现</p>
</blockquote>
<p>悲观锁的实现，往往依靠数据库提供的锁机制(只有数据库层提供的锁机制才能真正保证数据访问的排他性，否则，即使在本系统中实现了加锁机制，也无法保证外部系统不会修改数据)。悲观锁的实现：</p>
<ul>
<li>传统的关系型数据库使用这种锁机制，比如行锁、表锁、读锁、写锁等，都是在做操作之前先上锁</li>
<li>Java里面的同步<code>synchronized</code>关键字的实现</li>
<li><code>JUC</code>中的<code>lock</code>加锁</li>
</ul>
<blockquote>
<p>🔱分类 </p>
</blockquote>
<ul>
<li>共享锁：又称为读锁，简称S锁。顾名思义，共享锁就是多个事务对于同一个数九可以共享一把锁，都能访问到数据，但是只能读不能修改。</li>
<li>排他锁：又称为写锁，简称X锁。顾名思义，排他锁就是不能与其他锁并存，如果一个事务获取了一个数据行的排它锁，其他事务就不能再获取该行的其他锁，包括共享锁和排他锁，但是获取到排他锁的事务可以对数据进行读取和修改。</li>
</ul>
<blockquote>
<p>💬说明</p>
</blockquote>
<p>悲观并发控制实质上是<strong>先取锁再访问</strong>的保守策略，为数据处理的安全提供了保证。</p>
<p>但是在效率方面，处理加锁的机制会让数据库产生额外的开销，还有增加产生死锁的机会。</p>
<p>另外还会降低并行性，一个事务如果锁定了某行数据，其他事务就必须等待该事务处理完才可以处理那行数据。</p>
<br>

<h3 id="🔓乐观锁"><a href="#🔓乐观锁" class="headerlink" title="🔓乐观锁"></a>🔓乐观锁</h3><blockquote>
<p>📖理解</p>
</blockquote>
<p>乐观锁假设数据在一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则返回给用户错误的信息，让用户决定如何去做。乐观锁适用于读操作多的场景，这样可以提高程序的吞吐量。</p>
<blockquote>
<p>💠实现</p>
</blockquote>
<p>乐观锁不会可以使用数据库本身的锁机制，而是依据数据本身来保证数据的正确性。乐观锁的实现：</p>
<ul>
<li><p>CAS实现：<code>Java </code>中<code>java.concurrent.atomic</code>包下面的原子变量使用了乐观锁的一种 <code>CAS</code> 实现方式</p>
</li>
<li><p>版本号控制：一般是在数据表中添加一个数据版本号<code>version</code>字段，表示数据被修改的次数。当数据被修改时，<code>version</code>值会+1。当线程A更新数据值时，在读取数据的同时也会读取<code>version</code>值，在提交更新时，若刚才读取到<code>version</code>值与当前数据库中的<code>version</code>值相等时才更新，否则重试更新操作，直到更新成功。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1 查询版本号</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">version</span> <span class="keyword">as</span> oldversion <span class="keyword">where</span> <span class="keyword">id</span> = <span class="comment">#&#123;id&#125;</span></span><br><span class="line"><span class="comment">-- 2 更新操作</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">set</span> ... , <span class="keyword">version</span> = <span class="keyword">version</span>  + <span class="number">1</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="comment">#&#123;id&#125;  and version = oldversion</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<blockquote>
<p>💬说明</p>
</blockquote>
<p>乐观并发控制相信事务之间的数据竞争概率是比较小的。因此尽可能直接做下去，直到提交的时候才去锁定，所以不会产生任何锁或死锁。</p>
<blockquote>
<p>🔧插件</p>
</blockquote>
<ul>
<li>数据表添加字段</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> <span class="keyword">version</span> <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>; </span><br></pre></td></tr></table></figure>

<ul>
<li>实体类添加属性和注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 乐观锁 */</span></span><br><span class="line"><span class="meta">@Version</span></span><br><span class="line"><span class="keyword">private</span> Integer version;</span><br></pre></td></tr></table></figure>

<ul>
<li>在mybatis-plus配置类中增加乐观锁拦截器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor mybatisPlusInterceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        <span class="comment">/* 乐观锁插件 */</span></span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> OptimisticLockerInnerInterceptor());</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>乐观锁测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;乐观锁测试1&lt;/p&gt;</span></span><br><span class="line"><span class="comment">    */</span>    </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">optimisticLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 查询信息</span></span><br><span class="line">       User user1 = userMapper.selectById(<span class="number">10L</span>);</span><br><span class="line">       <span class="comment">// 修改信息</span></span><br><span class="line">       user1.setName(<span class="string">&quot;Khighness10&quot;</span>);</span><br><span class="line">       user1.setAge(<span class="number">10</span>);</span><br><span class="line">       user1.setEmail(<span class="string">&quot;khighness10@qq.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 插队操作: 抢先更新，会更新版本号</span></span><br><span class="line">       User user2 = userMapper.selectById(<span class="number">10L</span>);</span><br><span class="line">       user2.setAge(<span class="number">100</span>);</span><br><span class="line">       userMapper.updateById(user2);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 执行更新：更新失败，版本号不对</span></span><br><span class="line">       userMapper.updateById(user1);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 测试结果</span><br><span class="line">JDBC Connection [HikariProxyConnection@597623166 wrapping com.mysql.cj.jdbc.ConnectionImpl@38cedb7d] will not be managed by Spring</span><br><span class="line">&#x3D;&#x3D;&gt;  Preparing: SELECT id,name,age,email,create_time,update_time,version FROM user WHERE id&#x3D;? </span><br><span class="line">&#x3D;&#x3D;&gt; Parameters: 10(Long)</span><br><span class="line">&lt;&#x3D;&#x3D;    Columns: id, name, age, email, create_time, update_time, version</span><br><span class="line">&lt;&#x3D;&#x3D;        Row: 10, Khighness10, 10, khighness10@qq.com, 2020-11-09 13:30:04, 2020-11-09 13:35:49, 2</span><br><span class="line">&lt;&#x3D;&#x3D;      Total: 1</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@12a14b74]</span><br><span class="line">Creating a new SqlSession</span><br><span class="line">SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@6a9344f5] was not registered for synchronization because synchronization is not active</span><br><span class="line">JDBC Connection [HikariProxyConnection@1434769862 wrapping com.mysql.cj.jdbc.ConnectionImpl@38cedb7d] will not be managed by Spring</span><br><span class="line">&#x3D;&#x3D;&gt;  Preparing: SELECT id,name,age,email,create_time,update_time,version FROM user WHERE id&#x3D;? </span><br><span class="line">&#x3D;&#x3D;&gt; Parameters: 10(Long)</span><br><span class="line">&lt;&#x3D;&#x3D;    Columns: id, name, age, email, create_time, update_time, version</span><br><span class="line">&lt;&#x3D;&#x3D;        Row: 10, Khighness10, 10, khighness10@qq.com, 2020-11-09 13:30:04, 2020-11-09 13:35:49, 2</span><br><span class="line">&lt;&#x3D;&#x3D;      Total: 1</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@6a9344f5]</span><br><span class="line">Creating a new SqlSession</span><br><span class="line">SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@3234474] was not registered for synchronization because synchronization is not active</span><br><span class="line">JDBC Connection [HikariProxyConnection@1137013089 wrapping com.mysql.cj.jdbc.ConnectionImpl@38cedb7d] will not be managed by Spring</span><br><span class="line">&#x3D;&#x3D;&gt;  Preparing: UPDATE user SET name&#x3D;?, age&#x3D;?, email&#x3D;?, create_time&#x3D;?, update_time&#x3D;?, version&#x3D;? WHERE id&#x3D;? AND version&#x3D;? </span><br><span class="line">&#x3D;&#x3D;&gt; Parameters: Khighness10(String), 100(Integer), khighness10@qq.com(String), 2020-11-09 13:30:04.0(Timestamp), 2020-11-09 13:59:41.434(Timestamp), 3(Integer), 10(Long), 2(Integer)</span><br><span class="line">&lt;&#x3D;&#x3D;    Updates: 1   &#x2F;&#x2F; 插队更新，影响行数为1&#x3D;&gt;成功</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@3234474]</span><br><span class="line">Creating a new SqlSession</span><br><span class="line">SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@58658f63] was not registered for synchronization because synchronization is not active</span><br><span class="line">JDBC Connection [HikariProxyConnection@1424043852 wrapping com.mysql.cj.jdbc.ConnectionImpl@38cedb7d] will not be managed by Spring</span><br><span class="line">&#x3D;&#x3D;&gt;  Preparing: UPDATE user SET name&#x3D;?, age&#x3D;?, email&#x3D;?, create_time&#x3D;?, update_time&#x3D;?, version&#x3D;? WHERE id&#x3D;? AND version&#x3D;? </span><br><span class="line">&#x3D;&#x3D;&gt; Parameters: Khighness10(String), 10(Integer), khighness10@qq.com(String), 2020-11-09 13:30:04.0(Timestamp), 2020-11-09 13:59:41.45(Timestamp), 3(Integer), 10(Long), 2(Integer)</span><br><span class="line">&lt;&#x3D;&#x3D;    Updates: 0   &#x2F;&#x2F; 执行更新，影响行数为0&#x3D;&gt;失败</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@58658f63]</span><br></pre></td></tr></table></figure>

<br>

<h3 id="🔖分页查询"><a href="#🔖分页查询" class="headerlink" title="🔖分页查询"></a>🔖分页查询</h3><ul>
<li>mybatis-plus配置类中增加分页拦截器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        MybatisPlusInterceptor mybatisPlusInterceptor = <span class="keyword">new</span> MybatisPlusInterceptor();</span><br><span class="line">        <span class="comment">/* 分页插件 */</span></span><br><span class="line">        mybatisPlusInterceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> mybatisPlusInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>直接使用<code>Page</code>对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询，使用page</span></span><br><span class="line"><span class="comment"> * 构造函数Page(current, size)</span></span><br><span class="line"><span class="comment"> * current: 页号</span></span><br><span class="line"><span class="comment"> * size: 页面大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">page</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Page&lt;User&gt; userPage = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">    userMapper.selectPage(userPage, <span class="keyword">null</span>);</span><br><span class="line">    log.info(<span class="string">&quot;总记录数量: &#123;&#125;&quot;</span>, userPage.getTotal());</span><br><span class="line">    log.info(<span class="string">&quot;第3页结果如下&quot;</span>);</span><br><span class="line">    userPage.getRecords().stream().forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 测试结果</span><br><span class="line">Creating a new SqlSession</span><br><span class="line">SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@d5556bf] was not registered for synchronization because synchronization is not active</span><br><span class="line">2020-11-09 15:44:02.969  INFO 6560 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...</span><br><span class="line">2020-11-09 15:44:03.107  INFO 6560 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.</span><br><span class="line">JDBC Connection [HikariProxyConnection@2068279617 wrapping com.mysql.cj.jdbc.ConnectionImpl@784223e9] will not be managed by Spring</span><br><span class="line">&#x3D;&#x3D;&gt;  Preparing: SELECT COUNT(1) FROM user</span><br><span class="line">&#x3D;&#x3D;&gt; Parameters: </span><br><span class="line">&lt;&#x3D;&#x3D;    Columns: COUNT(1)</span><br><span class="line">&lt;&#x3D;&#x3D;        Row: 12</span><br><span class="line">&lt;&#x3D;&#x3D;      Total: 1</span><br><span class="line">&#x3D;&#x3D;&gt;  Preparing: SELECT id,name,age,email,create_time,update_time,version FROM user LIMIT ?,?</span><br><span class="line">&#x3D;&#x3D;&gt; Parameters: 6(Long), 3(Long)</span><br><span class="line">&lt;&#x3D;&#x3D;    Columns: id, name, age, email, create_time, update_time, version</span><br><span class="line">&lt;&#x3D;&#x3D;        Row: 7, UnknownK, 3, unknownk@gmail.@32423.com, 2020-11-09 15:33:38, 2020-11-09 15:33:38, 1</span><br><span class="line">&lt;&#x3D;&#x3D;        Row: 8, UnknownK, 3, unknownk@gmail.@32423.com, 2020-11-09 15:33:38, 2020-11-09 15:33:38, 1</span><br><span class="line">&lt;&#x3D;&#x3D;        Row: 9, UnknownK, 3, unknownk@gmail.com, 2020-11-09 13:28:49, 2020-11-09 13:28:49, 1</span><br><span class="line">&lt;&#x3D;&#x3D;      Total: 3</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@d5556bf]</span><br><span class="line">2020-11-09 15:44:03.170  INFO 6560 --- [           main] top.parak.mapper.UserMapperTest          : 总记录数量: 12</span><br><span class="line">2020-11-09 15:44:03.170  INFO 6560 --- [           main] top.parak.mapper.UserMapperTest          : 第3页结果如下</span><br><span class="line">User(id&#x3D;7, name&#x3D;UnknownK, age&#x3D;3, email&#x3D;unknownk@gmail.@32423.com, createTime&#x3D;Mon Nov 09 15:33:38 CST 2020, updateTime&#x3D;Mon Nov 09 15:33:38 CST 2020, version&#x3D;1)</span><br><span class="line">User(id&#x3D;8, name&#x3D;UnknownK, age&#x3D;3, email&#x3D;unknownk@gmail.@32423.com, createTime&#x3D;Mon Nov 09 15:33:38 CST 2020, updateTime&#x3D;Mon Nov 09 15:33:38 CST 2020, version&#x3D;1)</span><br><span class="line">User(id&#x3D;9, name&#x3D;UnknownK, age&#x3D;3, email&#x3D;unknownk@gmail.com, createTime&#x3D;Mon Nov 09 13:28:49 CST 2020, updateTime&#x3D;Mon Nov 09 13:28:49 CST 2020, version&#x3D;1)</span><br></pre></td></tr></table></figure>

<br>

<h3 id="📛逻辑删除"><a href="#📛逻辑删除" class="headerlink" title="📛逻辑删除"></a>📛逻辑删除</h3><blockquote>
<p>物理删除：从数据库中直接删除。</p>
<p>逻辑删除：不从数据库中移除，通过一个变量使其失效。实质上是更新，防止数据丢失。</p>
</blockquote>
<ul>
<li>数据库添加字段</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> deleted </span><br></pre></td></tr></table></figure>
<ul>
<li>实体类添加属性和注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 逻辑删除 */</span></span><br><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Integer deleted;</span><br></pre></td></tr></table></figure>

<ul>
<li>Application.properties中增加配置</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 逻辑删除</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.db-config.logic-delete-value</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.db-config.logic-not-delete-value</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure>

<br>

<h3 id="🔍性能分析"><a href="#🔍性能分析" class="headerlink" title="🔍性能分析"></a><del>🔍性能分析</del></h3><p>3.4.X版本中该插件已经移除。</p>
<br>

<h3 id="💤条件构造器"><a href="#💤条件构造器" class="headerlink" title="💤条件构造器"></a>💤条件构造器</h3><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/fd1960c6/image-20201112160607792.png" class="" title="image-20201112160607792">

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WrapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="comment">// 姓名不为空</span></span><br><span class="line">        <span class="comment">// 邮箱不为空</span></span><br><span class="line">        <span class="comment">// 年龄大于等于18</span></span><br><span class="line">        wrapper</span><br><span class="line">                .isNotNull(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">                .isNotNull(<span class="string">&quot;email&quot;</span>)</span><br><span class="line">                .ge(<span class="string">&quot;age&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        userMapper.selectList(wrapper).stream().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;RubbishK&quot;</span>);</span><br><span class="line">        <span class="comment">// 只能查询一个用户，结果多于1个会报错</span></span><br><span class="line">        System.out.println(userMapper.selectOne(wrapper));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="comment">// 查询年龄在13到19的用户数量</span></span><br><span class="line">        wrapper.between(<span class="string">&quot;age&quot;</span>, <span class="number">13</span>, <span class="number">19</span>);</span><br><span class="line">        System.out.println(userMapper.selectCount(wrapper));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="comment">// 模糊查询</span></span><br><span class="line">        wrapper</span><br><span class="line">                .likeRight(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;K&quot;</span>)  <span class="comment">// K%</span></span><br><span class="line">                .likeLeft(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;@gmail.com&quot;</span>);  <span class="comment">// %@gmail.com</span></span><br><span class="line">        userMapper.selectList(wrapper).stream().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="comment">// 拼接sql语句</span></span><br><span class="line">        wrapper.inSql(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;select id from user where id &lt; 3&quot;</span>);</span><br><span class="line">        userMapper.selectList(wrapper).stream().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        <span class="comment">// 通过ID降序排序</span></span><br><span class="line">        wrapper.orderByDesc(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        userMapper.selectList(wrapper).stream().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="🔰代码生成器"><a href="#🔰代码生成器" class="headerlink" title="🔰代码生成器"></a>🔰代码生成器</h3><blockquote>
<p>自动生成 entity、mapper、service、controller层的代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.generator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.InjectionConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.GlobalConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.PackageConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.StrategyConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.DateType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: Mybatis-plus &lt;/P&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.generator &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: ParaKCode &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParaKCodeGenerator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 代码生成器</span></span><br><span class="line">        AutoGenerator autoGenerator = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 全局配置</span></span><br><span class="line">        GlobalConfig globalConfig = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        String projectPath = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">        globalConfig.setOutputDir(projectPath + <span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置作者名</span></span><br><span class="line">        globalConfig.setAuthor(<span class="string">&quot;KHighness&quot;</span>);</span><br><span class="line">        <span class="comment">// 操作完成是否打开资源管理器</span></span><br><span class="line">        globalConfig.setOpen(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 是否覆盖原有文件</span></span><br><span class="line">        globalConfig.setFileOverride(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 去Service的I前缀</span></span><br><span class="line">        globalConfig.setServiceName(<span class="string">&quot;%sService&quot;</span>); </span><br><span class="line">        globalConfig.setIdType(IdType.ID_WORKER);</span><br><span class="line">        globalConfig.setDateType(DateType.ONLY_DATE);</span><br><span class="line">        autoGenerator.setGlobalConfig(globalConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数据源配置</span></span><br><span class="line">        DataSourceConfig dataSourceConfig = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dataSourceConfig.setDbType(DbType.MYSQL);</span><br><span class="line">        dataSourceConfig.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/test?serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&quot;</span>);</span><br><span class="line">        dataSourceConfig.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSourceConfig.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSourceConfig.setPassword(<span class="string">&quot;KAG1823&quot;</span>);</span><br><span class="line">        autoGenerator.setDataSource(dataSourceConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 包配置</span></span><br><span class="line">        PackageConfig packageConfig = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        packageConfig.setModuleName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        packageConfig.setParent(<span class="string">&quot;top.parak&quot;</span>);</span><br><span class="line">        packageConfig.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">        packageConfig.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        packageConfig.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        packageConfig.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        autoGenerator.setPackageInfo(packageConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 策略配置</span></span><br><span class="line">        StrategyConfig strategyConfig = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        <span class="comment">// 映射表名</span></span><br><span class="line">        strategyConfig.setInclude(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        strategyConfig.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategyConfig.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        <span class="comment">// Lombok实体类</span></span><br><span class="line">        strategyConfig.setEntityLombokModel(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 驼峰命名</span></span><br><span class="line">        strategyConfig.setRestControllerStyle(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 逻辑删除</span></span><br><span class="line">        strategyConfig.setLogicDeleteFieldName(<span class="string">&quot;deleted&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建时间</span></span><br><span class="line">        TableFill gmt_create = <span class="keyword">new</span> TableFill(<span class="string">&quot;create_time&quot;</span>, FieldFill.INSERT);</span><br><span class="line">        <span class="comment">// 更新时间</span></span><br><span class="line">        TableFill gmt_modify = <span class="keyword">new</span> TableFill(<span class="string">&quot;update_time&quot;</span>, FieldFill.INSERT);</span><br><span class="line">        List&lt;TableFill&gt; tableFills = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        tableFills.add(gmt_create);</span><br><span class="line">        tableFills.add(gmt_modify);</span><br><span class="line">        strategyConfig.setTableFillList(tableFills);</span><br><span class="line">        <span class="comment">// 乐观锁</span></span><br><span class="line">        strategyConfig.setVersionFieldName(<span class="string">&quot;version&quot;</span>);</span><br><span class="line">        strategyConfig.setControllerMappingHyphenStyle(<span class="keyword">true</span>);</span><br><span class="line">        autoGenerator.setStrategy(strategyConfig);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义配置</span></span><br><span class="line">        InjectionConfig injectionConfig = <span class="keyword">new</span> InjectionConfig() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行生成</span></span><br><span class="line">        autoGenerator.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Mybatis-plus</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/posts/41682/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>可扩展性的本质是找到系统的变化点，并隔离变化点。 </p>
<p>世间众多设计模式其实就是一种设计模式即隔离变化点的模式。</p>
<p>极致扩展性的标志，就是需求的新增，不会在原有代码交付物上进行任何形式的修改。</p>
<p>——《阿里巴巴Java开发手册》</p>
<br>

<h2 id="1-设计原则"><a href="#1-设计原则" class="headerlink" title="1. 设计原则"></a>1. 设计原则</h2><br>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/41682/image-20210413121732627.png" class="" title="DesignPrinciple">



<a id="more"></a>

<br>

<h3 id="1-1-开闭原则"><a href="#1-1-开闭原则" class="headerlink" title="1.1 开闭原则"></a>1.1 开闭原则</h3><blockquote>
<p>定义</p>
</blockquote>
<p>软件实体应当对扩展开放，对修改关闭。</p>
<blockquote>
<p>实现</p>
</blockquote>
<p>可以通过“抽象约束、封装变化”来实现开闭原则，即通过接口或者抽象类为软件实体定义一个相对稳定的抽象层，而将相同的可变因素封装在相同的具体实现类中。</p>
<p>因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。而软件中易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类来扩展就可以了。</p>
<blockquote>
<p>作用</p>
</blockquote>
<p>开闭原则是面向对象程序设计的终极目标，它使软件实体拥有一定的适应性和灵活性的同时具备稳定性和延续性。具体来说，其作用如下。</p>
<ol>
<li>对软件测试的影响</li>
</ol>
<p>软件遵守开闭原则的话，软件测试时只需要对扩展的代码进行测试就可以了，因为原有的测试代码仍然能够正常运行。</p>
<ol start="2">
<li>可以提高代码的可复用性</li>
</ol>
<p>粒度越小，被复用的可能性就越大；在面向对象的程序设计中，根据原子和抽象编程可以提高代码的可复用性。</p>
<ol start="3">
<li>可以提高软件的可维护性</li>
</ol>
<p>遵守开闭原则的软件，其稳定性高和延续性强，从而易于扩展和维护。</p>
<br>

<h3 id="1-2-里式替换原则"><a href="#1-2-里式替换原则" class="headerlink" title="1.2 里式替换原则"></a>1.2 里式替换原则</h3><blockquote>
<p>定义</p>
</blockquote>
<p>继承必须确保超类所拥有的性质在子类中仍然成立</p>
<blockquote>
<p>实现</p>
</blockquote>
<p>子类可以扩展父类的功能，但不能改变父类原有的功能。也就是说：子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。</p>
<p>根据上述理解，对里氏替换原则的定义可以总结如下：</p>
<ul>
<li>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法</li>
<li>子类中可以增加自己特有的方法</li>
<li>当子类的方法重载父类的方法时，方法的前置条件（即方法的输入参数）要比父类的方法更宽松</li>
<li>当子类的方法实现父类的方法时（重写/重载或实现抽象方法），方法的后置条件（即方法的的输出/返回值）要比父类的方法更严格或相等</li>
</ul>
<blockquote>
<p>作用</p>
</blockquote>
<ul>
<li><p>里氏替换原则是实现开闭原则的重要方式之一。</p>
</li>
<li><p>它克服了继承中重写父类造成的可复用性变差的缺点。</p>
</li>
<li><p>它是动作正确性的保证。即类的扩展不会给已有的系统引入新的错误，降低了代码出错的可能性。</p>
</li>
<li><p>加强程序的健壮性，同时变更时可以做到非常好的兼容性，提高程序的维护性、可扩展性，降低需求变更时引入的风险。</p>
</li>
</ul>
<br>

<h3 id="1-3-依赖倒置原则"><a href="#1-3-依赖倒置原则" class="headerlink" title="1.3 依赖倒置原则"></a>1.3 依赖倒置原则</h3><blockquote>
<p>定义</p>
</blockquote>
<p>高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。</p>
<blockquote>
<p>实现</p>
</blockquote>
<ul>
<li><p>每个类尽量提供接口或抽象类，或者两者都具备。</p>
</li>
<li><p>变量的声明类型尽量是接口或者是抽象类。</p>
</li>
<li><p>任何类都不应该从具体类派生。</p>
</li>
<li><p>使用继承时尽量遵循里氏替换原则。</p>
</li>
</ul>
<blockquote>
<p>作用</p>
</blockquote>
<ul>
<li>依赖倒置原则可以降低类间的耦合性。</li>
<li>依赖倒置原则可以提高系统的稳定性。</li>
<li>依赖倒置原则可以减少并行开发引起的风险。</li>
<li>依赖倒置原则可以提高代码的可读性和可维护性。</li>
</ul>
<br>

<h3 id="1-4-单一职责原则"><a href="#1-4-单一职责原则" class="headerlink" title="1.4 单一职责原则"></a>1.4 单一职责原则</h3><blockquote>
<p>定义</p>
</blockquote>
<p>一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分</p>
<blockquote>
<p>实现</p>
</blockquote>
<p>单一职责原则是最简单但又最难运用的原则，需要设计人员发现类的不同职责并将其分离，再封装到不同的类或模块中。</p>
<blockquote>
<p>作用</p>
</blockquote>
<p>单一职责原则的核心就是控制类的粒度大小、将对象解耦、提高其内聚性。</p>
<ul>
<li>降低类的复杂度。一个类只负责一项职责，其逻辑肯定要比负责多项职责简单得多。</li>
<li>提高类的可读性。复杂性降低，自然其可读性会提高。</li>
<li>提高系统的可维护性。可读性提高，那自然更容易维护了。</li>
<li>变更引起的风险降低。变更是必然的，如果单一职责原则遵守得好，当修改一个功能时，可以显著降低对其他功能的影响。</li>
</ul>
<br>

<h3 id="1-5-接口隔离原则"><a href="#1-5-接口隔离原则" class="headerlink" title="1.5 接口隔离原则"></a>1.5 接口隔离原则</h3><blockquote>
<p>定义</p>
</blockquote>
<p>要为各个类建立它们需要的专用接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。</p>
<blockquote>
<p>实现</p>
</blockquote>
<p>在具体应用接口隔离原则时，应该根据以下几个规则来衡量。</p>
<ul>
<li>接口尽量小，但是要有限度。一个接口只服务于一个子模块或业务逻辑。</li>
<li>为依赖接口的类定制服务。只提供调用者需要的方法，屏蔽不需要的方法。</li>
<li>了解环境，拒绝盲从。每个项目或产品都有选定的环境因素，环境不同，接口拆分的标准就不同深入了解业务逻辑。</li>
<li>提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。</li>
</ul>
<blockquote>
<p>作用</p>
</blockquote>
<p>接口隔离原则是为了约束接口、降低类对接口的依赖性，遵循接口隔离原则有以下 5 个优点。</p>
<ul>
<li><p>将臃肿庞大的接口分解为多个粒度小的接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性。</p>
</li>
<li><p>接口隔离提高了系统的内聚性，减少了对外交互，降低了系统的耦合性。</p>
</li>
<li><p>如果接口的粒度大小定义合理，能够保证系统的稳定性；但是，如果定义过小，则会造成接口数量过多，使设计复杂化；如果定义太大，灵活性降低，无法提供定制服务，给整体项目带来无法预料的风险。</p>
</li>
<li><p>使用多个专门的接口还能够体现对象的层次，因为可以通过接口的继承，实现对总接口的定义。</p>
</li>
<li><p>能减少项目工程中的代码冗余。过大的大接口里面通常放置许多不用的方法，当实现这个接口的时候，被迫设计冗余的代码。</p>
</li>
</ul>
<br>

<h3 id="1-6-迪米特法则"><a href="#1-6-迪米特法则" class="headerlink" title="1.6 迪米特法则"></a>1.6 迪米特法则</h3><blockquote>
<p>定义</p>
</blockquote>
<p>如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。</p>
<blockquote>
<p>实现</p>
</blockquote>
<ul>
<li><p>从依赖者的角度来说，只依赖应该依赖的对象。</p>
</li>
<li><p>从被依赖者的角度说，只暴露应该暴露的方法。</p>
</li>
</ul>
<blockquote>
<p>作用</p>
</blockquote>
<p>迪米特法则要求限制软件实体之间通信的宽度和深度，正确使用迪米特法则将有以下两个优点。</p>
<ul>
<li><p>降低了类之间的耦合度，提高了模块的相对独立性。</p>
</li>
<li><p>由于亲合度降低，从而提高了类的可复用率和系统的扩展性。</p>
</li>
</ul>
<br>

<h2 id="2-设计模式"><a href="#2-设计模式" class="headerlink" title="2. 设计模式"></a>2. 设计模式</h2><br>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/41682/image-20210413121858931.png" class="" title="DesignPrinciple">



<h3 id="2-1-单例模式-Singleton"><a href="#2-1-单例模式-Singleton" class="headerlink" title="2.1 单例模式-Singleton"></a>2.1 单例模式-Singleton</h3><blockquote>
<p>定义</p>
</blockquote>
<p>一个类只有一个实例，且该类能自行创建这个实例</p>
<blockquote>
<p>特点</p>
</blockquote>
<ol>
<li>单例类只有一个实例对象。</li>
<li>该单例对象必须由单例类自行创建。</li>
<li>单例类对外提供一个访问该单例的全局访问点。</li>
</ol>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>单例模式可以保证内存中只有一个实例，减少了内存的开销。</li>
<li>可以避免对资源的多重占用。</li>
<li>单例模式设置全局访问点，可以优化和共享资源的访问。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>单例模式一般没有接口，扩展困难，如果要扩展，则除了修改原来的代码，没有第二种途径，违背开闭原则。</li>
<li>在并发测试中，单例模式不利于代码调试。在调试过程中，如果单例中的代码没有执行完，也不能模拟生成一个新的对象。</li>
<li>单例模式的功能代码通常写在一个类中，如果功能设计不合理，则很容易违背单一职责原则。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>单例类</li>
<li>访问类</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<ul>
<li>懒汉式单例</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.singleton.pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.singeleton.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: LazySingleton &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 懒汉式单例 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 特点：</span></span><br><span class="line"><span class="comment"> * 类加载时没有生成单例，只有第一次调用getInstance方法时才会创建这个单例</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* volatile: 具有可见性、有序性，不具备原子性</span></span><br><span class="line"><span class="comment">    volatile声明变量的值可能随时会被其他线程修改，</span></span><br><span class="line"><span class="comment">    使用volatile修饰的变量会强制将修改的值立即写入主存，</span></span><br><span class="line"><span class="comment">    主存中值的更新会使缓存中的值失效。</span></span><br><span class="line"><span class="comment">    volatile不会让线程阻塞，响应速度比synchronized快 */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// volatile保证instance在所有线程中同步可见</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> LazySingleton instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// private避免类在外部被实例化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加锁同步，保证getInstance()只能被一个线程调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> LazySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> LazySingleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>饿汉式单例</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.singleton.pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.singeleton.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: HungrySingleton &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 饿汉式单例 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 特点：</span></span><br><span class="line"><span class="comment"> * 类一旦加载就创建一个单例，保证在调用getInstance()之前单例就已经存在</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungrySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 在类加载时就创建一个静态对象供系统使用，以后不再改变，</span></span><br><span class="line"><span class="comment">    所以是线程安全的，可以直接用于多线程而不会出现问题 */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HungrySingleton instance = <span class="keyword">new</span> HungrySingleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungrySingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungrySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-2-原型模式-Prototype"><a href="#2-2-原型模式-Prototype" class="headerlink" title="2.2 原型模式-Prototype"></a>2.2 原型模式-Prototype</h3><blockquote>
<p>定义</p>
</blockquote>
<p>用一个已经创建的实例，通过复制该原型对象来创建一个和原型相同或者相似的新对象</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>Java自带的原型模式基于内存二进制流的复制，在性能上比直接new一个对象更加优良。</li>
<li>可以使用深克隆方式保存对象的状态，使用原型模式将对象复制一份，并将其状态保存起来，简化了创建对象的过程，以便在需要的时候使用（例如恢复到历史某一状态），可复制实现撤销操作。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>需要为每一个类都配置一个clone方法。</li>
<li>clone方法位于类的内部，当对于已有类进行改造的时候，需要修改代码，违背了开闭原则。</li>
<li>当实现深克隆时，需要编写较为复杂的代码，而且当对象之间存在多重嵌套引用时，为了实现深克隆，每一层对象对应的类都必须支持深克隆，实现起来会比较麻烦。因此，浅克隆和深克隆需要需要运用得当。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象原型类：规定了具体原型对象必须实现的接口。</li>
<li>具体原型类：实现抽象原型类的clone()方法，它是可被复制的对象。</li>
<li>访问类：使用具体原型类中的clone()方法类复制新的对象。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.prototype.pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.prototype.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: Prototype &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 原型模式浅克隆 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; 特点：</span></span><br><span class="line"><span class="comment"> * 浅克隆：创建一个新对象，新对象的属性和原来对象完全相同，对于非基本类型属性，扔指向原有属性所指向的对象的内存地址</span></span><br><span class="line"><span class="comment"> * 深克隆：创建一个对象，属性中引用的对象也会被克隆，不再指向原有对象地址</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Prototype</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Logger log = Logger.getLogger(Prototype.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        RealizeType realizeType1 = <span class="keyword">new</span> RealizeType();</span><br><span class="line">        RealizeType realizeType2 = (RealizeType) realizeType1.clone();</span><br><span class="line">        log.info(<span class="string">&quot;realizeType1 == realizeType2 ? &quot;</span> + (realizeType1 == realizeType2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealizeType</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(RealizeType.class);</span><br><span class="line"></span><br><span class="line">    RealizeType() &#123;</span><br><span class="line">        log.info(<span class="string">&quot;原型创建&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;原型复制&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-3-简单工厂模式-Simple-Factory"><a href="#2-3-简单工厂模式-Simple-Factory" class="headerlink" title="2.3 简单工厂模式-Simple Factory"></a>2.3 <del>简单工厂模式-Simple Factory</del></h3><blockquote>
<p>定义</p>
</blockquote>
<p>定义一个创建产品对象的工厂接口，将产品对象的实际创建工作推迟到具体子工厂类当中。</p>
<blockquote>
<p>按照业务场景划分，工厂模式有3种实现方式</p>
</blockquote>
<p><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="../../../../Java/DesignPatternNote/DesignPattern/image-20201111164349538.png" alt="image-20201111164349538"></p>
<center>
    <font face="Kristen ITC" color="#555555" font-size=100px>三种实现方式</font><br>
</center>



<blockquote>
<p>说明</p>
</blockquote>
<p>简单工厂模式有一个具体的工厂类，可以生产多个不同的产品，属于创建型设计模式，但是简单工厂模式不在GOF23中设计模式之列。</p>
<p>在简单工厂模式中创建实例的方法通常为静态(static)方法，因此简单工厂模式(Simple Factory Pattern)又叫做静态工厂方法模式(Static Factory Method Pattern)。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>工厂类包含必要的逻辑判断，可以决定在什么时候创建哪一个产品的实例。客户端可以免除直接创建产品对象的职责，很方便的创建响应的产品。工厂和产品的职责区分明确。</li>
<li>客户端无需知道所创建具体产品的类名，只需知道参数即可。</li>
<li>也可以引入配置文件，在不修改客户端的代码的情况下更换和添加新的具体产品类。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>简单工厂模式的工厂类单一，负责所有产品的创建，职责过重，一旦异常，整个系统将受到影响。且工厂类代码会非常臃肿，违背高聚合原则。</li>
<li>使用简单工厂模式会增加系统中类的个数(引入新的工厂类)，增加系统的复杂度和理解难度。</li>
<li>系统拓展困难，一旦增加新产品不得不修改工厂逻辑，在产品类型较多时，可能造成逻辑过于复杂。</li>
</ul>
<blockquote>
<p>应用场景</p>
</blockquote>
<p>对于产品种类相对较少的情况，考虑使用简单工厂模式。使用简单工厂模式的客户端只需要传入工厂类的参数，不需要关心如何创建对象的逻辑，可以很方便地创建所需产品。</p>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>简单工厂(Simple Factory)：是简单工厂模式的核心，负责实现创建所有实例的内部逻辑。工厂类创建产品类的方法可以被外界直接调用，创建所需的产品对象。</li>
<li>抽象产品(Abstract Product)：是简单工厂创建的所有对象的父亲，负责描述所有实例共有的公共接口。</li>
<li>具体产品(Concrete Product)：是简单工厂模式的创建目标。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.simpleFactory.pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.simpleactory.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: Client &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 简单工厂模式 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;测试类&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactoryDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = Logger.getLogger(SimpleFactoryDemo.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;输入产品型号：&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> choice = scanner.nextInt();</span><br><span class="line">            <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>: log.info(<span class="string">&quot;成功退出&quot;</span>); <span class="keyword">return</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>: SimpleFactory.makeProduct(Constant.PRODUCT_1).show(); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>: SimpleFactory.makeProduct(Constant.PRODUCT_2).show(); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>: SimpleFactory.makeProduct(Constant.PRODUCT_3).show(); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>: log.info(<span class="string">&quot;该产品不存在，请重新输入！&quot;</span>); <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象产品</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">product</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     枚举所有产品</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Constant</span> </span>&#123;</span><br><span class="line">    PRODUCT_1,</span><br><span class="line">    PRODUCT_2,</span><br><span class="line">    PRODUCT_3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体产品1</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct1</span> <span class="keyword">implements</span> <span class="title">product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteProduct1.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体产品1显示...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体产品2</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct2</span> <span class="keyword">implements</span> <span class="title">product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteProduct2.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体产品2显示...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体产品3</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct3</span> <span class="keyword">implements</span> <span class="title">product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteProduct3.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体产品3显示...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     简单工厂</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> product <span class="title">makeProduct</span><span class="params">(Constant c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">            <span class="keyword">case</span> PRODUCT_1:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct1();</span><br><span class="line">            <span class="keyword">case</span> PRODUCT_2:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct2();</span><br><span class="line">            <span class="keyword">case</span> PRODUCT_3:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct3();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-4-工厂方法模式-Factory-Method"><a href="#2-4-工厂方法模式-Factory-Method" class="headerlink" title="2.4 工厂方法模式-Factory Method"></a>2.4 工厂方法模式-Factory Method</h3><blockquote>
<p>说明</p>
</blockquote>
<p>工厂方法模式是对简单工厂模式的进一步抽象化，其好处是可以使系统在不修改原来代码的情况下引进新的产品，即满足开闭原则。</p>
<p>工厂方法模式考虑的是一种工厂负责一类产品的生产，畜牧场只养动物、电视机厂只生产电视机、计算机软件学院只培养计算机软件专业的学生等。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>用户只需要具体工厂的名称就可得到所要的产品，无需知道产品的具体创建过程。</li>
<li>灵活性增强，对于新产品的创建，只需多写一个相应的工厂类。</li>
<li>典型的解耦框架。高层模块只需要知道产品的抽象类，无需关系其他实现类，满足迪米特法则、依赖倒置原则和里式替换原则。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>类的个数容易过多，增加复杂度。</li>
<li>增加了系统的抽象性和理解难度。</li>
<li>一个工厂只能生产一种产品，此弊端可使用抽象工厂模式解决。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象工厂(Abstract Factory)：提供了创建产品的接口，调用者通过它访问具体工厂的工厂方法类创建产品。</li>
<li>具体工厂(Concrete Factory)：主要是实现抽象工厂中的抽象方法，完成具体产品的创建。</li>
<li>抽象产品(Abstract Product)：定义了产品的规范，描述了产品的主要特性和功能。</li>
<li>具体产品(Concrete Product)：实现了抽象产品角色定义的接口，由具体工厂来创建，它同具体工厂之间一一对应。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.factoryMethod.pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Document;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.NodeList;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.SAXException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilder;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.ParserConfigurationException;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.factoryMethod.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: FactoryMethod &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 工厂方法模式 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;测试类&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryMethodDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = Logger.getLogger(FactoryMethodDemo.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 读取XML配置文件，提取具体类名，返回实例对象集合</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> List&lt;Object&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SAXException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ParserConfigurationException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassNotFoundException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalAccessException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InstantiationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Object&gt; <span class="title">getObjects</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException, SAXException, ParserConfigurationException,  ClassNotFoundException, IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line">        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();</span><br><span class="line">        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();</span><br><span class="line">        Document document = documentBuilder.parse(<span class="keyword">new</span> File(filePath));</span><br><span class="line">        NodeList nodeList = document.getElementsByTagName(<span class="string">&quot;className&quot;</span>);</span><br><span class="line">        List&lt;Object&gt; objects = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nodeList.getLength(); i++) &#123;</span><br><span class="line">            String packageName = FactoryMethodDemo.class.getPackage().getName();</span><br><span class="line">            String className = nodeList.item(i).getTextContent();</span><br><span class="line">            Class&lt;?&gt; c = Class.forName(packageName + <span class="string">&quot;.&quot;</span> + className);</span><br><span class="line">            objects.add(c.newInstance());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> objects;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;Object&gt; objects = getObjects(<span class="string">&quot;src/main/java/top/parak/factoryMethod/pattern/config.xml&quot;</span>);</span><br><span class="line">            objects.stream().forEach( o -&gt; &#123;</span><br><span class="line">                AbstractFactory factory = (AbstractFactory) o;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    factory.produce().show();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    log.error(e.getMessage());</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;P&gt;</span></span><br><span class="line"><span class="comment"> *     抽象产品</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">product</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体产品1</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct1</span> <span class="keyword">implements</span> <span class="title">product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteProduct1.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体产品1展示...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体产品2</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct2</span> <span class="keyword">implements</span> <span class="title">product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteProduct2.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体产品2展示...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体产品3</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct3</span> <span class="keyword">implements</span> <span class="title">product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteProduct3.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体产品3展示...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象工厂</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> product <span class="title">produce</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体工厂1</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory1</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteFactory1.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> product <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体工厂1生产中...&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;===&gt;产品1生产完成&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体工厂2</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory2</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteFactory2.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> product <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体工厂2生产中...&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;===&gt;产品2生产完成&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体工厂3</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactory3</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteFactory3.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> product <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体工厂3生产中...&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;===&gt;产品3生产完成&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>config.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">className</span>&gt;</span>ConcreteFactory1<span class="tag">&lt;/<span class="name">className</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">className</span>&gt;</span>ConcreteFactory2<span class="tag">&lt;/<span class="name">className</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">className</span>&gt;</span>ConcreteFactory3<span class="tag">&lt;/<span class="name">className</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2020-10-17 11:25:34 PARAK INFO  [top.parak.factoryMethod.pattern.ConcreteFactory1] [thread: main] [FactoryMethod.java: 143] - 具体工厂1生产中...</span><br><span class="line">2020-10-17 11:25:35 PARAK INFO  [top.parak.factoryMethod.pattern.ConcreteFactory1] [thread: main] [FactoryMethod.java: 149] - ===&gt;产品1生产完成</span><br><span class="line">2020-10-17 11:25:35 PARAK INFO  [top.parak.factoryMethod.pattern.ConcreteProduct1] [thread: main] [FactoryMethod.java: 98] - 具体产品1展示...</span><br><span class="line">2020-10-17 11:25:35 PARAK INFO  [top.parak.factoryMethod.pattern.ConcreteFactory2] [thread: main] [FactoryMethod.java: 162] - 具体工厂2生产中...</span><br><span class="line">2020-10-17 11:25:36 PARAK INFO  [top.parak.factoryMethod.pattern.ConcreteFactory2] [thread: main] [FactoryMethod.java: 168] - ===&gt;产品2生产完成</span><br><span class="line">2020-10-17 11:25:36 PARAK INFO  [top.parak.factoryMethod.pattern.ConcreteProduct2] [thread: main] [FactoryMethod.java: 110] - 具体产品2展示...</span><br><span class="line">2020-10-17 11:25:36 PARAK INFO  [top.parak.factoryMethod.pattern.ConcreteFactory3] [thread: main] [FactoryMethod.java: 181] - 具体工厂3生产中...</span><br><span class="line">2020-10-17 11:25:37 PARAK INFO  [top.parak.factoryMethod.pattern.ConcreteFactory3] [thread: main] [FactoryMethod.java: 187] - ===&gt;产品3生产完成</span><br><span class="line">2020-10-17 11:25:37 PARAK INFO  [top.parak.factoryMethod.pattern.ConcreteProduct3] [thread: main] [FactoryMethod.java: 122] - 具体产品3展示...</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-5-抽象工厂模式-Abstract-Factory"><a href="#2-5-抽象工厂模式-Abstract-Factory" class="headerlink" title="2.5 抽象工厂模式-Abstract Factory"></a>2.5 抽象工厂模式-Abstract Factory</h3><blockquote>
<p>说明</p>
</blockquote>
<p>工厂方法模式：一个工厂只负责一类产品的生产，像小作坊，电器厂只生产电风扇。<br>抽象工厂模式：一个工厂负责多种相关产品的生产，像综合型工厂，电器厂生产电视机、空调和冰箱等。</p>
<p>抽象工厂模式是工厂方法模式的升级版本，工厂方法模式只生产一个等级的产品，抽象工厂模式可生产多个等级的产品。</p>
<blockquote>
<p>定义</p>
</blockquote>
<p>一种为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构。</p>
<blockquote>
<p>使用条件</p>
</blockquote>
<ul>
<li>系统中有多个产品族，每个具体工厂创建同一族但属于不同等级结构的产品。</li>
<li>系统一次只可能消费其中某一族产品，即同族的产品一起使用。</li>
</ul>
<blockquote>
<p>优点</p>
</blockquote>
<p>除了包含工厂方法模式的优点，还有如下优点：</p>
<ul>
<li>可以在类的内部对产品族中相关联的多等级产品共同管理，而不必专门引入多个新的类来进行管理。</li>
<li>当需要产品族时，抽象工厂可以保证客户端始终只使用同一个产品的产品族。</li>
<li>抽象工厂增强了程序的可扩展性，当增加一个新的产品族时，不需要修改原代码，满足开闭原则。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<p>当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改。增加了系统的抽象性和理解难度。</p>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象工厂(Abstract Factory)：提供了创建产品的接口，它包含多个创建产品的方法，可以创建多个不同等级的产品。</li>
<li>具体工厂(Concrete Factory)：主要是实现抽象工厂中的多个抽象方法，完成具体产品的创建。</li>
<li>抽象产品(Abstract Product)：定义了产品的规范，描述了产品的主要特性和功能，抽象工厂模式有多个抽象产品。</li>
<li>具体产品(Concrete Product)：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间是多对一的关系。</li>
</ul>
<blockquote>
<p>实例</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.abstractFactory.example;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.abstractFactory.example &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: Farm &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 抽象工厂模式模拟农场 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.border.TitledBorder;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     农场测试类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FarmDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> JFrame frame = <span class="keyword">new</span> JFrame(<span class="string">&quot;FarmDemo&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> JDesktopPane desktopPane = <span class="keyword">new</span> JDesktopPane();</span><br><span class="line">    <span class="keyword">private</span> JPanel contentPane = (JPanel) frame.getContentPane();</span><br><span class="line">    <span class="keyword">private</span> JPanel leftPanel = <span class="keyword">new</span> JPanel();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ImageIcon backIcon = <span class="keyword">new</span> ImageIcon(<span class="string">&quot;img/Farm.jpg&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JLabel rightLabel = <span class="keyword">new</span> JLabel(backIcon);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JLabel tipLabel = <span class="keyword">new</span> JLabel(<span class="string">&quot;选择产品&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JButton produceButton = <span class="keyword">new</span> JButton(<span class="string">&quot;开始生产&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Font font = <span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>, Font.PLAIN, <span class="number">20</span>);</span><br><span class="line">    <span class="keyword">private</span> JComboBox&lt;String&gt; productComboBox = <span class="keyword">new</span> JComboBox&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> JTextArea textArea = <span class="keyword">new</span> JTextArea();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AbstractFarm baoXingFarm = <span class="keyword">new</span> BaoXingFarm();</span><br><span class="line">    <span class="keyword">private</span> AbstractFarm zhouQiaoFarm = <span class="keyword">new</span> ZhouQiaoFarm();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FarmDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        contentPane.setOpaque(<span class="keyword">false</span>);</span><br><span class="line">        contentPane.setLayout(<span class="keyword">null</span>);</span><br><span class="line">        rightLabel.setBounds(<span class="number">300</span>, <span class="number">0</span>, backIcon.getIconWidth(), backIcon.getIconHeight());</span><br><span class="line">        desktopPane.setLayout(<span class="keyword">null</span>);</span><br><span class="line">        desktopPane.add(rightLabel, <span class="keyword">new</span> Integer(Integer.MIN_VALUE));</span><br><span class="line">        leftPanel.setBackground(Color.CYAN);</span><br><span class="line">        leftPanel.setBounds(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">420</span>);</span><br><span class="line">        desktopPane.add(leftPanel);</span><br><span class="line"></span><br><span class="line">        leftPanel.setLayout(<span class="keyword">null</span>);</span><br><span class="line">        tipLabel.setFont(font);</span><br><span class="line">        tipLabel.setBounds(<span class="number">5</span>, <span class="number">10</span>, <span class="number">90</span>, <span class="number">30</span>);</span><br><span class="line">        leftPanel.add(tipLabel);</span><br><span class="line">        String[] products = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;马&quot;</span>, <span class="string">&quot;牛&quot;</span>, <span class="string">&quot;青菜&quot;</span>, <span class="string">&quot;白菜&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (String product : products) &#123;</span><br><span class="line">            productComboBox.addItem(product);</span><br><span class="line">        &#125;</span><br><span class="line">        productComboBox.setFont(font);</span><br><span class="line">        produceButton.setFont(font);</span><br><span class="line">        productComboBox.setBounds(<span class="number">90</span>, <span class="number">10</span>, <span class="number">80</span>, <span class="number">30</span>);</span><br><span class="line">        leftPanel.add(productComboBox);</span><br><span class="line">        produceButton.setBounds(<span class="number">180</span>, <span class="number">10</span>, <span class="number">115</span>, <span class="number">30</span>);</span><br><span class="line">        leftPanel.add(produceButton);</span><br><span class="line">        produceButton.addActionListener(<span class="keyword">new</span> ProductAction());</span><br><span class="line"></span><br><span class="line">        textArea.setFont(<span class="keyword">new</span> Font(<span class="string">&quot;微软雅黑&quot;</span>, Font.PLAIN, <span class="number">14</span>));</span><br><span class="line">        JScrollPane scrollPane = <span class="keyword">new</span> JScrollPane(textArea);</span><br><span class="line">        scrollPane.setBounds(<span class="number">10</span>, <span class="number">50</span>, <span class="number">280</span>, <span class="number">360</span>);</span><br><span class="line">        scrollPane.setBorder(<span class="keyword">new</span> TitledBorder(<span class="string">&quot;生产日志&quot;</span>));</span><br><span class="line">        scrollPane.getViewport().setOpaque(<span class="keyword">false</span>);</span><br><span class="line">        leftPanel.add(scrollPane);</span><br><span class="line"></span><br><span class="line">        frame.setContentPane(desktopPane);</span><br><span class="line">        frame.setBounds(<span class="number">300</span>,<span class="number">300</span>,<span class="number">1500</span>,<span class="number">500</span>);</span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ProductAction</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">            JInternalFrame internalFrame = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">switch</span> (productComboBox.getSelectedItem().toString()) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;马&quot;</span>:</span><br><span class="line">                    internalFrame = zhouQiaoFarm.produceAnimalProduct().showImage();</span><br><span class="line">                    textArea.append(getTime() + <span class="string">&quot; 周桥农场：新马出生\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;牛&quot;</span>:</span><br><span class="line">                    internalFrame = baoXingFarm.produceAnimalProduct().showImage();</span><br><span class="line">                    textArea.append(getTime() + <span class="string">&quot; 宝兴农场：新牛出生\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;青菜&quot;</span>:</span><br><span class="line">                    internalFrame = baoXingFarm.producePlantProduct().showImage();</span><br><span class="line">                    textArea.append(getTime() + <span class="string">&quot; 宝兴农场：青菜出生\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;白菜&quot;</span>:</span><br><span class="line">                    internalFrame = zhouQiaoFarm.producePlantProduct().showImage();</span><br><span class="line">                    textArea.append(getTime() + <span class="string">&quot; 周桥农场：白菜出生\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            internalFrame.setBounds(index + <span class="number">300</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">350</span>);</span><br><span class="line">            desktopPane.add(internalFrame);</span><br><span class="line">            index = (index + <span class="number">300</span>) % <span class="number">1200</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> String <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).format(<span class="keyword">new</span> Date());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> FarmDemo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象产品：动物类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AnimalProduct</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JInternalFrame <span class="title">showImage</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象产品：植物类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PlantProduct</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JInternalFrame <span class="title">showImage</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     动物产品展示窗口</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimalFrame</span> <span class="keyword">extends</span> <span class="title">JInternalFrame</span> <span class="keyword">implements</span> <span class="title">AnimalProduct</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AnimalFrame</span><span class="params">(String animalName, String imagePath)</span> </span>&#123;</span><br><span class="line">        Container contentPane = getContentPane();</span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line">        panel.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">        panel.setBorder(BorderFactory.createTitledBorder(<span class="string">&quot;动物：&quot;</span> + animalName));</span><br><span class="line">        JScrollPane scrollPane = <span class="keyword">new</span> JScrollPane(panel);</span><br><span class="line">        contentPane.add(scrollPane, BorderLayout.CENTER);</span><br><span class="line">        JLabel label = <span class="keyword">new</span> JLabel(<span class="keyword">new</span> ImageIcon(imagePath));</span><br><span class="line">        panel.add(label);</span><br><span class="line">        pack();</span><br><span class="line">        setTitle(animalName);</span><br><span class="line">        setVisible(<span class="keyword">false</span>);</span><br><span class="line">        setClosable(<span class="keyword">true</span>);</span><br><span class="line">        setIconifiable(<span class="keyword">true</span>);</span><br><span class="line">        setResizable(<span class="keyword">false</span>);</span><br><span class="line">        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JInternalFrame <span class="title">showImage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     植物产品展示窗口</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PlantFrame</span> <span class="keyword">extends</span> <span class="title">JInternalFrame</span> <span class="keyword">implements</span> <span class="title">PlantProduct</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PlantFrame</span><span class="params">(String plantName, String imagePath)</span> </span>&#123;</span><br><span class="line">        Container contentPane = getContentPane();</span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel();</span><br><span class="line">        panel.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">        panel.setBorder(BorderFactory.createTitledBorder(<span class="string">&quot;植物：&quot;</span> + plantName));</span><br><span class="line">        JScrollPane scrollPane = <span class="keyword">new</span> JScrollPane(panel);</span><br><span class="line">        contentPane.add(scrollPane, BorderLayout.CENTER);</span><br><span class="line">        JLabel label = <span class="keyword">new</span> JLabel(<span class="keyword">new</span> ImageIcon(imagePath));</span><br><span class="line">        panel.add(label);</span><br><span class="line">        pack();</span><br><span class="line">        setTitle(plantName);</span><br><span class="line">        setVisible(<span class="keyword">false</span>);</span><br><span class="line">        setClosable(<span class="keyword">true</span>);</span><br><span class="line">        setIconifiable(<span class="keyword">true</span>);</span><br><span class="line">        setResizable(<span class="keyword">false</span>);</span><br><span class="line">        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JInternalFrame <span class="title">showImage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体动物产品：马类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Horse</span> <span class="keyword">extends</span> <span class="title">AnimalFrame</span>  </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Horse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">&quot;马-🐴&quot;</span>, <span class="string">&quot;img/Horse.jpg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体动物产品：牛类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cattle</span> <span class="keyword">extends</span> <span class="title">AnimalFrame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cattle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">&quot;牛-🐮&quot;</span>, <span class="string">&quot;img/Cattle.jpg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体植物产品：青菜</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vegetable</span> <span class="keyword">extends</span> <span class="title">PlantFrame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Vegetable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">&quot;青菜&quot;</span>, <span class="string">&quot;img/Vegetable.jpg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体植物产品：白菜</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cabbage</span> <span class="keyword">extends</span> <span class="title">PlantFrame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cabbage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">&quot;白菜&quot;</span>, <span class="string">&quot;img/Cabbage.jpg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象工厂：农场类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AbstractFarm</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> AnimalProduct <span class="title">produceAnimalProduct</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlantProduct <span class="title">producePlantProduct</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体工厂：宝兴农场</span></span><br><span class="line"><span class="comment"> *     生产产品：牛、青菜</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaoXingFarm</span> <span class="keyword">implements</span> <span class="title">AbstractFarm</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(BaoXingFarm.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AnimalProduct <span class="title">produceAnimalProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;宝兴农场===&gt;新牛出生&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cattle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlantProduct <span class="title">producePlantProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;宝兴农场===&gt;青菜长成&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Vegetable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体农场：周桥农场</span></span><br><span class="line"><span class="comment"> *     生产产品：马、白菜</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZhouQiaoFarm</span> <span class="keyword">implements</span> <span class="title">AbstractFarm</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ZhouQiaoFarm.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AnimalProduct <span class="title">produceAnimalProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;周桥农场===&gt;新马出生&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Horse();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlantProduct <span class="title">producePlantProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;周桥农场===&gt;白菜长成&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cabbage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果</p>
</blockquote>
<p><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="../../../../Java/DesignPatternNote/DesignPattern/image-20201017185342528.png" alt="image-20201017185342528"></p>
<br>

<h3 id="2-6-建造者模式-Builder"><a href="#2-6-建造者模式-Builder" class="headerlink" title="2.6 建造者模式-Builder"></a>2.6 建造者模式-Builder</h3><blockquote>
<p>定义</p>
</blockquote>
<p>将一个复杂对象的构造与它的表示分离，使同样的构造过程可以创建不同的表示。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>封装性好，构建和表示分离。</li>
<li>扩展性好，各个具体的建造者相互独立，有利于系统的解耦。</li>
<li>客户端不必知道产品内部组成的细节，建造者可以对创建过程逐步细化，而不对其他模块产生任何影响，便于控制细节风险。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>产品的组成部分必须相同，这限制了其使用范围。</li>
<li>如果产品的内部变化复杂，如果产品内部发生变化，则建造者也要同步修改，后期维护成本较大。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li><p>产品角色(Product)：包含多个组件的复杂对象，由具体建造者来创建其各个零部件。</p>
</li>
<li><p>抽象建造者(Abstract Builder)：包含创建产品各个子部件的抽象方法的接口，通常还包含一个返回复杂产品的方法getResult()。</p>
</li>
<li><p>具体建造者(Concrete Builder)：实现抽象建造者的接口，完成复杂产品的各个部件的具体创建方法。</p>
</li>
<li><p>指挥者(Director)：它调用建造者对象中的部件构造与装配方法完成复杂对象的创建，在指挥者中不涉及具体产品的信息。</p>
</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.builder.pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.builder.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: Builder &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 建造者模式 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;测试类&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuilderDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = Logger.getLogger(BuilderDemo.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Builder builder = <span class="keyword">new</span> ConcreteBuilder();</span><br><span class="line">        Director director = <span class="keyword">new</span> Director(builder);</span><br><span class="line">        Product product = director.construct();</span><br><span class="line">        log.info(product.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象产品类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String componentA;</span><br><span class="line">    <span class="keyword">private</span> String componentB;</span><br><span class="line">    <span class="keyword">private</span> String componentC;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象建造者</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Product product = <span class="keyword">new</span> Product();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildComponentA</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildComponentB</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildComponentC</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">getProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体建造者</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteBuilder</span> <span class="keyword">extends</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildComponentA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        product.setComponentA(<span class="string">&quot;建造零件A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildComponentB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        product.setComponentB(<span class="string">&quot;建造零件B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildComponentC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        product.setComponentC(<span class="string">&quot;建造零件C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;P&gt;</span></span><br><span class="line"><span class="comment"> *     指挥者</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Builder builder;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.builder = builder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        builder.buildComponentA();</span><br><span class="line">        builder.buildComponentB();</span><br><span class="line">        builder.buildComponentC();</span><br><span class="line">        <span class="keyword">return</span> builder.getProduct();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-7-代理模式-Proxy"><a href="#2-7-代理模式-Proxy" class="headerlink" title="2.7 代理模式-Proxy"></a>2.7 代理模式-Proxy</h3><blockquote>
<p>定义</p>
</blockquote>
<p>由于某些原因需要给某对象提供一个代理以控制对该对象的访问。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>代理模式在客户端和目标对象之间起到一个中介作用和保护目标对象的作用。</li>
<li>代理对象可以扩展对象的功能。</li>
<li>代理模式能将客户端与目标对象分离，在一定程度上降低系统的耦合度，增加了系统的可扩展性。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>代理模式会造成系统设计中类的数量增加。</li>
<li>代理模式能将客户端与目标对象之间增加一个代理对象，会造成请求处理速度变慢。</li>
<li>增加了系统的复杂度。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象主题(Subject)：通过接口或抽象类声明真实主题和代理对象实现的业务方法。</li>
<li>真实主题(Real Subject)：实现了抽象主题中的具体业务，是代理对象锁代表的真实对象，是最终要引用的对象。</li>
<li>代理(Proxy)：提供了与真实主题相同的接口，其内部含有对真实主题的引用，它可以访问、控制或扩展真实主题的功能。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.proxy.pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.proxy.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: Proxy &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 代理模式 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;测试类&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Proxy proxy = <span class="keyword">new</span> Proxy();</span><br><span class="line">        proxy.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象主题</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     真实主题</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(RealSubject.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;访问真实主题...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     代理</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(Proxy.class);</span><br><span class="line">    <span class="keyword">private</span> RealSubject realSubject;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (realSubject == <span class="keyword">null</span>) &#123;</span><br><span class="line">            realSubject = <span class="keyword">new</span> RealSubject();</span><br><span class="line">            preHandler();</span><br><span class="line">            realSubject.request();</span><br><span class="line">            postHandler();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;访问真实主题之前的预处理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;访问真实主题之后的后续处理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-8-适配器模式-Adapter"><a href="#2-8-适配器模式-Adapter" class="headerlink" title="2.8 适配器模式-Adapter"></a>2.8 适配器模式-Adapter</h3><blockquote>
<p>定义</p>
</blockquote>
<p>将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>客户端通过适配器可以透明地调用目标接口。</li>
<li>复用了现存的类，程序员不需要修改原有代码而复用现有的适配者类。</li>
<li>将目标类与适配者类解耦，解决了目标类和适配者类接口不一致的问题。</li>
<li>在很多业务场景中符合开闭原则。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>适配器编写过程需要结合业务场景全面考虑，可能会增加系统的复杂性。</li>
<li>增加代码阅读难度，过多使用适配器会使系统代码变得凌乱。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>目标接口(Target)：当前系统业务所期待的接口，可以是抽象类或者接口。</li>
<li>适配者类(Adaptee)：被访问和适配的现存组件库中的组件接口。</li>
<li>适配器类(Adapter)：转换器，通过继承或引用适配者的对象，把适配者接口转换目标接口，让客户端目标接口的格式访问适配者。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.adapter.pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.adapter.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: Adapter &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 适配器模式 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;P&gt;测试类&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Target target = <span class="keyword">new</span> Adapter();</span><br><span class="line">        target.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     目标接口</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     适配者接口</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(Adaptee.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">specificRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;适配者中的业务代码被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     适配器类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Adaptee</span> <span class="keyword">implements</span> <span class="title">Target</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        specificRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-9-桥接模式-Bridge"><a href="#2-9-桥接模式-Bridge" class="headerlink" title="2.9 桥接模式-Bridge"></a>2.9 桥接模式-Bridge</h3><blockquote>
<p>定义</p>
</blockquote>
<p>将抽象与实现分离，使它们可以独立变化。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>抽象与实现分离，扩展能力强。</li>
<li>符合开闭原则。</li>
<li>符合合成复用原则。</li>
<li>其实现细节对客户透明。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>由于聚合关系建立在抽象层，要求开发者对抽象化进行设计与编程，能正确的识别出系统中两个独立变化的维度，这增加了系统的理解与设计难度。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象化角色(Abstraction)：定义抽象类，并包含一个对实现化对象的引用。</li>
<li>扩展抽象化角色(Refined Abstraction)：是抽象化角色的子类，实现父类中的业务方法，并通过组合关系调用实现化角色中的业务方法。</li>
<li>实现化角色(Implementor)：定义实现化角色的接口，供扩展抽象化角色调用。</li>
<li>具体实现化角色(Concrete Implementor)：给出实现化角色接口的具体实现。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.bridge.pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.bridge.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: Bridge &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 桥接模式 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;测试类&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BridgeDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Implementor implementor = <span class="keyword">new</span> ConcreteImplementorA();</span><br><span class="line">        Abstraction abstraction = <span class="keyword">new</span> RefinedAbstraction(implementor);</span><br><span class="line">        abstraction.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     实现化角色</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Implementor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationImpl</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体实现化角色</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteImplementorA</span> <span class="keyword">implements</span> <span class="title">Implementor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteImplementorA.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体实现化角色(Concrete Implementor)被访问&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象化角色</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Abstraction</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Implementor implementor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Abstraction</span><span class="params">(Implementor implementor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.implementor = implementor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     扩展抽象化角色</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RefinedAbstraction</span> <span class="keyword">extends</span> <span class="title">Abstraction</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(RefinedAbstraction.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">RefinedAbstraction</span><span class="params">(Implementor implementor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(implementor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;扩展抽象化角色(Refined Abstraction)被访问&quot;</span>);</span><br><span class="line">        implementor.operationImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-10-装饰模式-Decorator"><a href="#2-10-装饰模式-Decorator" class="headerlink" title="2.10 装饰模式-Decorator"></a>2.10 装饰模式-Decorator</h3><blockquote>
<p>定义</p>
</blockquote>
<p>在不改变现有对象结构的情况下，动态地给该对象增加一些职责的模式。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>装饰器是继承的有力补充，比继承灵活，在不改变原有对象的情况下，动态的给一个对象扩展功能，即插即用。</li>
<li>通过使用不用装饰类及这些装饰类的排列组合，可以实现不同效果。</li>
<li>装饰模式完全遵守开闭原则。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>装饰模式会增加许多子类，过度使用会增加程序的复杂性。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象构建角色(Component)：定义一个抽象接口以规范准备接附加责任的对象。</li>
<li>具体构建角色(Concrete Component)：实现抽象构件，通过装饰角色为其添加一些职责。</li>
<li>抽象装饰角色(Decorator)：继承抽象构件，并包含具体构件的实例，可以通过其子类扩展具体构件的功能。</li>
<li>具体装饰角色(Concrete Decorator)：实现抽象装饰的相关方法，并给具体构件对象添加附加的责任。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.decorator.pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.decorator.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: Decorator &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 装饰模式 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;测试类&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecoratorDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Component component1 = <span class="keyword">new</span> ConcreteComponent();</span><br><span class="line">        component1.operation();</span><br><span class="line">        Component component2 = <span class="keyword">new</span> ConcreteDecorator(component1);</span><br><span class="line">        component2.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象构件角色</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体构件角色</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponent</span> <span class="keyword">implements</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteComponent.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteComponent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;创建具体构件角色&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;调用具体构件角色的方法operation()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象装饰角色</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">implements</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Component component;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.component = component;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体装饰角色</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecorator</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteComponent.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteDecorator</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(component);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.operation();</span><br><span class="line">        addFunction();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;为具体构件角色增加额外的功能function()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-11-外观模式-Facade"><a href="#2-11-外观模式-Facade" class="headerlink" title="2.11 外观模式-Facade"></a>2.11 外观模式-Facade</h3><blockquote>
<p>定义</p>
</blockquote>
<p>通过为多个复杂的子系统提供一个一致的接口，而使这些子系统更加容易被访问。外观模式对外有一个统一接口，外部应用程序不用关心内部子系统的具体细节，这样会大大降低应用程序的复杂度，提高了程序的可维护性。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>降低了子系统与客户端之间的耦合度，使得子系统高的变化不会影响调用它的客户类。</li>
<li>对客户屏蔽了子系统组件，减少了客户处理的对象数目，并使得子系统使用起来更加容易。</li>
<li>降低了大型软件系统中的编译依赖性，简化了系统在不同平台之间的移植过程，因为编译一个子系统不会影响其他的子系统，也不会影响外观对象。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>不能很好地限制客户使用子系统类，很容易带来未知风险。</li>
<li>增加新的子系统可能需要修改外观类或客户端的源代码，违背了开闭原则。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>外观角色(Facade)：为多个子系统对外提供一个共同的接口。</li>
<li>子系统角色(Sub System)：实现系统的部分功能，客户可以通过外观角色访问它。</li>
<li>客户角色(Client)：通过一个外观角色访问各个子系统的功能。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.facade.pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/P&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.facade.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: Facade &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 外观模式 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;测试类&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FacadeDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Facade facade = <span class="keyword">new</span> Facade();</span><br><span class="line">        facade.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SubSys1 subSys1 = <span class="keyword">new</span> SubSys1();</span><br><span class="line">    <span class="keyword">private</span> SubSys2 subSys2 = <span class="keyword">new</span> SubSys2();</span><br><span class="line">    <span class="keyword">private</span> SubSys3 subSys3 = <span class="keyword">new</span> SubSys3();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        subSys1.method1();</span><br><span class="line">        subSys2.method2();</span><br><span class="line">        subSys3.method3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSys1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(SubSys1.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;子系统1的method1被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSys2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(SubSys2.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;子系统2的method2被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubSys3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(SubSys3.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;子系统3的method3被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-12-享元模式-Flyweight"><a href="#2-12-享元模式-Flyweight" class="headerlink" title="2.12 享元模式-Flyweight"></a>2.12 享元模式-Flyweight</h3><blockquote>
<p>定义</p>
</blockquote>
<p>运用共享技术来有效地支持大量细粒度对象的复用。</p>
<blockquote>
<p>优势</p>
</blockquote>
<p>相同对象只保存一份，这降低了系统中对象的数量，从而降低了系统中细粒度对象给内存带来的压力。</p>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>为了使对象可以共享，需要将一些不能共享的状态外部化，这将增加程序的复杂性。</li>
<li>读取享元模式的外部状态会使得运行时间稍微变长。</li>
</ul>
<blockquote>
<p>状态</p>
</blockquote>
<ul>
<li>内部状态：不会随着环境的改变而改变的可共享部分。</li>
<li>外部状态：随着环境改变而改变的不可以共享的部分。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象享元角色(Flyweight)：所有的具体享元类的基类，为具体享元规范需要实现的公共接口，非享元的外部状态以参数的形式通过方法传入。</li>
<li>具体享元角色(Concrete Flyweight)：实现抽象享元角色中所规定的接口。</li>
<li>非享元角色(Unsharable Flyweight)：是不可以共享的外部状态，它以参数的形式注入具体享元的相关方法中。</li>
<li>享元工厂角色(Flyweight Factory)：负责创建和管理享元角色。当客户对象请求的时候，享元工厂检查系统中是否存在符合要求的享元对象，如果存在则提供给客户；如果不存在的话，则创建一个新的享元对象。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.flyweight.pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.flyweight.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: Flyweight &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 享元模式 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"><span class="keyword">import</span> lombok.Setter;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;P&gt;测试类&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyweightDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FlyweightFactory factory = <span class="keyword">new</span> FlyweightFactory();</span><br><span class="line">        Flyweight f1 = factory.getFlyweight(<span class="string">&quot;K&quot;</span>);</span><br><span class="line">        Flyweight f2 = factory.getFlyweight(<span class="string">&quot;H&quot;</span>);</span><br><span class="line">        Flyweight f3 = factory.getFlyweight(<span class="string">&quot;I&quot;</span>);</span><br><span class="line">        Flyweight f4 = factory.getFlyweight(<span class="string">&quot;G&quot;</span>);</span><br><span class="line">        Flyweight f5 = factory.getFlyweight(<span class="string">&quot;H&quot;</span>);</span><br><span class="line">        f1.operation(<span class="keyword">new</span> UnsharedConcreteFlyweight(<span class="string">&quot;第一次调用K&quot;</span>));</span><br><span class="line">        f2.operation(<span class="keyword">new</span> UnsharedConcreteFlyweight(<span class="string">&quot;第一次调用H&quot;</span>));</span><br><span class="line">        f3.operation(<span class="keyword">new</span> UnsharedConcreteFlyweight(<span class="string">&quot;第一次调用I&quot;</span>));</span><br><span class="line">        f4.operation(<span class="keyword">new</span> UnsharedConcreteFlyweight(<span class="string">&quot;第一次调用G&quot;</span>));</span><br><span class="line">        f5.operation(<span class="keyword">new</span> UnsharedConcreteFlyweight(<span class="string">&quot;第二次调用H&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     非享元角色</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnsharedConcreteFlyweight</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象享元角色</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Flyweight</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(UnsharedConcreteFlyweight concreteFlyweight)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体享元角色</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFlyweight</span> <span class="keyword">implements</span> <span class="title">Flyweight</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteFlyweight.class);</span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteFlyweight</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        log.info(<span class="string">&quot;具体享元&quot;</span> + key + <span class="string">&quot;被创建&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(UnsharedConcreteFlyweight concreteFlyweight)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体享元&quot;</span> + key + <span class="string">&quot;被调用&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;非享元信息是：&quot;</span> + concreteFlyweight.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     享元工厂角色</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlyweightFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(FlyweightFactory.class);</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, Flyweight&gt; flyweightMap = <span class="keyword">new</span> HashMap&lt;String, Flyweight&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Flyweight <span class="title">getFlyweight</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        Flyweight flyweight = (Flyweight) flyweightMap.get(key);</span><br><span class="line">        <span class="keyword">if</span> (flyweight != <span class="keyword">null</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;具体享元&quot;</span> + key + <span class="string">&quot;已经存在，被成功获取！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            flyweight = <span class="keyword">new</span> ConcreteFlyweight(key);</span><br><span class="line">            flyweightMap.put(key, flyweight);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flyweight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-13-组合模式-Composite"><a href="#2-13-组合模式-Composite" class="headerlink" title="2.13 组合模式-Composite"></a>2.13 组合模式-Composite</h3><blockquote>
<p>定义</p>
</blockquote>
<p>有时又叫做部分-整体模式，它是一种将对象组合成树状的层次结构的模式，用来表示”部分-整体”的关系，使用户对单个组合对象具有一致的访问性。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>组合模式使得客户端代码可以一致地处理单个对象和组合对象，无须关心自己处理的是单个对象，还是组合对象，这简化了客户端代码。</li>
<li>更容易在组合体内加入了新的对象，客户端不会因为加入了新的对象而更改源代码，满足开闭原则。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>设计较复杂，客户端需要花更多时间理清类之间的层次关系。</li>
<li>不容易限制容器中的构件。</li>
<li>不容易用继承的方法来增加构件的新功能。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象构件角色(Component)：它的主要作用是为树叶构件和树枝构件声明公共接口，并实现它们的默认行为，在透明式的组合模式中抽象插件还声明访问和管理子类的接口；在安全式的组合模式中不声明访问和管理子类的接口，管理工作由树枝构件完成。</li>
<li>树叶构件角色(Leaf)：是组合模式中的叶子结点，没有子结点，用于实现抽象构件角色中声明的公共接口。</li>
<li>树枝构件角色(Composite)：是组合模式中的分支结点对象，有子结点，它实现了抽象构件角色中声明的接口，主要作用是存储和管理子部件，通常包含add()、remove()、getChild()等方法。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.composite.pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.composite.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: Composite &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 组合模式 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;测试类&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompositeDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Component component0 = <span class="keyword">new</span> Composite();</span><br><span class="line">        Component component1 = <span class="keyword">new</span> Composite();</span><br><span class="line">        Component component2 = <span class="keyword">new</span> Leaf(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        Component component3 = <span class="keyword">new</span> Leaf(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        Component component4 = <span class="keyword">new</span> Leaf(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        component0.add(component2);</span><br><span class="line">        component0.add(component1);</span><br><span class="line">        component1.add(component3);</span><br><span class="line">        component1.add(component4);</span><br><span class="line">        component0.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象构件</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component c)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component c)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Component <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     树叶构件</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">implements</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(Leaf.class);</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Leaf</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component c)</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component c)</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Component <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;树叶&quot;</span> + name + <span class="string">&quot;被访问&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">	 **</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> *     树枝构件</span><br><span class="line"> * &lt;/p&gt;</span><br><span class="line"> */</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Composite</span> <span class="keyword">implements</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Component&gt; children = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component c)</span> </span>&#123;</span><br><span class="line">        children.add(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component c)</span> </span>&#123;</span><br><span class="line">        children.remove(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Component <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> children.get(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Object obj : children) &#123;</span><br><span class="line">            ((Component) obj).operation();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-14-模板方法模式-Template-Method"><a href="#2-14-模板方法模式-Template-Method" class="headerlink" title="2.14 模板方法模式-Template Method"></a>2.14 模板方法模式-Template Method</h3><blockquote>
<p>定义</p>
</blockquote>
<p>定义一个操作中的算法骨架，而将算法中的一些步骤延迟到子类中，使得子类可以不改变算法结构的情况下重定义该算法的某些特定步骤。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>封装了不变部分，扩展可变部分。它把认为是不变部分的算法封装到父类实现中，而把可变部分算法由子类继承实现，便于子类继续扩展。</li>
<li>它在父类中提取了公共的部分代码，便于代码复用。</li>
<li>部分方法是子类实现的，因此子类可以通过扩展方式增加相应的功能，符合开闭原则。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>对每个不同的实现都需要定义一个子类，这会导致类的个数增加，系统更加庞大，设计也更加抽象。</li>
<li>父类中的抽象方法由子类实现，子类执行的结果会影响父类的结果，这导致一种反向的控制结构，它提高了代码阅读的难度。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象类(Abstract class)：负责给出一个算法的轮廓和骨架。它由一个模板方法和若干个基本方法构成<ul>
<li>模板方法：定义了算法的骨架，按某种顺序调用其包含的基本方法</li>
<li>基本方法：<ul>
<li>抽象方法：在抽象类中申明，由具体子类中可以继承或重写它。</li>
<li>具体方法：在抽象类中已经实现，在具体子类中可以继承或重写它。</li>
<li>钩子方法：在抽象类中已经实现，包括用于判断的逻辑方法和需要子类重写的孔方法两种。</li>
</ul>
</li>
</ul>
</li>
<li>具体子类(Concrete Class)：实现抽象类中所定义的抽象方法和钩子方法，它们是一个顶级逻辑的一个组成步骤。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.templateMethod.pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.templateMethod.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: TemplateMethodDemo &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;测试类&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplateMethodDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstractClass abstractClass = <span class="keyword">new</span> ConcreteClass();</span><br><span class="line">        abstractClass.templateMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;P&gt;</span></span><br><span class="line"><span class="comment"> *     抽象类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(AbstractClass.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 模板方法 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">templateMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        specificMethod();</span><br><span class="line">        abstractMethod1();</span><br><span class="line">        abstractMethod2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 具体方法 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">specificMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体方法被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 抽象方法1 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">abstractMethod1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/* 抽象方法2 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">abstractMethod2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteClass</span> <span class="keyword">extends</span> <span class="title">AbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteClass.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">abstractMethod1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;抽象方法1的实现被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">abstractMethod2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;抽象方法2的实现被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-15-策略模式-Strategy"><a href="#2-15-策略模式-Strategy" class="headerlink" title="2.15 策略模式-Strategy"></a>2.15 策略模式-Strategy</h3><blockquote>
<p>定义</p>
</blockquote>
<p>该模式定义了一系列算法，并将每个算法封装起来，使它们可以相互依赖，且算法的变化不会影响到使用算法的用户。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>多重条件语句不易维护，而使用策略模式可以避免使用多重条件语句。</li>
<li>策略模式提供了一系列的可供重用的算法族，恰当使用继承可以把算法族的公共代码转移到父类里面，从而避免重复的代码。</li>
<li>策略模式可以提供相同行为的不同实现，客户可以根据不同时间或空间要求选择不同的。</li>
<li>策略模式提供了对开闭原则的完美支持，可以在不修改原代码的情况下，灵活增加新算法。</li>
<li>策略模式把算法的使用放到环境类中，而算法的实现移到具体策略类中，实现了二者的分离。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>客户端必须理解所有策略算法的区别，以便适时选择恰当的算法类。</li>
<li>策略模式造成很多的策略类。</li>
</ul>
<blockquote>
<p> 结构</p>
</blockquote>
<ul>
<li>抽象策略类(Strategy)：定义了一个公共接口，各种不同的算法以不同的方式实现这个接口，环境角色使用这个接口调用不同的算法，一般使用接口或抽象类实现。</li>
<li>具体策略类(Concrete Strategy)：实现了抽象了策略定义的接口，环境角色使用这个接口调用不同的算法，一般使用接口或抽象类实现。</li>
<li>环境类(Context)：持有一个策略类的引用，最终给客户端调用。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.strategy.pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.strategy.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: StrategyDemo &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 策略模式 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;测试类&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Context context = <span class="keyword">new</span> Context();</span><br><span class="line">        Strategy strategy1 = <span class="keyword">new</span> ConcreteStrategyA();</span><br><span class="line">        Strategy strategy2 = <span class="keyword">new</span> ConcreteStrategyB();</span><br><span class="line">        context.setStrategy(strategy1);</span><br><span class="line">        context.strategyMethod();</span><br><span class="line">        context.setStrategy(strategy2);</span><br><span class="line">        context.strategyMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象策略类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">strategyMethod</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体策略类A</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyA</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteStrategyA.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">strategyMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体策略A的策略方法被访问&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体策略类B</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyB</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteStrategyB.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">strategyMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体策略B的策略方法被访问&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     环境类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Strategy <span class="title">getStrategy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> strategy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStrategy</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">strategyMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        strategy.strategyMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-16-命令模式-Command"><a href="#2-16-命令模式-Command" class="headerlink" title="2.16 命令模式-Command"></a>2.16 命令模式-Command</h3><blockquote>
<p>定义</p>
</blockquote>
<p>将请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。这样两者之间通过命令对象进行沟通，这样方便将命令对象进行储存、传递、调用、增加与管理。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>降低系统的耦合度。命令模式能将调用操作的对象与实现该操作的对象解耦。</li>
<li>增加或删除命令非常方便。采用命令模式增加与删除命令不会影响其他类，它满足开闭原则，对拓展比较灵活。</li>
<li>可以实现宏命令。命令模式可以与组合模式结合，将多个命令装配成一个组合命令，即宏命令。</li>
<li>方便实现Undo和Redo操作。命令模式可以与备忘录模式结合，实现命令的撤销与恢复。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<p>可能产生大量具体命令类。因为对每一个具体操作都需要设计一个具体命令类，这将增加系统的复杂性。</p>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象命令类(Command)：声明执行命令的接口，拥有执行命令的抽象方法execute()。</li>
<li>具体命令角色(Concrete Command)：是抽象命令类的具体实现类，它拥有接收者对象，并通过调用接收者的功能来完成命令要执行的操作。</li>
<li>接收者(Receiver)：执行命令功能的相关操作，是具体命令对象业务的真正实现者。</li>
<li>请求者(Invoker)：请求的发送者，它通常拥有很多的命令对象，并通过访问命令对象类执行相关请求，它不张子杰访问接收者。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.command.pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.command.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: CommandDemo &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 命令模式 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;测试类&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Logger log = Logger.getLogger(CommandDemo.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Command command = <span class="keyword">new</span> ConcreteCommand();</span><br><span class="line">        Invoker invoker = <span class="keyword">new</span> Invoker(command);</span><br><span class="line">        log.info(<span class="string">&quot;客户访问调用者的call方法&quot;</span>);</span><br><span class="line">        invoker.call();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     调用者</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Invoker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(Invoker.class);</span><br><span class="line">    <span class="keyword">private</span> Command command;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Invoker</span><span class="params">(Command command)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(Command command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;调用者执行命令command&quot;</span>);</span><br><span class="line">        command.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象命令</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;具体命令&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Receiver receiver;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteCommand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.receiver = <span class="keyword">new</span> Receiver();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        receiver.action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;接收者&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(Receiver.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;接收者的action方法被调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-17-责任链模式-Chain-of-Responsibility"><a href="#2-17-责任链模式-Chain-of-Responsibility" class="headerlink" title="2.17 责任链模式-Chain of Responsibility"></a>2.17 责任链模式-Chain of Responsibility</h3><blockquote>
<p>定义</p>
</blockquote>
<p>为了避免请求发送者与多个请求处理者耦合在一起，将所有请求的处理者通过前一对象记住其下一个对象的引用而连成一条链；当有请求发生时，可以将请求沿着这条链传递，直到有对象处理它为止。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>降低了对象之间的耦合度。该模式使得一个对象无须知道到底是哪一个对象处理其请求以及链的结构，发送者和接收者也无须拥有对方的明确信息。</li>
<li>增强了系统的可扩展性。可以根据需要增加新的请求处理类，满足开闭原则。</li>
<li>增强了给对象指派职责的灵活性。当工作流程发生变化，可以动态地改变链内的成员或者调动它们的次序，也可动态地新增或者删除责任。</li>
<li>责任链简化了对象之间的连接。每个对象只需保持一个指向其后继者的引用，不需保持其他所有处理者的引用，这避免了使用众多的if-else语句。</li>
<li>责任分担。每个类只需要处理自己该处理的工作，不该处理的传递给下一个对象完成，明确各类的责任范围，符合类的单一职责原则。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>不能保证每个请求一定被处理。由于一个请求没有明确的接收者，所以不能保证它一定会被处理，该请求可能一直传到链的末端都得不到处理。</li>
<li>对比较长的责任链，请求的处理可能涉及多个处理对象，系统性能将受到一个影响。</li>
<li>职责链的建立的合理性要靠客户端来保证，增加了客户端的复杂性，可能会由于责任链的错误设置而导致系统出错，如可能还会造成循环调用。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li><p>抽象处理者(Handler)：定义一个处理请求的接口，包含抽象处理方法和一个后继连接。</p>
</li>
<li><p>具体处理者(Concrete Handler)：实现抽象处理者的处理方法，判断能否本次请求，如果可以处理请求则处理，否则将给请求转给它的后继者。</p>
</li>
<li><p>客户类(Client)：创建处理链，并向链头的具体处理者对象提交请求，它不关心处理细节和请求的传递过程。</p>
</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.chainofResposibility.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.chainofResposibility.example &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: Main &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 责任链Demo &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     测试类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Support RubbishK = <span class="keyword">new</span> NoSupport(<span class="string">&quot;RubbishK&quot;</span>);</span><br><span class="line">        Support FlowerK = <span class="keyword">new</span> LimitSupport(<span class="string">&quot;FlowerK&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        Support EyedropK = <span class="keyword">new</span> LimitSupport(<span class="string">&quot;EyedropK&quot;</span>, <span class="number">200</span>);</span><br><span class="line">        Support UnknownK = <span class="keyword">new</span> SpecialSupport(<span class="string">&quot;UnknownK&quot;</span>, <span class="number">300</span>);</span><br><span class="line">        Support KHighness = <span class="keyword">new</span> SpecialSupport(<span class="string">&quot;KHighness&quot;</span>, <span class="number">330</span>);</span><br><span class="line">        Support BrotherK = <span class="keyword">new</span> OddSupport(<span class="string">&quot;BrotherK&quot;</span>);</span><br><span class="line">        <span class="comment">// 制造责任链</span></span><br><span class="line">        RubbishK.setNext(FlowerK).setNext(EyedropK).setNext(UnknownK).setNext(KHighness).setNext(BrotherK);</span><br><span class="line">        <span class="comment">// 制造问题</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500</span>; i += <span class="number">30</span>) &#123;</span><br><span class="line">            RubbishK.support(<span class="keyword">new</span> Trouble(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     发生的问题的类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trouble</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Trouble</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[Trouble &quot;</span> +</span><br><span class="line">                <span class="string">&quot;number=&quot;</span> + number +</span><br><span class="line">                <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     用来解决问的抽象类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Support</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(Support.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Support next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Support</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Support <span class="title">setNext</span><span class="params">(Support next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">support</span><span class="params">(Trouble trouble)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (resolve(trouble)) &#123;</span><br><span class="line">            done(trouble);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            next.support(trouble);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fail(trouble);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">resolve</span><span class="params">(Trouble trouble)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">done</span><span class="params">(Trouble trouble)</span> </span>&#123;</span><br><span class="line">        log.info(trouble + <span class="string">&quot; is resolved by &quot;</span> + <span class="keyword">this</span> + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">fail</span><span class="params">(Trouble trouble)</span> </span>&#123;</span><br><span class="line">        log.info(trouble + <span class="string">&quot; cannot be resolved.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     解决问题具体类：不能解决问题</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoSupport</span> <span class="keyword">extends</span> <span class="title">Support</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NoSupport</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">resolve</span><span class="params">(Trouble trouble)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     解决问题具体类：解决问题编号小于limit值得类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LimitSupport</span> <span class="keyword">extends</span> <span class="title">Support</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> limit;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LimitSupport</span><span class="params">(String name, <span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.limit = limit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">resolve</span><span class="params">(Trouble trouble)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (trouble.getNumber() &lt; limit) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     解决问题具体类：解决奇数编号得问题</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OddSupport</span> <span class="keyword">extends</span> <span class="title">Support</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OddSupport</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">resolve</span><span class="params">(Trouble trouble)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (trouble.getNumber() % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     解决问题具体类：只解决指定编号得问题</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpecialSupport</span> <span class="keyword">extends</span> <span class="title">Support</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpecialSupport</span><span class="params">(String name, <span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">resolve</span><span class="params">(Trouble trouble)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (trouble.getNumber() == <span class="keyword">this</span>.number) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-18-状态模式-State"><a href="#2-18-状态模式-State" class="headerlink" title="2.18 状态模式-State"></a>2.18 状态模式-State</h3><blockquote>
<p>定义</p>
</blockquote>
<p>对有状态的对象，把复杂的“判断逻辑”提取到不同的状态对象中，允许状态对象在其内部状态发生改变时改变其行为。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>状态模式与特定状态相关的行为局部化到一个状态中，并且将不同状态的行为分割开来，满足单一职责原则。</li>
<li>减少对象间的相互依赖。将不同的状态引入独立的对象中会使得状态变得更加明确，切减少对象间的相互依赖。</li>
<li>有利于程序的拓展。通过定义新的子类很容易德增加新的状态和转换。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>状态模式的使用必然会增加系统的类与对象的个数。</li>
<li>状态模式的结构和实现都较为复杂，如果使用不当会导致程序结构和代码的混乱。 </li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>环境类(Context)：也称为上下文，它定义了客户感兴趣的接口，维护一个当前状态，并将与状态相关的操作都委托给当前状态对象类处理。</li>
<li>抽象状态类(State)：定义一个接口，用以封装环境对象中特定状态所对应的行为。</li>
<li>具体状态类(Concrete State)：实现抽象状态所对应的行为。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;package top.parak.state.pattern;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="string"> * &lt;p&gt; Package: top.parak.state.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="string"> * &lt;p&gt; FileName: StateDemo &lt;p&gt;</span></span><br><span class="line"><span class="string"> * &lt;p&gt; Description: 状态模式 &lt;p&gt;</span></span><br><span class="line"><span class="string"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="string"> *</span></span><br><span class="line"><span class="string"> * @author KHighness</span></span><br><span class="line"><span class="string"> * @since 2020/11/8</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">import org.apache.log4j.Logger;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * &lt;p&gt;测试类&lt;/p&gt;</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">public class StateDemo &#123;</span></span><br><span class="line"><span class="string">    public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="string">        Context context = new Context();</span></span><br><span class="line"><span class="string">        context.handle();</span></span><br><span class="line"><span class="string">        context.handle();</span></span><br><span class="line"><span class="string">        context.handle();</span></span><br><span class="line"><span class="string">        context.handle();</span></span><br><span class="line"><span class="string">        context.handle();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * &lt;p&gt;</span></span><br><span class="line"><span class="string"> *     环境类</span></span><br><span class="line"><span class="string"> * &lt;/p&gt;</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">class Context &#123;</span></span><br><span class="line"><span class="string">    private State state;</span></span><br><span class="line"><span class="string">    /* 初始状态 */</span></span><br><span class="line"><span class="string">    public Context()  &#123;</span></span><br><span class="line"><span class="string">        this.state = new ConcreteStateA();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    /* 读取状态 */</span></span><br><span class="line"><span class="string">    public State getState() &#123;</span></span><br><span class="line"><span class="string">        return state;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    /* 设置状态 */</span></span><br><span class="line"><span class="string">    public void setState(State state) &#123;</span></span><br><span class="line"><span class="string">        this.state = state;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    /* 处理请求 */</span></span><br><span class="line"><span class="string">    public void handle()  &#123;</span></span><br><span class="line"><span class="string">        state.handle(this);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * &lt;p&gt;</span></span><br><span class="line"><span class="string"> *     抽象状态类</span></span><br><span class="line"><span class="string"> * &lt;/p&gt;</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">abstract class State &#123;</span></span><br><span class="line"><span class="string">    abstract void handle(Context context);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * &lt;p&gt;</span></span><br><span class="line"><span class="string"> *     具体状态A类</span></span><br><span class="line"><span class="string"> * &lt;/p&gt;</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">class ConcreteStateA extends State &#123;</span></span><br><span class="line"><span class="string">    private Logger log = Logger.getLogger(ConcreteStateA.class);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @Override</span></span><br><span class="line"><span class="string">    void handle(Context context) &#123;</span></span><br><span class="line"><span class="string">        log.info(&quot;当前状态：A&quot;);</span></span><br><span class="line"><span class="string">        context.setState(new ConcreteStateB());</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * &lt;p&gt;</span></span><br><span class="line"><span class="string"> *     具体状态B类</span></span><br><span class="line"><span class="string"> * &lt;/p&gt;</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">class ConcreteStateB extends State &#123;</span></span><br><span class="line"><span class="string">    private Logger log = Logger.getLogger(ConcreteStateB.class);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @Override</span></span><br><span class="line"><span class="string">    void handle(Context context) &#123;</span></span><br><span class="line"><span class="string">        log.info(&quot;当前状态：B&quot;);</span></span><br><span class="line"><span class="string">        context.setState(new ConcreteStateA());</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-19-观察者模式-Observer"><a href="#2-19-观察者模式-Observer" class="headerlink" title="2.19 观察者模式-Observer"></a>2.19 观察者模式-Observer</h3><blockquote>
<p>定义</p>
</blockquote>
<p>多个对象之间存在一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新，又叫做发布-订阅模式。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li><p>降低了目标与观察者之间的耦合关系，两者之间是抽象耦合关系。</p>
</li>
<li><p>目标与观察者之间建立了一套触发机制。</p>
</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>目标与观察者之间的依赖关系并没有完全解除，而且有可能出现循环引用。</li>
<li>当观察者对象很多时，通知的发布会花费很多时间，影响程序的效率。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象主题(Subject)：提供了一个用于保存观察者对象的聚集类和增加、增加观察者对象的方法，以及通知所有观察者的抽象方法。</li>
<li>具体主题(Concrete Subject)：实现抽象目标中的通知方法，当具体主题的内部状态发生改变时，通知所有注册过的观察者对象。</li>
<li>抽象观察者(Observer)：一个抽象类或者接口，包含了一个更新自己的抽象方法，当接到具体主题的更改通知时被调用。</li>
<li>具体观察者(Concrete Observer)：实现抽象观察者中定义的抽象方法，以便在得到目标的更改通知时更新自身的状态。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.observer.pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.observer.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: ObserverDemo &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 观察者模式 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Subject subject = <span class="keyword">new</span> ConcreteSubject();</span><br><span class="line">        Observer[] observers = <span class="keyword">new</span> Observer[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                observers[i] = <span class="keyword">new</span> ConcreteObserver1();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                observers[i] = <span class="keyword">new</span> ConcreteObserver2();</span><br><span class="line">            &#125;</span><br><span class="line">            subject.add(observers[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        subject.notifyObserver();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象目标</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</span><br><span class="line">    <span class="comment">/* 增加观察者 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 删除观察者 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 通知观察者 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">notifyObserver</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体目标</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObserver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体目标发生改变&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;——————————————&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Observer observer : observers) &#123;</span><br><span class="line">            observer.response();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象观察者</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 作出反应 */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">response</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体观察者1</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver1</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteObserver1.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">response</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体观察者1作出反应&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;P&gt;</span></span><br><span class="line"><span class="comment"> *     具体观察者2</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver2</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteObserver2.class);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">response</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体观察者2作出反应&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-20-中介者模式-Mediator"><a href="#2-20-中介者模式-Mediator" class="headerlink" title="2.20 中介者模式-Mediator"></a>2.20 中介者模式-Mediator</h3><blockquote>
<p>定义</p>
</blockquote>
<p>定义一个中介对象来封装一系列对象之间的交互，使原有对象直接的耦合松散，且可以独立地改变它们之间的交互。中介者模式又叫调停模式。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>降低了对象之间的耦合性，使得对象易于独立地被复用。</li>
<li>将对象之间的一对多关联转为一对一的关联，提高系统的灵活性，使得系统易于维护和拓展。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>当同事类太多时，中介者的职责职责将很大，它会变得复杂而庞大，以至于系统难以维护。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象中介者(Mediator)：它是中介者的接口，提供了同事对象注册与转发同事对象信息的抽象方法。</li>
<li>具体中介者(Concrete Mediator)：实现中介者接口，定义一个List来管理同事对象，协调各个同事角色之间的交互关系，因此它依赖于同事角色。</li>
<li>抽象同事类(Colleague)：定义同事类的接口，保存中介者对象，提供同事对象交互的抽象方法，实现所有相互影响的同事类的公共功能。</li>
<li>具体同事类(Concrete Colleague)：是抽象同事类的实现者，当需要与其他同事对象交互时，由中介者对象负责后续的交互。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.mediator.pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.mediator.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: MediatorDemo &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     中介者</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MediatorDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Mediator mediator = <span class="keyword">new</span> ConcreteMediator();</span><br><span class="line">        Colleague colleague1, colleague2;</span><br><span class="line">        colleague1 = <span class="keyword">new</span> ConcreteColleague1();</span><br><span class="line">        colleague2 = <span class="keyword">new</span> ConcreteColleague2();</span><br><span class="line">        mediator.register(colleague1);</span><br><span class="line">        mediator.register(colleague2);</span><br><span class="line">        colleague1.send();</span><br><span class="line">        colleague2.send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     中介者</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 注册 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Colleague colleague)</span></span>;</span><br><span class="line">    <span class="comment">/* 转发 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">relay</span><span class="params">(Colleague colleague)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体中介者</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteMediator</span> <span class="keyword">extends</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Colleague&gt; colleagues = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Colleague colleague)</span> </span>&#123;</span><br><span class="line">        colleagues.add(colleague);</span><br><span class="line">        colleague.setMediator(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">relay</span><span class="params">(Colleague colleague)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Colleague colleague1 : colleagues) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!colleague1.equals(colleague)) &#123;</span><br><span class="line">                colleague1.receive();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象同事类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(Colleague.class);</span><br><span class="line">    <span class="keyword">protected</span> Mediator mediator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMediator</span><span class="params">(Mediator mediator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mediator = mediator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体同事类1</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleague1</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteColleague1.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体同事类1收到请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体同事1发出请求&quot;</span>);</span><br><span class="line">        mediator.relay(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体同事类2</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleague2</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteColleague2.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体同事类2收到请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体同事2发出请求&quot;</span>);</span><br><span class="line">        mediator.relay(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-21迭代器模式-Iterator"><a href="#2-21迭代器模式-Iterator" class="headerlink" title="2.21迭代器模式-Iterator"></a>2.21迭代器模式-Iterator</h3><blockquote>
<p>定义</p>
</blockquote>
<p>提供一个对象来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>访问一个聚合对象的内容而无须暴露它的内部表示。</li>
<li>遍历任务交由迭代器完成，这简化了聚合类。</li>
<li>它支持以不同方式遍历一个聚合，甚至可以自定义迭代器的子类以支持新的遍历。</li>
<li>增加新的聚合类和迭代器都很方便，无须修改原有代码。</li>
<li>封装性良好，为遍历不同的聚合结构提供一个统一的接口。</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>增加了类的个数，这在一定程度上增加了系统的复杂性。</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象聚合角色(Aggregate)：定义存储、添加、删除聚合对象以及创建迭代器对象的接口。</li>
<li>具体聚合色(Concrete Aggregate)：实现抽象聚合类，返回一个具体迭代器的实例。</li>
<li>抽象迭代器角色(Iterator)：定义访问和遍历聚合元素的接口，通常包含hasNext()、first()、next()等方法。</li>
<li>具体迭代器角色(Concrete Iterator)：实现抽象迭代器接口中所定义的方法，完成对聚合对象的遍历，记录遍历的当前位置。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.iterator.pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.iterator.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: IteratorDemo &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 迭代器模式 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Logger log = Logger.getLogger(IteratorDemo.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Aggregate aggregate = <span class="keyword">new</span> ConcreteAggregate();</span><br><span class="line">        aggregate.add(<span class="string">&quot;KHighness&quot;</span>);</span><br><span class="line">        aggregate.add(<span class="string">&quot;ParaK&quot;</span>);</span><br><span class="line">        aggregate.add(<span class="string">&quot;FlowerK&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;聚合的内容&quot;</span>);</span><br><span class="line">        Iterator iterator = aggregate.getIterator();</span><br><span class="line">        log.info(iterator.first().toString());</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            log.info(iterator.next().toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象聚合</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Aggregate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object o)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(Object o)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">getIterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体聚合</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteAggregate</span> <span class="keyword">implements</span> <span class="title">Aggregate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        list.add(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        list.remove(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">getIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">new</span> ConcreteIterator(list));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象迭代器</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    <span class="function">Object <span class="title">first</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Object <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体迭代器</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteIterator</span><span class="params">(List&lt;Object&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">first</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        index = <span class="number">0</span>;</span><br><span class="line">        Object object = list.get(index);</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object object = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.hasNext()) &#123;</span><br><span class="line">            object = list.get(++index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; list.size() - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-22-访问者模式-Visitor"><a href="#2-22-访问者模式-Visitor" class="headerlink" title="2.22 访问者模式-Visitor"></a>2.22 访问者模式-Visitor</h3><blockquote>
<p>定义</p>
</blockquote>
<p>将作用于某种数据结构中的各元素的操作分离出来封装成独立的类，使其在不改变数据结构的前提下可以添加作用于这些元素的新的操作。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>扩展性好</li>
<li>复用性好</li>
<li>灵活性好</li>
<li>符合单一职责原则</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>增加新的元素很困难</li>
<li>破坏封装</li>
<li>违反了依赖倒置原则</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象访问者(Visitor)：定义一个访问具体元素的接口，为每个具体元素类对应一个访问操作visit()，该操作中的参数类型标识了被访问的具体元素。</li>
<li>具体访问者(Concrete Visitor)：实现抽象访问者角色声明的各个访问操作，确定访问者访问一个元素时该做什么。</li>
<li>抽象元素(Element)：声明一个包含接受操作accept()的接口，被接受的访问者对象作为accept()的参数。</li>
<li>具体元素(Concrete Element)：实现抽象元素角色提供的accept()操作。</li>
<li>对象结构(Object Structure)：包含元素角色的容器，提供让访问者对象遍历容器中的所有元素的方法。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.visitor.pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.visitor.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: VisitorDemo &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 访问者模式 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;测试类&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VisitorDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ObjectStructure structure = <span class="keyword">new</span> ObjectStructure();</span><br><span class="line">        structure.add(<span class="keyword">new</span> ConcreteElementA());</span><br><span class="line">        structure.add(<span class="keyword">new</span> ConcreteElementB());</span><br><span class="line">        structure.add(<span class="keyword">new</span> ConcreteElementC());</span><br><span class="line"></span><br><span class="line">        Visitor visitorA = <span class="keyword">new</span> ConcreteVisitorA();</span><br><span class="line">        Visitor visitorB = <span class="keyword">new</span> ConcreteVisitorB();</span><br><span class="line">        structure.accept(visitorA);</span><br><span class="line">        structure.accept(visitorB);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象访问者</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElementA elementA)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElementB elementB)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElementC elementC)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体访问者A</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitorA</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteVisitorA.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElementA elementA)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体访问者A访问=&gt;具体元素A&quot;</span>);</span><br><span class="line">        elementA.operaA();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElementB elementB)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体访问者A访问=&gt;具体元素B&quot;</span>);</span><br><span class="line">        elementB.operaB();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElementC elementC)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体访问者A访问=&gt;具体元素C&quot;</span>);</span><br><span class="line">        elementC.operaC();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体访问者B</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitorB</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteVisitorB.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElementA elementA)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体访问者B访问=&gt;具体元素A&quot;</span>);</span><br><span class="line">        elementA.operaA();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElementB elementB)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体访问者B访问=&gt;具体元素B&quot;</span>);</span><br><span class="line">        elementB.operaB();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ConcreteElementC elementC)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体访问者B访问=&gt;具体元素C&quot;</span>);</span><br><span class="line">        elementC.operaC();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象元素类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体元素A</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteElementA</span> <span class="keyword">implements</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteElementA.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operaA</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体元素A操作...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体元素B</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteElementB</span> <span class="keyword">implements</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteElementB.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operaB</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体元素B操作...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     具体元素C</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteElementC</span> <span class="keyword">implements</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(ConcreteElementC.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operaC</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;具体元素C操作...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     对象结构角色</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectStructure</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Element&gt; list = <span class="keyword">new</span> ArrayList&lt;Element&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        Iterator&lt;Element&gt; iterator = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            iterator.next().accept(visitor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Element element)</span> </span>&#123;</span><br><span class="line">        list.add(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Element element)</span> </span>&#123;</span><br><span class="line">        list.remove(element);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-23-备忘录模式-Memento"><a href="#2-23-备忘录模式-Memento" class="headerlink" title="2.23 备忘录模式-Memento"></a>2.23 备忘录模式-Memento</h3><blockquote>
<p>定义</p>
</blockquote>
<p>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，以便以后当需要时能将该对象恢复到原先保存的状态。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>提供了一个可以恢复状态的机制</li>
<li>实现内部状态的封装</li>
<li>简化了发起人</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>资源消耗大</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>发起人(Originator)：记录当前时刻的内部状态信息，提供创建备忘录和恢复备忘录数据的功能，实现其他业务功能，它可以访问备忘录里的所有信息。</li>
<li>备忘录(Memento)：负责存储发起人的内部状态，在需要的时候提供这些内部状态给发起人。</li>
<li>管理者(Caretaker)：对备忘录进行管理，提供保存与获取备忘录的功能，但不能对备忘录进行访问与修改。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.memento.pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.memento.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: MementoDemo &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 备忘录模式 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;测试类&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MementoDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Logger log = Logger.getLogger(MementoDemo.class);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Originator originator = <span class="keyword">new</span> Originator();</span><br><span class="line">        Caretaker caretaker = <span class="keyword">new</span> Caretaker();</span><br><span class="line">        originator.setState(<span class="string">&quot;State1&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;初始状态：&quot;</span> + originator.getState());</span><br><span class="line">        <span class="comment">// 保存状态</span></span><br><span class="line">        caretaker.setMemento(originator.createMemento());</span><br><span class="line">        originator.setState(<span class="string">&quot;State2&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;新的状态：&quot;</span> + originator.getState());</span><br><span class="line">        <span class="comment">// 恢复状态</span></span><br><span class="line">        originator.restoreMemento(caretaker.getMemento());</span><br><span class="line">        log.info(<span class="string">&quot;恢复状态：&quot;</span> + originator.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     备忘录</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memento</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Memento</span><span class="params">(String state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     发起人</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Originator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">createMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Memento(state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restoreMemento</span><span class="params">(Memento memento)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(memento.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     管理者</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Caretaker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Memento memento;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">getMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> memento;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(Memento memento)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.memento = memento;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-24-解释器模式-Interpreter"><a href="#2-24-解释器模式-Interpreter" class="headerlink" title="2.24 解释器模式-Interpreter"></a>2.24 解释器模式-Interpreter</h3><blockquote>
<p>定义</p>
</blockquote>
<p>给分析对象定义一个语言，并定义该语言的文法表示，再设计一个解析器来解释其中的句子。</p>
<blockquote>
<p>优点</p>
</blockquote>
<ul>
<li>扩展性好</li>
<li>容易实现</li>
</ul>
<blockquote>
<p>缺点</p>
</blockquote>
<ul>
<li>执行效率较低</li>
<li>会引起类膨胀</li>
<li>可应用的场景比较少</li>
</ul>
<blockquote>
<p>结构</p>
</blockquote>
<ul>
<li>抽象表达式(Abstract Expression)：定义解释器的接口，约定解释器的解释操作，主要包含解释方法interpret()。</li>
<li>终结符表达式(Terminal Expression)：抽象表达式的子类，用来实现文法中与终结符相关的操作，文法中的每条一个终结符都对应于一个非终结符表达式。</li>
<li>非终结符表达式(Terminal Expression)：抽象表达式的子类，用来实现文法中与非终结符相关的操作，文法中的每条规则都对应于一个非终结符表达式。</li>
<li>环境(Context)：通常包含各个解释器需要的数据或是公共的功能，一般用来传递被所有解释器共享的数据，后开你的解释器可以从这里获取这些值。</li>
<li>客户端(Client)：主要任务是将需要分析的句子或表达式转换成使用解释器对象描述的抽象语法树，然后调用解释器的解释方法，当然也可以通过环境角色间接访问解释器的解释方法。</li>
</ul>
<blockquote>
<p>实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.interpreter.pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: DesignPattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.interpreter.pattern &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: InterpreterDemo &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 解释器模式 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     测试类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterpreterDemo</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     抽象表达式</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AbstractExpression</span> </span>&#123;</span><br><span class="line">    <span class="function">Object <span class="title">interpret</span><span class="params">(String info)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     终结符表达式类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TerminalExpression</span> <span class="keyword">implements</span> <span class="title">AbstractExpression</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">interpret</span><span class="params">(String info)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 对终结符表达式的处理 */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     非终结符表达式类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonTerminalExpression</span> <span class="keyword">implements</span> <span class="title">AbstractExpression</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">interpret</span><span class="params">(String info)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 对非终结符表达式的处理 */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     环境类</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AbstractExpression abstractExpression;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 数据初始化 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(String info)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 调用相关表达式的解释方法 */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Software Engineering</category>
      </categories>
      <tags>
        <tag>Design Pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>红黑树</title>
    <url>/posts/f89cb603/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="📓-定义"><a href="#📓-定义" class="headerlink" title="📓 定义"></a>📓 定义</h2><p>红黑树是一种含有红黑节点并能自平衡的二叉查找树</p>
<blockquote>
<p>🌲二叉查找树</p>
<p>满足约束：左结点的值小于父结点，父结点的值小于右结点的值。</p>
<p>场景理解：假设二叉查找树建立在x-y笛卡尔坐标系中，则所有结点向x轴投影，值正好沿着x轴递增。</p>
</blockquote>
<br>

<a id="more"></a>



<h2 id="🔰-性质"><a href="#🔰-性质" class="headerlink" title="🔰 性质"></a>🔰 性质</h2><ul>
<li>每个结点要么是黑色，要么是红色</li>
<li>根节点是黑色</li>
<li>每个叶子结点(NIL)是黑色的(虚结点)</li>
<li>每个红色结点的两个子结点一定都是黑色</li>
<li>任意一结点到每个叶子结点的路径都包含数量相同的黑结点(黑色完美平衡)</li>
</ul>
<p>以上为最简性质，任何一条不可缺少，任意四条不能推出另外一条。</p>
<br>

<h2 id="🌗-平衡"><a href="#🌗-平衡" class="headerlink" title="🌗 平衡"></a>🌗 平衡</h2><p>红黑树是非完美平衡二叉查找树，是完美黑色平衡二叉查找树。</p>
<br>

<blockquote>
<p>⭕红黑树自平衡的最小单元</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/f89cb603/image-20201106225159861.png" class="" title="image-20201106225159861">

<p>红黑树的自平衡</p>
<p>插入只考虑G-{P, U}-C三代，删除只考虑P-{C, B}-{CL, CR, BL, BR}三代</p>
<br>

<blockquote>
<p>🔱红黑树自平衡的原子操作</p>
</blockquote>
<p>包括：变色、左旋、右旋</p>
<p>旋转要有圆心，有方向。</p>
<p>旋转结点是父结点围绕子节点旋转(子节点为圆心)。</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/f89cb603/image-20201103220142748.png" class="" title="image-20201103220142748">

<center>
    <font face="Kristen ITC" color="#555555" font-size=100px>☬ 旋转结点 ☬</font><br>
</center>

<br>

<blockquote>
<p>🌐变色：P-Black=&gt;Red,CB-Red=&gt;Black</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/f89cb603/image-20201103221816468.png" class="" title="image-20201103221816468">

<center>
    <font face="Kristen ITC" color="#555555" font-size=100px>☬ 变色操作 ☬</font><br>
</center>

<br>

<blockquote>
<p>🌔左旋：旋转结点绕圆心逆时针方向旋转。基于最短路径来确定方向。</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/f89cb603/image-20201103222025132.png" class="" title="image-20201103222025132">

<center>
    <font face="Kristen ITC" color="#555555" font-size=100px>☬ 左旋操作 ☬</font><br>
</center>

<br>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;左旋&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;过程：父亲下沉，右子上升，右子的左子变为原父的右子&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     左旋X结点</span></span><br><span class="line"><span class="comment"> *             P                                P</span></span><br><span class="line"><span class="comment"> *            /                                /</span></span><br><span class="line"><span class="comment"> *           X                                Y</span></span><br><span class="line"><span class="comment"> *         /  \        --(左旋)--&gt;           / \</span></span><br><span class="line"><span class="comment"> *       lX    Y                           X  rY</span></span><br><span class="line"><span class="comment"> *            / \                        /  \</span></span><br><span class="line"><span class="comment"> *          lY   rY                     lX  lY</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leftRotate</span><span class="params">(RBTNode&lt;T, D&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 右子结点 */</span></span><br><span class="line">    RBTNode&lt;T, D&gt; y = x.getRight();</span><br><span class="line">    <span class="comment">/* 父亲结点 */</span></span><br><span class="line">    RBTNode&lt;T, D&gt; p = x.getParent();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Y的左子 变成 X的右子</span></span><br><span class="line"><span class="comment">    * 若X不Y的左子不为空</span></span><br><span class="line"><span class="comment">    * 则设置Y的左子的父亲为X */</span></span><br><span class="line">    x.setRight(y.getLeft());</span><br><span class="line">    <span class="keyword">if</span> (y.getLeft() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        y.getLeft().setParent(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置Y的父亲为P</span></span><br><span class="line"><span class="comment">    * 1. P为空，则根节点设置为Y</span></span><br><span class="line"><span class="comment">    * 2. X为P的左子， 则P的左子设置为Y</span></span><br><span class="line"><span class="comment">    * 3. X为P的右子，则P的右子设置为Y */</span></span><br><span class="line">    y.setParent(p);</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.root = y;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (p.getLeft() == x) &#123;</span><br><span class="line">            p.setLeft(y);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p.setRight(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 将X的父亲设置为Y</span></span><br><span class="line"><span class="comment">    * 将Y的左子设置为X */</span></span><br><span class="line">    x.setParent(y);</span><br><span class="line">    y.setLeft(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>🌖右旋：旋转结点绕圆心顺时针方向旋转。基于最短路径确定方向。</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/f89cb603/image-20201103223223997.png" class="" title="image-20201103223223997">

<center>
    <font face="Kristen ITC" color="#555555" font-size=100px>☬ 右旋操作 ☬</font><br>
</center>

<br>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;右旋&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;过程：父亲下沉，左子上升，左子的右子变成原父的左子&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *     右旋X结点</span></span><br><span class="line"><span class="comment"> *             P                                P</span></span><br><span class="line"><span class="comment"> *            /                                /</span></span><br><span class="line"><span class="comment"> *           X                                Y</span></span><br><span class="line"><span class="comment"> *         /  \        --(右旋)--&gt;           /  \</span></span><br><span class="line"><span class="comment"> *        Y   rX                           lY   X</span></span><br><span class="line"><span class="comment"> *       / \                                   / \</span></span><br><span class="line"><span class="comment"> *     lY  rY                                rY  rX</span></span><br><span class="line"><span class="comment"> * &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rightRotate</span><span class="params">(RBTNode&lt;T, D&gt; x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 左子结点 */</span></span><br><span class="line">    RBTNode&lt;T, D&gt; y = x.getLeft();</span><br><span class="line">    <span class="comment">/* 父亲结点 */</span></span><br><span class="line">    RBTNode&lt;T, D&gt; p = x.getParent();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Y的右子 变成 X的左子</span></span><br><span class="line"><span class="comment">    * 若Y的右子不为空</span></span><br><span class="line"><span class="comment">    * 则设置Y的右子的父亲为X */</span></span><br><span class="line">    x.setLeft(y.getRight());</span><br><span class="line">    <span class="keyword">if</span> (y.getRight() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        y.getRight().setParent(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 设置Y的父亲为P</span></span><br><span class="line"><span class="comment">     * 1. P为空，则根节点设置为Y</span></span><br><span class="line"><span class="comment">     * 2. X为P的左子， 则P的左子设置为Y</span></span><br><span class="line"><span class="comment">     * 3. X为P的右子，则P的右子设置为Y */</span></span><br><span class="line">    y.setParent(p);</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.root = y;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (p.getLeft() == x) &#123;</span><br><span class="line">            p.setLeft(y);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p.setRight(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 将X的父亲设置为Y</span></span><br><span class="line"><span class="comment">    * 将Y的右子设置为X */</span></span><br><span class="line">    x.setParent(y);</span><br><span class="line">    y.setRight(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="🌀-增删"><a href="#🌀-增删" class="headerlink" title="🌀 增删"></a>🌀 增删</h2><br>

<blockquote>
<p>➕插入结点</p>
</blockquote>
<p>新增结点默认为红色，避免破坏黑色完美平衡。</p>
<p>首先寻找新结点的插入位置，即找到新结点的父亲，然后决定将新结点插入到父亲的左边还是右边。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;插入结点&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertNode</span><span class="params">(T key, D data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cmp;</span><br><span class="line">    RBTNode&lt;T, D&gt; x = <span class="keyword">this</span>.root;</span><br><span class="line">    RBTNode&lt;T, D&gt; y = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 寻找新结点的插入位置 */</span></span><br><span class="line">    <span class="keyword">while</span> (x != <span class="keyword">null</span>) &#123;</span><br><span class="line">        y = x;</span><br><span class="line">        cmp = key.compareTo(x.getKey());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cmp == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/* key已存在，直接更新 */</span></span><br><span class="line">            System.out.println(getCurrentTime() + <span class="string">&quot; [WARN] key已存在&quot;</span>);</span><br><span class="line">            System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] 更新value: &quot;</span> + get(key) + <span class="string">&quot; =&gt; &quot;</span> + data);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">/* key较大，继续向右查询 */</span></span><br><span class="line">            x = x.getRight();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/* key较小，继续向左查询 */</span></span><br><span class="line">            x = x.getLeft();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 生成一个新的结点 */</span></span><br><span class="line">    RBTNode&lt;T, D&gt; node = <span class="keyword">new</span> RBTNode&lt;&gt;(RBTColor.red, key, data, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] 新增结点 (&quot;</span> + key + <span class="string">&quot;, &quot;</span> + data + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">    <span class="comment">/* 总结点数量+1 */</span></span><br><span class="line">    <span class="keyword">this</span>.count.incrementAndGet();</span><br><span class="line">    <span class="comment">/* 设置新结点的父亲为Y */</span></span><br><span class="line">    node.setParent(y);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 再次比较决定新结点是y的左子还是右子*/</span></span><br><span class="line">    <span class="keyword">if</span> (y == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.root = node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cmp = key.compareTo(y.getKey());</span><br><span class="line">        <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            y.setRight(node);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            y.setLeft(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 最后进行自平衡 */</span></span><br><span class="line">    balanceInsertion(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>💉插入修复</p>
</blockquote>
<p>插入结点为红色，因此只有当父亲结点为红色时才需要修复。</p>
<p>G-祖父、P-父亲、U-叔叔、C-插入。</p>
<p>我总结了五种情况以及解决口诀:</p>
<p>（1）叔叔为红</p>
<p>CASE 1</p>
<p>Description: 叔叔为红</p>
<p>Solution: GPU变色，若不满足红黑树约束则递归变色</p>
<br>

<p>（2）叔叔为黑</p>
<p>CASE 2</p>
<p>Description: 父为左子，GPC三点一线</p>
<p>Solution: 右旋祖父，GP变色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  (<span class="number">1</span>) 右旋祖父结点</span><br><span class="line">    黑祖                        红父</span><br><span class="line">    / \                         / \</span><br><span class="line"> 红父  黑叔    --(右旋)--&gt;    红插  黑祖</span><br><span class="line">  /                                 \</span><br><span class="line">红插                                黑叔</span><br><span class="line">  (<span class="number">2</span>) 祖父和父亲变色</span><br><span class="line">    红父                        黑父</span><br><span class="line">    / \                         / \</span><br><span class="line"> 红插  黑祖    --(变色)--&gt;    红插  红祖</span><br><span class="line">       \                            \</span><br><span class="line">       黑叔                         黑叔</span><br></pre></td></tr></table></figure>

<br>

<p>CASE 3: </p>
<p>Description: 父为左子，GPC三角关系</p>
<p>Solution: 左旋父亲，交换PC，右旋祖父，GP变色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   (<span class="number">1</span>) 左旋父亲结点，并且交换父子身份，此时GPC三点一线</span><br><span class="line">    黑祖                        黑祖                        黑祖</span><br><span class="line">    / \                         / \                        / \</span><br><span class="line"> 红父  黑叔    --(左旋)--&gt;    红插  黑叔    --(交换)--&gt;    红父  黑叔</span><br><span class="line">  \                          /                           /</span><br><span class="line">  红插                     红父                         红插</span><br><span class="line">  (<span class="number">2</span>) 右旋祖父结点</span><br><span class="line">    黑祖                        红父</span><br><span class="line">    / \                         / \</span><br><span class="line"> 红父  黑叔    --(右旋)--&gt;    红插  黑祖</span><br><span class="line">  /                                 \</span><br><span class="line">红插                                黑叔</span><br><span class="line">  (<span class="number">3</span>) 祖父和父亲变色</span><br><span class="line">    红父                        黑父</span><br><span class="line">    / \                         / \</span><br><span class="line"> 红插  黑祖    --(变色)--&gt;    红插  红组</span><br><span class="line">        \                           \</span><br><span class="line">        黑叔                        黑叔</span><br></pre></td></tr></table></figure>

<br>

<p>CASE 4</p>
<p>Description: 父为右子，GPC三点一线</p>
<p>Solution: 左旋祖父，GP变色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  (<span class="number">1</span>) 左旋祖父结点</span><br><span class="line">    黑祖                        红父</span><br><span class="line">    / \                         / \</span><br><span class="line"> 黑叔  红父    --(右旋)--&gt;    黑祖  红插</span><br><span class="line">        \                     /</span><br><span class="line">        红插                黑叔</span><br><span class="line">  (<span class="number">2</span>) 祖父和父亲变色</span><br><span class="line">    红父                        黑父</span><br><span class="line">    / \                         / \</span><br><span class="line"> 黑祖  红插    --(变色)--&gt;    红祖  红插</span><br><span class="line">  /                           /</span><br><span class="line">黑叔                        黑叔</span><br></pre></td></tr></table></figure>

<br>

<p>CASE 5</p>
<p>Description: 父为右子，GPC三角关系</p>
<p>Solution: 右旋父亲，交换PC，左旋祖父，GP变色</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   (<span class="number">1</span>) 右旋父亲结点，并且交换父子身份，此时GPC三点一线</span><br><span class="line">    黑祖                        黑祖                        黑祖</span><br><span class="line">    / \                         / \                        / \</span><br><span class="line"> 黑叔  红父    --(右旋)--&gt;    黑祖  红插    --(交换)--&gt;    黑祖  红父</span><br><span class="line">       /                            \                          \</span><br><span class="line">     红插                           红父                        红插</span><br><span class="line">   (<span class="number">2</span>) 左旋祖父</span><br><span class="line">    黑祖                        红父</span><br><span class="line">    / \                         / \</span><br><span class="line"> 黑叔  红父    --(左旋)--&gt;    黑祖  红插</span><br><span class="line">        \                    /</span><br><span class="line">        红插               黑叔</span><br><span class="line">   (<span class="number">3</span>) 祖父和父亲变色</span><br><span class="line">    红父                        黑父</span><br><span class="line">    / \                         / \</span><br><span class="line"> 黑叔  红插    --(变色)--&gt;    红祖  红插</span><br><span class="line">  /                         /</span><br><span class="line">黑叔                      黑叔</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>➖删除结点</p>
</blockquote>
<p>三种情况，解决方案主要为寻找后裔顶替自己</p>
<p>CASE 1</p>
<p>Description: 待删结点左子和右子都存在:</p>
<p>Solution: 替代结点为右子树的最左孩子，然后调整关系</p>
<p>CASE 2:</p>
<p>Description: 待删结点没有左子和右子:</p>
<p>Solution: 直接删除，然后调整关系</p>
<p>CASE 3:</p>
<p>Description: 待删结点只有左子或者右子:</p>
<p>Solution: 替代结点为存在的孩子，然后调整关系</p>
<br>

<blockquote>
<p>💉删除修复</p>
</blockquote>
<p>仅删除黑色结点需要修复，删除红色不需要。</p>
<p>P-父亲、D-删除、B-兄弟、BR-兄弟右子、BL-兄弟左子。</p>
<ul>
<li>D为左子<ul>
<li>B为红色：左旋父亲，父亲染红，兄弟染黑，然后continue</li>
<li>B为黑色<ul>
<li>BL为黑色且BR黑色：兄弟染红，父亲回溯</li>
<li>BL为红色且BR为黑色：右旋兄弟，兄弟染红，BL染黑</li>
<li>BR为红色：左旋父亲，父亲的颜色给兄弟，父亲黑化，BR黑化，然后break</li>
</ul>
</li>
</ul>
</li>
<li>D为右子<ul>
<li>B为红色：右旋父亲，父亲染红，兄弟染黑，然后continue</li>
<li>B为黑色：<ul>
<li>BL为黑色且BR为黑色：兄弟染红，父亲回溯</li>
<li>BL为红色且BR为黑色：左旋兄弟，父亲染红，BR染黑</li>
<li>BL为红色：右旋父亲，父亲的颜色给兄弟，父亲黑化，BL黑化，然后break</li>
</ul>
</li>
</ul>
</li>
</ul>
<br>

<h2 id="📑-源码"><a href="#📑-源码" class="headerlink" title="📑 源码"></a>📑 源码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.DataStructures.RBTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Project: Algorithm &lt;/P&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Package: top.parak.DataStructures.RBTree &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; FileName: RBTree &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Description: 红黑树 &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; Created By IntelliJ IDEA &lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/11/5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 红黑颜色 */</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">RBTColor</span> </span>&#123;</span><br><span class="line">    red,</span><br><span class="line">    black</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 红黑结点 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RBTNode</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;, <span class="title">D</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 结点颜色 */</span></span><br><span class="line">    <span class="keyword">private</span> RBTColor color;</span><br><span class="line">    <span class="comment">/* 结点键值 */</span></span><br><span class="line">    <span class="keyword">private</span> T key;</span><br><span class="line">    <span class="comment">/* 结点数据 */</span></span><br><span class="line">    <span class="keyword">private</span> D data;</span><br><span class="line">    <span class="comment">/* 父亲结点 */</span></span><br><span class="line">    <span class="keyword">private</span> RBTNode&lt;T, D&gt; parent;</span><br><span class="line">    <span class="comment">/* 左子结点 */</span></span><br><span class="line">    <span class="keyword">private</span> RBTNode left;</span><br><span class="line">    <span class="comment">/* 右子结点 */</span></span><br><span class="line">    <span class="keyword">private</span> RBTNode right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RBTNode</span><span class="params">(RBTColor color, T key, D data, RBTNode&lt;T, D&gt; parent, RBTNode left, RBTNode right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.parent = parent;</span><br><span class="line">        <span class="keyword">this</span>.left = left;</span><br><span class="line">        <span class="keyword">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RBTColor <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> color;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(RBTColor color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.color == RBTColor.red) &#123;</span><br><span class="line">            <span class="keyword">this</span>.color = RBTColor.black;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.color = RBTColor.red;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(T key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> D <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(D data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RBTNode&lt;T, D&gt; <span class="title">getParent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParent</span><span class="params">(RBTNode&lt;T, D&gt; parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parent = parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RBTNode <span class="title">getLeft</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeft</span><span class="params">(RBTNode left)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.left = left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RBTNode <span class="title">getRight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRight</span><span class="params">(RBTNode right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;RBTNode[&quot;</span> +</span><br><span class="line">                <span class="string">&quot;color=&quot;</span> + color +</span><br><span class="line">                <span class="string">&quot;, key=&quot;</span> + key +</span><br><span class="line">                <span class="string">&quot;, data=&quot;</span> + data +</span><br><span class="line">                <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 红黑树 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedBlackTree</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;, <span class="title">D</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 时间格式 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat SDF = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 根节点 */</span></span><br><span class="line">    <span class="keyword">private</span> RBTNode&lt;T, D&gt; root;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 树结点数量 */</span></span><br><span class="line">    <span class="keyword">private</span> AtomicLong count = <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;获取时间&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getCurrentTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SDF.format(<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;大小&lt;p/&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;查询&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> D <span class="title">get</span><span class="params">(T key)</span> </span>&#123;</span><br><span class="line">        RBTNode&lt;T, D&gt; node = search(key, <span class="keyword">this</span>.root);</span><br><span class="line">        <span class="keyword">return</span> node == <span class="keyword">null</span> ? <span class="keyword">null</span> : node.getData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;插入&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T key, D data)</span> </span>&#123;</span><br><span class="line">        insertNode(key, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;删除&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(T key)</span> </span>&#123;</span><br><span class="line">        RBTNode&lt;T, D&gt; node = search(key, <span class="keyword">this</span>.root);</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            deleteNode(node);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(getCurrentTime() + <span class="string">&quot; [ERROR] &quot;</span> + <span class="string">&quot;key为&quot;</span> + key + <span class="string">&quot;的结点不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;root-getter&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RBTNode&lt;T, D&gt; <span class="title">getRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;判断结点是否为红色&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">isRed</span><span class="params">(RBTNode&lt;T, D&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (node != <span class="keyword">null</span> &amp;&amp; node.getColor() == RBTColor.red) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;判断结点是否为黑色&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">isBlack</span><span class="params">(RBTNode&lt;T, D&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (node == <span class="keyword">null</span> || node.getColor() == RBTColor.black) ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;查询key值的结点&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;递归查询: 比较key，相等直接返回，过大则继续向右，过小则继续向左&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RBTNode&lt;T, D&gt; <span class="title">search</span><span class="params">(T key, RBTNode&lt;T, D&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> cmp = key.compareTo(node.getKey());</span><br><span class="line">            <span class="keyword">if</span> (cmp == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> node;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> search(key, node.getRight());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> search(key, node.getLeft());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;左旋&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;过程：父亲下沉，右子上升，右子的左子变为原父的右子&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     *     左旋X结点</span></span><br><span class="line"><span class="comment">     *             P                                P</span></span><br><span class="line"><span class="comment">     *            /                                /</span></span><br><span class="line"><span class="comment">     *           X                                Y</span></span><br><span class="line"><span class="comment">     *         /  \        --(左旋)--&gt;           / \</span></span><br><span class="line"><span class="comment">     *       lX    Y                           X  rY</span></span><br><span class="line"><span class="comment">     *            / \                        /  \</span></span><br><span class="line"><span class="comment">     *          lY   rY                     lX  lY</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">leftRotate</span><span class="params">(RBTNode&lt;T, D&gt; x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 右子结点 */</span></span><br><span class="line">        RBTNode&lt;T, D&gt; y = x.getRight();</span><br><span class="line">        <span class="comment">/* 父亲结点 */</span></span><br><span class="line">        RBTNode&lt;T, D&gt; p = x.getParent();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Y的左子 变成 X的右子</span></span><br><span class="line"><span class="comment">        * 若X不Y的左子不为空</span></span><br><span class="line"><span class="comment">        * 则设置Y的左子的父亲为X */</span></span><br><span class="line">        x.setRight(y.getLeft());</span><br><span class="line">        <span class="keyword">if</span> (y.getLeft() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            y.getLeft().setParent(x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 设置Y的父亲为P</span></span><br><span class="line"><span class="comment">        * 1. P为空，则根节点设置为Y</span></span><br><span class="line"><span class="comment">        * 2. X为P的左子， 则P的左子设置为Y</span></span><br><span class="line"><span class="comment">        * 3. X为P的右子，则P的右子设置为Y */</span></span><br><span class="line">        y.setParent(p);</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.root = y;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.getLeft() == x) &#123;</span><br><span class="line">                p.setLeft(y);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p.setRight(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 将X的父亲设置为Y</span></span><br><span class="line"><span class="comment">        * 将Y的左子设置为X */</span></span><br><span class="line">        x.setParent(y);</span><br><span class="line">        y.setLeft(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;右旋&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;过程：父亲下沉，左子上升，左子的右子变成原父的左子&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     *     右旋X结点</span></span><br><span class="line"><span class="comment">     *             P                                P</span></span><br><span class="line"><span class="comment">     *            /                                /</span></span><br><span class="line"><span class="comment">     *           X                                Y</span></span><br><span class="line"><span class="comment">     *         /  \        --(右旋)--&gt;           /  \</span></span><br><span class="line"><span class="comment">     *        Y   rX                           lY   X</span></span><br><span class="line"><span class="comment">     *       / \                                   / \</span></span><br><span class="line"><span class="comment">     *     lY  rY                                rY  rX</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rightRotate</span><span class="params">(RBTNode&lt;T, D&gt; x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 左子结点 */</span></span><br><span class="line">        RBTNode&lt;T, D&gt; y = x.getLeft();</span><br><span class="line">        <span class="comment">/* 父亲结点 */</span></span><br><span class="line">        RBTNode&lt;T, D&gt; p = x.getParent();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Y的右子 变成 X的左子</span></span><br><span class="line"><span class="comment">        * 若Y的右子不为空</span></span><br><span class="line"><span class="comment">        * 则设置Y的右子的父亲为X */</span></span><br><span class="line">        x.setLeft(y.getRight());</span><br><span class="line">        <span class="keyword">if</span> (y.getRight() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            y.getRight().setParent(x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 设置Y的父亲为P</span></span><br><span class="line"><span class="comment">         * 1. P为空，则根节点设置为Y</span></span><br><span class="line"><span class="comment">         * 2. X为P的左子， 则P的左子设置为Y</span></span><br><span class="line"><span class="comment">         * 3. X为P的右子，则P的右子设置为Y */</span></span><br><span class="line">        y.setParent(p);</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.root = y;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.getLeft() == x) &#123;</span><br><span class="line">                p.setLeft(y);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p.setRight(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 将X的父亲设置为Y</span></span><br><span class="line"><span class="comment">        * 将Y的右子设置为X */</span></span><br><span class="line">        x.setParent(y);</span><br><span class="line">        y.setRight(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;插入结点&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insertNode</span><span class="params">(T key, D data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cmp;</span><br><span class="line">        RBTNode&lt;T, D&gt; x = <span class="keyword">this</span>.root;</span><br><span class="line">        RBTNode&lt;T, D&gt; y = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 寻找新结点的插入位置 */</span></span><br><span class="line">        <span class="keyword">while</span> (x != <span class="keyword">null</span>) &#123;</span><br><span class="line">            y = x;</span><br><span class="line">            cmp = key.compareTo(x.getKey());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (cmp == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">/* key已存在，直接更新 */</span></span><br><span class="line">                System.out.println(getCurrentTime() + <span class="string">&quot; [WARN] key已存在&quot;</span>);</span><br><span class="line">                System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] 更新value: &quot;</span> + get(key) + <span class="string">&quot; =&gt; &quot;</span> + data);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">/* key较大，继续向右查询 */</span></span><br><span class="line">                x = x.getRight();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">/* key较小，继续向左查询 */</span></span><br><span class="line">                x = x.getLeft();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 生成一个新的结点 */</span></span><br><span class="line">        RBTNode&lt;T, D&gt; node = <span class="keyword">new</span> RBTNode&lt;&gt;(RBTColor.red, key, data, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] 新增结点 (&quot;</span> + key + <span class="string">&quot;, &quot;</span> + data + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">        <span class="comment">/* 总结点数量+1 */</span></span><br><span class="line">        <span class="keyword">this</span>.count.incrementAndGet();</span><br><span class="line">        <span class="comment">/* 设置新结点的父亲为Y */</span></span><br><span class="line">        node.setParent(y);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 再次比较决定新结点是y的左子还是右子*/</span></span><br><span class="line">        <span class="keyword">if</span> (y == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.root = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cmp = key.compareTo(y.getKey());</span><br><span class="line">            <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                y.setRight(node);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                y.setLeft(node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 最后进行自平衡 */</span></span><br><span class="line">        balanceInsertion(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;插入结点的自平衡操作&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;由于插入节点默认颜色为红色，所以只有父结点为红色时候才需要修复</span></span><br><span class="line"><span class="comment">     *   分三种情况讨论&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;case1. 叔叔结点也为红色&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;case2. 叔叔结点为空，且祖父子三点一线&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;case3. 叔叔结点为空，且祖父子三角关系&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;G-祖父、P-父亲、U-叔叔、C-插入&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">balanceInsertion</span><span class="params">(RBTNode&lt;T, D&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 父亲 · 祖父 */</span></span><br><span class="line">        RBTNode&lt;T, D&gt; paren, grand;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 当父亲节点为黑色时，结束修复 */</span></span><br><span class="line">        <span class="keyword">while</span> (((paren = node.getParent()) != <span class="keyword">null</span>) &amp;&amp; isRed(paren)) &#123;</span><br><span class="line">            grand = paren.getParent();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 确定父亲和叔叔的左右关系 */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* CASE: 父左叔右 */</span></span><br><span class="line">            <span class="keyword">if</span> (grand.getLeft() == paren) &#123;</span><br><span class="line">                RBTNode&lt;T, D&gt; uncle = grand.getRight();</span><br><span class="line"></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * case1: PU双红</span></span><br><span class="line"><span class="comment">                 * solution1: GPU变色</span></span><br><span class="line"><span class="comment">                 * 如果此时整棵树不满足约束，则递归进行GPU变色</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span> (isRed(uncle)) &#123;</span><br><span class="line">                    grand.setColor(RBTColor.red);</span><br><span class="line">                    paren.setColor(RBTColor.black);</span><br><span class="line">                    uncle.setColor(RBTColor.black);</span><br><span class="line">                    node = grand;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * case2: P红U黑，父为左子，GPC三点一线</span></span><br><span class="line"><span class="comment">                 * solution2: 右旋祖父，GP变色</span></span><br><span class="line"><span class="comment">                 *         (1) 右旋祖父结点</span></span><br><span class="line"><span class="comment">                 *           黑祖                        红父</span></span><br><span class="line"><span class="comment">                 *           / \                         / \</span></span><br><span class="line"><span class="comment">                 *        红父  黑叔    --(右旋)--&gt;    红插  黑祖</span></span><br><span class="line"><span class="comment">                 *         /                                 \</span></span><br><span class="line"><span class="comment">                 *       红插                                黑叔</span></span><br><span class="line"><span class="comment">                 *         (2) 祖父和父亲变色</span></span><br><span class="line"><span class="comment">                 *           红父                        黑父</span></span><br><span class="line"><span class="comment">                 *           / \                         / \</span></span><br><span class="line"><span class="comment">                 *        红插  黑祖    --(变色)--&gt;    红插  红祖</span></span><br><span class="line"><span class="comment">                 *              \                            \</span></span><br><span class="line"><span class="comment">                 *              黑叔                         黑叔</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                * case3: P红U黑，父为左子，GPC三角关系</span></span><br><span class="line"><span class="comment">                * solution3: 左旋父亲，交换PC，右旋祖父，GP变色</span></span><br><span class="line"><span class="comment">                *         (1) 左旋父亲结点，并且交换父子身份，此时GPC三点一线</span></span><br><span class="line"><span class="comment">                *          黑祖                        黑祖                        黑祖</span></span><br><span class="line"><span class="comment">                *          / \                         / \                        / \</span></span><br><span class="line"><span class="comment">                *       红父  黑叔    --(左旋)--&gt;    红插  黑叔    --(交换)--&gt;    红父  黑叔</span></span><br><span class="line"><span class="comment">                *        \                          /                           /</span></span><br><span class="line"><span class="comment">                *        红插                     红父                         红插</span></span><br><span class="line"><span class="comment">                *        (2) 右旋祖父结点</span></span><br><span class="line"><span class="comment">                *          黑祖                        红父</span></span><br><span class="line"><span class="comment">                *          / \                         / \</span></span><br><span class="line"><span class="comment">                *       红父  黑叔    --(右旋)--&gt;    红插  黑祖y</span></span><br><span class="line"><span class="comment">                *        /                                 \</span></span><br><span class="line"><span class="comment">                *      红插                                黑叔</span></span><br><span class="line"><span class="comment">                *        (3) 祖父和父亲变色</span></span><br><span class="line"><span class="comment">                *          红父                        黑</span></span><br><span class="line"><span class="comment">                *          / \                         / \</span></span><br><span class="line"><span class="comment">                *       红插  黑祖    --(变色)--&gt;    红插  红组</span></span><br><span class="line"><span class="comment">                *              \                           \</span></span><br><span class="line"><span class="comment">                *              黑叔                        黑叔</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 * attention:</span></span><br><span class="line"><span class="comment">                 * 三角关系经过一步旋转即可转换成三点一线</span></span><br><span class="line"><span class="comment">                 * 因此case3先经过一步处理到case2，再进行case2的处理</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (paren.getRight() == node) &#123; <span class="comment">// case3</span></span><br><span class="line">                        leftRotate(paren);</span><br><span class="line">                        RBTNode&lt;T, D&gt; temp = node;</span><br><span class="line">                        node = paren;</span><br><span class="line">                        paren = temp;</span><br><span class="line">                    &#125; <span class="comment">// case2</span></span><br><span class="line">                    rightRotate(grand);</span><br><span class="line">                    grand.updateColor();</span><br><span class="line">                    paren.updateColor();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* CASE: 父右叔左 */</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                RBTNode&lt;T, D&gt; uncle = grand.getLeft();</span><br><span class="line"></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * case1: PU双红(父亲和叔叔都为红色)</span></span><br><span class="line"><span class="comment">                 * solution1: GPU变色(祖父变为红色，父亲和叔叔都变为黑色)</span></span><br><span class="line"><span class="comment">                 * 如果此时整棵树不满足约束，则递归进行GPU变色</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span> (isRed(uncle)) &#123;</span><br><span class="line">                    grand.setColor(RBTColor.red);</span><br><span class="line">                    paren.setColor(RBTColor.black);</span><br><span class="line">                    uncle.setColor(RBTColor.black);</span><br><span class="line">                    node = grand;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * case4: P红U黑，父为左子，GPC三点一线</span></span><br><span class="line"><span class="comment">                 * solution4: 左旋祖父，GP变色</span></span><br><span class="line"><span class="comment">                 *         (1) 左旋祖父结点</span></span><br><span class="line"><span class="comment">                 *           黑祖                        红父</span></span><br><span class="line"><span class="comment">                 *           / \                         / \</span></span><br><span class="line"><span class="comment">                 *        黑叔  红父    --(右旋)--&gt;    黑祖  红插</span></span><br><span class="line"><span class="comment">                 *               \                     /</span></span><br><span class="line"><span class="comment">                 *               红插                黑叔</span></span><br><span class="line"><span class="comment">                 *          (2) 祖父和父亲变色</span></span><br><span class="line"><span class="comment">                 *           红父                        黑父</span></span><br><span class="line"><span class="comment">                 *           / \                         / \</span></span><br><span class="line"><span class="comment">                 *        黑祖  红插    --(变色)--&gt;    红祖  红插</span></span><br><span class="line"><span class="comment">                 *         /                           /</span></span><br><span class="line"><span class="comment">                 *       黑叔                        黑叔</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 * case5: P红U黑，父为右子，GPC三角关系</span></span><br><span class="line"><span class="comment">                 * solution5: 右旋父亲，交换PC，左旋祖父，GP变色</span></span><br><span class="line"><span class="comment">                 *          (1) 右旋父亲结点，并且交换父子身份，此时GPC三点一线</span></span><br><span class="line"><span class="comment">                 *           黑祖                        黑祖                        黑祖</span></span><br><span class="line"><span class="comment">                 *           / \                         / \                        / \</span></span><br><span class="line"><span class="comment">                 *        黑叔  红父    --(右旋)--&gt;    黑祖  红插    --(交换)--&gt;    黑祖  红父</span></span><br><span class="line"><span class="comment">                 *              /                            \                          \</span></span><br><span class="line"><span class="comment">                 *            红插                           红父                        红插</span></span><br><span class="line"><span class="comment">                 *          (2) 左旋祖父</span></span><br><span class="line"><span class="comment">                 *           黑祖                        红父</span></span><br><span class="line"><span class="comment">                 *           / \                         / \</span></span><br><span class="line"><span class="comment">                 *        黑叔  红父    --(左旋)--&gt;    黑祖  红插</span></span><br><span class="line"><span class="comment">                 *               \                    /</span></span><br><span class="line"><span class="comment">                 *               红插               黑叔</span></span><br><span class="line"><span class="comment">                 *          (3) 祖父和父亲变色</span></span><br><span class="line"><span class="comment">                 *           红父                        黑父</span></span><br><span class="line"><span class="comment">                 *           / \                         / \</span></span><br><span class="line"><span class="comment">                 *        黑叔  红插    --(变色)--&gt;    红祖  红插</span></span><br><span class="line"><span class="comment">                 *         /                         /</span></span><br><span class="line"><span class="comment">                 *       黑叔                      黑叔</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 * attention:</span></span><br><span class="line"><span class="comment">                 * 三角关系经过一步旋转即可转换成三点一线</span></span><br><span class="line"><span class="comment">                 * 因此case3先经过一步处理到case2，再进行case2的处理</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (paren.getLeft() == node) &#123; <span class="comment">// case3</span></span><br><span class="line">                        rightRotate(paren);</span><br><span class="line">                        RBTNode&lt;T, D&gt; temp = node;</span><br><span class="line">                        node = paren;</span><br><span class="line">                        paren = temp;</span><br><span class="line">                    &#125; <span class="comment">// case2</span></span><br><span class="line">                    leftRotate(grand);</span><br><span class="line">                    grand.updateColor();</span><br><span class="line">                    paren.updateColor();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 保证根节点为黑色 */</span></span><br><span class="line">        <span class="keyword">if</span> (root == node) &#123;</span><br><span class="line">            node.setColor(RBTColor.black);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;删除结点&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;三种情况&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;case1. 待删结点左子和右子都存在&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;case2. 待删结点没有左子和右子&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;case3. 待删结点只有左子或者右子&lt;/li&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(RBTNode&lt;T, D&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 父亲 · 儿子 · 继承者 */</span></span><br><span class="line">        RBTNode&lt;T, D&gt; paren, child, replace;</span><br><span class="line">        RBTColor color;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * case1: 待删结点左子和右子都存在</span></span><br><span class="line"><span class="comment">         * solution1:</span></span><br><span class="line"><span class="comment">         * - 找到该结点的右子树中的最左子结点</span></span><br><span class="line"><span class="comment">         * - 把它的值和要删除的结点的值进行交换</span></span><br><span class="line"><span class="comment">         * - 然后删除这个结点即相当于删除所需删除结点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> ((node.getLeft() != <span class="keyword">null</span>) &amp;&amp; (node.getRight() != <span class="keyword">null</span>))  &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*  获取其后继结点: 右子树中的最左子结点 */</span></span><br><span class="line">            replace = descendants(node);</span><br><span class="line">            paren = replace.getParent();</span><br><span class="line">            child = replace.getRight();</span><br><span class="line">            color = replace.getColor();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node == replace.getParent()) &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * case:</span></span><br><span class="line"><span class="comment">                 *    node              replace</span></span><br><span class="line"><span class="comment">                 *      \                  \</span></span><br><span class="line"><span class="comment">                 *      replace    --&gt;    child</span></span><br><span class="line"><span class="comment">                 *         \</span></span><br><span class="line"><span class="comment">                 *         child</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                paren = replace;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * case:</span></span><br><span class="line"><span class="comment">                 *     node                replace</span></span><br><span class="line"><span class="comment">                 *       \                   \</span></span><br><span class="line"><span class="comment">                 *        X                   X</span></span><br><span class="line"><span class="comment">                 *       / \                 / \</span></span><br><span class="line"><span class="comment">                 *  paren   X    --&gt;    paren   X</span></span><br><span class="line"><span class="comment">                 *     /                  /</span></span><br><span class="line"><span class="comment">                 *  replace            child</span></span><br><span class="line"><span class="comment">                 *     \</span></span><br><span class="line"><span class="comment">                 *     child</span></span><br><span class="line"><span class="comment">                 *</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="comment">/* 建立替代结点的父亲与替换结点的右子的父子关系，即爷孙変父子 */</span></span><br><span class="line">                <span class="keyword">if</span> (child != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    child.setParent(replace.getParent());</span><br><span class="line">                &#125;</span><br><span class="line">                replace.getParent().setLeft(child);</span><br><span class="line">                <span class="comment">/* 建立替代节点与待删节点的右子的父子关系 */</span></span><br><span class="line">                replace.setRight(node.getRight());</span><br><span class="line">                node.getRight().setParent(replace);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 待删节点的父亲设置为替代结点的父亲 */</span></span><br><span class="line">            replace.setParent(node.getParent());</span><br><span class="line">            <span class="comment">/* 建立替换结点与待删节点左子的父子关系 */</span></span><br><span class="line">            replace.setLeft(node.getLeft());</span><br><span class="line">            node.getLeft().setParent(replace);</span><br><span class="line">            <span class="comment">/* 替代结点沿用待删节点的颜色 */</span></span><br><span class="line">            replace.setColor(node.getColor());</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 待删结点的父亲不为空，则调整左右子 */</span></span><br><span class="line">            <span class="keyword">if</span> (node.getParent() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node.getParent().getLeft() == node) &#123;</span><br><span class="line">                    node.getParent().setLeft(replace);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    node.getParent().setRight(replace);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* 待删结点的父亲为空，则设置根结点 */</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.root = replace;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 删除黑色结点需要调整平衡，红色不需要 */</span></span><br><span class="line">            <span class="keyword">if</span> (color == RBTColor.black) &#123;</span><br><span class="line">                balanceDeletion(child, paren);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * case2: 待删结点没有左子和右子</span></span><br><span class="line"><span class="comment">         * solution2: 直接删除结点</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((node.getLeft() == <span class="keyword">null</span>) &amp;&amp; (node.getRight() == <span class="keyword">null</span>)) &#123;</span><br><span class="line">            paren = node.getParent();</span><br><span class="line">            <span class="keyword">if</span> (node == paren.getLeft()) &#123;</span><br><span class="line">                paren.setLeft(node.getLeft());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                paren.setRight(node.getRight());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * case3: 待删结点只有左子或者右子</span></span><br><span class="line"><span class="comment">         * solution3: 待删节点的父亲指向存在的子嗣</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* 确定替代结点 */</span></span><br><span class="line">            <span class="keyword">if</span> (node.getLeft() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                replace = node.getLeft();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                replace = node.getRight();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 待删结点的父亲 */</span></span><br><span class="line">            paren = node.getParent();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 待删结点的父亲是否为空 */</span></span><br><span class="line">            <span class="keyword">if</span> (paren != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (paren.getLeft() == node) &#123;</span><br><span class="line">                    paren.setLeft(replace);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    paren.setRight(replace);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.root = replace;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 待删节点的父亲指向替代结点 */</span></span><br><span class="line">            replace.setParent(paren);</span><br><span class="line"></span><br><span class="line">            color = node.getColor();</span><br><span class="line">            child = replace;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 删除黑色结点需要调整平衡，红色不需要 */</span></span><br><span class="line">            <span class="keyword">if</span> (color == RBTColor.black) &#123;</span><br><span class="line">                balanceDeletion(child, paren);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 结点数量-1 */</span></span><br><span class="line">        count.decrementAndGet();</span><br><span class="line">        System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] key为&quot;</span> + node.getKey() + <span class="string">&quot;的结点删除成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;寻找继承的后裔&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RBTNode&lt;T, D&gt; <span class="title">descendants</span><span class="params">(RBTNode&lt;T, D&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 查询大于该节点的最小结点，即右子树的最左结点 */</span></span><br><span class="line">        <span class="keyword">if</span> (node.getRight() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            RBTNode&lt;T, D&gt; right = node.getRight();</span><br><span class="line">            <span class="keyword">if</span> (right.getLeft() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (right.getLeft() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                right = right.getLeft();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* @deprecated */</span></span><br><span class="line">        RBTNode&lt;T, D&gt; paren = node.getParent();</span><br><span class="line">        <span class="keyword">while</span> ((paren != <span class="keyword">null</span>) &amp;&amp; (paren.getRight() == node)) &#123;</span><br><span class="line">            node = paren;</span><br><span class="line">            paren = paren.getParent();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> paren;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;删除结点的自平衡操作&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * P-父亲、D-删除、B-兄弟、BR-兄弟右子、BL-兄弟左子。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * - D为左子</span></span><br><span class="line"><span class="comment">     *   - B为红色：左旋父亲，父亲染红，兄弟染黑，然后continue</span></span><br><span class="line"><span class="comment">     *   - B为黑色</span></span><br><span class="line"><span class="comment">     *     - BL为黑色且BR黑色：兄弟染红，父亲回溯</span></span><br><span class="line"><span class="comment">     *     - BL为红色且BR为黑色：右旋兄弟，兄弟染红，BL染黑</span></span><br><span class="line"><span class="comment">     *     - BR为红色：左旋父亲，父亲的颜色给兄弟，父亲黑化，BR黑化，然后break</span></span><br><span class="line"><span class="comment">     * - D为右子</span></span><br><span class="line"><span class="comment">     *   - B为红色：右旋父亲，父亲染红，兄弟染黑，然后continue</span></span><br><span class="line"><span class="comment">     *   - B为黑色：</span></span><br><span class="line"><span class="comment">     *     - BL为黑色且BR为黑色：兄弟染红，父亲回溯</span></span><br><span class="line"><span class="comment">     *     - BL为红色且BR为黑色：左旋兄弟，父亲染红，BR染黑</span></span><br><span class="line"><span class="comment">     *     - BL为红色：右旋父亲，父亲的颜色给兄弟，父亲黑化，BL黑化，然后break</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> paren</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     *     入参情况:</span></span><br><span class="line"><span class="comment">     *     1. node=替换节点 paren=替换节点的父亲节点</span></span><br><span class="line"><span class="comment">     *     2. node=替换节点的孩子节点 paren=替换节点</span></span><br><span class="line"><span class="comment">     *     3. node=替换节点的孩子节点 parent=替换节点的父节点</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">balanceDeletion</span><span class="params">(RBTNode&lt;T, D&gt; node, RBTNode&lt;T, D&gt; paren)</span> </span>&#123;</span><br><span class="line">        RBTNode&lt;T, D&gt; broth;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (isBlack(node) &amp;&amp; node != <span class="keyword">this</span>.root) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (paren.getLeft() == node) &#123;</span><br><span class="line">                broth = paren.getRight();</span><br><span class="line"></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * case1: D为左子。B为红色</span></span><br><span class="line"><span class="comment">                 * solution1: 左旋父亲，父亲染红，兄弟染黑，然后continue</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span> (isRed(broth)) &#123;</span><br><span class="line">                    leftRotate(paren);</span><br><span class="line">                    paren.setColor(RBTColor.red);</span><br><span class="line">                    broth.setColor(RBTColor.black);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * case2: D为左子。B为黑色，BL为黑色且BR为黑色</span></span><br><span class="line"><span class="comment">                     * solution2: 兄弟染红，父亲回溯</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">if</span> (isBlack(broth.getLeft()) &amp;&amp; isBlack(broth.getRight())) &#123;</span><br><span class="line">                        broth.setColor(RBTColor.red);</span><br><span class="line">                        node = paren;</span><br><span class="line">                        paren = paren.getParent();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * case3: D为左子。B为黑色，BL为红色且BR为黑色</span></span><br><span class="line"><span class="comment">                     * solution3: 右旋兄弟，兄弟染红，BL染黑</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (isRed(broth.getLeft()) &amp;&amp; isBlack(broth.getRight())) &#123;</span><br><span class="line">                        rightRotate(broth);</span><br><span class="line">                        broth.setColor(RBTColor.red);</span><br><span class="line">                        broth.getLeft().setColor(RBTColor.black);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * case4: D为左子，B为黑色，BR为红色</span></span><br><span class="line"><span class="comment">                     * solution4: 左旋父亲，父亲的颜色给兄弟，父亲黑化，BR黑化，然后break</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (isRed(broth.getRight())) &#123;</span><br><span class="line">                        leftRotate(paren);</span><br><span class="line">                        broth.setColor(paren.getColor());</span><br><span class="line">                        paren.setColor(RBTColor.black);</span><br><span class="line">                        broth.getRight().setColor(RBTColor.black);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                broth = paren.getLeft();</span><br><span class="line"></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * case5: D为右子。B为红色</span></span><br><span class="line"><span class="comment">                 * solution5: 右旋父亲，父亲染红，兄弟染黑，然后continue</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span> (isRed(broth)) &#123;</span><br><span class="line">                    rightRotate(paren);</span><br><span class="line">                    paren.setColor(RBTColor.red);</span><br><span class="line">                    broth.setColor(RBTColor.black);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * case6: D为右子。B为黑色，BL为黑色且BR为黑色</span></span><br><span class="line"><span class="comment">                     * solution6: 兄弟染红，父亲回溯</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">if</span> (isBlack(broth.getLeft()) &amp;&amp; isBlack(broth.getRight())) &#123;</span><br><span class="line">                        broth.setColor(RBTColor.red);</span><br><span class="line">                        node = paren;</span><br><span class="line">                        paren = paren.getParent();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * case7: D为右子。B为黑色，BL为红色且BR为黑色</span></span><br><span class="line"><span class="comment">                     * solution7: 左旋兄弟，父亲染红，BR染黑</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (isRed(broth.getLeft()) &amp;&amp; isBlack(broth.getRight())) &#123;</span><br><span class="line">                        leftRotate(broth);</span><br><span class="line">                        paren.setColor(RBTColor.red);</span><br><span class="line">                        broth.getRight().setColor(RBTColor.black);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * case8: D为右子，B为黑色，BR为红色</span></span><br><span class="line"><span class="comment">                     * solution8: 右旋父亲，父亲的颜色给兄弟，父亲黑化，BL黑化，然后break</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (isRed(broth.getRight())) &#123;</span><br><span class="line">                        rightRotate(paren);</span><br><span class="line">                        broth.setColor(paren.getColor());</span><br><span class="line">                        paren.setColor(RBTColor.black);</span><br><span class="line">                        broth.getRight().setColor(RBTColor.black);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* node染成被删结点的颜色 */</span></span><br><span class="line">        node.setColor(RBTColor.black);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;层次遍历&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">levelOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;List&lt;RBTNode&lt;T, D&gt;&gt;&gt; levelList = levelOrder(<span class="keyword">this</span>.root);</span><br><span class="line">        <span class="keyword">for</span> (List&lt;RBTNode&lt;T, D&gt;&gt; list:levelList) &#123;</span><br><span class="line">            <span class="keyword">for</span> (RBTNode node : list) &#123;</span><br><span class="line">                System.out.print(node.getKey() + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;层次遍历&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;List&lt;RBTNode&lt;T, D&gt;&gt;&gt; levelOrder(RBTNode&lt;T, D&gt; node) &#123;</span><br><span class="line">        List&lt;List&lt;RBTNode&lt;T, D&gt;&gt;&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        Queue&lt;RBTNode&lt;T, D&gt;&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.add(node);</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> count = queue.size();</span><br><span class="line">            List&lt;RBTNode&lt;T, D&gt;&gt; cur = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span> (count != <span class="number">0</span>) &#123;</span><br><span class="line">                RBTNode&lt;T, D&gt; temp = queue.poll();</span><br><span class="line">                cur.add(temp);</span><br><span class="line">                <span class="keyword">if</span> (temp.getLeft() != <span class="keyword">null</span>) queue.add(temp.getLeft());</span><br><span class="line">                <span class="keyword">if</span> (temp.getRight() != <span class="keyword">null</span>) queue.add(temp.getRight());</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;输出红黑树的层级结构&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printRBTreeLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] 开始打印红黑树的层级结构&quot;</span>);</span><br><span class="line">        ConcurrentHashMap&lt;Integer, List&lt;RBTNode&gt;&gt; map = showTree();</span><br><span class="line">        <span class="keyword">int</span> size = map.size();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; map.size(); i++) &#123;</span><br><span class="line">            System.out.println();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; map.get(i).size(); j++) &#123;</span><br><span class="line">                System.out.print( makeSpace(size, i) +</span><br><span class="line">                        (map.get(i).get(j).getKey() == <span class="keyword">null</span> ? <span class="string">&quot; &quot;</span> : (map.get(i).get(j).getKey()) + (map.get(i).get(j).getColor() == RBTColor.black ? <span class="string">&quot;(黑)&quot;</span> : <span class="string">&quot;(红)&quot;</span>)) + makeSpace(size, i));</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] 红黑树的层级结构打印完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;输出整棵树的Graphviz结构&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printGraphviz</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] 开始打印树的Graphviz结构&quot;</span>);</span><br><span class="line">        ConcurrentHashMap&lt;Integer, List&lt;RBTNode&gt;&gt; map = showTree();</span><br><span class="line">        <span class="keyword">int</span> size = map.size();</span><br><span class="line">        System.out.println(<span class="string">&quot;digraph &#123;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; map.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; map.get(i).size(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(map.get(i).get(j).getKey() != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    System.out.println(map.get(i).get(j).getKey() + <span class="string">&quot; [color=&quot;</span>  + (map.get(i).get(j).getColor()) + <span class="string">&quot;] &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; map.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; map.get(i).size(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(map.get(i).get(j).getKey() != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(map.get(i).get(j).getLeft() != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        System.out.println(map.get(i).get(j).getKey() + <span class="string">&quot;-&gt;&quot;</span> + map.get(i).get(j).getLeft().getKey() + <span class="string">&quot;[label=left]&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(map.get(i).get(j).getRight() != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        System.out.println(map.get(i).get(j).getKey() + <span class="string">&quot;-&gt;&quot;</span> + map.get(i).get(j).getRight().getKey() + <span class="string">&quot;[label=right]&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] 树的Graphviz结构打印完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">makeSpace</span><span class="params">(<span class="keyword">int</span> size, <span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; (size - index); i++) &#123;</span><br><span class="line">            builder.append(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ConcurrentHashMap&lt;Integer, List&lt;RBTNode&gt;&gt; showTree()&#123;</span><br><span class="line">        ConcurrentHashMap&lt;Integer, List&lt;RBTNode&gt;&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">        showTree(root, <span class="number">0</span>, map);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showTree</span><span class="params">(RBTNode root, <span class="keyword">int</span> count, ConcurrentHashMap&lt;Integer, List&lt;RBTNode&gt;&gt; map)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (map.get(count) == <span class="keyword">null</span>)&#123;</span><br><span class="line">            map.put(count, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        map.get(count).add(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root.getLeft() != <span class="keyword">null</span>)&#123;</span><br><span class="line">            showTree(root.getLeft(), count+<span class="number">1</span> , map);</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.get(count+<span class="number">1</span>) == <span class="keyword">null</span>)&#123;</span><br><span class="line">                map.put(count+<span class="number">1</span>, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            map.get(count+<span class="number">1</span>).add(<span class="keyword">new</span> RBTNode(RBTColor.red, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.getRight() != <span class="keyword">null</span>)&#123;</span><br><span class="line">            showTree(root.getRight(), count+<span class="number">1</span> , map);</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.get(count+<span class="number">1</span>) == <span class="keyword">null</span>)&#123;</span><br><span class="line">                map.put(count+<span class="number">1</span>, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            map.get(count+<span class="number">1</span>).add(<span class="keyword">new</span> RBTNode(RBTColor.red, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;菜单&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RBT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RedBlackTree KTree = <span class="keyword">new</span> RedBlackTree();</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println((<span class="string">&quot;┏━━━━━━━━━ ▶ ▶ ▶ ▶ ▶ RED ❤ BLACK ◀ ◀ ◀ ◀ ◀ ━━━━━━━━━━┓&quot;</span>));</span><br><span class="line">            System.out.println((<span class="string">&quot;   ✪━━━━━━━━━━━━━━━━━━━ 1. 插入节点 ━━━━━━━━━━━━━━━━━━━✪&quot;</span>));</span><br><span class="line">            System.out.println((<span class="string">&quot;   ✪━━━━━━━━━━━━━━━━━━━ 2. 查询节点 ━━━━━━━━━━━━━━━━━━━✪&quot;</span>));</span><br><span class="line">            System.out.println((<span class="string">&quot;   ✪━━━━━━━━━━━━━━━━━━━ 3. 删除结点 ━━━━━━━━━━━━━━━━━━━✪&quot;</span>));</span><br><span class="line">            System.out.println((<span class="string">&quot;   ✪━━━━━━━━━━━━━━━━━━━ 4. 查询数量 ━━━━━━━━━━━━━━━━━━━✪&quot;</span>));</span><br><span class="line">            System.out.println((<span class="string">&quot;   ✪━━━━━━━━━━━━━━━━━━━ 5. 层次结构 ━━━━━━━━━━━━━━━━━━━✪&quot;</span>));</span><br><span class="line">            System.out.println((<span class="string">&quot;   ✪━━━━━━━━━━━━━━━━━━━ 6. Graphviz ━━━━━━━━━━━━━━━━━━✪&quot;</span>));</span><br><span class="line">            System.out.println((<span class="string">&quot;   ✪━━━━━━━━━━━━━━━━━━━ 7. 退出系统 ━━━━━━━━━━━━━━━━━━━✪&quot;</span>));</span><br><span class="line">            System.out.println((<span class="string">&quot;┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛&quot;</span>));</span><br><span class="line"></span><br><span class="line">            System.out.print(getCurrentTime() + <span class="string">&quot; [input] 输入选择：&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> choice = scanner.nextInt();</span><br><span class="line">            <span class="keyword">int</span> key;</span><br><span class="line">            String value;</span><br><span class="line">            <span class="keyword">switch</span> (choice) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    System.out.print(getCurrentTime() + <span class="string">&quot; [INPUT] 输入键值：&quot;</span>);</span><br><span class="line">                    key = scanner.nextInt();</span><br><span class="line">                    System.out.print(getCurrentTime() + <span class="string">&quot; [INPUT] 输入数据：&quot;</span>);</span><br><span class="line">                    value = scanner.next();</span><br><span class="line">                    KTree.add(key, value);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    System.out.print(getCurrentTime() + <span class="string">&quot; [INPUT] 输入键值：&quot;</span>);</span><br><span class="line">                    key = scanner.nextInt();</span><br><span class="line">                    System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] 查询结果 value = &quot;</span> + KTree.get(key));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    System.out.print(getCurrentTime() + <span class="string">&quot; [INPUT] 输入键值：&quot;</span>);</span><br><span class="line">                    key = scanner.nextInt();</span><br><span class="line">                    KTree.del(key);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] 查询结果 size = &quot;</span> + KTree.size());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                    KTree.printRBTreeLevel();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                    KTree.printGraphviz();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                    System.out.println(getCurrentTime() + <span class="string">&quot; [INFO] 退出成功&quot;</span>);</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    System.out.println(getCurrentTime() + <span class="string">&quot; [ERROR] 输入错误&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RedBlackTree redBlackTree = <span class="keyword">new</span> RedBlackTree();</span><br><span class="line">        redBlackTree.RBT();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>RedBlackTree</tag>
      </tags>
  </entry>
  <entry>
    <title>叶惠美</title>
    <url>/posts/f8cdfd0a/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/f8cdfd0a/MyCD.jpg" class="" title="MyCD">


        <div id="aplayer-GkVNmYta" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;"></div>
			  <script>
				  var options = {"narrow":false,"autoplay":false,"showlrc":1,"mode":"oredr","mutex":true,"theme":"#e6d0b2","preload":"metadata","listmaxheight":"513px","music":[{"title":"以父之名","author":"周杰伦","url":"/posts/f8cdfd0a/以父之名.ogg","pic":"/posts/f8cdfd0a/YHM.jpg","lrc":"以父之名.txt"},{"title":"懦夫","author":"周杰伦","url":"/posts/f8cdfd0a/懦夫.ogg","pic":"/posts/f8cdfd0a/YHM.jpg","lrc":"懦夫.txt"},{"title":"晴天","author":"周杰伦","url":"/posts/f8cdfd0a/晴天.flac","pic":"/posts/f8cdfd0a/YHM.jpg","lrc":"晴天.txt"},{"title":"三年二班","author":"周杰伦","url":"/posts/f8cdfd0a/三年二班.ogg","pic":"/posts/f8cdfd0a/YHM.jpg","lrc":"三年二班.txt"},{"title":"东风破","author":"周杰伦","url":"/posts/f8cdfd0a/东风破.ogg","pic":"/posts/f8cdfd0a/YHM.jpg","lrc":"东风破.txt"},{"title":"你听得到","author":"周杰伦","url":"/posts/f8cdfd0a/你听得到.ogg","pic":"/posts/f8cdfd0a/YHM.jpg","lrc":"你听得到.txt"},{"title":"同一种调调","author":"周杰伦","url":"/posts/f8cdfd0a/同一种调调.ogg","pic":"/posts/f8cdfd0a/YHM.jpg","lrc":"同一种调调.txt"},{"title":"她的睫毛","author":"周杰伦","url":"/posts/f8cdfd0a/她的睫毛.ogg","pic":"/posts/f8cdfd0a/YHM.jpg","lrc":"她的睫毛.txt"},{"title":"爱情悬崖","author":"周杰伦","url":"/posts/f8cdfd0a/爱情悬崖.ogg","pic":"/posts/f8cdfd0a/YHM.jpg","lrc":"爱情悬崖.txt"},{"title":"梯田","author":"周杰伦","url":"/posts/f8cdfd0a/梯田.ogg","pic":"/posts/f8cdfd0a/YHM.jpg","lrc":"梯田.txt"},{"title":"双刀","author":"周杰伦","url":"/posts/f8cdfd0a/双刀.ogg","pic":"/posts/f8cdfd0a/YHM.jpg","lrc":"双刀.txt"}]};
				  options.element = document.getElementById("aplayer-GkVNmYta");
				  var ap = new APlayer(options);
			    window.aplayers || (window.aplayers = []);
				  window.aplayers.push(ap);
			  </script>



<a id="more"></a>



<center>
<p>听妈妈的话，你比从前快乐；</p>
<p>听爸爸的话，爸，我回来了。</p>
<p>我把爷爷泡的茶，送给天台的外婆；</p>
<p>她加了点麦芽糖，味道变得甜甜的。</p>
<p>枫林夜曲诉琴伤，梯田花海七里香。</p>
<p>大笨钟迷魂曲在我的地盘，合奏止战之殇。</p>
<p>稻香中窃爱当梦想启动，你却说了再见，</p>
<p>不爱我就拉倒我要夏天，填满手写的从前，</p>
<p>发如雪的娘子用断了的弦弹奏东风破，</p>
<p>在红尘客栈写兰亭序，送天涯过客，</p>
<p>烟花易冷天下无双的英雄也会落寞。</p>
<p>身披黄金甲的将军，在菊花台四面楚歌，</p>
<p>大侠霍元甲在上海1943复活，</p>
<p>用龙拳双截棍击败了拿双刀的忍者，</p>
<p>龙战骑士以父之名发动最后的战役，</p>
<p>困兽之斗半兽人在蓝色风暴中战栗，</p>
<p>流浪诗人送可爱女人一件黑色毛衣，</p>
<p>阳光宅男与超跑女神在阳明山漂移，</p>
<p>牛仔很忙却与米兰的小铁匠跳起蛇舞，</p>
<p>魔术先生劝乔克叔叔不要当懦夫。</p>
<p>安静离开爱情悬崖，我落泪情绪零碎，</p>
<p>一路向北的后退，哦对不起是我不配，</p>
<p>就像水手怕水，就像超人不会飞，</p>
<p>这表白的话我无法一口气全念对，</p>
<p>你明明就喜欢她，却为何开不了口，</p>
<p>你算什么男人，总是转身说走就走，</p>
<p>不该找借口退后，Mojito来一点点，</p>
<p>自导自演对她说你好吗？好久不见。</p>
<p>拨动反方向的钟，想回到过去说好不哭，</p>
<p>爱就像是龙卷风，夹杂心雨何时停住，</p>
<p>跟免费教学录音带学手语怎么了，</p>
<p>我不想当爱情废柴，说好的幸福呢？</p>
<p>园游会中我牵着告白气球在傻笑，</p>
<p>晴天的彩虹下你听得到我的暗号，</p>
<p>坐四季列车去千里之外的伊斯坦堡，</p>
<p>爱你没差你我用同一种调调。</p>
<p>坐在三年二班门口看白色风车，</p>
<p>雨下一整晚了，我在等你下课，</p>
<p>在秘密花园里送你半岛铁盒，</p>
<p>给我一首歌的时间，简单爱要对你说，</p>
<p>为你弹乌克丽丽，陪你看最长的电影，</p>
<p>沿着时光机的轨迹，写爱的飞行日记，</p>
<p>遵从你的完美主义，守护不能说的秘密，</p>
<p>Now you see me，哪里都是你的公主病。</p>
<p>与你吃土耳其冰淇淋听见下雨的声音，</p>
<p>在布拉格广场一起听比较大的大提琴。</p>
<p>床边故事夜的第七章讲着爱在西元前，</p>
<p>前世情人逆鳞美人鱼搁浅在珊瑚海边，</p>
<p>嘻哈空姐放下浪漫手机吃疗伤烧肉粽，</p>
<p>波爷翻开本草纲目治好了公公偏头痛，</p>
<p>印第安老斑鸠在威廉古堡看蜗牛斗牛，</p>
<p>青花瓷旁周大侠看皮影戏里乱舞春秋。</p>
<p>我是如此相信有天你还会出新歌，</p>
<p>世界末日、世界未末日都会等着。</p>
</center>





]]></content>
      <categories>
        <category>Music</category>
      </categories>
      <tags>
        <tag>叶惠美</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/posts/bae4ff13/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><center>
    <font face="Kristen ITC" color="#555555" size=3>💌 Khighness 💌</font><br>
</center>



<h2 id="1-📩NoSQL概述"><a href="#1-📩NoSQL概述" class="headerlink" title="1. 📩NoSQL概述"></a>1. 📩NoSQL概述</h2><h3 id="1-1-📃简介"><a href="#1-1-📃简介" class="headerlink" title="1.1 📃简介"></a>1.1 📃简介</h3><blockquote>
<p>⚡ NoSQL</p>
</blockquote>
<p>NoSQL != 非SQL </p>
<p>NoSQL == Not Only SQL</p>
<p>不仅仅是SQL！</p>
<p>泛指非关系型的数据库。克服大并发。</p>
<p>很多的数据类型，用户的个人信息、社交网络和地理位置，这些数据类型的存储不需要一个固定的格式，不需要多元的操作就可以横向扩展。</p>
<a id="more"></a>



<h3 id="1-2-🌀特点"><a href="#1-2-🌀特点" class="headerlink" title="1.2 🌀特点"></a>1.2 🌀特点</h3><ul>
<li><p>方便扩展（数据之间没有关系，很好扩展）</p>
</li>
<li><p>大数据量高性能（细粒度缓存，性能高）</p>
</li>
<li><p>数据类型多样（不需要设计数据库，随取随用）</p>
</li>
<li><p>RDBMS和NoSQL的区别: </p>
<ul>
<li>RDBMS<ul>
<li>结构化组织</li>
<li>SQL</li>
<li>数据和关系都存在单独的表中</li>
<li>严格的一致性</li>
<li>基础的事务</li>
<li>···</li>
</ul>
</li>
<li>NoSQL<ul>
<li>不仅仅是数据</li>
<li>没有固定的查询语言</li>
<li>键值对存储，列存储，文档存储，图形存储</li>
<li>最终一致性</li>
<li>CAP和BASE</li>
<li>三高：高性能、高可用、高可扩展</li>
<li>···</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="1-3-🚀3V-3H"><a href="#1-3-🚀3V-3H" class="headerlink" title="1.3 🚀3V+3H"></a>1.3 🚀3V+3H</h3><ul>
<li>大数据时代的3V<ul>
<li>海量 Volume</li>
<li>多样 Variety</li>
<li>实时 Velocity</li>
</ul>
</li>
<li>互联网需求的3H<ul>
<li>高并发 High concurrency</li>
<li>高可拓 High scalable</li>
<li>高性能 High performance</li>
</ul>
</li>
</ul>
<h3 id="1-4-📚分类"><a href="#1-4-📚分类" class="headerlink" title="1.4 📚分类"></a>1.4 📚分类</h3><blockquote>
<p>😭呜呜呜，我好菜，我啥都不会🍼</p>
</blockquote>
<table>
<thead>
<tr>
<th>分类</th>
<th>举例</th>
<th>典型应用场景</th>
<th>数据模型</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td>键值对</td>
<td>Tokyo Cabinet/Tyrant，Redis，Voldemort，Oracle BDB</td>
<td>内容UAN，主要用于处理大量数据的高访问负载，也用于一些日志系统等等</td>
<td>Key指向value的键值对，通常用hash table来实现</td>
<td>查找速度快</td>
<td>数据无结构化，通常只被当做字符串或者二进制数据</td>
</tr>
<tr>
<td>列存储数据库</td>
<td>Cassandra，HBase，Riak</td>
<td>分布式的文件系统</td>
<td>以列簇式存储，将同一列数据存在一起</td>
<td>查找速度快，可扩展性强，更容易进行分布式扩展</td>
<td>功能相对局限</td>
</tr>
<tr>
<td>文档型数据库</td>
<td>CouchDB，MongoDB</td>
<td>Web应用</td>
<td>Key-Value对应的键值对，Value为结构化数据</td>
<td>数据结构要求不严格，表结构可变，不需要像关系型数据库一样需要预先定义表结构</td>
<td>查询性能不高，而且缺乏统一的查询语言</td>
</tr>
<tr>
<td>图形数据库</td>
<td>Neo4J，InfoGrid，Infinite Graph</td>
<td>社交网络、推荐系统等等，专注于构建关系图谱</td>
<td>图结构</td>
<td>利用图结构相关算法。比如最短路径寻址，N度关系查找等</td>
<td>很多时候需要对整个图做计算才能得出需要的信息，而且这种结构不太好做分布式的集群方案</td>
</tr>
</tbody></table>
<h3 id="1-5-📈阿里巴技术演进"><a href="#1-5-📈阿里巴技术演进" class="headerlink" title="1.5 📈阿里巴技术演进"></a>1.5 📈阿里巴技术演进</h3><blockquote>
<p>✡技术并无高低之分，就看你如何使用</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201009144812661.png" class="" title="image-20201009144812661.png">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201009145619674.png" class="" title="image-20201009145619674.png">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201009153115683.png" class="" title="image-20201009153115683.png">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201009153346176.png" class="" title="image-20201009153346176.png">





<h2 id="2-📩Redis入门"><a href="#2-📩Redis入门" class="headerlink" title="2. 📩Redis入门"></a>2. 📩Redis入门</h2><blockquote>
<p> 🌐 official website</p>
</blockquote>
<ul>
<li><p>英文官网：<a href="https://www.redis.io/">redis</a></p>
</li>
<li><p>中文官网：<del><a href="https://www.redis.cn/">redis</a></del></p>
</li>
<li><p>中文官网：<a href="https://www.redis.net.cn/">redis</a></p>
</li>
</ul>
<h3 id="2-1-📑简介"><a href="#2-1-📑简介" class="headerlink" title="2.1 📑简介"></a>2.1 📑简介</h3><blockquote>
<p>💡 Redis = Remote Dictionary Server</p>
</blockquote>
<p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 <a href="http://redis.cn/topics/data-types-intro.html#strings">字符串（strings）</a>， <a href="http://redis.cn/topics/data-types-intro.html#hashes">散列（hashes）</a>， <a href="http://redis.cn/topics/data-types-intro.html#lists">列表（lists）</a>， <a href="http://redis.cn/topics/data-types-intro.html#sets">集合（sets）</a>， <a href="http://redis.cn/topics/data-types-intro.html#sorted-sets">有序集合（sorted sets）</a> 与范围查询， <a href="http://redis.cn/topics/data-types-intro.html#bitmaps">bitmaps</a>， <a href="http://redis.cn/topics/data-types-intro.html#hyperloglogs">hyperloglogs</a> 和 <a href="http://redis.cn/commands/geoadd.html">地理空间（geospatial）</a> 索引半径查询。 Redis 内置了 <a href="http://redis.cn/topics/replication.html">复制（replication）</a>，<a href="http://redis.cn/commands/eval.html">LUA脚本（Lua scripting）</a>， <a href="http://redis.cn/topics/lru-cache.html">LRU驱动事件（LRU eviction）</a>，<a href="http://redis.cn/topics/transactions.html">事务（transactions）</a> 和不同级别的 <a href="http://redis.cn/topics/persistence.html">磁盘持久化（persistence）</a>， 并通过 <a href="http://redis.cn/topics/sentinel.html">Redis哨兵（Sentinel）</a>和自动 <a href="http://redis.cn/topics/cluster-tutorial.html">分区（Cluster）</a>提供高可用性（high availability）^(来自官方文档)^。</p>
<h3 id="2-2-🌠特性"><a href="#2-2-🌠特性" class="headerlink" title="2.2 🌠特性"></a>2.2 🌠特性</h3><ul>
<li><input checked="" disabled="" type="checkbox"> 性能优秀，数据在内存中，读写速度非常快，支持10w并发QPS</li>
<li><input checked="" disabled="" type="checkbox"> 单进程单线程，是线程安全的，采用IO多路复用机制</li>
<li><input checked="" disabled="" type="checkbox"> 丰富的数据类型，支持String、Hash、List、Set、Sorted Set</li>
<li><input checked="" disabled="" type="checkbox"> 支持数据持久化，可以将内存中数据保存在磁盘中，重启时加载</li>
<li><input checked="" disabled="" type="checkbox"> 主从复制，哨兵模式，高可用</li>
<li><input checked="" disabled="" type="checkbox"> 可以用作分布式锁</li>
<li><input checked="" disabled="" type="checkbox"> 可以进行地图信息分析</li>
<li><input checked="" disabled="" type="checkbox"> 可以作为消息中间件使用，支持发布订阅</li>
<li><input checked="" disabled="" type="checkbox"> 可以作为计数器使用，记录网页或者小程序等的浏览量</li>
<li><input checked="" disabled="" type="checkbox"> ······</li>
</ul>
<h3 id="2-3-🔰拓展"><a href="#2-3-🔰拓展" class="headerlink" title="2.3 🔰拓展"></a>2.3 🔰拓展</h3><blockquote>
<p>Redis 🆚 Memcache</p>
</blockquote>
<ol>
<li>存储方式上：memcache会把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小。redis有部分数据存在硬盘上，这样能保证数据的持久性</li>
<li>数据支持类型上：memcache对数据类型的支持简单，只支持简单的key-value，而redis支持五大数据类型和三大特殊数据类型</li>
<li>底层模型上：它们之间底层实现方式以及与客户端之间的应用协议不一样。redis直接构建了VM机制，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求</li>
<li>value的大小：redis可以达到1GB，而memcache只有1MB</li>
</ol>
<h2 id="3-📩Redis安装"><a href="#3-📩Redis安装" class="headerlink" title="3. 📩Redis安装"></a>3. 📩Redis安装</h2><blockquote>
<p>⚠️ notice</p>
</blockquote>
<ul>
<li><p>Github上redis的windows版本已经很久不再更新，对于最新的3.2.100版本，个人使用过，redis-cli.exe使用起来偶尔会出问题，命令写出来那一行会变成黑色，兼容性不太好，由于3.0不支持GEO等操作，我还是选择使用3.2.100版本。</p>
</li>
<li><p>Redis这种高性能服务器本身与CentOS的体质就很般配，个人推荐在Linux上安装，尤其是后期搭建redis集群环境。CentOS7本身自带的yum镜像中带的gcc安装包只有4.8.5版本，不支持高版本redis的编译，所以推荐下载5.0.8版本。</p>
</li>
<li><p>以上，不管是Windows还是Linux，都推荐使用Xshell开启Redis服务器和客户端。</p>
</li>
</ul>
<blockquote>
<p>🔽Xshell</p>
</blockquote>
<ul>
<li>网盘链接：<a href="https://pan.baidu.com/s/1qWtPzJgF3N24yIlUfTtq9w">https://pan.baidu.com/s/1qWtPzJgF3N24yIlUfTtq9w</a></li>
<li>提取码：kkkk</li>
</ul>
<h3 id="3-1-💻Windows10-安装"><a href="#3-1-💻Windows10-安装" class="headerlink" title="3.1 💻Windows10 安装"></a>3.1 💻Windows10 安装</h3><blockquote>
<p>下载: <a href="https://github.com/MSOpenTech/redis/releases">redis</a></p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201008213905860.png" class="" title="image-20201008213905860">

<blockquote>
<p>解压</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201008214011620.png" class="" title="image-20201008214011620">

<blockquote>
<p>启动</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201008214053586.png" class="" title="image-20201008214053586">



<h3 id="3-2-💻CentOS7-安装"><a href="#3-2-💻CentOS7-安装" class="headerlink" title="3.2 💻CentOS7 安装"></a>3.2 💻CentOS7 安装</h3><blockquote>
<p>安装gcc: <code>yum install gcc-c++ tcl</code></p>
<p>注意安装 version&gt;6 的redis需要 version&gt;5 的gcc: </p>
<p><code>sudo yum install centos-release-scl</code><br><code>sudo yum install devtoolset-7-gcc*</code><br><code>scl enable devtoolset-7 bash</code></p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201008224757570.png" class="" title="image-20201008224757570">

<blockquote>
<p>下载压缩包: <code>wget http://download.redis.io/releases/redis-5.0.8.tar.gz</code></p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201008223909191.png" class="" title="image-20201008223909191">

<blockquote>
<p>解压压缩包: <code>tar xzf redis-5.0.8.tar.gz</code></p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201008224102401.png" class="" title="image-20201008224102401">

<blockquote>
<p>跳转目录: <code>cd redis-5.0.8</code>    </p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201008215145306.png" class="" title="image-20201008215145306">

<blockquote>
<p>编译安装: <code>make</code></p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201008215335902.png" class="" title="image-20201008215335902">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201008224230979.png" class="" title="image-20201008224230979">

<blockquote>
<p>再次编译: <code>make</code></p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201008224450296.png" class="" title="image-20201008224450296">

<blockquote>
<p>最后安装: </p>
<p><code>cd src/</code></p>
<p><code>make install</code></p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201008230537427.png" class="" title="image-20201008230537427">

<blockquote>
<p>查看结果: <code>ll /usr/local/bin/</code></p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201008230723447.png" class="" title="image-20201008230723447">

<blockquote>
<p>更改配置:</p>
<p>新建配置文件目录: <code>mkdir kconfig</code>   </p>
<p>将原生Redis配置文件复制进来: <code>cp /home/parak/Redis/redis-5.0.8/redis.conf </code></p>
<p>修改配置文件: <code>gedit redis.conf</code> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">daemonize yes</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>测试启动: <code>redis-server kconfig/redis.conf</code></p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201009105138976.png" class="" title="image-20201009105138976">

<blockquote>
<p>查看redis进程: <code>ps -ef | grep redis</code></p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201009105424943.png" class="" title="image-20201009105424943">

<blockquote>
<p>关闭redis服务: <code>shutdown</code></p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201009105552015.png" class="" title="image-20201009105552015">



<h2 id="4-📩Redis配置"><a href="#4-📩Redis配置" class="headerlink" title="4. 📩Redis配置"></a>4. 📩Redis配置</h2><h3 id="4-1-🚩命令"><a href="#4-1-🚩命令" class="headerlink" title="4.1 🚩命令"></a>4.1 🚩命令</h3><blockquote>
<p>👀查看所有配置项</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">config get *</span><br></pre></td></tr></table></figure>

<blockquote>
<p>✏命令行编辑配置</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">config set &lt;option&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>



<h3 id="4-2-📝redis-conf-配置项说明"><a href="#4-2-📝redis-conf-配置项说明" class="headerlink" title="4.2 📝redis.conf 配置项说明"></a>4.2 📝redis.conf 配置项说明</h3><table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">配置项</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left"><code>daemonize no</code></td>
<td align="left">Redis 默认不是以守护进程的方式运行，可以通过该配置项修改，使用 yes 启用守护进程（Windows 不支持守护线程的配置为 no ）</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left"><code>pidfile /var/run/redis.pid</code></td>
<td align="left">当 Redis 以守护进程方式运行时，Redis 默认会把 pid 写入 /var/run/redis.pid 文件，可以通过 pidfile 指定</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left"><code>port 6379</code></td>
<td align="left">指定 Redis 监听端口，默认端口为 6379</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left"><code>bind 127.0.0.1</code></td>
<td align="left">绑定的主机地址</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left"><code>timeout 300</code></td>
<td align="left">当客户端闲置多长秒后关闭连接，如果指定为 0 ，表示关闭该功能</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left"><code>loglevel notice</code></td>
<td align="left">指定日志记录级别，Redis 总共支持四个级别：debug、verbose、notice、warning，默认为 notice</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left"><code>logfile stdout</code></td>
<td align="left">日志记录方式，默认为标准输出，如果配置 Redis 为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给 /dev/null</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left"><code>databases 16</code></td>
<td align="left">设置数据库的数量，默认数据库为0，可以使用SELECT 命令在连接上指定数据库id</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left"><code>save  </code>Redis 默认配置文件中提供了三个条件：<strong>save 900 1</strong>、<strong>save 300 10</strong> 、<strong>save 60 10000</strong>分别表示 900 秒（15 分钟）内有 1 个更改，300 秒（5 分钟）内有 10 个更改以及 60 秒内有 10000 个更改。</td>
<td align="left">指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</td>
</tr>
<tr>
<td align="left">10</td>
<td align="left"><code>rdbcompression yes</code></td>
<td align="left">指定存储至本地数据库时是否压缩数据，默认为 yes，Redis 采用 LZF 压缩，如果为了节省 CPU 时间，可以关闭该选项，但会导致数据库文件变的巨大</td>
</tr>
<tr>
<td align="left">11</td>
<td align="left"><code>dbfilename dump.rdb</code></td>
<td align="left">指定本地数据库文件名，默认值为 dump.rdb</td>
</tr>
<tr>
<td align="left">12</td>
<td align="left"><code>dir ./</code></td>
<td align="left">指定本地数据库存放目录</td>
</tr>
<tr>
<td align="left">13</td>
<td align="left"><code>slaveof  </code></td>
<td align="left">设置当本机为 slave 服务时，设置 master 服务的 IP 地址及端口，在 Redis 启动时，它会自动从 master 进行数据同步</td>
</tr>
<tr>
<td align="left">14</td>
<td align="left"><code>masterauth </code></td>
<td align="left">当 master 服务设置了密码保护时，slav 服务连接 master 的密码</td>
</tr>
<tr>
<td align="left">15</td>
<td align="left"><code>requirepass foobared</code></td>
<td align="left">设置 Redis 连接密码，如果配置了连接密码，客户端在连接 Redis 时需要通过 AUTH <password> 命令提供密码，默认关闭</td>
</tr>
<tr>
<td align="left">16</td>
<td align="left"><code> maxclients 128</code></td>
<td align="left">设置同一时间最大客户端连接数，默认无限制，Redis 可以同时打开的客户端连接数为 Redis 进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis 会关闭新的连接并向客户端返回 max number of clients reached 错误信息</td>
</tr>
<tr>
<td align="left">17</td>
<td align="left"><code>maxmemory </code></td>
<td align="left">指定 Redis 最大内存限制，Redis 在启动时会把数据加载到内存中，达到最大内存后，Redis 会先尝试清除已到期或即将到期的 Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis 新的 vm 机制，会把 Key 存放内存，Value 会存放在 swap 区</td>
</tr>
<tr>
<td align="left">18</td>
<td align="left"><code>appendonly no</code></td>
<td align="left">指定是否在每次更新操作后进行日志记录，Redis 在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis 本身同步数据文件是按上面 save 条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为 no</td>
</tr>
<tr>
<td align="left">19</td>
<td align="left"><code>appendfilename appendonly.aof</code></td>
<td align="left">指定更新日志文件名，默认为 appendonly.aof</td>
</tr>
<tr>
<td align="left">20</td>
<td align="left"><code>appendfsync everysec</code></td>
<td align="left">指定更新日志条件，共有 3 个可选值：<strong>no</strong>：表示等操作系统进行数据缓存同步到磁盘（快）<strong>always</strong>：表示每次更新操作后手动调用 fsync() 将数据写到磁盘（慢，安全）<strong>everysec</strong>：表示每秒同步一次（折中，默认值）</td>
</tr>
<tr>
<td align="left">21</td>
<td align="left"><code>vm-enabled no</code></td>
<td align="left">指定是否启用虚拟内存机制，默认值为 no，简单的介绍一下，VM 机制将数据分页存放，由 Redis 将访问量较少的页即冷数据 swap 到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析 Redis 的 VM 机制）</td>
</tr>
<tr>
<td align="left">22</td>
<td align="left"><code>vm-swap-file /tmp/redis.swap</code></td>
<td align="left">虚拟内存文件路径，默认值为 /tmp/redis.swap，不可多个 Redis 实例共享</td>
</tr>
<tr>
<td align="left">23</td>
<td align="left"><code>vm-max-memory 0</code></td>
<td align="left">将所有大于 vm-max-memory 的数据存入虚拟内存，无论 vm-max-memory 设置多小，所有索引数据都是内存存储的(Redis 的索引数据 就是 keys)，也就是说，当 vm-max-memory 设置为 0 的时候，其实是所有 value 都存在于磁盘。默认值为 0</td>
</tr>
<tr>
<td align="left">24</td>
<td align="left"><code>vm-page-size 32</code></td>
<td align="left">Redis swap 文件分成了很多的 page，一个对象可以保存在多个 page 上面，但一个 page 上不能被多个对象共享，vm-page-size 是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page 大小最好设置为 32 或者 64bytes；如果存储很大大对象，则可以使用更大的 page，如果不确定，就使用默认值</td>
</tr>
<tr>
<td align="left">25</td>
<td align="left"><code>vm-pages 134217728</code></td>
<td align="left">设置 swap 文件中的 page 数量，由于页表（一种表示页面空闲或使用的 bitmap）是在放在内存中的，，在磁盘上每 8 个 pages 将消耗 1byte 的内存。</td>
</tr>
<tr>
<td align="left">26</td>
<td align="left"><code>vm-max-threads 4</code></td>
<td align="left">设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4</td>
</tr>
<tr>
<td align="left">27</td>
<td align="left"><code>glueoutputbuf yes</code></td>
<td align="left">设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启</td>
</tr>
<tr>
<td align="left">28</td>
<td align="left"><code>hash-max-zipmap-entries 64 hash-max-zipmap-value 512</code></td>
<td align="left">指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</td>
</tr>
<tr>
<td align="left">29</td>
<td align="left"><code>activerehashing yes</code></td>
<td align="left">指定是否激活重置哈希，默认为开启（后面在介绍 Redis 的哈希算法时具体介绍）</td>
</tr>
<tr>
<td align="left">30</td>
<td align="left"><code>include /path/to/local.conf</code></td>
<td align="left">指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</td>
</tr>
</tbody></table>
<h3 id="4-3-🔍-重点详解"><a href="#4-3-🔍-重点详解" class="headerlink" title="4.3 🔍 重点详解"></a>4.3 🔍 重点详解</h3><ol>
<li><p>UNIT: redis对大小写不敏感</p>
</li>
<li><p>INCLUEDS[模块]: 可以包含多个配置文件</p>
</li>
<li><p>MOUDLES[模块]: 启动时加载模块</p>
</li>
<li><p>NETWORK[网络]: </p>
<ul>
<li>bind: 绑定IP</li>
<li>protected-mode: 保护模式</li>
<li>post: 端口设置</li>
</ul>
</li>
<li><p>GENERAL[通用]: </p>
<ul>
<li>daemonize: 是否以守护进程的方式运行[^1]</li>
<li>pidfile /var/run/redis_6379.pid: 如果以后台的方式运行，就需要指定一个pid的配置文件</li>
<li>loglevel: 日志级别</li>
<li>logfile: 日志的文件位置</li>
<li>database: 数据库的数量</li>
<li>always-show-logo: 是否开启服务的时候显示logo</li>
</ul>
</li>
<li><p>SNAPSHOTTING[快照]:</p>
<ul>
<li>save 900 1: 如果在900s内，至少有1个key进行了修改，就进行持久化操作</li>
<li>save 300 10: 如果在300s内，至少有10个key进行了修改，就进行持久化操作</li>
<li>save 60 10000: 如果在60s内，至少有10000个key进行了修改，就进行持久化操作</li>
<li>stop-writes-on-bgsave-error: 持久化出现错误，是否让redis继续工作</li>
<li>rdbcompression: 是否压缩rdb文件，需要消耗一些CPU资源</li>
<li>rdbchecksum: 保存rdb的文件的时候，是否进行错误校验</li>
<li>dir: 文件保存的目录</li>
</ul>
</li>
<li><p>REPLICATION[复制]:</p>
<ul>
<li>见主从复制</li>
</ul>
</li>
<li><p>SECURITY[安全]:</p>
<ul>
<li><p>requirepass: 设置密码</p>
</li>
<li><pre><code class="shell"># 设置密码
&gt; config set requirepass &lt;password&gt;
# 登录输入
&gt; auth &lt;password&gt;
# 获取密码
&gt; config get requirepass
# 取消设置
&gt; config set requirepass &#39;&#39;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">9. CLIENTS[客户端]:</span><br><span class="line"></span><br><span class="line">   - maxclients: 设置可连接redis的最大客户端数量</span><br><span class="line">   - maxmemory: 配置redis的最大内存容量</span><br><span class="line">   - maxmemory-policy: 内存到达上限的处理策略</span><br><span class="line">     - volatile-lru：只对设置了过期时间的key进行LRU（默认值） </span><br><span class="line">     - allkeys-lru ： 删除lru算法的key  </span><br><span class="line">     - volatile-random：随机删除即将过期key  </span><br><span class="line">     - allkeys-random：随机删除  </span><br><span class="line">     - volatile-ttl ： 删除即将过期的  </span><br><span class="line">     - noeviction ： 永不过期，返回错误</span><br><span class="line"></span><br><span class="line">10. APPEND ONLY MODE[AOF]:</span><br><span class="line"></span><br><span class="line">    - appendonly: 默认不开启AOF模式</span><br><span class="line">    - appendfilename: AOF持久化的文件名称</span><br><span class="line">    - appendfsync always: 每次修改都会同步，消耗性能</span><br><span class="line">    - appendfsync everysec: 每秒执行一次同步，可能会丢失这1s的数据</span><br><span class="line">    - appendfsync no: 不执行同步，操作系统自己同步数据，速度最快</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[^1]: 守护进程</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 5. 📩Redis测试</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 5.1🔬测试方法</span><br><span class="line"></span><br><span class="line">&gt; redis的性能测试命令</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;shell</span><br><span class="line">redis-benchmark [option] [option value]</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ol>
<p>🔔<strong>注意: 这个命令是在redis目录下执行，而非redis客户端的内部命令</strong></p>
<h3 id="5-2-📝redis性能测试工具可选参数"><a href="#5-2-📝redis性能测试工具可选参数" class="headerlink" title="5.2 📝redis性能测试工具可选参数"></a>5.2 📝redis性能测试工具可选参数</h3><table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">选项</th>
<th align="left">描述</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left"><strong>-h</strong></td>
<td align="left">指定服务器主机名</td>
<td align="left">127.0.0.1</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left"><strong>-p</strong></td>
<td align="left">指定服务器端口</td>
<td align="left">6379</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left"><strong>-s</strong></td>
<td align="left">指定服务器 socket</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">4</td>
<td align="left"><strong>-c</strong></td>
<td align="left">指定并发连接数</td>
<td align="left">50</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left"><strong>-n</strong></td>
<td align="left">指定请求数</td>
<td align="left">10000</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left"><strong>-d</strong></td>
<td align="left">以字节的形式指定 SET/GET 值的数据大小</td>
<td align="left">3</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left"><strong>-k</strong></td>
<td align="left">1=keep alive 0=reconnect</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left"><strong>-r</strong></td>
<td align="left">SET/GET/INCR 使用随机 key, SADD 使用随机值</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">9</td>
<td align="left"><strong>-P</strong></td>
<td align="left">通过管道传输 <numreq> 请求</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">10</td>
<td align="left"><strong>-q</strong></td>
<td align="left">强制退出 redis。仅显示 query/sec 值</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">11</td>
<td align="left"><strong>–csv</strong></td>
<td align="left">以 CSV 格式输出</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">12</td>
<td align="left"><strong>-l</strong></td>
<td align="left">生成循环，永久执行测试</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">13</td>
<td align="left"><strong>-t</strong></td>
<td align="left">仅运行以逗号分隔的测试命令列表。</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">14</td>
<td align="left"><strong>-I</strong></td>
<td align="left">Idle 模式。仅打开 N 个 idle 连接并等待。</td>
<td align="left"></td>
</tr>
</tbody></table>
<h3 id="5-3-📊测试结果分析"><a href="#5-3-📊测试结果分析" class="headerlink" title="5.3 📊测试结果分析"></a>5.3 📊测试结果分析</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-benchmark -h 127.0.0.1 -p 6379 -c 100 -n 100000 </span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201009193727448.png" class="" title="image-20201009193727448">

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-benchmark -h 127.0.0.1 -p 6379 -c 1 -n 100000 -q</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201009194004617.png" class="" title="image-20201009194004617">

<p>这个是对所有操作测试性能，每秒处理的请求数量。</p>
<h2 id="6-📩Redis基础"><a href="#6-📩Redis基础" class="headerlink" title="6. 📩Redis基础"></a>6. 📩Redis基础</h2><h3 id="6-1-💠Redis数据库"><a href="#6-1-💠Redis数据库" class="headerlink" title="6.1 💠Redis数据库"></a>6.1 💠Redis数据库</h3><p><strong>redis有16个数据库，默认使用第0个</strong></p>
<blockquote>
<p>测试连接</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping</span><br></pre></td></tr></table></figure>

<blockquote>
<p>关闭连接</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">quit</span><br></pre></td></tr></table></figure>

<blockquote>
<p>返回消息</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &lt;str&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>切换数据库</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select &lt;num of database&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取当前数据库的大小</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dbsize</span><br></pre></td></tr></table></figure>

<blockquote>
<p>清空当前数据库</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flushdb</span><br></pre></td></tr></table></figure>

<blockquote>
<p>清空所有数据库</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flushall</span><br></pre></td></tr></table></figure>

<blockquote>
<p>交换数据库</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">swap &lt;n1&gt; &lt;n2&gt;</span><br></pre></td></tr></table></figure>



<h3 id="6-2-🌏6379的故事"><a href="#6-2-🌏6379的故事" class="headerlink" title="6.2 🌏6379的故事"></a>6.2 🌏6379的故事</h3><p><strong>redis默认端口号为6379</strong></p>
<blockquote>
<p>作者在自己的一篇博文中解释了为什么选用 6379 作为默认端口，因为 6379 在手机按键上 MERZ 对应的号码，而 MERZ 取自意大利歌女 Alessia Merz 的名字。MERZ长期以来被Redis作者antirez及其朋友当作愚蠢的代名词，后来作者在开发Redis就选用了这个端口。</p>
</blockquote>
<h3 id="6-3-⚡Redis蜜汁速度"><a href="#6-3-⚡Redis蜜汁速度" class="headerlink" title="6.3 ⚡Redis蜜汁速度"></a>6.3 ⚡Redis蜜汁速度</h3><p><strong>redis是单线程的。</strong></p>
<p>redis基于内存操作，CPU不是redis的性能瓶颈，Redis的瓶颈很可能是机器内存或者网路带宽。</p>
<p>既然单线程容易实现，而且CPU不会成为瓶颈，那就顺理成章的采用单线程实现。</p>
<blockquote>
<p>💉理解Redis蜜汁速度需要跨过两个误区</p>
</blockquote>
<ul>
<li><p>误区1：高性能的服务器一定是多线程的？</p>
</li>
<li><p>误区2：多线程的效率一定比单线程高？</p>
</li>
</ul>
<blockquote>
<p>💊Redis采用单线程依然快的原因</p>
</blockquote>
<ol>
<li>Redis完全基于内存，读写全部在一个CPU上，绝大部分请求是纯粹的内存操作，非常迅速，数据存在于内存中，类似于HashMap，HashMap的优势就是查询和操作的时间复杂度时O(1)</li>
<li>数据结构简单，对数据操作也简单</li>
<li>采用单线程，避免了不必要的上下文切换和竞争条件，不存在多线程导致的CPU切换，不用取考虑各种锁的问题，不存在加锁放锁操作，没有死锁问题导致的性能消耗</li>
<li>使用多路复用IO模型，非阻塞IO</li>
</ol>
<h2 id="7-📩Redis数据类型"><a href="#7-📩Redis数据类型" class="headerlink" title="7. 📩Redis数据类型"></a>7. 📩Redis数据类型</h2><blockquote>
<p>🌞说明</p>
</blockquote>
<p>所有命令可查看中文官方文档: <a href="http://redis.cn/commands.html#">http://redis.cn/commands.html#</a></p>
<h3 id="7-1-🏆五大数据类型"><a href="#7-1-🏆五大数据类型" class="headerlink" title="7.1 🏆五大数据类型"></a>7.1 🏆五大数据类型</h3><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">简介</th>
<th align="center">特性</th>
<th align="center">场景</th>
</tr>
</thead>
<tbody><tr>
<td align="center">String(字符串)</td>
<td align="center">二进制安全</td>
<td align="center">可以包含任何数据，比如jpg图片或者序列化对象</td>
<td align="center">—</td>
</tr>
<tr>
<td align="center">Hash(字典)</td>
<td align="center">键值对集合</td>
<td align="center">适合存储对象，并且可以像数据库中的update一个属性一样值修改某一项属性值</td>
<td align="center">存储、读取、修改用户属性</td>
</tr>
<tr>
<td align="center">List(列表)</td>
<td align="center">双向链表</td>
<td align="center">增删快，提供了操作某一元素的api</td>
<td align="center">最新消息排行；消息队列</td>
</tr>
<tr>
<td align="center">Set(集合)</td>
<td align="center">hash表实现，元素不重复</td>
<td align="center">增删查快，提供了求交集、并集和差集的操作</td>
<td align="center">共同好友:  利用唯一性，统计网站UV</td>
</tr>
<tr>
<td align="center">Sorted Set(有序集合)</td>
<td align="center">将set中的元素增加一个权重score，元素按照score有序排列</td>
<td align="center">数据插入集合时，已经进行了天然排序</td>
<td align="center">排行榜；带权重的消息队列</td>
</tr>
</tbody></table>
<p><strong>🎲Key</strong></p>
<blockquote>
<p>查看所有的key</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keys *</span><br></pre></td></tr></table></figure>

<blockquote>
<p>创建键值对</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">get &lt;key&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>移除键值对</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">move &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>判断key是否存在</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exists &lt;key&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看key的类型</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">type &lt;key&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>设置key的过期时间/秒</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">expire &lt;key&gt; &lt;seconds&gt; </span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的有效时间/秒</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ttl &lt;key&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的有效时间/毫秒</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pttl &lt;key&gt;</span><br></pre></td></tr></table></figure>



<h4 id="7-1-1-⚽String"><a href="#7-1-1-⚽String" class="headerlink" title="7.1.1 ⚽String"></a>7.1.1 ⚽String</h4><blockquote>
<p>向key上追加字符串</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">append &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的长度</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">strlen &lt;key&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Integer操作</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 加1</span></span><br><span class="line">incr &lt;key&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 加n</span></span><br><span class="line">incrby &lt;key&gt; n</span><br><span class="line"><span class="meta">#</span><span class="bash"> 减1</span></span><br><span class="line">decr &lt;key&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 减n</span></span><br><span class="line">decrby &lt;key&gt; n</span><br></pre></td></tr></table></figure>

<blockquote>
<p>subString(start, end)操作</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 截取整个字符串</span></span><br><span class="line">getrange &lt;key&gt; 0 -1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 截取部分字符串</span></span><br><span class="line">getrange &lt;key&gt; start end</span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">set</span> s <span class="string">&quot;Khighness&quot;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> getrange s 0 -1 <span class="comment"># &quot;Khighness&quot;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> getrange s 1 4  <span class="comment"># &quot;high&quot;</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>replace(start, end)操作</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 把字符串从n位开始之后的字符替换为新的字符串newStr</span></span><br><span class="line">setrange &lt;key&gt; n newStr</span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">set</span> s <span class="string">&quot;Khighness&quot;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> setrange s 0 X </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> get s <span class="comment"># &quot;Xhighness&quot;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> setrange s 5 <span class="string">&quot;XXXXX&quot;</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> get s <span class="comment"># &quot;XhighXXXXX&quot;</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>setex (set with expire) 创建键值对的同时设置过期时间</p>
<p>setnx (set if not exist)  如果key不存在则创建键值对，防止覆盖原有键值对 (分布式锁中经常使用)</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置键值对，设置过期时间</span></span><br><span class="line">setex &lt;key&gt; &lt;seconds&gt; &lt;value&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> key不存在，则创建键值对</span></span><br><span class="line">setnx &lt;key&gt; &lt;value&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line">127.0.0.1:6379&gt; setex k1 10 parak</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl k1</span><br><span class="line">(integer) -2</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">(nil)</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; setnx k2 parak</span><br><span class="line">(integer) 1 # 1代表设置成功</span><br><span class="line">127.0.0.1:6379&gt; setnx k2 flowerk</span><br><span class="line">(integer) 0 # 0代表设置失败</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">&quot;parak&quot;     </span><br><span class="line">127.0.0.1:6379&gt; setnx k2 FlowerK</span><br><span class="line">(integer) 0 </span><br><span class="line">127.0.0.1:6379&gt; set k2 FlowerK</span><br><span class="line">OK          # 强制设置value</span><br><span class="line">127.0.0.1:6379&gt; get k2</span><br><span class="line">&quot;FlowerK&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>多个键值对操作</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 一次性创建多个键值对</span></span><br><span class="line">mset &lt;key&gt; &lt;value&gt; [key value ...]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取多个key的值</span></span><br><span class="line">meget &lt;key&gt; [key ...]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 不存在则创建多个键值对</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 原子性操作，只要其中有一个key已存在，就会全部创建失败</span></span><br><span class="line">msetnx &lt;key&gt; &lt;value&gt; [key value ...]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line">127.0.0.1:6379&gt; mset k1 v1 k2 v2 k3 v3</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget k1 k2 k3</span><br><span class="line">1) &quot;v1&quot;</span><br><span class="line">2) &quot;v2&quot;</span><br><span class="line">3) &quot;v3&quot;</span><br><span class="line">127.0.0.1:6379&gt; msetnx k2 v2 k4 v4 k5 v5</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) &quot;k2&quot;</span><br><span class="line">2) &quot;k3&quot;</span><br><span class="line">3) &quot;k1&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 巧妙设计key  object:&#123;id&#125;:&#123;field&#125;</span></span><br><span class="line">127.0.0.1:6379&gt; mset user:1:name Khighness user:1:age 18</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; mget user:1:name user:1:age</span><br><span class="line">1) &quot;Khighness&quot;</span><br><span class="line">2) &quot;18&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>组合操作</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先获取值，再设置新的值</span></span><br><span class="line">getset k v</span><br></pre></td></tr></table></figure>



<h4 id="7-1-2-⚾List"><a href="#7-1-2-⚾List" class="headerlink" title="7.1.2 ⚾List"></a>7.1.2 ⚾List</h4><p>redis里面，list可以当成栈、队列、队列。</p>
<blockquote>
<p>向list的头部添加值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lpush &lt;key&gt; value [value ...]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>向list的尾部添加值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpush &lt;key&gt; value [value ...]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>判断list是否存在</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exists &lt;key&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>移除列表的第一个元素</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lpop &lt;key&gt; </span><br></pre></td></tr></table></figure>

<blockquote>
<p>移除列表的最后一个元素</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpop &lt;key&gt; </span><br></pre></td></tr></table></figure>

<blockquote>
<p>移除指定的值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lrem &lt;key&gt; &lt;count&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>更新list</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 根据index更新值</span></span><br><span class="line">lset &lt;key&gt; &lt;index&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>根据下标获取值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lindex &lt;key&gt; &lt;index&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取list的长度</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">llen &lt;key&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取list指定范围的值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取整个list的值</span></span><br><span class="line">lrange &lt;key&gt; 0 -1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取指定范围的值</span></span><br><span class="line">lrange &lt;key&gt; start end</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line">127.0.0.1:6379&gt; lpush list1 1 2 3 4 5 </span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 -1</span><br><span class="line">1) &quot;5&quot;</span><br><span class="line">2) &quot;4&quot;</span><br><span class="line">3) &quot;3&quot;</span><br><span class="line">4) &quot;2&quot;</span><br><span class="line">5) &quot;1&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange list1 0 1</span><br><span class="line">1) &quot;5&quot;</span><br><span class="line">2) &quot;4&quot;</span><br><span class="line">127.0.0.1:6379&gt; rpush list2 1 2 3 4 5</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; lrange list2 0 -1</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;3&quot;</span><br><span class="line">4) &quot;4&quot;</span><br><span class="line">5) &quot;5&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange list2 0 1</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;2&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>截取list中指定范围的值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 保留下标[start, end]的值</span></span><br><span class="line">ltrim &lt;key&gt; start end</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line">127.0.0.1:6379&gt; rpush list parak1 parak2 parak3 parak4 parak5</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; ltrim list 0 2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;parak1&quot;</span><br><span class="line">2) &quot;parak2&quot;</span><br><span class="line">3) &quot;parak3&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>组合操作</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 移除<span class="built_in">source</span>的尾部的值插入到destination的头部</span></span><br><span class="line">rpoplpush &lt;source&gt; &lt;destination&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line">127.0.0.1:6379&gt; rpush list 1 2 3 4 5</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; rpoplpush list newlist</span><br><span class="line">&quot;5&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange newlist 0 -1</span><br><span class="line">1) &quot;5&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在list中插入值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在list中的某个值之前插入</span></span><br><span class="line">linsert &lt;key&gt; before &lt;priot&gt; &lt;value&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在list中的某个值之后插入</span></span><br><span class="line">linsert &lt;key&gt; after &lt;priot&gt; &lt;value&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line">127.0.0.1:6379&gt; rpush list 1 2 3 4 5</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; linsert list before 3 6</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;6&quot;</span><br><span class="line">4) &quot;3&quot;</span><br><span class="line">5) &quot;4&quot;</span><br><span class="line">6) &quot;5&quot;</span><br><span class="line">127.0.0.1:6379&gt; linsert list after 5 7</span><br><span class="line">(integer) 7</span><br><span class="line">127.0.0.1:6379&gt; lrange list 0 -1</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;6&quot;</span><br><span class="line">4) &quot;3&quot;</span><br><span class="line">5) &quot;4&quot;</span><br><span class="line">6) &quot;5&quot;</span><br><span class="line">7) &quot;7&quot;</span><br></pre></td></tr></table></figure>



<h4 id="7-1-3-🏀Set"><a href="#7-1-3-🏀Set" class="headerlink" title="7.1.3 🏀Set"></a>7.1.3 🏀Set</h4><p>set 无序不重复集合</p>
<ul>
<li>set通过哈希表实现，所有增删查的时间复杂度是O(1)</li>
</ul>
<blockquote>
<p>向set中国添加值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sadd &lt;key&gt; &lt;value&gt; [value ...]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看set中的所有值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">smembers &lt;key&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看set中是否包含值value</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sismember &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取set中的元素个数</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scard &lt;key&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>移除set中的值value</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">srem &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取set中的随机值(可以做抽奖功能)</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">srandmember &lt;key&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>随机移除set中的元素</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">spop &lt;key&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将一个set集合中指定的值移动到另一个set集合</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将<span class="built_in">source</span>中的value移动到destination</span></span><br><span class="line">smove &lt;source&gt; &lt;destination&gt; &lt;value&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line">127.0.0.1:6379&gt; sadd set k1 k2 k3 k4 k5 k6 k7</span><br><span class="line">(integer) 7</span><br><span class="line">127.0.0.1:6379&gt; sadd newset k1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; smove set newset k3</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; smembers newset</span><br><span class="line">1) &quot;k3&quot;</span><br><span class="line">2) &quot;k1&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>集合运算</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 集合s1和s2的并集</span></span><br><span class="line">sunion &lt;s1&gt; &lt;s&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 集合s1和s2的交集 (实现共同好友、共同关注)</span></span><br><span class="line">sinter &lt;s1&gt; &lt;s2&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 集合s1中独有的元素</span></span><br><span class="line">sdiff &lt;s1&gt; &lt;s2&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line">127.0.0.1:6379&gt; sadd s1 k1 k2 k3 k4 k5 k6</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; sadd s2 k5 k6 k7 k8 k9 k10</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; sunion s1 s2</span><br><span class="line"> 1) &quot;k5&quot;</span><br><span class="line"> 2) &quot;k6&quot;</span><br><span class="line"> 3) &quot;k8&quot;</span><br><span class="line"> 4) &quot;k2&quot;</span><br><span class="line"> 5) &quot;k3&quot;</span><br><span class="line"> 6) &quot;k1&quot;</span><br><span class="line"> 7) &quot;k4&quot;</span><br><span class="line"> 8) &quot;k7&quot;</span><br><span class="line"> 9) &quot;k10&quot;</span><br><span class="line">10) &quot;k9&quot;</span><br><span class="line">127.0.0.1:6379&gt; sinter s1 s2</span><br><span class="line">1) &quot;k5&quot;</span><br><span class="line">2) &quot;k6&quot;</span><br><span class="line">127.0.0.1:6379&gt; sdiff s1 s2</span><br><span class="line">1) &quot;k2&quot;</span><br><span class="line">2) &quot;k1&quot;</span><br><span class="line">3) &quot;k3&quot;</span><br><span class="line">4) &quot;k4&quot;</span><br></pre></td></tr></table></figure>



<h4 id="7-1-4-🏈Hash"><a href="#7-1-4-🏈Hash" class="headerlink" title="7.1.4 🏈Hash"></a>7.1.4 🏈Hash</h4><p>相当于key-HashMap，value为一个map集合，更适合于对象的存储，多用于存储变更数据、</p>
<blockquote>
<p>设置key指定的哈希集中指定字段的值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hset &lt;key&gt; &lt;field&gt; &lt;value&gt; </span><br></pre></td></tr></table></figure>

<blockquote>
<p>key指定的哈希集中不存在指定字段时，设置字段的值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hsetnx &lt;key&gt; &lt;field&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>删除key指定的哈希集中指定字段</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdel &lt;key&gt; &lt;field&gt; [field ...]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>判断key指定哈希集中指定字段是否存在</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexists &lt;key&gt; &lt;field&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对key指定的哈希集中指定字段的值加上增量(Integer型，可正可负，字段不存在则在操作执行前把该字段的值设置为0)</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hincrby &lt;key&gt; &lt;field&gt; &lt;integer&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对key指定的哈希集中指定字段的值加上增量(float型，可正可负，字段不存在则在操作执行前把该字段的值设置为0)</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hincrbyfloat &lt;key&gt; &lt;field&gt; &lt;float&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key指定的哈希集中字段数量</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hlen &lt;key&gt; </span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key指定的哈希集中指定字段的值的字符串长度</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hstrlen hash &lt;key&gt; &lt;value&gt; </span><br></pre></td></tr></table></figure>

<blockquote>
<p>key指定的哈希集操作</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置key指定的哈希集中指定字段的值</span></span><br><span class="line">hmset &lt;key&gt; &lt;field&gt; &lt;value&gt; [field value ...]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取key指定的哈希集中指定字段所关联的值</span></span><br><span class="line">hmget &lt;key&gt; &lt;field&gt; [field ...]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取key指定的哈希集中所有字段的名字</span></span><br><span class="line">hkeys</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取key指定哈希集中所有字段的值</span></span><br><span class="line">hvals</span><br><span class="line"><span class="meta">#</span><span class="bash"> 获取key指定的哈希集中所有的字段和值</span></span><br><span class="line">hgetall</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line">127.0.0.1:6379&gt; hmset hash field1 hello field2 world</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hmget hash field1 field2</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;world&quot;</span><br><span class="line">127.0.0.1:6379&gt; hkeys hash</span><br><span class="line">1) &quot;field1&quot;</span><br><span class="line">2) &quot;field2&quot;</span><br><span class="line">127.0.0.1:6379&gt; hvals hash</span><br><span class="line">1) &quot;hello&quot;</span><br><span class="line">2) &quot;world&quot;</span><br><span class="line">127.0.0.1:6379&gt; hgetall hash</span><br><span class="line">1) &quot;field1&quot;</span><br><span class="line">2) &quot;hello&quot;</span><br><span class="line">3) &quot;field2&quot;</span><br><span class="line">4) &quot;world&quot;</span><br></pre></td></tr></table></figure>



<h4 id="7-1-5-🏉Sorted-Set"><a href="#7-1-5-🏉Sorted-Set" class="headerlink" title="7.1.5 🏉Sorted Set"></a>7.1.5 🏉Sorted Set</h4><p>有序集合sorted set，集合中每个元素都会关联一个double类型的分数。</p>
<ul>
<li><p>redis通过分数对集合中的成员进行排序。</p>
</li>
<li><p>有序集合中成员是唯一的，分数可以重复。</p>
</li>
<li><p>集合是通过哈希表实现的，所以增删查的事件复杂度都是O(1)。</p>
</li>
<li><p>集合中最大的成员数量为2^32^-1(4294967295)， 每个集合可存储40多亿个成员。</p>
</li>
</ul>
<blockquote>
<p>向key的有序集合中添加序号为number的value</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zadd &lt;key&gt; &lt;number&gt; &lt;value&gt; [number value ...]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的有序集合中的所有值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrange &lt;key&gt; 0 -1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的有序集合中的成员数量</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zcard &lt;key&gt; </span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的有序集合中指定下标区间的成员</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrange &lt;key&gt; start end</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的有序集合中指定成员member的索引</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrank &lt;key&gt; member</span><br></pre></td></tr></table></figure>

<blockquote>
<p>对key的有序集合中指定成员member的分数加上增量</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zincrby &lt;key&gt; &lt;Integer&gt; member</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的有序集合中指定成员member的分数值</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zscore &lt;key&gt; member</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的有序集合中指定成员member的排名(从小到大)</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrank &lt;key&gt; member</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的有序集合中指定成员member的排名(从大到小)</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrevrank &lt;key&gt; member</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的有序集合中分数在指定区间[min,max]的成员数量</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zcount &lt;key&gt; min max</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过字典区间获取key的有序集合中的成员数量</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zlexcount &lt;key&gt; min max</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过字典区间获取key的有序集合中的成员</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrangebylex &lt;key&gt; min max [limit offset count]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>获取key的有序集合中分数在指定区间[min,max]的成员</p>
<blockquote>
<p>参数说明</p>
<ul>
<li>min max<ul>
<li>默认情况下为闭区间，即[min ,max]</li>
<li>也可以是使用开区间，即(min, max)，写法为<code> (min  (max</code></li>
</ul>
</li>
<li>withscores<ul>
<li>返回成员的同时会返回分数</li>
</ul>
</li>
<li>limit offset count<ul>
<li>offset：起始位置，count：从起始位置开始的记录数量</li>
<li>实现分页查询</li>
<li>参数: 页数pagenum，页面大小pagesize</li>
<li>那么实际的offset = (pagenum - 1) * pagesize，count = pagesize</li>
<li>即查询语句为<code>zrangebyscore salary min max withscores limit (pagenum - 1) * pagesize pagesize  </code></li>
</ul>
</li>
</ul>
</blockquote>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrangebyscore &lt;key&gt; min max [withscores] [limit offset count]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>例如</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd salary -10000 W -20000 F -30000 S</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; zadd salary 10000 K 20000 A 30000 G</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary -20000 20000</span><br><span class="line">1) &quot;F&quot;</span><br><span class="line">2) &quot;W&quot;</span><br><span class="line">3) &quot;K&quot;</span><br><span class="line">4) &quot;A&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary -inf inf </span><br><span class="line">1) &quot;S&quot;</span><br><span class="line">2) &quot;F&quot;</span><br><span class="line">3) &quot;W&quot;</span><br><span class="line">4) &quot;K&quot;</span><br><span class="line">5) &quot;A&quot;</span><br><span class="line">6) &quot;G&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary -inf inf withscores</span><br><span class="line"> 1) &quot;S&quot;</span><br><span class="line"> 2) &quot;-30000&quot;</span><br><span class="line"> 3) &quot;F&quot;</span><br><span class="line"> 4) &quot;-20000&quot;</span><br><span class="line"> 5) &quot;W&quot;</span><br><span class="line"> 6) &quot;-10000&quot;</span><br><span class="line"> 7) &quot;K&quot;</span><br><span class="line"> 8) &quot;10000&quot;</span><br><span class="line"> 9) &quot;A&quot;</span><br><span class="line">10) &quot;20000&quot;</span><br><span class="line">11) &quot;G&quot;</span><br><span class="line">12) &quot;30000&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore salary -inf inf withscores limit 4 2</span><br><span class="line">1) &quot;G&quot;</span><br><span class="line">2) &quot;30000&quot;</span><br><span class="line">3) &quot;K&quot;</span><br><span class="line">4) &quot;60000&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>删除key的有序集合中的一个或多个成员</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrem &lt;key&gt; member [member ...]</span><br></pre></td></tr></table></figure>



<h3 id="7-2-🌌三种特殊类型"><a href="#7-2-🌌三种特殊类型" class="headerlink" title="7.2 🌌三种特殊类型"></a>7.2 🌌三种特殊类型</h3><h4 id="7-2-1-🔮Geospatial"><a href="#7-2-1-🔮Geospatial" class="headerlink" title="7.2.1 🔮Geospatial"></a>7.2.1 🔮Geospatial</h4><p>Geospatial，地理空间，简称GEO，主要用于存储地理位置信息，并对存储的信息进行操作。</p>
<blockquote>
<p>操作方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">geoadd</td>
<td align="center">添加地理位置的坐标</td>
</tr>
<tr>
<td align="center">geopos</td>
<td align="center">获取地理位置的坐标</td>
</tr>
<tr>
<td align="center">geodist</td>
<td align="center">计算两个位置之间的距离</td>
</tr>
<tr>
<td align="center">georadius</td>
<td align="center">根据用户给定的经纬度坐标来获取指定范围内的地理位置集合</td>
</tr>
<tr>
<td align="center">georadiusbymember</td>
<td align="center">根据储存在位置集合里面的某个地点获取指定范围内的地理位置集合</td>
</tr>
<tr>
<td align="center">geohash</td>
<td align="center">返回一个或者多个位置对象的geohash值</td>
</tr>
</tbody></table>
<p>查询地理数据：<a href="http://www.jsons.cn/lngcode/">城市经纬度查询</a></p>
<blockquote>
<p>测试数据</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">地方</th>
<th align="center">经度</th>
<th align="center">纬度</th>
</tr>
</thead>
<tbody><tr>
<td align="center">黄冈市黄梅县</td>
<td align="center">115.94427</td>
<td align="center">30.07033</td>
</tr>
<tr>
<td align="center">武汉市武昌区</td>
<td align="center">114.31589</td>
<td align="center">30.55389</td>
</tr>
<tr>
<td align="center">北京市丰台区</td>
<td align="center">116.28625</td>
<td align="center">39.8585</td>
</tr>
<tr>
<td align="center">上海市黄浦区</td>
<td align="center">121.49295</td>
<td align="center">31.22337</td>
</tr>
<tr>
<td align="center">合肥市蜀山区</td>
<td align="center">117.26104</td>
<td align="center">31.85117</td>
</tr>
<tr>
<td align="center">深圳市南山区</td>
<td align="center">113.93029</td>
<td align="center">22.53291</td>
</tr>
<tr>
<td align="center">大连市中山区</td>
<td align="center">121.64465</td>
<td align="center">38.91859</td>
</tr>
<tr>
<td align="center">广州市天河区</td>
<td align="center">113.36112</td>
<td align="center">23.12467</td>
</tr>
</tbody></table>
<p>1️⃣<strong>geoadd</strong></p>
<blockquote>
<p>描述</p>
</blockquote>
<p>geoadd用于存储指定的地理位置空间，可以将一个或多个经度(longitude)、纬度(latitude)、位置名称(member)添加到指定的key中。</p>
<blockquote>
<p>语法</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">geoadd &lt;key&gt; longitude latitude member [longtitude latitude member ...]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>规则</p>
</blockquote>
<ul>
<li>两级无法直接添加</li>
<li>有效经度：-180 - 180</li>
<li>有效纬度：-85.05112878 - 85.05112878</li>
</ul>
<blockquote>
<p>实例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geoadd china:city 115.94427 30.07033 huanggang</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 114.31589 30.55389 wuhan</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 116.28625 39.8585 beijing</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 121.49295 31.22337 shanghai</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 117.26104 31.85117 hefei</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 113.93029 22.53291 shenzhen</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 121.64465 38.91859 dalian</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 113.36112 23.12467 guangzhou</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure>

<p>实际应用中，一般会把城市地理数据写在文件中，直接通过java程序一次性导入。</p>
<p>2️⃣<strong>geopos</strong></p>
<blockquote>
<p>描述</p>
</blockquote>
<p>geopos用于从给定的key里返回所有指定名称(member)的位置(经度和纬度)，不存在的返回nil。</p>
<blockquote>
<p>语法</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">geopos &lt;key&gt; member [member ...]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>实例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geopos china:city huanggang shenzhen shanghai </span><br><span class="line">1) 1) &quot;115.94427019357681274&quot;</span><br><span class="line">   2) &quot;30.07033115798519418&quot;</span><br><span class="line">2) 1) &quot;113.93029063940048218&quot;</span><br><span class="line">   2) &quot;22.53290942281488896&quot;</span><br><span class="line">3) 1) &quot;121.49295061826705933&quot;</span><br><span class="line">   2) &quot;31.22337074392616074&quot;</span><br></pre></td></tr></table></figure>



<p>3️⃣<strong>geodist</strong></p>
<blockquote>
<p>描述</p>
</blockquote>
<p>geodist用于计算两个给定位置之间的距离。</p>
<blockquote>
<p>语法</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">geodist &lt;key&gt; member1 member2 [m|km|ft|mi]</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>member1和member2为两个地理位置</li>
<li>m：米，默认位置</li>
<li>km：千米</li>
<li>mi：英里</li>
<li>ft：英尺</li>
</ul>
<blockquote>
<p>实例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geodist china:city huanggang shenzhen</span><br><span class="line">&quot;862016.4959&quot;</span><br><span class="line">127.0.0.1:6379&gt; geodist china:city huanggang hefei km</span><br><span class="line">&quot;234.5308&quot;</span><br><span class="line">127.0.0.1:6379&gt; geodist china:city shanghai dalian mi</span><br><span class="line">&quot;531.9085&quot;</span><br></pre></td></tr></table></figure>



<p>4️⃣<strong>georadius</strong></p>
<blockquote>
<p>描述</p>
</blockquote>
<p>给定一个中心的地理位置(经度和纬度)，给定一个最大距离，返回给定的key包含的位置元素中，与中心的距离不超过最大距离的所有位置元素。</p>
<blockquote>
<p>语法</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">georadius &lt;key&gt; longitude latitude radius m|km|ft|mi [withcoord] [withdist] [withhash] [count] [asc|desc] [store key] [storedist key]</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li><p>longitude：给定中心的经度</p>
</li>
<li><p>latitude：给定中心的纬度</p>
</li>
<li><p>radius：给定的最大距离</p>
</li>
<li><p>withcoord：返回+(位置元素的经度和纬度)</p>
</li>
<li><p>withdist：返回+(位置元素与中心之间的距离)</p>
</li>
<li><p>withhash：以 52 位有符号整数的形式， 返回位置元素经过原始 geohash 编码的有序集合分值。 这个选项主要用于底层应用或者调试， 实际中的作用并不大。</p>
</li>
<li><p>count：限定返回的记录数量</p>
</li>
<li><p>asc：查找结果根据距离从小到大排序</p>
</li>
<li><p>desc：查找结果根据距离从大到小排序</p>
</li>
</ul>
<blockquote>
<p>实例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看距离广州不大于1000km的城市</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 113.36112 23.12467 1000 km asc</span><br><span class="line">1) &quot;guangzhou&quot;</span><br><span class="line">2) &quot;shenzhen&quot;</span><br><span class="line">3) &quot;huanggang&quot;</span><br><span class="line">4) &quot;wuhan&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看距离武汉不大于1000km的城市，从大到小，限制5个，并且显示距离和城市经纬度</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 114.31589 30.55389 1000 km withcoord withdist count 5 desc </span><br><span class="line">1) 1) &quot;shenzhen&quot;</span><br><span class="line">   2) &quot;892.9663&quot;</span><br><span class="line">   3) 1) &quot;113.93029063940048218&quot;</span><br><span class="line">      2) &quot;22.53290942281488896&quot;</span><br><span class="line">2) 1) &quot;guangzhou&quot;</span><br><span class="line">   2) &quot;831.7263&quot;</span><br><span class="line">   3) 1) &quot;113.36112052202224731&quot;</span><br><span class="line">      2) &quot;23.12467049411647935&quot;</span><br><span class="line">3) 1) &quot;shanghai&quot;</span><br><span class="line">   2) &quot;688.9652&quot;</span><br><span class="line">   3) 1) &quot;121.49295061826705933&quot;</span><br><span class="line">      2) &quot;31.22337074392616074&quot;</span><br><span class="line">4) 1) &quot;hefei&quot;</span><br><span class="line">   2) &quot;315.1437&quot;</span><br><span class="line">   3) 1) &quot;117.26104170083999634&quot;</span><br><span class="line">      2) &quot;31.85117048067123591&quot;</span><br><span class="line">5) 1) &quot;huanggang&quot;</span><br><span class="line">   2) &quot;165.3475&quot;</span><br><span class="line">   3) 1) &quot;115.94427019357681274&quot;</span><br><span class="line">      2) &quot;30.07033115798519418&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看距离北京不大于1500km的城市</span></span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 116.28625 39.8585 1500 km withdist asc</span><br><span class="line">1) 1) &quot;beijing&quot;</span><br><span class="line">   2) &quot;0.0002&quot;</span><br><span class="line">2) 1) &quot;dalian&quot;</span><br><span class="line">   2) &quot;472.2545&quot;</span><br><span class="line">3) 1) &quot;hefei&quot;</span><br><span class="line">   2) &quot;894.9324&quot;</span><br><span class="line">4) 1) &quot;wuhan&quot;</span><br><span class="line">   2) &quot;1050.2106&quot;</span><br><span class="line">5) 1) &quot;shanghai&quot;</span><br><span class="line">   2) &quot;1069.3051&quot;</span><br><span class="line">6) 1) &quot;huanggang&quot;</span><br><span class="line">   2) &quot;1089.1453&quot;</span><br></pre></td></tr></table></figure>



<p>5️⃣<strong>georadiusbymember</strong></p>
<blockquote>
<p>描述</p>
</blockquote>
<p>georadiusbymember 和 georadius命令一样， 都可以找出位于指定范围内的元素， 但是 georadiusbymember 的中心点是只能从key中的位置元素选。</p>
<blockquote>
<p>语法</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">georadiusbymember &lt;key&gt; member radius m|km|ft|mi [withcoord] [withdist] [withhash] [count] [asc|desc] [store key] [storedist key]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>实例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看距离黄冈不大于900km的城市</span></span><br><span class="line">127.0.0.1:6379&gt; georadiusbymember china:city huanggang 900 km withdist asc</span><br><span class="line">1) 1) &quot;huanggang&quot;</span><br><span class="line">   2) &quot;0.0000&quot;</span><br><span class="line">2) 1) &quot;wuhan&quot;</span><br><span class="line">   2) &quot;165.3475&quot;</span><br><span class="line">3) 1) &quot;hefei&quot;</span><br><span class="line">   2) &quot;234.5308&quot;</span><br><span class="line">4) 1) &quot;shanghai&quot;</span><br><span class="line">   2) &quot;546.1566&quot;</span><br><span class="line">5) 1) &quot;guangzhou&quot;</span><br><span class="line">   2) &quot;814.0494&quot;</span><br><span class="line">6) 1) &quot;shenzhen&quot;</span><br><span class="line">   2) &quot;862.0165&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看距离深圳不大于2000km的城市</span></span><br><span class="line">127.0.0.1:6379&gt; georadiusbymember china:city shenzhen 2000 km withdist desc</span><br><span class="line">1) 1) &quot;dalian&quot;</span><br><span class="line">   2) &quot;1964.1097&quot;</span><br><span class="line">2) 1) &quot;beijing&quot;</span><br><span class="line">   2) &quot;1939.8454&quot;</span><br><span class="line">3) 1) &quot;shanghai&quot;</span><br><span class="line">   2) &quot;1222.7809&quot;</span><br><span class="line">4) 1) &quot;hefei&quot;</span><br><span class="line">   2) &quot;1087.3585&quot;</span><br><span class="line">5) 1) &quot;wuhan&quot;</span><br><span class="line">   2) &quot;892.9663&quot;</span><br><span class="line">6) 1) &quot;huanggang&quot;</span><br><span class="line">   2) &quot;862.0165&quot;</span><br><span class="line">7) 1) &quot;guangzhou&quot;</span><br><span class="line">   2) &quot;87.9580&quot;</span><br><span class="line">8) 1) &quot;shenzhen&quot;</span><br><span class="line">   2) &quot;0.0000&quot;</span><br></pre></td></tr></table></figure>



<p>6️⃣<strong>geohash</strong></p>
<blockquote>
<p>描述</p>
</blockquote>
<p>geohash用于获取一个或多个位置元素的geohash值。</p>
<blockquote>
<p>实质</p>
</blockquote>
<p><strong>降维打击</strong>：将二维的经纬度转换为一维的字符串</p>
<p>如果两个字符串越接近，那么距离越近。</p>
<blockquote>
<p>语法</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">geohash &lt;key&gt; member [member ...]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>实例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geohash china:city huanggang beijing hefei</span><br><span class="line">1) &quot;wt67n6hh3k0&quot;</span><br><span class="line">2) &quot;wx4dy0j0d40&quot;</span><br><span class="line">3) &quot;wtemhq6fs20&quot;</span><br></pre></td></tr></table></figure>



<p>7️⃣<strong>Other</strong></p>
<blockquote>
<p>GEO</p>
</blockquote>
<p>GEO的底层原理就是Sorted Set，因此我们可以使用Sorted Set命令来操作GEO。</p>
<blockquote>
<p>实例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看地图中全部元素</span></span><br><span class="line">127.0.0.1:6379&gt; zrange china:city 0 -1</span><br><span class="line">1) &quot;shenzhen&quot;</span><br><span class="line">2) &quot;guangzhou&quot;</span><br><span class="line">3) &quot;wuhan&quot;</span><br><span class="line">4) &quot;huanggang&quot;</span><br><span class="line">5) &quot;hefei&quot;</span><br><span class="line">6) &quot;shanghai&quot;</span><br><span class="line">7) &quot;beijing&quot;</span><br><span class="line">8) &quot;dalian&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 移除大连这个城市</span></span><br><span class="line">127.0.0.1:6379&gt; zrem china:city dalian</span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 按照分数给城市排名</span></span><br><span class="line">127.0.0.1:6379&gt; zrangebyscore china:city -inf inf withscores</span><br><span class="line"> 1) &quot;shenzhen&quot;</span><br><span class="line"> 2) &quot;4046431599170567&quot;</span><br><span class="line"> 3) &quot;guangzhou&quot;</span><br><span class="line"> 4) &quot;4046534293000673&quot;</span><br><span class="line"> 5) &quot;wuhan&quot;</span><br><span class="line"> 6) &quot;4051938129491420&quot;</span><br><span class="line"> 7) &quot;huanggang&quot;</span><br><span class="line"> 8) &quot;4052334404505800&quot;</span><br><span class="line"> 9) &quot;hefei&quot;</span><br><span class="line">10) &quot;4052764524670284&quot;</span><br><span class="line">11) &quot;shanghai&quot;</span><br><span class="line">12) &quot;4054757680623470&quot;</span><br><span class="line">13) &quot;beijing&quot;</span><br><span class="line">14) &quot;4069146323276357&quot;</span><br></pre></td></tr></table></figure>



<h4 id="7-2-2-📄HyperLogLog"><a href="#7-2-2-📄HyperLogLog" class="headerlink" title="7.2.2 📄HyperLogLog"></a>7.2.2 📄HyperLogLog</h4><p>HyperLogLog，Redis中基数统计的算法。</p>
<blockquote>
<p>优点</p>
</blockquote>
<p>占用内存固定且较小。每个HyperLogLog键占用12KB内存，可以计算2^64^个不同元素的基数。</p>
<blockquote>
<p>基数</p>
</blockquote>
<p>一个数据集中不重复元素的数量</p>
<blockquote>
<p>应用场景</p>
</blockquote>
<p>统计网站UV</p>
<p>传统方式：使用set保存用户id，set的元素数量可作为标准判断。</p>
<p>这个方式如果保存大量的用户id，就会比较麻烦，目的是计数，而非保存用户id。</p>
<p>使用HyperLogLog会有**0.81%**的错误率，这个在统计UV任务中是可以接受的。</p>
<blockquote>
<p>操作方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">pfadd &lt;key&gt; element [element …]</td>
<td align="center">添加指定元素到HyperLogLog中</td>
</tr>
<tr>
<td align="center">pfcount &lt;key&gt;</td>
<td align="center">返回给定HyperLogLog的基数估算值</td>
</tr>
<tr>
<td align="center">pfmerge &lt;destkey&gt; &lt;key&gt; [key…]</td>
<td align="center">将多个HyperLogLog合并为一个HyperLogLog</td>
</tr>
</tbody></table>
<blockquote>
<p>实例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建第一组元素</span></span><br><span class="line">127.0.0.1:6379&gt; pfadd hyper K H I G H N E S S </span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 统计第一组元素基数</span></span><br><span class="line">127.0.0.1:6379&gt; pfcount hyper</span><br><span class="line">(integer) 7</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建第二组元素</span></span><br><span class="line">127.0.0.1:6379&gt; pfadd hyper2 P A R A K</span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 统计第二组元素基数</span></span><br><span class="line">127.0.0.1:6379&gt; pfcount hyper2</span><br><span class="line">(integer) 4</span><br><span class="line"><span class="meta">#</span><span class="bash"> 合并两组元素</span></span><br><span class="line">127.0.0.1:6379&gt; pfmerge hyper hyper hyper2</span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span><span class="bash"> 统计所有元素基数</span></span><br><span class="line">127.0.0.1:6379&gt; pfcount hyper</span><br><span class="line">(integer) 10</span><br></pre></td></tr></table></figure>





<h4 id="7-1-3-🔳Bitmaps"><a href="#7-1-3-🔳Bitmaps" class="headerlink" title="7.1.3 🔳Bitmaps"></a>7.1.3 🔳Bitmaps</h4><p>Bitmaps，位图，操作二进制位来进行记录，只有0和1两个状态。</p>
<blockquote>
<p>应用场景</p>
</blockquote>
<p>统计用户活跃度，打卡，两个状态的都可以使用Bitmaps。</p>
<blockquote>
<p>操作方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">setbit &lt;key&gt; offset value</td>
<td align="center">设置值</td>
</tr>
<tr>
<td align="center">getbit &lt;key&gt;  offset</td>
<td align="center">获取值</td>
</tr>
<tr>
<td align="center">bitcount &lt;key&gt; start end</td>
<td align="center">获取Bitmaps指定范围值为1的个数</td>
</tr>
<tr>
<td align="center">bitop and|or|not|xor &lt;destkey&gt; key [key …]</td>
<td align="center">Bitmaps的集合运算</td>
</tr>
</tbody></table>
<blockquote>
<p>实例</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打卡 0-6:周一-周日</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2020年第一周打卡</span></span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:1 0 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:1 1 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:1 2 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:1 3 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:1 4 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:1 5 0</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:1 6 0</span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2020年第二周打卡</span></span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:2 0 0</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:2 1 0</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:2 2 0</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:2 3 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:2 4 0</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:2 5 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit 2020:week:2 6 1</span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查打卡</span></span><br><span class="line">127.0.0.1:6379&gt; getbit 2020:week:1 3</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; getbit 2020:week:2 1</span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 统计打卡</span></span><br><span class="line">127.0.0.1:6379&gt; bitcount 2020:week:1</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; bitcount 2020:week:2</span><br><span class="line">(integer) 3</span><br><span class="line"><span class="meta">#</span><span class="bash"> 对两周打卡结果取并集</span></span><br><span class="line">127.0.0.1:6379&gt; bitop and andres 2020:week:1 2020:week:2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; bitcount andres</span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 对两周打卡结果取交集</span></span><br><span class="line">127.0.0.1:6379&gt; bitop or orres 2020:week:1 2020:week:2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; bitcount orres</span><br><span class="line">(integer) 7</span><br></pre></td></tr></table></figure>



<h2 id="8-📩Redis事务"><a href="#8-📩Redis事务" class="headerlink" title="8. 📩Redis事务"></a>8. 📩Redis事务</h2><blockquote>
<p> 💡 说明</p>
</blockquote>
<p>Redis单条命令执行具有原子性，但是事务不保证原子性。</p>
<h3 id="8-1📖定义"><a href="#8-1📖定义" class="headerlink" title="8. 1📖定义"></a>8. 1📖定义</h3><p>一组命令的队列</p>
<h3 id="8-2-🌠特征"><a href="#8-2-🌠特征" class="headerlink" title="8.2 🌠特征"></a>8.2 🌠特征</h3><ul>
<li>一次性</li>
<li>顺序性</li>
<li>排他性</li>
</ul>
<h3 id="8-3-⏳三个阶段"><a href="#8-3-⏳三个阶段" class="headerlink" title="8.3 ⏳三个阶段"></a>8.3 ⏳三个阶段</h3><ul>
<li>开始事务 (multi)</li>
<li>命令入队 (…)</li>
<li>执行事务 (exec)</li>
</ul>
<h3 id="8-4-📝操作方法"><a href="#8-4-📝操作方法" class="headerlink" title="8.4 📝操作方法"></a>8.4 📝操作方法</h3><table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">discard</td>
<td align="center">取消事务，放弃执行事务块内的所有命令</td>
</tr>
<tr>
<td align="center">exec</td>
<td align="center">执行事务块内的所有命令</td>
</tr>
<tr>
<td align="center">multi</td>
<td align="center">标记一个事务的开始</td>
</tr>
<tr>
<td align="center">unwatch</td>
<td align="center">取消watch命令对所有key的监视</td>
</tr>
<tr>
<td align="center">watch</td>
<td align="center">监视一个或多个key，如果在事务执行之前这个或这些key被其他命令锁改动，那么事务将被打断</td>
</tr>
</tbody></table>
<h3 id="8-5-🕵️实例"><a href="#8-5-🕵️实例" class="headerlink" title="8.5 🕵️实例"></a>8.5 🕵️实例</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 开启事务</span></span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令入队</span></span><br><span class="line">127.0.0.1:6379&gt; set k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 v2 </span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; mget k1 k2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; getset k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line">QUEUED</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行事务</span></span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) 1) &quot;v1&quot;</span><br><span class="line">   2) &quot;v2&quot;</span><br><span class="line">4) &quot;v3&quot;</span><br><span class="line">5) &quot;v3&quot;</span><br></pre></td></tr></table></figure>



<h3 id="8-6-⭕异常"><a href="#8-6-⭕异常" class="headerlink" title="8.6 ⭕异常"></a>8.6 ⭕异常</h3><ul>
<li>命令异常：命令存在错误，所有命令都不会被执行</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; getset k3 # 错误命令</span><br><span class="line">(error) ERR wrong number of arguments for &#x27;getset&#x27; command</span><br><span class="line">127.0.0.1:6379&gt; set k4 v4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec # 执行事务报错</span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class="line">127.0.0.1:6379&gt; get k1 # 所有命令都未被执行</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>

<ul>
<li>运行异常：错误操作的命令抛出异常，其他命令正常执行</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incr k1 # 错误操作</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec # 执行事务仅错误操作执行失败，其他命令执行成功</span><br><span class="line">1) OK</span><br><span class="line">2) (error) ERR value is not an integer or out of range</span><br><span class="line">3) OK</span><br><span class="line">127.0.0.1:6379&gt; mget k1 k2</span><br><span class="line">1) &quot;v1&quot;</span><br><span class="line">2) &quot;v2&quot;</span><br></pre></td></tr></table></figure>



<h3 id="9-7-🔭监控"><a href="#9-7-🔭监控" class="headerlink" title="9.7 🔭监控"></a>9.7 🔭监控</h3><ul>
<li>悲观锁：很悲观，认为什么时候都会出问题，无论做什么都会加锁。</li>
<li>乐观锁：很乐观，认为什么时候都不会出问题，所以不会上锁。更新数据的时候会比较version，判断数据是否更新过。</li>
<li>watch的本质：select version，一旦发现监视的数据version改变，事务将被打断。</li>
</ul>
<blockquote>
<p>实例1-watch的监控测试</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 个人财务</span></span><br><span class="line">127.0.0.1:6379&gt; set money 100</span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span><span class="bash"> 个人支出</span></span><br><span class="line">127.0.0.1:6379&gt; set out 0</span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span><span class="bash"> 监控财务</span></span><br><span class="line">127.0.0.1:6379&gt; watch money </span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启事务</span></span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span><span class="bash"> 消费10元</span></span><br><span class="line">127.0.0.1:6379&gt; decrby money 30</span><br><span class="line">QUEUED</span><br><span class="line"><span class="meta">#</span><span class="bash"> 支出增加</span></span><br><span class="line">127.0.0.1:6379&gt; incrby out 30</span><br><span class="line">QUEUED</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行事务</span></span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">1) (integer) 70</span><br><span class="line">2) (integer) 30</span><br></pre></td></tr></table></figure>

<blockquote>
<p>实例2-watch的多线程测试，watch可以当做redis的乐观锁操作</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 线程1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 监控财务</span></span><br><span class="line">127.0.0.1:6379&gt; watch money</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span><span class="bash"> 消费10元</span></span><br><span class="line">127.0.0.1:6379&gt; decrby money 10</span><br><span class="line">QUEUED</span><br><span class="line"><span class="meta">#</span><span class="bash"> 支出增加</span></span><br><span class="line">127.0.0.1:6379&gt; incrby out 10</span><br><span class="line">QUEUED</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行之前线程2修改了财务，这个时候就会导致事务执行失败</span></span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">(nil)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 线程2 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行在线程1的事务<span class="built_in">exec</span>之前</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询财务</span></span><br><span class="line">127.0.0.1:6379&gt; get money</span><br><span class="line">&quot;70&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 充值1000</span></span><br><span class="line">127.0.0.1:6379&gt; incrby money 1000</span><br><span class="line">(integer) 1070</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 线程1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行在线程1的事务<span class="built_in">exec</span>之后</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1、如果发现事务执行失败，就先解锁</span></span><br><span class="line">127.0.0.1:6379&gt; unwatch </span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2、获取最新的值，再次监视</span></span><br><span class="line">127.0.0.1:6379&gt; watch money</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; decrby money 50</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; incrby out 50</span><br><span class="line">QUEUED</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3、对比监视的值是否发生了变化</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果没有变化，那么可以执行成功，否则执行失败</span></span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">1) (integer) 1020</span><br><span class="line">2) (integer) 80</span><br></pre></td></tr></table></figure>



<h2 id="9-📩Jedis"><a href="#9-📩Jedis" class="headerlink" title="9. 📩Jedis"></a>9. 📩Jedis</h2><blockquote>
<p>📢 说明</p>
</blockquote>
<p>Jedis是Redis官方推荐的Java连接开发工具。</p>
<p>Jedis中的所有api就对应Redis中的所有命令。</p>
<h3 id="9-1-➕导入依赖"><a href="#9-1-➕导入依赖" class="headerlink" title="9.1 ➕导入依赖"></a>9.1 ➕导入依赖</h3><blockquote>
<p>pom.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.parak<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>KHighness<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span>&gt;</span>parakovo@gmail.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fastjson.version</span>&gt;</span>1.2.68<span class="tag">&lt;/<span class="name">fastjson.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jackson.version</span>&gt;</span>2.11.0<span class="tag">&lt;/<span class="name">jackson.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jedis.version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">jedis.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Springboot-Web  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Spring Test --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Springboot-Aop  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Springboot-Redis  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- SpringCloud-Context --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Fastjson --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;fastjson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Jackson --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Lombok --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Jedis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jedis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="9-2-⌨️编码测试"><a href="#9-2-⌨️编码测试" class="headerlink" title="9.2 ⌨️编码测试"></a>9.2 ⌨️编码测试</h3><h4 id="9-2-1-🅿Ping测试"><a href="#9-2-1-🅿Ping测试" class="headerlink" title="9.2.1 🅿Ping测试"></a>9.2.1 🅿Ping测试</h4><blockquote>
<p>Ping.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j2;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/11 17:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: 测试链接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ping</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        log.info(jedis.ping());</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">17:52:31.303 [main] INFO top.parak.jedis.Ping - PONG</span><br></pre></td></tr></table></figure>



<h4 id="9-2-1-⚪GEO-api测试"><a href="#9-2-1-⚪GEO-api测试" class="headerlink" title="9.2.1 ⚪GEO-api测试"></a>9.2.1 ⚪GEO-api测试</h4><blockquote>
<p>city.txt</p>
</blockquote>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">huanggang    115.94427    30.07033</span><br><span class="line">wuhan        114.31589    30.55389</span><br><span class="line">beijing      116.28625    39.8585</span><br><span class="line">shanghai     121.49295    31.22337</span><br><span class="line">hefei        117.26104    31.85117</span><br><span class="line">shenzhen     113.93029    22.53291</span><br><span class="line">dalian       121.64465    38.91859</span><br><span class="line">guangzhou    113.36112    23.12467</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Geo.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j2;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.ResourceUtils;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.GeoCoordinate;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.GeoUnit;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.params.GeoRadiusParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/11 17:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: 测试Geospatial</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Geo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取文件将地理数据写进redis</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readAndWriteIntoRedis</span><span class="params">(String path, Jedis jedis)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">        FileChannel channel = fileInputStream.getChannel();</span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">512</span>);</span><br><span class="line">        channel.read(byteBuffer);</span><br><span class="line">        String[] res = <span class="keyword">new</span> String(byteBuffer.array()).split(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        Map&lt;String, GeoCoordinate&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Arrays.stream(res).forEach(s -&gt; &#123;</span><br><span class="line">            <span class="comment">// 使用正则\s+匹配多个空格，分割字符串</span></span><br><span class="line">            String[] ss = s.split(<span class="string">&quot;\\s+&quot;</span>);</span><br><span class="line">            map.put(ss[<span class="number">0</span>], <span class="keyword">new</span> GeoCoordinate(Double.valueOf(ss[<span class="number">1</span>]), Double.valueOf(ss[<span class="number">2</span>])));</span><br><span class="line">        &#125;);</span><br><span class="line">        jedis.geoadd(<span class="string">&quot;china:city&quot;</span>, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        readAndWriteIntoRedis(ResourceUtils.getFile(<span class="string">&quot;src/main/resources/city.txt&quot;</span>).getAbsolutePath(), jedis);</span><br><span class="line">        log.info(<span class="string">&quot;==========地图中的所有城市==========&quot;</span>);</span><br><span class="line">        jedis.zrange(<span class="string">&quot;china:city&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>).stream().forEach(s -&gt; &#123; log.info(s + <span class="string">&quot; &quot;</span>); &#125;);</span><br><span class="line">        log.info(<span class="string">&quot;==========查询黄冈的经纬度==========&quot;</span>);</span><br><span class="line">        log.info(jedis.geopos(<span class="string">&quot;china:city&quot;</span>, <span class="string">&quot;huanggang&quot;</span>));</span><br><span class="line">        log.info(<span class="string">&quot;==========查询距离杭州不超过1000km的城市==========&quot;</span>);</span><br><span class="line">        GeoRadiusParam geoRadiusParam = <span class="keyword">new</span> GeoRadiusParam();</span><br><span class="line">        geoRadiusParam.withCoord().withDist().sortAscending();</span><br><span class="line">        jedis.georadius(<span class="string">&quot;china:city&quot;</span>, <span class="number">120.153576</span>, <span class="number">30.287459</span>, <span class="number">1000</span>, GeoUnit.KM, geoRadiusParam).forEach( c -&gt; &#123;</span><br><span class="line">            log.info(<span class="string">&quot;城市名称：&#123;&#125;, 经纬度：&#123;&#125;，距离：&#123;&#125;KM&quot;</span>, c.getMemberByString(), c.getCoordinate(), c.getDistance());</span><br><span class="line">        &#125;);</span><br><span class="line">        log.info(<span class="string">&quot;==========查询距离武汉不超过1000KM的城市==========&quot;</span>);</span><br><span class="line">        jedis.georadiusByMember(<span class="string">&quot;china:city&quot;</span>, <span class="string">&quot;wuhan&quot;</span>, <span class="number">1000</span>, GeoUnit.KM, geoRadiusParam).forEach( c -&gt; &#123;</span><br><span class="line">            log.info(<span class="string">&quot;城市名称：&#123;&#125;, 经纬度：&#123;&#125;，距离：&#123;&#125;KM&quot;</span>, c.getMemberByString(), c.getCoordinate(), c.getDistance());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">20:21:02.671 [main] INFO top.parak.jedis.Geo - ==========地图中的所有城市==========</span><br><span class="line">20:21:02.718 [main] INFO top.parak.jedis.Geo - shenzhen </span><br><span class="line">20:21:02.718 [main] INFO top.parak.jedis.Geo - guangzhou </span><br><span class="line">20:21:02.718 [main] INFO top.parak.jedis.Geo - wuhan </span><br><span class="line">20:21:02.718 [main] INFO top.parak.jedis.Geo - huanggang </span><br><span class="line">20:21:02.718 [main] INFO top.parak.jedis.Geo - hefei </span><br><span class="line">20:21:02.718 [main] INFO top.parak.jedis.Geo - shanghai </span><br><span class="line">20:21:02.718 [main] INFO top.parak.jedis.Geo - beijing </span><br><span class="line">20:21:02.718 [main] INFO top.parak.jedis.Geo - dalian </span><br><span class="line">20:21:02.718 [main] INFO top.parak.jedis.Geo - ==========查询黄冈的经纬度==========</span><br><span class="line">20:21:02.720 [main] INFO top.parak.jedis.Geo - [(115.94427019357681,30.070331157985194)]</span><br><span class="line">20:21:02.721 [main] INFO top.parak.jedis.Geo - ==========查询距离杭州不超过1000km的城市==========</span><br><span class="line">20:21:02.724 [main] INFO top.parak.jedis.Geo - 城市名称：shanghai, 经纬度：(121.49295061826706,31.22337074392616)，距离：165.0KM</span><br><span class="line">20:21:02.724 [main] INFO top.parak.jedis.Geo - 城市名称：hefei, 经纬度：(117.26104170084,31.851170480671236)，距离：325.8468KM</span><br><span class="line">20:21:02.725 [main] INFO top.parak.jedis.Geo - 城市名称：huanggang, 经纬度：(115.94427019357681,30.070331157985194)，距离：405.4241KM</span><br><span class="line">20:21:02.725 [main] INFO top.parak.jedis.Geo - 城市名称：wuhan, 经纬度：(114.31589037179947,30.55389005243692)，距离：560.6357KM</span><br><span class="line">20:21:02.725 [main] INFO top.parak.jedis.Geo - 城市名称：dalian, 经纬度：(121.64465099573135,38.91858901014995)，距离：969.6213KM</span><br><span class="line">20:21:02.725 [main] INFO top.parak.jedis.Geo - ==========查询距离武汉不超过1000KM的城市==========</span><br><span class="line">20:21:02.725 [main] INFO top.parak.jedis.Geo - 城市名称：wuhan, 经纬度：(114.31589037179947,30.55389005243692)，距离：0.0KM</span><br><span class="line">20:21:02.725 [main] INFO top.parak.jedis.Geo - 城市名称：huanggang, 经纬度：(115.94427019357681,30.070331157985194)，距离：165.3475KM</span><br><span class="line">20:21:02.726 [main] INFO top.parak.jedis.Geo - 城市名称：hefei, 经纬度：(117.26104170084,31.851170480671236)，距离：315.1437KM</span><br><span class="line">20:21:02.726 [main] INFO top.parak.jedis.Geo - 城市名称：shanghai, 经纬度：(121.49295061826706,31.22337074392616)，距离：688.9652KM</span><br><span class="line">20:21:02.726 [main] INFO top.parak.jedis.Geo - 城市名称：guangzhou, 经纬度：(113.36112052202225,23.12467049411648)，距离：831.7263KM</span><br><span class="line">20:21:02.726 [main] INFO top.parak.jedis.Geo - 城市名称：shenzhen, 经纬度：(113.93029063940048,22.53290942281489)，距离：892.9663KM</span><br></pre></td></tr></table></figure>



<h4 id="9-2-2-⚫Hyper-api测试"><a href="#9-2-2-⚫Hyper-api测试" class="headerlink" title="9.2.2 ⚫Hyper-api测试"></a>9.2.2 ⚫Hyper-api测试</h4><blockquote>
<p>Hyper.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j2;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/11 20:26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: 测试hyper</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hyper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        jedis.pfadd(<span class="string">&quot;hyper1&quot;</span>, <span class="string">&quot;K&quot;</span>, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;I&quot;</span>, <span class="string">&quot;G&quot;</span>, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;N&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;S&quot;</span>, <span class="string">&quot;S&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;hyper1中的元素基数：&#123;&#125;&quot;</span>, jedis.pfcount(<span class="string">&quot;hyper1&quot;</span>));</span><br><span class="line">        jedis.pfadd(<span class="string">&quot;hyper2&quot;</span>, <span class="string">&quot;P&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;K&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;hyper2中的元素基数：&#123;&#125;&quot;</span>, jedis.pfcount(<span class="string">&quot;hyper2&quot;</span>));</span><br><span class="line">        jedis.pfmerge(<span class="string">&quot;hyper&quot;</span>, <span class="string">&quot;hyper1&quot;</span>, <span class="string">&quot;hyper2&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;hyper1和hyper2合并后的元素基数：&#123;&#125;&quot;</span>, jedis.pfcount(<span class="string">&quot;hyper&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">20:36:20.386 [main] INFO top.parak.jedis.Hyper - hyper1中的元素基数：7</span><br><span class="line">20:36:20.390 [main] INFO top.parak.jedis.Hyper - hyper2中的元素基数：4</span><br><span class="line">20:36:20.390 [main] INFO top.parak.jedis.Hyper - hyper1和hyper2合并后的元素基数：10</span><br></pre></td></tr></table></figure>



<h4 id="9-2-3-🔴Bitmaps-api测试"><a href="#9-2-3-🔴Bitmaps-api测试" class="headerlink" title="9.2.3 🔴Bitmaps-api测试"></a>9.2.3 🔴Bitmaps-api测试</h4><blockquote>
<p>Bit.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j2;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.BitOP;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/11 20:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: 测试Bitmaps</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getChineseExpression</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">return</span> <span class="string">&quot;星期一&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> <span class="string">&quot;星期二&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">return</span> <span class="string">&quot;星期三&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">return</span> <span class="string">&quot;星期四&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>: <span class="keyword">return</span> <span class="string">&quot;星期五&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>: <span class="keyword">return</span> <span class="string">&quot;星期六&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>: <span class="keyword">return</span> <span class="string">&quot;星期日&quot;</span>;</span><br><span class="line">            <span class="keyword">default</span>: <span class="keyword">return</span> <span class="string">&quot;Error&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">// 模拟两周的打卡情况</span></span><br><span class="line">        <span class="keyword">boolean</span>[] bool1 = <span class="keyword">new</span> <span class="keyword">boolean</span>[]&#123;<span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>&#125;;</span><br><span class="line">        <span class="keyword">boolean</span>[] bool2 = <span class="keyword">new</span> <span class="keyword">boolean</span>[]&#123;<span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">true</span>, <span class="keyword">false</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bool1.length; i++) &#123; jedis.setbit(<span class="string">&quot;2020:week:1&quot;</span>, i, bool1[i]); &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bool2.length; i++) &#123; jedis.setbit(<span class="string">&quot;2020:week:2&quot;</span>, i, bool2[i]); &#125;</span><br><span class="line">        log.info(<span class="string">&quot;2020年第一周的打卡天数：&#123;&#125;&quot;</span>, jedis.bitcount(<span class="string">&quot;2020:week:1&quot;</span>));</span><br><span class="line">        log.info(<span class="string">&quot;2020年第一周具体打卡情况&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bool1.length; i++) &#123; log.info(getChineseExpression(i) + <span class="string">&quot;: &quot;</span> + (jedis.getbit(<span class="string">&quot;2020:week:1&quot;</span>, i) ? <span class="string">&quot;已打卡&quot;</span> : <span class="string">&quot;未打卡&quot;</span>)); &#125;</span><br><span class="line">        log.info(<span class="string">&quot;2020年第二周的打卡天数：&#123;&#125;&quot;</span>, jedis.bitcount(<span class="string">&quot;2020:week:2&quot;</span>));</span><br><span class="line">        log.info(<span class="string">&quot;2020年第二周具体打卡情况&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bool2.length; i++) &#123; log.info(getChineseExpression(i) + <span class="string">&quot;: &quot;</span> + (jedis.getbit(<span class="string">&quot;2020:week:2&quot;</span>, i) ? <span class="string">&quot;已打卡&quot;</span> : <span class="string">&quot;未打卡&quot;</span>)); &#125;</span><br><span class="line">        jedis.bitop(BitOP.AND, <span class="string">&quot;2020:week:1and2&quot;</span>, <span class="string">&quot;2020:week:1&quot;</span>, <span class="string">&quot;2020:week:2&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;2020年第一周和第二周两天都打卡的天数：&#123;&#125;&quot;</span>, jedis.bitcount(<span class="string">&quot;2020:week:1and2&quot;</span>));</span><br><span class="line">        jedis.bitop(BitOP.OR, <span class="string">&quot;2020:week:1or2&quot;</span>, <span class="string">&quot;2020:week:1&quot;</span>, <span class="string">&quot;2020:week:2&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;2020年第一周和第二周至少有一天打卡的天数：&#123;&#125;&quot;</span>, jedis.bitcount(<span class="string">&quot;2020:week:1or2&quot;</span>));</span><br><span class="line">        jedis.bitop(BitOP.XOR,<span class="string">&quot;2020:week:1xor2&quot;</span>, <span class="string">&quot;2020:week:1&quot;</span>, <span class="string">&quot;2020:week:2&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;2020年第一周和第二周仅有一天打卡的天数：&#123;&#125;&quot;</span>, jedis.bitcount(<span class="string">&quot;2020:week:1xor2&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">21:07:40.042 [main] INFO top.parak.jedis.Bit - 2020年第一周的打卡天数：5</span><br><span class="line">21:07:40.046 [main] INFO top.parak.jedis.Bit - 2020年第一周具体打卡情况</span><br><span class="line">21:07:40.046 [main] INFO top.parak.jedis.Bit - 星期一: 已打卡</span><br><span class="line">21:07:40.046 [main] INFO top.parak.jedis.Bit - 星期二: 已打卡</span><br><span class="line">21:07:40.046 [main] INFO top.parak.jedis.Bit - 星期三: 已打卡</span><br><span class="line">21:07:40.046 [main] INFO top.parak.jedis.Bit - 星期四: 已打卡</span><br><span class="line">21:07:40.046 [main] INFO top.parak.jedis.Bit - 星期五: 已打卡</span><br><span class="line">21:07:40.046 [main] INFO top.parak.jedis.Bit - 星期六: 未打卡</span><br><span class="line">21:07:40.047 [main] INFO top.parak.jedis.Bit - 星期日: 未打卡</span><br><span class="line">21:07:40.047 [main] INFO top.parak.jedis.Bit - 2020年第二周的打卡天数：3</span><br><span class="line">21:07:40.047 [main] INFO top.parak.jedis.Bit - 2020年第二周具体打卡情况</span><br><span class="line">21:07:40.047 [main] INFO top.parak.jedis.Bit - 星期一: 未打卡</span><br><span class="line">21:07:40.047 [main] INFO top.parak.jedis.Bit - 星期二: 未打卡</span><br><span class="line">21:07:40.047 [main] INFO top.parak.jedis.Bit - 星期三: 未打卡</span><br><span class="line">21:07:40.047 [main] INFO top.parak.jedis.Bit - 星期四: 已打卡</span><br><span class="line">21:07:40.047 [main] INFO top.parak.jedis.Bit - 星期五: 已打卡</span><br><span class="line">21:07:40.047 [main] INFO top.parak.jedis.Bit - 星期六: 已打卡</span><br><span class="line">21:07:40.047 [main] INFO top.parak.jedis.Bit - 星期日: 未打卡</span><br><span class="line">21:07:40.048 [main] INFO top.parak.jedis.Bit - 2020年第一周和第二周两天都打卡的天数：2</span><br><span class="line">21:07:40.048 [main] INFO top.parak.jedis.Bit - 2020年第一周和第二周至少有一天打卡的天数：6</span><br><span class="line">21:07:40.048 [main] INFO top.parak.jedis.Bit - 2020年第一周和第二周仅有一天打卡的天数：4</span><br></pre></td></tr></table></figure>



<h4 id="9-2-4-🔵事务测试"><a href="#9-2-4-🔵事务测试" class="headerlink" title="9.2.4 🔵事务测试"></a>9.2.4 🔵事务测试</h4><blockquote>
<p>Affair.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j2;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Transaction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/11 21:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: 测试事务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Affair</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建json数据</span></span><br><span class="line">        JSONObject jsonObject1 = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        jsonObject1.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;KHighness&quot;</span>);</span><br><span class="line">        jsonObject1.put(<span class="string">&quot;age&quot;</span>, <span class="number">19</span>);</span><br><span class="line">        jsonObject1.put(<span class="string">&quot;constellation&quot;</span>, <span class="string">&quot;Virgo&quot;</span>);</span><br><span class="line">        jsonObject1.put(<span class="string">&quot;Hobby&quot;</span>, <span class="string">&quot;Jay&quot;</span>);</span><br><span class="line">        String json1 = jsonObject1.toJSONString();</span><br><span class="line">        JSONObject jsonObject2 = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        jsonObject2.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;BingYao&quot;</span>);</span><br><span class="line">        jsonObject2.put(<span class="string">&quot;age&quot;</span>, <span class="number">16</span>);</span><br><span class="line">        jsonObject2.put(<span class="string">&quot;constellation&quot;</span>, <span class="string">&quot;Taurus&quot;</span>);</span><br><span class="line">        jsonObject2.put(<span class="string">&quot;Hobby&quot;</span>, <span class="string">&quot;Czk&quot;</span>);</span><br><span class="line">        String json2 = jsonObject2.toJSONString();</span><br><span class="line">        jedis.set(<span class="string">&quot;user1&quot;</span>, json1);</span><br><span class="line">        jedis.set(<span class="string">&quot;user2&quot;</span>, json2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加入乐观锁</span></span><br><span class="line">        jedis.watch(<span class="string">&quot;user1&quot;</span>, <span class="string">&quot;user2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启事务</span></span><br><span class="line">        Transaction multi = jedis.multi();</span><br><span class="line">        <span class="keyword">new</span> Thread( () -&gt; &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">               multi.set(<span class="string">&quot;user1&quot;</span>, json1);</span><br><span class="line">               multi.set(<span class="string">&quot;user2&quot;</span>, json2);</span><br><span class="line">               <span class="comment">// 执行事务</span></span><br><span class="line">               multi.exec();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               <span class="comment">// 发生异常</span></span><br><span class="line">               <span class="comment">// 放弃事务</span></span><br><span class="line">               multi.discard();</span><br><span class="line">               log.info(e.getMessage());</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               <span class="comment">// 输出数据</span></span><br><span class="line">               log.info(<span class="string">&quot;user1: [&#123;&#125;]&quot;</span>, jedis.get(<span class="string">&quot;user1&quot;</span>));</span><br><span class="line">               log.info(<span class="string">&quot;user2: [&#123;&#125;]&quot;</span>, jedis.get(<span class="string">&quot;user2&quot;</span>));</span><br><span class="line">               jedis.close();</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;Multi&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 另一线程</span></span><br><span class="line">        <span class="comment">// 开启在事务之前</span></span><br><span class="line">        <span class="keyword">new</span> Thread( () -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">new</span> Affair().resetInfo1(jedis);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                log.info(e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;Other&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resetInfo1</span><span class="params">(Jedis jedis)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        JSONObject jsonObject1 = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        jsonObject1.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;KHighness&quot;</span>);</span><br><span class="line">        jsonObject1.put(<span class="string">&quot;age&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        jsonObject1.put(<span class="string">&quot;constellation&quot;</span>, <span class="string">&quot;Leo&quot;</span>);</span><br><span class="line">        jsonObject1.put(<span class="string">&quot;Hobby&quot;</span>, <span class="string">&quot;BingYao&quot;</span>);</span><br><span class="line">        String json1 = jsonObject1.toJSONString();</span><br><span class="line">        jedis.set(<span class="string">&quot;user1&quot;</span>, json1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;Other&quot; redis.clients.jedis.exceptions.JedisDataException: Cannot use Jedis when in Multi. Please use Transaction or reset jedis state.</span><br><span class="line">	at redis.clients.jedis.BinaryJedis.checkIsInMultiOrPipeline(BinaryJedis.java:1895)</span><br><span class="line">	at redis.clients.jedis.Jedis.set(Jedis.java:152)</span><br><span class="line">	at top.parak.jedis.Affair.resetInfo1(Affair.java:82)</span><br><span class="line">	at top.parak.jedis.Affair.lambda$main$1(Affair.java:66)</span><br><span class="line">	at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">22:05:18.651 [Multi] INFO top.parak.jedis.Affair - user1: [&#123;&quot;constellation&quot;:&quot;Virgo&quot;,&quot;name&quot;:&quot;KHighness&quot;,&quot;Hobby&quot;:&quot;Jay&quot;,&quot;age&quot;:19&#125;]</span><br><span class="line">22:05:18.654 [Multi] INFO top.parak.jedis.Affair - user2: [&#123;&quot;constellation&quot;:&quot;Taurus&quot;,&quot;name&quot;:&quot;BingYao&quot;,&quot;Hobby&quot;:&quot;Czk&quot;,&quot;age&quot;:16&#125;]</span><br></pre></td></tr></table></figure>



<h2 id="10-📩Springboot整合"><a href="#10-📩Springboot整合" class="headerlink" title="10. 📩Springboot整合"></a>10. 📩Springboot整合</h2><blockquote>
<p>⚠️notice</p>
</blockquote>
<p>在SpringBoot2.X之后，原来使用的jedis被替换为了lettuce，在windows下lettuce连接池仅支持3.2.100版本的Redis</p>
<ul>
<li><p>jedis：采用的直连，多个线程操作的话，是不安全的，如果想要避免不安全，需要使用jedis pool连接池，更像BIO模式</p>
</li>
<li><p>lettuce：底层整合Netty，实例可以在多个线程中共享，不存在线程不安全的情况，可以减少线程数据，更像NIO模式</p>
</li>
</ul>
<h3 id="10-1-🔎源码分析"><a href="#10-1-🔎源码分析" class="headerlink" title="10.1 🔎源码分析"></a>10.1 🔎源码分析</h3><blockquote>
<p>自动配置类：RedisAutoConfiguration.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(</span></span><br><span class="line"><span class="meta">    proxyBeanMethods = false</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;RedisOperations.class&#125;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;RedisProperties.class&#125;)</span></span><br><span class="line"><span class="meta">@Import(&#123;LettuceConnectionConfiguration.class, JedisConnectionConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisAutoConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(name = &#123;&quot;redisTemplate&quot;&#125;)</span> </span><br><span class="line">    <span class="comment">// ==&gt; 这个注解说明，不存在我们自定义名为redisTemplate的Bean的情况下，这个Bean才生效</span></span><br><span class="line">    <span class="comment">// ==&gt; 因此我们可以使用自定义的RedisTemplate，SpringBoot会优先使用自定义RedisTemplate</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        <span class="comment">// 默认的RedisTemplate没有过多的配置，Redis对象都需要序列化和反序列化</span></span><br><span class="line">        <span class="comment">// 两个泛型都是 Object, Obeject 的类型，我们以后使用需要强制转换成 String, Object</span></span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> RedisTemplate();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="comment">// 由于String是Redis中最常使用的类型，所以单独一个StringRedisTemplate</span></span><br><span class="line">    <span class="comment">// 所以操作String类型，直接使用StringRedisTemplate即可</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="10-2-🔑整合使用"><a href="#10-2-🔑整合使用" class="headerlink" title="10.2 🔑整合使用"></a>10.2 🔑整合使用</h3><blockquote>
<p>导入依赖：pom.xml(见上jedis)</p>
</blockquote>
<blockquote>
<p>配置环境：application.properties</p>
</blockquote>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Redis数据库索引（默认为0）</span></span><br><span class="line"><span class="meta">spring.redis.database</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"># Redis服务器地址</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="comment"># Redis服务器连接端口</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="comment"># Redis服务器连接密码（默认为空）</span></span><br><span class="line"><span class="meta">spring.redis.password</span>=<span class="string"></span></span><br><span class="line"><span class="comment"># 连接超时时间（毫秒）</span></span><br><span class="line"><span class="meta">spring.redis.timeout</span>=<span class="string">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Spring 2.X以后，使用lettuce连接池</span></span><br><span class="line"><span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.max-active</span>=<span class="string">100</span></span><br><span class="line"><span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.max-idle</span>=<span class="string">10</span></span><br><span class="line"><span class="comment"># 连接池中的最小空闲连接</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.pool.min-idle</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"># 连接超时时间</span></span><br><span class="line"><span class="meta">spring.redis.lettuce.shutdown-timeout</span>=<span class="string">100ms</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>⌨️自定义RedisTemplate：RedisConfig.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/7 20:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: 自定义RedisTemplate</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;自定义redisTemplate&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisConnectionFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;redisTemplate&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* 创建redisTemplate */</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        <span class="comment">/* 关联redisConnectionFactory */</span></span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="comment">/* Jackson2JsonRedisSerializer：Json序列化器 */</span></span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        redisTemplate.setKeySerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        objectMapper.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line">        <span class="comment">/* StringRedisSerializer：String序列化器 */</span></span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        <span class="comment">/* 设置key的序列化方式：String */</span></span><br><span class="line">        redisTemplate.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">/* 设置value的序列化方式：Json */</span></span><br><span class="line">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">/* 设置hash的key的序列化方式：Json */</span></span><br><span class="line">        redisTemplate.setHashKeySerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">/* 设置hash的value的序列化方式：Json */</span></span><br><span class="line">        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        redisTemplate.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>⌨️Redis工具类：RedisUtil.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j2;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/7 21:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: Redis操作工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*==================================================================</span></span><br><span class="line"><span class="comment">    //                            common                              //</span></span><br><span class="line"><span class="comment">    ==================================================================*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功，false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(String key, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回0代表永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getExpire</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*==================================================================</span></span><br><span class="line"><span class="comment">    //                            String                              //</span></span><br><span class="line"><span class="comment">    ==================================================================*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在，false 不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 可以传一个或多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(String... key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="keyword">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.length == <span class="number">1</span>) &#123;</span><br><span class="line">                redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                redisTemplate.delete(CollectionUtils.arrayToList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key == <span class="keyword">null</span> ? <span class="keyword">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功，false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功，false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 增量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 递增后的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">incr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;增量必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 减量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 递减后的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">decr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;减量必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().decrement(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*==================================================================</span></span><br><span class="line"><span class="comment">    //                              map                               //</span></span><br><span class="line"><span class="comment">    ==================================================================*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为NULL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为NULL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hget</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title">hmget</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应的多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功，false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功，false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据，如果不存在则创建</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功，false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据，并设置时间，如果不存在则创建</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) 如果已存在的hash表有时间，这里会更新原值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功，false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hset</span><span class="params">(String key, String item, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash表中的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为NULL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 可以使多个 不能为NULL</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hdel</span><span class="params">(String key, Object... item)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为NULL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为NULL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在，false 不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hHasKey</span><span class="params">(String key, String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递增 如果不存在，就会创建一个，并把递增后的值返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   增量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 递增后的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hincr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   减量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 递减后的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">hdecr</span><span class="params">(String key, String item, <span class="keyword">double</span> by)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*==================================================================</span></span><br><span class="line"><span class="comment">    //                              set                               //</span></span><br><span class="line"><span class="comment">    ==================================================================*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> set中的所有值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">sGet</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据value从一个set中查询是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在，false 不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sHasKey</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSet</span><span class="params">(String key, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将set数据放入缓存，并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time   时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sSetAndTime</span><span class="params">(String key, <span class="keyword">long</span> time, Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long count = redisTemplate.opsForSet().add(key, values);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> set的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">sGetSetSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*==================================================================</span></span><br><span class="line"><span class="comment">    //                             list                               //</span></span><br><span class="line"><span class="comment">    ==================================================================*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> list的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lGetListSize</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引获取list中的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引 index &gt;= 0时，0 表头，1 第二个元素，依次类推；index &lt; 0时，-1 表尾，-2 倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">lGetIndex</span><span class="params">(String key, <span class="keyword">long</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功，false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存，并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lSet</span><span class="params">(String key, Object value, <span class="keyword">long</span> time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功，false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lUpdateIndex</span><span class="params">(String key, <span class="keyword">long</span> index, Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除N个值为value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 移除数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lRemove</span><span class="params">(String key, <span class="keyword">long</span> count ,Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Long remove = redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="10-3-💨api测试"><a href="#10-3-💨api测试" class="headerlink" title="10.3 💨api测试"></a>10.3 💨api测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> top.parak.common.RedisUtil;</span><br><span class="line"><span class="keyword">import</span> top.parak.entity.User;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j2;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringbootRedisApplicationTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtil redisUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;K殿下&quot;</span>);</span><br><span class="line">        log.info(redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(<span class="string">&quot;Knum&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">        log.info(stringRedisTemplate.opsForValue().increment(<span class="string">&quot;Knum&quot;</span>, <span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">&quot;KHighness&quot;</span>, <span class="number">19</span>);</span><br><span class="line">        String jsonUser = <span class="keyword">new</span> ObjectMapper().writeValueAsString(user);</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">        log.info(redisTemplate.opsForValue().get(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HashMap hashMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;name1&quot;</span>, <span class="string">&quot;KHighness&quot;</span>);</span><br><span class="line">        hashMap.put(<span class="string">&quot;name2&quot;</span>, <span class="string">&quot;ParaK&quot;</span>);</span><br><span class="line">        hashMap.put(<span class="string">&quot;name3&quot;</span>, <span class="string">&quot;FlowerK&quot;</span>);</span><br><span class="line">        redisUtil.hmset(<span class="string">&quot;K&quot;</span>, hashMap);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry k : redisUtil.hmget(<span class="string">&quot;K&quot;</span>).entrySet()) &#123;</span><br><span class="line">            log.info(k.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">                        __ __ __    _       __</span><br><span class="line">                       / <span class="comment">//_// /_  (_)___ _/ /_  ____  ___  __________</span></span><br><span class="line">                      / ,&lt;  / __ \/ / __ `/ __ \/ __ \/ _ \/ ___/ ___/</span><br><span class="line">                     / /| |/ / / / / /_/ / / / / / / /  __(__  |__  )</span><br><span class="line">                    /_/ |_/_/ /_/_/\__, /_/ /_/_/ /_/\___/____/____/</span><br><span class="line">                                  /____/</span><br><span class="line"></span><br><span class="line">                     Copyright © <span class="number">2020</span> KHighness. All Rights Reserved</span><br><span class="line"></span><br><span class="line"><span class="number">2020</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">13</span>:<span class="number">36</span>:<span class="number">35.073</span>  INFO <span class="number">18840</span> --- [           main] t.parak.SpringbootRedisApplicationTest   : No active profile set, falling back to <span class="keyword">default</span> profiles: <span class="keyword">default</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">13</span>:<span class="number">36</span>:<span class="number">35.417</span>  INFO <span class="number">18840</span> --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!</span><br><span class="line"><span class="number">2020</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">13</span>:<span class="number">36</span>:<span class="number">35.420</span>  INFO <span class="number">18840</span> --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.</span><br><span class="line"><span class="number">2020</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">13</span>:<span class="number">36</span>:<span class="number">35.445</span>  INFO <span class="number">18840</span> --- [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in <span class="number">10</span>ms. Found <span class="number">0</span> Redis repository interfaces.</span><br><span class="line"><span class="number">2020</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">13</span>:<span class="number">36</span>:<span class="number">35.534</span>  INFO <span class="number">18840</span> --- [           main] o.s.cloud.context.scope.GenericScope     : BeanFactory id=<span class="number">8d</span>774ca9-<span class="number">71</span>ca-<span class="number">37</span>a9-<span class="number">91e1</span>-<span class="number">35</span>cd9af79e44</span><br><span class="line"><span class="number">2020</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">13</span>:<span class="number">36</span>:<span class="number">35.699</span>  INFO <span class="number">18840</span> --- [           main] trationDelegate$BeanPostProcessorChecker : Bean <span class="string">&#x27;org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration&#x27;</span> of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$<span class="number">67</span>ea5b63] <span class="function">is not eligible <span class="keyword">for</span> getting processed by all <span class="title">BeanPostProcessors</span> <span class="params">(<span class="keyword">for</span> example: not eligible <span class="keyword">for</span> auto-proxying)</span></span></span><br><span class="line"><span class="function">2020-10-12 13:36:36.483  INFO 18840 --- [           main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService &#x27;applicationTaskExecutor&#x27;</span></span><br><span class="line"><span class="function">2020-10-12 13:36:36.818  INFO 18840 --- [           main] t.parak.SpringbootRedisApplicationTest   : Started SpringbootRedisApplicationTest in 2.287 <span class="title">seconds</span> <span class="params">(JVM running <span class="keyword">for</span> <span class="number">3.29</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2020-10-12 13:36:37.191  INFO 18840 --- [           main] io.lettuce.core.EpollProvider            : Starting without optional epoll library</span></span><br><span class="line"><span class="function">2020-10-12 13:36:37.192  INFO 18840 --- [           main] io.lettuce.core.KqueueProvider           : Starting without optional kqueue library</span></span><br><span class="line"><span class="function">2020-10-12 13:36:37.740  INFO 18840 --- [           main] t.parak.SpringbootRedisApplicationTest   : K殿下</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2020-10-12 13:36:37.762  INFO 18840 --- [           main] t.parak.SpringbootRedisApplicationTest   : 6</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2020-10-12 13:36:37.802  INFO 18840 --- [           main] t.parak.SpringbootRedisApplicationTest   : <span class="title">User</span><span class="params">(name=KHighness, age=<span class="number">19</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">2020-10-12 13:36:37.836  INFO 18840 --- [           main] t.parak.SpringbootRedisApplicationTest   : name3</span>=FlowerK</span><br><span class="line"><span class="number">2020</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">13</span>:<span class="number">36</span>:<span class="number">37.836</span>  INFO <span class="number">18840</span> --- [           main] t.parak.SpringbootRedisApplicationTest   : name2=ParaK</span><br><span class="line"><span class="number">2020</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">13</span>:<span class="number">36</span>:<span class="number">37.836</span>  INFO <span class="number">18840</span> --- [           main] t.parak.SpringbootRedisApplicationTest   : name1=KHighness</span><br></pre></td></tr></table></figure>



<h2 id="11-📩Redis持久化"><a href="#11-📩Redis持久化" class="headerlink" title="11. 📩Redis持久化"></a>11. 📩Redis持久化</h2><blockquote>
<p>📌tip</p>
</blockquote>
<p>Redis是内存数据库，如果不将内存中的数据库状态保存在磁盘，那么一旦服务器进程退出，服务器中的数据库状态也会消失。所以Redis提供了持久化功能。</p>
<ul>
<li><p>Redis默认是按照快照RDB的持久化方式</p>
</li>
<li><p>Redis重启的时候会优先使用AOF文件还原数据库状态</p>
</li>
</ul>
<h3 id="11-1-📁RDB"><a href="#11-1-📁RDB" class="headerlink" title="11.1 📁RDB"></a>11.1 📁RDB</h3><blockquote>
<p>🔔RDB = Redis Database</p>
</blockquote>
<p>将内存中的数据以快照”RDB”的形式将数据持久化到磁盘的一个二进制文件dump.rdb，定时保存。</p>
<blockquote>
<p>🔨配置</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">save 900 1    # 15分钟备份一次</span><br><span class="line">save 300 10   # 如果在300s内，至少有10个key进行了修改，就进行持久化操作</span><br><span class="line">save 60 10000 # 如果在60s内，至少有10000个key进行了修改，就进行持久化操作</span><br></pre></td></tr></table></figure>

<p>可以在24小时内，每小时备份一次，并且在每个月的每一天也备份一个RDB文件。</p>
<p>这样的话，即使遇上问题，也可以随时将数据集恢复到不同的版本。</p>
<blockquote>
<p>🔍工作机制</p>
</blockquote>
<p>Redis会单独创建(fork)一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何I/O操作的。这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加高效。RDB的<strong>缺点是最后一次持久化后的数据可能丢失</strong>。我们默认的就是RDB，一般情况下不需要修改这个配置。</p>
<blockquote>
<p>💣触发机制</p>
</blockquote>
<ul>
<li>save的规则满足的情况下，会自动触发rdb规则</li>
<li>执行flushall命令，也会触发rdb规则</li>
<li>退出redis，也会产生rdb文件</li>
</ul>
<blockquote>
<p>💟恢复rdb</p>
</blockquote>
<ul>
<li><p>将rdb文件放在redis启动目录，redis服务器启动的时候就会自动检查dump.rdb，恢复其中的数据</p>
</li>
<li><p>查看需要存在的位置</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config get dir</span><br><span class="line">1) &quot;dir&quot;</span><br><span class="line">2) &quot;/usr/local/bin&quot; # 如果在这个目录下存在dump.rdb文件，启动就会自动恢复其中的数据</span><br></pre></td></tr></table></figure>



<blockquote>
<p>🌠优点缺点</p>
</blockquote>
<p>优点：</p>
<ul>
<li><p>适合大规模的数据恢复(适合文件备份)</p>
</li>
<li><p>对数据的完整性要求不高</p>
</li>
</ul>
<p>缺点：</p>
<ul>
<li><p>Redis服务器宕机时会丢失数据</p>
</li>
<li><p>fork进程会占用一定的内容空间</p>
</li>
</ul>
<h3 id="11-2-📁AOF"><a href="#11-2-📁AOF" class="headerlink" title="11.2 📁AOF"></a>11.2 📁AOF</h3><blockquote>
<p>🔔AOF = Append Only Mode</p>
</blockquote>
<p>把所有的对Redis的服务器进行修改的命令都存到一个文件(默认为appendonly.aof)里，命令的集合。</p>
<blockquote>
<p>🔔配置</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">appendonly yes # 开启AOF</span><br><span class="line">appendfsync yes # 默认开启同步</span><br><span class="line">appendfsync always # 每次数据修改发生时候都会写入AOF文件</span><br><span class="line">appendfsync everysec # 每秒钟同步一次，这个死AOF的缺省策略</span><br></pre></td></tr></table></figure>



<blockquote>
<p>📝AOF重写</p>
</blockquote>
<ul>
<li>AOF文件的大小随着时间的流逝一定越来越大，影响包括但不限于：对于Redis服务器计算机的存储压力；AOF还原数据库状态的时间增加</li>
<li>为了解决AOF文件体积膨胀的问题，Redis提供了AOF重写功能：Redis服务器可以创建一个新的AOF文件来替代现有的AOF文件，新旧两个文件所保存的数据库状态是相同的，但是新的AOF 文件不会包含任何浪费空间的冗余命令，通常会较旧AOF文件小很多</li>
</ul>
<p>Redis会在最近一次重写后记住AOF文件的大小，将次基本大小与当前大小进行比较，如果当前大小大于指定的百分比，则触发重写。</p>
<p>指定零百分比可以禁用重写功能。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">auto-aof-rewrite-percentage 100 </span><br><span class="line">auto-aof-rewrite-min-size 64mb # 触发重写的AOF文件的最小大小</span><br></pre></td></tr></table></figure>



<blockquote>
<p>💢产生问题</p>
</blockquote>
<p>每次重启Redis的时候，会优先使用AOF文件还原数据。</p>
<p>如果AOF文件以外产生错位，或者人工意外改写，可以通过<code>redis-check-aof --fix appendonly.aof</code>修复文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master bin]# redis-check-aof --fix appendonly.aof </span><br><span class="line">&#x27;x              3f: Expected prefix &#x27;*&#x27;, got: &#x27;</span><br><span class="line">AOF analyzed: size=114, ok_up_to=63, diff=51</span><br><span class="line">This will shrink the AOF from 114 bytes, with 51 bytes, to 63 bytes</span><br><span class="line">Continue? [y/N]: y</span><br><span class="line">Successfully truncated AOF</span><br></pre></td></tr></table></figure>



<blockquote>
<p>🌠优点缺点</p>
</blockquote>
<p>优点：</p>
<ul>
<li>AOF会让redis变得非常耐久，AOF的默认策略是每秒同步一次，在这种配置下，就算Redis服务器宕机，也最多丢失一秒钟的数据</li>
</ul>
<p>缺点：</p>
<ul>
<li>对于相同的数据集来说，AOF的文件体积要大于RDB的文件体积，数据恢复的速度更慢</li>
<li>根据所使用的sync策略，AOF的速度可能慢于RDB</li>
</ul>
<h2 id="12-📩Redis发布订阅"><a href="#12-📩Redis发布订阅" class="headerlink" title="12. 📩Redis发布订阅"></a>12. 📩Redis发布订阅</h2><h3 id="12-1-💬说明"><a href="#12-1-💬说明" class="headerlink" title="12.1 💬说明"></a>12.1 💬说明</h3><p>Redis 发布订阅 (pub/sub) 是一种消息通信模式：发送者(pub) 发送方消息，订阅者(sub)接收消息。</p>
<p>Redis客户端可以订阅任意数量的频道。</p>
<h3 id="12-2-📷模型"><a href="#12-2-📷模型" class="headerlink" title="12.2 📷模型"></a>12.2 📷模型</h3><blockquote>
<p>🗼订阅模型</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201125132811770.png" class="" title="image-20201125132811770">

<blockquote>
<p>🗽消息模型</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/image-20201125132839908.png" class="" title="image-20201125132839908">



<blockquote>
<p>📜发布订阅命令</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">psubscribe pattern [pattern …]</td>
<td align="center">订阅一个或多个符合给定模式的频道</td>
</tr>
<tr>
<td align="center">pubsub subcommand [argument [argument …]]</td>
<td align="center">查看订阅与发布系统状态</td>
</tr>
<tr>
<td align="center">publish channel message</td>
<td align="center">将消息发送到指定的频道</td>
</tr>
<tr>
<td align="center">punsubscribe channel [channel …]</td>
<td align="center">退订所有给定模式的频道</td>
</tr>
<tr>
<td align="center">subscribe channel [channel …]</td>
<td align="center">订阅给定的一个或多个频道的信息</td>
</tr>
<tr>
<td align="center">unsubscribe [channel [channel …]]</td>
<td align="center">退订给定的频道</td>
</tr>
</tbody></table>
<blockquote>
<p>🎏演示</p>
</blockquote>
<p>开启三个redis-cli</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 第一个客户端，订阅频道：Khighness</span></span><br><span class="line">127.0.0.1:6379&gt; subscribe Khighness</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;Khighness&quot;</span><br><span class="line">3) (integer) 1</span><br><span class="line">1) &quot;message&quot;</span><br><span class="line">2) &quot;Khighness&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二个客户端，在频道Khighness发布消息</span></span><br><span class="line">127.0.0.1:6379&gt; publish Khighness &quot;Client1: Hello, Khighness&quot;</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第三个客户端，在频道Khighness发布消息</span></span><br><span class="line">127.0.0.1:6379&gt; publish Khighness &quot;Client3: Hello, Khighness&quot;</span><br><span class="line">(integer) 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 订阅频道的第一个客户端就能收到消息</span></span><br><span class="line">1) &quot;message&quot;</span><br><span class="line">2) &quot;Khighness&quot;</span><br><span class="line">3) &quot;Client2: Hello, Khighness&quot;</span><br><span class="line">1) &quot;message&quot;</span><br><span class="line">2) &quot;Khighness&quot;</span><br><span class="line">3) &quot;Client3: Hello, Khighness&quot;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>🕵️原理</p>
</blockquote>
<p>Redis是C语言编写的，通过分析Redis源代码里面的pubsub.c文件，了解发布和订阅机制的底层实现。</p>
<p>通过subscribe命令订阅某频道后，redis-server里维护了一个字典，字典的键就是一个个频道channel，而字典的值则是一个个链表，链表中保存了所有订阅这个频道的客户端client。subscribe命令的关键，就是将client添加到给定channel的订阅链中。</p>
<p>通过publish命令向订阅者发送消息，redis-server会使用给定的频道作为键，在它所维护的channel字典查找记录了订阅这个频道的所有客户端的链表，遍历这个链表，将消息发布给所有订阅者。</p>
<p>在Redis中，可以设定对某一个key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到响应的消息。这一功能最明显的用法就是用作实时消息系统，普通的即时聊天和群聊功能。</p>
<h2 id="13-📩Redis主从复制"><a href="#13-📩Redis主从复制" class="headerlink" title="13. 📩Redis主从复制"></a>13. 📩Redis主从复制</h2><h3 id="13-1-📖概念"><a href="#13-1-📖概念" class="headerlink" title="13.1 📖概念"></a>13.1 📖概念</h3><p>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主结点(master)，后者称为从结点(slave)；数据的复制是单向的，只能由主节点到从结点。master以写为主，salve以读为主。</p>
<p>默认情况下，每台Redis服务器都是主结点；且一个主结点可以有多个从结点(或没有从结点)，但一个从结点只能有一个主节点。</p>
<h3 id="13-2-🔧作用"><a href="#13-2-🔧作用" class="headerlink" title="13.2 🔧作用"></a>13.2 🔧作用</h3><ol>
<li>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式</li>
<li>故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复，实际上是一种服务的冗余</li>
<li>负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供读服务，分担服务器负载；尤其是在写少读多的场景下，通过多个从结点分担读负载，可以大大提高Redis服务器的并发量</li>
<li>高可用基石：主从复制是哨兵和集群可实施的基础，因此说主从复制是Redis高可用的基础</li>
</ol>
<h3 id="13-3-🔍复制原理"><a href="#13-3-🔍复制原理" class="headerlink" title="13.3 🔍复制原理"></a>13.3 🔍复制原理</h3><p>slave启动成功连接到master后会发送一个sync同步命令。</p>
<p>master接到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，master将传送整个数据文件到slave，并完成一次完全同步。</p>
<p><strong>全量复制</strong>：slave服务在接收到数据库文件后，将其存盘并加载到内存中。</p>
<p><strong>增量复制</strong>：master继续将新的所有收集到的修改命令依次传给slave，完成同步。</p>
<p>但是只要是重新连接master，一次完全同步(全量复制)将被自动执行。</p>
<h2 id="14-📩Redis集群搭建"><a href="#14-📩Redis集群搭建" class="headerlink" title="14. 📩Redis集群搭建"></a>14. 📩Redis集群搭建</h2><h3 id="14-1-🔱方法"><a href="#14-1-🔱方法" class="headerlink" title="14.1 🔱方法"></a>14.1 🔱方法</h3><p>==搭建临时伪集群，命令操作即可==</p>
<p>主要操作：<strong>操作从机，认老大。</strong></p>
<p>查看redis服务器信息：<code>info replication</code></p>
<p>在从机上认老大master：<code>slaveof &lt;master-ip&gt; &lt;master-port&gt;</code></p>
<p>==搭建永久集群，修改配置文件==</p>
<p>主要操作：修改redis-conf文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">replicaof &lt;masterip&gt; &lt;masterport&gt;  # 配置master的ip和端口号</span><br><span class="line">masterauth &lt;master-passwordd&gt;      # 如果master有密码则配置密码</span><br></pre></td></tr></table></figure>



<p>==master关机解决——谋权篡位==</p>
<p>通过<code>slaveof no one</code>让slave自己变成master</p>
<h3 id="14-2-🔪操作"><a href="#14-2-🔪操作" class="headerlink" title="14.2 🔪操作"></a>14.2 🔪操作</h3><ol>
<li>复制三份redis.conf文件，修改信息<ul>
<li>port</li>
<li>logfile</li>
<li>pidfile</li>
<li>dbfilename</li>
</ul>
</li>
<li>分别在三个配置文件下启动redis服务</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@master bin]# ps -ef | grep redis</span><br><span class="line">root      18914      1  0 00:54 ?        00:01:38 redis-server 127.0.0.1:6379</span><br><span class="line">root      31612      1  0 11:51 ?        00:00:00 redis-server 127.0.0.1:6380</span><br><span class="line">root      31623      1  0 11:51 ?        00:00:00 redis-server 127.0.0.1:6381</span><br><span class="line">root      31634  31340  0 11:51 pts/2    00:00:00 grep --color=auto redis</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>开启三个终端开启三个redis客户端分别连接三个redis服务器</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Terminal1</span></span><br><span class="line">[parak@master bin]$ redis-cli -p 6379</span><br><span class="line"><span class="meta">#</span><span class="bash"> Terminal2</span></span><br><span class="line">[parak@master bin]$ redis-cli -p 6380</span><br><span class="line"><span class="meta">#</span><span class="bash"> Terminal3</span></span><br><span class="line">[parak@master bin]$ redis-cli -p 6381</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>将6379端口的服务的配置成master，另外两个配置成slave</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 6380</span></span><br><span class="line">127.0.0.1:6380&gt; slaveof 127.0.0.1 6379</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6380&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:3</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:14</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:9c3e61afce386f90c00db9ee4e9a2e7b4b265297</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:14</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:14</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6381</span></span><br><span class="line">127.0.0.1:6381&gt; slaveof 127.0.0.1 6379</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6381&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:8</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:42</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:9c3e61afce386f90c00db9ee4e9a2e7b4b265297</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:42</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:43</span><br><span class="line">repl_backlog_histlen:0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6379</span></span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=127.0.0.1,port=6380,state=online,offset=2087,lag=0</span><br><span class="line">slave1:ip=127.0.0.1,port=6381,state=online,offset=2087,lag=0</span><br><span class="line">master_replid:9c3e61afce386f90c00db9ee4e9a2e7b4b265297</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:2087</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:2087</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>在master上写入值，在slave上读取值</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 6379</span></span><br><span class="line">127.0.0.1:6379&gt; hmset student:1 name Khighness gender male age 19</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hmset student:2 name bingyao gender female age 16</span><br><span class="line">OK</span><br><span class="line"><span class="meta">#</span><span class="bash"> 6380</span></span><br><span class="line">127.0.0.1:6380&gt; hmget student:1 name gender age</span><br><span class="line">1) &quot;Khighness&quot;</span><br><span class="line">2) &quot;male&quot;</span><br><span class="line">3) &quot;19&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 6381</span></span><br><span class="line">127.0.0.1:6381&gt; hmget student:2 name gender age</span><br><span class="line">1) &quot;bingyao&quot;</span><br><span class="line">2) &quot;female&quot;</span><br><span class="line">3) &quot;16&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> slave只能读取，不能写入</span></span><br><span class="line">127.0.0.1:6380&gt; set K2 V2</span><br><span class="line">(error) READONLY You can&#x27;t write against a read only replica</span><br></pre></td></tr></table></figure>



<h2 id="15-📩Redis哨兵模式"><a href="#15-📩Redis哨兵模式" class="headerlink" title="15. 📩Redis哨兵模式"></a>15. 📩Redis哨兵模式</h2><p><del>驾校手动挡=&gt;上路自动挡</del></p>
<h3 id="15-1-📙概述"><a href="#15-1-📙概述" class="headerlink" title="15.1 📙概述"></a>15.1 📙概述</h3><p>主从切换技术的方法：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑哨兵模式。Redis从2.8开始正式提供了Sentinel(哨兵)架构来解决这个问题。</p>
<p>简单来说，哨兵模式就是谋权篡位的自动版，能够后台监控主机是否故障，如果发生故障则根据投票数自动将库转换为主库。</p>
<p>哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。</p>
<p>原理：哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">	A((哨兵))</span><br><span class="line">	B(主Redis服务器)</span><br><span class="line">	C(从Redis服务器1)</span><br><span class="line">	D(从Redis服务器2)</span><br><span class="line">	S[以独立的进程监控3台服务器Redis是否正常运行] </span><br><span class="line">	S --&gt; A</span><br><span class="line">	A --&gt; C</span><br><span class="line">	A --&gt; B</span><br><span class="line">	A --&gt; D</span><br><span class="line">	B --&gt; C</span><br><span class="line">	B --&gt; D</span><br></pre></td></tr></table></figure>



<p>这里的哨兵有两个作用：</p>
<ul>
<li>通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器</li>
<li>当哨兵监测到master宕机，会自动将slave切换为master，然后通过发布订阅模式通知其他的从服务器，修改配置文件，让它们切换主机</li>
</ul>
<p>一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控，各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/bae4ff13/sentinel.jpg" class="" title="sentinel">



<p>假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行failover过程，仅仅是哨兵1主管的认为主服务器不可用，仅仅是哨兵1主观的认为主服务器不可用，这个现象称为主观下线，当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover[故障转移]操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为客观下线。</p>
<h3 id="15-2-🎏测试"><a href="#15-2-🎏测试" class="headerlink" title="15.2 🎏测试"></a>15.2 🎏测试</h3><p>准备三个redis服务，6379-master、6380-slave、6381-slave</p>
<p>修改配置文件sentinel.conf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sentinel monitor mymaster 127.0.0.1 6379 1</span><br></pre></td></tr></table></figure>

<p>启动哨兵</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">34055:X 20 Oct 2020 14:39:15.404 * Increased maximum number of open files to 10032 (it was originally set to 1024).</span><br><span class="line">                _._                                                  </span><br><span class="line">           _.-``__ &#x27;&#x27;-._                                             </span><br><span class="line">      _.-``    `.  `_.  &#x27;&#x27;-._           Redis 5.0.8 (00000000/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ &#x27;&#x27;-._                                   </span><br><span class="line"> (    &#x27;      ,       .-`  | `,    )     Running in sentinel mode</span><br><span class="line"> |`-._`-...-` __...-.``-._|&#x27;` _.-&#x27;|     Port: 26379</span><br><span class="line"> |    `-._   `._    /     _.-&#x27;    |     PID: 34055</span><br><span class="line">  `-._    `-._  `-./  _.-&#x27;    _.-&#x27;                                   </span><br><span class="line"> |`-._`-._    `-.__.-&#x27;    _.-&#x27;_.-&#x27;|                                  </span><br><span class="line"> |    `-._`-._        _.-&#x27;_.-&#x27;    |           http://redis.io        </span><br><span class="line">  `-._    `-._`-.__.-&#x27;_.-&#x27;    _.-&#x27;                                   </span><br><span class="line"> |`-._`-._    `-.__.-&#x27;    _.-&#x27;_.-&#x27;|                                  </span><br><span class="line"> |    `-._`-._        _.-&#x27;_.-&#x27;    |                                  </span><br><span class="line">  `-._    `-._`-.__.-&#x27;_.-&#x27;    _.-&#x27;                                   </span><br><span class="line">      `-._    `-.__.-&#x27;    _.-&#x27;                                       </span><br><span class="line">          `-._        _.-&#x27;                                           </span><br><span class="line">              `-.__.-&#x27;                                               </span><br><span class="line"></span><br><span class="line">34055:X 20 Oct 2020 14:39:15.407 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span><br><span class="line">34055:X 20 Oct 2020 14:39:15.408 # Sentinel ID is dbfb304470e8ed2bb81b4be42f847e21ff5d9519</span><br><span class="line">34055:X 20 Oct 2020 14:39:15.408 # +monitor master mymaster 127.0.0.1 6379 quorum 1</span><br><span class="line">34055:X 20 Oct 2020 14:40:15.646 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:40:25.731 * +slave slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br></pre></td></tr></table></figure>

<p>关闭master服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 6379: master -&gt; shutdown</span></span><br><span class="line">127.0.0.1:6379&gt; SHUTDOWN</span><br><span class="line">not connected&gt; exit</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> sentinel</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 监控到master宕机</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选出6380为master</span></span><br><span class="line">34055:X 20 Oct 2020 14:43:47.509 # +sdown master mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:47.509 # +odown master mymaster 127.0.0.1 6379 #quorum 1/1</span><br><span class="line">34055:X 20 Oct 2020 14:43:47.509 # +new-epoch 1</span><br><span class="line">34055:X 20 Oct 2020 14:43:47.509 # +try-failover master mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:47.510 # +vote-for-leader dbfb304470e8ed2bb81b4be42f847e21ff5d9519 1</span><br><span class="line">34055:X 20 Oct 2020 14:43:47.510 # +elected-leader master mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:47.510 # +failover-state-select-slave master mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:47.594 # +selected-slave slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:47.594 * +failover-state-send-slaveof-noone slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:47.678 * +failover-state-wait-promotion slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:48.296 # +promoted-slave slave 127.0.0.1:6380 127.0.0.1 6380 @ mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:48.296 # +failover-state-reconf-slaves master mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:48.371 * +slave-reconf-sent slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:49.310 * +slave-reconf-inprog slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:49.310 * +slave-reconf-done slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:49.362 # +failover-end master mymaster 127.0.0.1 6379</span><br><span class="line">34055:X 20 Oct 2020 14:43:49.362 # +switch-master mymaster 127.0.0.1 6379 127.0.0.1 6380</span><br><span class="line">34055:X 20 Oct 2020 14:43:49.362 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6380</span><br><span class="line">34055:X 20 Oct 2020 14:43:49.362 * +slave slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6380</span><br><span class="line">34055:X 20 Oct 2020 14:44:19.365 # +sdown slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6380</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6380: 新王登基</span></span><br><span class="line">127.0.0.1:6380&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:1</span><br><span class="line">slave0:ip=127.0.0.1,port=6381,state=online,offset=42337,lag=1</span><br><span class="line">master_replid:12a540accf0c9347d3e45fad83ccddea86f3b3c3</span><br><span class="line">master_replid2:b80e4fbbe06a83ac070f38e89267bd81b26ec5ca</span><br><span class="line">master_repl_offset:42351</span><br><span class="line">second_repl_offset:20188</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:8342</span><br><span class="line">repl_backlog_histlen:34010</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 6381: 参拜新王</span></span><br><span class="line">127.0.0.1:6381&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6380</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:0</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:63969</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:12a540accf0c9347d3e45fad83ccddea86f3b3c3</span><br><span class="line">master_replid2:b80e4fbbe06a83ac070f38e89267bd81b26ec5ca</span><br><span class="line">master_repl_offset:63969</span><br><span class="line">second_repl_offset:20188</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:8053</span><br><span class="line">repl_backlog_histlen:55917</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启6379的服务</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启之后俯首称臣</span></span><br><span class="line">[root@master bin]# redis-server kconfig/redis6379.conf </span><br><span class="line">[root@master bin]# redis-cli -p 6379</span><br><span class="line">127.0.0.1:6379&gt; ping</span><br><span class="line">PONG</span><br><span class="line">127.0.0.1:6379&gt; info relplication</span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6380</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:2</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:50522</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:12a540accf0c9347d3e45fad83ccddea86f3b3c3</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:50522</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:48596</span><br><span class="line">repl_backlog_histlen:1927</span><br></pre></td></tr></table></figure>



<h3 id="15-3-🌠优点"><a href="#15-3-🌠优点" class="headerlink" title="15.3 🌠优点"></a>15.3 🌠优点</h3><ul>
<li>哨兵集群，基于主从复制模式，继承了主从的所有优点</li>
<li>主从可以切换，故障可以转移，增强系统的可用性</li>
<li>哨兵模式是主从模式的升级版，手动到自动，更加健壮</li>
</ul>
<h3 id="15-4-📰配置详解"><a href="#15-4-📰配置详解" class="headerlink" title="15.4 📰配置详解"></a>15.4 📰配置详解</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> sentinel.conf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 哨兵sentinel实例运行的端口，默认26379</span></span><br><span class="line">port 26379</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 守护进程 </span></span><br><span class="line">daemonize no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进程文件</span></span><br><span class="line">pidfile &quot;/var/run/redis-sentinel.pid&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进程文件</span></span><br><span class="line">logfile &quot;&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 工作目录</span></span><br><span class="line">dir &quot;/tmp&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 哨兵sentinel监控的master的IP和Port</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> quorum配置多少个哨兵统一认为master失联。那么这时客观上认为主结点失联</span></span><br><span class="line">sentinel monitor &lt;master-name&gt; &lt;master-ip&gt; &lt;redis-ip&gt; &lt;quorum&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在redis实例中开启了授权密码</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置哨兵senti的连接密码</span></span><br><span class="line">sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置指定在发生failover主从切换时最多可以有多少个slave同时对新的master同步</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> numreplicas越小，完成failover的事件就越长</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> numreplicas越大，就意味着越多的slave因为replication(复制)而不可用</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> numreplicas设置为1，保证每次只有slave处于不能处理命令请求的状态</span></span><br><span class="line">sentinel parallel-syncs &lt;master-name&gt; &lt;numreplicas&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置指定多milliseconds毫秒之后，master没有响应sentinel</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 此时，哨兵主观上认为master下线，默认30秒</span></span><br><span class="line">sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置故障转移的超时时间，默认2分钟</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以用于以下方面</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1. 同一sentinel对同一个master两次failo ver的间隔时间</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 当一个slave从一个错误的master那里同步数据开始计算时间，直至slave被纠正为向正确的master那里同步数据</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. 当想要取消一个正在进行的failover需要的时间</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4. 当进行failover时，配置所有slaves指向新的master所需的最大时间</span></span><br><span class="line">sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通知脚本</span></span><br><span class="line">sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端重新配置主节点参数脚本</span></span><br><span class="line">sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</span><br></pre></td></tr></table></figure>



<h2 id="16-📩Redis穿透、击穿和雪崩"><a href="#16-📩Redis穿透、击穿和雪崩" class="headerlink" title="16. 📩Redis穿透、击穿和雪崩"></a>16. 📩Redis穿透、击穿和雪崩</h2><h3 id="16-1-🔥缓存穿透"><a href="#16-1-🔥缓存穿透" class="headerlink" title="16.1 🔥缓存穿透"></a>16.1 🔥缓存穿透</h3><blockquote>
<p>💭问题说明</p>
</blockquote>
<p>查询的key对应的数据不在redis缓存中，即缓存没有命中，于是向持久层数据库查询，数据库也没有，当请求量过大的时候，可能压垮数据库。</p>
<p>即大面积的缓存失效，大并发请求打崩DB。</p>
<blockquote>
<p>💖解决方法</p>
</blockquote>
<p>1️⃣<strong>参数校验</strong></p>
<p>在接口层增加校验，不合法的参数直接return，比如id&lt;0直接拦截。</p>
<p>2️⃣<strong>布隆过滤器</strong></p>
<p>利用高效的数据结构和算法快速判断出你这个Key是否在数据库中存在，不存在你return就好了，存在你就去查DB刷新KV再return。</p>
<p>3️⃣<strong>缓存空对象</strong></p>
<p>当存储层不命中后，即使返回的空对象也将其缓存起来，同时会设置一个过期时间，之后再访问这个数据将会从缓存中获取，保护数据库。</p>
<h3 id="16-2-💧缓存击穿"><a href="#16-2-💧缓存击穿" class="headerlink" title="16.2 💧缓存击穿"></a>16.2 💧缓存击穿</h3><blockquote>
<p>💭问题说明</p>
</blockquote>
<p>查询的一个key非常热点，在不停地扛着大量的请求，大并发集中对这一个点进行访问，当这个key在失效的瞬间，持续的大并发直接落到了数据库上，就在这个Key的点上击穿了缓存。</p>
<p>即单个key的缓存失效，大并发请求击穿redis直落DB。</p>
<blockquote>
<p>💙解决方法</p>
</blockquote>
<p>设置热点数据永不过期，或者加上互斥锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getData</span><span class="params">(String key)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//从Redis查询数据</span></span><br><span class="line">        String result = getDataByKV(key);</span><br><span class="line">        <span class="comment">//参数校验</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(result)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//获得锁</span></span><br><span class="line">                <span class="keyword">if</span> (reenLock.tryLock()) &#123;</span><br><span class="line">                    <span class="comment">//去数据库查询</span></span><br><span class="line">                    result = getDataByDB(key);</span><br><span class="line">                    <span class="comment">//校验</span></span><br><span class="line">                    <span class="keyword">if</span> (StringUtils.isNotBlank(result)) &#123;</span><br><span class="line">                        <span class="comment">//插进缓存</span></span><br><span class="line">                        setDataToKV(key, result);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//睡一会再拿</span></span><br><span class="line">                    Thread.sleep(<span class="number">100L</span>);</span><br><span class="line">                    result = getData(key);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//释放锁</span></span><br><span class="line">                reenLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="16-3-🌊缓存雪崩"><a href="#16-3-🌊缓存雪崩" class="headerlink" title="16.3 🌊缓存雪崩"></a>16.3 🌊缓存雪崩</h3><blockquote>
<p>💭问题说明</p>
</blockquote>
<p>当redis服务器重启或则大量缓存集中在某一个时间段失效，瞬间Redis跟没有一样，那这个数量级别的请求直接打到数据库几乎是灾难性的</p>
<blockquote>
<p>💚解决方法</p>
</blockquote>
<p>1️⃣<strong>redis高可用</strong></p>
<p>搭建集群，异地多活</p>
<p>2️⃣<strong>限流降级</strong></p>
<p>在缓存失效后，通过加锁或者队列哎控制读数据库写缓存的线程数量</p>
<p>3️⃣<strong>数据预热</strong></p>
<p>在正式部署之前，先把可能的数据预先访问一遍，让可能的数据加载到缓存中。</p>
<p>在即将发生大并发访问写入key的时候，设置不同的缓存时间，让缓存失效的时间点尽量均匀。</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>NoSQL</tag>
        <tag>Cache</tag>
      </tags>
  </entry>
  <entry>
    <title>Regex</title>
    <url>/posts/83c5d7ce/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><br>

<blockquote>
<p>Regex</p>
</blockquote>
<p><strong>正则表达式，Regular Expression</strong></p>
<br>

<blockquote>
<p>为什么需要正则表达式？</p>
</blockquote>
<p><strong>文本的复杂处理</strong></p>
<br>

<blockquote>
<p>正则表达式的优势和用途？</p>
</blockquote>
<ul>
<li><strong>一种强大而灵活的文本处理工具</strong></li>
<li><strong>大部分编程语言、数据库、文本编辑器、开发环境都支持正则表达式</strong></li>
</ul>
<br>

<blockquote>
<p>正则表达式定义：</p>
</blockquote>
<p><strong>一种字符串匹配的模式</strong></p>
<br>

<blockquote>
<p>开发中使用</p>
</blockquote>
<ul>
<li>分析所要匹配的数据，写出测试用的典型数据</li>
<li>在工具软件中进行匹配测试</li>
<li>在程序中调用测试的正则表达式</li>
</ul>
<br>

<a id="more"></a>

<h2 id="2-语法"><a href="#2-语法" class="headerlink" title="2. 语法"></a>2. 语法</h2><br>

<h3 id="2-1-标准字符集合"><a href="#2-1-标准字符集合" class="headerlink" title="2.1 标准字符集合"></a>2.1 标准字符集合</h3><ul>
<li>能够与”多种字符”匹配的表达式</li>
<li>注意区分大小写，大写是相反的意思</li>
</ul>
<table>
<thead>
<tr>
<th align="center">字符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\d</td>
<td align="center">任意一个数字，0-9中的任意一个</td>
</tr>
<tr>
<td align="center">\w</td>
<td align="center">任意一个字母或数字或下划线，也就是A-Z、a-z、0-9、_中任意一个</td>
</tr>
<tr>
<td align="center">\s</td>
<td align="center">包括空格、制表符、换行符等空白字符的其中一个</td>
</tr>
<tr>
<td align="center">.</td>
<td align="center">小数点可以匹配任意一个字符(除了换行符)， 如果要匹配包括”\n”在内的所有字符，一般用<code>[\s\S]</code></td>
</tr>
</tbody></table>
<p>如果要匹配真正的’.’、’+’、’-‘、’\&#39; ， 就要转义，用<code>\.</code>、<code>\+</code>、<code>\-</code>、<code>\\</code></p>
<br>

<h3 id="2-2-自定义字符集合"><a href="#2-2-自定义字符集合" class="headerlink" title="2.2 自定义字符集合"></a>2.2 自定义字符集合</h3><ul>
<li>[]方括号匹配方式，能够匹配方括号中任意一个字符</li>
<li>正则表达式的特殊符号，被包含到中括号中，则失去了特殊意义，除了^、-之外</li>
<li>标准字符集合，除小数点外，如果被包含于中括号，自定义字符集合被包含该集合<ul>
<li>[\d.-+]将匹配：数字、小数点、+、-</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">例如</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">[ab5@]</td>
<td align="center">匹配”a”或”b”或”5”或”@”</td>
</tr>
<tr>
<td align="center">[^abc]</td>
<td align="center">匹配”a”、”b”、”c”之外的任意一个字符</td>
</tr>
<tr>
<td align="center">[f-k]</td>
<td align="center">匹配”f”-“k”之间的任意一个字母</td>
</tr>
<tr>
<td align="center">[^A-F0-3]</td>
<td align="center">匹配”A”-“F”、”0”-“3”之外的任意一个字符</td>
</tr>
</tbody></table>
<br>

<h3 id="2-3-量词"><a href="#2-3-量词" class="headerlink" title="2.3 量词"></a>2.3 量词</h3><ul>
<li>修饰匹配次数的特殊符号</li>
<li>匹配次数中的贪婪模式(匹配字符越多越好，默认)</li>
<li>匹配次数中的非贪婪模式(匹配字符越少越好，在修饰匹配次数的特殊符号后再加上一个”?”号)</li>
</ul>
<table>
<thead>
<tr>
<th align="center">量词</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">{n}</td>
<td align="center">表达式重复n次</td>
</tr>
<tr>
<td align="center">{m,n}</td>
<td align="center">表达式至少重复m次，最多重复n次</td>
</tr>
<tr>
<td align="center">{m,}</td>
<td align="center">表达式至少重复m次</td>
</tr>
<tr>
<td align="center">?</td>
<td align="center">表达式匹配0次或1次，相当于{0,1}</td>
</tr>
<tr>
<td align="center">+</td>
<td align="center">表达式至少出现1次，相当于{1,}</td>
</tr>
<tr>
<td align="center">*</td>
<td align="center">表达式不出现或出现任意次，相当于{0,}</td>
</tr>
</tbody></table>
<p>例如：</p>
<ul>
<li><code>[A-Za-z]+</code>可以匹配单词</li>
</ul>
<p>例如文本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6、7、8、9、</span><br><span class="line">1、2、3、4、5、6、7、8、9、</span><br><span class="line">ab a1b a12b a123b a1234b a12345b </span><br></pre></td></tr></table></figure>

<p><code>(\d、)&#123;1,3&#125;</code>的匹配结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6、7、8、</span><br><span class="line">9、</span><br><span class="line">1、2、3、</span><br><span class="line">4、5、6、</span><br><span class="line">7、8、9、</span><br></pre></td></tr></table></figure>

<p><code>(\d、)&#123;1,3&#125;?</code>的匹配结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6、</span><br><span class="line">7、</span><br><span class="line">8、</span><br><span class="line">9、</span><br><span class="line">1、</span><br><span class="line">2、</span><br><span class="line">3、</span><br><span class="line">4、</span><br><span class="line">5、</span><br><span class="line">6、</span><br><span class="line">7、</span><br><span class="line">8、</span><br><span class="line">9、</span><br></pre></td></tr></table></figure>

<p><code>a\d?b</code>的匹配结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ab</span><br><span class="line">a1b</span><br></pre></td></tr></table></figure>

<p><code>a\d+b</code>的匹配结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a1b</span><br><span class="line">a12b</span><br><span class="line">a123b</span><br><span class="line">a1234b</span><br><span class="line">a12345b</span><br></pre></td></tr></table></figure>

<p><code>a\d-b</code>的匹配结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ab</span><br><span class="line">a1b</span><br><span class="line">a12b</span><br><span class="line">a123b</span><br><span class="line">a1234b</span><br><span class="line">a12345b</span><br></pre></td></tr></table></figure>

<br>

<h3 id="2-4-字符边界"><a href="#2-4-字符边界" class="headerlink" title="2.4 字符边界"></a>2.4 字符边界</h3><table>
<thead>
<tr>
<th align="center">字符</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">^</td>
<td align="center">与字符串开始的地方匹配</td>
</tr>
<tr>
<td align="center">$</td>
<td align="center">与字符串结束的地方匹配</td>
</tr>
<tr>
<td align="center">\b</td>
<td align="center">匹配一个单词边界</td>
</tr>
</tbody></table>
<p><code>\b</code>匹配这样一个位置：前面的字符和后面的字符不全是\w。</p>
<br>

<p>例如文本:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Khighness </span><br><span class="line">Khighness1 Khighness2</span><br><span class="line">3Khighness </span><br><span class="line">4Khighness </span><br><span class="line">Khighness5 Khighness6</span><br><span class="line">7Khighness </span><br><span class="line">8Khighness</span><br></pre></td></tr></table></figure>

<p><code>^K</code>匹配最初的”K”，<code>s$</code>匹配最后的”s”；</p>
<p><code>Khighness\b</code>匹配第1、3、4、6、7行的”Khighness”；</p>
<p><code>\bKhighness</code>匹配第1、2、5行的”Khighness”；</p>
<p><code>\bKhighness\b</code>匹配第1行的”Khighness”。</p>
<br>

<h3 id="2-5-匹配模式"><a href="#2-5-匹配模式" class="headerlink" title="2.5 匹配模式"></a>2.5 匹配模式</h3><ul>
<li>IGNORECASE-忽略大小写模式<ul>
<li>匹配时忽略大小写</li>
<li>默认情况下，正则表达式是要区分大小写的</li>
</ul>
</li>
<li>SINGLELINE-单行模式<ul>
<li>整个文本看做一个字符串，只有一个开头，一个结尾</li>
<li>使小数点”.”可以匹配包含换行符(\n)在内的任意字符</li>
</ul>
</li>
<li>MULTILINE-多行模式<ul>
<li>每行都是一个字符串，都有开头和结尾</li>
<li>在指定了MULTILINE之后，如果需要仅匹配字符串开始和结束为止，可以使用<code>\A</code>和<code>\Z</code></li>
</ul>
</li>
</ul>
<br>

<h3 id="2-7-选择符和分组"><a href="#2-7-选择符和分组" class="headerlink" title="2.7 选择符和分组"></a>2.7 选择符和分组</h3><table>
<thead>
<tr>
<th align="center">表达式</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">分支结构: |</td>
<td align="center">左右两边表达式之间“或”关系，匹配左边或者右边</td>
</tr>
<tr>
<td align="center">捕获组: ()</td>
<td align="center">(1) 在被修饰匹配次数的时候，括号中的表达式可以作为整体被修饰; (2) 取匹配结果的时候，括号中的表达式匹配到的内容可以被单独得到; (3) 每一对括号会分配一个编号，使用()的捕获根据左括号的顺序从1开始自动编号。捕获元素编号为零的第一个捕获是由整个正则表达式模式匹配的文本</td>
</tr>
<tr>
<td align="center">非捕获组: (?:Exception)</td>
<td align="center">一些表达式中，不得不使用()，但又不需要保存()中子表达式匹配的内容，这时可以用非捕获组来抵消使用()带来的副作用</td>
</tr>
</tbody></table>
<ul>
<li>反向引用(\num)<ul>
<li>每一对()会分配一个编号，使用()的捕获模式</li>
</ul>
</li>
</ul>
<p>例如<code>([a-z]&#123;2&#125;)\1</code>可以匹配类似”abab”、”gogo”、”toto”的字符串</p>
<br>

<h3 id="2-8-预搜索-零宽断言"><a href="#2-8-预搜索-零宽断言" class="headerlink" title="2.8 预搜索(零宽断言)"></a>2.8 预搜索(零宽断言)</h3><ul>
<li>只进行子表达式的匹配，匹配内容不计入最终的匹配结果，是零宽度</li>
<li>这个位置应该符合某个条件。判断当前位置的前后字符，是否符合指定的条件，但不匹配前后的字符。是对位置的匹配</li>
<li>正则表达式匹配过程中，如果子表达式匹配到的是字符内容，而非位置，并被保存到最终的匹配结果中，那么久认为这个子表达式是占有字符的；如果子表达式匹配的仅仅是位置，或者匹配的内容并不保存到最终的匹配结果中，那么就认为这个子表达式是零宽度的。占有字符还是零宽度，是针对匹配的内容屎否保存到最终的匹配结果中而言的。</li>
</ul>
<table>
<thead>
<tr>
<th align="center">表达式</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">(?=exp)</td>
<td align="center">断言自身出现的位置的后面能匹配表达式exp</td>
</tr>
<tr>
<td align="center">(?&lt;=exp)</td>
<td align="center">断言自身出现的位置的前面能匹配表达式exp</td>
</tr>
<tr>
<td align="center">(?!exp)</td>
<td align="center">断言此位置的后面不能匹配表达式exp</td>
</tr>
<tr>
<td align="center">(?&lt;exp)</td>
<td align="center">断言此位置的前面不能匹配表达式exp</td>
</tr>
</tbody></table>
<p>例如：</p>
<ul>
<li><p><code>[A-Za-z]+(?=ing)</code>可以匹配所有以”ing”结尾的单词(匹配结果不包含”ing”，<code>[A-Za-z]+ing</code>的匹配结果包含”ing”)</p>
</li>
<li><p><code>(?&lt;=in)[A-Za-z]+</code>可以匹配所有以”in”为前缀的单词(匹配结果不包含”in”，<code>in[A-Za-z]+</code>的匹配结果包含”in”)</p>
</li>
</ul>
<br>

<h2 id="3-验证"><a href="#3-验证" class="headerlink" title="3. 验证"></a>3. 验证</h2><br>

<h3 id="3-1-电话号码验证"><a href="#3-1-电话号码验证" class="headerlink" title="3.1 电话号码验证"></a>3.1 电话号码验证</h3><blockquote>
<p>要求</p>
</blockquote>
<ul>
<li>固定电话号码由数字和”-“构成，电话号码为7到8位</li>
<li>如果固定电话号码中包含有区号，那么区号为三位或四位，首位是0，区号用”-“和其他部分隔开</li>
<li>移动电话号码为11位，第一位和第二位为”13”、”14”、15”、”17”、18”、”19”</li>
</ul>
<br>

<blockquote>
<p>分析：</p>
</blockquote>
<ul>
<li>固定电话号码：<code>0\d&#123;2,3&#125;-\d&#123;7,9&#125;</code></li>
<li>移动电话号码: <code>1[3|4|5|7|8|9]\d&#123;9&#125;</code></li>
<li>合起来就是：<code>^0\d&#123;2,3&#125;-\d&#123;7,9&#125;|1[3|4|5|7|8|9]\d&#123;9&#125;$</code></li>
</ul>
<br>

<h3 id="3-3-电子邮箱验证"><a href="#3-3-电子邮箱验证" class="headerlink" title="3.3 电子邮箱验证"></a>3.3 电子邮箱验证</h3><blockquote>
<p>要求</p>
</blockquote>
<ul>
<li>电子邮箱格式：名称@域名</li>
<li>邮箱名称部分：允许汉字、字母、数字、中划线和下划线</li>
<li>邮箱域名部分：允许字母、数字、英语句号</li>
</ul>
<br>

<blockquote>
<p>分析</p>
</blockquote>
<ul>
<li>邮箱名称表达式：<ul>
<li>汉字<code>[\u4e00-\u9fa5]</code></li>
<li>字母<code>[A-Za-z]</code></li>
<li>数字<code>[0-9]</code></li>
<li>中划线和下划线<code>[-_]</code></li>
<li>综上得到名称表达式<code>[\u4e00-\u9fa5A-Za-z0-9-_]+</code></li>
</ul>
</li>
<li>邮箱域名表达式：<ul>
<li>域名的一般规律为[N级域名].[三级域名].[二级域名].[一级域名]，格式类似为<code>**.**.**.**</code></li>
<li>一级域名只包含字母(如com、top、cn等)，长度为2-4位</li>
<li><code>**</code>部分可以表示为<code>[A-Za-z0-9-_]+</code></li>
<li><code>.**</code>部分可以表示为<code>\.[A-Za-z0-9-_]+</code></li>
<li>零或多个<code>&quot;.**&quot;</code>可以表示为 <code> (\.[A-Za-z0-9-_]+)*</code></li>
<li>一级域名部分<code>.**</code>可以表示为.<code>\.[a-z]&#123;2,4&#125;</code></li>
<li>综上得到域名表达式<code>[A-Za-z0-9-_]+(\.[A-Za-z0-9-_]+)*\.[a-z]&#123;2,4&#125;</code></li>
</ul>
</li>
<li>邮箱最终表达式：<ul>
<li>使用<code>^</code>匹配邮箱最开始的部分，使用<code>$</code>匹配邮箱结束部分以保证邮箱前后不能有其他字符</li>
<li>由”名称@域名”得到最终表达式：<code>[\u4e00-\u9fa5A-Za-z0-9-_]+@[A-Za-z0-9-_]+(\.[A-Za-z0-9-_]+)*\.[a-z]&#123;2,4&#125;</code></li>
<li>简写即为：<code>^[\u4e00-\u9fa5-\w]+@[-\w]+(\.[-\w]+)*\.[a-z]&#123;2,4&#125;$</code></li>
</ul>
</li>
</ul>
<br>

<h2 id="4-使用"><a href="#4-使用" class="headerlink" title="4. 使用"></a>4. 使用</h2><p>Java程序中使用正则表达式，相关类位于<code>java.util.regex</code>包下面</p>
<ul>
<li>类<code>Pattern</code>:<ul>
<li>正则表达四的编译表示形式</li>
<li>建立正则表达式，并启用相应模式：<code>Pattern pattern = Pattern.compile(Regular Expression);</code></li>
</ul>
</li>
<li>类<code>Matcher</code>:<ul>
<li>通过解释<code>Pattern</code>对<code>character squence</code>执行匹配操作的引擎</li>
<li>匹配str字符串：<code>Matcher matcher = pattern.matcher(str);</code></li>
<li>将整个字符串序列与该模式匹配：<code>boolean res1 = matcher.matches();</code></li>
<li>扫描字符串序列，查找与该模式匹配的下一个子序列：<code>boolean res2 = matcher.find();</code></li>
</ul>
</li>
</ul>
<br>

<h3 id="4-1-基本操作"><a href="#4-1-基本操作" class="headerlink" title="4.1 基本操作"></a>4.1 基本操作</h3><blockquote>
<p>代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/7 15:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: 基本操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 正则匹配模式</span></span><br><span class="line">        Pattern pattern = Pattern.compile(<span class="string">&quot;\\w+&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 匹配操作引擎</span></span><br><span class="line">        Matcher matcher = pattern.matcher(<span class="string">&quot;KHighness||ParaK||FlowerK||18236763&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 完整匹配</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------完整匹配----------&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> res = matcher.matches();</span><br><span class="line">        System.out.println(<span class="string">&quot;匹配结果：&quot;</span> + res + <span class="string">&quot;，匹配字符串：&quot;</span> + (res ? matcher.group() : <span class="string">&quot;NULL&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每次操作完引擎中的字符串都会到达末尾，需要重新写</span></span><br><span class="line">        matcher = pattern.matcher(<span class="string">&quot;KHighness||ParaK||FlowerK||18236763&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 子串匹配</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------子串匹配----------&quot;</span>);</span><br><span class="line">        <span class="keyword">boolean</span> res1 = matcher.find();</span><br><span class="line">        System.out.println(<span class="string">&quot;匹配结果：&quot;</span> + res1 + <span class="string">&quot;，匹配字符串：&quot;</span> + (res1 ? matcher.group() : <span class="string">&quot;NULL&quot;</span>));</span><br><span class="line">        <span class="keyword">boolean</span> res2 = matcher.find();</span><br><span class="line">        System.out.println(<span class="string">&quot;匹配结果：&quot;</span> + res2 + <span class="string">&quot;，匹配字符串：&quot;</span> + (res2 ? matcher.group() : <span class="string">&quot;NULL&quot;</span>));</span><br><span class="line">        <span class="keyword">boolean</span> res3 = matcher.find();</span><br><span class="line">        System.out.println(<span class="string">&quot;匹配结果：&quot;</span> + res3 + <span class="string">&quot;，匹配字符串：&quot;</span> + (res3 ? matcher.group() : <span class="string">&quot;NULL&quot;</span>));</span><br><span class="line">        <span class="keyword">boolean</span> res4 = matcher.find();</span><br><span class="line">        System.out.println(<span class="string">&quot;匹配结果：&quot;</span> + res4 + <span class="string">&quot;，匹配字符串：&quot;</span> + (res4 ? matcher.group() : <span class="string">&quot;NULL&quot;</span>));</span><br><span class="line">        <span class="keyword">boolean</span> res5 = matcher.find();</span><br><span class="line">        System.out.println(<span class="string">&quot;匹配结果：&quot;</span> + res5 + <span class="string">&quot;，匹配字符串：&quot;</span> + (res5 ? matcher.group() : <span class="string">&quot;NULL&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环查找</span></span><br><span class="line">        matcher = pattern.matcher(<span class="string">&quot;KHighness||ParaK||FlowerK||18236763&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------循环匹配----------&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.println(matcher.group());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">----------完整匹配----------</span><br><span class="line">匹配结果：false，匹配字符串：NULL</span><br><span class="line">----------子串匹配----------</span><br><span class="line">匹配结果：true，匹配字符串：KHighness</span><br><span class="line">匹配结果：true，匹配字符串：ParaK</span><br><span class="line">匹配结果：true，匹配字符串：FlowerK</span><br><span class="line">匹配结果：true，匹配字符串：<span class="number">18236763</span></span><br><span class="line">匹配结果：false，匹配字符串：NULL</span><br><span class="line">----------循环匹配----------</span><br><span class="line">KHighness</span><br><span class="line">ParaK</span><br><span class="line">FlowerK</span><br><span class="line"><span class="number">18236763</span></span><br></pre></td></tr></table></figure>

<br>

<h3 id="4-2-分组操作"><a href="#4-2-分组操作" class="headerlink" title="4.2 分组操作"></a>4.2 分组操作</h3><blockquote>
<p>代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/7 15:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: 分组操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 正则匹配模式</span></span><br><span class="line">        <span class="comment">// 分组两组匹配：字母和数字</span></span><br><span class="line">        Pattern pattern = Pattern.compile(<span class="string">&quot;([A-Za-z]+)([0-9]+)&quot;</span>);</span><br><span class="line">        <span class="comment">// 匹配操作引擎</span></span><br><span class="line">        Matcher matcher = pattern.matcher(<span class="string">&quot;KHighness18||ParaK23||FlowerK67||KAG63||KAG72&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;-----第%d组-----\n&quot;</span>, index++);</span><br><span class="line">            System.out.println(<span class="string">&quot;group[0]: &quot;</span> + matcher.group(<span class="number">0</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;group[1]: &quot;</span> + matcher.group(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">-----第<span class="number">1</span>组-----</span><br><span class="line"><span class="built_in">group</span>[<span class="number">0</span>]: KHighness18</span><br><span class="line"><span class="built_in">group</span>[<span class="number">1</span>]: KHighness</span><br><span class="line">-----第<span class="number">2</span>组-----</span><br><span class="line"><span class="built_in">group</span>[<span class="number">0</span>]: ParaK23</span><br><span class="line"><span class="built_in">group</span>[<span class="number">1</span>]: ParaK</span><br><span class="line">-----第<span class="number">3</span>组-----</span><br><span class="line"><span class="built_in">group</span>[<span class="number">0</span>]: FlowerK67</span><br><span class="line"><span class="built_in">group</span>[<span class="number">1</span>]: FlowerK</span><br><span class="line">-----第<span class="number">4</span>组-----</span><br><span class="line"><span class="built_in">group</span>[<span class="number">0</span>]: KAG63</span><br><span class="line"><span class="built_in">group</span>[<span class="number">1</span>]: KAG</span><br><span class="line">-----第<span class="number">5</span>组-----</span><br><span class="line"><span class="built_in">group</span>[<span class="number">0</span>]: KAG72</span><br><span class="line"><span class="built_in">group</span>[<span class="number">1</span>]: KAG</span><br></pre></td></tr></table></figure>

<br>

<h3 id="4-3-替换操作"><a href="#4-3-替换操作" class="headerlink" title="4.3 替换操作"></a>4.3 替换操作</h3><blockquote>
<p>代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/7 16:09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: 替换操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 正则匹配模式</span></span><br><span class="line">        Pattern pattern = Pattern.compile(<span class="string">&quot;[0-9]&quot;</span>);</span><br><span class="line">        <span class="comment">// 匹配操作引擎</span></span><br><span class="line">        Matcher matcher = pattern.matcher(<span class="string">&quot;KHighness18||ParaK23||FlowerK67||KAG63||KAG72&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 数字全部替换为##</span></span><br><span class="line">        String newStr = matcher.replaceAll(<span class="string">&quot;#&quot;</span>);</span><br><span class="line">        System.out.println(newStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">KHighness<span class="comment">##||ParaK##||FlowerK##||KAG##||KAG##</span></span><br></pre></td></tr></table></figure>

<br>

<h3 id="4-4-分割操作"><a href="#4-4-分割操作" class="headerlink" title="4.4 分割操作"></a>4.4 分割操作</h3><blockquote>
<p>代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/7 16:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: 分割操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;K18H23I67G63H72N18E23S67S6372&quot;</span>;</span><br><span class="line">        String[] arr = str.split(<span class="string">&quot;\\d+&quot;</span>); <span class="comment">// 以数字为边界进行切割</span></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">K</span>, <span class="type">H</span>, <span class="type">I</span>, <span class="type">G</span>, <span class="type">H</span>, <span class="type">N</span>, <span class="type">E</span>, <span class="type">S</span>, <span class="type">S</span>]</span><br></pre></td></tr></table></figure>

<br>

<h3 id="4-5-爬取腾讯官网所有的超链接"><a href="#4-5-爬取腾讯官网所有的超链接" class="headerlink" title="4.5 爬取腾讯官网所有的超链接"></a>4.5 爬取腾讯官网所有的超链接</h3><blockquote>
<p>代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> top.parak;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/7 16:24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>: 爬取腾讯官网的所有超链接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSpider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过URL获取html</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> urlStr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getURLContent</span><span class="params">(String urlStr)</span> </span>&#123;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(urlStr);</span><br><span class="line">            BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(url.openStream(), Charset.forName(<span class="string">&quot;UTF-8&quot;</span>)));</span><br><span class="line">            String temp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">while</span> ((temp = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stringBuilder.append(temp + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将匹配结果装进list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destStr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> regex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getMatcherSubs</span><span class="params">(String destStr, String regex)</span> </span>&#123;</span><br><span class="line">        Pattern pattern = Pattern.compile(regex);</span><br><span class="line">        Matcher matcher = pattern.matcher(destStr);</span><br><span class="line">        List&lt;String&gt; result = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">            result.add(matcher.group(<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;https://www.tencent.com/zh-cn&quot;</span>;</span><br><span class="line">        WebSpider spider = <span class="keyword">new</span> WebSpider();</span><br><span class="line">        <span class="comment">// 获取超链接标签a的内容 &lt;a\s\S]+?&lt;/a&gt;</span></span><br><span class="line">        <span class="comment">// 获取href的内容 href=\&quot;(.+?)\&quot;</span></span><br><span class="line">        spider.getMatcherSubs(spider.getURLContent(url), <span class="string">&quot;href=\\\&quot;([\\w\\s./:]+?)\\\&quot;&quot;</span>).stream().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">/css/base.css</span><br><span class="line">/css/index.css</span><br><span class="line">https://weibo.com/tencent</span><br><span class="line">https://twitter.com/TencentGlobal</span><br><span class="line">https://www.linkedin.com/company/tencent/</span><br><span class="line">https://careers.tencent.com/</span><br><span class="line">https://join.qq.com/</span><br><span class="line">https://spd.tencent.com/portal</span><br><span class="line">https://ipr.tencent.com/</span><br><span class="line">http://beian.miit.gov.cn/</span><br><span class="line">http://beian.miit.gov.cn/</span><br><span class="line">http://beian.miit.gov.cn/</span><br><span class="line">/css/rem.css</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Regex</tag>
      </tags>
  </entry>
  <entry>
    <title>博弈论</title>
    <url>/posts/12bcd26e/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><center>
    <font face="Kristen ITC" color="#555555" size=3>Khighness、寻找必败态</font><br>
</center>



<h2 id="1-巴什博弈"><a href="#1-巴什博弈" class="headerlink" title="1. 巴什博弈"></a>1. 巴什博弈</h2><br>

<h3 id="1-1-问题"><a href="#1-1-问题" class="headerlink" title="1.1 问题"></a>1.1 问题</h3><blockquote>
<p>两个顶尖聪明的人在玩游戏，有 n 个石子，每个人每次拿 1~m 个石头，拿掉最后一块石头的人就是获胜者。请问先手与后手谁必胜？</p>
</blockquote>
<br>

<a id="more"></a>

<h3 id="1-2-分析"><a href="#1-2-分析" class="headerlink" title="1.2 分析"></a>1.2 分析</h3><blockquote>
<p>分类讨论: </p>
<p>（1）当n ≤ m时，这时先手的人可以一次取走所有的；</p>
<p>（2）当n = m+1时，这时先手无论取走多少个，后手的人都能取走剩下所有的；</p>
<p>（3）当n = k ∗ ( m + 1)时，对于每(m + 1)个石子，先手取i个，后手一定能将剩下的(m + 1 − i)个都取走，因此后手必胜；</p>
<p>（4）当n = k ∗ ( m + 1)  + x ( 0&lt; x&lt; m + 1)时，先手可以先取 x 个，之后的局势就回到了上一种情况，无论后手取多少个，先手都能取走m+1个中剩下的，因此先手必胜。</p>
</blockquote>
<br>

<h3 id="1-3-结论"><a href="#1-3-结论" class="headerlink" title="1.3 结论"></a>1.3 结论</h3><blockquote>
<p><strong>当n % m + 1) == 0时，后手必胜，否则先手必胜。</strong></p>
</blockquote>
<br>

<h3 id="1-4-代码"><a href="#1-4-代码" class="headerlink" title="1.4 代码"></a>1.4 代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BashGame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((n % (m + <span class="number">1</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;后手获胜&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;先手获胜&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="2-尼姆博弈"><a href="#2-尼姆博弈" class="headerlink" title="2. 尼姆博弈"></a>2. 尼姆博弈</h2><br>

<h3 id="2-1-问题"><a href="#2-1-问题" class="headerlink" title="2.1 问题"></a>2.1 问题</h3><blockquote>
<p>两个顶尖聪明的人在玩游戏，有 n 堆石子，第 i 堆有 ai 每个人每次能从一堆石子中取任意多个石子但不能不取，不能取的人输。请问先手与后手谁必胜？</p>
</blockquote>
<br>

<h3 id="2-2-分析"><a href="#2-2-分析" class="headerlink" title="2.2 分析"></a>2.2 分析</h3><blockquote>
<p>（1）当n = 1时，显然先手取走这一堆就能获胜；</p>
<p>（2）当n = 2且a1 != a2时，我们假设a1 &gt; a2，先手可以先在第一堆取走a1-a2个，下一次无论后手取走多少个，先手都可以在另一堆取走相同的个数，因此先手必胜；</p>
<p>（3）当n = 2且a1 == a2时，先手无论取多少个，后手都可以在另一堆取相同的个数，因此后手必胜；</p>
<p>（4）当n &gt;= 3时，问题变得繁琐起来，先找出规律性的结论。</p>
</blockquote>
<br>

<h3 id="2-3-结论"><a href="#2-3-结论" class="headerlink" title="2.3 结论"></a>2.3 结论</h3><blockquote>
<p><strong>当 a1 ^ a2 ^ ··· ^ an =  0 时，后手必胜，否则先手必胜。</strong></p>
<p><strong>证明：</strong></p>
<p>假设当前：a1 ^ a2 ^ ··· ^ an =  0，</p>
<p>先手回合：取走若干个后，</p>
<p>局势变成：a1 ^ a2 ^ ··· ^ an =  K，</p>
<p>即：a1 ^ a2 ^ ··· ^ an ^ K = 0。</p>
<p>假设 K 的最高位1在第 x 位，</p>
<p>那么必然存在 aj (1 &lt; = j &lt;= n) 的 第 x 位为1，</p>
<p>后手回合：只要把 aj 变成 aj ^ K，</p>
<p>就能使得：a1 ^ a2 ^ ··· ^ an =  0。</p>
<p>由于 aj ^ K 使得第 x 位 为0，无论低位是什么，</p>
<p>第 x 位变为0后，aj 整个数一定会变小，即：aj ^ K &lt; aj，</p>
<p>所以后手只需在第 j 堆取走(aj - aj ^ K)个石子即可。</p>
<p>先手每次取完，后手每次取(aj - aj ^ K)，</p>
<p>最后的局势一定是：a1 = a2 = ··· = an = 0，</p>
<p>此时先手无法取了，后手必胜。</p>
<p>反之，当a1 ^ a2 ^ ··· ^ an = K 时，</p>
<p>局势反转，先手每次取(aj - aj ^ K)个即可，先手必胜。</p>
</blockquote>
<br>

<h3 id="2-4-代码"><a href="#2-4-代码" class="headerlink" title="2.4 代码"></a>2.4 代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NimGame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : a) &#123;</span><br><span class="line">            res ^= i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;后手获胜&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;先手获胜&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="3-尼姆Plus博弈"><a href="#3-尼姆Plus博弈" class="headerlink" title="3. 尼姆Plus博弈"></a>3. 尼姆Plus博弈</h2><br>

<h3 id="3-1-问题"><a href="#3-1-问题" class="headerlink" title="3.1 问题"></a>3.1 问题</h3><blockquote>
<p>两个顶尖聪明的人在玩游戏，有 n 堆石子，第 i 堆有 ai 个石子，每个人每次能从 1~d 堆石子中取任意多个石子但不能不取，不能取的人输。请问先手与后手谁必胜？</p>
</blockquote>
<br>

<h3 id="3-2-分析"><a href="#3-2-分析" class="headerlink" title="3.2 分析"></a>3.2 分析</h3><blockquote>
<p>特么太难了啊，呜呜呜我好菜</p>
</blockquote>
<br>

<h3 id="3-3-结论"><a href="#3-3-结论" class="headerlink" title="3.3 结论"></a>3.3 结论</h3><blockquote>
<p><strong>将每堆石子数量用二进制表示，对于二进制的任意一位，如果这一位为1的石子堆数量%(d+1)==0，那么后手必胜，否则先手必胜。</strong></p>
</blockquote>
<br>

<h3 id="3-4-证明"><a href="#3-4-证明" class="headerlink" title="3.4 证明"></a>3.4 证明</h3><blockquote>
<p>只需要证明三点：</p>
<ol>
<li><p>终止局面为先手必败（显然）</p>
</li>
<li><p>任意先手必胜的局面都能转变成先手必败的局面</p>
</li>
<li><p>任意先手必败的局面都不能转变成先手必胜的局面</p>
</li>
</ol>
<p><strong>证明</strong></p>
<p>证明2:</p>
<p>假设最高位%(d+1) != 0有m堆，那么将这些堆的这一位变成0；</p>
<p>假设下一位%(d+1) != 0的位有n个，之前m堆中这一位有a个1和b个0。</p>
<p>（1）如果n &lt;= a，显然将这a中的n个变成0即可；</p>
<p>（2）如果(d+1) - n &lt;= b，那么只要将b个中的(d+1) - n个变成1即可；</p>
<p>因为之前最高位是将1变成0，所以这一位即使由0变1，这堆石子也是减少的；</p>
<p>（3）如果两个都不满足，即a &gt; n &amp;&amp; b &lt; (d + 1 - n)，那么只要将这a堆和m堆之外的(n - a)堆的这一位变成0，</p>
<p>那么总改变堆数为 a + b + (n - a) = b + n &lt; (d + 1) - n + n = d + 1，</p>
<p>即将这一位变成%(d+1) = 0需要改变的总堆数要小于(d+1)，</p>
<p>即可以一次操作完成，然后以此类推就能使每一位都变为%(d+1)=0。</p>
<p>证明3:</p>
<p>因为一次最多操作d堆石子，因此不能将(d+1)堆某一位是1的石子堆的这一位都变为0。</p>
</blockquote>
<br>

<h2 id="4-威佐夫博弈"><a href="#4-威佐夫博弈" class="headerlink" title="4. 威佐夫博弈"></a>4. 威佐夫博弈</h2><br>

<h3 id="4-1-问题"><a href="#4-1-问题" class="headerlink" title="4.1 问题"></a>4.1 问题</h3><blockquote>
<p>两个顶尖聪明的人在玩游戏，有 2 堆石子，每个人每次可以从任意一堆石子中取任意多的石子或者从两堆石子中取同样多的石子，不能取的人输。请问先手与后手谁必胜？</p>
</blockquote>
<br>

<h3 id="4-2-分析"><a href="#4-2-分析" class="headerlink" title="4.2 分析"></a>4.2 分析</h3><blockquote>
<p>威佐夫博弈不同于巴什博弈和尼姆博弈，它的特殊之处在于不能将两堆石子分开分析。</p>
<p><em>下面分析不想看的直接跳过记住结论即可</em></p>
<p>定义先手必输的局势为奇异局势，前几个奇异局势为: (0, 0), (1, 2), (3, 5), (4, 7), (6,10)……</p>
<p>假设 (x, y) 为第 k 个奇异局势</p>
<p>性质：</p>
<ul>
<li>x为前 1···k 个奇异局势中没有出现过的最小正整数，y = x + k (打表找规律)</li>
<li>任何一个自然数都包含在一个且仅有一个奇异局势中</li>
<li>任何操作都会将奇异局势变为非奇异局势</li>
<li>非奇异局势可以通过适当操作变为奇异局势</li>
</ul>
<p>证明这个结论，只需证明：</p>
<ol>
<li>任意自然数都出现过</li>
<li>任意自然数仅出现一次</li>
</ol>
<p>反证法易证。</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/12bcd26e/%E5%A8%81%E4%BD%90%E5%A4%AB%E5%8D%9A%E5%BC%88.jpg" class="" title="XY">

<blockquote>
<p>我们可以将两堆石子看成是棋盘上一个点的纵横坐标，那么游戏切换：</p>
<p>棋盘上有一个点，每次每个人只能将棋子往左或者往下移动任意个格子，不能移动的人输。</p>
<p>将能一步到达(0, 0)的点都染色，那么这些点就是必胜态，再找到横纵坐标之和最小的没被染色的点，</p>
<p>这个点就是下一个必败态，由此画出上图。</p>
</blockquote>
<br>

<h3 id="4-3-结论"><a href="#4-3-结论" class="headerlink" title="4.3 结论"></a>4.3 结论</h3><blockquote>
<p><strong>根据<a href="https://baike.baidu.com/item/%E8%B4%9D%E8%92%82%E5%AE%9A%E7%90%86/2677437?fr=aladdin">Betty定理</a>，第K个局势就是(⌊(1+√5)/2 *k⌋, ⌊(3+√5)/2 *k⌋)，其中(1+√5)/2=1.618是黄金分割系数。</strong></p>
<p><strong>因此，局势(x, y)满足(y - x)*(1+√5)/2)=x时，先手必败，否则先手必胜。</strong></p>
</blockquote>
<br>

<h3 id="4-4-代码"><a href="#4-4-代码" class="headerlink" title="4.4 代码"></a>4.4 代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WizovGame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 保证 a &lt;= b</span></span><br><span class="line">        <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = b;</span><br><span class="line">            b = a;</span><br><span class="line">            a = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断 a == (b - a) * 黄金分割系数 (向上取整)</span></span><br><span class="line">        <span class="keyword">if</span> ( a == (<span class="keyword">int</span>) Math.ceil( (b - a) * (<span class="number">1</span> + Math.sqrt(<span class="number">5.0</span>)) / <span class="number">2</span>) ) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;后手获胜&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;先手获胜&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="5-斐波那契博弈"><a href="#5-斐波那契博弈" class="headerlink" title="5. 斐波那契博弈"></a>5. 斐波那契博弈</h2><br>

<h3 id="5-1-问题"><a href="#5-1-问题" class="headerlink" title="5.1 问题"></a>5.1 问题</h3><blockquote>
<p>两个顶尖聪明的人在玩游戏，有一堆石子，数量为n，两个人轮流取石子，规则如下：</p>
<p>（1）先手不能在第一次把所有的石子取完，至少取一颗；</p>
<p>（2）之后每次可以取的石子数至少为1，至多为对手刚取的石子数的2倍；</p>
<p>不能取的人输。请问先手与后手谁必胜？</p>
</blockquote>
<br>

<h3 id="5-2-结论"><a href="#5-2-结论" class="headerlink" title="5.2 结论"></a>5.2 结论</h3><blockquote>
<p><strong>当n为Fibonacci数的时候，后手必胜，否则先手必胜。</strong></p>
</blockquote>
<br>

<h3 id="5-3-证明"><a href="#5-3-证明" class="headerlink" title="5.3 证明"></a>5.3 证明</h3><blockquote>
<p>数学归纳法：</p>
<p>假设石子数量n = F[i]（斐波那契数列中的第i项{1, 1, 2, 3, 5······}）</p>
<p>（1）当 i = 2 时，n = 2，显然先手取一个，后手必胜</p>
<p>（2）当 i &gt; 2 时，假设当 i &lt;= k 时结论成立。</p>
<p>当i = k + 1时，F[i] = F[k] + F[k-1]，将石子分成两部分来看。</p>
<p>假设先手第一次取 x 个，后手第一次取 y 个。</p>
<p>1）如果 x &lt; F[k-1] / 3，因为 n = F[k-1] 时已经证明后手一定能取到 F[k-1] 个中的最后一个，</p>
<p>所以问题转化成了有 F[k] 个中的最后一个，这个也已经证明后手一定能取到F[k]中的最后一个。</p>
<p>所以后手必胜。</p>
<p>2）如果 F[k-1] / 3 &lt;= x &lt;= F[k]时，则F[k-1]中剩余数量小于2x，后手可以直接取完，</p>
<p>（如果不选择一次性取完，慢慢磨最终也会是所证明的F[k-1]的情况，后手最后取完）</p>
<p>即后手取了F[k-1]-x个，即y &lt;= 2/3 * F[k-1]。比较 2/3 * F[k-1] 与 1/2 * F[k] 的大小，</p>
<p>即比较4 * [k-1] 与 3 * F[k] 的大小：</p>
<p>由于 F[k] 函数递增 且 F[k] = F[k-1] + F[k-2]易知：2 * F[k-2] &lt; F[k] &lt; 2 * F[k-1]，</p>
<p>因而 3 * F[k] = 3 * F[k-1] + 3 * F[k-2] &gt; 3 * F[k-1] + 3 / 2 * F[k-1] &gt; 4 * F[k-1]。</p>
<p>也就是说，在后手取完F[k-1]那一堆石子之后，先手不能一次性取完F[k]那一堆石子，</p>
<p>于是问题最终演变成了F[k]的状况，后手最后取完。</p>
<p>3）如果 x &gt; F[k-1]，因为F[k] &lt; 2 * F[k-1]，后手可以一次性取完。</p>
<p>综上三种情况，当 i &lt;= k 时结论成立，那么当 n = k+1 时结论也成立。</p>
</blockquote>
<br>

<h3 id="5-4-代码"><a href="#5-4-代码" class="headerlink" title="5.4 代码"></a>5.4 代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FibonacciGame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fibnacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 递归计算，慢</span></span><br><span class="line"><span class="comment">//        if (n == 1 || n == 2)</span></span><br><span class="line"><span class="comment">//            return 1;</span></span><br><span class="line"><span class="comment">//        else</span></span><br><span class="line"><span class="comment">//            return fibnacci(n - 1) + fibnacci(n - 2);</span></span><br><span class="line">        <span class="comment">// 公式计算，快</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) Math.floor( ( Math.pow((<span class="number">1</span> + Math.sqrt(<span class="number">5</span>)) / <span class="number">2</span>, n)  - Math.pow((<span class="number">1</span> - Math.sqrt(<span class="number">5</span>)) / <span class="number">2</span>, n) ) / Math.sqrt(<span class="number">5</span>) );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; fibnacci(i) &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fibnacci(i+<span class="number">1</span>) == n) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;后手获胜&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;先手获胜&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Game</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据</title>
    <url>/posts/ec060e02/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-安装CentOS7"><a href="#1-安装CentOS7" class="headerlink" title="1. 安装CentOS7"></a>1. 安装CentOS7</h2><h3 id="1-下载镜像"><a href="#1-下载镜像" class="headerlink" title="1. 下载镜像"></a>1. 下载镜像</h3><blockquote>
<p>ISO: <a href="https://www.centos.org/download/">CentOS7 X86_64</a></p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915192222693.png" class="" title="image-20200915192222693">



<a id="more"></a>



<h3 id="2-安装系统"><a href="#2-安装系统" class="headerlink" title="2. 安装系统"></a>2. 安装系统</h3><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914201854650.png" class="" title="image-20200914201854650">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914201950325.png" class="" title="image-20200914201950325">



<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914202216056.png" class="" title="image-20200914202216056">



<h3 id="3-虚拟机完成"><a href="#3-虚拟机完成" class="headerlink" title="3. 虚拟机完成"></a>3. 虚拟机完成</h3><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914204312121.png" class="" title="image-20200914204312121">



<h3 id="4-安装Docker"><a href="#4-安装Docker" class="headerlink" title="4. 安装Docker"></a>4. 安装Docker</h3><blockquote>
<p>Docker要求CentOS系统的内核版本高于 3.10，查看CentOS版本是否支持 Docker</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure>

<p><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="Hadoop%5Cimage-20200922202458823.png" alt="image-20200922202458823"></p>
<blockquote>
<p>确保yum包更新到最新</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200922202118583.png" class="" title="image-20200922202118583">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200922202544937.png" class="" title="image-20200922202544937">

<blockquote>
<p>安装过Docker则卸载旧版本</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker  docker-common docker-selinux docker-engine</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200922204747806.png" class="" title="image-20200922204747806">

<blockquote>
<p>安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200922203530629.png" class="" title="image-20200922203530629">

<blockquote>
<p>设置yum源（使用阿里云地址）</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200922203620500.png" class="" title="image-20200922203620500">

<blockquote>
<p>可以查看所有仓库中所有的docker版本，并选择特定版本安装</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum list docker-ce --showduplicates | sort -r</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200922203726104.png" class="" title="image-20200922203726104">

<blockquote>
<p>安装最新版本的 Docker Engine-Community 和 containerd</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200922204125206.png" class="" title="image-20200922204125206">

<blockquote>
<p>验证是否安装成功</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200922204248819.png" class="" title="image-20200922204248819">

<blockquote>
<p>启动Docker</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200922204613291.png" class="" title="image-20200922204613291">

<blockquote>
<p>运行Hello World</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200922204637363.png" class="" title="image-20200922204637363">



<h2 id="2-搭建Hadoop集群"><a href="#2-搭建Hadoop集群" class="headerlink" title="2. 搭建Hadoop集群"></a>2. 搭建Hadoop集群</h2><h3 id="1-下载并配置JDK"><a href="#1-下载并配置JDK" class="headerlink" title="1. 下载并配置JDK"></a>1. 下载并配置JDK</h3><blockquote>
<p>下载 jdk</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install java-1.8.0-openjdk* -y</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914205909499.png" class="" title="image-20200914205909499">

<blockquote>
<p>获取JAVA_HOME</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dirname $(readlink $(readlink $(which java))) </span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置环境变量</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el7_8.x86_64</span><br><span class="line">export JRE_HOME=$JAVA_HOME/jre</span><br><span class="line">export CLASSPATH=$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914210707353.png" class="" title="image-20200914210707353">

<blockquote>
<p>查看JAVA_HOME</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br><span class="line">echo $JAVA_HOME</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200930135506971.png" class="" title="image-20200930135506971">

<blockquote>
<p>测试</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200930135637993.png" class="" title="image-20200930135637993">



<h3 id="2-配置Hosts列表"><a href="#2-配置Hosts列表" class="headerlink" title="2. 配置Hosts列表"></a>2. 配置Hosts列表</h3><p>由于两台虚拟机是同一台虚拟机复制而来，所以必须先重新生成Mac地址</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200930135951474.png" class="" title="image-20200930135951474">

<blockquote>
<p>master 和 slave 禁用防火墙</p>
</blockquote>
<p>停止防火墙 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure>

<p>禁用防火墙</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200913225928453.png" class="" title="image-20200913225928453">

<blockquote>
<p>master 和 slave 修改主机名</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;sysconfig&#x2F;network</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200913230804529.png" class="" title="image-20200913230804529">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200913230917724.png" class="" title="image-20200913230917724">

<blockquote>
<p>确认修改</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200913231003539.png" class="" title="image-20200913231003539">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200913231047961.png" class="" title="image-20200913231047961">

<blockquote>
<p>master 和 slave 执行 ifconfig 查询 IP</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914215339951.png" class="" title="image-20200914215339951">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914215731073.png" class="" title="image-20200914215731073">

<blockquote>
<p> master 和 slave 将IP地址和主机名分别添加至/etc/hosts中</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914215942690.png" class="" title="image-20200914215942690">

<blockquote>
<p>master 和 slave 之间互ping</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914220102245.png" class="" title="image-20200914220102245">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914220213547.png" class="" title="image-20200914220213547">



<h3 id="3-集群ssh免密登录"><a href="#3-集群ssh免密登录" class="headerlink" title="3. 集群ssh免密登录"></a>3. 集群ssh免密登录</h3><p>对master操作：</p>
<blockquote>
<p>master 生成公钥</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914220829338.png" class="" title="image-20200914220829338">

<blockquote>
<p>将公钥追加到授权列表</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914221008829.png" class="" title="image-20200914221008829">

<blockquote>
<p>修改authorized_keys文件的权限</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 600 ~/.ssh/authorized_keys </span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914221036706.png" class="" title="image-20200914221036706">

<blockquote>
<p>将authorized_keys文件复制到slave节点</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp ~/.ssh/authorized_keys parak@slave:~/.ssh</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914221427275.png" class="" title="image-20200914221427275">

<blockquote>
<p>查看slave的.ssh的目录</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914221514758.png" class="" title="image-20200914221514758">

<blockquote>
<p>修改master和slave的SSH配置</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su root</span><br><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914221856072.png" class="" title="image-20200914221856072">

<blockquote>
<p>使用ssh-add指令将私钥加入并重启sshd服务</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br><span class="line">service sshd restart</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试免密登录</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914223950719.png" class="" title="image-20200914223950719">

<p>ssh登录依然需要密码，我们可以去看一下master的日志文件</p>
<blockquote>
<p>cat  var/log/secure </p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200916160625256.png" class="" title="image-20200916160625256">

<blockquote>
<p><strong>原因</strong></p>
<p>sshd为了安全，对属主的目录和文件权限有所要求。</p>
<p>如果权限不对，则ssh的免密码登陆不生效。</p>
</blockquote>
<blockquote>
<p><strong>解决</strong></p>
<p>将.ssh目录的权限改为755</p>
<p>id_rsa.pub和authorized_keys权限改为644</p>
<p>id_rsa权限必须为600</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 755 .ssh</span><br><span class="line">cd .ssh</span><br><span class="line">chmod 644 id_rsa.pub authorized_keys</span><br><span class="line">chmod 600 id_rsa</span><br></pre></td></tr></table></figure>

<blockquote>
<p>再次测试免密登录</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914224837430.png" class="" title="image-20200914224837430">



<h3 id="4-下载并配置Hadoop"><a href="#4-下载并配置Hadoop" class="headerlink" title="4. 下载并配置Hadoop"></a>4. 下载并配置Hadoop</h3><blockquote>
<p>下载：<a href="https://www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-3.3.0/hadoop-3.3.0.tar.gz">hadoop-2.9.2</a>    选择bsfu的北京外国语学院的镜像, 速度流批</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914211714263.png" class="" title="image-20200914211714263">

<blockquote>
<p>解压下载的压缩包</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf hadoop-2.3.2.tar.gz</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914211633182.png" class="" title="image-20200914211633182">

<blockquote>
<p>修改文件权限</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 777 hadoop-env.sh core-site.xml hdfs-site.xml yarn-site.xml mapred-site.xml slaves</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914212318855.png" class="" title="image-20200914212318855">

<blockquote>
<p>配置环境变量</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gedit /home/parak/hadoop/hadoop-2.9.2/etc/hadoop/hadoop-env.sh</span><br><span class="line"></span><br><span class="line">添加</span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el7_8.x86_64</span><br><span class="line">export HADOOP_HOME=/home/parak/hadoop/hadoop-2.9.2</span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$&#123;HADOOP_HOME&#125;/bin:$&#123;HADOOP_HOME&#125;/sbin:$PATH</span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置核心组件  <strong><em>core-site.xml</em></strong></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/parak/hadoopdata<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914213003704.png" class="" title="image-20200914213003704">

<blockquote>
<p>配置文件系统  <strong><em>hdfs.site.xml</em></strong></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914213047280.png" class="" title="image-20200914213047280">

<blockquote>
<p>配置文件系统  <strong><em>yarn-site.xml</em></strong></p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">  you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">  See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">  limitations under the License. See accompanying LICENSE file.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Site specific YARN configuration properties --&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18040<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18030<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.resource-tracker.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18025<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.admin.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18141<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">value</span>&gt;</span>master:18088<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914213215770.png" class="" title="image-20200914213215770">

<blockquote>
<p>配置计算框架  <strong><em>mapred-site.xml</em></strong></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">  Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="line">  you may not use this file except in compliance with the License.</span><br><span class="line">  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"></span><br><span class="line">  Unless required by applicable law or agreed to in writing, software</span><br><span class="line">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span><br><span class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line">  See the License for the specific language governing permissions and</span><br><span class="line">  limitations under the License. See accompanying LICENSE file.</span><br><span class="line"><span class="meta">--&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">	&lt;property&gt;</span><br><span class="line">		&lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">		&lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">	&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>



<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914213254714.png" class="" title="image-20200914213254714">

<blockquote>
<p>在master节点配置slaves文件 </p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914225547865.png" class="" title="image-20200914225547865">



<h3 id="5-启动Hadoo集群"><a href="#5-启动Hadoo集群" class="headerlink" title="5. 启动Hadoo集群"></a>5. 启动Hadoo集群</h3><blockquote>
<p>切换用户  <strong><em>parak</em></strong></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su parak</span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置Hadoop启动的系统环境变量</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd</span><br><span class="line">gedit ~/.bash_profile</span><br><span class="line"></span><br><span class="line">添加：</span><br><span class="line"><span class="meta">#</span><span class="bash">HADOOP</span></span><br><span class="line">export HADOOP_HOME=/home/parak/hadoop/hadoop-2.9.2</span><br><span class="line">export PATH=$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$PATH</span><br><span class="line"></span><br><span class="line">执行：</span><br><span class="line">source ~/.bash_profile</span><br><span class="line"></span><br><span class="line">验证：</span><br><span class="line">echo $&#123;HADOOP_HOME&#125;</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914213558226.png" class="" title="image-20200914213558226">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914230053210.png" class="" title="image-20200914230053210">

<blockquote>
<p>创建数据目录  <strong><em>hadoopdata</em></strong></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /home/parak/hadoopdata</span><br><span class="line">chmod 777 hadoopdata/</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914225858363.png" class="" title="image-20200914225858363">

<blockquote>
<p>格式化文件系统</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914230347627.png" class="" title="image-20200914230347627">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914230450.png" class="" title="image-20200914230450">

<blockquote>
<p>启动Hadoop</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sbin/start-all.sh</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914232331519.png" class="" title="image-20200914232331519">

<blockquote>
<p>查看进程</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jps</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914232056642.png" class="" title="image-20200914232056642">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914232211741.png" class="" title="image-20200914232211741">



<blockquote>
<p>进入 <strong>FireFox</strong> 输入：<a href="http://master:50070/">http://master:50070/</a>   </p>
<p>检查 <strong>namenode</strong> 和 <strong>datanode</strong> 是否正常</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914232603284.png" class="" title="image-20200914232603284">



<blockquote>
<p>进入 <strong>FireFox</strong> 输入：<a href="http://master:18088/">http://master:18088/</a></p>
<p>检查 <strong>Yarn</strong> 是否正常</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200914232824073.png" class="" title="image-20200914232824073">



<blockquote>
<p>运行PI实例检查Hadoop集群是否搭建成功</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/hadoop/hadoop-2.9.2/share/hadoop/mapreduce/</span><br><span class="line">hadoop jar hadoop-mapreduce-examples-2.9.2.jar pi 10 10</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915083538083.png" class="" title="image-20200915083538083">

<blockquote>
<p> <strong>报错</strong>：未找到主机路由</p>
<p><strong>分析</strong>：slave的防火墙没有关闭</p>
</blockquote>
<blockquote>
<p>检查slave的防火墙</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915084136061.png" class="" title="image-20200915084136061">

<blockquote>
<p>关闭且禁用防火墙</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915084354244.png" class="" title="image-20200915084354244">

<blockquote>
<p>再次运行PI实例</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915084909905.png" class="" title="image-20200915084909905">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915084933355.png" class="" title="image-20200915084933355">

<p>可以看到运行结果：PI = 3.20000000000000000000</p>
<p><strong>综上，集群正常启动</strong></p>
<blockquote>
<p>关闭Hadoop集群</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915085606053.png" class="" title="image-20200915085606053">





<h2 id="3-分布式文件系统HDFS上的操作"><a href="#3-分布式文件系统HDFS上的操作" class="headerlink" title="3. 分布式文件系统HDFS上的操作"></a>3. 分布式文件系统HDFS上的操作</h2><h3 id="1-利用Shell命令与HDFS进行交互"><a href="#1-利用Shell命令与HDFS进行交互" class="headerlink" title="1. 利用Shell命令与HDFS进行交互"></a>1. 利用Shell命令与HDFS进行交互</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs    //适用于任何不同的文件系统，比如本地文件系统和HDFS文件系统</span><br><span class="line">hadoop dfa   //只能适用于HDFS文件系统</span><br><span class="line">hdfs dfs     //跟hadoop dfs的命令作用一样，也只能适用于HDFS文件系统</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915091307833.png" class="" title="image-20200915091307833">

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -help put</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915091423474.png" class="" title="image-20200915091423474">



<h4 id="1-目录操作"><a href="#1-目录操作" class="headerlink" title="(1) 目录操作"></a>(1) 目录操作</h4><blockquote>
<p>在HDFS中为parak用户创建一个用户目录，命令如下：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -mkdir -p /user/parak</span><br></pre></td></tr></table></figure>

<blockquote>
<p>可以使用如下命令显示HDFS中/user目录下的内容：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -ls /user</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915091936795.png" class="" title="image-20200915091936795">

<blockquote>
<p>创建/user/parak/input目录</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -mkdir -p /user/parak/input</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看/user/parak/input目录是否创建成功</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -ls /user/parak</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915094202790.png" class="" title="image-20200915094202790">

<blockquote>
<p>创建/input目录</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -mkdir -p /input</span><br></pre></td></tr></table></figure>

<blockquote>
<p>删除/input目录</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -rm -r /input</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看/input目录是否删除成功</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -ls /</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915094415033.png" class="" title="image-20200915094415033">



<h4 id="2-文件操作"><a href="#2-文件操作" class="headerlink" title="(2) 文件操作"></a>(2) 文件操作</h4><p>​       在实际应用中，经常需要从本地文件系统向HDFS中上传文件，或者把HDFS中的文件下载到本地文件系统中。</p>
<blockquote>
<p>首先，使用vim编辑器，在本地Linux文件系统的“/home/parak/”目录下创建一个文件myLocalFile.txt，里面输入：</p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Hadoop</span><br><span class="line">MapReduce</span><br><span class="line">Spark</span><br><span class="line">Khighness</span><br></pre></td></tr></table></figure>

<blockquote>
<p>然后，把本地文件系统的“/home/parak/myLocalFile.txt”上传到HDFS中的当前用户目录的input目录下，也就是上传到HDFS的“/user/parak/input/”目录下：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -put /home/parak/myLocalFile.txt /user/parak/input</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看一下文件是否成功上传到HDFS中：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -ls /user/parak/input</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看HDFS中的myLocalFile.txt这个文件的内容</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -cat /user/parak/input/myLocalFile.txt</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915094905208.png" class="" title="image-20200915094905208">

<blockquote>
<p>把HDFS中的myLocalFile.txt文件下载到本地文件系统中的“/home/parak/下载/”这个目录下</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -get /user/parak/input/myLocalFile.txt /home/parak/下载</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在本地查看下载下来的文件myLocalFile.txt</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd 下载</span><br><span class="line">ll</span><br><span class="line">cat myLocalFile.txt</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915100241999.png" class="" title="image-20200915100241999">

<blockquote>
<p>把HDFS的“/user/parak/input/myLocalFile.txt”文件，拷贝到HDFS的另外一个目录“/input”中</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hadoop fs -mkdir /input</span><br><span class="line">hadoop fs -cp /user/parak/input/myLocalFile.txt /input</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915100148440.png" class="" title="image-20200915100148440">



<h3 id="2-利用Web界面管理HDFS"><a href="#2-利用Web界面管理HDFS" class="headerlink" title="2. 利用Web界面管理HDFS"></a>2. 利用Web界面管理HDFS</h3><blockquote>
<p>在本机Chorme输入 <a href="http://192.168.117.141:50070/">http://192.168.117.141:50070</a> , 即可看到HDFS的Web管理界面</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915093904228.png" class="" title="image-20200915093904228">





<h2 id="4-分布式文件系统HDFS上的编程实践"><a href="#4-分布式文件系统HDFS上的编程实践" class="headerlink" title="4. 分布式文件系统HDFS上的编程实践"></a>4. 分布式文件系统HDFS上的编程实践</h2><h3 id="1-安装Eclipse"><a href="#1-安装Eclipse" class="headerlink" title="1. 安装Eclipse"></a>1. 安装Eclipse</h3><h4 id="1-官网下载安装包"><a href="#1-官网下载安装包" class="headerlink" title="(1) 官网下载安装包"></a>(1) 官网下载安装包</h4><blockquote>
<p>进入FireFox打开下载: <a href="http://www.eclipse.org/downloads/packages/release/neon/1a/eclipse-ide-java-ee-developers">eclipe</a></p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915190751901.png" class="" title="image-20200915190751901">

<blockquote>
<p>或者</p>
<p>百度网盘下载</p>
<p>链接: <a href="https://pan.baidu.com/s/1P4vDgBEj_eOSakabM93rew">https://pan.baidu.com/s/1P4vDgBEj_eOSakabM93rew</a></p>
<p>密码: eujp</p>
</blockquote>
<h4 id="2-解压安装包"><a href="#2-解压安装包" class="headerlink" title="(2) 解压安装包"></a>(2) 解压安装包</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar xzvf eclipse-inst-linux64.tar.gz </span><br><span class="line">cd eclipse-installer/</span><br><span class="line">ll</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915191250751.png" class="" title="image-20200915191250751">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915191446018.png" class="" title="image-20200915191446018">

<h4 id="3-安装Eclipse-For-JavaEE"><a href="#3-安装Eclipse-For-JavaEE" class="headerlink" title="(3) 安装Eclipse For JavaEE"></a>(3) 安装Eclipse For JavaEE</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">eclipse-inst.ini</span><br></pre></td></tr></table></figure>




<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915191721107.png" class="" title="image-20200915191721107.png">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915191841247.png" class="" title="image-20200915191841247.png">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915192946961.png" class="" title="image-20200915192946961.png">



<h4 id="4-创建桌面快捷方式"><a href="#4-创建桌面快捷方式" class="headerlink" title="(4) 创建桌面快捷方式"></a>(4) 创建桌面快捷方式</h4><blockquote>
<p>1、切换root身份：su root</p>
<p>2、进入usr/share/applications目录：cd /usr/share/applications</p>
<p>3、创建eclipase.desktop文件：touch eclipase.desktop</p>
<p>4、输入以下内容后保存：vi eclipase.desktop</p>
<p>5、最后将快捷方式复制到桌面，并添加信任即可</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name&#x3D;Eclipse</span><br><span class="line">Exec&#x3D;&#x2F;home&#x2F;parak&#x2F;eclipse&#x2F;eclipse-j2e&#x2F;eclipse&#x2F;eclipse</span><br><span class="line">Type&#x3D;Application</span><br><span class="line">Icon&#x3D;&#x2F;home&#x2F;parak&#x2F;eclipse&#x2F;eclipse-j2e&#x2F;eclipse&#x2F;icon.xpm</span><br><span class="line">Terminal&#x3D;false</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915195019210.png" class="" title="image-20200915195019210">



<h3 id="2-创建eclipse工程"><a href="#2-创建eclipse工程" class="headerlink" title="2. 创建eclipse工程"></a>2. 创建eclipse工程</h3><blockquote>
<p>双击eclipse桌面快捷方式</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915195625107.png" class="" title="image-20200915195625107">

<blockquote>
<p>进入eclipseIDE</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915195720416.png" class="" title="image-20200915195720416">

<blockquote>
<p>点击：File —&gt; Project —&gt; Java Project</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915200231455.png" class="" title="image-20200915200231455">

<blockquote>
<p>设置JRE</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915200448059.png" class="" title="image-20200915200448059">

<blockquote>
<p>添加JAR</p>
</blockquote>
<ul>
<li><strong>/home/parak/hadoop/hadoop-2.9.2/share/hadoop/common/</strong>:  <strong>hadoop-common-2.9.2.jar</strong>和<strong>hadoop-nfs-2.9.2.jar</strong></li>
<li><strong>/home/parak/hadoop/hadoop-2.9.2/share/hadoop/common/</strong>:  <strong>lib</strong>目录下的所有jar包</li>
<li><strong>/home/parak/hadoop/hadoop-2.9.2/share/hadoop/hdfs/</strong>:  <strong>hadoop-hdfs-2.9.2.jar</strong>和<strong>hadoop-hdfs-nfs-2.9.2.jar</strong></li>
<li><strong>/home/parak/hadoop/hadoop-2.9.2/share/hadoop/hdfs/</strong>:  <strong>lib</strong>目录下的所有jar包</li>
</ul>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915202106984.png" class="" title="image-20200915202106984">

<blockquote>
<p>点击Finish，点击Open Perspective，并且勾选Remember my decision</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915202239806.png" class="" title="image-20200915202239806">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915202452808.png" class="" title="image-20200915202452808">



<h3 id="3-编写一个Java应用程序检测HDFS中是否存在一个文件"><a href="#3-编写一个Java应用程序检测HDFS中是否存在一个文件" class="headerlink" title="3. 编写一个Java应用程序检测HDFS中是否存在一个文件"></a>3. 编写一个Java应用程序检测HDFS中是否存在一个文件</h3><h4 id="1-编写Java程序"><a href="#1-编写Java程序" class="headerlink" title="(1) 编写Java程序"></a>(1) 编写Java程序</h4><blockquote>
<p>右击HDFSExample —&gt; New —&gt; Class</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915203644447.png" class="" title="image-20200915203644447">

<blockquote>
<p>Name = HDFSFileIfExist，然后Finish</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915203811679.png" class="" title="image-20200915203811679">

<blockquote>
<p>编写代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> parak</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>   2020-9-15 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HDFSFileIfExist</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            String fileName = <span class="string">&quot;/user/parak/input/myLocalFile.txt&quot;</span>;</span><br><span class="line">            Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">            conf.set(<span class="string">&quot;fs.defaultFS&quot;</span>, <span class="string">&quot;hdfs://master:9000&quot;</span>);</span><br><span class="line">            conf.set(<span class="string">&quot;fs.hdfs.impl&quot;</span>, <span class="string">&quot;org.apache.hadoop.hdfs.DistributedFileSystem&quot;</span>);</span><br><span class="line">            FileSystem fs = FileSystem.get(conf);</span><br><span class="line">            <span class="keyword">if</span>(fs.exists(<span class="keyword">new</span> Path(fileName)))&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;文件存在&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-运行程序"><a href="#2-运行程序" class="headerlink" title="(2) 运行程序"></a>(2) 运行程序</h4><blockquote>
<p>启动Hadoop集群</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915204824967.png" class="" title="image-20200915204824967">

<blockquote>
<p>运行程序</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915205051079.png" class="" title="image-20200915205051079">

<blockquote>
<p>运行结果</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915205218013.png" class="" title="image-20200915205218013">

<h4 id="3-部署到Hadoop平台上运行"><a href="#3-部署到Hadoop平台上运行" class="headerlink" title="(3) 部署到Hadoop平台上运行"></a>(3) 部署到Hadoop平台上运行</h4><blockquote>
<p>在hadoop安装目录下新建myapp目录，存放Hadoop应用程序</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir ~/hadoop/hadoop-2.9.2/myapp</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915205811634.png" class="" title="image-20200915205811634">

<blockquote>
<p>右击HDFSExample —&gt; Export —&gt; Java —&gt; Runnable JAR file —&gt; Next</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915210022617.png" class="" title="image-20200915210022617">

<blockquote>
<p>Lauch configuration: HDFSFileIfExist -HDFSExsmple</p>
<p>Export destination: /home/parak/hadoop/hadoop-2.9.2/myapp/HDFSExample.jar</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915210640358.png" class="" title="image-20200915210640358">

<blockquote>
<p>出现警告，选择OK</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915210911473.png" class="" title="image-20200915210911473">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915211215820.png" class="" title="image-20200915211215820">

<blockquote>
<p>查看myapp中生成的HDFSExample.jar文件</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915211618901.png" class="" title="image-20200915211618901">

<blockquote>
<p>运行程序</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar ~/hadoop/hadoop-2.9.2/myapp/HDFSExample.jar </span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915211802010.png" class="" title="image-20200915211802010">



<h3 id="4-编写一个Java应用程序读-写HDFS文件"><a href="#4-编写一个Java应用程序读-写HDFS文件" class="headerlink" title="4. 编写一个Java应用程序读/写HDFS文件"></a>4. 编写一个Java应用程序读/写HDFS文件</h3><h4 id="1-读取HDFS文件程序"><a href="#1-读取HDFS文件程序" class="headerlink" title="(1) 读取HDFS文件程序"></a>(1) 读取HDFS文件程序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataInputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> parak</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-9-15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HDFSReadFile</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">			conf.set(<span class="string">&quot;fs.defaultFS&quot;</span>, <span class="string">&quot;hdfs://master:9000&quot;</span>);</span><br><span class="line">			conf.set(<span class="string">&quot;fs.hdfs.impl&quot;</span>,</span><br><span class="line">					<span class="string">&quot;org.apache.hadoop.hdfs.DistributedFileSystem&quot;</span>);</span><br><span class="line">			FileSystem fs = FileSystem.get(conf);</span><br><span class="line">			Path file = <span class="keyword">new</span> Path(<span class="string">&quot;/user/parak/input/myLocalFile.txt&quot;</span>);</span><br><span class="line">			FSDataInputStream getIt = fs.open(file);</span><br><span class="line">			BufferedReader d = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(getIt));</span><br><span class="line">			String content = <span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">while</span>((content = d.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">				System.out.println(content);</span><br><span class="line">			&#125;</span><br><span class="line">			d.close(); <span class="comment">// 关闭文件</span></span><br><span class="line">			fs.close(); <span class="comment">// 关闭hdfs</span></span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915213406899.png" class="" title="image-20200915213406899">

<h4 id="2-写HDFS文件程序"><a href="#2-写HDFS文件程序" class="headerlink" title="(2) 写HDFS文件程序"></a>(2) 写HDFS文件程序</h4> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataOutputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> parak</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-9-15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HDFSWriteFile</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">			conf.set(<span class="string">&quot;fs.defaultFS&quot;</span>, <span class="string">&quot;hdfs://master:9000&quot;</span>);</span><br><span class="line">			conf.set(<span class="string">&quot;fs.hdfs.impl&quot;</span>,</span><br><span class="line">					<span class="string">&quot;org.apache.hadoop.hdfs.DistributedFileSystem&quot;</span>);</span><br><span class="line">			FileSystem fs = FileSystem.get(conf);</span><br><span class="line">			<span class="keyword">byte</span>[] buff = <span class="string">&quot;Hello, Khighness&quot;</span>.getBytes(); <span class="comment">// 要写入的内容</span></span><br><span class="line">			String filename = <span class="string">&quot;/user/parak/test.txt&quot;</span>; <span class="comment">// 要写入的文件名</span></span><br><span class="line">			FSDataOutputStream os = fs.create(<span class="keyword">new</span> Path(filename));</span><br><span class="line">			os.write(buff, <span class="number">0</span>, buff.length);</span><br><span class="line">			System.out.println(<span class="string">&quot;Create:&quot;</span> + filename);</span><br><span class="line">			os.close();</span><br><span class="line">			fs.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200915213012019.png" class="" title="image-20200915213012019">



<h2 id="5-Eclipse上的HDFS操作"><a href="#5-Eclipse上的HDFS操作" class="headerlink" title="5. Eclipse上的HDFS操作"></a>5. Eclipse上的HDFS操作</h2><h3 id="1-安装Hadoop-Eclipse-Plugin"><a href="#1-安装Hadoop-Eclipse-Plugin" class="headerlink" title="1. 安装Hadoop-Eclipse-Plugin"></a>1. 安装Hadoop-Eclipse-Plugin</h3><p>(1) 下载相关插件：<a href="https://github.com/winghc/hadoop2x-eclipse-plugin">hadoop-eclipse-plugin</a></p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200922203150692.png" class="" title="image-20200922203150692">

<p>我是vpn下载下来的，分享一下：</p>
<blockquote>
<p>完整包</p>
<p>网盘链接：<a href="https://pan.baidu.com/s/1Q72HyCSUnh-Q0JRQK03Jjg">https://pan.baidu.com/s/1Q72HyCSUnh-Q0JRQK03Jjg</a></p>
<p>提取码：kkkk</p>
<p>插件包</p>
<p>网盘链接：<a href="https://pan.baidu.com/s/1dfBm7JB4ZXTR3bwF7PSaKA">https://pan.baidu.com/s/1dfBm7JB4ZXTR3bwF7PSaKA</a></p>
<p>提取码：kkkk</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200922222447098.png" class="" title="image-20200922222447098">



<p>(2) 下载后将release中的<code>hadoop-eclipse-plugin-2.6.0.jar</code>复制到 Eclipse 安装目录的 plugins 文件夹中</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200922223813270.png" class="" title="image-20200922223813270">

<p>(3) 运行 <code>eclipse-clean</code> 重启 Eclipse</p>
<h3 id="2-配置Hadoop-Eclipse-Plugin"><a href="#2-配置Hadoop-Eclipse-Plugin" class="headerlink" title="2. 配置Hadoop-Eclipse-Plugin"></a>2. 配置Hadoop-Eclipse-Plugin</h3><p>配置前开启Hadoop</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928131439434.png" class="" title="image-20200928131439434">

<p>(1) 切换到“Map/Reduce”开发视图</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928131546990.png" class="" title="image-20200928131546990">



<p>(2) 建立与Hadoop集群的连接</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928131720837.png" class="" title="image-20200928131720837">

<p>(3) 填写Hadoop连接配置</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928131907971.png" class="" title="image-20200928131907971">



<h3 id="3-在Eclipse中操作HDFS中的文件"><a href="#3-在Eclipse中操作HDFS中的文件" class="headerlink" title="3. 在Eclipse中操作HDFS中的文件"></a>3. 在Eclipse中操作HDFS中的文件</h3><p>点击左侧DFS Locations即可查看HDFS的文件列表</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928132219334.png" class="" title="image-20200928132219334">



<h2 id="6-在Eclipse中运行”Wold-Count”MapReduce程序"><a href="#6-在Eclipse中运行”Wold-Count”MapReduce程序" class="headerlink" title="6. 在Eclipse中运行”Wold Count”MapReduce程序"></a>6. 在Eclipse中运行”Wold Count”MapReduce程序</h2><h3 id="1-在Eclipse中创建”WordCount”MapReduce项目"><a href="#1-在Eclipse中创建”WordCount”MapReduce项目" class="headerlink" title="1. 在Eclipse中创建”WordCount”MapReduce项目"></a>1. 在Eclipse中创建”WordCount”MapReduce项目</h3><blockquote>
<p>选择File -&gt; New -&gt; Project -&gt; Map/Reduce Project</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928133415156.png" class="" title="image-20200928133415156">

<blockquote>
<p>项目名称=MyWordCount，然后Configure Hadoop install directory -&gt; Finish</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928133508525.png" class="" title="image-20200928133508525">

<blockquote>
<p>新建Java文件，name = WordCountTest</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928134118935.png" class="" title="image-20200928134118935">

<blockquote>
<p>代码如下</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.GenericOptionsParser;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> parak</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>   2020-9-28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WordCountTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        String[] otherArgs = (<span class="keyword">new</span> GenericOptionsParser(conf, args)).getRemainingArgs();</span><br><span class="line">        <span class="keyword">if</span>(otherArgs.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;Usage: wordcount &lt;in&gt; [&lt;in&gt;...] &lt;out&gt;&quot;</span>);</span><br><span class="line">            System.exit(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        Job job = Job.getInstance(conf, <span class="string">&quot;word count test&quot;</span>);</span><br><span class="line">        job.setJarByClass(WordCountTest.class);</span><br><span class="line">        job.setMapperClass(WordCountTest.TokenizerMapper.class);</span><br><span class="line">        job.setCombinerClass(WordCountTest.IntSumReducer.class);</span><br><span class="line">        job.setReducerClass(WordCountTest.IntSumReducer.class);</span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; otherArgs.length - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            FileInputFormat.addInputPath(job, <span class="keyword">new</span> Path(otherArgs[i]));</span><br><span class="line"> </span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(otherArgs[otherArgs.length - <span class="number">1</span>]));</span><br><span class="line">        System.exit(job.waitForCompletion(<span class="keyword">true</span>)?<span class="number">0</span>:<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntSumReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> IntWritable result = <span class="keyword">new</span> IntWritable();</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">IntSumReducer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Reducer&lt;Text, IntWritable, Text, IntWritable&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">            IntWritable val;</span><br><span class="line">            <span class="keyword">for</span>(Iterator itr = values.iterator(); itr.hasNext(); sum += val.get()) &#123;</span><br><span class="line">                val = (IntWritable)itr.next();</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">this</span>.result.set(sum);</span><br><span class="line">            context.write(key, <span class="keyword">this</span>.result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenizerMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Object</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> IntWritable one = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">private</span> Text word = <span class="keyword">new</span> Text();</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TokenizerMapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Object key, Text value, Mapper&lt;Object, Text, Text, IntWritable&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            StringTokenizer itr = <span class="keyword">new</span> StringTokenizer(value.toString());</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">while</span>(itr.hasMoreTokens()) &#123;</span><br><span class="line">                <span class="keyword">this</span>.word.set(itr.nextToken());</span><br><span class="line">                context.write(<span class="keyword">this</span>.word, one);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-添加log4j-properties配置文件到src目录下"><a href="#2-添加log4j-properties配置文件到src目录下" class="headerlink" title="2. 添加log4j.properties配置文件到src目录下"></a>2. 添加log4j.properties配置文件到src目录下</h3><blockquote>
<p>新建文件</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928205438905.png" class="" title="image-20200928205438905">

<blockquote>
<p>内容如下</p>
</blockquote>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span> = <span class="string">INFO,KAG,CONSOLE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.KAG.Threshold</span>=<span class="string">INFO</span></span><br><span class="line"><span class="meta">log4j.appender.KAG.encoding</span>=<span class="string">UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.KAG</span> = <span class="string">org.apache.log4j.DailyRollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.KAG.File</span>=<span class="string">log/sHadoop.log</span></span><br><span class="line"><span class="meta">log4j.appender.KAG.ImmediateFlush</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">log4j.appender.KAG.DatePattern</span>=<span class="string">&#x27;_&#x27;yyyy-MM-dd</span></span><br><span class="line"><span class="meta">log4j.appender.KAG.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.KAG.layout.ConversionPattern</span>=<span class="string">%-d&#123;yyyy-MM-dd HH:mm:ss&#125; KAG %-5p [%c] - %m%n</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.CONSOLE</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.Threshold</span>=<span class="string">INFO</span></span><br><span class="line"></span><br><span class="line"><span class="meta">log4j.appender.CONSOLE.Target</span>=<span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.CONSOLE.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.CONSOLE.layout.ConversionPattern</span>=<span class="string">%-d&#123;yyyy-MM-dd HH:mm:ss&#125; KAG %-5p [%c] - %m%n</span></span><br></pre></td></tr></table></figure>



<h3 id="3-通过Eclipse运行“MyWordCount”-MapReduce项目"><a href="#3-通过Eclipse运行“MyWordCount”-MapReduce项目" class="headerlink" title="3. 通过Eclipse运行“MyWordCount” MapReduce项目"></a>3. 通过Eclipse运行“MyWordCount” MapReduce项目</h3><blockquote>
<p>更改运行配置</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928183606296.png" class="" title="image-20200928183606296"> 

<blockquote>
<p>运行结果</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928184930876.png" class="" title="image-20200928184930876">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928184947160.png" class="" title="image-20200928184947160">

<blockquote>
<p>查看/user/parak/output目录，和目录下的文件</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928185257730.png" class="" title="image-20200928185257730">

<blockquote>
<p>重启Eclipse，在Eclipse中查看HDFS文件系统，/user/parak/output</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928185548345.png" class="" title="image-20200928185548345">



<h3 id="4-在Hadoop平台上部署WordCount程序"><a href="#4-在Hadoop平台上部署WordCount程序" class="headerlink" title="4. 在Hadoop平台上部署WordCount程序"></a>4. 在Hadoop平台上部署WordCount程序</h3><blockquote>
<p>右键 WordCountTest —&gt; Export</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928205719777.png" class="" title="image-20200928205719777">

<blockquote>
<p>选择 Java —&gt; Runnable JAR File —&gt; Next</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928205756522.png" class="" title="image-20200928205756522">

<blockquote>
<p>填入内容：</p>
<p>Lauch configuration: WordCountTest - MyWordCount</p>
<p>Export destination: /home/parak/hadoop/hadoop-2.9.2/myapp/WordCount.jar</p>
<p>然后Finish即可</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928210235072.png" class="" title="image-20200928210235072">

<blockquote>
<p>运行程序</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -jar /home/parak/hadoop/hadoop-<span class="number">2.9</span>.<span class="number">2</span>/myapp/WordCount.jar</span><br></pre></td></tr></table></figure>



<h2 id="7-统计某电商网站买家收藏商品数量"><a href="#7-统计某电商网站买家收藏商品数量" class="headerlink" title="7. 统计某电商网站买家收藏商品数量"></a>7. 统计某电商网站买家收藏商品数量</h2><p><strong>要求</strong></p>
<p>现有某电商网站用户对商品的收藏数据，记录了用户收藏的商品id以及收藏日期，名为buyer_favorite1。buyer_favorite1包含：买家id，商品id，收藏日期这三个字段，数据以“\t”分割，样本数据及格式如下：</p>
<ol>
<li><p>买家id  商品id  收藏日期 </p>
</li>
<li><p>10181  1000481  2010-04-04 16:54:31 </p>
</li>
<li><p>20001  1001597  2010-04-07 15:07:52 </p>
</li>
<li><p>20001  1001560  2010-04-07 15:08:27 </p>
</li>
<li><p>20042  1001368  2010-04-08 08:20:30 </p>
</li>
<li><p>20067  1002061  2010-04-08 16:45:33 </p>
</li>
<li><p>20056  1003289  2010-04-12 10:50:55 </p>
</li>
<li><p>20056  1003290  2010-04-12 11:57:35 </p>
</li>
<li><p>20056  1003292  2010-04-12 12:05:29 </p>
</li>
<li><p>20054  1002420  2010-04-14 15:24:12 </p>
</li>
<li><p>20055  1001679  2010-04-14 19:46:04 </p>
</li>
<li><p>20054  1010675  2010-04-14 15:23:53 </p>
</li>
<li><p>20054  1002429  2010-04-14 17:52:45 </p>
</li>
<li><p>20076  1002427  2010-04-14 19:35:39 </p>
</li>
<li><p>20054  1003326  2010-04-20 12:54:44 </p>
</li>
<li><p>20056  1002420  2010-04-15 11:24:49 </p>
</li>
<li><p>20064  1002422  2010-04-15 11:35:54 </p>
</li>
<li><p>20056  1003066  2010-04-15 11:43:01 </p>
</li>
<li><p>20056  1003055  2010-04-15 11:43:06 </p>
</li>
<li><p>20056  1010183  2010-04-15 11:45:24 </p>
</li>
<li><p>20056  1002422  2010-04-15 11:45:49 </p>
</li>
<li><p>20056  1003100  2010-04-15 11:45:54 </p>
</li>
<li><p>20056  1003094  2010-04-15 11:45:57 </p>
</li>
<li><p>20056  1003064  2010-04-15 11:46:04 </p>
</li>
<li><p>20056  1010178  2010-04-15 16:15:20 </p>
</li>
<li><p>20076  1003101  2010-04-15 16:37:27 </p>
</li>
<li><p>20076  1003103  2010-04-15 16:37:05 </p>
</li>
<li><p>20076  1003100  2010-04-15 16:37:18 </p>
</li>
<li><p>20076  1003066  2010-04-15 16:37:31 </p>
</li>
<li><p>20054  1003103  2010-04-15 16:40:14 </p>
</li>
<li><p>20054  1003100  2010-04-15 16:40:16 </p>
</li>
</ol>
<p>要求编写MapReduce程序，统计每个买家收藏商品数量。</p>
<h3 id="1-在文档下新建文件buyer-favourite9"><a href="#1-在文档下新建文件buyer-favourite9" class="headerlink" title="1. 在文档下新建文件buyer_favourite9"></a>1. 在文档下新建文件buyer_favourite9</h3><blockquote>
<p>写入数据</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10181   1000481   2010-04-04添加到日历 16:54:31</span><br><span class="line">20001   1001597   2010-04-07 15:07:52</span><br><span class="line">20001   1001560   2010-04-07 15:08:27</span><br><span class="line">20042   1001368   2010-04-08 08:20:30</span><br><span class="line">20067   1002061   2010-04-08 16:45:33</span><br><span class="line">20056   1003289   2010-04-12 10:50:55</span><br><span class="line">20056   1003290   2010-04-12 11:57:35</span><br><span class="line">20056   1003292   2010-04-12 12:05:29</span><br><span class="line">20054   1002420   2010-04-14 15:24:12</span><br><span class="line">20055   1001679   2010-04-14 19:46:04</span><br><span class="line">20054   1010675   2010-04-14 15:23:53</span><br><span class="line">20054   1002429   2010-04-14 17:52:45</span><br><span class="line">20076   1002427   2010-04-14 19:35:39</span><br><span class="line">20054   1003326   2010-04-20 12:54:44</span><br><span class="line">20056   1002420   2010-04-15 11:24:49</span><br><span class="line">20064   1002422   2010-04-15 11:35:54</span><br><span class="line">20056   1003066   2010-04-15 11:43:01</span><br><span class="line">20056   1003055   2010-04-15 11:43:06</span><br><span class="line">20056   1010183   2010-04-15 11:45:24</span><br><span class="line">20056   1002422   2010-04-15 11:45:49</span><br><span class="line">20056   1003100   2010-04-15 11:45:54</span><br><span class="line">20056   1003094   2010-04-15 11:45:57</span><br><span class="line">20056   1003064   2010-04-15 11:46:04</span><br><span class="line">20056   1010178   2010-04-15 16:15:20</span><br><span class="line">20076   1003101   2010-04-15 16:37:27</span><br><span class="line">20076   1003103   2010-04-15 16:37:05</span><br><span class="line">20076   1003100   2010-04-15 16:37:18</span><br><span class="line">20076   1003066   2010-04-15 16:37:31</span><br><span class="line">20054   1003103   2010-04-15 16:40:14</span><br><span class="line">20054   1003100   2010-04-15 16:40:16 </span><br></pre></td></tr></table></figure>



<h3 id="2-将buyer-favourite9上传到HDFS文件系统"><a href="#2-将buyer-favourite9上传到HDFS文件系统" class="headerlink" title="2. 将buyer_favourite9上传到HDFS文件系统"></a>2. 将buyer_favourite9上传到HDFS文件系统</h3><blockquote>
<p>右键input —&gt; Upload files to DFS</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928222920023.png" class="" title="image-20200928222920023">

<blockquote>
<p>选择buyer_favourite1后确定</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928225427432.png" class="" title="image-20200928225427432">



<h3 id="3-新建java文件ProductNumber"><a href="#3-新建java文件ProductNumber" class="headerlink" title="3. 新建java文件ProductNumber"></a>3. 新建java文件ProductNumber</h3><blockquote>
<p>代码如下</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;  </span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;  </span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;  </span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;  </span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;  </span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;  </span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;  </span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;  </span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat; </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> parak</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-9-28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductNumber</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">		Job job = Job.getInstance();</span><br><span class="line">		job.setJobName(<span class="string">&quot;ProductNumber&quot;</span>);</span><br><span class="line">		job.setJarByClass(ProductNumber.class);</span><br><span class="line">		job.setMapperClass(MapperHandler.class);  </span><br><span class="line">		job.setReducerClass(ReducerHandler.class);  </span><br><span class="line">		job.setOutputKeyClass(Text.class);  </span><br><span class="line">		job.setOutputValueClass(IntWritable.class);  </span><br><span class="line">		Path inputPath = <span class="keyword">new</span> Path(<span class="string">&quot;hdfs://master:9000/user/parak/input/buyer_favourite1&quot;</span>);</span><br><span class="line">		Path outputPath = <span class="keyword">new</span> Path(<span class="string">&quot;hdfs://master:9000/user/parak/output/buyer_favourite1_analysis_result&quot;</span>);</span><br><span class="line">		FileInputFormat.addInputPath(job, inputPath);</span><br><span class="line">		FileOutputFormat.setOutputPath(job, outputPath);</span><br><span class="line">		<span class="keyword">boolean</span> flag = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">		Logger log = Logger.getLogger(ProductNumber.class);</span><br><span class="line">		log.info(<span class="string">&quot;Falg = &quot;</span> + flag);</span><br><span class="line">		System.exit(flag ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperHandler</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Object</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> IntWritable intWritable = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">static</span> Text word = <span class="keyword">new</span> Text();</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Object key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">			StringTokenizer tokenizer = <span class="keyword">new</span> StringTokenizer(value.toString(), <span class="string">&quot;   &quot;</span>);</span><br><span class="line">			word.set(tokenizer.nextToken());</span><br><span class="line">			context.write(word, intWritable);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ReducerHandler</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">		<span class="keyword">private</span> IntWritable intWritable = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">			<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line">				sum += value.get();</span><br><span class="line">			&#125;</span><br><span class="line">			intWritable.set(sum);</span><br><span class="line">			context.write(key, intWritable);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>运行结果</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928223752502.png" class="" title="image-20200928223752502">

<blockquote>
<p>运行后的HDFS文件系统</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928225133967.png" class="" title="image-20200928225133967">



<blockquote>
<p>part-r-00000文件内容即为统计结果</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200928225154667.png" class="" title="image-20200928225154667">





<h2 id="8-安装部署HBase"><a href="#8-安装部署HBase" class="headerlink" title="8. 安装部署HBase"></a>8. 安装部署HBase</h2><p>HBase与Hadoop版本支持关系</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20201002211137852.png" class="" title="image-20201002211137852">





<h3 id="1-下载安装HBase-1-6-0"><a href="#1-下载安装HBase-1-6-0" class="headerlink" title="1. 下载安装HBase-1.6.0"></a>1. 下载安装HBase-1.6.0</h3><blockquote>
<p>使用镜像：<a href="https://mirrors.bfsu.edu.cn/apache/hbase/">https://mirrors.bfsu.edu.cn/apache/hbase/</a></p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929100114445.png" class="" title="image-20200929100114445">

<blockquote>
<p>选择1.6.0，下载tar.gz压缩包</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929100159559.png" class="" title="image-20200929100159559">

<blockquote>
<p>解压</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xzvf hbase-1.6.0-bin.tar.gz </span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929102107183.png" class="" title="image-20200929102107183">

<blockquote>
<p>查看</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929102212291.png" class="" title="image-20200929102212291">



<h3 id="2-配置Hbase"><a href="#2-配置Hbase" class="headerlink" title="2. 配置Hbase"></a>2. 配置Hbase</h3><blockquote>
<p>进入HBase安装主目录的conf目录，然后修改配置文件</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd conf/</span><br></pre></td></tr></table></figure>



<h4 id="1-修改配置文件hbase-env-sh"><a href="#1-修改配置文件hbase-env-sh" class="headerlink" title="(1) 修改配置文件hbase-env.sh"></a>(1) 修改配置文件hbase-env.sh</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gedit hbase-env.sh</span><br><span class="line"></span><br><span class="line">修改JAVA_HOME:</span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.262.b10-0.el7_8.x86_64</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929103119874.png" class="" title="image-20200929103119874">

<h4 id="2-修改配置文件hbase-site-xml"><a href="#2-修改配置文件hbase-site-xml" class="headerlink" title="(2) 修改配置文件hbase-site.xml"></a>(2) 修改配置文件hbase-site.xml</h4><blockquote>
<p>将hbase-site.xml修改为‘</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment"> * or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment"> * distributed with this work for additional information</span></span><br><span class="line"><span class="comment"> * regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment"> * to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment"> * &quot;License&quot;); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment"> * with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:9000/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>master<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.master.info.port<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>60010<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929103343424.png" class="" title="image-20200929103343424">

<h4 id="3-设置-regionservers"><a href="#3-设置-regionservers" class="headerlink" title="(3) 设置 regionservers"></a>(3) 设置 regionservers</h4><blockquote>
<p>将regionservers中的localhost修改为: slave</p>
</blockquote>
<h4 id="4-设置环境变量"><a href="#4-设置环境变量" class="headerlink" title="(4) 设置环境变量"></a>(4) 设置环境变量</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gedit ~/.bash_profile</span><br><span class="line"></span><br><span class="line">将下面代码添加到文件末尾：</span><br><span class="line"><span class="meta">#</span><span class="bash">HBase</span></span><br><span class="line">export HBASE_HOME=/home/parak/HBase/hbase-1.6.0</span><br><span class="line">export PATH=$HBASE_HOME/bin:$PATH</span><br><span class="line">export HADOOP_CLASSPATH=$HBASE_HOME/lib/*</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929104148521.png" class="" title="image-20200929104148521">

<h4 id="5-将HBase复制到Slave结点"><a href="#5-将HBase复制到Slave结点" class="headerlink" title="(5) 将HBase复制到Slave结点"></a>(5) 将HBase复制到Slave结点</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -r /home/parak/HBase/hbase-1.6.0 slave:/home/parak/HBase/</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929104703378.png" class="" title="image-20200929104703378">

<blockquote>
<p>查看slave结点的HBase文件夹</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929104827983.png" class="" title="image-20200929104827983">



<h3 id="3-验证并启动HBase"><a href="#3-验证并启动HBase" class="headerlink" title="3. 验证并启动HBase"></a>3. 验证并启动HBase</h3><blockquote>
<p>先启动Hadoop: start-all.sh</p>
<p>再启动Hbase: start-hbase.sh</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929105006101.png" class="" title="image-20200929105006101">

<blockquote>
<p>启动HBase出现错误</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929110647176.png" class="" title="image-20200929110647176">

<p>我意识到是Hadoop-2.9.2与HBase-1.6.0的版本匹配问题，于是我下载HBase-2.2.6。</p>
<h3 id="4-重新下载配置HBase-2-2-6"><a href="#4-重新下载配置HBase-2-2-6" class="headerlink" title="4. 重新下载配置HBase-2.2.6"></a>4. 重新下载配置HBase-2.2.6</h3><blockquote>
<p>下载</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929110514041.png" class="" title="image-20200929110514041">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929110553845.png" class="" title="image-20200929110553845">

<blockquote>
<p>解压: tar xzvf hbase-2.2.6-bin.tar.gz</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929110818266.png" class="" title="image-20200929110818266">

<blockquote>
<p>修改配置文件hbase-env.sh</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929111024747.png" class="" title="image-20200929111024747">

<blockquote>
<p>修改配置文件hbase-site.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment"> * or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment"> * distributed with this work for additional information</span></span><br><span class="line"><span class="comment"> * regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment"> * to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment"> * &quot;License&quot;); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment"> * with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    The following properties are set for running HBase as a single process on a</span></span><br><span class="line"><span class="comment">    developer workstation. With this configuration, HBase is running in</span></span><br><span class="line"><span class="comment">    &quot;stand-alone&quot; mode and without a distributed file system. In this mode, and</span></span><br><span class="line"><span class="comment">    without further configuration, HBase and ZooKeeper data are stored on the</span></span><br><span class="line"><span class="comment">    local filesystem, in a path under the value configured for `hbase.tmp.dir`.</span></span><br><span class="line"><span class="comment">    This value is overridden from its default value of `/tmp` because many</span></span><br><span class="line"><span class="comment">    systems clean `/tmp` on a regular basis. Instead, it points to a path within</span></span><br><span class="line"><span class="comment">    this HBase installation directory.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Running against the `LocalFileSystem`, as opposed to a distributed</span></span><br><span class="line"><span class="comment">    filesystem, runs the risk of data integrity issues and data loss. Normally</span></span><br><span class="line"><span class="comment">    HBase will refuse to run in such an environment. Setting</span></span><br><span class="line"><span class="comment">    `hbase.unsafe.stream.capability.enforce` to `false` overrides this behavior,</span></span><br><span class="line"><span class="comment">    permitting operation. This configuration is for the developer workstation</span></span><br><span class="line"><span class="comment">    only and __should not be used in production!__</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    See also https://hbase.apache.org/book.html#standalone_dist</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>./tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.unsafe.stream.capability.enforce<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:9000/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>master<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.master.info.port<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>60010<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929111344171.png" class="" title="image-20200929111344171">

<blockquote>
<p>修改regionservers文件</p>
</blockquote>
<p><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="Hadoop%5Cimage-20200929113716160.png" alt="image-20200929113716160"></p>
<blockquote>
<p>将HBase复制到Slave节点</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -r /home/parak/HBase/hbase-2.2.6 slave:/home/parak/HBase</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929112324004.png" class="" title="image-20200929112324004">

<blockquote>
<p>再次启动Hbase</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929113827901.png" class="" title="image-20200929113827901">

<blockquote>
<p>打开FireFox，进入<a href="http://master:60010/">http://master:60010</a></p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929113959833.png" class="" title="image-20200929113959833">

<p>说明HBase启动成功</p>
<h3 id="4-关闭HBase"><a href="#4-关闭HBase" class="headerlink" title="4. 关闭HBase"></a>4. 关闭HBase</h3><blockquote>
<p>先关闭HBase: stop-hbase.sh</p>
<p>再关闭Hadoop: stop-all.sh</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929114148065.png" class="" title="image-20200929114148065">



<h2 id="9-HBase-Shell命令操作"><a href="#9-HBase-Shell命令操作" class="headerlink" title="9. HBase Shell命令操作"></a>9. HBase Shell命令操作</h2><h3 id="1-启动HBase-Shell"><a href="#1-启动HBase-Shell" class="headerlink" title="1. 启动HBase Shell"></a>1. 启动HBase Shell</h3><h4 id="1-启动HBase-Shell界面"><a href="#1-启动HBase-Shell界面" class="headerlink" title="(1) 启动HBase Shell界面"></a>(1) 启动HBase Shell界面</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hbase shell</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929191351747.png" class="" title="image-20200929191351747">

<h4 id="2-HBase-Shell的help命令"><a href="#2-HBase-Shell的help命令" class="headerlink" title="(2) HBase Shell的help命令"></a>(2) HBase Shell的help命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">help</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929191531507.png" class="" title="image-20200929191531507">

<blockquote>
<p>查看HBase建表命令create的用法</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">help &quot;create&quot;</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929191618099.png" class="" title="image-20200929191618099">



<h3 id="2-创建HBase数据表"><a href="#2-创建HBase数据表" class="headerlink" title="2. 创建HBase数据表"></a>2. 创建HBase数据表</h3><blockquote>
<p>HBase中用create命令创建表</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="string">&#x27;student&#x27;</span>, <span class="string">&#x27;Sname&#x27;</span>, <span class="string">&#x27;Ssex&#x27;</span>, <span class="string">&#x27;Sage&#x27;</span>, <span class="string">&#x27;Sdept&#x27;</span>, <span class="string">&#x27;course&#x27;</span></span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929191856923.png" class="" title="image-20200929191856923">

<blockquote>
<p>查看’student’表的属性</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">describe &#x27;student&#x27;</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929191953519.png" class="" title="image-20200929191953519">



<h3 id="3-HBase数据库基本操作"><a href="#3-HBase数据库基本操作" class="headerlink" title="3. HBase数据库基本操作"></a>3. HBase数据库基本操作</h3><h4 id="1-添加数据"><a href="#1-添加数据" class="headerlink" title="(1) 添加数据"></a>(1) 添加数据</h4><blockquote>
<p>put命令添加数据，一次只能为一个表的一行数据的一个列添加一个数据</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">put &#x27;student&#x27;, &#x27;95001&#x27;, &#x27;Sname&#x27;, &#x27;Li Ying&#x27;</span><br><span class="line">put &#x27;student&#x27;, &#x27;95001&#x27;, &#x27;Sdept&#x27;, &#x27;CS&#x27;</span><br><span class="line">put &#x27;student&#x27;, &#x27;95001&#x27;, &#x27;course:math&#x27;, &#x27;81&#x27;</span><br><span class="line">put &#x27;student&#x27;, &#x27;95001&#x27;, &#x27;course:english&#x27;, &#x27;85&#x27;</span><br><span class="line">put &#x27;student&#x27;, &#x27;95002&#x27;, &#x27;course:math&#x27;, &#x27;83&#x27;</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929193655517.png" class="" title="image-20200929193655517">



<h4 id="2-查看数据"><a href="#2-查看数据" class="headerlink" title="(2) 查看数据"></a>(2) 查看数据</h4><blockquote>
<p>查看表某一行的数据</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">get &#x27;student&#x27;, &#x27;95001&#x27;</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929194017359.png" class="" title="image-20200929194017359">

<blockquote>
<p>查看表的全部数据</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scan &#x27;student&#x27;</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929194135877.png" class="" title="image-20200929194135877">



<h4 id="3-删除数据"><a href="#3-删除数据" class="headerlink" title="(3) 删除数据"></a>(3) 删除数据</h4><blockquote>
<p>delete命令删除某一项数据</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">delete &#x27;student&#x27;, &#x27;95001&#x27;, &#x27;Ssex&#x27;</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929194514884.png" class="" title="image-20200929194514884">

<blockquote>
<p>delete命令删除某行的全部数据</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">delete &#x27;student&#x27;,&#x27;95001&#x27;</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929194626605.png" class="" title="image-20200929194626605">



<h4 id="4-删除表"><a href="#4-删除表" class="headerlink" title="(4) 删除表"></a>(4) 删除表</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">disable &#x27;student&#x27;</span><br><span class="line">drop &#x27;student&#x27;</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929193442627.png" class="" title="image-20200929193442627">



<h3 id="4-查询HBase数据表的历史数据"><a href="#4-查询HBase数据表的历史数据" class="headerlink" title="4. 查询HBase数据表的历史数据"></a>4. 查询HBase数据表的历史数据</h3><blockquote>
<p>在创建表的时候，指定保存的版本数</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create &#x27;teacher&#x27;, &#123;NAME=&gt;&#x27;username&#x27;, VERSIONS=&gt;5&#125;</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929203801474.png" class="" title="image-20200929203801474">

<blockquote>
<p>插入数据然后更新数据，使其产生历史版本数据</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">put &#x27;teacher&#x27;, &#x27;91001&#x27;, &#x27;username&#x27;, &#x27;Mary&#x27;</span><br><span class="line">put &#x27;teacher&#x27;, &#x27;91001&#x27;, &#x27;username&#x27;, &#x27;Mary1&#x27;</span><br><span class="line">put &#x27;teacher&#x27;, &#x27;91001&#x27;, &#x27;username&#x27;, &#x27;Mary2&#x27;</span><br><span class="line">put &#x27;teacher&#x27;, &#x27;91001&#x27;, &#x27;username&#x27;, &#x27;Mary3&#x27;</span><br><span class="line">put &#x27;teacher&#x27;, &#x27;91001&#x27;, &#x27;username&#x27;, &#x27;Mary4&#x27;</span><br><span class="line">put &#x27;teacher&#x27;, &#x27;91001&#x27;, &#x27;username&#x27;, &#x27;Mary5&#x27;</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929204220031.png" class="" title="image-20200929204220031">

<blockquote>
<p>查询时，指定查询的历史版本书（默认会查询出最新的数据）</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">get &#x27;teacher&#x27;, &#x27;91001&#x27;, &#123;COLUMN=&gt;&#x27;username&#x27;, VERSIONS=&gt;5&#125;</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/ec060e02/image-20200929204245861.png" class="" title="image-20200929204245861">



<h3 id="5-退出HBase-Shell"><a href="#5-退出HBase-Shell" class="headerlink" title="5. 退出HBase Shell"></a>5. 退出HBase Shell</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Cloud</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty</title>
    <url>/posts/1c6ba3e2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-IO"><a href="#1-IO" class="headerlink" title="1. IO"></a>1. IO</h2><h3 id="1-1-BIO"><a href="#1-1-BIO" class="headerlink" title="1.1 BIO"></a>1.1 BIO</h3><h4 id="1-1-1-介绍"><a href="#1-1-1-介绍" class="headerlink" title="1.1.1 介绍"></a>1.1.1 介绍</h4><ul>
<li>Java BIO就是传统的Java IO编程，相关API都在java.io</li>
<li>BIO (<strong>blocking I/O</strong>)：<strong>同步并阻塞</strong>，服务器实现模式为一个连接一个线程，即有连接请求时服务器就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销</li>
<li>BIO方式适用于连接数目较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择</li>
</ul>
<a id="more"></a>



<h4 id="1-1-2-实例"><a href="#1-1-2-实例" class="headerlink" title="1.1.2 实例"></a>1.1.2 实例</h4><blockquote>
<p>BIO服务器</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.bio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/9/13 11:07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: BIO服务器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BIOServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = Logger.getLogger(BIOServer.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  启动服务器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 线程池机制</span></span><br><span class="line"><span class="comment">         * 思路</span></span><br><span class="line"><span class="comment">         * 1、创建一个线程池</span></span><br><span class="line"><span class="comment">         * 2、如果有多个线程池联机呃，就创建一个线程，与之通讯</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        ExecutorService newCachedThreadPool = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建ServerSocket</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">6666</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;NIO 服务器启动 &quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 监听，等待客户端接受</span></span><br><span class="line">            <span class="keyword">final</span> Socket socket = serverSocket.accept();</span><br><span class="line">            logger.info(<span class="string">&quot;新增一个客户端连接&quot;</span>);</span><br><span class="line">            <span class="comment">// 创建一个线程，与之通讯</span></span><br><span class="line">            newCachedThreadPool.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    handler(socket);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * handler，和客户端通讯</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> socket</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handler</span><span class="params">(Socket socket)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="comment">// 通过socket获取输入流</span></span><br><span class="line">            InputStream inputStream = socket.getInputStream();</span><br><span class="line">            <span class="comment">// 循环读取客户端发送的数据</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 输出线程信息</span></span><br><span class="line">                logger.info(<span class="string">&quot;线程信息：&#123; PID = &quot;</span> + Thread.currentThread().getId()</span><br><span class="line">                        + <span class="string">&quot;, Name = &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; &#125;&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> read = inputStream.read(bytes);</span><br><span class="line">                <span class="keyword">if</span> (read != -<span class="number">1</span>) &#123;</span><br><span class="line">                    logger.info(<span class="string">&quot;[客户端：&quot;</span> + <span class="keyword">new</span> String(bytes, <span class="number">0</span>, read) + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.info(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            logger.info(<span class="string">&quot;关闭与客户端的连接&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> BIOServer().start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="1-1-3-配置"><a href="#1-1-3-配置" class="headerlink" title="1.1.3 配置"></a>1.1.3 配置</h4><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/1c6ba3e2/image-20200913115739418.png" class="" title="image-20200913115739418">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/1c6ba3e2/image-20200913115851769.png" class="" title="image-20200913115851769">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/1c6ba3e2/image-20200913115947574.png" class="" title="image-20200913115947574">



<h4 id="1-1-4-运行"><a href="#1-1-4-运行" class="headerlink" title="1.1.4 运行"></a>1.1.4 运行</h4><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/1c6ba3e2/image-20200913120322526.png" class="" title="image-20200913120322526">



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">telnet 127.0.0.1 6666</span><br></pre></td></tr></table></figure>

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/1c6ba3e2/image-20200913120406689.png" class="" title="image-20200913120406689">



<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/1c6ba3e2/image-20200913121954652.png" class="" title="image-20200913121954652">

<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/1c6ba3e2/image-20200913122028056.png" class="" title="image-20200913122028056">



<h4 id="1-1-5-不足"><a href="#1-1-5-不足" class="headerlink" title="1.1.5 不足"></a>1.1.5 不足</h4><p>1｝每个请求都需要创建独立的线程，与对应的客户端进行数据Read，业务处理，数据Write</p>
<p>2）当并发数较大时，需要创建大量线程来处理连接，系统资源占用较大</p>
<p>3）连接建立后，如果当当前线程暂存没有数据可读，则线程就阻塞在Read上，造成线程资源浪费</p>
<h3 id="1-2-NIO"><a href="#1-2-NIO" class="headerlink" title="1.2 NIO"></a>1.2 NIO</h3><h4 id="1-2-1-介绍"><a href="#1-2-1-介绍" class="headerlink" title="1.2.1 介绍"></a>1.2.1 介绍</h4><ul>
<li>Java NIO 全称 <strong>java non-blocking IO</strong>，是指JDK提供的心API，是<strong>同步非阻塞</strong>的。</li>
<li>NIO 相关类都被放在 java.nio包及子包下，并且对原 java.io包中的很多类进行改写</li>
<li>NIO 三大核心部分：<u>Channel</u>(通道)、<u>Buffer</u>(缓冲区)、<u>Selector</u>(选择器)</li>
<li>NIO 是面向缓冲区或者面向块编程的。数据读取到一个它稍后处理的缓冲区，需要时可在缓冲区前后移动，这就增加处理过程中的灵活性，使用它可以提供非阻塞的高伸缩性网络</li>
</ul>
<h4 id="1-2-2-比较"><a href="#1-2-2-比较" class="headerlink" title="1.2.2 比较"></a>1.2.2 比较</h4><blockquote>
<p><code>BIO</code> VS <code>NIO</code></p>
</blockquote>
<ul>
<li><p>BIO以流的方式处理数据，而NIO以块的方式处理数据，块I/O的效率比流I/O高很多</p>
</li>
<li><p>BIO是阻塞的，NIO则是非阻塞的</p>
</li>
<li><p>BIO基于字节流和字符流进行操作，而NIO基于<code>Channel</code>(通道)和<code>Buffer</code>(缓冲区)进行操作，数据总是从通道读取到缓冲区中，或者从缓冲区写入到同道中人。<code>Selectors</code>(选择器)用于监听多个通道的事件（比如：连接请求、数据到达等），因此使用单个线程就可以监听多个客户端通道</p>
</li>
</ul>
<h4 id="1-2-3-组件"><a href="#1-2-3-组件" class="headerlink" title="1.2.3 组件"></a>1.2.3 组件</h4><p>三大组件：<code>Selector</code>、<code>Channe</code>和<code>Buffer</code></p>
<blockquote>
<p>关系图</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/1c6ba3e2/image-20200913164017187.png" class="" title="image-20200913164017187">

<blockquote>
<p>说明</p>
</blockquote>
<ul>
<li>每个<code>channel</code>都会对应一个<code>Buffer</code></li>
<li><code>Selector</code>对应一个线程，一个线程对应多个<code>channel</code></li>
<li>该图反应有三个<code>channel</code>注册到了该<code>Selector</code>程序</li>
<li>程序切换到哪个<code>channel</code>是有事件决定的，<code>Event</code>就是一个重要的概念</li>
<li><code>Selector</code>会根据不同的事件，在各个通道上切换</li>
<li><code>Buffer</code>就是一个内存块，底层是有一个数组</li>
<li>数据的读取写入都通过<code>Buffer</code>，这个和BIO不同。BIO要么是输入流，要么是输出流，不能双向，但是NIO的<code>buffer</code>是可以读也可以写，需要<code>flip</code>方法切换</li>
<li><code>channel</code>是双向的，可以返回底层操作系统的情况，比如<code>Linux</code>，底层的操作系统通道就是双向的</li>
</ul>
<h5 id="1-2-3-1-Buffer"><a href="#1-2-3-1-Buffer" class="headerlink" title="1.2.3.1 Buffer"></a>1.2.3.1 Buffer</h5><blockquote>
<p>说明</p>
</blockquote>
<p>缓冲区：缓冲区本质上是一个可以读写数据的内存块</p>
<blockquote>
<p>常用Buffer子类：</p>
</blockquote>
<ul>
<li>ByteBuffer</li>
<li>ShortBuffer</li>
<li>CharBuffer</li>
<li>IntBuffer</li>
<li>LongBuffer</li>
<li>DoubleBuffer</li>
<li>FloatBuffer</li>
</ul>
<blockquote>
<p>Buffer类定义了所有的缓冲区都具有的四个属性来提供关于其所包含的数据元素</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Capacity</td>
<td align="center">容量，级可以容纳的最大数据量；在缓冲区创建时被设定且不能改变</td>
</tr>
<tr>
<td align="center">Limit</td>
<td align="center">表示缓冲区的当前重点，不能对缓冲区超过极限的位置进行读写操作，且极限是可以修改的</td>
</tr>
<tr>
<td align="center">Position</td>
<td align="center">位置，下一个要被读或写的元素的索引，每次读写缓冲区数据时都会改变的值，为下次读写作准备</td>
</tr>
<tr>
<td align="center">Mark</td>
<td align="center">标记</td>
</tr>
</tbody></table>
<blockquote>
<p>mark &lt;= position &lt;= limit &lt;= capacity</p>
</blockquote>
<h5 id="1-2-3-2-Channel"><a href="#1-2-3-2-Channel" class="headerlink" title="1.2.3.2 Channel"></a>1.2.3.2 Channel</h5><blockquote>
<p>说明</p>
</blockquote>
<p>通道：NIO的通道类似于流，但有些区别</p>
<ul>
<li>通道可以同时进行读写，而流只能读或者只能写</li>
<li>通道可以实现异步读写数据</li>
<li>通道可以从缓冲读数据，也可以写数据到缓冲</li>
</ul>
<blockquote>
<p> 常用的Channel类：</p>
</blockquote>
<ul>
<li>FileChannel                      ━━━━━▶          文件的数据读写</li>
<li>DatagramChannel            ━━━━━▶          UDP的数据读写</li>
<li>ServerSocketChannel      ━━━━━▶          TCP的数据读写</li>
<li>SocketChannel                 ━━━━━▶          TCP的数据读写</li>
</ul>
<blockquote>
<p>FileChannel的主要IO操作</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">public int read(ByteBuffer dst)</td>
<td align="center">从通道读取数据并放到缓冲区中</td>
</tr>
<tr>
<td align="center">public int write(ByteBuffer src)</td>
<td align="center">把缓冲区的数据写到通道中</td>
</tr>
<tr>
<td align="center">public long transferFrom(ReadableByteChannel src, long position, long count)</td>
<td align="center">从目标通道中复制数据到当前通道</td>
</tr>
<tr>
<td align="center">public long transferTo(long position, long count, WritableByteChannel target)</td>
<td align="center">把数据从当前通道复制给目标通道</td>
</tr>
</tbody></table>
<h5 id="1-2-3-3-Selector"><a href="#1-2-3-3-Selector" class="headerlink" title="1.2.3.3 Selector"></a>1.2.3.3 Selector</h5><blockquote>
<p>说明</p>
</blockquote>
<p>选择器：</p>
<ul>
<li>Java的NIO，用非阻塞的IO方式，可以用一个线程，处理多个的客户端连接，就会使用到<code>Selector</code></li>
<li><code>Selector</code>能够检测多个注册的通道上是否有事件发生（多个<code>Channel</code>以事件的方式可以注册到同一个<code>Selector</code>），如果有事件发生，便获取事件然后针对每个事件进行相应的处理。这样就可以只用一个单线程去管理多个通道，也就是管理多个连接和请求</li>
<li>只有在连接真正有读写事件发生时，才会进行读写，就大大地减少了系统开销，并且不必为每个连接都创建一个线程</li>
<li>避免了多线程之间的上下文切换导致的开销</li>
</ul>
<blockquote>
<p>类及相关方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Class | Method</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">public abstract class Selector implements Closeable</td>
<td align="center">抽象类</td>
</tr>
<tr>
<td align="center">public static Selector open()</td>
<td align="center">得到一个选择器对象</td>
</tr>
<tr>
<td align="center">public int select(long timeout)</td>
<td align="center">监控所有注册的通道，参数用来设置超时时间</td>
</tr>
<tr>
<td align="center">public Set<SelectionKey> selectedKeys()</td>
<td align="center">从内部集合中得到所有的SelectionKe’y</td>
</tr>
</tbody></table>
<blockquote>
<p>说明</p>
</blockquote>
<ul>
<li>当客户端连接时，会通过<code>ServerSocketChannel</code>得到<code>SocketChannel</code></li>
<li>将<code>SocketChannel</code>注册到<code>Selector</code>上，注册后返回一个<code>SelectionKey</code></li>
<li><code>Selector</code>进行监听<code>select</code>方法，返回有事件发生的通道的个数</li>
<li>进一步得到各个<code>SelectionKey</code></li>
<li>在通道<code>SelectionKey</code>反向获取<code>SocketChannel</code>，方法<code>channel()</code></li>
<li>可以得到所有的<code>channel</code>，完成业务处理</li>
</ul>
<h4 id="1-2-3-编程"><a href="#1-2-3-编程" class="headerlink" title="1.2.3 编程"></a>1.2.3 编程</h4><blockquote>
<p>将数据写入到本地文件</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String s)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建输出流 ——&gt; channel</span></span><br><span class="line">    FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:\\Java\\Test\\K1.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 fileOutputStream 获取 对应的 FileChannel</span></span><br><span class="line">    <span class="comment">// 这个 fileChannel 真实类型是  FileChannelImpl</span></span><br><span class="line">    FileChannel fileChannel = fileOutputStream.getChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个缓冲区 ByteBuffer</span></span><br><span class="line">    ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 s 放入 byteBuffer</span></span><br><span class="line">    byteBuffer.put(s.getBytes());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对 byteBuffer 进行flip</span></span><br><span class="line">    byteBuffer.flip();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 byteBuffer 数据写入到 fileChannel</span></span><br><span class="line">    fileChannel.write(byteBuffer);</span><br><span class="line">    fileOutputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>从本地文件读取数据</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建文件的输入流</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(path);</span><br><span class="line">    FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过 fileInputStream 获取对应的 FileChannel ——&gt;  实际类型 FileChannelImpl</span></span><br><span class="line">    FileChannel fileChannel = fileInputStream.getChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个缓冲区ByteBuffer</span></span><br><span class="line">    ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 通道的数据 读入到 Buffer</span></span><br><span class="line">    fileChannel.read(byteBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将byteBuffer的字节数据转成字符串</span></span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(byteBuffer.array()));</span><br><span class="line">    fileInputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>拷贝文件</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copy</span><span class="params">(String source, String destination)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(source);</span><br><span class="line">    FileChannel fileChannel1 = fileInputStream.getChannel();</span><br><span class="line"></span><br><span class="line">    FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(destination);</span><br><span class="line">    FileChannel fileChannel2 = fileOutputStream.getChannel();</span><br><span class="line"></span><br><span class="line">    ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 复位，重置标志位</span></span><br><span class="line">        byteBuffer.clear();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> read = fileChannel1.read(byteBuffer);</span><br><span class="line">        <span class="keyword">if</span> (read == -<span class="number">1</span>) &#123;<span class="comment">// 表示读完</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将buffer中的数据写入到fileChannel02 -- K2.txt</span></span><br><span class="line">        byteBuffer.flip();</span><br><span class="line">        fileChannel2.write(byteBuffer);</span><br><span class="line">    &#125;</span><br><span class="line">    fileOutputStream.close();</span><br><span class="line">    fileInputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用transferFrom完成拷贝</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">copyImage</span><span class="params">(String fromPath, String toPath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 创建相关流</span></span><br><span class="line">    FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(fromPath);</span><br><span class="line">    FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(toPath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取Channel</span></span><br><span class="line">    FileChannel sourceChannel = fileInputStream.getChannel();</span><br><span class="line">    FileChannel destinChannel = fileOutputStream.getChannel();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用transferFrom完成拷贝</span></span><br><span class="line">    destinChannel.transferFrom(sourceChannel, <span class="number">0</span>, sourceChannel.size());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭相关流</span></span><br><span class="line">    sourceChannel.close();</span><br><span class="line">    destinChannel.close();</span><br><span class="line">    fileInputStream.close();</span><br><span class="line">    fileOutputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>buffer数组完成读写操作</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Scattering: 将数据写入到buffer时，可以采用buffer数组，依次写入[分散]</span></span><br><span class="line"><span class="comment">// Gathering: 从buffer读取数据时，可以采用buffer数组，依次读取[聚集]</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScatteringAndGatheringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 使用ServerSocketChannel 和 SocketChannel 网络</span></span><br><span class="line">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        InetSocketAddress inetSocketAddress = <span class="keyword">new</span> InetSocketAddress(<span class="number">7000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绑定端口到Socket，并启动</span></span><br><span class="line">        serverSocketChannel.socket().bind(inetSocketAddress);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建buffer数组</span></span><br><span class="line">        ByteBuffer[] byteBuffers = <span class="keyword">new</span> ByteBuffer[<span class="number">2</span>];</span><br><span class="line">        byteBuffers[<span class="number">0</span>] = ByteBuffer.allocate(<span class="number">5</span>);</span><br><span class="line">        byteBuffers[<span class="number">1</span>] = ByteBuffer.allocate(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等客户端连接</span></span><br><span class="line">        SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class="line">        <span class="keyword">int</span> messageLength = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环的读取</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> byteRead = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (byteRead &lt; messageLength) &#123;</span><br><span class="line">                <span class="keyword">long</span> l = socketChannel.read(byteBuffers);</span><br><span class="line">                byteRead  += l;</span><br><span class="line">                System.out.println(<span class="string">&quot;byteRead = &quot;</span> + byteRead);</span><br><span class="line">                Arrays.asList(byteBuffers)</span><br><span class="line">                        .stream()</span><br><span class="line">                        .map(buffer -&gt; <span class="string">&quot;position = &quot;</span></span><br><span class="line">                                + buffer.position()</span><br><span class="line">                                + <span class="string">&quot;, limit = &quot;</span></span><br><span class="line">                                + buffer.limit())</span><br><span class="line">                        .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将所有的buffer反转</span></span><br><span class="line">                Arrays.asList(byteBuffers).forEach(buffer -&gt; buffer.flip());</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将数据读出显示到客户端</span></span><br><span class="line">                <span class="keyword">long</span> byteWrite = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (byteWrite &lt; messageLength) &#123;</span><br><span class="line">                    socketChannel.write(byteBuffers);</span><br><span class="line">                    byteWrite += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将所欲的buffer进行clear</span></span><br><span class="line">                Arrays.asList(byteBuffers).forEach(buffer -&gt; &#123;</span><br><span class="line">                    buffer.clear();</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                System.out.println(</span><br><span class="line">                                <span class="string">&quot;byteRead = &quot;</span> + byteRead</span><br><span class="line">                                + <span class="string">&quot;, byteWrite = &quot;</span> + byteWrite</span><br><span class="line">                                + <span class="string">&quot;, messageLength = &quot;</span> + messageLength);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-2-4-实例"><a href="#1-2-4-实例" class="headerlink" title="1.2.4 实例"></a>1.2.4 实例</h4><p><strong>群聊系统Demo</strong></p>
<p>编码步骤：</p>
<ol>
<li>当客户端连接时，会通过<code>ServerSocketChannel</code> 得到 SocketChannel</li>
<li>Selector 进行监听 select 方法, 返回有事件发生的通道的个数.</li>
<li>将socketChannel注册到Selector上, register(Selector sel, int ops), 一个selector上可以注册多个SocketChannel</li>
<li>注册后返回一个 SelectionKey, 会和该Selector 关联(集合)</li>
<li>进一步得到各个 SelectionKey (有事件发生)</li>
<li>在通过 SelectionKey 反向获取 SocketChannel , 方法 channel()</li>
<li>判断该Channel的事件类型，对不同事件进行不同的业务处理</li>
</ol>
<blockquote>
<p>NIOServer</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.nio.groupchat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/9/19 22:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(GroupChatServer.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServerSocketChannel listenChannel;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">3333</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GroupChatServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1、获取选择器</span></span><br><span class="line">            selector = Selector.open();</span><br><span class="line">            <span class="comment">// 2、获取通道</span></span><br><span class="line">            listenChannel = ServerSocketChannel.open();</span><br><span class="line">            <span class="comment">// 3、绑定端口</span></span><br><span class="line">            listenChannel.socket().bind(<span class="keyword">new</span> InetSocketAddress(PORT));</span><br><span class="line">            <span class="comment">// 4、设置非阻塞</span></span><br><span class="line">            listenChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">            <span class="comment">// 5、将通道注册到选择器，注册操作：“接收”</span></span><br><span class="line">            listenChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.info(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 6、采用轮询的方式，查询获取“准备就绪”的注册过的操作</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> count = selector.select();</span><br><span class="line">                <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 7、获取当前选择器中所有注册的选择键</span></span><br><span class="line">                    Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class="line">                    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                        <span class="comment">// 8、获取“准备就绪”的时间</span></span><br><span class="line">                        SelectionKey selectionKey = iterator.next();</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 9、判断selectionKey是具体的什么事件</span></span><br><span class="line">                        <span class="comment">// 监听到accept事件</span></span><br><span class="line">                        <span class="keyword">if</span> (selectionKey.isAcceptable()) &#123;</span><br><span class="line">                            <span class="comment">// 10、若接受的事件是“接收就绪”操作，就获取客户端连接</span></span><br><span class="line">                            SocketChannel socketChannel = listenChannel.accept();</span><br><span class="line">                            <span class="comment">// 11、切换为非阻塞模式</span></span><br><span class="line">                            socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">                            <span class="comment">// 将该通道注册到选择器上</span></span><br><span class="line">                            socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">                            log.info(<span class="string">&quot;[&quot;</span> + socketChannel.getRemoteAddress().toString().substring(<span class="number">1</span>) + <span class="string">&quot;]上线&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 监听到read事件</span></span><br><span class="line">                        <span class="keyword">if</span> (selectionKey.isReadable()) &#123;</span><br><span class="line">                            <span class="comment">// 处理读 (专门方法)</span></span><br><span class="line">                            readMessage(selectionKey);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// end：移除选择键，防止重复操作</span></span><br><span class="line">                        iterator.remove();</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;等待····&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取客户端消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readMessage</span><span class="params">(SelectionKey selectionKey)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义一个 SocketChannel</span></span><br><span class="line">        SocketChannel socketChannel = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 13、获取该选择器上的“读就绪”状态的通道</span></span><br><span class="line">            socketChannel = (SocketChannel) selectionKey.channel();</span><br><span class="line">            <span class="comment">// 14、读取数据</span></span><br><span class="line">            ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> count = socketChannel.read(buffer);</span><br><span class="line">            <span class="comment">// 根据count的h值做处理</span></span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 把缓存区的数据转成字符串</span></span><br><span class="line">                String msg = <span class="keyword">new</span> String(buffer.array());</span><br><span class="line">                <span class="comment">// 输出该消息</span></span><br><span class="line">                log.info(<span class="string">&quot;客户端-&quot;</span> + msg);</span><br><span class="line">                <span class="comment">// 向其他客户端转发消息(排除自己)，专门写一个方法来处理</span></span><br><span class="line">                sendMessageToOtherClients(msg, socketChannel);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;[&quot;</span> + socketChannel.getRemoteAddress().toString().substring(<span class="number">1</span>) + <span class="string">&quot;]离线&quot;</span>);</span><br><span class="line">                <span class="comment">// 取消注册</span></span><br><span class="line">                selectionKey.cancel();</span><br><span class="line">                <span class="comment">// 关闭通道</span></span><br><span class="line">                socketChannel.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioException) &#123;</span><br><span class="line">                log.error(e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转发消息给其他客户</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMessageToOtherClients</span><span class="params">(String msg, SocketChannel self)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;服务器转发消息&quot;</span>);</span><br><span class="line">        <span class="comment">// 遍历所有注册到 selector 上的SocketChannel，并排除self</span></span><br><span class="line">        <span class="keyword">for</span> (SelectionKey key : selector.keys()) &#123;</span><br><span class="line">            <span class="comment">// 通过 key 取出 对应的 SocketChannel</span></span><br><span class="line">            Channel targetChannel = key.channel();</span><br><span class="line">            <span class="comment">// 排除自己</span></span><br><span class="line">            <span class="keyword">if</span> (targetChannel <span class="keyword">instanceof</span> SocketChannel &amp;&amp; targetChannel != self) &#123;</span><br><span class="line">                <span class="comment">// 转型</span></span><br><span class="line">                SocketChannel dest = (SocketChannel) targetChannel;</span><br><span class="line">                <span class="comment">// 将msg存储到buffer</span></span><br><span class="line">                ByteBuffer byteBuffer = ByteBuffer.wrap(msg.getBytes());</span><br><span class="line">                <span class="comment">// 将buffer的数据写入通道</span></span><br><span class="line">                dest.write(byteBuffer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建服务器对象</span></span><br><span class="line">        GroupChatServer groupChatServer = <span class="keyword">new</span> GroupChatServer();</span><br><span class="line">        groupChatServer.listen();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>NIOClient</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.nio.groupchat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/9/20 0:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger log = Logger.getLogger(GroupChatClient.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String HOST = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>    PORT = <span class="number">3333</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SocketChannel socketChannel;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GroupChatClient</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        selector = Selector.open();</span><br><span class="line">        <span class="comment">// 连接服务器</span></span><br><span class="line">        socketChannel = socketChannel.open(<span class="keyword">new</span> InetSocketAddress(HOST, PORT));</span><br><span class="line">        <span class="comment">// 设置非阻塞</span></span><br><span class="line">        socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 将socketChannel注册到selector</span></span><br><span class="line">        socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">        <span class="comment">// 得到username</span></span><br><span class="line">        username = socketChannel.getLocalAddress().toString().substring(<span class="number">1</span>);</span><br><span class="line">        log.info(<span class="string">&quot;[&quot;</span> + username + <span class="string">&quot;]已就绪···&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向服务器发送消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        msg = username + <span class="string">&quot;: &quot;</span> + msg;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socketChannel.write(ByteBuffer.wrap(msg.getBytes()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从服务器回复的消息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> readChannels = selector.select();</span><br><span class="line">            <span class="keyword">if</span> (readChannels &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class="line">                <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                    SelectionKey key = iterator.next();</span><br><span class="line">                    <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">                        <span class="comment">// 得到相关的通道</span></span><br><span class="line">                        SocketChannel socketChannel = (SocketChannel) key.channel();</span><br><span class="line">                        <span class="comment">// 得到一个buffer</span></span><br><span class="line">                        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">                        <span class="comment">// 读取</span></span><br><span class="line">                        socketChannel.read(buffer);</span><br><span class="line">                        <span class="comment">// 把读到的缓冲区的数据转成字符串</span></span><br><span class="line">                        String msg = <span class="keyword">new</span> String(buffer.array());</span><br><span class="line">                        log.info(msg);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 删除当前 SelectionKey</span></span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//log.error(&quot;无可用的通道···&quot;);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// 启动客户端</span></span><br><span class="line">        GroupChatClient chatClient = <span class="keyword">new</span> GroupChatClient();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动一个线程，每隔3秒，读取从服务器</span></span><br><span class="line">        <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    chatClient.readMessage();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.currentThread().sleep(<span class="number">3000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        System.err.println(e.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送数据给服务器</span></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">            String s = scanner.nextLine();</span><br><span class="line">            chatClient.sendMessage(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="1-2-5-零拷贝"><a href="#1-2-5-零拷贝" class="headerlink" title="1.2.5 零拷贝"></a>1.2.5 零拷贝</h4><blockquote>
<p>说明</p>
</blockquote>
<ul>
<li><p>零拷贝，是从OS(操作系统)的角度来说的。因为内核缓冲区之间，没有数据是重复的</p>
</li>
<li><p>零拷贝不仅仅带来更少的数据复制，还能带来其他的性能优势，更少的CPU缓存伪共享以及无CPU校验和计算</p>
</li>
</ul>
<blockquote>
<p>mmap</p>
</blockquote>
<ul>
<li>mmap通过内存映射，将文件映射到内核缓冲区，同时，用户空间可以共享内核空间的数据。这样，在进行网络传输时，就可以减少内核空间到用户空间的拷贝次数</li>
</ul>
<blockquote>
<p>mmap和sendFile的区别</p>
</blockquote>
<ul>
<li>mmp适合小数据量读写，sendFile适合大文件传输</li>
<li>mmap需要4次上下文切换，3次数据拷贝；sendFile需要3次上下文切换，最少2次数据拷贝</li>
<li>sendFile可以利用DMA(direct memory access: 直接内存拷贝)方式，减少CPU拷贝，mmap则不能(必须从内核拷贝到Socket缓冲区)</li>
</ul>
<h2 id="2-概述"><a href="#2-概述" class="headerlink" title="2. 概述"></a>2. 概述</h2><p>官网: <a href="https://netty.io/">Netty.io</a></p>
<h3 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h3><p>Netty是一个异步事件驱动的网络应用程序框架，用于快速开发可维护的高性能协议服务器和客户端。</p>
<h3 id="1-2-设计"><a href="#1-2-设计" class="headerlink" title="1.2 设计"></a>1.2 设计</h3><ul>
<li>适用于各种传输类型的统一API-阻塞和非阻塞套接字</li>
<li>基于灵活且可扩展的事件模型，可将关注点明确分离</li>
<li>高度可定制的线程模型-单线程，一个或多个线程池，例如SEDA</li>
<li>真正的无连接数据报套接字支持（从3.1开始）</li>
</ul>
<h3 id="1-3-性能"><a href="#1-3-性能" class="headerlink" title="1.3 性能"></a>1.3 性能</h3><ul>
<li>更高的吞吐量，更低的延迟</li>
<li>减少资源消耗</li>
<li>减少不必要的内存复制</li>
</ul>
<h3 id="1-4-架构"><a href="#1-4-架构" class="headerlink" title="1.4 架构"></a>1.4 架构</h3><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/1c6ba3e2/image-20200921092848809.png" class="" title="image-20200921092848809">



<h2 id="3-Reactor"><a href="#3-Reactor" class="headerlink" title="3. Reactor"></a>3. Reactor</h2><h3 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h3><blockquote>
<p>反应器模式  |  分发者模式  |  通知者模式</p>
</blockquote>
<ul>
<li>基于I/O复用模型: 多个连接共用一个阻塞对象，应用程序只需要再一个阻塞对象等待，无需阻塞等待所有连接。当某个连接有新的数据可以处理时，操作系统通知应用程序，线程从阻塞状态返回，开始进行业务处理</li>
<li>基于线程池复用线程资源: 不必再为每个连接创建线程，键连接完成后的业务处理热舞分配给线程进行处理，一个线程可以处理多个连接的业务</li>
</ul>
<h3 id="2-2-组成"><a href="#2-2-组成" class="headerlink" title="2.2 组成"></a>2.2 组成</h3><ul>
<li>Reactor: Reactor在一个单独的线程中运行，负责监听和分发事件，分发给适当的处理程序来对IO事件做出反应。</li>
<li>Handlers: 处理程序执行I/O事件要完成的实际事件。Reactor通过调度适当的处理程序来响应I/O事件，处理程序执行非阻塞操作。</li>
</ul>
<h3 id="2-3-分类"><a href="#2-3-分类" class="headerlink" title="2.3 分类"></a>2.3 分类</h3><ul>
<li>单Reactor单线程        ━━━━━▶    前台接待员和服务员是同一个人，全程为顾客服务</li>
<li>单Reactor多线程        ━━━━━▶    1个前台接待员，多个服务员，接待员只负责接待</li>
<li>主从Reactor多线程    ━━━━━▶    多个前台接待员，多个服务生</li>
</ul>
<h4 id="2-2-1-单Reactor单线程"><a href="#2-2-1-单Reactor单线程" class="headerlink" title="2.2.1 单Reactor单线程"></a>2.2.1 单Reactor单线程</h4><blockquote>
<p>图示</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/1c6ba3e2/image-20200921181936951.png" class="" title="image-20200921181936951">

<blockquote>
<p>分析</p>
</blockquote>
<ol>
<li>优点：模型简单，没有多线程、进程通信、竞争的问题，全部都在一个线程中完成</li>
<li>缺点：性能问题，只有一个线程，无法发挥多核CPU的性能。<code>Handler</code>在处理某个连接上的业务时，整个进程无法处理其他连接事件，很容易导致性能瓶颈</li>
<li>缺点：可靠性问题，线程意外终止，或者进入死循环，会导致整个系统通信模块不可用，不能接收和处理外部消息，造成节点故障</li>
<li>使用场景：客户端的数量有限，业务处理非常快速</li>
</ol>
<h4 id="2-2-2-单Reactor多线程"><a href="#2-2-2-单Reactor多线程" class="headerlink" title="2.2.2 单Reactor多线程"></a>2.2.2 单Reactor多线程</h4><blockquote>
<p>图示</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/1c6ba3e2/image-20200921182914960.png" class="" title="image-20200921182914960">

<blockquote>
<p>方案说明</p>
</blockquote>
<ol>
<li><code>Reactor</code>对象通过<code>select</code>监控客户端请求事件，收到事件后，通过<code>dispatch</code>进行分发</li>
<li>如果建立连接请求，则由<code>Acceptor</code>通过<code>accept</code>处理连接请求，然后从黄健一个Handler对象处理完成连接后的各种事件</li>
<li>如果不是连接请求，则由<code>Reactor</code>分发调用连接对应的<code>handler</code>读取数据后，会分发给后面的<code>Worker</code>线程池的某个线程处理业务</li>
<li><code>Handler</code>只负责响应事件，不做具体的业务处理，通过<code>read</code>读取数据后，会分发给后面的<code>worker</code>线程池的某个线程处理业务</li>
<li><code>Worker</code>线程池会分配独立线程完成真正的业务，并将结果返回给<code>Handler</code></li>
<li><code>Handler</code>收到响应后，通过<code>send</code>将结果返回给<code>Client</code></li>
</ol>
<blockquote>
<p>分析</p>
</blockquote>
<ol>
<li>优点：可以充分的利用多核<code>CPU</code>的处理能力</li>
<li>缺点：多线程数据共享和访问比较复杂，<code>Reactor</code>处理所有的事件的监听和响应，在单线程运行，在高并发场景容易成为性能瓶颈</li>
</ol>
<h4 id="2-2-3-主从Reactor多线程"><a href="#2-2-3-主从Reactor多线程" class="headerlink" title="2.2.3 主从Reactor多线程"></a>2.2.3 主从Reactor多线程</h4><blockquote>
<p>图示</p>
</blockquote>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/1c6ba3e2/image-20200921191731035.png" class="" title="image-20200921191731035">

<blockquote>
<p>方案说明</p>
</blockquote>
<ol>
<li><code>Reactor</code>主线程<code>MainReactor</code>对象通过<code>select</code>监听连接事件，收到事件后，通过<code>Acceptor</code>处理连接事件</li>
<li>当<code>Acceptor</code>处理连接事件后，<code>MainReactor</code>将连接分配给<code>SubReactor</code></li>
<li><code>SubReactor</code>将连接加入到连接队列进行监听，并创建<code>Handler</code>进行各种事件处理</li>
<li>当有新事件发生时，<code>SubReactor</code>就会调用对应的Handler处理</li>
<li><code>Worker</code>线程池分配独立的<code>Worker</code>线程进行业务处理，并返回结果</li>
<li><code>Handler</code>收到响应的结果后，再通过<code>send</code>将结果返回给<code>Client</code></li>
<li><code>Reactor</code>主线程可以对于多个<code>Reactor</code>子线程，即<code>MainReactor</code>，可以关联多个<code>SubReactor</code></li>
</ol>
<blockquote>
<p>分析</p>
</blockquote>
<ol>
<li><p>优点：父线程与子线程的职责明确，父线程只需要接收新连接，子线程完成后续的业务处理</p>
</li>
<li><p>优点：父线程与子线程的数据交互简单，<code>Reactor</code>主线程只需要把新连接传给子线程，子线程无需返回数据</p>
</li>
<li><p>缺点：编程复杂度较高</p>
</li>
</ol>
<h3 id="2-4-优点"><a href="#2-4-优点" class="headerlink" title="2.4 优点"></a>2.4 优点</h3><ul>
<li>响应快，不必为单个同步时间所阻塞，虽然<code>Reactor</code>本身依然是同步的</li>
<li>可以最大程度的比曼复杂的多线程及同步问题，并且避免了多线程/进程的切换开销</li>
<li>扩展性好，可以方便的通过增加<code>Reactor</code>实例个数来充分利用CPU资源</li>
<li>复用性好，<code>Reactor</code>模型本身与具体事件处理逻辑无关，具有很高的复用性</li>
</ul>
<h2 id="4-架构"><a href="#4-架构" class="headerlink" title="4. 架构"></a>4. 架构</h2><h3 id="3-1-图示"><a href="#3-1-图示" class="headerlink" title="3.1 图示"></a>3.1 图示</h3><img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/1c6ba3e2/image-20200921204851799.png" class="" title="image-20200921204851799">

<h3 id="3-2-说明"><a href="#3-2-说明" class="headerlink" title="3.2 说明"></a>3.2 说明</h3><ol>
<li><code>Netty</code>抽象出两组线程池<code>BossGroup</code>专门负责接收客户端的连接，<code>WorkerGroup</code>专门负责网络的读写</li>
<li><code>BossGroup</code>和<code>WorkerGroup</code>类型的本质都是<code>NioEventLoopGroup</code></li>
<li><code>NioEventLoopGroup</code>相当于一个事件循环组，这个组中含有多个事件循环，每一个事件循环是<code>NioEventLoop</code></li>
<li><code>NioEventLoop</code>表示一个不断循环的执行处理任务的线程，每个<code>NioEventLoop</code>都有一个<code>selector</code>，用于监听绑定在其上的socket的网络通讯</li>
<li><code>NioEventLoopGroup</code>可以有多个线程，即可以含有多个<code>NioEventLoop</code></li>
<li>每个<code>Boss NioEventLoop</code>循环执行的步骤有三步:<ol>
<li>轮询<code>accept</code>事件</li>
<li>处理<code>accept</code>事件，与<code>client</code>建立连接，生成<code>NioSocketChannel</code>，并将其注册到某个<code>Worker NioEventLoop</code>上的<code>selector</code></li>
<li>处理任务队列的任务，即<code>runAllTasks</code></li>
</ol>
</li>
<li>每个<code>Worker NIOEventLoop</code>循环执行的步骤<ol>
<li>轮询<code>read</code>、<code>write</code>事件</li>
<li>处理i/o事件，即<code>read</code>、<code>write</code>事件，在对应<code>NioSocketChannel</code>处理</li>
<li>处理任务队列的任务，即<code>runAllTasks</code></li>
</ol>
</li>
</ol>
<h3 id="3-3-代码示例"><a href="#3-3-代码示例" class="headerlink" title="3.3 代码示例"></a>3.3 代码示例</h3><blockquote>
<p>NettyServer.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.*;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/9/21 21:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 创建BossGroup 和 WorkerGroup</span></span><br><span class="line"><span class="comment">         * 说明：</span></span><br><span class="line"><span class="comment">         * 1、创建两个线程组：bossGroup 和 workerGroup</span></span><br><span class="line"><span class="comment">         * 2、bossGroup处理连接请求</span></span><br><span class="line"><span class="comment">         * 3、workerGroup处理和客户端的业务</span></span><br><span class="line"><span class="comment">         * 4、两个都是无限循环</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        NioEventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建服务器端的启动对象，配置参数</span></span><br><span class="line">            ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用链式编程来进行设置</span></span><br><span class="line">            bootstrap.group(workerGroup, workerGroup)                         <span class="comment">// 设置两个线程组</span></span><br><span class="line">                    .channel(NioServerSocketChannel.class)                    <span class="comment">// 使用NioSocketChannel作为服务器的通道实现</span></span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>)              <span class="comment">// 设置线程队列得到连接个数</span></span><br><span class="line">                    .childOption(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>)      <span class="comment">// 设置保持活动连接状态</span></span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;   <span class="comment">// 创建一个通道测试对象</span></span><br><span class="line">                        <span class="comment">// 给Pipeline设置处理器</span></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            socketChannel.pipeline().addLast(<span class="keyword">new</span> NettyServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);  <span class="comment">// 给workerGroup的EventLoop对应的管道设置处理器</span></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;服务器已就绪···&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 绑定一个端口并且同步</span></span><br><span class="line">            <span class="comment">// 绑定端口并启动服务器</span></span><br><span class="line">            ChannelFuture channelFuture = bootstrap.bind(<span class="number">3333</span>).sync();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 对关闭通道进行监听</span></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>NettyHandler.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/9/21 22:20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：</span></span><br><span class="line"><span class="comment"> * 自定义一个Handler需要继承Netty规定好的某个HandlerAdapter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取数据事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx 上下文对象，含有管道pipline[处理数据]，通道channel[传输数据]，地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 客户端发送的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;server ctx = &quot;</span> + ctx);</span><br><span class="line">        <span class="comment">// 将msg转成ByteBuffer</span></span><br><span class="line">        ByteBuf byteBuf = (ByteBuf) msg;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端发送消息：&quot;</span> + byteBuf.toString(CharsetUtil.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端地址：&quot;</span> + ctx.channel().remoteAddress());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据读取完毕</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 将数据写入到缓存，并刷新</span></span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;Hello, 客户端~&quot;</span>, CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(cause.getMessage());</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>NettyClient.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/9/21 22:20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 说明：</span></span><br><span class="line"><span class="comment"> * 自定义一个Handler需要继承Netty规定好的某个HandlerAdapter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取数据事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx 上下文对象，含有管道pipline[处理数据]，通道channel[传输数据]，地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 客户端发送的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;server ctx = &quot;</span> + ctx);</span><br><span class="line">        <span class="comment">// 将msg转成ByteBuffer</span></span><br><span class="line">        ByteBuf byteBuf = (ByteBuf) msg;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端发送消息：&quot;</span> + byteBuf.toString(CharsetUtil.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端地址：&quot;</span> + ctx.channel().remoteAddress());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据读取完毕</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 将数据写入到缓存，并刷新</span></span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;Hello, 客户端~&quot;</span>, CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(cause.getMessage());</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>NettyClientHandler.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.simple;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.CharsetUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/9/22 19:09</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通道就绪-&gt;触发</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;client &quot;</span> +  ctx);</span><br><span class="line">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class="string">&quot;Hello, server~喵&quot;</span>, CharsetUtil.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有读取事件时-&gt;触发</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteBuf byteBuf = (ByteBuf) msg;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器回复消息：&quot;</span> + byteBuf.toString(CharsetUtil.UTF_8));</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器的地址：&quot;</span> + ctx.channel().remoteAddress());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(cause.getMessage());</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-4-任务队列"><a href="#3-4-任务队列" class="headerlink" title="3.4 任务队列"></a>3.4 任务队列</h3><p>任务队列中的<code>Task</code>有三种典型使用场景</p>
<ul>
<li>用户程序自定义的普通任务</li>
<li>用户自定义定时任务</li>
<li>非当前<code>Reactor</code>线程调用<code>Channel</code>的各种方法</li>
</ul>
<h3 id="3-5-异步模型"><a href="#3-5-异步模型" class="headerlink" title="3.5 异步模型"></a>3.5 异步模型</h3><h4 id="3-5-1-基本介绍"><a href="#3-5-1-基本介绍" class="headerlink" title="3.5.1 基本介绍"></a>3.5.1 基本介绍</h4><ol>
<li>异步的概念和同步相对。当一个异步过程调用发出后，调用者不能立刻得到结果。实际处理这个调用的组件在完成后，通过状态、通知和回调来通知调用者</li>
<li><code>Netty</code>中的I/O操作是异步的，包括<code>Bind</code>、<code>Write</code>、<code>Connect</code>等操作会简单的返回一个<code>ChannelFuture</code></li>
<li>调用者并不能理科获得结果，而是通过Future-Listener机制，用户可以方便的主动获取或者通过通知机制获得IO操作结果</li>
<li><code>Netty</code>的异步模型是建立在<code>future</code>和<code>callback</code>之上的。<code>callback</code>就是回调。重点是<code>future</code>，它的核心思想是：结社一个方法<code>fun</code>，计算过程可能非常耗时，等待<code>fun</code>返回显然不合适。那么可以在调用<code>fun</code>的时候立马返回一个<code>future</code>，后续可以通过<code>future</code>去监控方法<code>fun</code>的处理过程</li>
</ol>
<h4 id="3-5-2-Future说明"><a href="#3-5-2-Future说明" class="headerlink" title="3.5.2 Future说明"></a>3.5.2 Future说明</h4><ol>
<li><p>表示异步的执行结果，可以通过它提供的方法来检测执行是否完成</p>
</li>
<li><p><code>ChannelFuture</code>是一个接口: public interface ChannelFuture extends Future<Void></p>
<p>我们可以添加监听器，当监听的事件发生时，就会通知到监听器</p>
</li>
</ol>
<h4 id="3-5-3-Future-Listener机制"><a href="#3-5-3-Future-Listener机制" class="headerlink" title="3.5.3 Future-Listener机制"></a>3.5.3 Future-Listener机制</h4><ol>
<li><p>当<code>future</code>对象刚刚创建时，处于非完成状态，调用者可以通过返回的<code>ChannelFuture</code>来获取操作执行的状态，注册监听函数来执行完成后的操作</p>
</li>
<li><p>常见操作：</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">isDone()</td>
<td align="center">判断当前操作是否完成</td>
</tr>
<tr>
<td align="center">isSuccess()</td>
<td align="center">判断已完成的当前操作是否成功</td>
</tr>
<tr>
<td align="center">getCause()</td>
<td align="center">获取已完成的当前操作失败的原因</td>
</tr>
<tr>
<td align="center">isCancelled()</td>
<td align="center">判断已完成的当前操作是否被取消</td>
</tr>
<tr>
<td align="center">addListener()</td>
<td align="center">注册监听器，当操作已完成(isDone返回完成)，将会通知指定的监听器；如果Future对象已完成，则通知指定的监听器</td>
</tr>
</tbody></table>
</li>
</ol>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 绑定一个端口并且同步</span></span><br><span class="line"><span class="comment">// 绑定端口并启动服务器</span></span><br><span class="line">ChannelFuture CF = bootstrap.bind(<span class="number">3333</span>).sync();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给CF注册监听器</span></span><br><span class="line">CF.addListener(<span class="keyword">new</span> ChannelFutureListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(ChannelFuture channelFuture)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CF.isSuccess()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;服务器监听端口[3333]成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;服务器监听端口[3333]失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="3-6-Http服务"><a href="#3-6-Http服务" class="headerlink" title="3.6 Http服务"></a>3.6 Http服务</h3><blockquote>
<p>TestServer.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/9/26 10:34</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            serverBootstrap.group(bossGroup, workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> TestServerInitializer());</span><br><span class="line"></span><br><span class="line">            ChannelFuture CF = serverBootstrap.bind(<span class="number">3333</span>).sync();</span><br><span class="line"></span><br><span class="line">            CF.channel().closeFuture().sync();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>TestServerInitializer.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelPipeline;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.http.HttpServerCodec;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/9/26 10:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServerInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 向管道加入处理器</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到管道</span></span><br><span class="line">        ChannelPipeline pipeline = socketChannel.pipeline();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加入一个Netty提供的HttpServerCodeC codec =&gt; [coder - decoder]</span></span><br><span class="line">        <span class="comment">// 1、HttpServerCodeC: 处理http的编&amp;解码器</span></span><br><span class="line">        pipeline.addLast(<span class="string">&quot;MyHttpServerCodec&quot;</span>, <span class="keyword">new</span> HttpServerCodec());</span><br><span class="line">        <span class="comment">// 2、增加一个自定义handler</span></span><br><span class="line">        pipeline.addLast(<span class="string">&quot;MyTestServerHandler&quot;</span>, <span class="keyword">new</span> TestHttpServerHandler());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>TestHttpServerHandler.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelPipeline;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.http.HttpServerCodec;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/9/26 10:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServerInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 向管道加入处理器</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到管道</span></span><br><span class="line">        ChannelPipeline pipeline = socketChannel.pipeline();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加入一个Netty提供的HttpServerCodeC codec =&gt; [coder - decoder]</span></span><br><span class="line">        <span class="comment">// 1、HttpServerCodeC: 处理http的编&amp;解码器</span></span><br><span class="line">        pipeline.addLast(<span class="string">&quot;MyHttpServerCodec&quot;</span>, <span class="keyword">new</span> HttpServerCodec());</span><br><span class="line">        <span class="comment">// 2、增加一个自定义handler</span></span><br><span class="line">        pipeline.addLast(<span class="string">&quot;MyTestServerHandler&quot;</span>, <span class="keyword">new</span> TestHttpServerHandler());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="5-核心"><a href="#5-核心" class="headerlink" title="5. 核心"></a>5. 核心</h2><h3 id="4-1-BootStrap、ServerBootStrap"><a href="#4-1-BootStrap、ServerBootStrap" class="headerlink" title="4.1 BootStrap、ServerBootStrap"></a>4.1 BootStrap、ServerBootStrap</h3><blockquote>
<p>说明</p>
</blockquote>
<p><code>BootStrap</code>意思是引导程序，一个<code>Netty</code>应用通常由一个<code>BootStrap</code>开始，主要作用是配置整个<code>Netty</code>程序，串联各个组件，<code>Netty</code>中<code>BootStrap</code>类是客户端程序的启动引导类，<code>ServerBootStrap</code>是服务器端启动引导类</p>
<blockquote>
<p>常用方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法名称</th>
<th align="center">方法介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">public ServerBootStrap group(EventLoopGroup parentGroup, EventLoopGroup childGroup)</td>
<td align="center">该方法用于服务器端，用来设置两个EventLoop</td>
</tr>
<tr>
<td align="center">public B group(EventLoopGroup group)</td>
<td align="center">该方法用于客户端，用来设置一个EventLoop</td>
</tr>
<tr>
<td align="center">public B channel(Class&lt;? extends C&gt; channelClass)</td>
<td align="center">该方法用来设置一个服务器端的通道实现</td>
</tr>
<tr>
<td align="center">public <T> B option(ChannelOption<T> option, T value)</td>
<td align="center">用来给ServerChannel添加配置</td>
</tr>
<tr>
<td align="center">public  ServerBootstrap childOption(ChannelOption childOption, T value)</td>
<td align="center">用来给接收到的通道添加配置</td>
</tr>
<tr>
<td align="center">public ServerBootstrap childHandler(ChannelHandler childHandler)</td>
<td align="center">该方法用来设置业务处理类(自定义的handler)</td>
</tr>
<tr>
<td align="center">public ChannelFuture bind(int inetPort)</td>
<td align="center">该方法用于服务器端，用来设置占用的端口号</td>
</tr>
<tr>
<td align="center">public ChannelFuture connect(String inetHost, int inetPort)</td>
<td align="center">该方法用于客户端，用来连接服务器</td>
</tr>
</tbody></table>
<h3 id="4-2-Future、ChannelFuture"><a href="#4-2-Future、ChannelFuture" class="headerlink" title="4.2 Future、ChannelFuture"></a>4.2 Future、ChannelFuture</h3><blockquote>
<p>说明</p>
</blockquote>
<p><code>Netty</code>中所有的IO操作都是异步的，不能立刻得知消息是否被正确处理。但是可以过一会等它执行完或者直接注册一个监听，具体的实现就是通过<code>Future</code>和<code>ChannelFuture</code>，它们可以注册一个监听，当操作执行成功或失败时监听会自动触发注册的监听事件</p>
<blockquote>
<p>常用方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法名称</th>
<th align="center">方法介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Channel channel()</td>
<td align="center">返回当前正在进行IO操作的通道</td>
</tr>
<tr>
<td align="center">ChannelFuture sync()</td>
<td align="center">等待异步操作执行完毕，相当于将阻塞在当前</td>
</tr>
</tbody></table>
<h3 id="4-3-Channel"><a href="#4-3-Channel" class="headerlink" title="4.3 Channel"></a>4.3 Channel</h3><blockquote>
<p>说明</p>
</blockquote>
<ul>
<li><code>Netty</code>网络通信的组件，能够用于执行网络I/O操作</li>
<li>通过<code>Channel</code>可获得当前网络连接的通道的状态</li>
<li>通过<code>Channel</code>可获得网络连接的配置参数</li>
<li><code>Channel</code>通过异步的网络I/O操作(比如：建立连接、读写和绑定端口)，异步调用意味着任何I/O调用都将立即返回，并且不保证在调用结束时所请求的I/O操作已完成</li>
<li>调用立即返回一个<code>ChannelFuture</code>实例，通过注册器到<code>ChannelFuture</code>上，可以I/O操作成功、失败或取消时回调通知调用方 </li>
<li>支持关联I/O操作与对应的处理程序</li>
<li>不同协议、不同的阻塞类型的连接都有不同的<code>Channel</code>类型与之对应</li>
</ul>
<blockquote>
<p>常见Channel类型</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">NioSocketChannel</td>
<td align="center">异步的客户端TCP Socket连接</td>
</tr>
<tr>
<td align="center">NioServerSocketChannel</td>
<td align="center">异步的服务器端TCP Socket连接</td>
</tr>
<tr>
<td align="center">NioDatagramChannel</td>
<td align="center">异步的UDP连接</td>
</tr>
<tr>
<td align="center">NioSctpChannel</td>
<td align="center">异步的客户端Sctp连接</td>
</tr>
<tr>
<td align="center">NioSctpServerChannel</td>
<td align="center">异步的Sctp服务器端连接，这些通道涵盖了UDP和TCP网络I/O以及文件I/O</td>
</tr>
</tbody></table>
<h3 id="4-4-Selector"><a href="#4-4-Selector" class="headerlink" title="4.4 Selector"></a>4.4 Selector</h3><blockquote>
<p>说明</p>
</blockquote>
<ul>
<li><code>Netty</code>基于<code>Selector</code>对象实现I/O多路复用，通过<code>Selector</code>一个线程可以监听多个连接的<code>Channel</code>事件</li>
<li>当向一个<code>Selector</code>中注册<code>Channel</code>后，<code>Selector</code>内部的机制就可以自动不断地查询(<code>Select</code>)这些注册的<code>Channel</code>是否有已就绪的I/O事件(比如：可读、可写、网络连接完成等)，这样程序就可以很简单地使用一个线程高效地管理多个<code>Channel</code></li>
<li>同时，<code>Netty</code>中对<code>Selector</code>中的<code>selectedKey</code>集合进行了替换，它替换成了一个它自己实现的一个<code>set</code>集合，这样效率更高</li>
</ul>
<h3 id="4-5-ChannelHandler及其实现类"><a href="#4-5-ChannelHandler及其实现类" class="headerlink" title="4.5 ChannelHandler及其实现类"></a>4.5 ChannelHandler及其实现类</h3><blockquote>
<p>说明</p>
</blockquote>
<ul>
<li><p><code>ChannelHandler</code>是一个接口，处理I/O事件或拦截I/O操作，并将其转发到<code>ChannelPipeline</code>(业务处理链)中的下一个处理程序</p>
</li>
<li><p><code>ChannelHandler</code>本身并没有提供很多方法，因为这个接口有许多的方法需要实现，方便使用期间，可以继承它的子类</p>
</li>
<li><p>我们经常需要自定义一个<code>Handler</code>类取继承<code>ChannelInboundHandlerAdapter</code>，然后通过重写相应方法实现业务逻辑</p>
<p>一般需要重写的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChannelInboundHandlerAdapter</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> <span class="keyword">implements</span> <span class="title">ChannelInboundHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通道注册事件</span></span><br><span class="line">    <span class="meta">@Skip</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRegistered</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.fireChannelRegistered();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通道取消注册事件</span></span><br><span class="line">    <span class="meta">@Skip</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelUnregistered</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.fireChannelUnregistered();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通道就绪事件</span></span><br><span class="line">    <span class="meta">@Skip</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.fireChannelActive();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通道断联事件</span></span><br><span class="line">    <span class="meta">@Skip</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.fireChannelInactive();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通道读取数据事件</span></span><br><span class="line">    <span class="meta">@Skip</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.fireChannelRead(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通道数据读取完毕事件</span></span><br><span class="line">    <span class="meta">@Skip</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.fireChannelReadComplete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用法事件触发</span></span><br><span class="line">    <span class="meta">@Skip</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.fireUserEventTriggered(evt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通道可写性更改事件</span></span><br><span class="line">    <span class="meta">@Skip</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelWritabilityChanged</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.fireChannelWritabilityChanged();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通道发生异常事件</span></span><br><span class="line">    <span class="meta">@Skip</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;deprecation&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.fireExceptionCaught(cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>ChannelInboundHandler</code>  用于处理入站I/O事件</li>
<li><code>ChannelOutboundHandler</code>  用于处理出战I/O事件</li>
</ul>
<blockquote>
<p>适配器</p>
</blockquote>
</li>
<li><p><code>ChannelInboundHandlerAdapter</code> 用于处理入站 I/O 事件</p>
</li>
<li><p><code>ChannelOutboundHandlerAdapter</code> 用于处理出站 I/O 操作</p>
</li>
<li><p><code>ChannelDuplexHandler</code> 用于处理入站和出站事件</p>
</li>
</ul>
<h3 id="4-6-Pipeline、Channel"><a href="#4-6-Pipeline、Channel" class="headerlink" title="4.6 Pipeline、Channel"></a>4.6 Pipeline、Channel</h3><blockquote>
<p>说明</p>
</blockquote>
<ul>
<li><p><code>ChannelPipeline</code>是一个Handler的集合，它负责处理和拦截<code>inbound</code>和<code>outbound</code>的事件和操作，相当于一个贯穿<code>Netty</code>的链（通俗的讲：<code>ChannelPipeline</code>是保存<code>ChannelHandler</code>的<code>list</code>，用于处理或拦截<code>Channel</code>的入站事件和出战操作）</p>
</li>
<li><p><code>ChanenelPipline</code>实现了一种高级形式的拦截过滤器模式，使用户可以完全控制事件的处理方式，以及<code>Channel</code>中各个的<code>ChannelHandler</code>如何相互交互</p>
</li>
<li><p>在<code>Netty</code>中每个<code>Channel</code>都有且仅有一个<code>ChannelPipeline</code>与之对应，他们的组成关系如下</p>
<img src= "https://cdn.jsdelivr.net/gh/Khighness/cdn/common/loading.gif" data-lazy-src="/posts/1c6ba3e2/image-20201002192427279.png" class="" title="image-20201002192427279">
</li>
<li><p>一个<code>Channel</code>包含一个<code>ChannelPipeline</code>，而<code>ChannelPipeline</code>中又维护了一个由<code>ChannelHandlerContext</code>组成的双向链表，并且每个<code>ChannelHandlerContext</code>中又关联着一个<code>ChannelHandler</code></p>
</li>
<li><p>入站事件和出战事件在一个双向链表中，入站事件会从链表<code>head</code>往后传递到最后一个入站的handler，出站事件会从链表<code>tail</code>往前传递到最前一个出站的<code>handler</code>，两种类型的<code>handler</code>互不干扰</p>
</li>
</ul>
<blockquote>
<p>常用方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法名称</th>
<th align="center">方法介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ChannelPipeline addFirst(ChannelHandler… handlers)</td>
<td align="center">把一个业务处理类（handler）添加到链中的第一个位置</td>
</tr>
<tr>
<td align="center">ChannelPipeline addLast(ChannelHandler… handlers)</td>
<td align="center">把一个业务处理类（handler）添加到链中的最后一个位置</td>
</tr>
</tbody></table>
<h3 id="4-7-ChannelHandlerContext"><a href="#4-7-ChannelHandlerContext" class="headerlink" title="4.7 ChannelHandlerContext"></a>4.7 ChannelHandlerContext</h3><blockquote>
<p>说明</p>
</blockquote>
<ul>
<li>保存<code>Channel</code>相关的所有上下文信息，同时关联一个ChannelHandler对象</li>
<li>即<code>ChannelHandlerContext</code>中包含一个具体的事件处理器<code>ChannelHandler</code>，同时<code>ChannelHandlerContext</code>中也绑定了对应的<code>Pipeline</code>和<code>Channel</code>的信息，方便对<code>ChannelHandler</code>进行调用</li>
</ul>
<blockquote>
<p>常见方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法名称</th>
<th align="center">方法介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ChannelFuture close()</td>
<td align="center">关闭通道</td>
</tr>
<tr>
<td align="center">ChannelOutboundInvoker flush()</td>
<td align="center">刷新</td>
</tr>
<tr>
<td align="center">ChannelFuture writeAndFlush(Object msg)</td>
<td align="center">将数据写到ChannelPipeline中当前ChannelHandler的下一个ChannelHandler开始处理</td>
</tr>
</tbody></table>
<h3 id="4-8-ChannelOption"><a href="#4-8-ChannelOption" class="headerlink" title="4.8 ChannelOption"></a>4.8 ChannelOption</h3><blockquote>
<p>说明</p>
</blockquote>
<p><code>Netty</code>在创建<code>Channel</code>实例后，一般都需要设置<code>ChannelOption</code>参数</p>
<blockquote>
<p>参数如下：</p>
</blockquote>
<ul>
<li>ChannelOption.SO_BACKLOG:<ul>
<li>对应TCP/IP协议listen函数中的backlog参数，用来初始化服务器可连接队列大小</li>
<li>服务端处理客户端连接请求是顺序处理的，所以同一时间只能处理一个客户端连接。多个客户端来的时候，服务端将不能处理的客户端连接请求放在队列中等待处理，backlog参数指定了队列的大小</li>
</ul>
</li>
<li>ChannelOption.SO_KEEPALIVE:<ul>
<li>一直保持连接活动状态</li>
</ul>
</li>
</ul>
<h3 id="4-9-EventLoopGroup和其实现类NioEventLoopGroup"><a href="#4-9-EventLoopGroup和其实现类NioEventLoopGroup" class="headerlink" title="4.9 EventLoopGroup和其实现类NioEventLoopGroup"></a>4.9 EventLoopGroup和其实现类NioEventLoopGroup</h3><blockquote>
<p>说明</p>
</blockquote>
<ul>
<li><code>EventLoopGroup</code>是一组<code>EventLoop</code>的抽象，<code>Netty</code>为了更好的利用多核CPU资源，一般会有多个<code>EventLoop</code>同时工作，每个<code>EventLoop</code>维护者一个Selector实例。</li>
<li><code>EventLoopGroup</code>提供next接口，可以从组里面按照一定规则获取其中一个<code>EventLoop</code>来处理任务。在Netty服务器端编程中，我们一般都需要提供两个<code>EventLoopGroup</code>，<code>BossGroup</code>和<code>WorkerGroup</code></li>
<li>通常一个服务端口即一个<code>ServerSocketChannel</code>对应一个<code>Selector</code>和一个<code>EventLoop</code>线程。<code>BossEventLoop</code>负责接收客户端的连接并将<code>SocketChannel</code>交给<code>WorkerEventLoopGroup</code>来进行IO处理</li>
<li><code>BossEventLoopGroup</code>通常是一个单线程的<code>EventLoop</code>，<code>EventLoop</code>维护着一个注册了<code>ServerSocketChannel</code>的<code>Selector</code>实例<code>BossEventLoop</code>不断轮询<code>Selector</code>将连接事件分离出来</li>
<li>通常是OP_ACCEPT事件，然后将接收到的<code>SocketChannel</code>交给<code>WorkerEventLoopGroup</code></li>
<li><code>WorkerEventLoopGroup</code>会由<code>next</code>选择其中一个<code>EventLoop</code>来将这个<code>SocketChannel</code>注册到其维护的<code>Selector</code>并对其后续的IO事件进行处理</li>
</ul>
<blockquote>
<p>常用方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法名称</th>
<th align="center">方法介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">public NioEventLoopGroup()</td>
<td align="center">构造方法</td>
</tr>
<tr>
<td align="center">public Future&lt;?&gt; shutdownGracefully()</td>
<td align="center">断开连接，关闭线程</td>
</tr>
</tbody></table>
<h3 id="4-10-Unpooled"><a href="#4-10-Unpooled" class="headerlink" title="4.10 Unpooled"></a>4.10 Unpooled</h3><blockquote>
<p>说明</p>
</blockquote>
<p><code>Netty</code>提供一个专门用来操作缓冲区（即<code>Netty</code>的数据容器）的工具类</p>
<blockquote>
<p>常用方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法名称</th>
<th align="center">方法介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="center">public static ByteBuf copiedBuffer(CharSequence string, Charset charset)</td>
<td align="center">通过给定的数据和字符编码返回一个 ByteBuf 对象（类似于 NIO 中的 ByteBuffer 但有区别）</td>
</tr>
</tbody></table>
<h3 id="4-11-群聊系统"><a href="#4-11-群聊系统" class="headerlink" title="4.11 群聊系统"></a>4.11 群聊系统</h3><blockquote>
<p>要求</p>
</blockquote>
<ul>
<li>编写一个 Netty 群聊系统，实现服务器端和客户端之间的数据简单通讯（非阻塞）</li>
<li>实现多人群聊</li>
<li>服务器：可以监测用户上线，离线，并实现消息转发功能</li>
<li>客户端：通过channel 可以无阻塞发送消息给其它所有用户，同时可以接受其它用户发送的消息(由服务器转发得到)</li>
</ul>
<blockquote>
<p>GroupChatServer.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.groupChat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kag.nio.groupchat.GroupChatClient;</span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.*;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringEncoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/2 8:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GroupChatServer</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建两个线程组</span></span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line"></span><br><span class="line">        serverBootstrap.group(workerGroup, workerGroup)</span><br><span class="line">                .channel(NioServerSocketChannel.class)</span><br><span class="line">                .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>)</span><br><span class="line">                .childOption(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>)</span><br><span class="line">                .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="comment">// 获取pipeline</span></span><br><span class="line">                        ChannelPipeline pipeline = channel.pipeline();;</span><br><span class="line">                        <span class="comment">// 向pipeline加入解码器</span></span><br><span class="line">                        pipeline.addLast(<span class="string">&quot;decoder&quot;</span>, <span class="keyword">new</span> StringDecoder());</span><br><span class="line">                        <span class="comment">// 向pipeline加入编码器</span></span><br><span class="line">                        pipeline.addLast(<span class="string">&quot;encoder&quot;</span>, <span class="keyword">new</span> StringEncoder());</span><br><span class="line">                        <span class="comment">// 加入自己的业务处理handler</span></span><br><span class="line">                        pipeline.addLast(<span class="keyword">new</span> GroupChatServerHandler());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;▶-----Netty服务器启动-----◀&quot;</span>);</span><br><span class="line">            ChannelFuture channelFuture = serverBootstrap.bind(port).sync();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 监听关闭</span></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> GroupChatServer(<span class="number">3333</span>).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>GroupChatServerHandler.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.groupChat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.Channel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.group.ChannelGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.group.DefaultChannelGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.concurrent.EventExecutor;</span><br><span class="line"><span class="keyword">import</span> io.netty.util.concurrent.GlobalEventExecutor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/2 8:33</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个channel组，管理所有的channel</span></span><br><span class="line">    <span class="comment">// GlobalEventExecutor.INSTANCE 是全局的时间执行器，是一个单例</span></span><br><span class="line">    EventExecutor executor;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ChannelGroup channelGroup = <span class="keyword">new</span> DefaultChannelGroup(GlobalEventExecutor.INSTANCE);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">now</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> simpleDateFormat.format(<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HandlerAdded</span></span><br><span class="line"><span class="comment">     * 表示连接建立，一旦连接，第一个被执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerAdded</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Channel channel = ctx.channel();</span><br><span class="line">        <span class="comment">// 将该客户加入聊天的信息推送给其他在线的客户</span></span><br><span class="line">        <span class="comment">// 该方法会将channelGroup中的所有channel遍历，并发送消息</span></span><br><span class="line">        channelGroup.writeAndFlush(now() + <span class="string">&quot; [客户端]&quot;</span> + channel.remoteAddress() + <span class="string">&quot;加入聊天\n&quot;</span>);</span><br><span class="line">        channelGroup.add(channel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HandlerRemoved</span></span><br><span class="line"><span class="comment">     * 表示断开连接，将XX客户离线信息推送给当前在线客户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerRemoved</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Channel channel = ctx.channel();</span><br><span class="line">        channelGroup.writeAndFlush(now() + <span class="string">&quot; [客户端]&quot;</span> + channel.remoteAddress() + <span class="string">&quot;离开聊天\n&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Channel Group Size = &quot;</span> + channelGroup.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * channelActive</span></span><br><span class="line"><span class="comment">     * 表示channel处于活动状态，提示XX上线</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(now() + <span class="string">&quot; &quot;</span> + ctx.channel().remoteAddress() + <span class="string">&quot;上线&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * channelInactive</span></span><br><span class="line"><span class="comment">     * 表示channel处于非活动状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(now() + <span class="string">&quot; &quot;</span> + ctx.channel().remoteAddress() + <span class="string">&quot;离线&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ChannelRead0</span></span><br><span class="line"><span class="comment">     * 转发消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channelHandlerContext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext channelHandlerContext, String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Channel channel = channelHandlerContext.channel();</span><br><span class="line">        <span class="comment">// 遍历ChannelGroup</span></span><br><span class="line">        channelGroup.forEach(ch -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (channel != ch) <span class="comment">// 不是当前channel，直接转发</span></span><br><span class="line">                ch.writeAndFlush(now() + <span class="string">&quot; [客户]&quot;</span> + channel.remoteAddress() + <span class="string">&quot;：&quot;</span> + s + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="comment">// 当前channel是自己</span></span><br><span class="line">                ch.writeAndFlush(now() + <span class="string">&quot; [自己]: &quot;</span> + s + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.exceptionCaught(ctx, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>GroupChatClient.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.groupChat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.*;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringDecoder;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.codec.string.StringEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.SocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/2 9:22</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String host;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GroupChatClient</span><span class="params">(String host, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap()</span><br><span class="line">                .group(group)</span><br><span class="line">                .channel(NioSocketChannel.class)</span><br><span class="line">                .handler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="comment">// 得到pipeline</span></span><br><span class="line">                        ChannelPipeline pipeline = channel.pipeline();</span><br><span class="line">                        <span class="comment">// 加入相关handler</span></span><br><span class="line">                        pipeline.addLast(<span class="string">&quot;decoder&quot;</span>, <span class="keyword">new</span> StringDecoder());</span><br><span class="line">                        pipeline.addLast(<span class="string">&quot;encoder&quot;</span>, <span class="keyword">new</span> StringEncoder());</span><br><span class="line">                        <span class="comment">// 加入自定义的handler</span></span><br><span class="line">                        pipeline.addLast(<span class="keyword">new</span> GroupChatClientHandler());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ChannelFuture channelFuture = bootstrap.connect(host, port).sync();</span><br><span class="line">            Channel channel = channelFuture.channel();</span><br><span class="line">            System.out.println(<span class="string">&quot;▶-----&quot;</span> + channel.localAddress().toString().substring(<span class="number">1</span>) + <span class="string">&quot;-----◀&quot;</span>);</span><br><span class="line">            <span class="comment">// 输入信息</span></span><br><span class="line">            Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            <span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">                String msg = scanner.nextLine();</span><br><span class="line">                <span class="comment">// 通过channel发送到服务器端</span></span><br><span class="line">                channel.writeAndFlush(msg + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            group.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">new</span> GroupChatClient(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">3333</span>).run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>GroupChatClientHandler.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.groupChat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/2 10:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupChatClientHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext channelHandlerContext, String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(s.trim());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-12-心跳检测"><a href="#4-12-心跳检测" class="headerlink" title="4.12 心跳检测"></a>4.12 心跳检测</h3><blockquote>
<p>要求</p>
</blockquote>
<ul>
<li>当服务器超过3秒没有读操作时，就提示读空闲</li>
<li>当服务器超过5秒没有写操作时，就提示写空闲</li>
<li>当服务器超过7秒没有读或写时，就提示读写空闲</li>
</ul>
<blockquote>
<p>MyServer.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.heartbeat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelPipeline;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.logging.LogLevel;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.logging.LoggingHandler;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.timeout.IdleStateHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/2 10:25</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        NioEventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</span><br><span class="line">        NioEventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            serverBootstrap.group(bossGroup, workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class)</span><br><span class="line">                    .handler(<span class="keyword">new</span> LoggingHandler(LogLevel.INFO))  <span class="comment">//为BossGroup中的请求添加日志处理Handler</span></span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">                            <span class="comment">/**</span></span><br><span class="line"><span class="comment">                             * 加入一个 netty 提供的 IdleStateHandler</span></span><br><span class="line"><span class="comment">                             * 说明</span></span><br><span class="line"><span class="comment">                             * 1、IdleStateHandler 是 netty 提供的检测空闲状态的处理器</span></span><br><span class="line"><span class="comment">                             * 2、long readerIdleTime：表示多长时间没有读，就会发送一个心跳检测包检测是否还是连接的状态</span></span><br><span class="line"><span class="comment">                             * 3、long writerIdleTime：表示多长时间没有写，就会发送一个心跳检测包检测是否还是连接的状态</span></span><br><span class="line"><span class="comment">                             * 4、long allIdleTime：表示多长时间没有读写，就会发送一个心跳检测包检测是否还是连接的状态</span></span><br><span class="line"><span class="comment">                             * 5、当 IdleStateEvent 触发后，就会传递给管道的下一个 Handler，通过调用（触发）下一个Handler的 userEventTriggered，在该方法区处理这个事件。</span></span><br><span class="line"><span class="comment">                             */</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> IdleStateHandler(<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">                            <span class="comment">//加入一个对空闲检测进一步处理的Handler（自定义）</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> MyServerHandler());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            <span class="comment">//启动服务器，设置为同步模式</span></span><br><span class="line">            ChannelFuture channelFuture = serverBootstrap.bind(<span class="number">3333</span>).sync();</span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>MyServerHandler.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kag.netty.heartbeat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.handler.timeout.IdleStateEvent;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: KHighness</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2020/10/2 10:48</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx 上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> evt 事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (evt <span class="keyword">instanceof</span> IdleStateEvent) &#123;</span><br><span class="line">            <span class="comment">// 将evt向下转型</span></span><br><span class="line">            IdleStateEvent event = (IdleStateEvent) evt;</span><br><span class="line">            String eventType = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">switch</span> (event.state()) &#123;</span><br><span class="line">                <span class="keyword">case</span> READER_IDLE:</span><br><span class="line">                    eventType = <span class="string">&quot;读空闲&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> WRITER_IDLE:</span><br><span class="line">                    eventType = <span class="string">&quot;写空闲&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> ALL_IDLE:</span><br><span class="line">                    eventType = <span class="string">&quot;读写空闲&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(ctx.channel().remoteAddress() + <span class="string">&quot;——&gt;超时：&quot;</span> + eventType);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果发生空闲，直接关闭通道</span></span><br><span class="line"><span class="comment">//            ctx.channel().close();</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;服务器关闭通道···&quot;);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-13-简单总结"><a href="#4-13-简单总结" class="headerlink" title="4.13 简单总结"></a>4.13 简单总结</h3><blockquote>
<p>服务器</p>
</blockquote>
<ol>
<li>创建两个线程组，<code>bossGroup</code>和<code>workerGroup</code></li>
<li>创建服务器启动对象<code>ServerBootStrap</code></li>
<li>链式编程配置<code>ServerBootStrap</code>的参数<ol>
<li><code>group</code>：设置线程组<code>bossGroup</code>和<code>workerGroup</code></li>
<li><code>channel</code>：设置通道实现，一般选择<code>NioServerSocketChannel</code></li>
<li><code>option</code>：设置可连接线程队列以及大小，一般选择<code>SO_BACKLOG</code></li>
<li><code>childOption</code>：设置保持活动连接状态，选择<code>SO_KEEPALIVE</code></li>
<li><code>handler</code>：给<code>bossGroup</code>设置<code>Handler</code></li>
<li><code>childHandler</code>：给<code>workerGroup</code>设置<code>Hadnler</code></li>
</ol>
</li>
<li><code>ServerBootStrap</code>绑定端口，设置同步，并且监听通道关闭事件</li>
</ol>
<blockquote>
<p>客户端</p>
</blockquote>
<ol>
<li>创建一个线程组<code>group</code></li>
<li>创建客户端启动对象<code>BootStrap</code></li>
<li>链式编程配置<code>BootStrap</code>的参数<ol>
<li><code>group</code>：设置线程组<code>group</code></li>
<li><code>channel</code>：设置通道实现，一般选择<code>NioSocketChannel</code></li>
<li><code>handler</code>：设置<code>Handler</code></li>
</ol>
</li>
<li><code>BootStrap</code>绑定端口，设置同步，并且监听通道关闭事件</li>
</ol>
<blockquote>
<p>常见Handler</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Handler</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">SimpleChannelInboundHandler</td>
<td align="center">处理通信(服务器最常用)</td>
</tr>
<tr>
<td align="center">IdleStateHandler</td>
<td align="center">检测空闲状态(心跳检测)</td>
</tr>
<tr>
<td align="center">WebSocketServerProtocolHandler</td>
<td align="center">将http协议升级ws协议，保持长连接</td>
</tr>
</tbody></table>
<blockquote>
<p>Handler常用方法</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">Method</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">handlerAdded(ChannelHandlerContext ctx)</td>
<td align="center">连接建立，一旦建立连接，第一个被执行的方法</td>
</tr>
<tr>
<td align="center">handlerRemoved(ChannelHandlerContext ctx)</td>
<td align="center">连接断开，将XX客户离线信息推送给当前在线客户</td>
</tr>
<tr>
<td align="center">channelActive(ChannelHandlerContext ctx)</td>
<td align="center">表示channel处于活动状态，提示XX上线</td>
</tr>
<tr>
<td align="center">channelInactive(ChannelHandlerContext ctx)</td>
<td align="center">表示channel处于非活动状态，提示XX离线</td>
</tr>
<tr>
<td align="center">channelRead0(ChannelHandlerContext channelHandlerContext, String s)</td>
<td align="center">读取数据，并进行消息转发</td>
</tr>
<tr>
<td align="center">exceptionCaught(ChannelHandlerContext ctx, Throwable cause)</td>
<td align="center">异常处理</td>
</tr>
<tr>
<td align="center">userEventTriggered(ChannelHandlerContext ctx, Object evt)</td>
<td align="center">事件触发器。在<code>IdleStateHandler</code>后面加上一个触发器，可以检测心跳。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Server</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8-Stream</title>
    <url>/posts/3e51ba23/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><br>

<p>​       Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。</p>
<p>特点：</p>
<ul>
<li><p>不是数据结构，不会保存数据。</p>
</li>
<li><p>不会修改原来的数据源，它会将操作后的数据保存到另外一个对象中。（保留意见：毕竟peek方法可以修改流中元素）</p>
</li>
<li><p>惰性求值，流在中间处理过程中，只是对操作进行了记录，并不会立即执行，需要等到执行终止操作的时候才会进行实际的计算。</p>
</li>
</ul>
<br>

<a id="more"></a>

<h2 id="2-分类"><a href="#2-分类" class="headerlink" title="2. 分类"></a>2. 分类</h2><br>

<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">状态</th>
<th align="center">API</th>
</tr>
</thead>
<tbody><tr>
<td align="center">中间操作</td>
<td align="center">有状态</td>
<td align="center">unordered() filter() map() mapToInt() mapToDouble() flatMap() flatMapToInt() flatMapToLong() flatMapToDouble() peek()</td>
</tr>
<tr>
<td align="center">中间操作</td>
<td align="center">无状态</td>
<td align="center">distinct() sorted() limit() skip()</td>
</tr>
<tr>
<td align="center">结束操作</td>
<td align="center">非短路操作</td>
<td align="center">foreach() forEachOrdered() toArray() reduce() collect() max() min() count()</td>
</tr>
<tr>
<td align="center">结束操作</td>
<td align="center">短路操作</td>
<td align="center">anyMatch() allMatch() noneMatch() findFirst() findAny()</td>
</tr>
</tbody></table>
<p>注释：</p>
<ul>
<li><p>无状态：指元素的处理不受之前元素的影响；</p>
</li>
<li><p>有状态：指该操作只有拿到所有元素之后才能继续下去。</p>
</li>
<li><p>非短路操作：指必须处理所有元素才能得到最终结果；</p>
</li>
<li><p>短路操作：指遇到某些符合条件的元素就可以得到最终结果，如 A || B，只要A为true，则无需判断B的结果。</p>
</li>
</ul>
<br>

<h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h2><br>

<h3 id="3-1-流的常用创建方法"><a href="#3-1-流的常用创建方法" class="headerlink" title="3.1 流的常用创建方法"></a>3.1 流的常用创建方法</h3><br>

<h4 id="3-1-1使用Collection下的-stream-和-parallelStream-方法"><a href="#3-1-1使用Collection下的-stream-和-parallelStream-方法" class="headerlink" title="3.1.1使用Collection下的 stream() 和 parallelStream() 方法"></a>3.1.1使用Collection下的 <code>stream()</code> 和 <code>parallelStream()</code> 方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Collection.</span></span><br><span class="line"><span class="comment"> *            stream()</span></span><br><span class="line"><span class="comment"> *            parallelStream()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------method1----------&quot;</span>);</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    list.add(<span class="number">1</span>);</span><br><span class="line">    list.add(<span class="number">3</span>);</span><br><span class="line">    list.add(<span class="number">5</span>);</span><br><span class="line">    list.add(<span class="number">7</span>);</span><br><span class="line">    list.add(<span class="number">9</span>);</span><br><span class="line">    Stream&lt;Integer&gt; stream = list.stream();</span><br><span class="line">    Stream&lt;Integer&gt; parallelStream = list.parallelStream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h4 id="3-1-2-使用Arrays中的-stream-方法，将数组转成流"><a href="#3-1-2-使用Arrays中的-stream-方法，将数组转成流" class="headerlink" title="3.1.2 使用Arrays中的 stream() 方法，将数组转成流"></a>3.1.2 使用Arrays中的 <code>stream()</code> 方法，将数组转成流</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Arrays.stream()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------method2----------&quot;</span>);</span><br><span class="line">    Double[] nums = <span class="keyword">new</span> Double[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        nums[i] = random();</span><br><span class="line">    &#125;</span><br><span class="line">    Stream&lt;Double&gt; stream = Arrays.stream(nums);</span><br><span class="line">    stream.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h4 id="3-1-3-使用Stream中的静态方法-of-、iterate-、generate"><a href="#3-1-3-使用Stream中的静态方法-of-、iterate-、generate" class="headerlink" title="3.1.3 使用Stream中的静态方法: of()、iterate()、generate()"></a>3.1.3 使用Stream中的静态方法: <code>of()</code>、<code>iterate()</code>、<code>generate()</code></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Stream.</span></span><br><span class="line"><span class="comment"> *        of()</span></span><br><span class="line"><span class="comment"> *        iterate()</span></span><br><span class="line"><span class="comment"> *        generate()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------method3----------&quot;</span>);</span><br><span class="line">    Stream&lt;Integer&gt; stream1 = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">    stream1.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    Stream&lt;Integer&gt; stream2 = Stream.iterate(<span class="number">0</span>, (x) -&gt; x + <span class="number">1</span>).limit(<span class="number">6</span>);</span><br><span class="line">    stream2.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    Stream&lt;Double&gt; stream3 = Stream.generate(Math::random).limit(<span class="number">6</span>);</span><br><span class="line">    stream3.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h4 id="3-1-4-使用-BufferedReader-lines-方法，将每行内容转成流"><a href="#3-1-4-使用-BufferedReader-lines-方法，将每行内容转成流" class="headerlink" title="3.1.4 使用 BufferedReader.lines() 方法，将每行内容转成流"></a>3.1.4 使用 <code>BufferedReader.lines()</code> 方法，将每行内容转成流</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * BufferedReader.lines()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------method4----------&quot;</span>);</span><br><span class="line">    BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;D:/Java/Test/K1.txt&quot;</span>));</span><br><span class="line">    Stream&lt;String&gt; lines = reader.lines();</span><br><span class="line">    lines.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h4 id="3-1-5-使用-Pattern-splitAsStream-方法，将字符串分隔成流"><a href="#3-1-5-使用-Pattern-splitAsStream-方法，将字符串分隔成流" class="headerlink" title="3.1.5 使用 Pattern.splitAsStream() 方法，将字符串分隔成流"></a>3.1.5 使用 <code>Pattern.splitAsStream()</code> 方法，将字符串分隔成流</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Pattern.splitAsStream()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------method5----------&quot;</span>);</span><br><span class="line">    Pattern pattern = Pattern.compile(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">    Stream&lt;String&gt; stringStream = pattern.splitAsStream(<span class="string">&quot;K,H,I,G,H,N,E,S,S&quot;</span>);</span><br><span class="line">    stringStream.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="3-2-流的中间操作"><a href="#3-2-流的中间操作" class="headerlink" title="3.2 流的中间操作"></a>3.2 流的中间操作</h3><br>

<h4 id="3-2-1-筛选与切片"><a href="#3-2-1-筛选与切片" class="headerlink" title="3.2.1 筛选与切片"></a>3.2.1 筛选与切片</h4><ul>
<li>filter: 过滤流中的某些元素</li>
<li>limit: 获取前n个元素</li>
<li>skip: 跳过前n个元素</li>
<li>limit + skip ==&gt; 可以实现分页[skip(PageNumber * PageSize).limit(PageSize)]</li>
<li>distinct: 通过流中元素的hashCode()和equals()去除重复元素</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 筛选与切片</span></span><br><span class="line"><span class="comment"> * filter: 过滤流中的某些元素</span></span><br><span class="line"><span class="comment"> * limit: 获取前n个元素</span></span><br><span class="line"><span class="comment"> * skip: 跳过前n个元素</span></span><br><span class="line"><span class="comment"> * limit + skip ==&gt; 可以实现分页[skip(PageNumber * PageSize).limit(PageSize)]</span></span><br><span class="line"><span class="comment"> * distinct: 通过流中元素的hashCode()和equals()去除重复元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------method1----------&quot;</span>);</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList( <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                        <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>,</span><br><span class="line">                                        <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>,</span><br><span class="line">                                        <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>,</span><br><span class="line">                                        <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>,</span><br><span class="line">                                        <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>,</span><br><span class="line">                                        <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>,</span><br><span class="line">                                        <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>,</span><br><span class="line">                                        <span class="number">9</span>, <span class="number">9</span>, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;----------过滤大于5的元素----------&quot;</span>);</span><br><span class="line">    Stream&lt;Integer&gt; stream1 = list.stream().filter(x -&gt; x &lt;= <span class="number">5</span>);</span><br><span class="line">    stream1.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;----------分页查询/5/3----------&quot;</span>);</span><br><span class="line">    Stream&lt;Integer&gt; stream2 = list.stream().skip(<span class="number">5</span> * <span class="number">3</span>).limit(<span class="number">3</span>);</span><br><span class="line">    stream2.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;----------去掉重复元素----------&quot;</span>);</span><br><span class="line">    Stream stream3 = list.stream().distinct();</span><br><span class="line">    stream3.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h4 id="3-2-2-映射"><a href="#3-2-2-映射" class="headerlink" title="3.2.2 映射"></a>3.2.2 映射</h4><ul>
<li>map: 接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素</li>
<li>flatMap: 接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 映射</span></span><br><span class="line"><span class="comment"> * map: 接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素</span></span><br><span class="line"><span class="comment"> * flatMap: 接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------method2----------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;A,B,C&quot;</span>, <span class="string">&quot;1,2,3&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Stream&lt;String&gt; stringStream1 = list.stream().map( x -&gt; x.replaceAll(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;|&quot;</span>));</span><br><span class="line">    stringStream1.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    Stream&lt;String&gt; stringStream2 = list.stream().flatMap( x -&gt;&#123;</span><br><span class="line">        String[] split = x.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        Stream&lt;String&gt; stringStream = Arrays.stream(split);</span><br><span class="line">        <span class="keyword">return</span> stringStream;</span><br><span class="line">    &#125;);</span><br><span class="line">    stringStream2.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<br>

<h4 id="3-2-3-排序"><a href="#3-2-3-排序" class="headerlink" title="3.2.3 排序"></a>3.2.3 排序</h4><ul>
<li>sorted(): 自然排序，流中元素需要实现Comparable接口</li>
<li>sorted(Comparator c): 自定义排序，自定义Comparator排序器<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 排序</span></span><br><span class="line"><span class="comment"> * sorted(): 自然排序，流中元素需要实现Comparable接口</span></span><br><span class="line"><span class="comment"> * sorted(Comparator c): 自定义排序，自定义Comparator排序器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------method3----------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">2</span>);</span><br><span class="line">    integers.stream().sorted().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;K&quot;</span>, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;I&quot;</span>, <span class="string">&quot;G&quot;</span>, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;N&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;S&quot;</span>, <span class="string">&quot;S&quot;</span>);</span><br><span class="line">    strings.stream().sorted(</span><br><span class="line">            (s1, s2) -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> s1.compareTo(s2);</span><br><span class="line">            &#125;</span><br><span class="line">    ).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">        String name;</span><br><span class="line">        <span class="keyword">int</span> score; </span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Student&gt; students = Arrays.asList( <span class="keyword">new</span> Student(<span class="string">&quot;K&quot;</span>, <span class="number">100</span>),</span><br><span class="line">                                            <span class="keyword">new</span> Student(<span class="string">&quot;H&quot;</span>, <span class="number">91</span>),</span><br><span class="line">                                            <span class="keyword">new</span> Student(<span class="string">&quot;I&quot;</span>, <span class="number">95</span>),</span><br><span class="line">                                            <span class="keyword">new</span> Student(<span class="string">&quot;G&quot;</span>, <span class="number">98</span>),</span><br><span class="line">                                            <span class="keyword">new</span> Student(<span class="string">&quot;N&quot;</span>, <span class="number">88</span>));</span><br><span class="line">    students.stream().sorted(</span><br><span class="line">            (s1, s2) -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> s1.score - s2.score;</span><br><span class="line">            &#125;</span><br><span class="line">    ).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<br>

<h4 id="3-2-4-消费"><a href="#3-2-4-消费" class="headerlink" title="3.2.4 消费"></a>3.2.4 消费</h4><p>peek: 类似map<br>不同：</p>
<ul>
<li>map接收function表达式，有返回值</li>
<li>peek接收consumer表达式，无返回值<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费</span></span><br><span class="line"><span class="comment"> * peek: 类似map</span></span><br><span class="line"><span class="comment"> * 不同：</span></span><br><span class="line"><span class="comment"> * map接收function表达式，有返回值</span></span><br><span class="line"><span class="comment"> * peek接收consumer表达式，无返回值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------method4----------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">        String name;</span><br><span class="line">        <span class="keyword">int</span> score;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Student&gt; students = Arrays.asList( <span class="keyword">new</span> Student(<span class="string">&quot;K&quot;</span>, <span class="number">100</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;H&quot;</span>, <span class="number">91</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;I&quot;</span>, <span class="number">95</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;G&quot;</span>, <span class="number">98</span>),</span><br><span class="line">            <span class="keyword">new</span> Student(<span class="string">&quot;N&quot;</span>, <span class="number">88</span>));</span><br><span class="line">    students.stream().peek(</span><br><span class="line">            s -&gt; &#123;</span><br><span class="line">                s.setScore(<span class="number">99</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    ).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<br>

<h3 id="4-流的终止操作"><a href="#4-流的终止操作" class="headerlink" title="4. 流的终止操作"></a>4. 流的终止操作</h3><br>

<h4 id="4-1-匹配、聚合操作"><a href="#4-1-匹配、聚合操作" class="headerlink" title="4.1 匹配、聚合操作"></a>4.1 匹配、聚合操作</h4><ul>
<li>allMatch: 接收一个Predicate函数，当流中每个元素都符合该断言时才返回true，否则返回false</li>
<li>noneMatch: 接收一个Predicate函数，当流中每个元素都不符合该断言时才返回true，否则返回false</li>
<li>anyMatch: 接收一个Predicate函数，只要流中有一个元素满足该断言则返回true，否则返回false</li>
<li>findFIrst: 返回流中第一个元素</li>
<li>findAny: 返回流中的任意元素</li>
<li>count: 返回流中元素总个数</li>
<li>max: 返回流中元素的最大值</li>
<li>min: 返回流中元素的最小值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------method1----------&quot;</span>);</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> allMatch = list.stream().anyMatch(e -&gt; e &gt; <span class="number">10</span>);    <span class="comment">// false</span></span><br><span class="line">    <span class="keyword">boolean</span> noneMatch = list.stream().noneMatch(e -&gt; e &gt; <span class="number">10</span>);  <span class="comment">// true</span></span><br><span class="line">    <span class="keyword">boolean</span> anyMatch = list.stream().anyMatch(e -&gt; e &gt; <span class="number">4</span>);     <span class="comment">// true</span></span><br><span class="line">    System.out.println(allMatch + <span class="string">&quot; &quot;</span> + noneMatch + <span class="string">&quot; &quot;</span> + anyMatch);</span><br><span class="line"></span><br><span class="line">    Integer findFirst = list.stream().findFirst().get();</span><br><span class="line">    Integer findAny = list.stream().findAny().get();</span><br><span class="line">    System.out.println(<span class="string">&quot;first = &quot;</span> + findFirst + <span class="string">&quot;, any = &quot;</span> + findAny);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> count = list.stream().count();</span><br><span class="line">    Integer max = list.stream().max(Integer::compareTo).get();</span><br><span class="line">    Integer min = list.stream().min(Integer::compareTo).get();</span><br><span class="line">    System.out.println(<span class="string">&quot;count = &quot;</span> + count + <span class="string">&quot;, max = &quot;</span> + max + <span class="string">&quot;, min = &quot;</span> + min);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h4 id="4-2-规约操作"><a href="#4-2-规约操作" class="headerlink" title="4.2 规约操作"></a>4.2 规约操作</h4><p>Optional&lt;T&gt; reduce(BinaryOperator&lt;T&gt; accumulator)：第一次执行时，accumulator函数的第一个参数为流中的第一个元素，第二个参数为流中元素的第二个元素；第二次执行时，第一个参数为第一次函数执行的结果，第二个参数为流中的第三个元素；依次类推。<br>     T reduce(T identity, BinaryOperator&lt;T&gt; accumulator)：流程跟上面一样，只是第一次执行时，accumulator函数的第一个参数为identity，而第二个参数为流中的第一个元素。<br>     &lt;U&gt; U reduce(U identity,BiFunction&lt;U, ? super T, U&gt; accumulator,BinaryOperator&lt;U&gt; combiner)：在串行流(stream)中，该方法跟第二个方法一样，即第三个参数combiner不会起作用。在并行流(parallelStream)中,我们知道流被fork join出多个线程进行执行，此时每个线程的执行流程就跟第二个方法reduce(identity,accumulator)一样，而第三个参数combiner函数，则是将每个线程的执行结果当成一个新的流，然后使用第一个方法reduce(accumulator)流程进行规约。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 规约</span></span><br><span class="line"><span class="comment"> * reduce</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;----------method2----------&quot;</span>);</span><br><span class="line">    List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 求和</span></span><br><span class="line">    Integer v = list.stream().reduce(<span class="number">0</span>, (x1, x2) -&gt; x1 + x2);</span><br><span class="line">    System.out.println(<span class="string">&quot;sum = &quot;</span>  + v);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 10 + 和</span></span><br><span class="line">    Integer v1 = list.stream().reduce(<span class="number">10</span>, (x1, x2) -&gt; x1 + x2);</span><br><span class="line">    System.out.println(<span class="string">&quot;10 + sum = &quot;</span> + v1);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 求-和</span></span><br><span class="line">    Integer v2 = list.stream().reduce(<span class="number">0</span>,</span><br><span class="line">            (x1, x2) -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;stream accumulator: x1: &quot;</span> + x1 + <span class="string">&quot; x2: &quot;</span> + x2);</span><br><span class="line">                <span class="keyword">return</span> x1 - x2;</span><br><span class="line">            &#125;</span><br><span class="line">            );</span><br><span class="line">    System.out.println(v2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 求累积</span></span><br><span class="line">    Integer v3 = list.stream().reduce(<span class="number">1</span>,</span><br><span class="line">            (x1, x2) -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;stream combiner: x1:&quot;</span> + x1 + <span class="string">&quot;  x2:&quot;</span> + x2);</span><br><span class="line">                <span class="keyword">return</span> x1 * x2;</span><br><span class="line">            &#125;</span><br><span class="line">     );</span><br><span class="line">    System.out.println(v3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字符串拼接</span></span><br><span class="line">    List&lt;String&gt; list1 = Arrays.asList(<span class="string">&quot;K&quot;</span>, <span class="string">&quot;Highness&quot;</span>, <span class="string">&quot;. Nice &quot;</span>, <span class="string">&quot;to &quot;</span>, <span class="string">&quot;meet &quot;</span>, <span class="string">&quot;you&quot;</span>);</span><br><span class="line">    String res = list1.stream().reduce(<span class="string">&quot;Hello &quot;</span>, (c1, c2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> c1 + c2;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h4 id="4-3-收集操作"><a href="#4-3-收集操作" class="headerlink" title="4.3 收集操作"></a>4.3 收集操作</h4><p> collect：接收一个Collector实例，将流中元素收集成另外一个数据结构。</p>
<p>Collector&lt;T, A, R&gt; 是一个接口，有以下5个抽象方法：<br>       Supplier&lt;A&gt; supplier()：创建一个结果容器A<br>       BiConsumer&lt;A, T&gt; accumulator()：消费型接口，第一个参数为容器A，第二个参数为流中元素T。<br>       BinaryOperator&lt;A&gt; combiner()：函数接口，该参数的作用跟上一个方法(reduce)中的combiner参数一样，将并行流中各个子进程的运行结果(accumulator函数操作后的容器A)进行合并。<br>       Function&lt;A, R&gt; finisher()：函数式接口，参数为：容器A，返回类型为：collect方法最终想要的结果R。<br>       Set&lt;Characteristics&gt; characteristics()：返回一个不可变的Set集合，用来表明该Collector的特征。有以下三个特征：<br>         CONCURRENT：表示此收集器支持并发。（官方文档还有其他描述，暂时没去探索，故不作过多翻译）<br>         UNORDERED：表示该收集操作不会保留流中元素原有的顺序。<br>         IDENTITY_FINISH：表示finisher参数只是标识而已，可忽略。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java8</tag>
      </tags>
  </entry>
  <entry>
    <title>Http状态码</title>
    <url>/posts/140645a5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info flat"><p>五种状态</p>
</div>


<table>
<thead>
<tr>
<th align="center">分类</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1**</td>
<td align="center">信息，服务器收到请求，需要请求者继续执行操作</td>
</tr>
<tr>
<td align="center">2**</td>
<td align="center">成功，操作被成功接收并处理</td>
</tr>
<tr>
<td align="center">3**</td>
<td align="center">重定向，需要进一步的操作以完成请求</td>
</tr>
<tr>
<td align="center">4**</td>
<td align="center">客户端错误，请求白蛤语法错误或无分发完成请求</td>
</tr>
<tr>
<td align="center">5**</td>
<td align="center">服务器错误，服务器才处理请求的过程中发生了错误</td>
</tr>
</tbody></table>
<a id="more"></a>




<h2 id="1xx-消息"><a href="#1xx-消息" class="headerlink" title="1xx-消息"></a>1xx-消息</h2><p>这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于HTTP/1.0协议中没有定义任何1xx状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送1xx响应。 这些状态码代表的响应都是信息性的，标示客户应该采取的其他行动。</p>
<ul>
<li><p>100 Continue<br>服务器已经接收到请求头，并且客户端应继续发送请求主体（在需要发送身体的请求的情况下：例如，POST请求），或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。要使服务器检查请求的头部，客户端必须在其初始请求中发送Expect: 100-continue作为头部，并在发送正文之前接收100 Continue状态代码。响应代码417期望失败表示请求不应继续。</p>
</li>
<li><p>101 Switching Protocols<br>服务器已经理解了客户端的请求，并将通过Upgrade消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade消息头中定义的那些协议。<br>只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的HTTP版本（如HTTP/2）比旧版本更有优势，或者切换到一个实时且同步的协议（如WebSocket）以传送利用此类特性的资源。</p>
</li>
<li><p>102 Processing（WebDAV；RFC 2518）<br>WebDAV请求可能包含许多涉及文件操作的子请求，需要很长时间才能完成请求。该代码表示服务器已经收到并正在处理请求，但无响应可用。[6]这样可以防止客户端超时，并假设请求丢失。</p>
</li>
</ul>
<br>

<h2 id="2xx-成功"><a href="#2xx-成功" class="headerlink" title="2xx-成功"></a>2xx-成功</h2><p>这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。</p>
<ul>
<li><p>200 OK<br>请求已成功，请求所希望的响应头或数据体将随此响应返回。实际的响应将取决于所使用的请求方法。在GET请求中，响应将包含与请求的资源相对应的实体。在POST请求中，响应将包含描述或操作结果的实体。</p>
</li>
<li><p>201 Created<br>请求已经被实现，而且有一个新的资源已经依据请求的需要而创建，且其URI已经随Location头信息返回。假如需要的资源无法及时创建的话，应当返回’202 Accepted’。</p>
</li>
<li><p>202 Accepted<br>服务器已接受请求，但尚未处理。最终该请求可能会也可能不会被执行，并且可能在处理发生时被禁止。</p>
</li>
<li><p>203 Non-Authoritative Information（自HTTP / 1.1起）<br>服务器是一个转换代理服务器（transforming proxy，例如网络加速器），以200 OK状态码为起源，但回应了原始响应的修改版本。</p>
</li>
<li><p>204 No Content<br>服务器成功处理了请求，没有返回任何内容。</p>
</li>
<li><p>205 Reset Content<br>服务器成功处理了请求，但没有返回任何内容。与204响应不同，此响应要求请求者重置文档视图。</p>
</li>
<li><p>206 Partial Content<br>服务器已经成功处理了部分GET请求。类似于FlashGet或者迅雷这类的HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。</p>
</li>
<li><p>207 Multi-Status（WebDAV；RFC 4918）<br>代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。</p>
</li>
<li><p>208 Already Reported （WebDAV；RFC 5842）<br>DAV绑定的成员已经在（多状态）响应之前的部分被列举，且未被再次包含。</p>
</li>
<li><p>226 IM Used （RFC 3229）<br>服务器已经满足了对资源的请求，对实体请求的一个或多个实体操作的结果表示。</p>
</li>
</ul>
<br>

<h2 id="3xx-重定向"><a href="#3xx-重定向" class="headerlink" title="3xx-重定向"></a>3xx-重定向</h2><p>这类状态码代表需要客户端采取进一步的操作才能完成请求。通常，这些状态码用来重定向，后续的请求地址（重定向目标）在本次响应的Location域中指明。</p>
<p>当且仅当后续的请求所使用的方法是GET或者HEAD时，用户浏览器才可以在没有用户介入的情况下自动提交所需要的后续请求。客户端应当自动监测无限循环重定向（例如：A→B→C→……→A或A→A），因为这会导致服务器和客户端大量不必要的资源消耗。按照HTTP/1.0版规范的建议，浏览器不应自动访问超过5次的重定向。</p>
<ul>
<li><p>300 Multiple Choices<br>被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。<br>除非这是一个HEAD请求，否则该响应应当包括一个资源特性及地址的列表的实体，以便用户或浏览器从中选择最合适的重定向地址。这个实体的格式由Content-Type定义的格式所决定。浏览器可能根据响应的格式以及浏览器自身能力，自动作出最合适的选择。当然，RFC 2616规范并没有规定这样的自动选择该如何进行。<br>如果服务器本身已经有了首选的回馈选择，那么在Location中应当指明这个回馈的URI；浏览器可能会将这个Location值作为自动重定向的地址。此外，除非额外指定，否则这个响应也是可缓存的。</p>
</li>
<li><p>301 Moved Permanently<br>被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。<br>新的永久性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。<br>如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。<br>注意：对于某些使用HTTP/1.0协议的浏览器，当它们发送的POST请求得到了一个301响应的话，接下来的重定向请求将会变成GET方式。</p>
</li>
<li><p>302 Found<br>要求客户端执行临时重定向（原始描述短语为“Moved Temporarily”）。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。<br>新的临时性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。<br>如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。<br>注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用GET方式访问在Location中规定的URI，而无视原先请求的方法。因此状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。</p>
</li>
<li><p>303 See Other<br>对应当前请求的响应可以在另一个URI上被找到，当响应于POST（或PUT / DELETE）接收到响应时，客户端应该假定服务器已经收到数据，并且应该使用单独的GET消息发出重定向。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的URI不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。<br>新的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。<br>注意：许多HTTP/1.1版以前的浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。</p>
</li>
<li><p>304 Not Modified<br>表示资源未被修改，因为请求头指定的版本If-Modified-Since或If-None-Match。在这种情况下，由于客户端仍然具有以前下载的副本，因此不需要重新传输资源。</p>
</li>
<li><p>305 Use Proxy<br>被请求的资源必须通过指定的代理才能被访问。Location域中将给出指定的代理所在的URI信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能创建305响应。许多HTTP客户端（像是Mozilla和Internet Explorer）都没有正确处理这种状态代码的响应，主要是出于安全考虑。<br>注意：RFC 2068中没有明确305响应是为了重定向一个单独的请求，而且只能被原始服务器建立。忽视这些限制可能导致严重的安全后果。</p>
</li>
<li><p>306 Switch Proxy<br>在最新版的规范中，306状态码已经不再被使用。最初是指“后续请求应使用指定的代理”。</p>
</li>
<li><p>307 Temporary Redirect<br>在这种情况下，请求应该与另一个URI重复，但后续的请求应仍使用原始的URI。 与302相反，当重新发出原始请求时，不允许更改请求方法。 例如，应该使用另一个POST请求来重复POST请求。</p>
</li>
<li><p>308 Permanent Redirect (RFC 7538)<br>请求和所有将来的请求应该使用另一个URI重复。 307和308重复302和301的行为，但不允许HTTP方法更改。 例如，将表单提交给永久重定向的资源可能会顺利进行。</p>
</li>
</ul>
<br>

<h2 id="4xx-客户端错误"><a href="#4xx-客户端错误" class="headerlink" title="4xx-客户端错误"></a>4xx-客户端错误</h2><p>这类的状态码代表了客户端看起来可能发生了错误，妨碍了服务器的处理。除非响应的是一个HEAD请求，否则服务器就应该返回一个解释当前错误状况的实体，以及这是临时的还是永久性的状况。这些状态码适用于任何请求方法。浏览器应当向用户显示任何包含在此类错误响应中的实体内容。</p>
<p>如果错误发生时客户端正在传送数据，那么使用TCP的服务器实现应当仔细确保在关闭客户端与服务器之间的连接之前，客户端已经收到了包含错误信息的数据包。如果客户端在收到错误信息后继续向服务器发送数据，服务器的TCP栈将向客户端发送一个重置数据包，以清除该客户端所有还未识别的输入缓冲，以免这些数据被服务器上的应用程序读取并干扰后者。</p>
<ul>
<li><p>400 Bad Request<br>由于明显的客户端错误（例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求。</p>
</li>
<li><p>401 Unauthorized（RFC 7235）<br>参见：HTTP基本认证、HTTP摘要认证<br>类似于403 Forbidden，401语义即“未认证”，即用户没有必要的凭据。该状态码表示当前请求需要用户验证。该响应必须包含一个适用于被请求资源的WWW-Authenticate信息头用以询问用户信息。客户端可以重复提交一个包含恰当的Authorization头信息的请求。[33]如果当前请求已经包含了Authorization证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。<br>注意：当网站（通常是网站域名）禁止IP地址时，有些网站状态码显示的401，表示该特定地址被拒绝访问网站。</p>
</li>
<li><p>402 Payment Required<br>该状态码是为了将来可能的需求而预留的。该状态码最初的意图可能被用作某种形式的数字现金或在线支付方案的一部分，但几乎没有哪家服务商使用，而且这个状态码通常不被使用。如果特定开发人员已超过请求的每日限制，Google Developers API会使用此状态码。</p>
</li>
<li><p>403 Forbidden<br>主条目：HTTP 403<br>服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个HEAD请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。</p>
</li>
<li><p>404 Not Found<br>主条目：HTTP 404<br>请求失败，请求所希望得到的资源未被在服务器上发现，但允许用户的后续请求。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。</p>
</li>
<li><p>405 Method Not Allowed<br>请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow头信息用以表示出当前资源能够接受的请求方法的列表。例如，需要通过POST呈现数据的表单上的GET请求，或只读资源上的PUT请求。<br>鉴于PUT，DELETE方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。</p>
</li>
<li><p>406 Not Acceptable<br>参见：内容协商<br>请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体，该请求不可接受。<br>除非这是一个HEAD请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址列表的实体。实体的格式由Content-Type头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准。</p>
</li>
<li><p>407 Proxy Authentication Required（RFC 2617）<br>与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个Proxy-Authenticate用以进行身份询问。客户端可以返回一个Proxy-Authorization信息头用以验证。</p>
</li>
<li><p>408 Request Timeout<br>请求超时。根据HTTP规范，客户端没有在服务器预备等待的时间内完成一个请求的发送，客户端可以随时再次提交这一请求而无需进行任何更改。</p>
</li>
<li><p>409 Conflict<br>表示因为请求存在冲突无法处理该请求，例如多个同步更新之间的编辑冲突。</p>
</li>
<li><p>410 Gone<br>表示所请求的资源不再可用，将不再可用。当资源被有意地删除并且资源应被清除时，应该使用这个。在收到410状态码后，用户应停止再次请求资源。但大多数服务端不会使用此状态码，而是直接使用404状态码。</p>
</li>
<li><p>411 Length Required<br>服务器拒绝在没有定义Content-Length头的情况下接受请求。在添加了表明请求消息体长度的有效Content-Length头之后，客户端可以再次提交该请求。</p>
</li>
<li><p>412 Precondition Failed（RFC 7232）<br>服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。</p>
</li>
<li><p>413 Request Entity Too Large（RFC 7231）<br>前称“Request Entity Too Large”，表示服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。<br>如果这个状况是临时的，服务器应当返回一个Retry-After的响应头，以告知客户端可以在多少时间以后重新尝试。</p>
</li>
<li><p>414 Request-URI Too Long（RFC 7231）<br>前称“Request-URI Too Long”，表示请求的URI长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。通常将太多数据的结果编码为GET请求的查询字符串，在这种情况下，应将其转换为POST请求。这比较少见，通常的情况包括：<br>本应使用POST方法的表单提交变成了GET方法，导致查询字符串过长。<br>重定向URI“黑洞”，例如每次重定向把旧的URI作为新的URI的一部分，导致在若干次重定向后URI超长。<br>客户端正在尝试利用某些服务器中存在的安全漏洞攻击服务器。这类服务器使用固定长度的缓冲读取或操作请求的URI，当GET后的参数超过某个数值后，可能会产生缓冲区溢出，导致任意代码被执行。没有此类漏洞的服务器，应当返回414状态码。</p>
</li>
<li><p>415 Unsupported Media Type<br>对于当前请求的方法和所请求的资源，请求中提交的互联网媒体类型并不是服务器中所支持的格式，因此请求被拒绝。例如，客户端将图像上传格式为svg，但服务器要求图像使用上传格式为jpg。</p>
</li>
<li><p>416 Requested Range Not Satisfiable（RFC 7233）<br>前称“Requested Range Not Satisfiable”。客户端已经要求文件的一部分（Byte serving），但服务器不能提供该部分。例如，如果客户端要求文件的一部分超出文件尾端。</p>
</li>
<li><p>417 Expectation Failed<br>在请求头Expect中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服显的证据证明在当前路由的下一个节点上，Expect的内容无法被满足。</p>
</li>
<li><p>418 I’m a teapot（RFC 2324）<br>本操作码是在1998年作为IETF的传统愚人节笑话, 在RFC 2324超文本咖啡壶控制协议’中定义的，并不需要在真实的HTTP服务器中定义。当一个控制茶壶的HTCPCP收到BREW或POST指令要求其煮咖啡时应当回传此错误。这个HTTP状态码在某些网站（包括Google.com）与项目（如Node.js、ASP.NET和Go语言）中用作彩蛋。</p>
</li>
<li><p>420 Enhance Your Caim<br>Twitter Search与Trends API在客户端被限速的情况下返回。</p>
</li>
<li><p>421 Misdirected Request （RFC 7540）<br>该请求针对的是无法产生响应的服务器（例如因为连接重用）。</p>
</li>
<li><p>422 Unprocessable Entity（WebDAV；RFC 4918 ）<br>请求格式正确，但是由于含有语义错误，无法响应。</p>
</li>
<li><p>423 Locked（WebDAV；RFC 4918）<br>当前资源被锁定。</p>
</li>
<li><p>424 Failed Dependency（WebDAV；RFC 4918）<br>由于之前的某个请求发生的错误，导致当前请求失败，例如PROPPATCH。</p>
</li>
<li><p>425 Unordered Collection<br>在WebDAV Advanced Collections Protocol中定义，但Web Distributed Authoring and Versioning (WebDAV) Ordered Collections Protocol中并不存在。</p>
</li>
<li><p>426 Upgrade Required（RFC 2817）<br>客户端应当切换到TLS/1.0，并在HTTP/1.1 Upgrade header中给出。</p>
</li>
<li><p>428 Precondition Required (RFC 6585)<br>原服务器要求该请求满足一定条件。这是为了防止“‘未更新’问题，即客户端读取（GET）一个资源的状态，更改它，并将它写（PUT）回服务器，但这期间第三方已经在服务器上更改了该资源的状态，因此导致了冲突。”</p>
</li>
<li><p>429 Too Many Requests （RFC 6585）<br>用户在给定的时间内发送了太多的请求。旨在用于网络限速。</p>
</li>
<li><p>431 Request Header Fields Too Large （RFC 6585）<br>服务器不愿处理请求，因为一个或多个头字段过大。</p>
</li>
<li><p>444 No Response<br>Nginx上HTTP服务器扩展。服务器不向客户端返回任何信息，并关闭连接（有助于阻止恶意软件）。</p>
</li>
<li><p>450 Blocked by Windows Parental Controls<br>这是一个由Windows家庭控制（Microsoft）HTTP阻止的450状态代码的示例，用于信息和测试。</p>
</li>
<li><p>451 Unavailable For Legal Reasons<br>该访问因法律的要求而被拒绝，由IETF在2015核准后新增加。</p>
</li>
<li><p>494 Request Header Too Large<br>在错误代码431提出之前Nginx上使用的扩展HTTP代码。</p>
</li>
</ul>
<br>

<h2 id="5xx-服务器错误"><a href="#5xx-服务器错误" class="headerlink" title="5xx-服务器错误"></a>5xx-服务器错误</h2><p>表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。除非这是一个HEAD请求，否则服务器应当包含一个解释当前错误状态以及这个状况是临时的还是永久的解释信息实体。浏览器应当向用户展示任何在当前响应中被包含的实体。这些状态码适用于任何响应方法。</p>
<ul>
<li><p>500 Internal Server Error<br>通用错误消息，服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。没有给出具体错误信息。</p>
</li>
<li><p>501 Not Implemented<br>服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。（例如，网络服务API的新功能）</p>
</li>
<li><p>502 Bad Gateway<br>作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。</p>
</li>
<li><p>503 Service Unavailable<br>由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是暂时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个Retry-After头用以标明这个延迟时间。如果没有给出这个Retry-After信息，那么客户端应当以处理500响应的方式处理它。</p>
</li>
<li><p>504 Gateway Timeout<br>作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。<br>注意：某些代理服务器在DNS查询超时时会返回400或者500错误。</p>
</li>
<li><p>505 HTTP Version Not Supported<br>服务器不支持，或者拒绝支持在请求中使用的HTTP版本。[63]这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体。</p>
</li>
<li><p>506 Variant Also Negotiates（RFC 2295）<br>由《透明内容协商协议》（RFC 2295）扩展，代表服务器存在内部配置错误，被请求的协商变元资源被配置为在透明内容协商中使用自己，因此在一个协商处理中不是一个合适的重点。</p>
</li>
<li><p>507 Insufficient Storage（WebDAV；RFC 4918）<br>服务器无法存储完成请求所必须的内容。这个状况被认为是临时的。</p>
</li>
<li><p>508 Loop Detected （WebDAV；RFC 5842）<br>服务器在处理请求时陷入死循环。 （可代替 208状态码）</p>
</li>
<li><p>510 Not Extended（RFC 2774）<br>获取资源所需要的策略并没有被满足。</p>
</li>
<li><p>511 Network Authentication Required （RFC 6585）<br>客户端需要进行身份验证才能获得网络访问权限，旨在限制用户群访问特定网络。（例如连接WiFi热点时的强制网络门户）</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Http</category>
      </categories>
      <tags>
        <tag>HttpCode</tag>
      </tags>
  </entry>
</search>
